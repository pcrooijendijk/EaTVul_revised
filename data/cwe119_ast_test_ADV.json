{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64b_badSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 100 ] dataBuffer ; VAR_DECL 4 wchar_t [ 100 ] dataBuffer TYPE 5 wchar_t [ 100 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 data LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64b_badSink ( & data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64b_badSink ( & data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64b_badSink ( & data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64b_badSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64b_goodG2BSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 100 ] dataBuffer ; VAR_DECL 4 wchar_t [ 100 ] dataBuffer TYPE 5 wchar_t [ 100 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 data LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 50 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 50 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64b_goodG2BSink ( & data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64b_goodG2BSink ( & data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64b_goodG2BSink ( & data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 0, "project": "cwe119_ast_vul_function_test_adv_114", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_02_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_02_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; VAR_DECL 4 char [ 100 ] dataBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 memset ( data , 'A' , 100 - 1 ) ; EXPR 7 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 8 memset ( data , 'A' , 100 - 1 ) CALLEE 9 memset LEAF_NODE 10 memset LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 'A' FIELD 10 'A' LEAF_NODE 11 'A' LEAF_NODE 9 , ARGUMENT 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 data [ 100 - 1 ] = '\\0' ; EXPR 7 data [ 100 - 1 ] = '\\0' ASSIGN 8 data [ 100 - 1 ] = '\\0' LVAL 9 data [ 100 - 1 ] FIELD 10 data [ 100 - 1 ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 100 - 1 FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; EXPR 5 memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) FUNCTION_CALL 6 memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) CALLEE 7 memmove LEAF_NODE 8 memmove LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( data ) * sizeof ( char ) FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 8 * FUNCTION_CALL 8 sizeof ( char ) CALLEE 9 sizeof LEAF_NODE 10 sizeof LEAF_NODE 9 ( ARGUMENT 9 char FIELD 10 char LEAF_NODE 11 char LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 50 - 1 ] = '\\0' ; EXPR 5 dest [ 50 - 1 ] = '\\0' ASSIGN 6 dest [ 50 - 1 ] = '\\0' LVAL 7 dest [ 50 - 1 ] FIELD 8 dest [ 50 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; VAR_DECL 4 char [ 100 ] dataBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 memset ( data , 'A' , 50 - 1 ) ; EXPR 7 memset ( data , 'A' , 50 - 1 ) FUNCTION_CALL 8 memset ( data , 'A' , 50 - 1 ) CALLEE 9 memset LEAF_NODE 10 memset LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 'A' FIELD 10 'A' LEAF_NODE 11 'A' LEAF_NODE 9 , ARGUMENT 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 data [ 50 - 1 ] = '\\0' ; EXPR 7 data [ 50 - 1 ] = '\\0' ASSIGN 8 data [ 50 - 1 ] = '\\0' LVAL 9 data [ 50 - 1 ] FIELD 10 data [ 50 - 1 ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 50 - 1 FIELD 12 50 LEAF_NODE 13 50 LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; EXPR 5 memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) FUNCTION_CALL 6 memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) CALLEE 7 memmove LEAF_NODE 8 memmove LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( data ) * sizeof ( char ) FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 8 * FUNCTION_CALL 8 sizeof ( char ) CALLEE 9 sizeof LEAF_NODE 10 sizeof LEAF_NODE 9 ( ARGUMENT 9 char FIELD 10 char LEAF_NODE 11 char LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 50 - 1 ] = '\\0' ; EXPR 5 dest [ 50 - 1 ] = '\\0' ASSIGN 6 dest [ 50 - 1 ] = '\\0' LVAL 7 dest [ 50 - 1 ] FIELD 8 dest [ 50 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; VAR_DECL 4 char [ 100 ] dataBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 memset ( data , 'A' , 50 - 1 ) ; EXPR 7 memset ( data , 'A' , 50 - 1 ) FUNCTION_CALL 8 memset ( data , 'A' , 50 - 1 ) CALLEE 9 memset LEAF_NODE 10 memset LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 'A' FIELD 10 'A' LEAF_NODE 11 'A' LEAF_NODE 9 , ARGUMENT 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 data [ 50 - 1 ] = '\\0' ; EXPR 7 data [ 50 - 1 ] = '\\0' ASSIGN 8 data [ 50 - 1 ] = '\\0' LVAL 9 data [ 50 - 1 ] FIELD 10 data [ 50 - 1 ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 50 - 1 FIELD 12 50 LEAF_NODE 13 50 LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; EXPR 5 memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) FUNCTION_CALL 6 memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) CALLEE 7 memmove LEAF_NODE 8 memmove LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( data ) * sizeof ( char ) FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 8 * FUNCTION_CALL 8 sizeof ( char ) CALLEE 9 sizeof LEAF_NODE 10 sizeof LEAF_NODE 9 ( ARGUMENT 9 char FIELD 10 char LEAF_NODE 11 char LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 50 - 1 ] = '\\0' ; EXPR 5 dest [ 50 - 1 ] = '\\0' ASSIGN 6 dest [ 50 - 1 ] = '\\0' LVAL 7 dest [ 50 - 1 ] FIELD 8 dest [ 50 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_02_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_02_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_02_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_02_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_02_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_02_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_02_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_02_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_02_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_02_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_02_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_02_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 1, "project": "cwe119_ast_vul_function_test_adv_26", "target": 1}
{"func": "SIMPLE_DECL 1 struct CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_base BASE_CLASSES { bool action ( ) { STATEMENTS } ; bool action ( bool a ) { STATEMENTS } ; bool action ( bool a , bool b ) { STATEMENTS } ; bool action ( bool a , bool b , bool c ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } ; CLASS_DEF 2 struct CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_base BASE_CLASSES { bool action ( ) { STATEMENTS } ; bool action ( bool a ) { STATEMENTS } ; bool action ( bool a , bool b ) { STATEMENTS } ; bool action ( bool a , bool b , bool c ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } CLASS_DEF 3 struct CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_base BASE_CLASSES { bool action ( ) { STATEMENTS } ; bool action ( bool a ) { STATEMENTS } ; bool action ( bool a , bool b ) { STATEMENTS } ; bool action ( bool a , bool b , bool c ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } LEAF_NODE 4 struct CLASS_NAME 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_base LEAF_NODE 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_base LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 bool action ( ) { STATEMENTS } ; bool action ( bool a ) { STATEMENTS } ; bool action ( bool a , bool b ) { STATEMENTS } ; bool action ( bool a , bool b , bool c ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; FUNCTION_DEF 5 RETURN_TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool FUNCTION_NAME 6 action LEAF_NODE 7 action PARAMETER_LIST 6 ( ) LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 RETURN_TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool FUNCTION_NAME 6 action LEAF_NODE 7 action PARAMETER_LIST 6 ( bool a ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 RETURN_TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool FUNCTION_NAME 6 action LEAF_NODE 7 action PARAMETER_LIST 6 ( bool a , bool b ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 RETURN_TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool FUNCTION_NAME 6 action LEAF_NODE 7 action PARAMETER_LIST 6 ( bool a , bool b , bool c ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 RETURN_TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool FUNCTION_NAME 6 action LEAF_NODE 7 action PARAMETER_LIST 6 ( bool a , bool b , bool c , bool d ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 , PARAMETER_DECL 7 bool d TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 d LEAF_NODE 9 d LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 RETURN_TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool FUNCTION_NAME 6 action LEAF_NODE 7 action PARAMETER_LIST 6 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 , PARAMETER_DECL 7 bool d TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 d LEAF_NODE 9 d LEAF_NODE 7 , PARAMETER_DECL 7 bool e TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 e LEAF_NODE 9 e LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B : CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_base { RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } ; CLASS_DEF 2 struct CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B : CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_base { RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } CLASS_DEF 3 struct CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B : CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_base { RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } LEAF_NODE 4 struct CLASS_NAME 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B LEAF_NODE 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B BASE_CLASSES 4 : CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_base LEAF_NODE 5 : LEAF_NODE 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_base LEAF_NODE 4 { CLASS_CONTENT 4 RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B PARAMETER_LIST 6 ( ) LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B PARAMETER_LIST 6 ( bool a ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B PARAMETER_LIST 6 ( bool a , bool b ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B PARAMETER_LIST 6 ( bool a , bool b , bool c ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B PARAMETER_LIST 6 ( bool a , bool b , bool c , bool d ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 , PARAMETER_DECL 7 bool d TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 d LEAF_NODE 9 d LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B PARAMETER_LIST 6 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 , PARAMETER_DECL 7 bool d TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 d LEAF_NODE 9 d LEAF_NODE 7 , PARAMETER_DECL 7 bool e TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 e LEAF_NODE 9 e LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad : CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_base { RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } ; CLASS_DEF 2 struct CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad : CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_base { RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } CLASS_DEF 3 struct CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad : CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_base { RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } LEAF_NODE 4 struct CLASS_NAME 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad LEAF_NODE 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad BASE_CLASSES 4 : CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_base LEAF_NODE 5 : LEAF_NODE 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_base LEAF_NODE 4 { CLASS_CONTENT 4 RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad PARAMETER_LIST 6 ( ) LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad PARAMETER_LIST 6 ( bool a ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad PARAMETER_LIST 6 ( bool a , bool b ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad PARAMETER_LIST 6 ( bool a , bool b , bool c ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad PARAMETER_LIST 6 ( bool a , bool b , bool c , bool d ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 , PARAMETER_DECL 7 bool d TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 d LEAF_NODE 9 d LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad PARAMETER_LIST 6 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 , PARAMETER_DECL 7 bool d TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 d LEAF_NODE 9 d LEAF_NODE 7 , PARAMETER_DECL 7 bool e TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 e LEAF_NODE 9 e LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82 { void bad ( ) { char * data ; data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\\0' ; CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_base * baseObject = new CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ; baseObject -> action ( data ) ; delete baseObject ; } static void goodG2B ( ) { char * data ; data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\\0' ; CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_base * baseObject = new CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ; baseObject -> action ( data ) ; delete baseObject ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 6 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( char ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( data , 'A' , 100 - 1 ) ; EXPR 5 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 6 memset ( data , 'A' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 'A' FIELD 8 'A' LEAF_NODE 9 'A' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 100 - 1 ] = '\\0' ; EXPR 5 data [ 100 - 1 ] = '\\0' ASSIGN 6 data [ 100 - 1 ] = '\\0' LVAL 7 data [ 100 - 1 ] FIELD 8 data [ 100 - 1 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; LEAF_NODE 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_base LEAF_NODE 4 * LEAF_NODE 4 baseObject LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad ; EXPR 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad FIELD 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_bad LEAF_NODE 5 ; EXPR_STATEMENT 4 baseObject -> action ( data ) ; EXPR 5 baseObject -> action ( data ) FUNCTION_CALL 6 baseObject -> action ( data ) CALLEE 7 baseObject -> action LEAF_NODE 8 baseObject LEAF_NODE 8 -> LEAF_NODE 8 action LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 delete EXPR_STATEMENT 4 baseObject ; EXPR 5 baseObject FIELD 6 baseObject LEAF_NODE 7 baseObject LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 6 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( char ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( data , 'A' , 50 - 1 ) ; EXPR 5 memset ( data , 'A' , 50 - 1 ) FUNCTION_CALL 6 memset ( data , 'A' , 50 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 'A' FIELD 8 'A' LEAF_NODE 9 'A' LEAF_NODE 7 , ARGUMENT 7 50 - 1 FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 50 - 1 ] = '\\0' ; EXPR 5 data [ 50 - 1 ] = '\\0' ASSIGN 6 data [ 50 - 1 ] = '\\0' LVAL 7 data [ 50 - 1 ] FIELD 8 data [ 50 - 1 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; LEAF_NODE 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_base LEAF_NODE 4 * LEAF_NODE 4 baseObject LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B ; EXPR 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B FIELD 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82_goodG2B LEAF_NODE 5 ; EXPR_STATEMENT 4 baseObject -> action ( data ) ; EXPR 5 baseObject -> action ( data ) FUNCTION_CALL 6 baseObject -> action ( data ) CALLEE 7 baseObject -> action LEAF_NODE 8 baseObject LEAF_NODE 8 -> LEAF_NODE 8 action LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 delete EXPR_STATEMENT 4 baseObject ; EXPR 5 baseObject FIELD 6 baseObject LEAF_NODE 7 baseObject LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_82 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 2, "project": "cwe119_ast_vul_function_test_adv_136", "target": 1}
{"func": "USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_72 { void badSink ( vector < wchar_t * > dataVector ) { STATEMENTS } ; void bad ( ) { wchar_t * data ; vector < wchar_t * > dataVector ; wchar_t [ 50 ] dataBadBuffer ; wchar_t [ 100 ] dataGoodBuffer ; data = dataBadBuffer ; data [ 0 ] = L '\\0' ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; badSink ( dataVector ) ; } void goodG2BSink ( vector < wchar_t * > dataVector ) { STATEMENTS } ; static void goodG2B ( ) { wchar_t * data ; vector < wchar_t * > dataVector ; wchar_t [ 50 ] dataBadBuffer ; wchar_t [ 100 ] dataGoodBuffer ; data = dataGoodBuffer ; data [ 0 ] = L '\\0' ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; goodG2BSink ( dataVector ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_72 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( vector < wchar_t * > dataVector ) LEAF_NODE 4 ( PARAMETER_DECL 4 vector < wchar_t * > dataVector TYPE 5 vector < wchar_t * > TYPE_NAME 6 vector < wchar_t * > LEAF_NODE 7 vector LEAF_NODE 7 < LEAF_NODE 7 wchar_t LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataVector LEAF_NODE 6 dataVector LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 vector < wchar_t * > dataVector ; VAR_DECL 5 vector < wchar_t * > dataVector TYPE 6 vector < wchar_t * > TYPE_NAME 7 vector < wchar_t * > LEAF_NODE 8 vector LEAF_NODE 8 < LEAF_NODE 8 wchar_t LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataVector LEAF_NODE 7 dataVector LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t [ 50 ] dataBadBuffer ; VAR_DECL 5 wchar_t [ 50 ] dataBadBuffer TYPE 6 wchar_t [ 50 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dataBadBuffer LEAF_NODE 7 dataBadBuffer LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t [ 100 ] dataGoodBuffer ; VAR_DECL 5 wchar_t [ 100 ] dataGoodBuffer TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 dataGoodBuffer LEAF_NODE 7 dataGoodBuffer LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataBadBuffer ; EXPR 5 data = dataBadBuffer ASSIGN 6 data = dataBadBuffer LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataBadBuffer FIELD 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 0 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( dataVector ) ; EXPR 5 badSink ( dataVector ) FUNCTION_CALL 6 badSink ( dataVector ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( ARGUMENT 7 dataVector FIELD 8 dataVector LEAF_NODE 9 dataVector LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( vector < wchar_t * > dataVector ) LEAF_NODE 4 ( PARAMETER_DECL 4 vector < wchar_t * > dataVector TYPE 5 vector < wchar_t * > TYPE_NAME 6 vector < wchar_t * > LEAF_NODE 7 vector LEAF_NODE 7 < LEAF_NODE 7 wchar_t LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataVector LEAF_NODE 6 dataVector LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 vector < wchar_t * > dataVector ; VAR_DECL 5 vector < wchar_t * > dataVector TYPE 6 vector < wchar_t * > TYPE_NAME 7 vector < wchar_t * > LEAF_NODE 8 vector LEAF_NODE 8 < LEAF_NODE 8 wchar_t LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataVector LEAF_NODE 7 dataVector LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t [ 50 ] dataBadBuffer ; VAR_DECL 5 wchar_t [ 50 ] dataBadBuffer TYPE 6 wchar_t [ 50 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dataBadBuffer LEAF_NODE 7 dataBadBuffer LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t [ 100 ] dataGoodBuffer ; VAR_DECL 5 wchar_t [ 100 ] dataGoodBuffer TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 dataGoodBuffer LEAF_NODE 7 dataGoodBuffer LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataGoodBuffer ; EXPR 5 data = dataGoodBuffer ASSIGN 6 data = dataGoodBuffer LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataGoodBuffer FIELD 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 0 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( dataVector ) ; EXPR 5 goodG2BSink ( dataVector ) FUNCTION_CALL 6 goodG2BSink ( dataVector ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( ARGUMENT 7 dataVector FIELD 8 dataVector LEAF_NODE 9 dataVector LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_72 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_72 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 3, "project": "cwe119_ast_vul_function_test_adv_127", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_10_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_10_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; SIMPLE_DECL 3 int globalTrue ; VAR_DECL 4 int globalTrue TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalTrue LEAF_NODE 6 globalTrue LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalTrue EXPR 5 globalTrue FIELD 6 globalTrue LEAF_NODE 7 globalTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 memset ( data , 'A' , 100 - 1 ) ; EXPR 7 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 8 memset ( data , 'A' , 100 - 1 ) CALLEE 9 memset LEAF_NODE 10 memset LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 'A' FIELD 10 'A' LEAF_NODE 11 'A' LEAF_NODE 9 , ARGUMENT 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 data [ 100 - 1 ] = '\\0' ; EXPR 7 data [ 100 - 1 ] = '\\0' ASSIGN 8 data [ 100 - 1 ] = '\\0' LVAL 9 data [ 100 - 1 ] FIELD 10 data [ 100 - 1 ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 100 - 1 FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 strncat ( dest , data , strlen ( data ) ) ; EXPR 5 strncat ( dest , data , strlen ( data ) ) FUNCTION_CALL 6 strncat ( dest , data , strlen ( data ) ) CALLEE 7 strncat LEAF_NODE 8 strncat LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( data ) FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 50 - 1 ] = '\\0' ; EXPR 5 dest [ 50 - 1 ] = '\\0' ASSIGN 6 dest [ 50 - 1 ] = '\\0' LVAL 7 dest [ 50 - 1 ] FIELD 8 dest [ 50 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; SIMPLE_DECL 3 int globalFalse ; VAR_DECL 4 int globalFalse TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalFalse LEAF_NODE 6 globalFalse LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalFalse EXPR 5 globalFalse FIELD 6 globalFalse LEAF_NODE 7 globalFalse LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 memset ( data , 'A' , 50 - 1 ) ; EXPR 7 memset ( data , 'A' , 50 - 1 ) FUNCTION_CALL 8 memset ( data , 'A' , 50 - 1 ) CALLEE 9 memset LEAF_NODE 10 memset LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 'A' FIELD 10 'A' LEAF_NODE 11 'A' LEAF_NODE 9 , ARGUMENT 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 data [ 50 - 1 ] = '\\0' ; EXPR 7 data [ 50 - 1 ] = '\\0' ASSIGN 8 data [ 50 - 1 ] = '\\0' LVAL 9 data [ 50 - 1 ] FIELD 10 data [ 50 - 1 ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 50 - 1 FIELD 12 50 LEAF_NODE 13 50 LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 strncat ( dest , data , strlen ( data ) ) ; EXPR 5 strncat ( dest , data , strlen ( data ) ) FUNCTION_CALL 6 strncat ( dest , data , strlen ( data ) ) CALLEE 7 strncat LEAF_NODE 8 strncat LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( data ) FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 50 - 1 ] = '\\0' ; EXPR 5 dest [ 50 - 1 ] = '\\0' ASSIGN 6 dest [ 50 - 1 ] = '\\0' LVAL 7 dest [ 50 - 1 ] FIELD 8 dest [ 50 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; SIMPLE_DECL 3 int globalTrue ; VAR_DECL 4 int globalTrue TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalTrue LEAF_NODE 6 globalTrue LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalTrue EXPR 5 globalTrue FIELD 6 globalTrue LEAF_NODE 7 globalTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 memset ( data , 'A' , 50 - 1 ) ; EXPR 7 memset ( data , 'A' , 50 - 1 ) FUNCTION_CALL 8 memset ( data , 'A' , 50 - 1 ) CALLEE 9 memset LEAF_NODE 10 memset LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 'A' FIELD 10 'A' LEAF_NODE 11 'A' LEAF_NODE 9 , ARGUMENT 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 data [ 50 - 1 ] = '\\0' ; EXPR 7 data [ 50 - 1 ] = '\\0' ASSIGN 8 data [ 50 - 1 ] = '\\0' LVAL 9 data [ 50 - 1 ] FIELD 10 data [ 50 - 1 ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 50 - 1 FIELD 12 50 LEAF_NODE 13 50 LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 strncat ( dest , data , strlen ( data ) ) ; EXPR 5 strncat ( dest , data , strlen ( data ) ) FUNCTION_CALL 6 strncat ( dest , data , strlen ( data ) ) CALLEE 7 strncat LEAF_NODE 8 strncat LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( data ) FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 50 - 1 ] = '\\0' ; EXPR 5 dest [ 50 - 1 ] = '\\0' ASSIGN 6 dest [ 50 - 1 ] = '\\0' LVAL 7 dest [ 50 - 1 ] FIELD 8 dest [ 50 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_10_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_10_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_10_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_10_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_10_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_10_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_10_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_10_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_10_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_10_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_10_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_10_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 4, "project": "cwe119_ast_vul_function_test_adv_38", "target": 1}
{"func": "NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54 { void badSink_c ( int data ) { STATEMENTS } ; void badSink_b ( int data ) { badSink_c ( data ) ; } void goodG2BSink_c ( int data ) { STATEMENTS } ; void goodG2BSink_b ( int data ) { goodG2BSink_c ( data ) ; } void goodB2GSink_c ( int data ) { STATEMENTS } ; void goodB2GSink_b ( int data ) { goodB2GSink_c ( data ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink_c LEAF_NODE 4 badSink_c PARAMETER_LIST 3 ( int data ) LEAF_NODE 4 ( PARAMETER_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink_b LEAF_NODE 4 badSink_b PARAMETER_LIST 3 ( int data ) LEAF_NODE 4 ( PARAMETER_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 badSink_c ( data ) ; EXPR 5 badSink_c ( data ) FUNCTION_CALL 6 badSink_c ( data ) CALLEE 7 badSink_c LEAF_NODE 8 badSink_c LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink_c LEAF_NODE 4 goodG2BSink_c PARAMETER_LIST 3 ( int data ) LEAF_NODE 4 ( PARAMETER_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink_b LEAF_NODE 4 goodG2BSink_b PARAMETER_LIST 3 ( int data ) LEAF_NODE 4 ( PARAMETER_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2BSink_c ( data ) ; EXPR 5 goodG2BSink_c ( data ) FUNCTION_CALL 6 goodG2BSink_c ( data ) CALLEE 7 goodG2BSink_c LEAF_NODE 8 goodG2BSink_c LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodB2GSink_c LEAF_NODE 4 goodB2GSink_c PARAMETER_LIST 3 ( int data ) LEAF_NODE 4 ( PARAMETER_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodB2GSink_b LEAF_NODE 4 goodB2GSink_b PARAMETER_LIST 3 ( int data ) LEAF_NODE 4 ( PARAMETER_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodB2GSink_c ( data ) ; EXPR 5 goodB2GSink_c ( data ) FUNCTION_CALL 6 goodB2GSink_c ( data ) CALLEE 7 goodB2GSink_c LEAF_NODE 8 goodB2GSink_c LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 5, "project": "cwe119_ast_vul_function_test_adv_89", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_badSink LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_snprintf_54d_badSink LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_54d_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_badSink ( data ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_badSink ( data ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_badSink ( data ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_badSink LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_goodG2BSink LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_snprintf_54d_goodG2BSink LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_54d_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_goodG2BSink ( data ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_goodG2BSink ( data ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_goodG2BSink ( data ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_goodG2BSink LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_goodB2GSink LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_goodB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_snprintf_54d_goodB2GSink LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_54d_goodB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_goodB2GSink ( data ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_goodB2GSink ( data ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_goodB2GSink ( data ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_goodB2GSink LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_goodB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 6, "project": "cwe119_ast_vul_function_test_adv_152", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_52c_badSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_52c_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncat ( data , source , 100 ) ; EXPR 5 wcsncat ( data , source , 100 ) FUNCTION_CALL 6 wcsncat ( data , source , 100 ) CALLEE 7 wcsncat LEAF_NODE 8 wcsncat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_52c_goodG2BSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_52c_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncat ( data , source , 100 ) ; EXPR 5 wcsncat ( data , source , 100 ) FUNCTION_CALL 6 wcsncat ( data , source , 100 ) CALLEE 7 wcsncat LEAF_NODE 8 wcsncat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 7, "project": "cwe119_ast_vul_function_test_adv_94", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53d_badSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53d_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53c_badSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53c_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53d_badSink ( data ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53d_badSink ( data ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53d_badSink ( data ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53d_badSink LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53d_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53d_goodG2BSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53d_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53c_goodG2BSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53c_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53d_goodG2BSink ( data ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53d_goodG2BSink ( data ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53d_goodG2BSink ( data ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53d_goodG2BSink LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53d_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 8, "project": "cwe119_ast_vul_function_test_adv_175", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53b_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 50 ] dataBadBuffer ; VAR_DECL 4 wchar_t [ 50 ] dataBadBuffer TYPE 5 wchar_t [ 50 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 50 ] LEAF_NODE 7 [ FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 100 ] dataGoodBuffer ; VAR_DECL 4 wchar_t [ 100 ] dataGoodBuffer TYPE 5 wchar_t [ 100 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53b_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53b_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53b_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53b_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53b_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 50 ] dataBadBuffer ; VAR_DECL 4 wchar_t [ 50 ] dataBadBuffer TYPE 5 wchar_t [ 50 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 50 ] LEAF_NODE 7 [ FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 100 ] dataGoodBuffer ; VAR_DECL 4 wchar_t [ 100 ] dataGoodBuffer TYPE 5 wchar_t [ 100 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53b_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53b_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53b_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 9, "project": "cwe119_ast_vul_function_test_adv_149", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_72 { void badSink ( vector < wchar_t * > dataVector ) { STATEMENTS } ; void bad ( ) { wchar_t * data ; vector < wchar_t * > dataVector ; wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L 'A' , 100 - 1 ) ; data [ 100 - 1 ] = L '\\0' ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; badSink ( dataVector ) ; } void goodG2BSink ( vector < wchar_t * > dataVector ) { STATEMENTS } ; static void goodG2B ( ) { wchar_t * data ; vector < wchar_t * > dataVector ; wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L 'A' , 50 - 1 ) ; data [ 50 - 1 ] = L '\\0' ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; goodG2BSink ( dataVector ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_72 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( vector < wchar_t * > dataVector ) LEAF_NODE 4 ( PARAMETER_DECL 4 vector < wchar_t * > dataVector TYPE 5 vector < wchar_t * > TYPE_NAME 6 vector < wchar_t * > LEAF_NODE 7 vector LEAF_NODE 7 < LEAF_NODE 7 wchar_t LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataVector LEAF_NODE 6 dataVector LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 vector < wchar_t * > dataVector ; VAR_DECL 5 vector < wchar_t * > dataVector TYPE 6 vector < wchar_t * > TYPE_NAME 7 vector < wchar_t * > LEAF_NODE 8 vector LEAF_NODE 8 < LEAF_NODE 8 wchar_t LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataVector LEAF_NODE 7 dataVector LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 5 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 dataBuffer LEAF_NODE 7 dataBuffer LEAF_NODE 6 ; INIT 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 7 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 8 dataBuffer NAME 9 dataBuffer LEAF_NODE 10 dataBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 9 ( TYPE_NAME 9 wchar_t LEAF_NODE 10 wchar_t LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 10 ALLOCA LEAF_NODE 11 ALLOCA LEAF_NODE 10 ( ARGUMENT 10 100 * sizeof ( wchar_t ) FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( wchar_t ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 wchar_t FIELD 13 wchar_t LEAF_NODE 14 wchar_t LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataBuffer ; EXPR 5 data = dataBuffer ASSIGN 6 data = dataBuffer LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataBuffer FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'A' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( dataVector ) ; EXPR 5 badSink ( dataVector ) FUNCTION_CALL 6 badSink ( dataVector ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( ARGUMENT 7 dataVector FIELD 8 dataVector LEAF_NODE 9 dataVector LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( vector < wchar_t * > dataVector ) LEAF_NODE 4 ( PARAMETER_DECL 4 vector < wchar_t * > dataVector TYPE 5 vector < wchar_t * > TYPE_NAME 6 vector < wchar_t * > LEAF_NODE 7 vector LEAF_NODE 7 < LEAF_NODE 7 wchar_t LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataVector LEAF_NODE 6 dataVector LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 vector < wchar_t * > dataVector ; VAR_DECL 5 vector < wchar_t * > dataVector TYPE 6 vector < wchar_t * > TYPE_NAME 7 vector < wchar_t * > LEAF_NODE 8 vector LEAF_NODE 8 < LEAF_NODE 8 wchar_t LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataVector LEAF_NODE 7 dataVector LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 5 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 dataBuffer LEAF_NODE 7 dataBuffer LEAF_NODE 6 ; INIT 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 7 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 8 dataBuffer NAME 9 dataBuffer LEAF_NODE 10 dataBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 9 ( TYPE_NAME 9 wchar_t LEAF_NODE 10 wchar_t LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 10 ALLOCA LEAF_NODE 11 ALLOCA LEAF_NODE 10 ( ARGUMENT 10 100 * sizeof ( wchar_t ) FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( wchar_t ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 wchar_t FIELD 13 wchar_t LEAF_NODE 14 wchar_t LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataBuffer ; EXPR 5 data = dataBuffer ASSIGN 6 data = dataBuffer LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataBuffer FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'A' LEAF_NODE 4 , LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( dataVector ) ; EXPR 5 goodG2BSink ( dataVector ) FUNCTION_CALL 6 goodG2BSink ( dataVector ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( ARGUMENT 7 dataVector FIELD 8 dataVector LEAF_NODE 9 dataVector LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_72 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_72 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 10, "project": "cwe119_ast_vul_function_test_adv_142", "target": 1}
{"func": "NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_53 { void badSink_b ( char * data ) { STATEMENTS } ; void bad ( ) { char * data ; data = NULL ; data = new char [ 10 ] ; badSink_b ( data ) ; } void goodG2BSink_b ( char * data ) { STATEMENTS } ; static void goodG2B ( ) { char * data ; data = NULL ; data = new char [ 10 + 1 ] ; goodG2BSink_b ( data ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_53 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink_b LEAF_NODE 4 badSink_b PARAMETER_LIST 3 ( char * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 char [ 10 ] ; EXPR 5 char [ 10 ] FIELD 6 char [ 10 ] LEAF_NODE 7 char LEAF_NODE 7 [ EXPR 7 10 FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 7 ] LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink_b ( data ) ; EXPR 5 badSink_b ( data ) FUNCTION_CALL 6 badSink_b ( data ) CALLEE 7 badSink_b LEAF_NODE 8 badSink_b LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink_b LEAF_NODE 4 goodG2BSink_b PARAMETER_LIST 3 ( char * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 char [ 10 + 1 ] ; EXPR 5 char [ 10 + 1 ] FIELD 6 char [ 10 + 1 ] LEAF_NODE 7 char LEAF_NODE 7 [ EXPR 7 10 + 1 FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ] LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink_b ( data ) ; EXPR 5 goodG2BSink_b ( data ) FUNCTION_CALL 6 goodG2BSink_b ( data ) CALLEE 7 goodG2BSink_b LEAF_NODE 8 goodG2BSink_b LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_53 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_53 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 11, "project": "cwe119_ast_vul_function_test_adv_53", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_72 { void badSink ( vector < char * > dataVector ) { char * data ; data = dataVector [ 2 ] ; { char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } void goodG2BSink ( vector < char * > dataVector ) { char * data ; data = dataVector [ 2 ] ; { char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_72 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( vector < char * > dataVector ) LEAF_NODE 4 ( PARAMETER_DECL 4 vector < char * > dataVector TYPE 5 vector < char * > TYPE_NAME 6 vector < char * > LEAF_NODE 7 vector LEAF_NODE 7 < LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataVector LEAF_NODE 6 dataVector LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = dataVector [ 2 ] ; VAR_DECL 5 char * data ; data = dataVector [ 2 ] TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataVector [ 2 ] ASSIGN 7 data = dataVector [ 2 ] LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataVector [ 2 ] FIELD 9 dataVector [ 2 ] LEAF_NODE 10 dataVector LEAF_NODE 10 [ EXPR 10 2 FIELD 11 2 LEAF_NODE 12 2 LEAF_NODE 10 ] LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 strcpy ( data , source ) ; EXPR 6 strcpy ( data , source ) FUNCTION_CALL 7 strcpy ( data , source ) CALLEE 8 strcpy LEAF_NODE 9 strcpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( vector < char * > dataVector ) LEAF_NODE 4 ( PARAMETER_DECL 4 vector < char * > dataVector TYPE 5 vector < char * > TYPE_NAME 6 vector < char * > LEAF_NODE 7 vector LEAF_NODE 7 < LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataVector LEAF_NODE 6 dataVector LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = dataVector [ 2 ] ; VAR_DECL 5 char * data ; data = dataVector [ 2 ] TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataVector [ 2 ] ASSIGN 7 data = dataVector [ 2 ] LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataVector [ 2 ] FIELD 9 dataVector [ 2 ] LEAF_NODE 10 dataVector LEAF_NODE 10 [ EXPR 10 2 FIELD 11 2 LEAF_NODE 12 2 LEAF_NODE 10 ] LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 strcpy ( data , source ) ; EXPR 6 strcpy ( data , source ) FUNCTION_CALL 7 strcpy ( data , source ) CALLEE 8 strcpy LEAF_NODE 9 strcpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 12, "project": "cwe119_ast_vul_function_test_adv_118", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int staticFive ; staticFive = 5 ; VAR_DECL 2 int staticFive ; staticFive = 5 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticFive LEAF_NODE 4 staticFive LEAF_NODE 3 ; INIT 3 staticFive = 5 ASSIGN 4 staticFive = 5 LVAL 5 staticFive NAME 6 staticFive LEAF_NODE 7 staticFive ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 5 FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_07_bad LEAF_NODE 3 CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_07_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 dataBuffer LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 dataBuffer LEAF_NODE 3 [ LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBuffer - 8 ; EXPR 7 data = dataBuffer - 8 ASSIGN 8 data = dataBuffer - 8 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer - 8 FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 10 - FIELD 10 8 LEAF_NODE 11 8 LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( data , source , 100 - 1 ) ; EXPR 5 wcsncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 wcsncpy ( data , source , 100 - 1 ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 dataBuffer LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 dataBuffer LEAF_NODE 3 [ LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive != 5 EXPR 5 staticFive != 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBuffer ; EXPR 7 data = dataBuffer ASSIGN 8 data = dataBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( data , source , 100 - 1 ) ; EXPR 5 wcsncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 wcsncpy ( data , source , 100 - 1 ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 dataBuffer LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 dataBuffer LEAF_NODE 3 [ LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBuffer ; EXPR 7 data = dataBuffer ASSIGN 8 data = dataBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( data , source , 100 - 1 ) ; EXPR 5 wcsncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 wcsncpy ( data , source , 100 - 1 ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_07_good LEAF_NODE 3 CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_07_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_07_good ( ) ; EXPR 4 CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_07_good ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_07_good ( ) CALLEE 6 CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_07_good LEAF_NODE 7 CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_07_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_07_bad ( ) ; EXPR 4 CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_07_bad ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_07_bad ( ) CALLEE 6 CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_07_bad LEAF_NODE 7 CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_07_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 13, "project": "cwe119_ast_vul_function_test_adv_30", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_alloca_cpy_54d_badSink LEAF_NODE 3 CWE124_Buffer_Underwrite__char_alloca_cpy_54d_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_alloca_cpy_54c_badSink LEAF_NODE 3 CWE124_Buffer_Underwrite__char_alloca_cpy_54c_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__char_alloca_cpy_54d_badSink ( data ) ; EXPR 4 CWE124_Buffer_Underwrite__char_alloca_cpy_54d_badSink ( data ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__char_alloca_cpy_54d_badSink ( data ) CALLEE 6 CWE124_Buffer_Underwrite__char_alloca_cpy_54d_badSink LEAF_NODE 7 CWE124_Buffer_Underwrite__char_alloca_cpy_54d_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_alloca_cpy_54d_goodG2BSink LEAF_NODE 3 CWE124_Buffer_Underwrite__char_alloca_cpy_54d_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_alloca_cpy_54c_goodG2BSink LEAF_NODE 3 CWE124_Buffer_Underwrite__char_alloca_cpy_54c_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__char_alloca_cpy_54d_goodG2BSink ( data ) ; EXPR 4 CWE124_Buffer_Underwrite__char_alloca_cpy_54d_goodG2BSink ( data ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__char_alloca_cpy_54d_goodG2BSink ( data ) CALLEE 6 CWE124_Buffer_Underwrite__char_alloca_cpy_54d_goodG2BSink LEAF_NODE 7 CWE124_Buffer_Underwrite__char_alloca_cpy_54d_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 14, "project": "cwe119_ast_vul_function_test_adv_140", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65b_badSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 char LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65b_badSink ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65b_badSink FIELD 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65b_badSink LEAF_NODE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65b_badSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 50 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 50 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 50 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 50 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 50 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 50 * sizeof ( char ) FIELD 9 50 LEAF_NODE 10 50 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65b_goodG2BSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 char LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65b_goodG2BSink ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65b_goodG2BSink FIELD 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65b_goodG2BSink LEAF_NODE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65b_goodG2BSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 15, "project": "cwe119_ast_vul_function_test_adv_166", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_cpy_66 { void badSink ( char * [ ] dataArray ) { char * data ; data = dataArray [ 2 ] ; { char [ 10 + 1 ] source ; source = SRC_STRING ; strcpy ( data , source ) ; printLine ( data ) ; delete [ ] data ; } } void goodG2BSink ( char * [ ] dataArray ) { char * data ; data = dataArray [ 2 ] ; { char [ 10 + 1 ] source ; source = SRC_STRING ; strcpy ( data , source ) ; printLine ( data ) ; delete [ ] data ; } } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_cpy_66 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( char * [ ] dataArray ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * [ ] dataArray TYPE 5 char * [ ] TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * TYPE_SUFFIX 6 [ ] LEAF_NODE 7 [ LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = dataArray [ 2 ] ; VAR_DECL 5 char * data ; data = dataArray [ 2 ] TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataArray [ 2 ] ASSIGN 7 data = dataArray [ 2 ] LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataArray [ 2 ] FIELD 9 dataArray [ 2 ] LEAF_NODE 10 dataArray LEAF_NODE 10 [ EXPR 10 2 FIELD 11 2 LEAF_NODE 12 2 LEAF_NODE 10 ] LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 6 char [ 10 + 1 ] source ; source = SRC_STRING TYPE 7 char [ 10 + 1 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 10 + 1 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 7 ; INIT 7 source = SRC_STRING ASSIGN 8 source = SRC_STRING LVAL 9 source NAME 10 source LEAF_NODE 11 source ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SRC_STRING FIELD 10 SRC_STRING LEAF_NODE 11 SRC_STRING LEAF_NODE 6 ; EXPR_STATEMENT 5 strcpy ( data , source ) ; EXPR 6 strcpy ( data , source ) FUNCTION_CALL 7 strcpy ( data , source ) CALLEE 8 strcpy LEAF_NODE 9 strcpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( char * [ ] dataArray ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * [ ] dataArray TYPE 5 char * [ ] TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * TYPE_SUFFIX 6 [ ] LEAF_NODE 7 [ LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = dataArray [ 2 ] ; VAR_DECL 5 char * data ; data = dataArray [ 2 ] TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataArray [ 2 ] ASSIGN 7 data = dataArray [ 2 ] LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataArray [ 2 ] FIELD 9 dataArray [ 2 ] LEAF_NODE 10 dataArray LEAF_NODE 10 [ EXPR 10 2 FIELD 11 2 LEAF_NODE 12 2 LEAF_NODE 10 ] LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 6 char [ 10 + 1 ] source ; source = SRC_STRING TYPE 7 char [ 10 + 1 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 10 + 1 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 7 ; INIT 7 source = SRC_STRING ASSIGN 8 source = SRC_STRING LVAL 9 source NAME 10 source LEAF_NODE 11 source ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SRC_STRING FIELD 10 SRC_STRING LEAF_NODE 11 SRC_STRING LEAF_NODE 6 ; EXPR_STATEMENT 5 strcpy ( data , source ) ; EXPR 6 strcpy ( data , source ) FUNCTION_CALL 7 strcpy ( data , source ) CALLEE 8 strcpy LEAF_NODE 9 strcpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 16, "project": "cwe119_ast_vul_function_test_adv_189", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_18_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_18_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; JUMP_STATEMENT 3 goto source ; KEYWORD 4 goto LEAF_NODE 5 goto DESTINATION 4 source LEAF_NODE 5 source LEAF_NODE 4 ; LABEL 3 source : LEAF_NODE 4 source LEAF_NODE 4 : EXPR_STATEMENT 3 memset ( data , 'A' , 100 - 1 ) ; EXPR 4 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( data , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 100 - 1 ] = '\\0' ; EXPR 4 data [ 100 - 1 ] = '\\0' ASSIGN 5 data [ 100 - 1 ] = '\\0' LVAL 6 data [ 100 - 1 ] FIELD 7 data [ 100 - 1 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 strcat ( dest , data ) ; EXPR 5 strcat ( dest , data ) FUNCTION_CALL 6 strcat ( dest , data ) CALLEE 7 strcat LEAF_NODE 8 strcat LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; JUMP_STATEMENT 3 goto source ; KEYWORD 4 goto LEAF_NODE 5 goto DESTINATION 4 source LEAF_NODE 5 source LEAF_NODE 4 ; LABEL 3 source : LEAF_NODE 4 source LEAF_NODE 4 : EXPR_STATEMENT 3 memset ( data , 'A' , 50 - 1 ) ; EXPR 4 memset ( data , 'A' , 50 - 1 ) FUNCTION_CALL 5 memset ( data , 'A' , 50 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 50 - 1 FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 50 - 1 ] = '\\0' ; EXPR 4 data [ 50 - 1 ] = '\\0' ASSIGN 5 data [ 50 - 1 ] = '\\0' LVAL 6 data [ 50 - 1 ] FIELD 7 data [ 50 - 1 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 50 - 1 FIELD 9 50 LEAF_NODE 10 50 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 strcat ( dest , data ) ; EXPR 5 strcat ( dest , data ) FUNCTION_CALL 6 strcat ( dest , data ) CALLEE 7 strcat LEAF_NODE 8 strcat LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_18_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_18_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_18_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_18_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_18_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_18_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_18_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_18_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_18_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_18_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_18_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_18_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 17, "project": "cwe119_ast_vul_function_test_adv_27", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; VAR_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ASSIGN 6 dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 ) * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 ) * sizeof ( char ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; VAR_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ASSIGN 6 dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 + 1 ) * sizeof ( char ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51b_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51b_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51b_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51b_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; VAR_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ASSIGN 6 dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 ) * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 ) * sizeof ( char ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; VAR_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ASSIGN 6 dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 + 1 ) * sizeof ( char ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51b_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51b_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51b_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 18, "project": "cwe119_ast_vul_function_test_adv_62", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_43 { void badSource ( char * & data ) { data = new char [ 10 ] ; } void bad ( ) { char * data ; data = NULL ; badSource ( data ) ; { char [ 10 + 1 ] source ; source = SRC_STRING ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; delete [ ] data ; } } static void goodG2BSource ( char * & data ) { data = new char [ 10 + 1 ] ; } static void goodG2B ( ) { char * data ; data = NULL ; goodG2BSource ( data ) ; { char [ 10 + 1 ] source ; source = SRC_STRING ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; delete [ ] data ; } } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_43 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSource LEAF_NODE 4 badSource PARAMETER_LIST 3 ( char * & data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * & data TYPE 5 char * & TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * & LEAF_NODE 7 * LEAF_NODE 7 & NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 char [ 10 ] ; EXPR 5 char [ 10 ] FIELD 6 char [ 10 ] LEAF_NODE 7 char LEAF_NODE 7 [ EXPR 7 10 FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 7 ] LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; EXPR_STATEMENT 4 badSource ( data ) ; EXPR 5 badSource ( data ) FUNCTION_CALL 6 badSource ( data ) CALLEE 7 badSource LEAF_NODE 8 badSource LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 6 char [ 10 + 1 ] source ; source = SRC_STRING TYPE 7 char [ 10 + 1 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 10 + 1 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 7 ; INIT 7 source = SRC_STRING ASSIGN 8 source = SRC_STRING LVAL 9 source NAME 10 source LEAF_NODE 11 source ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SRC_STRING FIELD 10 SRC_STRING LEAF_NODE 11 SRC_STRING LEAF_NODE 6 ; EXPR_STATEMENT 5 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; EXPR 6 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) FUNCTION_CALL 7 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) CALLEE 8 memmove LEAF_NODE 9 memmove LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 ( strlen ( source ) + 1 ) * sizeof ( char ) LEAF_NODE 9 ( FUNCTION_CALL 9 strlen ( source ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 source FIELD 11 source LEAF_NODE 12 source LEAF_NODE 10 ) LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ) LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSource LEAF_NODE 4 goodG2BSource PARAMETER_LIST 3 ( char * & data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * & data TYPE 5 char * & TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * & LEAF_NODE 7 * LEAF_NODE 7 & NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 char [ 10 + 1 ] ; EXPR 5 char [ 10 + 1 ] FIELD 6 char [ 10 + 1 ] LEAF_NODE 7 char LEAF_NODE 7 [ EXPR 7 10 + 1 FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ] LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSource ( data ) ; EXPR 5 goodG2BSource ( data ) FUNCTION_CALL 6 goodG2BSource ( data ) CALLEE 7 goodG2BSource LEAF_NODE 8 goodG2BSource LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 6 char [ 10 + 1 ] source ; source = SRC_STRING TYPE 7 char [ 10 + 1 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 10 + 1 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 7 ; INIT 7 source = SRC_STRING ASSIGN 8 source = SRC_STRING LVAL 9 source NAME 10 source LEAF_NODE 11 source ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SRC_STRING FIELD 10 SRC_STRING LEAF_NODE 11 SRC_STRING LEAF_NODE 6 ; EXPR_STATEMENT 5 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; EXPR 6 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) FUNCTION_CALL 7 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) CALLEE 8 memmove LEAF_NODE 9 memmove LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 ( strlen ( source ) + 1 ) * sizeof ( char ) LEAF_NODE 9 ( FUNCTION_CALL 9 strlen ( source ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 source FIELD 11 source LEAF_NODE 12 source LEAF_NODE 10 ) LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ) LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_43 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_43 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 19, "project": "cwe119_ast_vul_function_test_adv_6", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__malloc_char_cpy_54e_badSink LEAF_NODE 3 CWE127_Buffer_Underread__malloc_char_cpy_54e_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 * 2 ] dest ; VAR_DECL 5 char [ 100 * 2 ] dest TYPE 6 char [ 100 * 2 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 * 2 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 * FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( dest , 'C' , 100 * 2 - 1 ) ; EXPR 5 memset ( dest , 'C' , 100 * 2 - 1 ) FUNCTION_CALL 6 memset ( dest , 'C' , 100 * 2 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 * 2 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 * FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 100 * 2 - 1 ] = '\\0' ; EXPR 5 dest [ 100 * 2 - 1 ] = '\\0' ASSIGN 6 dest [ 100 * 2 - 1 ] = '\\0' LVAL 7 dest [ 100 * 2 - 1 ] FIELD 8 dest [ 100 * 2 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 100 * 2 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcpy ( dest , data ) ; EXPR 5 strcpy ( dest , data ) FUNCTION_CALL 6 strcpy ( dest , data ) CALLEE 7 strcpy LEAF_NODE 8 strcpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( dest ) ; EXPR 5 printLine ( dest ) FUNCTION_CALL 6 printLine ( dest ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__malloc_char_cpy_54e_goodG2BSink LEAF_NODE 3 CWE127_Buffer_Underread__malloc_char_cpy_54e_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 * 2 ] dest ; VAR_DECL 5 char [ 100 * 2 ] dest TYPE 6 char [ 100 * 2 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 * 2 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 * FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( dest , 'C' , 100 * 2 - 1 ) ; EXPR 5 memset ( dest , 'C' , 100 * 2 - 1 ) FUNCTION_CALL 6 memset ( dest , 'C' , 100 * 2 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 * 2 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 * FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 100 * 2 - 1 ] = '\\0' ; EXPR 5 dest [ 100 * 2 - 1 ] = '\\0' ASSIGN 6 dest [ 100 * 2 - 1 ] = '\\0' LVAL 7 dest [ 100 * 2 - 1 ] FIELD 8 dest [ 100 * 2 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 100 * 2 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcpy ( dest , data ) ; EXPR 5 strcpy ( dest , data ) FUNCTION_CALL 6 strcpy ( dest , data ) CALLEE 7 strcpy LEAF_NODE 8 strcpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( dest ) ; EXPR 5 printLine ( dest ) FUNCTION_CALL 6 printLine ( dest ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 20, "project": "cwe119_ast_vul_function_test_adv_112", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66b_badSink PARAMETER_LIST 2 ( char * [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * [ ] dataArray TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * [ 5 ] dataArray ; VAR_DECL 4 char * [ 5 ] dataArray TYPE 5 char * [ 5 ] TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * TYPE_SUFFIX 6 [ 5 ] LEAF_NODE 7 [ FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; VAR_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ASSIGN 6 dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 ) * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 ) * sizeof ( char ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; VAR_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ASSIGN 6 dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 + 1 ) * sizeof ( char ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 dataArray [ 2 ] = data ; EXPR 4 dataArray [ 2 ] = data ASSIGN 5 dataArray [ 2 ] = data LVAL 6 dataArray [ 2 ] FIELD 7 dataArray [ 2 ] LEAF_NODE 8 dataArray LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66b_badSink ( dataArray ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66b_badSink ( dataArray ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66b_badSink ( dataArray ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66b_badSink LEAF_NODE 6 ( ARGUMENT 6 dataArray FIELD 7 dataArray LEAF_NODE 8 dataArray LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66b_goodG2BSink PARAMETER_LIST 2 ( char * [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * [ ] dataArray TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * [ 5 ] dataArray ; VAR_DECL 4 char * [ 5 ] dataArray TYPE 5 char * [ 5 ] TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * TYPE_SUFFIX 6 [ 5 ] LEAF_NODE 7 [ FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; VAR_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ASSIGN 6 dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 ) * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 ) * sizeof ( char ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; VAR_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ASSIGN 6 dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 + 1 ) * sizeof ( char ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 dataArray [ 2 ] = data ; EXPR 4 dataArray [ 2 ] = data ASSIGN 5 dataArray [ 2 ] = data LVAL 6 dataArray [ 2 ] FIELD 7 dataArray [ 2 ] LEAF_NODE 8 dataArray LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66b_goodG2BSink ( dataArray ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66b_goodG2BSink ( dataArray ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66b_goodG2BSink ( dataArray ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 dataArray FIELD 7 dataArray LEAF_NODE 8 dataArray LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 21, "project": "cwe119_ast_vul_function_test_adv_143", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_54e_badSink LEAF_NODE 3 CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_54e_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( data , source , 100 - 1 ) ; EXPR 5 wcsncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 wcsncpy ( data , source , 100 - 1 ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_54e_goodG2BSink LEAF_NODE 3 CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_54e_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( data , source , 100 - 1 ) ; EXPR 5 wcsncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 wcsncpy ( data , source , 100 - 1 ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 22, "project": "cwe119_ast_vul_function_test_adv_180", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_declare_ncpy_54b_badSink LEAF_NODE 3 CWE124_Buffer_Underwrite__char_declare_ncpy_54b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_declare_ncpy_54_bad LEAF_NODE 3 CWE124_Buffer_Underwrite__char_declare_ncpy_54_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; VAR_DECL 4 char [ 100 ] dataBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer - 8 ; EXPR 4 data = dataBuffer - 8 ASSIGN 5 data = dataBuffer - 8 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer - 8 FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 7 - FIELD 7 8 LEAF_NODE 8 8 LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__char_declare_ncpy_54b_badSink ( data ) ; EXPR 4 CWE124_Buffer_Underwrite__char_declare_ncpy_54b_badSink ( data ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__char_declare_ncpy_54b_badSink ( data ) CALLEE 6 CWE124_Buffer_Underwrite__char_declare_ncpy_54b_badSink LEAF_NODE 7 CWE124_Buffer_Underwrite__char_declare_ncpy_54b_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_declare_ncpy_54b_goodG2BSink LEAF_NODE 3 CWE124_Buffer_Underwrite__char_declare_ncpy_54b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; VAR_DECL 4 char [ 100 ] dataBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__char_declare_ncpy_54b_goodG2BSink ( data ) ; EXPR 4 CWE124_Buffer_Underwrite__char_declare_ncpy_54b_goodG2BSink ( data ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__char_declare_ncpy_54b_goodG2BSink ( data ) CALLEE 6 CWE124_Buffer_Underwrite__char_declare_ncpy_54b_goodG2BSink LEAF_NODE 7 CWE124_Buffer_Underwrite__char_declare_ncpy_54b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_declare_ncpy_54_good LEAF_NODE 3 CWE124_Buffer_Underwrite__char_declare_ncpy_54_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__char_declare_ncpy_54_good ( ) ; EXPR 4 CWE124_Buffer_Underwrite__char_declare_ncpy_54_good ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__char_declare_ncpy_54_good ( ) CALLEE 6 CWE124_Buffer_Underwrite__char_declare_ncpy_54_good LEAF_NODE 7 CWE124_Buffer_Underwrite__char_declare_ncpy_54_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__char_declare_ncpy_54_bad ( ) ; EXPR 4 CWE124_Buffer_Underwrite__char_declare_ncpy_54_bad ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__char_declare_ncpy_54_bad ( ) CALLEE 6 CWE124_Buffer_Underwrite__char_declare_ncpy_54_bad LEAF_NODE 7 CWE124_Buffer_Underwrite__char_declare_ncpy_54_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 23, "project": "cwe119_ast_vul_function_test_adv_111", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE124_Buffer_Underwrite__char_alloca_cpy_73 { void badSink ( list < char * > dataList ) { STATEMENTS } ; void bad ( ) { char * data ; list < char * > dataList ; char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; memset ( dataBuffer , 'A' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = '\\0' ; data = dataBuffer - 8 ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; badSink ( dataList ) ; } void goodG2BSink ( list < char * > dataList ) { STATEMENTS } ; static void goodG2B ( ) { char * data ; list < char * > dataList ; char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; memset ( dataBuffer , 'A' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = '\\0' ; data = dataBuffer ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; goodG2BSink ( dataList ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE124_Buffer_Underwrite__char_alloca_cpy_73 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( list < char * > dataList ) LEAF_NODE 4 ( PARAMETER_DECL 4 list < char * > dataList TYPE 5 list < char * > TYPE_NAME 6 list < char * > LEAF_NODE 7 list LEAF_NODE 7 < LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataList LEAF_NODE 6 dataList LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 list < char * > dataList ; VAR_DECL 5 list < char * > dataList TYPE 6 list < char * > TYPE_NAME 7 list < char * > LEAF_NODE 8 list LEAF_NODE 8 < LEAF_NODE 8 char LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataList LEAF_NODE 7 dataList LEAF_NODE 5 ; SIMPLE_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 5 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 dataBuffer LEAF_NODE 7 dataBuffer LEAF_NODE 6 ; INIT 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 7 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 8 dataBuffer NAME 9 dataBuffer LEAF_NODE 10 dataBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 9 ( TYPE_NAME 9 char LEAF_NODE 10 char LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 10 ALLOCA LEAF_NODE 11 ALLOCA LEAF_NODE 10 ( ARGUMENT 10 100 * sizeof ( char ) FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( char ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 char FIELD 13 char LEAF_NODE 14 char LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 5 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 6 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 dataBuffer FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 7 , ARGUMENT 7 'A' FIELD 8 'A' LEAF_NODE 9 'A' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 5 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 6 dataBuffer [ 100 - 1 ] = '\\0' LVAL 7 dataBuffer [ 100 - 1 ] FIELD 8 dataBuffer [ 100 - 1 ] LEAF_NODE 9 dataBuffer LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataBuffer - 8 ; EXPR 5 data = dataBuffer - 8 ASSIGN 6 data = dataBuffer - 8 LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataBuffer - 8 FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 8 - FIELD 8 8 LEAF_NODE 9 8 LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( dataList ) ; EXPR 5 badSink ( dataList ) FUNCTION_CALL 6 badSink ( dataList ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( ARGUMENT 7 dataList FIELD 8 dataList LEAF_NODE 9 dataList LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( list < char * > dataList ) LEAF_NODE 4 ( PARAMETER_DECL 4 list < char * > dataList TYPE 5 list < char * > TYPE_NAME 6 list < char * > LEAF_NODE 7 list LEAF_NODE 7 < LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataList LEAF_NODE 6 dataList LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 list < char * > dataList ; VAR_DECL 5 list < char * > dataList TYPE 6 list < char * > TYPE_NAME 7 list < char * > LEAF_NODE 8 list LEAF_NODE 8 < LEAF_NODE 8 char LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataList LEAF_NODE 7 dataList LEAF_NODE 5 ; SIMPLE_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 5 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 dataBuffer LEAF_NODE 7 dataBuffer LEAF_NODE 6 ; INIT 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 7 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 8 dataBuffer NAME 9 dataBuffer LEAF_NODE 10 dataBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 9 ( TYPE_NAME 9 char LEAF_NODE 10 char LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 10 ALLOCA LEAF_NODE 11 ALLOCA LEAF_NODE 10 ( ARGUMENT 10 100 * sizeof ( char ) FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( char ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 char FIELD 13 char LEAF_NODE 14 char LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 5 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 6 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 dataBuffer FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 7 , ARGUMENT 7 'A' FIELD 8 'A' LEAF_NODE 9 'A' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 5 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 6 dataBuffer [ 100 - 1 ] = '\\0' LVAL 7 dataBuffer [ 100 - 1 ] FIELD 8 dataBuffer [ 100 - 1 ] LEAF_NODE 9 dataBuffer LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataBuffer ; EXPR 5 data = dataBuffer ASSIGN 6 data = dataBuffer LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataBuffer FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( dataList ) ; EXPR 5 goodG2BSink ( dataList ) FUNCTION_CALL 6 goodG2BSink ( dataList ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( ARGUMENT 7 dataList FIELD 8 dataList LEAF_NODE 9 dataList LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE124_Buffer_Underwrite__char_alloca_cpy_73 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE124_Buffer_Underwrite__char_alloca_cpy_73 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 24, "project": "cwe119_ast_vul_function_test_adv_160", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_73 { void badSink ( list < char * > dataList ) { char * data ; data = dataList . back ( ) ; { char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } void goodG2BSink ( list < char * > dataList ) { char * data ; data = dataList . back ( ) ; { char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_73 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( list < char * > dataList ) LEAF_NODE 4 ( PARAMETER_DECL 4 list < char * > dataList TYPE 5 list < char * > TYPE_NAME 6 list < char * > LEAF_NODE 7 list LEAF_NODE 7 < LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataList LEAF_NODE 6 dataList LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = dataList . back ( ) ; VAR_DECL 5 char * data ; data = dataList . back ( ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataList . back ( ) ASSIGN 7 data = dataList . back ( ) LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataList . back ( ) FUNCTION_CALL 9 dataList . back ( ) CALLEE 10 dataList . back LEAF_NODE 11 dataList LEAF_NODE 11 . LEAF_NODE 11 back LEAF_NODE 10 ( LEAF_NODE 10 ) LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 strcpy ( data , source ) ; EXPR 6 strcpy ( data , source ) FUNCTION_CALL 7 strcpy ( data , source ) CALLEE 8 strcpy LEAF_NODE 9 strcpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( list < char * > dataList ) LEAF_NODE 4 ( PARAMETER_DECL 4 list < char * > dataList TYPE 5 list < char * > TYPE_NAME 6 list < char * > LEAF_NODE 7 list LEAF_NODE 7 < LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataList LEAF_NODE 6 dataList LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = dataList . back ( ) ; VAR_DECL 5 char * data ; data = dataList . back ( ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataList . back ( ) ASSIGN 7 data = dataList . back ( ) LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataList . back ( ) FUNCTION_CALL 9 dataList . back ( ) CALLEE 10 dataList . back LEAF_NODE 11 dataList LEAF_NODE 11 . LEAF_NODE 11 back LEAF_NODE 10 ( LEAF_NODE 10 ) LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 strcpy ( data , source ) ; EXPR 6 strcpy ( data , source ) FUNCTION_CALL 7 strcpy ( data , source ) CALLEE 8 strcpy LEAF_NODE 9 strcpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 25, "project": "cwe119_ast_vul_function_test_adv_123", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61b_badSource LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61b_badSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; VAR_DECL 4 char [ 100 ] dataBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61b_badSource ( data ) ; EXPR 4 data = CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61b_badSource ( data ) ASSIGN 5 data = CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61b_badSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61b_badSource ( data ) FUNCTION_CALL 7 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61b_badSource ( data ) CALLEE 8 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61b_badSource LEAF_NODE 9 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61b_badSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 strcat ( dest , data ) ; EXPR 5 strcat ( dest , data ) FUNCTION_CALL 6 strcat ( dest , data ) CALLEE 7 strcat LEAF_NODE 8 strcat LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61b_goodG2BSource LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61b_goodG2BSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; VAR_DECL 4 char [ 100 ] dataBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61b_goodG2BSource ( data ) ; EXPR 4 data = CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61b_goodG2BSource ( data ) ASSIGN 5 data = CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61b_goodG2BSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61b_goodG2BSource ( data ) FUNCTION_CALL 7 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61b_goodG2BSource ( data ) CALLEE 8 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61b_goodG2BSource LEAF_NODE 9 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61b_goodG2BSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 strcat ( dest , data ) ; EXPR 5 strcat ( dest , data ) FUNCTION_CALL 6 strcat ( dest , data ) CALLEE 7 strcat LEAF_NODE 8 strcat LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 26, "project": "cwe119_ast_vul_function_test_adv_199", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_01_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_01_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 data LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 wchar_t LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 \"\" ; EXPR 5 \"\" FIELD 6 \"\" LEAF_NODE 7 \"\" LEAF_NODE 5 ; LEAF_NODE 4 SNPRINTF LEAF_NODE 4 ( LEAF_NODE 4 dest LEAF_NODE 4 , LEAF_NODE 4 wcslen LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 \"%s\" LEAF_NODE 4 , LEAF_NODE 4 data LEAF_NODE 4 ) LEAF_NODE 4 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 data LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 50 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 50 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 wchar_t LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 \"\" ; EXPR 5 \"\" FIELD 6 \"\" LEAF_NODE 7 \"\" LEAF_NODE 5 ; LEAF_NODE 4 SNPRINTF LEAF_NODE 4 ( LEAF_NODE 4 dest LEAF_NODE 4 , LEAF_NODE 4 wcslen LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 \"%s\" LEAF_NODE 4 , LEAF_NODE 4 data LEAF_NODE 4 ) LEAF_NODE 4 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_01_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_01_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_01_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_01_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_01_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_01_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_01_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_01_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_01_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_01_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_01_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_01_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 27, "project": "cwe119_ast_vul_function_test_adv_31", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t len ; VAR_DECL 4 size_t len TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 len LEAF_NODE 6 len LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 4106 ] src ; VAR_DECL 4 char [ 4106 ] src TYPE 5 char [ 4106 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 4106 ] LEAF_NODE 7 [ FIELD 7 4106 LEAF_NODE 8 4106 LEAF_NODE 7 ] NAME 5 src LEAF_NODE 6 src LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 10 ] buf ; VAR_DECL 4 char [ 10 ] buf TYPE 5 char [ 10 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 10 ] LEAF_NODE 7 [ FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 7 ] NAME 5 buf LEAF_NODE 6 buf LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( src , 'A' , 4106 ) ; EXPR 4 memset ( src , 'A' , 4106 ) FUNCTION_CALL 5 memset ( src , 'A' , 4106 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 src FIELD 7 src LEAF_NODE 8 src LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 4106 FIELD 7 4106 LEAF_NODE 8 4106 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 src [ 4106 - 1 ] = '\\0' ; EXPR 4 src [ 4106 - 1 ] = '\\0' ASSIGN 5 src [ 4106 - 1 ] = '\\0' LVAL 6 src [ 4106 - 1 ] FIELD 7 src [ 4106 - 1 ] LEAF_NODE 8 src LEAF_NODE 8 [ EXPR 8 4106 - 1 FIELD 9 4106 LEAF_NODE 10 4106 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 len = 4106 ; EXPR 4 len = 4106 ASSIGN 5 len = 4106 LVAL 6 len FIELD 7 len LEAF_NODE 8 len ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 4106 FIELD 7 4106 LEAF_NODE 8 4106 LEAF_NODE 4 ; EXPR_STATEMENT 3 strncpy ( buf , src , len ) ; EXPR 4 strncpy ( buf , src , len ) FUNCTION_CALL 5 strncpy ( buf , src , len ) CALLEE 6 strncpy LEAF_NODE 7 strncpy LEAF_NODE 6 ( ARGUMENT 6 buf FIELD 7 buf LEAF_NODE 8 buf LEAF_NODE 6 , ARGUMENT 6 src FIELD 7 src LEAF_NODE 8 src LEAF_NODE 6 , ARGUMENT 6 len FIELD 7 len LEAF_NODE 8 len LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 28, "project": "cwe119_ast_vul_function_test_adv_7", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54b_badSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( data , 'A' , 100 - 1 ) ; EXPR 4 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( data , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 100 - 1 ] = '\\0' ; EXPR 4 data [ 100 - 1 ] = '\\0' ASSIGN 5 data [ 100 - 1 ] = '\\0' LVAL 6 data [ 100 - 1 ] FIELD 7 data [ 100 - 1 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54b_badSink ( data ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54b_badSink ( data ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54b_badSink ( data ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54b_badSink LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54b_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54b_goodG2BSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( data , 'A' , 50 - 1 ) ; EXPR 4 memset ( data , 'A' , 50 - 1 ) FUNCTION_CALL 5 memset ( data , 'A' , 50 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 50 - 1 FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 50 - 1 ] = '\\0' ; EXPR 4 data [ 50 - 1 ] = '\\0' ASSIGN 5 data [ 50 - 1 ] = '\\0' LVAL 6 data [ 50 - 1 ] FIELD 7 data [ 50 - 1 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 50 - 1 FIELD 9 50 LEAF_NODE 10 50 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54b_goodG2BSink ( data ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54b_goodG2BSink ( data ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54b_goodG2BSink ( data ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54b_goodG2BSink LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 29, "project": "cwe119_ast_vul_function_test_adv_157", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54d_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54d_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54c_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54c_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54d_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54d_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54d_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54d_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54d_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54d_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54d_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54c_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54c_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54d_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54d_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54d_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54d_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54d_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 30, "project": "cwe119_ast_vul_function_test_adv_159", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 char * CWE134_Uncontrolled_Format_String__char_console_snprintf_45_badData ; VAR_DECL 2 char * CWE134_Uncontrolled_Format_String__char_console_snprintf_45_badData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_badData LEAF_NODE 4 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_badData LEAF_NODE 2 ; SIMPLE_DECL 1 char * CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodG2BData ; VAR_DECL 2 char * CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodG2BData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodG2BData LEAF_NODE 4 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodG2BData LEAF_NODE 2 ; SIMPLE_DECL 1 char * CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodB2GData ; VAR_DECL 2 char * CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodB2GData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodB2GData LEAF_NODE 4 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodB2GData LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 badSink LEAF_NODE 3 badSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = CWE134_Uncontrolled_Format_String__char_console_snprintf_45_badData ; VAR_DECL 4 char * data ; data = CWE134_Uncontrolled_Format_String__char_console_snprintf_45_badData TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE134_Uncontrolled_Format_String__char_console_snprintf_45_badData ASSIGN 6 data = CWE134_Uncontrolled_Format_String__char_console_snprintf_45_badData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_badData FIELD 8 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_badData LEAF_NODE 9 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_badData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 100 ] dest ; dest = \"\" TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 SNPRINTF ( dest , 100 - 1 , data ) ; EXPR 5 SNPRINTF ( dest , 100 - 1 , data ) FUNCTION_CALL 6 SNPRINTF ( dest , 100 - 1 , data ) CALLEE 7 SNPRINTF LEAF_NODE 8 SNPRINTF LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( dest ) ; EXPR 5 printLine ( dest ) FUNCTION_CALL 6 printLine ( dest ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_bad LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; dataBuffer = \"\" ; VAR_DECL 4 char [ 100 ] dataBuffer ; dataBuffer = \"\" TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = \"\" ASSIGN 6 dataBuffer = \"\" LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 \"\" FIELD 8 \"\" LEAF_NODE 9 \"\" LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_badData = data ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_badData = data ASSIGN 5 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_badData = data LVAL 6 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_badData FIELD 7 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_badData LEAF_NODE 8 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_badData ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 badSink ( ) ; EXPR 4 badSink ( ) FUNCTION_CALL 5 badSink ( ) CALLEE 6 badSink LEAF_NODE 7 badSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2BSink LEAF_NODE 3 goodG2BSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodG2BData ; VAR_DECL 4 char * data ; data = CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodG2BData TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodG2BData ASSIGN 6 data = CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodG2BData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodG2BData FIELD 8 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodG2BData LEAF_NODE 9 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodG2BData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 100 ] dest ; dest = \"\" TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 SNPRINTF ( dest , 100 - 1 , data ) ; EXPR 5 SNPRINTF ( dest , 100 - 1 , data ) FUNCTION_CALL 6 SNPRINTF ( dest , 100 - 1 , data ) CALLEE 7 SNPRINTF LEAF_NODE 8 SNPRINTF LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( dest ) ; EXPR 5 printLine ( dest ) FUNCTION_CALL 6 printLine ( dest ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; dataBuffer = \"\" ; VAR_DECL 4 char [ 100 ] dataBuffer ; dataBuffer = \"\" TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = \"\" ASSIGN 6 dataBuffer = \"\" LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 \"\" FIELD 8 \"\" LEAF_NODE 9 \"\" LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 strcpy ( data , \"fixedstringtest\" ) ; EXPR 4 strcpy ( data , \"fixedstringtest\" ) FUNCTION_CALL 5 strcpy ( data , \"fixedstringtest\" ) CALLEE 6 strcpy LEAF_NODE 7 strcpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 \"fixedstringtest\" FIELD 7 \"fixedstringtest\" LEAF_NODE 8 \"fixedstringtest\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodG2BData = data ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodG2BData = data ASSIGN 5 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodG2BData = data LVAL 6 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodG2BData FIELD 7 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodG2BData LEAF_NODE 8 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodG2BData ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2BSink ( ) ; EXPR 4 goodG2BSink ( ) FUNCTION_CALL 5 goodG2BSink ( ) CALLEE 6 goodG2BSink LEAF_NODE 7 goodG2BSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodB2GSink LEAF_NODE 3 goodB2GSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodB2GData ; VAR_DECL 4 char * data ; data = CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodB2GData TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodB2GData ASSIGN 6 data = CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodB2GData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodB2GData FIELD 8 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodB2GData LEAF_NODE 9 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodB2GData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 100 ] dest ; dest = \"\" TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 SNPRINTF ( dest , 100 - 1 , \"%s\" , data ) ; EXPR 5 SNPRINTF ( dest , 100 - 1 , \"%s\" , data ) FUNCTION_CALL 6 SNPRINTF ( dest , 100 - 1 , \"%s\" , data ) CALLEE 7 SNPRINTF LEAF_NODE 8 SNPRINTF LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 \"%s\" FIELD 8 \"%s\" LEAF_NODE 9 \"%s\" LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( dest ) ; EXPR 5 printLine ( dest ) FUNCTION_CALL 6 printLine ( dest ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodB2G LEAF_NODE 3 goodB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; dataBuffer = \"\" ; VAR_DECL 4 char [ 100 ] dataBuffer ; dataBuffer = \"\" TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = \"\" ASSIGN 6 dataBuffer = \"\" LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 \"\" FIELD 8 \"\" LEAF_NODE 9 \"\" LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodB2GData = data ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodB2GData = data ASSIGN 5 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodB2GData = data LVAL 6 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodB2GData FIELD 7 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodB2GData LEAF_NODE 8 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_goodB2GData ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 goodB2GSink ( ) ; EXPR 4 goodB2GSink ( ) FUNCTION_CALL 5 goodB2GSink ( ) CALLEE 6 goodB2GSink LEAF_NODE 7 goodB2GSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_good LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodB2G ( ) ; EXPR 4 goodB2G ( ) FUNCTION_CALL 5 goodB2G ( ) CALLEE 6 goodB2G LEAF_NODE 7 goodB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_good ( ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_good ( ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_good ( ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_good LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_bad ( ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_bad ( ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_bad ( ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_bad LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_snprintf_45_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 31, "project": "cwe119_ast_vul_function_test_adv_32", "target": 1}
{"func": "NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_wchar_t_ncpy_54 { void badSink_d ( wchar_t * data ) { STATEMENTS } ; void badSink_c ( wchar_t * data ) { badSink_d ( data ) ; } void goodG2BSink_d ( wchar_t * data ) { STATEMENTS } ; void goodG2BSink_c ( wchar_t * data ) { goodG2BSink_d ( data ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_wchar_t_ncpy_54 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink_d LEAF_NODE 4 badSink_d PARAMETER_LIST 3 ( wchar_t * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink_c LEAF_NODE 4 badSink_c PARAMETER_LIST 3 ( wchar_t * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 badSink_d ( data ) ; EXPR 5 badSink_d ( data ) FUNCTION_CALL 6 badSink_d ( data ) CALLEE 7 badSink_d LEAF_NODE 8 badSink_d LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink_d LEAF_NODE 4 goodG2BSink_d PARAMETER_LIST 3 ( wchar_t * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink_c LEAF_NODE 4 goodG2BSink_c PARAMETER_LIST 3 ( wchar_t * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2BSink_d ( data ) ; EXPR 5 goodG2BSink_d ( data ) FUNCTION_CALL 6 goodG2BSink_d ( data ) CALLEE 7 goodG2BSink_d LEAF_NODE 8 goodG2BSink_d LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 32, "project": "cwe119_ast_vul_function_test_adv_54", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 globalReturnsTrueOrFalse LEAF_NODE 3 globalReturnsTrueOrFalse PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_12_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_12_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsTrueOrFalse ( ) EXPR 5 globalReturnsTrueOrFalse ( ) FUNCTION_CALL 6 globalReturnsTrueOrFalse ( ) CALLEE 7 globalReturnsTrueOrFalse LEAF_NODE 8 globalReturnsTrueOrFalse LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 wmemset LEAF_NODE 6 ( LEAF_NODE 6 data LEAF_NODE 6 , LEAF_NODE 6 L LEAF_NODE 6 'A' LEAF_NODE 6 , LEAF_NODE 6 100 LEAF_NODE 6 - LEAF_NODE 6 1 LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 6 data LEAF_NODE 6 [ LEAF_NODE 6 100 LEAF_NODE 6 - LEAF_NODE 6 1 LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 wmemset LEAF_NODE 6 ( LEAF_NODE 6 data LEAF_NODE 6 , LEAF_NODE 6 L LEAF_NODE 6 'A' LEAF_NODE 6 , LEAF_NODE 6 50 LEAF_NODE 6 - LEAF_NODE 6 1 LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 6 data LEAF_NODE 6 [ LEAF_NODE 6 50 LEAF_NODE 6 - LEAF_NODE 6 1 LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 wchar_t LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 \"\" ; EXPR 5 \"\" FIELD 6 \"\" LEAF_NODE 7 \"\" LEAF_NODE 5 ; LEAF_NODE 4 SNPRINTF LEAF_NODE 4 ( LEAF_NODE 4 dest LEAF_NODE 4 , LEAF_NODE 4 wcslen LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 \"%s\" LEAF_NODE 4 , LEAF_NODE 4 data LEAF_NODE 4 ) LEAF_NODE 4 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsTrueOrFalse ( ) EXPR 5 globalReturnsTrueOrFalse ( ) FUNCTION_CALL 6 globalReturnsTrueOrFalse ( ) CALLEE 7 globalReturnsTrueOrFalse LEAF_NODE 8 globalReturnsTrueOrFalse LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 wmemset LEAF_NODE 6 ( LEAF_NODE 6 data LEAF_NODE 6 , LEAF_NODE 6 L LEAF_NODE 6 'A' LEAF_NODE 6 , LEAF_NODE 6 50 LEAF_NODE 6 - LEAF_NODE 6 1 LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 6 data LEAF_NODE 6 [ LEAF_NODE 6 50 LEAF_NODE 6 - LEAF_NODE 6 1 LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 wmemset LEAF_NODE 6 ( LEAF_NODE 6 data LEAF_NODE 6 , LEAF_NODE 6 L LEAF_NODE 6 'A' LEAF_NODE 6 , LEAF_NODE 6 50 LEAF_NODE 6 - LEAF_NODE 6 1 LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 6 data LEAF_NODE 6 [ LEAF_NODE 6 50 LEAF_NODE 6 - LEAF_NODE 6 1 LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 wchar_t LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 \"\" ; EXPR 5 \"\" FIELD 6 \"\" LEAF_NODE 7 \"\" LEAF_NODE 5 ; LEAF_NODE 4 SNPRINTF LEAF_NODE 4 ( LEAF_NODE 4 dest LEAF_NODE 4 , LEAF_NODE 4 wcslen LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 \"%s\" LEAF_NODE 4 , LEAF_NODE 4 data LEAF_NODE 4 ) LEAF_NODE 4 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_12_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_12_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_12_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_12_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_12_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_12_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_12_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_12_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_12_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_12_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_12_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_12_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 33, "project": "cwe119_ast_vul_function_test_adv_41", "target": 1}
{"func": "NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_wchar_t_cpy_63 { void badSink ( wchar_t * * dataPtr ) { STATEMENTS } ; void bad ( ) { wchar_t * data ; data = NULL ; data = new wchar_t [ 10 ] ; badSink ( & data ) ; } void goodG2BSink ( wchar_t * * data ) { STATEMENTS } ; static void goodG2B ( ) { wchar_t * data ; data = NULL ; data = new wchar_t [ 10 + 1 ] ; goodG2BSink ( & data ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_wchar_t_cpy_63 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( wchar_t * * dataPtr ) LEAF_NODE 4 ( PARAMETER_DECL 4 wchar_t * * dataPtr TYPE 5 wchar_t * * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * * LEAF_NODE 7 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 wchar_t [ 10 ] ; EXPR 5 wchar_t [ 10 ] FIELD 6 wchar_t [ 10 ] LEAF_NODE 7 wchar_t LEAF_NODE 7 [ EXPR 7 10 FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 7 ] LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( & data ) ; EXPR 5 badSink ( & data ) FUNCTION_CALL 6 badSink ( & data ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( ARGUMENT 7 & data UNARY_EXPR 8 & data UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 data LEAF_NODE 10 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( wchar_t * * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 wchar_t * * data TYPE 5 wchar_t * * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * * LEAF_NODE 7 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 wchar_t [ 10 + 1 ] ; EXPR 5 wchar_t [ 10 + 1 ] FIELD 6 wchar_t [ 10 + 1 ] LEAF_NODE 7 wchar_t LEAF_NODE 7 [ EXPR 7 10 + 1 FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ] LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( & data ) ; EXPR 5 goodG2BSink ( & data ) FUNCTION_CALL 6 goodG2BSink ( & data ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( ARGUMENT 7 & data UNARY_EXPR 8 & data UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 data LEAF_NODE 10 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_wchar_t_cpy_63 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_wchar_t_cpy_63 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 34, "project": "cwe119_ast_vul_function_test_adv_195", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int staticTrue ; staticTrue = 1 ; VAR_DECL 2 int staticTrue ; staticTrue = 1 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticTrue LEAF_NODE 4 staticTrue LEAF_NODE 3 ; INIT 3 staticTrue = 1 ASSIGN 4 staticTrue = 1 LVAL 5 staticTrue NAME 6 staticTrue LEAF_NODE 7 staticTrue ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 2 ; SIMPLE_DECL 1 int staticFalse ; staticFalse = 0 ; VAR_DECL 2 int staticFalse ; staticFalse = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticFalse LEAF_NODE 4 staticFalse LEAF_NODE 3 ; INIT 3 staticFalse = 0 ASSIGN 4 staticFalse = 0 LVAL 5 staticFalse NAME 6 staticFalse LEAF_NODE 7 staticFalse ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_ncat_05 { void bad ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = new char [ 50 ] ; data [ 0 ] = '\\0' ; } { char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; delete [ ] data ; } } static void goodG2B1 ( ) { char * data ; data = NULL ; if ( staticFalse ) { printLine ( \"Benign, fixed string\" ) ; } else { data = new char [ 100 ] ; data [ 0 ] = '\\0' ; } { char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; delete [ ] data ; } } static void goodG2B2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = new char [ 100 ] ; data [ 0 ] = '\\0' ; } { char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; delete [ ] data ; } } void good ( ) { goodG2B1 ( ) ; goodG2B2 ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_ncat_05 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 staticTrue EXPR 6 staticTrue FIELD 7 staticTrue LEAF_NODE 8 staticTrue LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 data LEAF_NODE 7 = LEAF_NODE 7 new EXPR_STATEMENT 7 char [ 50 ] ; EXPR 8 char [ 50 ] FIELD 9 char [ 50 ] LEAF_NODE 10 char LEAF_NODE 10 [ EXPR 10 50 FIELD 11 50 LEAF_NODE 12 50 LEAF_NODE 10 ] LEAF_NODE 8 ; EXPR_STATEMENT 7 data [ 0 ] = '\\0' ; EXPR 8 data [ 0 ] = '\\0' ASSIGN 9 data [ 0 ] = '\\0' LVAL 10 data [ 0 ] FIELD 11 data [ 0 ] LEAF_NODE 12 data LEAF_NODE 12 [ EXPR 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 '\\0' FIELD 11 '\\0' LEAF_NODE 12 '\\0' LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 strncat ( data , source , 100 ) ; EXPR 6 strncat ( data , source , 100 ) FUNCTION_CALL 7 strncat ( data , source , 100 ) CALLEE 8 strncat LEAF_NODE 9 strncat LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B1 LEAF_NODE 4 goodG2B1 PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 staticFalse EXPR 6 staticFalse FIELD 7 staticFalse LEAF_NODE 8 staticFalse LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Benign, fixed string\" ) ; EXPR 8 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 9 printLine ( \"Benign, fixed string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Benign, fixed string\" FIELD 11 \"Benign, fixed string\" LEAF_NODE 12 \"Benign, fixed string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 data LEAF_NODE 7 = LEAF_NODE 7 new EXPR_STATEMENT 7 char [ 100 ] ; EXPR 8 char [ 100 ] FIELD 9 char [ 100 ] LEAF_NODE 10 char LEAF_NODE 10 [ EXPR 10 100 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 10 ] LEAF_NODE 8 ; EXPR_STATEMENT 7 data [ 0 ] = '\\0' ; EXPR 8 data [ 0 ] = '\\0' ASSIGN 9 data [ 0 ] = '\\0' LVAL 10 data [ 0 ] FIELD 11 data [ 0 ] LEAF_NODE 12 data LEAF_NODE 12 [ EXPR 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 '\\0' FIELD 11 '\\0' LEAF_NODE 12 '\\0' LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 strncat ( data , source , 100 ) ; EXPR 6 strncat ( data , source , 100 ) FUNCTION_CALL 7 strncat ( data , source , 100 ) CALLEE 8 strncat LEAF_NODE 9 strncat LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B2 LEAF_NODE 4 goodG2B2 PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 staticTrue EXPR 6 staticTrue FIELD 7 staticTrue LEAF_NODE 8 staticTrue LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 data LEAF_NODE 7 = LEAF_NODE 7 new EXPR_STATEMENT 7 char [ 100 ] ; EXPR 8 char [ 100 ] FIELD 9 char [ 100 ] LEAF_NODE 10 char LEAF_NODE 10 [ EXPR 10 100 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 10 ] LEAF_NODE 8 ; EXPR_STATEMENT 7 data [ 0 ] = '\\0' ; EXPR 8 data [ 0 ] = '\\0' ASSIGN 9 data [ 0 ] = '\\0' LVAL 10 data [ 0 ] FIELD 11 data [ 0 ] LEAF_NODE 12 data LEAF_NODE 12 [ EXPR 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 '\\0' FIELD 11 '\\0' LEAF_NODE 12 '\\0' LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 strncat ( data , source , 100 ) ; EXPR 6 strncat ( data , source , 100 ) FUNCTION_CALL 7 strncat ( data , source , 100 ) CALLEE 8 strncat LEAF_NODE 9 strncat LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B1 ( ) ; EXPR 5 goodG2B1 ( ) FUNCTION_CALL 6 goodG2B1 ( ) CALLEE 7 goodG2B1 LEAF_NODE 8 goodG2B1 LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2B2 ( ) ; EXPR 5 goodG2B2 ( ) FUNCTION_CALL 6 goodG2B2 ( ) CALLEE 7 goodG2B2 LEAF_NODE 8 goodG2B2 LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_ncat_05 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_ncat_05 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 35, "project": "cwe119_ast_vul_function_test_adv_17", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__malloc_char_ncpy_17_bad LEAF_NODE 3 CWE127_Buffer_Underread__malloc_char_ncpy_17_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int i ; VAR_DECL 4 int i TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < 1 EXPR 5 i < 1 FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 i ++ EXPR 5 i ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * dataBuffer ; dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ; VAR_DECL 8 char * dataBuffer ; dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 dataBuffer LEAF_NODE 10 dataBuffer LEAF_NODE 9 ; INIT 9 dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 10 dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 11 dataBuffer NAME 12 dataBuffer LEAF_NODE 13 dataBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 12 ( TYPE_NAME 12 char LEAF_NODE 13 char LEAF_NODE 12 * LEAF_NODE 12 ) FUNCTION_CALL 12 malloc ( 100 * sizeof ( char ) ) CALLEE 13 malloc LEAF_NODE 14 malloc LEAF_NODE 13 ( ARGUMENT 13 100 * sizeof ( char ) FIELD 14 100 LEAF_NODE 15 100 LEAF_NODE 14 * FUNCTION_CALL 14 sizeof ( char ) CALLEE 15 sizeof LEAF_NODE 16 sizeof LEAF_NODE 15 ( ARGUMENT 15 char FIELD 16 char LEAF_NODE 17 char LEAF_NODE 15 ) LEAF_NODE 13 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 8 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 9 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 10 memset LEAF_NODE 11 memset LEAF_NODE 10 ( ARGUMENT 10 dataBuffer FIELD 11 dataBuffer LEAF_NODE 12 dataBuffer LEAF_NODE 10 , ARGUMENT 10 'A' FIELD 11 'A' LEAF_NODE 12 'A' LEAF_NODE 10 , ARGUMENT 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 8 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 9 dataBuffer [ 100 - 1 ] = '\\0' LVAL 10 dataBuffer [ 100 - 1 ] FIELD 11 dataBuffer [ 100 - 1 ] LEAF_NODE 12 dataBuffer LEAF_NODE 12 [ EXPR 12 100 - 1 FIELD 13 100 LEAF_NODE 14 100 LEAF_NODE 13 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 '\\0' FIELD 11 '\\0' LEAF_NODE 12 '\\0' LEAF_NODE 8 ; EXPR_STATEMENT 7 data = dataBuffer - 8 ; EXPR 8 data = dataBuffer - 8 ASSIGN 9 data = dataBuffer - 8 LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 dataBuffer - 8 FIELD 11 dataBuffer LEAF_NODE 12 dataBuffer LEAF_NODE 11 - FIELD 11 8 LEAF_NODE 12 8 LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] dest ; VAR_DECL 5 char [ 100 ] dest TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( dest , 'C' , 100 - 1 ) ; EXPR 5 memset ( dest , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( dest , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 100 - 1 ] = '\\0' ; EXPR 5 dest [ 100 - 1 ] = '\\0' ASSIGN 6 dest [ 100 - 1 ] = '\\0' LVAL 7 dest [ 100 - 1 ] FIELD 8 dest [ 100 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncpy ( dest , data , strlen ( dest ) ) ; EXPR 5 strncpy ( dest , data , strlen ( dest ) ) FUNCTION_CALL 6 strncpy ( dest , data , strlen ( dest ) ) CALLEE 7 strncpy LEAF_NODE 8 strncpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( dest ) FUNCTION_CALL 8 strlen ( dest ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 dest FIELD 10 dest LEAF_NODE 11 dest LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 100 - 1 ] = '\\0' ; EXPR 5 dest [ 100 - 1 ] = '\\0' ASSIGN 6 dest [ 100 - 1 ] = '\\0' LVAL 7 dest [ 100 - 1 ] FIELD 8 dest [ 100 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( dest ) ; EXPR 5 printLine ( dest ) FUNCTION_CALL 6 printLine ( dest ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int h ; VAR_DECL 4 int h TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 h LEAF_NODE 6 h LEAF_NODE 4 ; SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 h = 0 ; EXPR 5 h = 0 ASSIGN 6 h = 0 LVAL 7 h FIELD 8 h LEAF_NODE 9 h ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 h < 1 EXPR 5 h < 1 FIELD 6 h LEAF_NODE 7 h REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 h ++ EXPR 5 h ++ FIELD 6 h ++ LEAF_NODE 7 h LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * dataBuffer ; dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ; VAR_DECL 8 char * dataBuffer ; dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 dataBuffer LEAF_NODE 10 dataBuffer LEAF_NODE 9 ; INIT 9 dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 10 dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 11 dataBuffer NAME 12 dataBuffer LEAF_NODE 13 dataBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 12 ( TYPE_NAME 12 char LEAF_NODE 13 char LEAF_NODE 12 * LEAF_NODE 12 ) FUNCTION_CALL 12 malloc ( 100 * sizeof ( char ) ) CALLEE 13 malloc LEAF_NODE 14 malloc LEAF_NODE 13 ( ARGUMENT 13 100 * sizeof ( char ) FIELD 14 100 LEAF_NODE 15 100 LEAF_NODE 14 * FUNCTION_CALL 14 sizeof ( char ) CALLEE 15 sizeof LEAF_NODE 16 sizeof LEAF_NODE 15 ( ARGUMENT 15 char FIELD 16 char LEAF_NODE 17 char LEAF_NODE 15 ) LEAF_NODE 13 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 8 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 9 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 10 memset LEAF_NODE 11 memset LEAF_NODE 10 ( ARGUMENT 10 dataBuffer FIELD 11 dataBuffer LEAF_NODE 12 dataBuffer LEAF_NODE 10 , ARGUMENT 10 'A' FIELD 11 'A' LEAF_NODE 12 'A' LEAF_NODE 10 , ARGUMENT 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 8 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 9 dataBuffer [ 100 - 1 ] = '\\0' LVAL 10 dataBuffer [ 100 - 1 ] FIELD 11 dataBuffer [ 100 - 1 ] LEAF_NODE 12 dataBuffer LEAF_NODE 12 [ EXPR 12 100 - 1 FIELD 13 100 LEAF_NODE 14 100 LEAF_NODE 13 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 '\\0' FIELD 11 '\\0' LEAF_NODE 12 '\\0' LEAF_NODE 8 ; EXPR_STATEMENT 7 data = dataBuffer ; EXPR 8 data = dataBuffer ASSIGN 9 data = dataBuffer LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 dataBuffer FIELD 11 dataBuffer LEAF_NODE 12 dataBuffer LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] dest ; VAR_DECL 5 char [ 100 ] dest TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( dest , 'C' , 100 - 1 ) ; EXPR 5 memset ( dest , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( dest , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 100 - 1 ] = '\\0' ; EXPR 5 dest [ 100 - 1 ] = '\\0' ASSIGN 6 dest [ 100 - 1 ] = '\\0' LVAL 7 dest [ 100 - 1 ] FIELD 8 dest [ 100 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncpy ( dest , data , strlen ( dest ) ) ; EXPR 5 strncpy ( dest , data , strlen ( dest ) ) FUNCTION_CALL 6 strncpy ( dest , data , strlen ( dest ) ) CALLEE 7 strncpy LEAF_NODE 8 strncpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( dest ) FUNCTION_CALL 8 strlen ( dest ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 dest FIELD 10 dest LEAF_NODE 11 dest LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 100 - 1 ] = '\\0' ; EXPR 5 dest [ 100 - 1 ] = '\\0' ASSIGN 6 dest [ 100 - 1 ] = '\\0' LVAL 7 dest [ 100 - 1 ] FIELD 8 dest [ 100 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( dest ) ; EXPR 5 printLine ( dest ) FUNCTION_CALL 6 printLine ( dest ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__malloc_char_ncpy_17_good LEAF_NODE 3 CWE127_Buffer_Underread__malloc_char_ncpy_17_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__malloc_char_ncpy_17_good ( ) ; EXPR 4 CWE127_Buffer_Underread__malloc_char_ncpy_17_good ( ) FUNCTION_CALL 5 CWE127_Buffer_Underread__malloc_char_ncpy_17_good ( ) CALLEE 6 CWE127_Buffer_Underread__malloc_char_ncpy_17_good LEAF_NODE 7 CWE127_Buffer_Underread__malloc_char_ncpy_17_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__malloc_char_ncpy_17_bad ( ) ; EXPR 4 CWE127_Buffer_Underread__malloc_char_ncpy_17_bad ( ) FUNCTION_CALL 5 CWE127_Buffer_Underread__malloc_char_ncpy_17_bad ( ) CALLEE 6 CWE127_Buffer_Underread__malloc_char_ncpy_17_bad LEAF_NODE 7 CWE127_Buffer_Underread__malloc_char_ncpy_17_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 36, "project": "cwe119_ast_vul_function_test_adv_16", "target": 1}
{"func": "SIMPLE_DECL 1 struct _CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType BASE_CLASSES { wchar_t * structFirst ; } CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType ; VAR_DECL 2 struct _CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType BASE_CLASSES { wchar_t * structFirst ; } CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType TYPE 3 struct _CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType BASE_CLASSES { wchar_t * structFirst ; } CLASS_DEF 4 struct _CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType BASE_CLASSES { wchar_t * structFirst ; } LEAF_NODE 5 struct CLASS_NAME 5 _CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType LEAF_NODE 6 _CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 wchar_t * structFirst ; SIMPLE_DECL 6 wchar_t * structFirst ; VAR_DECL 7 wchar_t * structFirst TYPE 8 wchar_t * TYPE_NAME 9 wchar_t LEAF_NODE 10 wchar_t POINTER 9 * LEAF_NODE 10 * NAME 8 structFirst LEAF_NODE 9 structFirst LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType LEAF_NODE 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67b_badSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67b_badSink PARAMETER_LIST 2 ( CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType myStruct TYPE 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType TYPE_NAME 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType LEAF_NODE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType myStruct ; VAR_DECL 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType myStruct TYPE 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType TYPE_NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType NAME 5 myStruct LEAF_NODE 6 myStruct LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 10 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 10 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 10 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 10 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 10 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 10 * sizeof ( wchar_t ) FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 myStruct . structFirst = data ; EXPR 4 myStruct . structFirst = data ASSIGN 5 myStruct . structFirst = data LVAL 6 myStruct . structFirst FIELD 7 myStruct . structFirst LEAF_NODE 8 myStruct LEAF_NODE 8 . LEAF_NODE 8 structFirst ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67b_badSink ( myStruct ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67b_badSink ( myStruct ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67b_badSink ( myStruct ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67b_badSink LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67b_badSink LEAF_NODE 6 ( ARGUMENT 6 myStruct FIELD 7 myStruct LEAF_NODE 8 myStruct LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67b_goodG2BSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67b_goodG2BSink PARAMETER_LIST 2 ( CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType myStruct TYPE 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType TYPE_NAME 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType LEAF_NODE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType myStruct ; VAR_DECL 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType myStruct TYPE 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType TYPE_NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_structType NAME 5 myStruct LEAF_NODE 6 myStruct LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( ( 10 + 1 ) * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( ( 10 + 1 ) * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( ( 10 + 1 ) * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 ( 10 + 1 ) * sizeof ( wchar_t ) LEAF_NODE 9 ( FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ) LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 myStruct . structFirst = data ; EXPR 4 myStruct . structFirst = data ASSIGN 5 myStruct . structFirst = data LVAL 6 myStruct . structFirst FIELD 7 myStruct . structFirst LEAF_NODE 8 myStruct LEAF_NODE 8 . LEAF_NODE 8 structFirst ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67b_goodG2BSink ( myStruct ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67b_goodG2BSink ( myStruct ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67b_goodG2BSink ( myStruct ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67b_goodG2BSink LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 myStruct FIELD 7 myStruct LEAF_NODE 8 myStruct LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 37, "project": "cwe119_ast_vul_function_test_adv_66", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_badSink LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_badSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_fprintf_64_bad LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_64_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; dataBuffer = \"\" ; VAR_DECL 4 char [ 100 ] dataBuffer ; dataBuffer = \"\" TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = \"\" ASSIGN 6 dataBuffer = \"\" LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 \"\" FIELD 8 \"\" LEAF_NODE 9 \"\" LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_badSink ( & data ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_badSink ( & data ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_badSink ( & data ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_badSink LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_badSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_goodG2BSink LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_goodG2BSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; dataBuffer = \"\" ; VAR_DECL 4 char [ 100 ] dataBuffer ; dataBuffer = \"\" TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = \"\" ASSIGN 6 dataBuffer = \"\" LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 \"\" FIELD 8 \"\" LEAF_NODE 9 \"\" LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 strcpy ( data , \"fixedstringtest\" ) ; EXPR 4 strcpy ( data , \"fixedstringtest\" ) FUNCTION_CALL 5 strcpy ( data , \"fixedstringtest\" ) CALLEE 6 strcpy LEAF_NODE 7 strcpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 \"fixedstringtest\" FIELD 7 \"fixedstringtest\" LEAF_NODE 8 \"fixedstringtest\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_goodG2BSink ( & data ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_goodG2BSink ( & data ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_goodG2BSink ( & data ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_goodG2BSink LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_goodB2GSink LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_goodB2GSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodB2G LEAF_NODE 3 goodB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; dataBuffer = \"\" ; VAR_DECL 4 char [ 100 ] dataBuffer ; dataBuffer = \"\" TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = \"\" ASSIGN 6 dataBuffer = \"\" LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 \"\" FIELD 8 \"\" LEAF_NODE 9 \"\" LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_goodB2GSink ( & data ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_goodB2GSink ( & data ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_goodB2GSink ( & data ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_goodB2GSink LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_goodB2GSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_fprintf_64_good LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_64_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodB2G ( ) ; EXPR 4 goodB2G ( ) FUNCTION_CALL 5 goodB2G ( ) CALLEE 6 goodB2G LEAF_NODE 7 goodB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_64_good ( ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_fprintf_64_good ( ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_fprintf_64_good ( ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_fprintf_64_good LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_fprintf_64_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_64_bad ( ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_fprintf_64_bad ( ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_fprintf_64_bad ( ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_fprintf_64_bad LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_fprintf_64_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 38, "project": "cwe119_ast_vul_function_test_adv_60", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_81 { struct CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_81_bad BASE_CLASSES { void action ( char * data ) const ; } ; void CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_81_bad :: action ( char * data ) { { char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\\0' ; printLine ( data ) ; } } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_81 LEAF_NODE 2 { SIMPLE_DECL 2 struct CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_81_bad BASE_CLASSES { void action ( char * data ) const ; } ; CLASS_DEF 3 struct CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_81_bad BASE_CLASSES { void action ( char * data ) const ; } CLASS_DEF 4 struct CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_81_bad BASE_CLASSES { void action ( char * data ) const ; } LEAF_NODE 5 struct CLASS_NAME 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_81_bad LEAF_NODE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_81_bad LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 void action ( char * data ) const ; LEAF_NODE 6 void LEAF_NODE 6 action LEAF_NODE 6 ( LEAF_NODE 6 char LEAF_NODE 6 * LEAF_NODE 6 data LEAF_NODE 6 ) LEAF_NODE 6 const LEAF_NODE 6 ; LEAF_NODE 5 } LEAF_NODE 3 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_81_bad :: action LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_81_bad LEAF_NODE 4 :: LEAF_NODE 4 action PARAMETER_LIST 3 ( char * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 strncpy ( data , source , 100 - 1 ) ; EXPR 6 strncpy ( data , source , 100 - 1 ) FUNCTION_CALL 7 strncpy ( data , source , 100 - 1 ) CALLEE 8 strncpy LEAF_NODE 9 strncpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 data [ 100 - 1 ] = '\\0' ; EXPR 6 data [ 100 - 1 ] = '\\0' ASSIGN 7 data [ 100 - 1 ] = '\\0' LVAL 8 data [ 100 - 1 ] FIELD 9 data [ 100 - 1 ] LEAF_NODE 10 data LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 39, "project": "cwe119_ast_vul_function_test_adv_14", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__malloc_char_ncpy_03_bad LEAF_NODE 3 CWE124_Buffer_Underwrite__malloc_char_ncpy_03_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * dataBuffer ; dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ; VAR_DECL 8 char * dataBuffer ; dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 dataBuffer LEAF_NODE 10 dataBuffer LEAF_NODE 9 ; INIT 9 dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 10 dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 11 dataBuffer NAME 12 dataBuffer LEAF_NODE 13 dataBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 12 ( TYPE_NAME 12 char LEAF_NODE 13 char LEAF_NODE 12 * LEAF_NODE 12 ) FUNCTION_CALL 12 malloc ( 100 * sizeof ( char ) ) CALLEE 13 malloc LEAF_NODE 14 malloc LEAF_NODE 13 ( ARGUMENT 13 100 * sizeof ( char ) FIELD 14 100 LEAF_NODE 15 100 LEAF_NODE 14 * FUNCTION_CALL 14 sizeof ( char ) CALLEE 15 sizeof LEAF_NODE 16 sizeof LEAF_NODE 15 ( ARGUMENT 15 char FIELD 16 char LEAF_NODE 17 char LEAF_NODE 15 ) LEAF_NODE 13 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 8 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 9 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 10 memset LEAF_NODE 11 memset LEAF_NODE 10 ( ARGUMENT 10 dataBuffer FIELD 11 dataBuffer LEAF_NODE 12 dataBuffer LEAF_NODE 10 , ARGUMENT 10 'A' FIELD 11 'A' LEAF_NODE 12 'A' LEAF_NODE 10 , ARGUMENT 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 8 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 9 dataBuffer [ 100 - 1 ] = '\\0' LVAL 10 dataBuffer [ 100 - 1 ] FIELD 11 dataBuffer [ 100 - 1 ] LEAF_NODE 12 dataBuffer LEAF_NODE 12 [ EXPR 12 100 - 1 FIELD 13 100 LEAF_NODE 14 100 LEAF_NODE 13 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 '\\0' FIELD 11 '\\0' LEAF_NODE 12 '\\0' LEAF_NODE 8 ; EXPR_STATEMENT 7 data = dataBuffer - 8 ; EXPR 8 data = dataBuffer - 8 ASSIGN 9 data = dataBuffer - 8 LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 dataBuffer - 8 FIELD 11 dataBuffer LEAF_NODE 12 dataBuffer LEAF_NODE 11 - FIELD 11 8 LEAF_NODE 12 8 LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncpy ( data , source , 100 - 1 ) ; EXPR 5 strncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 strncpy ( data , source , 100 - 1 ) CALLEE 7 strncpy LEAF_NODE 8 strncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 100 - 1 ] = '\\0' ; EXPR 5 data [ 100 - 1 ] = '\\0' ASSIGN 6 data [ 100 - 1 ] = '\\0' LVAL 7 data [ 100 - 1 ] FIELD 8 data [ 100 - 1 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 != 5 EXPR 5 5 != 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * dataBuffer ; dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ; VAR_DECL 8 char * dataBuffer ; dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 dataBuffer LEAF_NODE 10 dataBuffer LEAF_NODE 9 ; INIT 9 dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 10 dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 11 dataBuffer NAME 12 dataBuffer LEAF_NODE 13 dataBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 12 ( TYPE_NAME 12 char LEAF_NODE 13 char LEAF_NODE 12 * LEAF_NODE 12 ) FUNCTION_CALL 12 malloc ( 100 * sizeof ( char ) ) CALLEE 13 malloc LEAF_NODE 14 malloc LEAF_NODE 13 ( ARGUMENT 13 100 * sizeof ( char ) FIELD 14 100 LEAF_NODE 15 100 LEAF_NODE 14 * FUNCTION_CALL 14 sizeof ( char ) CALLEE 15 sizeof LEAF_NODE 16 sizeof LEAF_NODE 15 ( ARGUMENT 15 char FIELD 16 char LEAF_NODE 17 char LEAF_NODE 15 ) LEAF_NODE 13 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 8 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 9 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 10 memset LEAF_NODE 11 memset LEAF_NODE 10 ( ARGUMENT 10 dataBuffer FIELD 11 dataBuffer LEAF_NODE 12 dataBuffer LEAF_NODE 10 , ARGUMENT 10 'A' FIELD 11 'A' LEAF_NODE 12 'A' LEAF_NODE 10 , ARGUMENT 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 8 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 9 dataBuffer [ 100 - 1 ] = '\\0' LVAL 10 dataBuffer [ 100 - 1 ] FIELD 11 dataBuffer [ 100 - 1 ] LEAF_NODE 12 dataBuffer LEAF_NODE 12 [ EXPR 12 100 - 1 FIELD 13 100 LEAF_NODE 14 100 LEAF_NODE 13 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 '\\0' FIELD 11 '\\0' LEAF_NODE 12 '\\0' LEAF_NODE 8 ; EXPR_STATEMENT 7 data = dataBuffer ; EXPR 8 data = dataBuffer ASSIGN 9 data = dataBuffer LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 dataBuffer FIELD 11 dataBuffer LEAF_NODE 12 dataBuffer LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncpy ( data , source , 100 - 1 ) ; EXPR 5 strncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 strncpy ( data , source , 100 - 1 ) CALLEE 7 strncpy LEAF_NODE 8 strncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 100 - 1 ] = '\\0' ; EXPR 5 data [ 100 - 1 ] = '\\0' ASSIGN 6 data [ 100 - 1 ] = '\\0' LVAL 7 data [ 100 - 1 ] FIELD 8 data [ 100 - 1 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * dataBuffer ; dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ; VAR_DECL 8 char * dataBuffer ; dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 dataBuffer LEAF_NODE 10 dataBuffer LEAF_NODE 9 ; INIT 9 dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 10 dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 11 dataBuffer NAME 12 dataBuffer LEAF_NODE 13 dataBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 12 ( TYPE_NAME 12 char LEAF_NODE 13 char LEAF_NODE 12 * LEAF_NODE 12 ) FUNCTION_CALL 12 malloc ( 100 * sizeof ( char ) ) CALLEE 13 malloc LEAF_NODE 14 malloc LEAF_NODE 13 ( ARGUMENT 13 100 * sizeof ( char ) FIELD 14 100 LEAF_NODE 15 100 LEAF_NODE 14 * FUNCTION_CALL 14 sizeof ( char ) CALLEE 15 sizeof LEAF_NODE 16 sizeof LEAF_NODE 15 ( ARGUMENT 15 char FIELD 16 char LEAF_NODE 17 char LEAF_NODE 15 ) LEAF_NODE 13 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 8 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 9 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 10 memset LEAF_NODE 11 memset LEAF_NODE 10 ( ARGUMENT 10 dataBuffer FIELD 11 dataBuffer LEAF_NODE 12 dataBuffer LEAF_NODE 10 , ARGUMENT 10 'A' FIELD 11 'A' LEAF_NODE 12 'A' LEAF_NODE 10 , ARGUMENT 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 8 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 9 dataBuffer [ 100 - 1 ] = '\\0' LVAL 10 dataBuffer [ 100 - 1 ] FIELD 11 dataBuffer [ 100 - 1 ] LEAF_NODE 12 dataBuffer LEAF_NODE 12 [ EXPR 12 100 - 1 FIELD 13 100 LEAF_NODE 14 100 LEAF_NODE 13 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 '\\0' FIELD 11 '\\0' LEAF_NODE 12 '\\0' LEAF_NODE 8 ; EXPR_STATEMENT 7 data = dataBuffer ; EXPR 8 data = dataBuffer ASSIGN 9 data = dataBuffer LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 dataBuffer FIELD 11 dataBuffer LEAF_NODE 12 dataBuffer LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncpy ( data , source , 100 - 1 ) ; EXPR 5 strncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 strncpy ( data , source , 100 - 1 ) CALLEE 7 strncpy LEAF_NODE 8 strncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 100 - 1 ] = '\\0' ; EXPR 5 data [ 100 - 1 ] = '\\0' ASSIGN 6 data [ 100 - 1 ] = '\\0' LVAL 7 data [ 100 - 1 ] FIELD 8 data [ 100 - 1 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__malloc_char_ncpy_03_good LEAF_NODE 3 CWE124_Buffer_Underwrite__malloc_char_ncpy_03_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__malloc_char_ncpy_03_good ( ) ; EXPR 4 CWE124_Buffer_Underwrite__malloc_char_ncpy_03_good ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__malloc_char_ncpy_03_good ( ) CALLEE 6 CWE124_Buffer_Underwrite__malloc_char_ncpy_03_good LEAF_NODE 7 CWE124_Buffer_Underwrite__malloc_char_ncpy_03_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__malloc_char_ncpy_03_bad ( ) ; EXPR 4 CWE124_Buffer_Underwrite__malloc_char_ncpy_03_bad ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__malloc_char_ncpy_03_bad ( ) CALLEE 6 CWE124_Buffer_Underwrite__malloc_char_ncpy_03_bad LEAF_NODE 7 CWE124_Buffer_Underwrite__malloc_char_ncpy_03_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 40, "project": "cwe119_ast_vul_function_test_adv_23", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE124_Buffer_Underwrite__new_char_ncpy_17 { void bad ( ) { int i ; char * data ; data = NULL ; for ( i = 0 ; i < 1 ; i ++ ) { { char * dataBuffer = new char [ 100 ] ; memset ( dataBuffer , 'A' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = '\\0' ; data = dataBuffer - 8 ; } } { char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\\0' ; printLine ( data ) ; } } static void goodG2B ( ) { int h ; char * data ; data = NULL ; for ( h = 0 ; h < 1 ; h ++ ) { { char * dataBuffer = new char [ 100 ] ; memset ( dataBuffer , 'A' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = '\\0' ; data = dataBuffer ; } } { char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\\0' ; printLine ( data ) ; } } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE124_Buffer_Underwrite__new_char_ncpy_17 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int i ; VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < 1 EXPR 6 i < 1 FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 LEAF_NODE 8 char LEAF_NODE 8 * LEAF_NODE 8 dataBuffer LEAF_NODE 8 = LEAF_NODE 8 new EXPR_STATEMENT 8 char [ 100 ] ; EXPR 9 char [ 100 ] FIELD 10 char [ 100 ] LEAF_NODE 11 char LEAF_NODE 11 [ EXPR 11 100 FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 11 ] LEAF_NODE 9 ; EXPR_STATEMENT 8 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 9 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 10 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 11 memset LEAF_NODE 12 memset LEAF_NODE 11 ( ARGUMENT 11 dataBuffer FIELD 12 dataBuffer LEAF_NODE 13 dataBuffer LEAF_NODE 11 , ARGUMENT 11 'A' FIELD 12 'A' LEAF_NODE 13 'A' LEAF_NODE 11 , ARGUMENT 11 100 - 1 FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 8 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 9 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 10 dataBuffer [ 100 - 1 ] = '\\0' LVAL 11 dataBuffer [ 100 - 1 ] FIELD 12 dataBuffer [ 100 - 1 ] LEAF_NODE 13 dataBuffer LEAF_NODE 13 [ EXPR 13 100 - 1 FIELD 14 100 LEAF_NODE 15 100 LEAF_NODE 14 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 9 ; EXPR_STATEMENT 8 data = dataBuffer - 8 ; EXPR 9 data = dataBuffer - 8 ASSIGN 10 data = dataBuffer - 8 LVAL 11 data FIELD 12 data LEAF_NODE 13 data ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 dataBuffer - 8 FIELD 12 dataBuffer LEAF_NODE 13 dataBuffer LEAF_NODE 12 - FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 9 ; LEAF_NODE 7 } LEAF_NODE 6 } LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 strncpy ( data , source , 100 - 1 ) ; EXPR 6 strncpy ( data , source , 100 - 1 ) FUNCTION_CALL 7 strncpy ( data , source , 100 - 1 ) CALLEE 8 strncpy LEAF_NODE 9 strncpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 data [ 100 - 1 ] = '\\0' ; EXPR 6 data [ 100 - 1 ] = '\\0' ASSIGN 7 data [ 100 - 1 ] = '\\0' LVAL 8 data [ 100 - 1 ] FIELD 9 data [ 100 - 1 ] LEAF_NODE 10 data LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int h ; VAR_DECL 5 int h TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 h LEAF_NODE 7 h LEAF_NODE 5 ; SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 h = 0 ; EXPR 6 h = 0 ASSIGN 7 h = 0 LVAL 8 h FIELD 9 h LEAF_NODE 10 h ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 h < 1 EXPR 6 h < 1 FIELD 7 h LEAF_NODE 8 h REL_OPERATOR 7 < LEAF_NODE 8 < FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ; FOR_EXPR 5 h ++ EXPR 6 h ++ FIELD 7 h ++ LEAF_NODE 8 h LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 LEAF_NODE 8 char LEAF_NODE 8 * LEAF_NODE 8 dataBuffer LEAF_NODE 8 = LEAF_NODE 8 new EXPR_STATEMENT 8 char [ 100 ] ; EXPR 9 char [ 100 ] FIELD 10 char [ 100 ] LEAF_NODE 11 char LEAF_NODE 11 [ EXPR 11 100 FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 11 ] LEAF_NODE 9 ; EXPR_STATEMENT 8 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 9 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 10 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 11 memset LEAF_NODE 12 memset LEAF_NODE 11 ( ARGUMENT 11 dataBuffer FIELD 12 dataBuffer LEAF_NODE 13 dataBuffer LEAF_NODE 11 , ARGUMENT 11 'A' FIELD 12 'A' LEAF_NODE 13 'A' LEAF_NODE 11 , ARGUMENT 11 100 - 1 FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 8 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 9 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 10 dataBuffer [ 100 - 1 ] = '\\0' LVAL 11 dataBuffer [ 100 - 1 ] FIELD 12 dataBuffer [ 100 - 1 ] LEAF_NODE 13 dataBuffer LEAF_NODE 13 [ EXPR 13 100 - 1 FIELD 14 100 LEAF_NODE 15 100 LEAF_NODE 14 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 9 ; EXPR_STATEMENT 8 data = dataBuffer ; EXPR 9 data = dataBuffer ASSIGN 10 data = dataBuffer LVAL 11 data FIELD 12 data LEAF_NODE 13 data ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 dataBuffer FIELD 12 dataBuffer LEAF_NODE 13 dataBuffer LEAF_NODE 9 ; LEAF_NODE 7 } LEAF_NODE 6 } LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 strncpy ( data , source , 100 - 1 ) ; EXPR 6 strncpy ( data , source , 100 - 1 ) FUNCTION_CALL 7 strncpy ( data , source , 100 - 1 ) CALLEE 8 strncpy LEAF_NODE 9 strncpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 data [ 100 - 1 ] = '\\0' ; EXPR 6 data [ 100 - 1 ] = '\\0' ASSIGN 7 data [ 100 - 1 ] = '\\0' LVAL 8 data [ 100 - 1 ] FIELD 9 data [ 100 - 1 ] LEAF_NODE 10 data LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE124_Buffer_Underwrite__new_char_ncpy_17 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE124_Buffer_Underwrite__new_char_ncpy_17 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 41, "project": "cwe119_ast_vul_function_test_adv_1", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_dest_char_cpy_82 { struct CWE122_Heap_Based_Buffer_Overflow__cpp_dest_char_cpy_82_bad BASE_CLASSES { void action ; action action ( char * data ) ; } ; void CWE122_Heap_Based_Buffer_Overflow__cpp_dest_char_cpy_82_bad :: action ( char * data ) { { char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; strcpy ( data , source ) ; printLine ( data ) ; delete [ ] data ; } } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_dest_char_cpy_82 LEAF_NODE 2 { SIMPLE_DECL 2 struct CWE122_Heap_Based_Buffer_Overflow__cpp_dest_char_cpy_82_bad BASE_CLASSES { void action ; action action ( char * data ) ; } ; CLASS_DEF 3 struct CWE122_Heap_Based_Buffer_Overflow__cpp_dest_char_cpy_82_bad BASE_CLASSES { void action ; action action ( char * data ) ; } CLASS_DEF 4 struct CWE122_Heap_Based_Buffer_Overflow__cpp_dest_char_cpy_82_bad BASE_CLASSES { void action ; action action ( char * data ) ; } LEAF_NODE 5 struct CLASS_NAME 5 CWE122_Heap_Based_Buffer_Overflow__cpp_dest_char_cpy_82_bad LEAF_NODE 6 CWE122_Heap_Based_Buffer_Overflow__cpp_dest_char_cpy_82_bad LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 void action ; action action ( char * data ) ; SIMPLE_DECL 6 void action ; action action ( char * data ) ; VAR_DECL 7 void action ; action action ( char * data ) TYPE 8 void TYPE_NAME 9 void LEAF_NODE 10 void NAME 8 action LEAF_NODE 9 action LEAF_NODE 8 ; INIT 8 action action ( char * data ) ASSIGN 9 action action ( char * data ) LVAL 10 action NAME 11 action LEAF_NODE 12 action ASSIGN_OP 10 action NAME 11 action LEAF_NODE 12 action RVAL 10 ( char * data ) LEAF_NODE 11 ( EXPR 11 char * data FIELD 12 char LEAF_NODE 13 char LEAF_NODE 12 * FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 CWE122_Heap_Based_Buffer_Overflow__cpp_dest_char_cpy_82_bad :: action LEAF_NODE 4 CWE122_Heap_Based_Buffer_Overflow__cpp_dest_char_cpy_82_bad LEAF_NODE 4 :: LEAF_NODE 4 action PARAMETER_LIST 3 ( char * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 strcpy ( data , source ) ; EXPR 6 strcpy ( data , source ) FUNCTION_CALL 7 strcpy ( data , source ) CALLEE 8 strcpy LEAF_NODE 9 strcpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 42, "project": "cwe119_ast_vul_function_test_adv_2", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64b_badSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( data , 'A' , 100 - 1 ) ; EXPR 4 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( data , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 100 - 1 ] = '\\0' ; EXPR 4 data [ 100 - 1 ] = '\\0' ASSIGN 5 data [ 100 - 1 ] = '\\0' LVAL 6 data [ 100 - 1 ] FIELD 7 data [ 100 - 1 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64b_badSink ( & data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64b_badSink ( & data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64b_badSink ( & data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64b_badSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64b_goodG2BSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( data , 'A' , 50 - 1 ) ; EXPR 4 memset ( data , 'A' , 50 - 1 ) FUNCTION_CALL 5 memset ( data , 'A' , 50 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 50 - 1 FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 50 - 1 ] = '\\0' ; EXPR 4 data [ 50 - 1 ] = '\\0' ASSIGN 5 data [ 50 - 1 ] = '\\0' LVAL 6 data [ 50 - 1 ] FIELD 7 data [ 50 - 1 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 50 - 1 FIELD 9 50 LEAF_NODE 10 50 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64b_goodG2BSink ( & data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64b_goodG2BSink ( & data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64b_goodG2BSink ( & data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 43, "project": "cwe119_ast_vul_function_test_adv_76", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ASSIGN 6 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 50 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 50 * sizeof ( char ) FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52b_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52b_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52b_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52b_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ASSIGN 6 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 50 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 50 * sizeof ( char ) FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52b_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52b_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52b_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 44, "project": "cwe119_ast_vul_function_test_adv_137", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badGlobal ; CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badGlobal = 0 ; VAR_DECL 2 int CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badGlobal ; CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badGlobal = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badGlobal LEAF_NODE 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badGlobal LEAF_NODE 3 ; INIT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badGlobal = 0 ASSIGN 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badGlobal = 0 LVAL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badGlobal NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badGlobal LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badGlobal ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badSource LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badGlobal = 1 ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badGlobal = 1 ASSIGN 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badGlobal = 1 LVAL 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badGlobal FIELD 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badGlobal LEAF_NODE 8 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badGlobal ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badSource ( data ) ; EXPR 4 data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badSource ( data ) ASSIGN 5 data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badSource ( data ) FUNCTION_CALL 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badSource ( data ) CALLEE 8 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badSource LEAF_NODE 9 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_badSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 strncat ( dest , data , strlen ( data ) ) ; EXPR 5 strncat ( dest , data , strlen ( data ) ) FUNCTION_CALL 6 strncat ( dest , data , strlen ( data ) ) CALLEE 7 strncat LEAF_NODE 8 strncat LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( data ) FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 50 - 1 ] = '\\0' ; EXPR 5 dest [ 50 - 1 ] = '\\0' ASSIGN 6 dest [ 50 - 1 ] = '\\0' LVAL 7 dest [ 50 - 1 ] FIELD 8 dest [ 50 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } SIMPLE_DECL 1 int CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Global ; CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Global = 0 ; VAR_DECL 2 int CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Global ; CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Global = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Global LEAF_NODE 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Global LEAF_NODE 3 ; INIT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Global = 0 ASSIGN 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Global = 0 LVAL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Global NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Global LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Global ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; SIMPLE_DECL 1 int CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Global ; CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Global = 0 ; VAR_DECL 2 int CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Global ; CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Global = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Global LEAF_NODE 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Global LEAF_NODE 3 ; INIT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Global = 0 ASSIGN 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Global = 0 LVAL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Global NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Global LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Global ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Source LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Source PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Global = 0 ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Global = 0 ASSIGN 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Global = 0 LVAL 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Global FIELD 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Global LEAF_NODE 8 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Global ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Source ( data ) ; EXPR 4 data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Source ( data ) ASSIGN 5 data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Source ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Source ( data ) FUNCTION_CALL 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Source ( data ) CALLEE 8 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Source LEAF_NODE 9 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B1Source LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 strncat ( dest , data , strlen ( data ) ) ; EXPR 5 strncat ( dest , data , strlen ( data ) ) FUNCTION_CALL 6 strncat ( dest , data , strlen ( data ) ) CALLEE 7 strncat LEAF_NODE 8 strncat LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( data ) FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 50 - 1 ] = '\\0' ; EXPR 5 dest [ 50 - 1 ] = '\\0' ASSIGN 6 dest [ 50 - 1 ] = '\\0' LVAL 7 dest [ 50 - 1 ] FIELD 8 dest [ 50 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Source LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Source PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Global = 1 ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Global = 1 ASSIGN 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Global = 1 LVAL 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Global FIELD 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Global LEAF_NODE 8 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Global ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Source ( data ) ; EXPR 4 data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Source ( data ) ASSIGN 5 data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Source ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Source ( data ) FUNCTION_CALL 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Source ( data ) CALLEE 8 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Source LEAF_NODE 9 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_goodG2B2Source LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 strncat ( dest , data , strlen ( data ) ) ; EXPR 5 strncat ( dest , data , strlen ( data ) ) FUNCTION_CALL 6 strncat ( dest , data , strlen ( data ) ) CALLEE 7 strncat LEAF_NODE 8 strncat LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( data ) FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 50 - 1 ] = '\\0' ; EXPR 5 dest [ 50 - 1 ] = '\\0' ASSIGN 6 dest [ 50 - 1 ] = '\\0' LVAL 7 dest [ 50 - 1 ] FIELD 8 dest [ 50 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 45, "project": "cwe119_ast_vul_function_test_adv_106", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63b_badSink PARAMETER_LIST 2 ( char * * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * * dataPtr TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( data , 'A' , 100 - 1 ) ; EXPR 4 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( data , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 100 - 1 ] = '\\0' ; EXPR 4 data [ 100 - 1 ] = '\\0' ASSIGN 5 data [ 100 - 1 ] = '\\0' LVAL 6 data [ 100 - 1 ] FIELD 7 data [ 100 - 1 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63b_badSink ( & data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63b_badSink ( & data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63b_badSink ( & data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63b_badSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63b_goodG2BSink PARAMETER_LIST 2 ( char * * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * * data TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( data , 'A' , 50 - 1 ) ; EXPR 4 memset ( data , 'A' , 50 - 1 ) FUNCTION_CALL 5 memset ( data , 'A' , 50 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 50 - 1 FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 50 - 1 ] = '\\0' ; EXPR 4 data [ 50 - 1 ] = '\\0' ASSIGN 5 data [ 50 - 1 ] = '\\0' LVAL 6 data [ 50 - 1 ] FIELD 7 data [ 50 - 1 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 50 - 1 FIELD 9 50 LEAF_NODE 10 50 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63b_goodG2BSink ( & data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63b_goodG2BSink ( & data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63b_goodG2BSink ( & data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 46, "project": "cwe119_ast_vul_function_test_adv_109", "target": 1}
{"func": "SIMPLE_DECL 1 struct _CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType BASE_CLASSES { wchar_t * structFirst ; } CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType ; VAR_DECL 2 struct _CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType BASE_CLASSES { wchar_t * structFirst ; } CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType TYPE 3 struct _CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType BASE_CLASSES { wchar_t * structFirst ; } CLASS_DEF 4 struct _CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType BASE_CLASSES { wchar_t * structFirst ; } LEAF_NODE 5 struct CLASS_NAME 5 _CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType LEAF_NODE 6 _CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 wchar_t * structFirst ; SIMPLE_DECL 6 wchar_t * structFirst ; VAR_DECL 7 wchar_t * structFirst TYPE 8 wchar_t * TYPE_NAME 9 wchar_t LEAF_NODE 10 wchar_t POINTER 9 * LEAF_NODE 10 * NAME 8 structFirst LEAF_NODE 9 structFirst LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67b_badSink PARAMETER_LIST 2 ( CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType myStruct TYPE 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType TYPE_NAME 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType LEAF_NODE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType myStruct ; VAR_DECL 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType myStruct TYPE 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType TYPE_NAME 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType NAME 5 myStruct LEAF_NODE 6 myStruct LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 10 ] dataBadBuffer ; VAR_DECL 4 wchar_t [ 10 ] dataBadBuffer TYPE 5 wchar_t [ 10 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 10 ] LEAF_NODE 7 [ FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 10 + 1 ] dataGoodBuffer ; VAR_DECL 4 wchar_t [ 10 + 1 ] dataGoodBuffer TYPE 5 wchar_t [ 10 + 1 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 10 + 1 ] LEAF_NODE 7 [ FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 7 + FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 myStruct . structFirst = data ; EXPR 4 myStruct . structFirst = data ASSIGN 5 myStruct . structFirst = data LVAL 6 myStruct . structFirst FIELD 7 myStruct . structFirst LEAF_NODE 8 myStruct LEAF_NODE 8 . LEAF_NODE 8 structFirst ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67b_badSink ( myStruct ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67b_badSink ( myStruct ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67b_badSink ( myStruct ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67b_badSink LEAF_NODE 6 ( ARGUMENT 6 myStruct FIELD 7 myStruct LEAF_NODE 8 myStruct LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67b_goodG2BSink PARAMETER_LIST 2 ( CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType myStruct TYPE 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType TYPE_NAME 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType LEAF_NODE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType myStruct ; VAR_DECL 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType myStruct TYPE 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType TYPE_NAME 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_structType NAME 5 myStruct LEAF_NODE 6 myStruct LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 10 ] dataBadBuffer ; VAR_DECL 4 wchar_t [ 10 ] dataBadBuffer TYPE 5 wchar_t [ 10 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 10 ] LEAF_NODE 7 [ FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 10 + 1 ] dataGoodBuffer ; VAR_DECL 4 wchar_t [ 10 + 1 ] dataGoodBuffer TYPE 5 wchar_t [ 10 + 1 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 10 + 1 ] LEAF_NODE 7 [ FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 7 + FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 myStruct . structFirst = data ; EXPR 4 myStruct . structFirst = data ASSIGN 5 myStruct . structFirst = data LVAL 6 myStruct . structFirst FIELD 7 myStruct . structFirst LEAF_NODE 8 myStruct LEAF_NODE 8 . LEAF_NODE 8 structFirst ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67b_goodG2BSink ( myStruct ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67b_goodG2BSink ( myStruct ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67b_goodG2BSink ( myStruct ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 myStruct FIELD 7 myStruct LEAF_NODE 8 myStruct LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 47, "project": "cwe119_ast_vul_function_test_adv_150", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_01_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_01_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ASSIGN 6 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 50 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 50 * sizeof ( char ) FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcat ( data , source ) ; EXPR 5 strcat ( data , source ) FUNCTION_CALL 6 strcat ( data , source ) CALLEE 7 strcat LEAF_NODE 8 strcat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ASSIGN 6 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 50 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 50 * sizeof ( char ) FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcat ( data , source ) ; EXPR 5 strcat ( data , source ) FUNCTION_CALL 6 strcat ( data , source ) CALLEE 7 strcat LEAF_NODE 8 strcat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_01_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_01_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_01_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_01_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_01_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_01_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_01_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_01_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_01_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_01_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_01_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_01_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 48, "project": "cwe119_ast_vul_function_test_adv_21", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52c_badSink LEAF_NODE 3 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52c_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52b_badSink LEAF_NODE 3 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52b_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52c_badSink ( data ) ; EXPR 4 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52c_badSink ( data ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52c_badSink ( data ) CALLEE 6 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52c_badSink LEAF_NODE 7 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52c_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52c_goodG2BSink LEAF_NODE 3 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52c_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52b_goodG2BSink LEAF_NODE 3 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52b_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52c_goodG2BSink ( data ) ; EXPR 4 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52c_goodG2BSink ( data ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52c_goodG2BSink ( data ) CALLEE 6 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52c_goodG2BSink LEAF_NODE 7 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52c_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 49, "project": "cwe119_ast_vul_function_test_adv_57", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 test LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 test PARAMETER_LIST 2 ( char * str ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * str TYPE 4 char * EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 str LEAF_NODE 5 str LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char [ MAXSIZE ] buf ; VAR_DECL 4 char [ MAXSIZE ] buf TYPE 5 char [ MAXSIZE ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ MAXSIZE ] LEAF_NODE 7 [ FIELD 7 MAXSIZE LEAF_NODE 8 MAXSIZE LEAF_NODE 7 ] NAME 5 buf LEAF_NODE 6 buf LEAF_NODE 4 ; EXPR_STATEMENT 3 sprintf ( buf , \"<%.5s>\" , str ) ; EXPR 4 sprintf ( buf , \"<%.5s>\" , str ) FUNCTION_CALL 5 sprintf ( buf , \"<%.5s>\" , str ) CALLEE 6 sprintf LEAF_NODE 7 sprintf LEAF_NODE 6 ( ARGUMENT 6 buf FIELD 7 buf LEAF_NODE 8 buf LEAF_NODE 6 , ARGUMENT 6 \"<%.5s>\" FIELD 7 \"<%.5s>\" LEAF_NODE 8 \"<%.5s>\" LEAF_NODE 6 , ARGUMENT 6 str FIELD 7 str LEAF_NODE 8 str LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printf ( \"result: %s\\n\" , buf ) ; EXPR 4 printf ( \"result: %s\\n\" , buf ) FUNCTION_CALL 5 printf ( \"result: %s\\n\" , buf ) CALLEE 6 printf LEAF_NODE 7 printf LEAF_NODE 6 ( ARGUMENT 6 \"result: %s\\n\" FIELD 7 \"result: %s\\n\" LEAF_NODE 8 \"result: %s\\n\" LEAF_NODE 6 , ARGUMENT 6 buf FIELD 7 buf LEAF_NODE 8 buf LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * * argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * * argv TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * userstr ; VAR_DECL 4 char * userstr TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 userstr LEAF_NODE 6 userstr LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 argc > 1 EXPR 5 argc > 1 FIELD 6 argc LEAF_NODE 7 argc REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 userstr = argv [ 1 ] ; EXPR 7 userstr = argv [ 1 ] ASSIGN 8 userstr = argv [ 1 ] LVAL 9 userstr FIELD 10 userstr LEAF_NODE 11 userstr ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 argv [ 1 ] FIELD 10 argv [ 1 ] LEAF_NODE 11 argv LEAF_NODE 11 [ EXPR 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] LEAF_NODE 7 ; EXPR_STATEMENT 6 test ( userstr ) ; EXPR 7 test ( userstr ) FUNCTION_CALL 8 test ( userstr ) CALLEE 9 test LEAF_NODE 10 test LEAF_NODE 9 ( ARGUMENT 9 userstr FIELD 10 userstr LEAF_NODE 11 userstr LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 50, "project": "cwe119_ast_vul_function_test_adv_37", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 char * CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_badData ; VAR_DECL 2 char * CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_badData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_badData LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_badData LEAF_NODE 2 ; SIMPLE_DECL 1 char * CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_goodG2BData ; VAR_DECL 2 char * CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_goodG2BData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_goodG2BData LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_goodG2BData LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68b_badSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_badData ; VAR_DECL 4 char * data ; data = CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_badData TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_badData ASSIGN 6 data = CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_badData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_badData FIELD 8 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_badData LEAF_NODE 9 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_badData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcat ( data , source ) ; EXPR 5 strcat ( data , source ) FUNCTION_CALL 6 strcat ( data , source ) CALLEE 7 strcat LEAF_NODE 8 strcat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68b_goodG2BSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_goodG2BData ; VAR_DECL 4 char * data ; data = CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_goodG2BData TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_goodG2BData ASSIGN 6 data = CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_goodG2BData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_goodG2BData FIELD 8 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_goodG2BData LEAF_NODE 9 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68_goodG2BData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcat ( data , source ) ; EXPR 5 strcat ( data , source ) FUNCTION_CALL 6 strcat ( data , source ) CALLEE 7 strcat LEAF_NODE 8 strcat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 51, "project": "cwe119_ast_vul_function_test_adv_95", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printf LEAF_NODE 3 printf PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printf LEAF_NODE 3 printf PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printf LEAF_NODE 3 printf PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printf LEAF_NODE 3 printf PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printf LEAF_NODE 3 printf PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printf LEAF_NODE 3 printf PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE134_Uncontrolled_Format_String__char_console_printf_81 { struct CWE134_Uncontrolled_Format_String__char_console_printf_81_goodG2B BASE_CLASSES { void action ( char * data ) const ; } ; void CWE134_Uncontrolled_Format_String__char_console_printf_81_goodG2B :: action ( char * data ) { printf ( data ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE134_Uncontrolled_Format_String__char_console_printf_81 LEAF_NODE 2 { SIMPLE_DECL 2 struct CWE134_Uncontrolled_Format_String__char_console_printf_81_goodG2B BASE_CLASSES { void action ( char * data ) const ; } ; CLASS_DEF 3 struct CWE134_Uncontrolled_Format_String__char_console_printf_81_goodG2B BASE_CLASSES { void action ( char * data ) const ; } CLASS_DEF 4 struct CWE134_Uncontrolled_Format_String__char_console_printf_81_goodG2B BASE_CLASSES { void action ( char * data ) const ; } LEAF_NODE 5 struct CLASS_NAME 5 CWE134_Uncontrolled_Format_String__char_console_printf_81_goodG2B LEAF_NODE 6 CWE134_Uncontrolled_Format_String__char_console_printf_81_goodG2B LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 void action ( char * data ) const ; LEAF_NODE 6 void LEAF_NODE 6 action LEAF_NODE 6 ( LEAF_NODE 6 char LEAF_NODE 6 * LEAF_NODE 6 data LEAF_NODE 6 ) LEAF_NODE 6 const LEAF_NODE 6 ; LEAF_NODE 5 } LEAF_NODE 3 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 CWE134_Uncontrolled_Format_String__char_console_printf_81_goodG2B :: action LEAF_NODE 4 CWE134_Uncontrolled_Format_String__char_console_printf_81_goodG2B LEAF_NODE 4 :: LEAF_NODE 4 action PARAMETER_LIST 3 ( char * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 printf ( data ) ; EXPR 5 printf ( data ) FUNCTION_CALL 6 printf ( data ) CALLEE 7 printf LEAF_NODE 8 printf LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 52, "project": "cwe119_ast_vul_function_test_adv_176", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_62 { void badSource ( wchar_t * & data ) { wmemset ( data , L 'A' , 100 - 1 ) ; data [ 100 - 1 ] = L '\\0' ; } void goodG2BSource ( wchar_t * & data ) { wmemset ( data , L 'A' , 50 - 1 ) ; data [ 50 - 1 ] = L '\\0' ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_62 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSource LEAF_NODE 4 badSource PARAMETER_LIST 3 ( wchar_t * & data ) LEAF_NODE 4 ( PARAMETER_DECL 4 wchar_t * & data TYPE 5 wchar_t * & TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * & LEAF_NODE 7 * LEAF_NODE 7 & NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'A' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSource LEAF_NODE 4 goodG2BSource PARAMETER_LIST 3 ( wchar_t * & data ) LEAF_NODE 4 ( PARAMETER_DECL 4 wchar_t * & data TYPE 5 wchar_t * & TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * & LEAF_NODE 7 * LEAF_NODE 7 & NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'A' LEAF_NODE 4 , LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 53, "project": "cwe119_ast_vul_function_test_adv_75", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE124_Buffer_Underwrite__char_alloca_cpy_72 { void badSink ( vector < char * > dataVector ) { STATEMENTS } ; void bad ( ) { char * data ; vector < char * > dataVector ; char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; memset ( dataBuffer , 'A' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = '\\0' ; data = dataBuffer - 8 ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; badSink ( dataVector ) ; } void goodG2BSink ( vector < char * > dataVector ) { STATEMENTS } ; static void goodG2B ( ) { char * data ; vector < char * > dataVector ; char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; memset ( dataBuffer , 'A' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = '\\0' ; data = dataBuffer ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; goodG2BSink ( dataVector ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE124_Buffer_Underwrite__char_alloca_cpy_72 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( vector < char * > dataVector ) LEAF_NODE 4 ( PARAMETER_DECL 4 vector < char * > dataVector TYPE 5 vector < char * > TYPE_NAME 6 vector < char * > LEAF_NODE 7 vector LEAF_NODE 7 < LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataVector LEAF_NODE 6 dataVector LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 vector < char * > dataVector ; VAR_DECL 5 vector < char * > dataVector TYPE 6 vector < char * > TYPE_NAME 7 vector < char * > LEAF_NODE 8 vector LEAF_NODE 8 < LEAF_NODE 8 char LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataVector LEAF_NODE 7 dataVector LEAF_NODE 5 ; SIMPLE_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 5 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 dataBuffer LEAF_NODE 7 dataBuffer LEAF_NODE 6 ; INIT 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 7 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 8 dataBuffer NAME 9 dataBuffer LEAF_NODE 10 dataBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 9 ( TYPE_NAME 9 char LEAF_NODE 10 char LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 10 ALLOCA LEAF_NODE 11 ALLOCA LEAF_NODE 10 ( ARGUMENT 10 100 * sizeof ( char ) FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( char ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 char FIELD 13 char LEAF_NODE 14 char LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 5 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 6 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 dataBuffer FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 7 , ARGUMENT 7 'A' FIELD 8 'A' LEAF_NODE 9 'A' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 5 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 6 dataBuffer [ 100 - 1 ] = '\\0' LVAL 7 dataBuffer [ 100 - 1 ] FIELD 8 dataBuffer [ 100 - 1 ] LEAF_NODE 9 dataBuffer LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataBuffer - 8 ; EXPR 5 data = dataBuffer - 8 ASSIGN 6 data = dataBuffer - 8 LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataBuffer - 8 FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 8 - FIELD 8 8 LEAF_NODE 9 8 LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( dataVector ) ; EXPR 5 badSink ( dataVector ) FUNCTION_CALL 6 badSink ( dataVector ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( ARGUMENT 7 dataVector FIELD 8 dataVector LEAF_NODE 9 dataVector LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( vector < char * > dataVector ) LEAF_NODE 4 ( PARAMETER_DECL 4 vector < char * > dataVector TYPE 5 vector < char * > TYPE_NAME 6 vector < char * > LEAF_NODE 7 vector LEAF_NODE 7 < LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataVector LEAF_NODE 6 dataVector LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 vector < char * > dataVector ; VAR_DECL 5 vector < char * > dataVector TYPE 6 vector < char * > TYPE_NAME 7 vector < char * > LEAF_NODE 8 vector LEAF_NODE 8 < LEAF_NODE 8 char LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataVector LEAF_NODE 7 dataVector LEAF_NODE 5 ; SIMPLE_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 5 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 dataBuffer LEAF_NODE 7 dataBuffer LEAF_NODE 6 ; INIT 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 7 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 8 dataBuffer NAME 9 dataBuffer LEAF_NODE 10 dataBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 9 ( TYPE_NAME 9 char LEAF_NODE 10 char LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 10 ALLOCA LEAF_NODE 11 ALLOCA LEAF_NODE 10 ( ARGUMENT 10 100 * sizeof ( char ) FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( char ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 char FIELD 13 char LEAF_NODE 14 char LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 5 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 6 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 dataBuffer FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 7 , ARGUMENT 7 'A' FIELD 8 'A' LEAF_NODE 9 'A' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 5 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 6 dataBuffer [ 100 - 1 ] = '\\0' LVAL 7 dataBuffer [ 100 - 1 ] FIELD 8 dataBuffer [ 100 - 1 ] LEAF_NODE 9 dataBuffer LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataBuffer ; EXPR 5 data = dataBuffer ASSIGN 6 data = dataBuffer LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataBuffer FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( dataVector ) ; EXPR 5 goodG2BSink ( dataVector ) FUNCTION_CALL 6 goodG2BSink ( dataVector ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( ARGUMENT 7 dataVector FIELD 8 dataVector LEAF_NODE 9 dataVector LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE124_Buffer_Underwrite__char_alloca_cpy_72 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE124_Buffer_Underwrite__char_alloca_cpy_72 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 54, "project": "cwe119_ast_vul_function_test_adv_167", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 globalReturnsTrueOrFalse LEAF_NODE 3 globalReturnsTrueOrFalse PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 globalReturnsTrueOrFalse LEAF_NODE 3 globalReturnsTrueOrFalse PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 globalReturnsTrueOrFalse LEAF_NODE 3 globalReturnsTrueOrFalse PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 globalReturnsTrueOrFalse LEAF_NODE 3 globalReturnsTrueOrFalse PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 globalReturnsTrueOrFalse LEAF_NODE 3 globalReturnsTrueOrFalse PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 globalReturnsTrueOrFalse LEAF_NODE 3 globalReturnsTrueOrFalse PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE416_Use_After_Free__new_delete_array_char_12 { void bad ( ) { char * data ; data = NULL ; if ( globalReturnsTrueOrFalse ( ) ) { data = new char [ 100 ] ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\\0' ; delete [ ] data ; } else { data = new char [ 100 ] ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\\0' ; } if ( globalReturnsTrueOrFalse ( ) ) { printLine ( data ) ; } else { ; } } static void goodB2G ( ) { char * data ; data = NULL ; if ( globalReturnsTrueOrFalse ( ) ) { data = new char [ 100 ] ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\\0' ; delete [ ] data ; } else { data = new char [ 100 ] ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\\0' ; delete [ ] data ; } if ( globalReturnsTrueOrFalse ( ) ) { ; } else { ; } } static void goodG2B ( ) { char * data ; data = NULL ; if ( globalReturnsTrueOrFalse ( ) ) { data = new char [ 100 ] ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\\0' ; } else { data = new char [ 100 ] ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\\0' ; } if ( globalReturnsTrueOrFalse ( ) ) { printLine ( data ) ; } else { printLine ( data ) ; } } void good ( ) { goodB2G ( ) ; goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE416_Use_After_Free__new_delete_array_char_12 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 globalReturnsTrueOrFalse ( ) EXPR 6 globalReturnsTrueOrFalse ( ) FUNCTION_CALL 7 globalReturnsTrueOrFalse ( ) CALLEE 8 globalReturnsTrueOrFalse LEAF_NODE 9 globalReturnsTrueOrFalse LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 data LEAF_NODE 7 = LEAF_NODE 7 new EXPR_STATEMENT 7 char [ 100 ] ; EXPR 8 char [ 100 ] FIELD 9 char [ 100 ] LEAF_NODE 10 char LEAF_NODE 10 [ EXPR 10 100 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 10 ] LEAF_NODE 8 ; EXPR_STATEMENT 7 memset ( data , 'A' , 100 - 1 ) ; EXPR 8 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 9 memset ( data , 'A' , 100 - 1 ) CALLEE 10 memset LEAF_NODE 11 memset LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 , ARGUMENT 10 'A' FIELD 11 'A' LEAF_NODE 12 'A' LEAF_NODE 10 , ARGUMENT 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 data [ 100 - 1 ] = '\\0' ; EXPR 8 data [ 100 - 1 ] = '\\0' ASSIGN 9 data [ 100 - 1 ] = '\\0' LVAL 10 data [ 100 - 1 ] FIELD 11 data [ 100 - 1 ] LEAF_NODE 12 data LEAF_NODE 12 [ EXPR 12 100 - 1 FIELD 13 100 LEAF_NODE 14 100 LEAF_NODE 13 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 '\\0' FIELD 11 '\\0' LEAF_NODE 12 '\\0' LEAF_NODE 8 ; LEAF_NODE 7 delete LEAF_NODE 7 [ LEAF_NODE 7 ] EXPR_STATEMENT 7 data ; EXPR 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 data LEAF_NODE 7 = LEAF_NODE 7 new EXPR_STATEMENT 7 char [ 100 ] ; EXPR 8 char [ 100 ] FIELD 9 char [ 100 ] LEAF_NODE 10 char LEAF_NODE 10 [ EXPR 10 100 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 10 ] LEAF_NODE 8 ; EXPR_STATEMENT 7 memset ( data , 'A' , 100 - 1 ) ; EXPR 8 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 9 memset ( data , 'A' , 100 - 1 ) CALLEE 10 memset LEAF_NODE 11 memset LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 , ARGUMENT 10 'A' FIELD 11 'A' LEAF_NODE 12 'A' LEAF_NODE 10 , ARGUMENT 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 data [ 100 - 1 ] = '\\0' ; EXPR 8 data [ 100 - 1 ] = '\\0' ASSIGN 9 data [ 100 - 1 ] = '\\0' LVAL 10 data [ 100 - 1 ] FIELD 11 data [ 100 - 1 ] LEAF_NODE 12 data LEAF_NODE 12 [ EXPR 12 100 - 1 FIELD 13 100 LEAF_NODE 14 100 LEAF_NODE 13 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 '\\0' FIELD 11 '\\0' LEAF_NODE 12 '\\0' LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 globalReturnsTrueOrFalse ( ) EXPR 6 globalReturnsTrueOrFalse ( ) FUNCTION_CALL 7 globalReturnsTrueOrFalse ( ) CALLEE 8 globalReturnsTrueOrFalse LEAF_NODE 9 globalReturnsTrueOrFalse LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( data ) ; EXPR 8 printLine ( data ) FUNCTION_CALL 9 printLine ( data ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 ; LEAF_NODE 6 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodB2G LEAF_NODE 4 goodB2G PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 globalReturnsTrueOrFalse ( ) EXPR 6 globalReturnsTrueOrFalse ( ) FUNCTION_CALL 7 globalReturnsTrueOrFalse ( ) CALLEE 8 globalReturnsTrueOrFalse LEAF_NODE 9 globalReturnsTrueOrFalse LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 data LEAF_NODE 7 = LEAF_NODE 7 new EXPR_STATEMENT 7 char [ 100 ] ; EXPR 8 char [ 100 ] FIELD 9 char [ 100 ] LEAF_NODE 10 char LEAF_NODE 10 [ EXPR 10 100 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 10 ] LEAF_NODE 8 ; EXPR_STATEMENT 7 memset ( data , 'A' , 100 - 1 ) ; EXPR 8 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 9 memset ( data , 'A' , 100 - 1 ) CALLEE 10 memset LEAF_NODE 11 memset LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 , ARGUMENT 10 'A' FIELD 11 'A' LEAF_NODE 12 'A' LEAF_NODE 10 , ARGUMENT 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 data [ 100 - 1 ] = '\\0' ; EXPR 8 data [ 100 - 1 ] = '\\0' ASSIGN 9 data [ 100 - 1 ] = '\\0' LVAL 10 data [ 100 - 1 ] FIELD 11 data [ 100 - 1 ] LEAF_NODE 12 data LEAF_NODE 12 [ EXPR 12 100 - 1 FIELD 13 100 LEAF_NODE 14 100 LEAF_NODE 13 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 '\\0' FIELD 11 '\\0' LEAF_NODE 12 '\\0' LEAF_NODE 8 ; LEAF_NODE 7 delete LEAF_NODE 7 [ LEAF_NODE 7 ] EXPR_STATEMENT 7 data ; EXPR 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 data LEAF_NODE 7 = LEAF_NODE 7 new EXPR_STATEMENT 7 char [ 100 ] ; EXPR 8 char [ 100 ] FIELD 9 char [ 100 ] LEAF_NODE 10 char LEAF_NODE 10 [ EXPR 10 100 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 10 ] LEAF_NODE 8 ; EXPR_STATEMENT 7 memset ( data , 'A' , 100 - 1 ) ; EXPR 8 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 9 memset ( data , 'A' , 100 - 1 ) CALLEE 10 memset LEAF_NODE 11 memset LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 , ARGUMENT 10 'A' FIELD 11 'A' LEAF_NODE 12 'A' LEAF_NODE 10 , ARGUMENT 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 data [ 100 - 1 ] = '\\0' ; EXPR 8 data [ 100 - 1 ] = '\\0' ASSIGN 9 data [ 100 - 1 ] = '\\0' LVAL 10 data [ 100 - 1 ] FIELD 11 data [ 100 - 1 ] LEAF_NODE 12 data LEAF_NODE 12 [ EXPR 12 100 - 1 FIELD 13 100 LEAF_NODE 14 100 LEAF_NODE 13 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 '\\0' FIELD 11 '\\0' LEAF_NODE 12 '\\0' LEAF_NODE 8 ; LEAF_NODE 7 delete LEAF_NODE 7 [ LEAF_NODE 7 ] EXPR_STATEMENT 7 data ; EXPR 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 globalReturnsTrueOrFalse ( ) EXPR 6 globalReturnsTrueOrFalse ( ) FUNCTION_CALL 7 globalReturnsTrueOrFalse ( ) CALLEE 8 globalReturnsTrueOrFalse LEAF_NODE 9 globalReturnsTrueOrFalse LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 ; LEAF_NODE 6 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 globalReturnsTrueOrFalse ( ) EXPR 6 globalReturnsTrueOrFalse ( ) FUNCTION_CALL 7 globalReturnsTrueOrFalse ( ) CALLEE 8 globalReturnsTrueOrFalse LEAF_NODE 9 globalReturnsTrueOrFalse LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 data LEAF_NODE 7 = LEAF_NODE 7 new EXPR_STATEMENT 7 char [ 100 ] ; EXPR 8 char [ 100 ] FIELD 9 char [ 100 ] LEAF_NODE 10 char LEAF_NODE 10 [ EXPR 10 100 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 10 ] LEAF_NODE 8 ; EXPR_STATEMENT 7 memset ( data , 'A' , 100 - 1 ) ; EXPR 8 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 9 memset ( data , 'A' , 100 - 1 ) CALLEE 10 memset LEAF_NODE 11 memset LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 , ARGUMENT 10 'A' FIELD 11 'A' LEAF_NODE 12 'A' LEAF_NODE 10 , ARGUMENT 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 data [ 100 - 1 ] = '\\0' ; EXPR 8 data [ 100 - 1 ] = '\\0' ASSIGN 9 data [ 100 - 1 ] = '\\0' LVAL 10 data [ 100 - 1 ] FIELD 11 data [ 100 - 1 ] LEAF_NODE 12 data LEAF_NODE 12 [ EXPR 12 100 - 1 FIELD 13 100 LEAF_NODE 14 100 LEAF_NODE 13 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 '\\0' FIELD 11 '\\0' LEAF_NODE 12 '\\0' LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 data LEAF_NODE 7 = LEAF_NODE 7 new EXPR_STATEMENT 7 char [ 100 ] ; EXPR 8 char [ 100 ] FIELD 9 char [ 100 ] LEAF_NODE 10 char LEAF_NODE 10 [ EXPR 10 100 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 10 ] LEAF_NODE 8 ; EXPR_STATEMENT 7 memset ( data , 'A' , 100 - 1 ) ; EXPR 8 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 9 memset ( data , 'A' , 100 - 1 ) CALLEE 10 memset LEAF_NODE 11 memset LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 , ARGUMENT 10 'A' FIELD 11 'A' LEAF_NODE 12 'A' LEAF_NODE 10 , ARGUMENT 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 data [ 100 - 1 ] = '\\0' ; EXPR 8 data [ 100 - 1 ] = '\\0' ASSIGN 9 data [ 100 - 1 ] = '\\0' LVAL 10 data [ 100 - 1 ] FIELD 11 data [ 100 - 1 ] LEAF_NODE 12 data LEAF_NODE 12 [ EXPR 12 100 - 1 FIELD 13 100 LEAF_NODE 14 100 LEAF_NODE 13 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 '\\0' FIELD 11 '\\0' LEAF_NODE 12 '\\0' LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 globalReturnsTrueOrFalse ( ) EXPR 6 globalReturnsTrueOrFalse ( ) FUNCTION_CALL 7 globalReturnsTrueOrFalse ( ) CALLEE 8 globalReturnsTrueOrFalse LEAF_NODE 9 globalReturnsTrueOrFalse LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( data ) ; EXPR 8 printLine ( data ) FUNCTION_CALL 9 printLine ( data ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( data ) ; EXPR 8 printLine ( data ) FUNCTION_CALL 9 printLine ( data ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodB2G ( ) ; EXPR 5 goodB2G ( ) FUNCTION_CALL 6 goodB2G ( ) CALLEE 7 goodB2G LEAF_NODE 8 goodB2G LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE416_Use_After_Free__new_delete_array_char_12 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE416_Use_After_Free__new_delete_array_char_12 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 55, "project": "cwe119_ast_vul_function_test_adv_70", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_52c_badSink LEAF_NODE 3 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_52c_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] dest ; VAR_DECL 5 wchar_t [ 100 ] dest TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 dest LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( dest , data , wcslen ( dest ) ) ; EXPR 5 wcsncpy ( dest , data , wcslen ( dest ) ) FUNCTION_CALL 6 wcsncpy ( dest , data , wcslen ( dest ) ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 wcslen ( dest ) FUNCTION_CALL 8 wcslen ( dest ) CALLEE 9 wcslen LEAF_NODE 10 wcslen LEAF_NODE 9 ( ARGUMENT 9 dest FIELD 10 dest LEAF_NODE 11 dest LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( dest ) ; EXPR 5 printWLine ( dest ) FUNCTION_CALL 6 printWLine ( dest ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_52c_goodG2BSink LEAF_NODE 3 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_52c_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] dest ; VAR_DECL 5 wchar_t [ 100 ] dest TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 dest LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( dest , data , wcslen ( dest ) ) ; EXPR 5 wcsncpy ( dest , data , wcslen ( dest ) ) FUNCTION_CALL 6 wcsncpy ( dest , data , wcslen ( dest ) ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 wcslen ( dest ) FUNCTION_CALL 8 wcslen ( dest ) CALLEE 9 wcslen LEAF_NODE 10 wcslen LEAF_NODE 9 ( ARGUMENT 9 dest FIELD 10 dest LEAF_NODE 11 dest LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( dest ) ; EXPR 5 printWLine ( dest ) FUNCTION_CALL 6 printWLine ( dest ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 56, "project": "cwe119_ast_vul_function_test_adv_90", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printIntLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printIntLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_13_bad LEAF_NODE 3 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_13_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int data ; VAR_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = - 1 ; EXPR 4 data = - 1 ASSIGN 5 data = - 1 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 - 1 UNARY_EXPR 7 - 1 UNARY_OPERATOR 8 - LEAF_NODE 9 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE == 5 EXPR 5 GLOBAL_CONST_FIVE == 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 8 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 9 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 10 char LEAF_NODE 11 char TYPE_SUFFIX 10 [ CHAR_ARRAY_SIZE ] LEAF_NODE 11 [ FIELD 11 CHAR_ARRAY_SIZE LEAF_NODE 12 CHAR_ARRAY_SIZE LEAF_NODE 11 ] NAME 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 9 ; INIT 9 inputBuffer = \"\" ASSIGN 10 inputBuffer = \"\" LVAL 11 inputBuffer NAME 12 inputBuffer LEAF_NODE 13 inputBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 \"\" FIELD 12 \"\" LEAF_NODE 13 \"\" LEAF_NODE 8 ; SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 9 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 10 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 inputBuffer FIELD 12 inputBuffer LEAF_NODE 13 inputBuffer LEAF_NODE 11 , ARGUMENT 11 CHAR_ARRAY_SIZE FIELD 12 CHAR_ARRAY_SIZE LEAF_NODE 13 CHAR_ARRAY_SIZE LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 data = atoi ( inputBuffer ) ; EXPR 11 data = atoi ( inputBuffer ) ASSIGN 12 data = atoi ( inputBuffer ) LVAL 13 data FIELD 14 data LEAF_NODE 15 data ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 atoi ( inputBuffer ) FUNCTION_CALL 14 atoi ( inputBuffer ) CALLEE 15 atoi LEAF_NODE 16 atoi LEAF_NODE 15 ( ARGUMENT 15 inputBuffer FIELD 16 inputBuffer LEAF_NODE 17 inputBuffer LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed.\" ) ; EXPR 11 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed.\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed.\" FIELD 14 \"fgets() failed.\" LEAF_NODE 15 \"fgets() failed.\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; SIMPLE_DECL 4 int * intPointer ; VAR_DECL 5 int * intPointer TYPE 6 int * TYPE_NAME 7 int LEAF_NODE 8 int POINTER 7 * LEAF_NODE 8 * NAME 6 intPointer LEAF_NODE 7 intPointer LEAF_NODE 5 ; EXPR_STATEMENT 4 intPointer = ( int * ) malloc ( data * sizeof ( int ) ) ; EXPR 5 intPointer = ( int * ) malloc ( data * sizeof ( int ) ) ASSIGN 6 intPointer = ( int * ) malloc ( data * sizeof ( int ) ) LVAL 7 intPointer FIELD 8 intPointer LEAF_NODE 9 intPointer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( int * ) malloc ( data * sizeof ( int ) ) LEAF_NODE 8 ( TYPE_NAME 8 int LEAF_NODE 9 int LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( data * sizeof ( int ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 data * sizeof ( int ) FIELD 10 data LEAF_NODE 11 data LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( int ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 int FIELD 12 int LEAF_NODE 13 int LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < ( size_t ) data EXPR 6 i < ( size_t ) data FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < LEAF_NODE 7 ( TYPE_NAME 7 size_t LEAF_NODE 8 size_t LEAF_NODE 7 ) FIELD 7 data LEAF_NODE 8 data LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 intPointer [ i ] = 0 ; EXPR 8 intPointer [ i ] = 0 ASSIGN 9 intPointer [ i ] = 0 LVAL 10 intPointer [ i ] FIELD 11 intPointer [ i ] LEAF_NODE 12 intPointer LEAF_NODE 12 [ EXPR 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 8 ; LEAF_NODE 6 } EXPR_STATEMENT 4 printIntLine ( intPointer [ 0 ] ) ; EXPR 5 printIntLine ( intPointer [ 0 ] ) FUNCTION_CALL 6 printIntLine ( intPointer [ 0 ] ) CALLEE 7 printIntLine LEAF_NODE 8 printIntLine LEAF_NODE 7 ( ARGUMENT 7 intPointer [ 0 ] FIELD 8 intPointer [ 0 ] LEAF_NODE 9 intPointer LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( intPointer ) ; EXPR 5 free ( intPointer ) FUNCTION_CALL 6 free ( intPointer ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 intPointer FIELD 8 intPointer LEAF_NODE 9 intPointer LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int data ; VAR_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = - 1 ; EXPR 4 data = - 1 ASSIGN 5 data = - 1 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 - 1 UNARY_EXPR 7 - 1 UNARY_OPERATOR 8 - LEAF_NODE 9 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE != 5 EXPR 5 GLOBAL_CONST_FIVE != 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; SIMPLE_DECL 4 int * intPointer ; VAR_DECL 5 int * intPointer TYPE 6 int * TYPE_NAME 7 int LEAF_NODE 8 int POINTER 7 * LEAF_NODE 8 * NAME 6 intPointer LEAF_NODE 7 intPointer LEAF_NODE 5 ; EXPR_STATEMENT 4 intPointer = ( int * ) malloc ( data * sizeof ( int ) ) ; EXPR 5 intPointer = ( int * ) malloc ( data * sizeof ( int ) ) ASSIGN 6 intPointer = ( int * ) malloc ( data * sizeof ( int ) ) LVAL 7 intPointer FIELD 8 intPointer LEAF_NODE 9 intPointer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( int * ) malloc ( data * sizeof ( int ) ) LEAF_NODE 8 ( TYPE_NAME 8 int LEAF_NODE 9 int LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( data * sizeof ( int ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 data * sizeof ( int ) FIELD 10 data LEAF_NODE 11 data LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( int ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 int FIELD 12 int LEAF_NODE 13 int LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < ( size_t ) data EXPR 6 i < ( size_t ) data FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < LEAF_NODE 7 ( TYPE_NAME 7 size_t LEAF_NODE 8 size_t LEAF_NODE 7 ) FIELD 7 data LEAF_NODE 8 data LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 intPointer [ i ] = 0 ; EXPR 8 intPointer [ i ] = 0 ASSIGN 9 intPointer [ i ] = 0 LVAL 10 intPointer [ i ] FIELD 11 intPointer [ i ] LEAF_NODE 12 intPointer LEAF_NODE 12 [ EXPR 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 8 ; LEAF_NODE 6 } EXPR_STATEMENT 4 printIntLine ( intPointer [ 0 ] ) ; EXPR 5 printIntLine ( intPointer [ 0 ] ) FUNCTION_CALL 6 printIntLine ( intPointer [ 0 ] ) CALLEE 7 printIntLine LEAF_NODE 8 printIntLine LEAF_NODE 7 ( ARGUMENT 7 intPointer [ 0 ] FIELD 8 intPointer [ 0 ] LEAF_NODE 9 intPointer LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( intPointer ) ; EXPR 5 free ( intPointer ) FUNCTION_CALL 6 free ( intPointer ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 intPointer FIELD 8 intPointer LEAF_NODE 9 intPointer LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int data ; VAR_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = - 1 ; EXPR 4 data = - 1 ASSIGN 5 data = - 1 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 - 1 UNARY_EXPR 7 - 1 UNARY_OPERATOR 8 - LEAF_NODE 9 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE == 5 EXPR 5 GLOBAL_CONST_FIVE == 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; SIMPLE_DECL 4 int * intPointer ; VAR_DECL 5 int * intPointer TYPE 6 int * TYPE_NAME 7 int LEAF_NODE 8 int POINTER 7 * LEAF_NODE 8 * NAME 6 intPointer LEAF_NODE 7 intPointer LEAF_NODE 5 ; EXPR_STATEMENT 4 intPointer = ( int * ) malloc ( data * sizeof ( int ) ) ; EXPR 5 intPointer = ( int * ) malloc ( data * sizeof ( int ) ) ASSIGN 6 intPointer = ( int * ) malloc ( data * sizeof ( int ) ) LVAL 7 intPointer FIELD 8 intPointer LEAF_NODE 9 intPointer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( int * ) malloc ( data * sizeof ( int ) ) LEAF_NODE 8 ( TYPE_NAME 8 int LEAF_NODE 9 int LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( data * sizeof ( int ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 data * sizeof ( int ) FIELD 10 data LEAF_NODE 11 data LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( int ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 int FIELD 12 int LEAF_NODE 13 int LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < ( size_t ) data EXPR 6 i < ( size_t ) data FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < LEAF_NODE 7 ( TYPE_NAME 7 size_t LEAF_NODE 8 size_t LEAF_NODE 7 ) FIELD 7 data LEAF_NODE 8 data LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 intPointer [ i ] = 0 ; EXPR 8 intPointer [ i ] = 0 ASSIGN 9 intPointer [ i ] = 0 LVAL 10 intPointer [ i ] FIELD 11 intPointer [ i ] LEAF_NODE 12 intPointer LEAF_NODE 12 [ EXPR 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 8 ; LEAF_NODE 6 } EXPR_STATEMENT 4 printIntLine ( intPointer [ 0 ] ) ; EXPR 5 printIntLine ( intPointer [ 0 ] ) FUNCTION_CALL 6 printIntLine ( intPointer [ 0 ] ) CALLEE 7 printIntLine LEAF_NODE 8 printIntLine LEAF_NODE 7 ( ARGUMENT 7 intPointer [ 0 ] FIELD 8 intPointer [ 0 ] LEAF_NODE 9 intPointer LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( intPointer ) ; EXPR 5 free ( intPointer ) FUNCTION_CALL 6 free ( intPointer ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 intPointer FIELD 8 intPointer LEAF_NODE 9 intPointer LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_13_good LEAF_NODE 3 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_13_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_13_good ( ) ; EXPR 4 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_13_good ( ) FUNCTION_CALL 5 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_13_good ( ) CALLEE 6 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_13_good LEAF_NODE 7 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_13_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_13_bad ( ) ; EXPR 4 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_13_bad ( ) FUNCTION_CALL 5 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_13_bad ( ) CALLEE 6 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_13_bad LEAF_NODE 7 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_13_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 57, "project": "cwe119_ast_vul_function_test_adv_13", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_73 { void badSink ( list < wchar_t * > dataList ) { STATEMENTS } ; void bad ( ) { wchar_t * data ; list < wchar_t * > dataList ; data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; wmemset ( data , L 'A' , 100 - 1 ) ; data [ 100 - 1 ] = L '\\0' ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; badSink ( dataList ) ; } void goodG2BSink ( list < wchar_t * > dataList ) { STATEMENTS } ; static void goodG2B ( ) { wchar_t * data ; list < wchar_t * > dataList ; data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; wmemset ( data , L 'A' , 50 - 1 ) ; data [ 50 - 1 ] = L '\\0' ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; goodG2BSink ( dataList ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_73 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( list < wchar_t * > dataList ) LEAF_NODE 4 ( PARAMETER_DECL 4 list < wchar_t * > dataList TYPE 5 list < wchar_t * > TYPE_NAME 6 list < wchar_t * > LEAF_NODE 7 list LEAF_NODE 7 < LEAF_NODE 7 wchar_t LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataList LEAF_NODE 6 dataList LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 list < wchar_t * > dataList ; VAR_DECL 5 list < wchar_t * > dataList TYPE 6 list < wchar_t * > TYPE_NAME 7 list < wchar_t * > LEAF_NODE 8 list LEAF_NODE 8 < LEAF_NODE 8 wchar_t LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataList LEAF_NODE 7 dataList LEAF_NODE 5 ; EXPR_STATEMENT 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'A' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( dataList ) ; EXPR 5 badSink ( dataList ) FUNCTION_CALL 6 badSink ( dataList ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( ARGUMENT 7 dataList FIELD 8 dataList LEAF_NODE 9 dataList LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( list < wchar_t * > dataList ) LEAF_NODE 4 ( PARAMETER_DECL 4 list < wchar_t * > dataList TYPE 5 list < wchar_t * > TYPE_NAME 6 list < wchar_t * > LEAF_NODE 7 list LEAF_NODE 7 < LEAF_NODE 7 wchar_t LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataList LEAF_NODE 6 dataList LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 list < wchar_t * > dataList ; VAR_DECL 5 list < wchar_t * > dataList TYPE 6 list < wchar_t * > TYPE_NAME 7 list < wchar_t * > LEAF_NODE 8 list LEAF_NODE 8 < LEAF_NODE 8 wchar_t LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataList LEAF_NODE 7 dataList LEAF_NODE 5 ; EXPR_STATEMENT 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'A' LEAF_NODE 4 , LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( dataList ) ; EXPR 5 goodG2BSink ( dataList ) FUNCTION_CALL 6 goodG2BSink ( dataList ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( ARGUMENT 7 dataList FIELD 8 dataList LEAF_NODE 9 dataList LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_73 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_73 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 58, "project": "cwe119_ast_vul_function_test_adv_172", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_63b_badSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_63b_badSink PARAMETER_LIST 2 ( char * * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * * dataPtr TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = * dataPtr ; VAR_DECL 4 char * data ; data = * dataPtr TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcat ( data , source ) ; EXPR 5 strcat ( data , source ) FUNCTION_CALL 6 strcat ( data , source ) CALLEE 7 strcat LEAF_NODE 8 strcat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_63b_goodG2BSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_63b_goodG2BSink PARAMETER_LIST 2 ( char * * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * * dataPtr TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = * dataPtr ; VAR_DECL 4 char * data ; data = * dataPtr TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcat ( data , source ) ; EXPR 5 strcat ( data , source ) FUNCTION_CALL 6 strcat ( data , source ) CALLEE 7 strcat LEAF_NODE 8 strcat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 59, "project": "cwe119_ast_vul_function_test_adv_146", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 wchar_t * CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_badData ; VAR_DECL 2 wchar_t * CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_badData TYPE 3 wchar_t * TYPE_NAME 4 wchar_t LEAF_NODE 5 wchar_t POINTER 4 * LEAF_NODE 5 * NAME 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_badData LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_badData LEAF_NODE 2 ; SIMPLE_DECL 1 wchar_t * CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_goodG2BData ; VAR_DECL 2 wchar_t * CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_goodG2BData TYPE 3 wchar_t * TYPE_NAME 4 wchar_t LEAF_NODE 5 wchar_t POINTER 4 * LEAF_NODE 5 * NAME 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_goodG2BData LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_goodG2BData LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68b_badSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 data LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_badData = data ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_badData = data ASSIGN 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_badData = data LVAL 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_badData FIELD 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_badData LEAF_NODE 8 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_badData ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68b_badSink ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68b_badSink ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68b_badSink ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68b_badSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68b_goodG2BSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 data LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 50 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 50 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_goodG2BData = data ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_goodG2BData = data ASSIGN 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_goodG2BData = data LVAL 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_goodG2BData FIELD 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_goodG2BData LEAF_NODE 8 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_goodG2BData ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68b_goodG2BSink ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68b_goodG2BSink ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68b_goodG2BSink ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68b_goodG2BSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 60, "project": "cwe119_ast_vul_function_test_adv_55", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 badSink LEAF_NODE 3 badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcat ( data , source ) ; EXPR 5 strcat ( data , source ) FUNCTION_CALL 6 strcat ( data , source ) CALLEE 7 strcat LEAF_NODE 8 strcat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_44_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_44_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 char LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 badSink ; EXPR 4 badSink FIELD 5 badSink LEAF_NODE 6 badSink LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ASSIGN 6 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 50 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 50 * sizeof ( char ) FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2BSink LEAF_NODE 3 goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcat ( data , source ) ; EXPR 5 strcat ( data , source ) FUNCTION_CALL 6 strcat ( data , source ) CALLEE 7 strcat LEAF_NODE 8 strcat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 char LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 goodG2BSink ; EXPR 4 goodG2BSink FIELD 5 goodG2BSink LEAF_NODE 6 goodG2BSink LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ASSIGN 6 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 50 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 50 * sizeof ( char ) FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_44_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_44_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_44_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_44_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_44_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_44_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_44_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_44_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_44_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_44_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_44_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_44_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 61, "project": "cwe119_ast_vul_function_test_adv_19", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_61b_badSource LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_61b_badSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 memset ( data , 'A' , 100 - 1 ) ; EXPR 4 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( data , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 100 - 1 ] = '\\0' ; EXPR 4 data [ 100 - 1 ] = '\\0' ASSIGN 5 data [ 100 - 1 ] = '\\0' LVAL 6 data [ 100 - 1 ] FIELD 7 data [ 100 - 1 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; JUMP_STATEMENT 3 return data ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 data EXPR 5 data FIELD 6 data LEAF_NODE 7 data LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_61b_goodG2BSource LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_61b_goodG2BSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 memset ( data , 'A' , 50 - 1 ) ; EXPR 4 memset ( data , 'A' , 50 - 1 ) FUNCTION_CALL 5 memset ( data , 'A' , 50 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 50 - 1 FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 50 - 1 ] = '\\0' ; EXPR 4 data [ 50 - 1 ] = '\\0' ASSIGN 5 data [ 50 - 1 ] = '\\0' LVAL 6 data [ 50 - 1 ] FIELD 7 data [ 50 - 1 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 50 - 1 FIELD 9 50 LEAF_NODE 10 50 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; JUMP_STATEMENT 3 return data ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 data EXPR 5 data FIELD 6 data LEAF_NODE 7 data LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 62, "project": "cwe119_ast_vul_function_test_adv_51", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct _CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType BASE_CLASSES { wchar_t * structFirst ; } CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType ; VAR_DECL 2 struct _CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType BASE_CLASSES { wchar_t * structFirst ; } CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType TYPE 3 struct _CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType BASE_CLASSES { wchar_t * structFirst ; } CLASS_DEF 4 struct _CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType BASE_CLASSES { wchar_t * structFirst ; } LEAF_NODE 5 struct CLASS_NAME 5 _CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType LEAF_NODE 6 _CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 wchar_t * structFirst ; SIMPLE_DECL 6 wchar_t * structFirst ; VAR_DECL 7 wchar_t * structFirst TYPE 8 wchar_t * TYPE_NAME 9 wchar_t LEAF_NODE 10 wchar_t POINTER 9 * LEAF_NODE 10 * NAME 8 structFirst LEAF_NODE 9 structFirst LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67b_badSink PARAMETER_LIST 2 ( CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType myStruct TYPE 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType TYPE_NAME 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType LEAF_NODE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = myStruct . structFirst ; VAR_DECL 4 wchar_t * data ; data = myStruct . structFirst TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( data , source , 100 - 1 ) ; EXPR 5 wcsncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 wcsncpy ( data , source , 100 - 1 ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67b_goodG2BSink PARAMETER_LIST 2 ( CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType myStruct TYPE 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType TYPE_NAME 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType LEAF_NODE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = myStruct . structFirst ; VAR_DECL 4 wchar_t * data ; data = myStruct . structFirst TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( data , source , 100 - 1 ) ; EXPR 5 wcsncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 wcsncpy ( data , source , 100 - 1 ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 63, "project": "cwe119_ast_vul_function_test_adv_117", "target": 1}
{"func": "NAMESPACE_DEF 1 namespace CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_62 { void badSource ( char * & data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\\0' ; } void goodG2BSource ( char * & data ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\\0' ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_62 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSource LEAF_NODE 4 badSource PARAMETER_LIST 3 ( char * & data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * & data TYPE 5 char * & TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * & LEAF_NODE 7 * LEAF_NODE 7 & NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 memset ( data , 'A' , 100 - 1 ) ; EXPR 5 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 6 memset ( data , 'A' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 'A' FIELD 8 'A' LEAF_NODE 9 'A' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 100 - 1 ] = '\\0' ; EXPR 5 data [ 100 - 1 ] = '\\0' ASSIGN 6 data [ 100 - 1 ] = '\\0' LVAL 7 data [ 100 - 1 ] FIELD 8 data [ 100 - 1 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSource LEAF_NODE 4 goodG2BSource PARAMETER_LIST 3 ( char * & data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * & data TYPE 5 char * & TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * & LEAF_NODE 7 * LEAF_NODE 7 & NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 memset ( data , 'A' , 50 - 1 ) ; EXPR 5 memset ( data , 'A' , 50 - 1 ) FUNCTION_CALL 6 memset ( data , 'A' , 50 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 'A' FIELD 8 'A' LEAF_NODE 9 'A' LEAF_NODE 7 , ARGUMENT 7 50 - 1 FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 50 - 1 ] = '\\0' ; EXPR 5 data [ 50 - 1 ] = '\\0' ASSIGN 6 data [ 50 - 1 ] = '\\0' LVAL 7 data [ 50 - 1 ] FIELD 8 data [ 50 - 1 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 64, "project": "cwe119_ast_vul_function_test_adv_81", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badGlobal ; CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badGlobal = 0 ; VAR_DECL 2 int CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badGlobal ; CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badGlobal = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badGlobal LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badGlobal LEAF_NODE 3 ; INIT 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badGlobal = 0 ASSIGN 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badGlobal = 0 LVAL 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badGlobal NAME 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badGlobal LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badGlobal ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badSource LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badGlobal = 1 ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badGlobal = 1 ASSIGN 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badGlobal = 1 LVAL 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badGlobal FIELD 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badGlobal LEAF_NODE 8 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badGlobal ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badSource ( data ) ; EXPR 4 data = CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badSource ( data ) ASSIGN 5 data = CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badSource ( data ) FUNCTION_CALL 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badSource ( data ) CALLEE 8 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badSource LEAF_NODE 9 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_badSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 strcat ( dest , data ) ; EXPR 5 strcat ( dest , data ) FUNCTION_CALL 6 strcat ( dest , data ) CALLEE 7 strcat LEAF_NODE 8 strcat LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } SIMPLE_DECL 1 int CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Global ; CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Global = 0 ; VAR_DECL 2 int CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Global ; CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Global = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Global LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Global LEAF_NODE 3 ; INIT 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Global = 0 ASSIGN 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Global = 0 LVAL 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Global NAME 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Global LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Global ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; SIMPLE_DECL 1 int CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Global ; CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Global = 0 ; VAR_DECL 2 int CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Global ; CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Global = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Global LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Global LEAF_NODE 3 ; INIT 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Global = 0 ASSIGN 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Global = 0 LVAL 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Global NAME 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Global LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Global ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Source LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Source PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Global = 0 ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Global = 0 ASSIGN 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Global = 0 LVAL 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Global FIELD 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Global LEAF_NODE 8 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Global ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Source ( data ) ; EXPR 4 data = CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Source ( data ) ASSIGN 5 data = CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Source ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Source ( data ) FUNCTION_CALL 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Source ( data ) CALLEE 8 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Source LEAF_NODE 9 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B1Source LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 strcat ( dest , data ) ; EXPR 5 strcat ( dest , data ) FUNCTION_CALL 6 strcat ( dest , data ) CALLEE 7 strcat LEAF_NODE 8 strcat LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Source LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Source PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Global = 1 ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Global = 1 ASSIGN 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Global = 1 LVAL 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Global FIELD 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Global LEAF_NODE 8 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Global ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Source ( data ) ; EXPR 4 data = CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Source ( data ) ASSIGN 5 data = CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Source ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Source ( data ) FUNCTION_CALL 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Source ( data ) CALLEE 8 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Source LEAF_NODE 9 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_goodG2B2Source LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 strcat ( dest , data ) ; EXPR 5 strcat ( dest , data ) FUNCTION_CALL 6 strcat ( dest , data ) CALLEE 7 strcat LEAF_NODE 8 strcat LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 65, "project": "cwe119_ast_vul_function_test_adv_154", "target": 1}
{"func": "NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_snprintf_63 { void badSink ( char * * dataPtr ) { STATEMENTS } ; void bad ( ) { char * data ; data = NULL ; data = new char [ 50 ] ; data [ 0 ] = '\\0' ; badSink ( & data ) ; } void goodG2BSink ( char * * data ) { STATEMENTS } ; static void goodG2B ( ) { char * data ; data = NULL ; data = new char [ 100 ] ; data [ 0 ] = '\\0' ; goodG2BSink ( & data ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_snprintf_63 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( char * * dataPtr ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * * dataPtr TYPE 5 char * * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * * LEAF_NODE 7 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 char [ 50 ] ; EXPR 5 char [ 50 ] FIELD 6 char [ 50 ] LEAF_NODE 7 char LEAF_NODE 7 [ EXPR 7 50 FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 7 ] LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 0 ] = '\\0' ; EXPR 5 data [ 0 ] = '\\0' ASSIGN 6 data [ 0 ] = '\\0' LVAL 7 data [ 0 ] FIELD 8 data [ 0 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( & data ) ; EXPR 5 badSink ( & data ) FUNCTION_CALL 6 badSink ( & data ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( ARGUMENT 7 & data UNARY_EXPR 8 & data UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 data LEAF_NODE 10 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( char * * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * * data TYPE 5 char * * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * * LEAF_NODE 7 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 char [ 100 ] ; EXPR 5 char [ 100 ] FIELD 6 char [ 100 ] LEAF_NODE 7 char LEAF_NODE 7 [ EXPR 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 ] LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 0 ] = '\\0' ; EXPR 5 data [ 0 ] = '\\0' ASSIGN 6 data [ 0 ] = '\\0' LVAL 7 data [ 0 ] FIELD 8 data [ 0 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( & data ) ; EXPR 5 goodG2BSink ( & data ) FUNCTION_CALL 6 goodG2BSink ( & data ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( ARGUMENT 7 & data UNARY_EXPR 8 & data UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 data LEAF_NODE 10 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_snprintf_63 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_snprintf_63 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 66, "project": "cwe119_ast_vul_function_test_adv_61", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_64b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_64b_badSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * dataPtr ; dataPtr = ( wchar_t * * ) dataVoidPtr ; VAR_DECL 4 wchar_t * dataPtr ; dataPtr = ( wchar_t * * ) dataVoidPtr TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( wchar_t * * ) dataVoidPtr ASSIGN 6 dataPtr = ( wchar_t * * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * data ; data = ( * dataPtr ) ; VAR_DECL 4 wchar_t * data ; data = ( * dataPtr ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 5 wchar_t [ 10 + 1 ] source ; source = SRC_STRING TYPE 6 wchar_t [ 10 + 1 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 10 + 1 ] LEAF_NODE 8 [ FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 6 ; INIT 6 source = SRC_STRING ASSIGN 7 source = SRC_STRING LVAL 8 source NAME 9 source LEAF_NODE 10 source ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 SRC_STRING FIELD 9 SRC_STRING LEAF_NODE 10 SRC_STRING LEAF_NODE 5 ; EXPR_STATEMENT 4 wcscpy ( data , source ) ; EXPR 5 wcscpy ( data , source ) FUNCTION_CALL 6 wcscpy ( data , source ) CALLEE 7 wcscpy LEAF_NODE 8 wcscpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_64b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_64b_goodG2BSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * dataPtr ; dataPtr = ( wchar_t * * ) dataVoidPtr ; VAR_DECL 4 wchar_t * dataPtr ; dataPtr = ( wchar_t * * ) dataVoidPtr TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( wchar_t * * ) dataVoidPtr ASSIGN 6 dataPtr = ( wchar_t * * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * data ; data = ( * dataPtr ) ; VAR_DECL 4 wchar_t * data ; data = ( * dataPtr ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 5 wchar_t [ 10 + 1 ] source ; source = SRC_STRING TYPE 6 wchar_t [ 10 + 1 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 10 + 1 ] LEAF_NODE 8 [ FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 6 ; INIT 6 source = SRC_STRING ASSIGN 7 source = SRC_STRING LVAL 8 source NAME 9 source LEAF_NODE 10 source ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 SRC_STRING FIELD 9 SRC_STRING LEAF_NODE 10 SRC_STRING LEAF_NODE 5 ; EXPR_STATEMENT 4 wcscpy ( data , source ) ; EXPR 5 wcscpy ( data , source ) FUNCTION_CALL 6 wcscpy ( data , source ) CALLEE 7 wcscpy LEAF_NODE 8 wcscpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 67, "project": "cwe119_ast_vul_function_test_adv_181", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63b_badSink PARAMETER_LIST 2 ( int * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 int * dataPtr TYPE 4 int * TYPE_NAME 5 int LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int data ; data = * dataPtr ; VAR_DECL 4 int data ; data = * dataPtr TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int i ; VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; LEAF_NODE 4 int LEAF_NODE 4 buffer LEAF_NODE 4 [ LEAF_NODE 4 10 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 0 LEAF_NODE 4 } LEAF_NODE 4 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data >= 0 EXPR 6 data >= 0 FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 >= LEAF_NODE 8 >= FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 buffer [ data ] = 1 ; EXPR 8 buffer [ data ] = 1 ASSIGN 9 buffer [ data ] = 1 LVAL 10 buffer [ data ] FIELD 11 buffer [ data ] LEAF_NODE 12 buffer LEAF_NODE 12 [ EXPR 12 data FIELD 13 data LEAF_NODE 14 data LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 1 FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < 10 EXPR 9 i < 10 FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printIntLine ( buffer [ i ] ) ; EXPR 11 printIntLine ( buffer [ i ] ) FUNCTION_CALL 12 printIntLine ( buffer [ i ] ) CALLEE 13 printIntLine LEAF_NODE 14 printIntLine LEAF_NODE 13 ( ARGUMENT 13 buffer [ i ] FIELD 14 buffer [ i ] LEAF_NODE 15 buffer LEAF_NODE 15 [ EXPR 15 i FIELD 16 i LEAF_NODE 17 i LEAF_NODE 15 ] LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"ERROR: Array index is negative.\" ) ; EXPR 8 printLine ( \"ERROR: Array index is negative.\" ) FUNCTION_CALL 9 printLine ( \"ERROR: Array index is negative.\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"ERROR: Array index is negative.\" FIELD 11 \"ERROR: Array index is negative.\" LEAF_NODE 12 \"ERROR: Array index is negative.\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63b_goodG2BSink PARAMETER_LIST 2 ( int * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 int * dataPtr TYPE 4 int * TYPE_NAME 5 int LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int data ; data = * dataPtr ; VAR_DECL 4 int data ; data = * dataPtr TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int i ; VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; LEAF_NODE 4 int LEAF_NODE 4 buffer LEAF_NODE 4 [ LEAF_NODE 4 10 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 0 LEAF_NODE 4 } LEAF_NODE 4 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data >= 0 EXPR 6 data >= 0 FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 >= LEAF_NODE 8 >= FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 buffer [ data ] = 1 ; EXPR 8 buffer [ data ] = 1 ASSIGN 9 buffer [ data ] = 1 LVAL 10 buffer [ data ] FIELD 11 buffer [ data ] LEAF_NODE 12 buffer LEAF_NODE 12 [ EXPR 12 data FIELD 13 data LEAF_NODE 14 data LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 1 FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < 10 EXPR 9 i < 10 FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printIntLine ( buffer [ i ] ) ; EXPR 11 printIntLine ( buffer [ i ] ) FUNCTION_CALL 12 printIntLine ( buffer [ i ] ) CALLEE 13 printIntLine LEAF_NODE 14 printIntLine LEAF_NODE 13 ( ARGUMENT 13 buffer [ i ] FIELD 14 buffer [ i ] LEAF_NODE 15 buffer LEAF_NODE 15 [ EXPR 15 i FIELD 16 i LEAF_NODE 17 i LEAF_NODE 15 ] LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"ERROR: Array index is negative.\" ) ; EXPR 8 printLine ( \"ERROR: Array index is negative.\" ) FUNCTION_CALL 9 printLine ( \"ERROR: Array index is negative.\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"ERROR: Array index is negative.\" FIELD 11 \"ERROR: Array index is negative.\" LEAF_NODE 12 \"ERROR: Array index is negative.\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63b_goodB2GSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63b_goodB2GSink PARAMETER_LIST 2 ( int * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 int * dataPtr TYPE 4 int * TYPE_NAME 5 int LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int data ; data = * dataPtr ; VAR_DECL 4 int data ; data = * dataPtr TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int i ; VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; LEAF_NODE 4 int LEAF_NODE 4 buffer LEAF_NODE 4 [ LEAF_NODE 4 10 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 0 LEAF_NODE 4 } LEAF_NODE 4 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data >= 0 && data < ( 10 ) EXPR 6 data >= 0 && data < ( 10 ) AND 7 data >= 0 && data < ( 10 ) EXPR 8 data >= 0 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 >= LEAF_NODE 10 >= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 && EXPR 8 data < ( 10 ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < LEAF_NODE 9 ( FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 buffer [ data ] = 1 ; EXPR 8 buffer [ data ] = 1 ASSIGN 9 buffer [ data ] = 1 LVAL 10 buffer [ data ] FIELD 11 buffer [ data ] LEAF_NODE 12 buffer LEAF_NODE 12 [ EXPR 12 data FIELD 13 data LEAF_NODE 14 data LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 1 FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < 10 EXPR 9 i < 10 FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printIntLine ( buffer [ i ] ) ; EXPR 11 printIntLine ( buffer [ i ] ) FUNCTION_CALL 12 printIntLine ( buffer [ i ] ) CALLEE 13 printIntLine LEAF_NODE 14 printIntLine LEAF_NODE 13 ( ARGUMENT 13 buffer [ i ] FIELD 14 buffer [ i ] LEAF_NODE 15 buffer LEAF_NODE 15 [ EXPR 15 i FIELD 16 i LEAF_NODE 17 i LEAF_NODE 15 ] LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"ERROR: Array index is out-of-bounds\" ) ; EXPR 8 printLine ( \"ERROR: Array index is out-of-bounds\" ) FUNCTION_CALL 9 printLine ( \"ERROR: Array index is out-of-bounds\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"ERROR: Array index is out-of-bounds\" FIELD 11 \"ERROR: Array index is out-of-bounds\" LEAF_NODE 12 \"ERROR: Array index is out-of-bounds\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 68, "project": "cwe119_ast_vul_function_test_adv_59", "target": 1}
{"func": "SIMPLE_DECL 1 struct _CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType BASE_CLASSES { char * structFirst ; } CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType ; VAR_DECL 2 struct _CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType BASE_CLASSES { char * structFirst ; } CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType TYPE 3 struct _CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType BASE_CLASSES { char * structFirst ; } CLASS_DEF 4 struct _CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType BASE_CLASSES { char * structFirst ; } LEAF_NODE 5 struct CLASS_NAME 5 _CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType LEAF_NODE 6 _CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 char * structFirst ; SIMPLE_DECL 6 char * structFirst ; VAR_DECL 7 char * structFirst TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 structFirst LEAF_NODE 9 structFirst LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67b_badSink PARAMETER_LIST 2 ( CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType myStruct TYPE 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType TYPE_NAME 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType LEAF_NODE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType myStruct ; VAR_DECL 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType myStruct TYPE 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType TYPE_NAME 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType NAME 5 myStruct LEAF_NODE 6 myStruct LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 50 ] dataBadBuffer ; VAR_DECL 4 char [ 50 ] dataBadBuffer TYPE 5 char [ 50 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 50 ] LEAF_NODE 7 [ FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataGoodBuffer ; VAR_DECL 4 char [ 100 ] dataGoodBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 myStruct . structFirst = data ; EXPR 4 myStruct . structFirst = data ASSIGN 5 myStruct . structFirst = data LVAL 6 myStruct . structFirst FIELD 7 myStruct . structFirst LEAF_NODE 8 myStruct LEAF_NODE 8 . LEAF_NODE 8 structFirst ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67b_badSink ( myStruct ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67b_badSink ( myStruct ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67b_badSink ( myStruct ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67b_badSink LEAF_NODE 6 ( ARGUMENT 6 myStruct FIELD 7 myStruct LEAF_NODE 8 myStruct LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67b_goodG2BSink PARAMETER_LIST 2 ( CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType myStruct TYPE 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType TYPE_NAME 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType LEAF_NODE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType myStruct ; VAR_DECL 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType myStruct TYPE 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType TYPE_NAME 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_structType NAME 5 myStruct LEAF_NODE 6 myStruct LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 50 ] dataBadBuffer ; VAR_DECL 4 char [ 50 ] dataBadBuffer TYPE 5 char [ 50 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 50 ] LEAF_NODE 7 [ FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataGoodBuffer ; VAR_DECL 4 char [ 100 ] dataGoodBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 myStruct . structFirst = data ; EXPR 4 myStruct . structFirst = data ASSIGN 5 myStruct . structFirst = data LVAL 6 myStruct . structFirst FIELD 7 myStruct . structFirst LEAF_NODE 8 myStruct LEAF_NODE 8 . LEAF_NODE 8 structFirst ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67b_goodG2BSink ( myStruct ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67b_goodG2BSink ( myStruct ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67b_goodG2BSink ( myStruct ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 myStruct FIELD 7 myStruct LEAF_NODE 8 myStruct LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 69, "project": "cwe119_ast_vul_function_test_adv_100", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 char * CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_badData ; VAR_DECL 2 char * CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_badData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_badData LEAF_NODE 4 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_badData LEAF_NODE 2 ; SIMPLE_DECL 1 char * CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_goodG2BData ; VAR_DECL 2 char * CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_goodG2BData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_goodG2BData LEAF_NODE 4 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_goodG2BData LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68 { void badSink ( ) { char * data ; data = CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_badData ; { char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\\0' ; printLine ( data ) ; delete [ ] data ; } } void goodG2BSink ( ) { char * data ; data = CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_goodG2BData ; { char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\\0' ; printLine ( data ) ; delete [ ] data ; } } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_badData ; VAR_DECL 5 char * data ; data = CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_badData TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_badData ASSIGN 7 data = CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_badData LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_badData FIELD 9 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_badData LEAF_NODE 10 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_badData LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 memcpy ( data , source , 100 * sizeof ( char ) ) ; EXPR 6 memcpy ( data , source , 100 * sizeof ( char ) ) FUNCTION_CALL 7 memcpy ( data , source , 100 * sizeof ( char ) ) CALLEE 8 memcpy LEAF_NODE 9 memcpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 data [ 100 - 1 ] = '\\0' ; EXPR 6 data [ 100 - 1 ] = '\\0' ASSIGN 7 data [ 100 - 1 ] = '\\0' LVAL 8 data [ 100 - 1 ] FIELD 9 data [ 100 - 1 ] LEAF_NODE 10 data LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_goodG2BData ; VAR_DECL 5 char * data ; data = CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_goodG2BData TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_goodG2BData ASSIGN 7 data = CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_goodG2BData LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_goodG2BData FIELD 9 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_goodG2BData LEAF_NODE 10 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memcpy_68_goodG2BData LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 memcpy ( data , source , 100 * sizeof ( char ) ) ; EXPR 6 memcpy ( data , source , 100 * sizeof ( char ) ) FUNCTION_CALL 7 memcpy ( data , source , 100 * sizeof ( char ) ) CALLEE 8 memcpy LEAF_NODE 9 memcpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 data [ 100 - 1 ] = '\\0' ; EXPR 6 data [ 100 - 1 ] = '\\0' ASSIGN 7 data [ 100 - 1 ] = '\\0' LVAL 8 data [ 100 - 1 ] FIELD 9 data [ 100 - 1 ] LEAF_NODE 10 data LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 70, "project": "cwe119_ast_vul_function_test_adv_177", "target": 1}
{"func": "USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memcpy_74 { void badSink ( map < int , char * > dataMap ) { STATEMENTS } ; void bad ( ) { char * data ; map < int , char * > dataMap ; data = NULL ; data = new char [ 10 ] ; dataMap [ 0 ] = data ; dataMap [ 1 ] = data ; dataMap [ 2 ] = data ; badSink ( dataMap ) ; } void goodG2BSink ( map < int , char * > dataMap ) { STATEMENTS } ; static void goodG2B ( ) { char * data ; map < int , char * > dataMap ; data = NULL ; data = new char [ 10 + 1 ] ; dataMap [ 0 ] = data ; dataMap [ 1 ] = data ; dataMap [ 2 ] = data ; goodG2BSink ( dataMap ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memcpy_74 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( map < int , char * > dataMap ) LEAF_NODE 4 ( PARAMETER_DECL 4 map < int , char * > dataMap TYPE 5 map < int , char * > TYPE_NAME 6 map < int , char * > LEAF_NODE 7 map LEAF_NODE 7 < LEAF_NODE 7 int LEAF_NODE 7 , LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataMap LEAF_NODE 6 dataMap LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 map < int , char * > dataMap ; VAR_DECL 5 map < int , char * > dataMap TYPE 6 map < int , char * > TYPE_NAME 7 map < int , char * > LEAF_NODE 8 map LEAF_NODE 8 < LEAF_NODE 8 int LEAF_NODE 8 , LEAF_NODE 8 char LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataMap LEAF_NODE 7 dataMap LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 char [ 10 ] ; EXPR 5 char [ 10 ] FIELD 6 char [ 10 ] LEAF_NODE 7 char LEAF_NODE 7 [ EXPR 7 10 FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 7 ] LEAF_NODE 5 ; EXPR_STATEMENT 4 dataMap [ 0 ] = data ; EXPR 5 dataMap [ 0 ] = data ASSIGN 6 dataMap [ 0 ] = data LVAL 7 dataMap [ 0 ] FIELD 8 dataMap [ 0 ] LEAF_NODE 9 dataMap LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 dataMap [ 1 ] = data ; EXPR 5 dataMap [ 1 ] = data ASSIGN 6 dataMap [ 1 ] = data LVAL 7 dataMap [ 1 ] FIELD 8 dataMap [ 1 ] LEAF_NODE 9 dataMap LEAF_NODE 9 [ EXPR 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 dataMap [ 2 ] = data ; EXPR 5 dataMap [ 2 ] = data ASSIGN 6 dataMap [ 2 ] = data LVAL 7 dataMap [ 2 ] FIELD 8 dataMap [ 2 ] LEAF_NODE 9 dataMap LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( dataMap ) ; EXPR 5 badSink ( dataMap ) FUNCTION_CALL 6 badSink ( dataMap ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( ARGUMENT 7 dataMap FIELD 8 dataMap LEAF_NODE 9 dataMap LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( map < int , char * > dataMap ) LEAF_NODE 4 ( PARAMETER_DECL 4 map < int , char * > dataMap TYPE 5 map < int , char * > TYPE_NAME 6 map < int , char * > LEAF_NODE 7 map LEAF_NODE 7 < LEAF_NODE 7 int LEAF_NODE 7 , LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataMap LEAF_NODE 6 dataMap LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 map < int , char * > dataMap ; VAR_DECL 5 map < int , char * > dataMap TYPE 6 map < int , char * > TYPE_NAME 7 map < int , char * > LEAF_NODE 8 map LEAF_NODE 8 < LEAF_NODE 8 int LEAF_NODE 8 , LEAF_NODE 8 char LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataMap LEAF_NODE 7 dataMap LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 char [ 10 + 1 ] ; EXPR 5 char [ 10 + 1 ] FIELD 6 char [ 10 + 1 ] LEAF_NODE 7 char LEAF_NODE 7 [ EXPR 7 10 + 1 FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ] LEAF_NODE 5 ; EXPR_STATEMENT 4 dataMap [ 0 ] = data ; EXPR 5 dataMap [ 0 ] = data ASSIGN 6 dataMap [ 0 ] = data LVAL 7 dataMap [ 0 ] FIELD 8 dataMap [ 0 ] LEAF_NODE 9 dataMap LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 dataMap [ 1 ] = data ; EXPR 5 dataMap [ 1 ] = data ASSIGN 6 dataMap [ 1 ] = data LVAL 7 dataMap [ 1 ] FIELD 8 dataMap [ 1 ] LEAF_NODE 9 dataMap LEAF_NODE 9 [ EXPR 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 dataMap [ 2 ] = data ; EXPR 5 dataMap [ 2 ] = data ASSIGN 6 dataMap [ 2 ] = data LVAL 7 dataMap [ 2 ] FIELD 8 dataMap [ 2 ] LEAF_NODE 9 dataMap LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( dataMap ) ; EXPR 5 goodG2BSink ( dataMap ) FUNCTION_CALL 6 goodG2BSink ( dataMap ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( ARGUMENT 7 dataMap FIELD 8 dataMap LEAF_NODE 9 dataMap LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memcpy_74 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memcpy_74 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 71, "project": "cwe119_ast_vul_function_test_adv_110", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = ( wchar_t * ) malloc ( 10 * sizeof ( wchar_t ) ) ; EXPR 7 data = ( wchar_t * ) malloc ( 10 * sizeof ( wchar_t ) ) ASSIGN 8 data = ( wchar_t * ) malloc ( 10 * sizeof ( wchar_t ) ) LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( wchar_t * ) malloc ( 10 * sizeof ( wchar_t ) ) LEAF_NODE 10 ( TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t LEAF_NODE 10 * LEAF_NODE 10 ) FUNCTION_CALL 10 malloc ( 10 * sizeof ( wchar_t ) ) CALLEE 11 malloc LEAF_NODE 12 malloc LEAF_NODE 11 ( ARGUMENT 11 10 * sizeof ( wchar_t ) FIELD 12 10 LEAF_NODE 13 10 LEAF_NODE 12 * FUNCTION_CALL 12 sizeof ( wchar_t ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 wchar_t FIELD 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 5 wchar_t [ 10 + 1 ] source ; source = SRC_STRING TYPE 6 wchar_t [ 10 + 1 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 10 + 1 ] LEAF_NODE 8 [ FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 6 ; INIT 6 source = SRC_STRING ASSIGN 7 source = SRC_STRING LVAL 8 source NAME 9 source LEAF_NODE 10 source ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 SRC_STRING FIELD 9 SRC_STRING LEAF_NODE 10 SRC_STRING LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( data , source , wcslen ( source ) + 1 ) ; EXPR 5 wcsncpy ( data , source , wcslen ( source ) + 1 ) FUNCTION_CALL 6 wcsncpy ( data , source , wcslen ( source ) + 1 ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 wcslen ( source ) + 1 FUNCTION_CALL 8 wcslen ( source ) CALLEE 9 wcslen LEAF_NODE 10 wcslen LEAF_NODE 9 ( ARGUMENT 9 source FIELD 10 source LEAF_NODE 11 source LEAF_NODE 9 ) LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = ( wchar_t * ) malloc ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; EXPR 7 data = ( wchar_t * ) malloc ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ASSIGN 8 data = ( wchar_t * ) malloc ( ( 10 + 1 ) * sizeof ( wchar_t ) ) LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( wchar_t * ) malloc ( ( 10 + 1 ) * sizeof ( wchar_t ) ) LEAF_NODE 10 ( TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t LEAF_NODE 10 * LEAF_NODE 10 ) FUNCTION_CALL 10 malloc ( ( 10 + 1 ) * sizeof ( wchar_t ) ) CALLEE 11 malloc LEAF_NODE 12 malloc LEAF_NODE 11 ( ARGUMENT 11 ( 10 + 1 ) * sizeof ( wchar_t ) LEAF_NODE 12 ( FIELD 12 10 LEAF_NODE 13 10 LEAF_NODE 12 + FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 12 ) LEAF_NODE 12 * FUNCTION_CALL 12 sizeof ( wchar_t ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 wchar_t FIELD 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 5 wchar_t [ 10 + 1 ] source ; source = SRC_STRING TYPE 6 wchar_t [ 10 + 1 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 10 + 1 ] LEAF_NODE 8 [ FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 6 ; INIT 6 source = SRC_STRING ASSIGN 7 source = SRC_STRING LVAL 8 source NAME 9 source LEAF_NODE 10 source ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 SRC_STRING FIELD 9 SRC_STRING LEAF_NODE 10 SRC_STRING LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( data , source , wcslen ( source ) + 1 ) ; EXPR 5 wcsncpy ( data , source , wcslen ( source ) + 1 ) FUNCTION_CALL 6 wcsncpy ( data , source , wcslen ( source ) + 1 ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 wcslen ( source ) + 1 FUNCTION_CALL 8 wcslen ( source ) CALLEE 9 wcslen LEAF_NODE 10 wcslen LEAF_NODE 9 ( ARGUMENT 9 source FIELD 10 source LEAF_NODE 11 source LEAF_NODE 9 ) LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 72, "project": "cwe119_ast_vul_function_test_adv_25", "target": 1}
{"func": "NAMESPACE_DEF 1 namespace CWE124_Buffer_Underwrite__new_char_memcpy_52 { void badSink_b ( char * data ) { STATEMENTS } ; void bad ( ) { char * data ; data = NULL ; { char * dataBuffer = new char [ 100 ] ; memset ( dataBuffer , 'A' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = '\\0' ; data = dataBuffer - 8 ; } badSink_b ( data ) ; } void goodG2BSink_b ( char * data ) { STATEMENTS } ; static void goodG2B ( ) { char * data ; data = NULL ; { char * dataBuffer = new char [ 100 ] ; memset ( dataBuffer , 'A' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = '\\0' ; data = dataBuffer ; } goodG2BSink_b ( data ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE124_Buffer_Underwrite__new_char_memcpy_52 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink_b LEAF_NODE 4 badSink_b PARAMETER_LIST 3 ( char * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 dataBuffer LEAF_NODE 5 = LEAF_NODE 5 new EXPR_STATEMENT 5 char [ 100 ] ; EXPR 6 char [ 100 ] FIELD 7 char [ 100 ] LEAF_NODE 8 char LEAF_NODE 8 [ EXPR 8 100 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 8 ] LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 6 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 7 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 dataBuffer FIELD 9 dataBuffer LEAF_NODE 10 dataBuffer LEAF_NODE 8 , ARGUMENT 8 'A' FIELD 9 'A' LEAF_NODE 10 'A' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 6 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 7 dataBuffer [ 100 - 1 ] = '\\0' LVAL 8 dataBuffer [ 100 - 1 ] FIELD 9 dataBuffer [ 100 - 1 ] LEAF_NODE 10 dataBuffer LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 data = dataBuffer - 8 ; EXPR 6 data = dataBuffer - 8 ASSIGN 7 data = dataBuffer - 8 LVAL 8 data FIELD 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataBuffer - 8 FIELD 9 dataBuffer LEAF_NODE 10 dataBuffer LEAF_NODE 9 - FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 6 ; LEAF_NODE 4 } EXPR_STATEMENT 4 badSink_b ( data ) ; EXPR 5 badSink_b ( data ) FUNCTION_CALL 6 badSink_b ( data ) CALLEE 7 badSink_b LEAF_NODE 8 badSink_b LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink_b LEAF_NODE 4 goodG2BSink_b PARAMETER_LIST 3 ( char * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 dataBuffer LEAF_NODE 5 = LEAF_NODE 5 new EXPR_STATEMENT 5 char [ 100 ] ; EXPR 6 char [ 100 ] FIELD 7 char [ 100 ] LEAF_NODE 8 char LEAF_NODE 8 [ EXPR 8 100 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 8 ] LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 6 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 7 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 dataBuffer FIELD 9 dataBuffer LEAF_NODE 10 dataBuffer LEAF_NODE 8 , ARGUMENT 8 'A' FIELD 9 'A' LEAF_NODE 10 'A' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 6 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 7 dataBuffer [ 100 - 1 ] = '\\0' LVAL 8 dataBuffer [ 100 - 1 ] FIELD 9 dataBuffer [ 100 - 1 ] LEAF_NODE 10 dataBuffer LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 data = dataBuffer ; EXPR 6 data = dataBuffer ASSIGN 7 data = dataBuffer LVAL 8 data FIELD 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataBuffer FIELD 9 dataBuffer LEAF_NODE 10 dataBuffer LEAF_NODE 6 ; LEAF_NODE 4 } EXPR_STATEMENT 4 goodG2BSink_b ( data ) ; EXPR 5 goodG2BSink_b ( data ) FUNCTION_CALL 6 goodG2BSink_b ( data ) CALLEE 7 goodG2BSink_b LEAF_NODE 8 goodG2BSink_b LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE124_Buffer_Underwrite__new_char_memcpy_52 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE124_Buffer_Underwrite__new_char_memcpy_52 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 73, "project": "cwe119_ast_vul_function_test_adv_141", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_badSink PARAMETER_LIST 2 ( char * * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * * dataPtr TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; VAR_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ASSIGN 6 dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 ) * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 ) * sizeof ( char ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; VAR_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ASSIGN 6 dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 + 1 ) * sizeof ( char ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_badSink ( & data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_badSink ( & data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_badSink ( & data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_badSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_goodG2BSink PARAMETER_LIST 2 ( char * * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * * data TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; VAR_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ASSIGN 6 dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 ) * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 ) * sizeof ( char ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; VAR_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ASSIGN 6 dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 + 1 ) * sizeof ( char ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_goodG2BSink ( & data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_goodG2BSink ( & data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_goodG2BSink ( & data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 74, "project": "cwe119_ast_vul_function_test_adv_91", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE124_Buffer_Underwrite__new_char_loop_72 { void badSink ( vector < char * > dataVector ) { char * data ; data = dataVector [ 2 ] ; { size_t i ; char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\\0' ; printLine ( data ) ; } } void goodG2BSink ( vector < char * > dataVector ) { char * data ; data = dataVector [ 2 ] ; { size_t i ; char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\\0' ; printLine ( data ) ; } } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE124_Buffer_Underwrite__new_char_loop_72 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( vector < char * > dataVector ) LEAF_NODE 4 ( PARAMETER_DECL 4 vector < char * > dataVector TYPE 5 vector < char * > TYPE_NAME 6 vector < char * > LEAF_NODE 7 vector LEAF_NODE 7 < LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataVector LEAF_NODE 6 dataVector LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = dataVector [ 2 ] ; VAR_DECL 5 char * data ; data = dataVector [ 2 ] TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataVector [ 2 ] ASSIGN 7 data = dataVector [ 2 ] LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataVector [ 2 ] FIELD 9 dataVector [ 2 ] LEAF_NODE 10 dataVector LEAF_NODE 10 [ EXPR 10 2 FIELD 11 2 LEAF_NODE 12 2 LEAF_NODE 10 ] LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 size_t i ; VAR_DECL 6 size_t i TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 i LEAF_NODE 8 i LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; ITERATION 5 KEYWORD 6 for LEAF_NODE 7 for LEAF_NODE 6 ( FOR_INIT 6 i = 0 ; EXPR 7 i = 0 ASSIGN 8 i = 0 LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; CONDITION 6 i < 100 EXPR 7 i < 100 FIELD 8 i LEAF_NODE 9 i REL_OPERATOR 8 < LEAF_NODE 9 < FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 6 ; FOR_EXPR 6 i ++ EXPR 7 i ++ FIELD 8 i ++ LEAF_NODE 9 i LEAF_NODE 9 ++ LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 data [ i ] = source [ i ] ; EXPR 9 data [ i ] = source [ i ] ASSIGN 10 data [ i ] = source [ i ] LVAL 11 data [ i ] FIELD 12 data [ i ] LEAF_NODE 13 data LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 source [ i ] FIELD 12 source [ i ] LEAF_NODE 13 source LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] LEAF_NODE 9 ; LEAF_NODE 7 } EXPR_STATEMENT 5 data [ 100 - 1 ] = '\\0' ; EXPR 6 data [ 100 - 1 ] = '\\0' ASSIGN 7 data [ 100 - 1 ] = '\\0' LVAL 8 data [ 100 - 1 ] FIELD 9 data [ 100 - 1 ] LEAF_NODE 10 data LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( vector < char * > dataVector ) LEAF_NODE 4 ( PARAMETER_DECL 4 vector < char * > dataVector TYPE 5 vector < char * > TYPE_NAME 6 vector < char * > LEAF_NODE 7 vector LEAF_NODE 7 < LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataVector LEAF_NODE 6 dataVector LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = dataVector [ 2 ] ; VAR_DECL 5 char * data ; data = dataVector [ 2 ] TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataVector [ 2 ] ASSIGN 7 data = dataVector [ 2 ] LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataVector [ 2 ] FIELD 9 dataVector [ 2 ] LEAF_NODE 10 dataVector LEAF_NODE 10 [ EXPR 10 2 FIELD 11 2 LEAF_NODE 12 2 LEAF_NODE 10 ] LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 size_t i ; VAR_DECL 6 size_t i TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 i LEAF_NODE 8 i LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; ITERATION 5 KEYWORD 6 for LEAF_NODE 7 for LEAF_NODE 6 ( FOR_INIT 6 i = 0 ; EXPR 7 i = 0 ASSIGN 8 i = 0 LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; CONDITION 6 i < 100 EXPR 7 i < 100 FIELD 8 i LEAF_NODE 9 i REL_OPERATOR 8 < LEAF_NODE 9 < FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 6 ; FOR_EXPR 6 i ++ EXPR 7 i ++ FIELD 8 i ++ LEAF_NODE 9 i LEAF_NODE 9 ++ LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 data [ i ] = source [ i ] ; EXPR 9 data [ i ] = source [ i ] ASSIGN 10 data [ i ] = source [ i ] LVAL 11 data [ i ] FIELD 12 data [ i ] LEAF_NODE 13 data LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 source [ i ] FIELD 12 source [ i ] LEAF_NODE 13 source LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] LEAF_NODE 9 ; LEAF_NODE 7 } EXPR_STATEMENT 5 data [ 100 - 1 ] = '\\0' ; EXPR 6 data [ 100 - 1 ] = '\\0' ASSIGN 7 data [ 100 - 1 ] = '\\0' LVAL 8 data [ 100 - 1 ] FIELD 9 data [ 100 - 1 ] LEAF_NODE 10 data LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 75, "project": "cwe119_ast_vul_function_test_adv_128", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( data , 'A' , 100 - 1 ) ; EXPR 4 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( data , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 100 - 1 ] = '\\0' ; EXPR 4 data [ 100 - 1 ] = '\\0' ASSIGN 5 data [ 100 - 1 ] = '\\0' LVAL 6 data [ 100 - 1 ] FIELD 7 data [ 100 - 1 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52b_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52b_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52b_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52b_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( data , 'A' , 50 - 1 ) ; EXPR 4 memset ( data , 'A' , 50 - 1 ) FUNCTION_CALL 5 memset ( data , 'A' , 50 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 50 - 1 FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 50 - 1 ] = '\\0' ; EXPR 4 data [ 50 - 1 ] = '\\0' ASSIGN 5 data [ 50 - 1 ] = '\\0' LVAL 6 data [ 50 - 1 ] FIELD 7 data [ 50 - 1 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 50 - 1 FIELD 9 50 LEAF_NODE 10 50 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52b_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52b_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52b_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 76, "project": "cwe119_ast_vul_function_test_adv_105", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_74 { void badSink ( map < int , int * > dataMap ) { int * data ; data = dataMap [ 2 ] ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; delete [ ] data ; } } void goodG2BSink ( map < int , int * > dataMap ) { int * data ; data = dataMap [ 2 ] ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; delete [ ] data ; } } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_74 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( map < int , int * > dataMap ) LEAF_NODE 4 ( PARAMETER_DECL 4 map < int , int * > dataMap TYPE 5 map < int , int * > TYPE_NAME 6 map < int , int * > LEAF_NODE 7 map LEAF_NODE 7 < LEAF_NODE 7 int LEAF_NODE 7 , LEAF_NODE 7 int LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataMap LEAF_NODE 6 dataMap LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int * data ; data = dataMap [ 2 ] ; VAR_DECL 5 int * data ; data = dataMap [ 2 ] TYPE 6 int * TYPE_NAME 7 int LEAF_NODE 8 int POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataMap [ 2 ] ASSIGN 7 data = dataMap [ 2 ] LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataMap [ 2 ] FIELD 9 dataMap [ 2 ] LEAF_NODE 10 dataMap LEAF_NODE 10 [ EXPR 10 2 FIELD 11 2 LEAF_NODE 12 2 LEAF_NODE 10 ] LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 int LEAF_NODE 5 source LEAF_NODE 5 [ LEAF_NODE 5 100 LEAF_NODE 5 ] LEAF_NODE 5 = LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 0 LEAF_NODE 5 } LEAF_NODE 5 ; EXPR_STATEMENT 5 memcpy ( data , source , 100 * sizeof ( int ) ) ; EXPR 6 memcpy ( data , source , 100 * sizeof ( int ) ) FUNCTION_CALL 7 memcpy ( data , source , 100 * sizeof ( int ) ) CALLEE 8 memcpy LEAF_NODE 9 memcpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 * sizeof ( int ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( int ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 int FIELD 11 int LEAF_NODE 12 int LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printIntLine ( data [ 0 ] ) ; EXPR 6 printIntLine ( data [ 0 ] ) FUNCTION_CALL 7 printIntLine ( data [ 0 ] ) CALLEE 8 printIntLine LEAF_NODE 9 printIntLine LEAF_NODE 8 ( ARGUMENT 8 data [ 0 ] FIELD 9 data [ 0 ] LEAF_NODE 10 data LEAF_NODE 10 [ EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ] LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( map < int , int * > dataMap ) LEAF_NODE 4 ( PARAMETER_DECL 4 map < int , int * > dataMap TYPE 5 map < int , int * > TYPE_NAME 6 map < int , int * > LEAF_NODE 7 map LEAF_NODE 7 < LEAF_NODE 7 int LEAF_NODE 7 , LEAF_NODE 7 int LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataMap LEAF_NODE 6 dataMap LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int * data ; data = dataMap [ 2 ] ; VAR_DECL 5 int * data ; data = dataMap [ 2 ] TYPE 6 int * TYPE_NAME 7 int LEAF_NODE 8 int POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataMap [ 2 ] ASSIGN 7 data = dataMap [ 2 ] LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataMap [ 2 ] FIELD 9 dataMap [ 2 ] LEAF_NODE 10 dataMap LEAF_NODE 10 [ EXPR 10 2 FIELD 11 2 LEAF_NODE 12 2 LEAF_NODE 10 ] LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 int LEAF_NODE 5 source LEAF_NODE 5 [ LEAF_NODE 5 100 LEAF_NODE 5 ] LEAF_NODE 5 = LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 0 LEAF_NODE 5 } LEAF_NODE 5 ; EXPR_STATEMENT 5 memcpy ( data , source , 100 * sizeof ( int ) ) ; EXPR 6 memcpy ( data , source , 100 * sizeof ( int ) ) FUNCTION_CALL 7 memcpy ( data , source , 100 * sizeof ( int ) ) CALLEE 8 memcpy LEAF_NODE 9 memcpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 * sizeof ( int ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( int ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 int FIELD 11 int LEAF_NODE 12 int LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printIntLine ( data [ 0 ] ) ; EXPR 6 printIntLine ( data [ 0 ] ) FUNCTION_CALL 7 printIntLine ( data [ 0 ] ) CALLEE 8 printIntLine LEAF_NODE 9 printIntLine LEAF_NODE 8 ( ARGUMENT 8 data [ 0 ] FIELD 9 data [ 0 ] LEAF_NODE 10 data LEAF_NODE 10 [ EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ] LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 77, "project": "cwe119_ast_vul_function_test_adv_73", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_31_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_31_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 10 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 10 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 10 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 10 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 10 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 10 * sizeof ( wchar_t ) FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * dataCopy ; dataCopy = data ; VAR_DECL 5 wchar_t * dataCopy ; dataCopy = data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 dataCopy LEAF_NODE 7 dataCopy LEAF_NODE 6 ; INIT 6 dataCopy = data ASSIGN 7 dataCopy = data LVAL 8 dataCopy NAME 9 dataCopy LEAF_NODE 10 dataCopy ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * data ; data = dataCopy ; VAR_DECL 5 wchar_t * data ; data = dataCopy TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataCopy ASSIGN 7 data = dataCopy LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataCopy FIELD 9 dataCopy LEAF_NODE 10 dataCopy LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 wchar_t [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 6 wchar_t [ 10 + 1 ] source ; source = SRC_STRING TYPE 7 wchar_t [ 10 + 1 ] TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t TYPE_SUFFIX 8 [ 10 + 1 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 7 ; INIT 7 source = SRC_STRING ASSIGN 8 source = SRC_STRING LVAL 9 source NAME 10 source LEAF_NODE 11 source ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SRC_STRING FIELD 10 SRC_STRING LEAF_NODE 11 SRC_STRING LEAF_NODE 6 ; EXPR_STATEMENT 5 wcscpy ( data , source ) ; EXPR 6 wcscpy ( data , source ) FUNCTION_CALL 7 wcscpy ( data , source ) CALLEE 8 wcscpy LEAF_NODE 9 wcscpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printWLine ( data ) ; EXPR 6 printWLine ( data ) FUNCTION_CALL 7 printWLine ( data ) CALLEE 8 printWLine LEAF_NODE 9 printWLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 free ( data ) ; EXPR 6 free ( data ) FUNCTION_CALL 7 free ( data ) CALLEE 8 free LEAF_NODE 9 free LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( ( 10 + 1 ) * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( ( 10 + 1 ) * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( ( 10 + 1 ) * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 ( 10 + 1 ) * sizeof ( wchar_t ) LEAF_NODE 9 ( FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ) LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * dataCopy ; dataCopy = data ; VAR_DECL 5 wchar_t * dataCopy ; dataCopy = data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 dataCopy LEAF_NODE 7 dataCopy LEAF_NODE 6 ; INIT 6 dataCopy = data ASSIGN 7 dataCopy = data LVAL 8 dataCopy NAME 9 dataCopy LEAF_NODE 10 dataCopy ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * data ; data = dataCopy ; VAR_DECL 5 wchar_t * data ; data = dataCopy TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataCopy ASSIGN 7 data = dataCopy LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataCopy FIELD 9 dataCopy LEAF_NODE 10 dataCopy LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 wchar_t [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 6 wchar_t [ 10 + 1 ] source ; source = SRC_STRING TYPE 7 wchar_t [ 10 + 1 ] TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t TYPE_SUFFIX 8 [ 10 + 1 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 7 ; INIT 7 source = SRC_STRING ASSIGN 8 source = SRC_STRING LVAL 9 source NAME 10 source LEAF_NODE 11 source ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SRC_STRING FIELD 10 SRC_STRING LEAF_NODE 11 SRC_STRING LEAF_NODE 6 ; EXPR_STATEMENT 5 wcscpy ( data , source ) ; EXPR 6 wcscpy ( data , source ) FUNCTION_CALL 7 wcscpy ( data , source ) CALLEE 8 wcscpy LEAF_NODE 9 wcscpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printWLine ( data ) ; EXPR 6 printWLine ( data ) FUNCTION_CALL 7 printWLine ( data ) CALLEE 8 printWLine LEAF_NODE 9 printWLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 free ( data ) ; EXPR 6 free ( data ) FUNCTION_CALL 7 free ( data ) CALLEE 8 free LEAF_NODE 9 free LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_31_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_31_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_31_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_31_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_31_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_31_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_31_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_31_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_31_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_31_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_31_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_31_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 78, "project": "cwe119_ast_vul_function_test_adv_4", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__wchar_t_declare_ncpy_54c_badSink LEAF_NODE 3 CWE127_Buffer_Underread__wchar_t_declare_ncpy_54c_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__wchar_t_declare_ncpy_54b_badSink LEAF_NODE 3 CWE127_Buffer_Underread__wchar_t_declare_ncpy_54b_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE127_Buffer_Underread__wchar_t_declare_ncpy_54c_badSink ( data ) ; EXPR 4 CWE127_Buffer_Underread__wchar_t_declare_ncpy_54c_badSink ( data ) FUNCTION_CALL 5 CWE127_Buffer_Underread__wchar_t_declare_ncpy_54c_badSink ( data ) CALLEE 6 CWE127_Buffer_Underread__wchar_t_declare_ncpy_54c_badSink LEAF_NODE 7 CWE127_Buffer_Underread__wchar_t_declare_ncpy_54c_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__wchar_t_declare_ncpy_54c_goodG2BSink LEAF_NODE 3 CWE127_Buffer_Underread__wchar_t_declare_ncpy_54c_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__wchar_t_declare_ncpy_54b_goodG2BSink LEAF_NODE 3 CWE127_Buffer_Underread__wchar_t_declare_ncpy_54b_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE127_Buffer_Underread__wchar_t_declare_ncpy_54c_goodG2BSink ( data ) ; EXPR 4 CWE127_Buffer_Underread__wchar_t_declare_ncpy_54c_goodG2BSink ( data ) FUNCTION_CALL 5 CWE127_Buffer_Underread__wchar_t_declare_ncpy_54c_goodG2BSink ( data ) CALLEE 6 CWE127_Buffer_Underread__wchar_t_declare_ncpy_54c_goodG2BSink LEAF_NODE 7 CWE127_Buffer_Underread__wchar_t_declare_ncpy_54c_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 79, "project": "cwe119_ast_vul_function_test_adv_69", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 wchar_t * CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_badData ; VAR_DECL 2 wchar_t * CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_badData TYPE 3 wchar_t * TYPE_NAME 4 wchar_t LEAF_NODE 5 wchar_t POINTER 4 * LEAF_NODE 5 * NAME 3 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_badData LEAF_NODE 4 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_badData LEAF_NODE 2 ; SIMPLE_DECL 1 wchar_t * CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_goodG2BData ; VAR_DECL 2 wchar_t * CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_goodG2BData TYPE 3 wchar_t * TYPE_NAME 4 wchar_t LEAF_NODE 5 wchar_t POINTER 4 * LEAF_NODE 5 * NAME 3 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_goodG2BData LEAF_NODE 4 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_goodG2BData LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68b_badSink LEAF_NODE 3 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68b_badSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_badData ; VAR_DECL 4 wchar_t * data ; data = CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_badData TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_badData ASSIGN 6 data = CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_badData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_badData FIELD 8 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_badData LEAF_NODE 9 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_badData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( data , source , 100 - 1 ) ; EXPR 5 wcsncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 wcsncpy ( data , source , 100 - 1 ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68b_goodG2BSink LEAF_NODE 3 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68b_goodG2BSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_goodG2BData ; VAR_DECL 4 wchar_t * data ; data = CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_goodG2BData TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_goodG2BData ASSIGN 6 data = CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_goodG2BData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_goodG2BData FIELD 8 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_goodG2BData LEAF_NODE 9 CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68_goodG2BData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( data , source , 100 - 1 ) ; EXPR 5 wcsncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 wcsncpy ( data , source , 100 - 1 ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 80, "project": "cwe119_ast_vul_function_test_adv_184", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct _CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType BASE_CLASSES { int structFirst ; } CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType ; VAR_DECL 2 struct _CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType BASE_CLASSES { int structFirst ; } CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType TYPE 3 struct _CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType BASE_CLASSES { int structFirst ; } CLASS_DEF 4 struct _CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType BASE_CLASSES { int structFirst ; } LEAF_NODE 5 struct CLASS_NAME 5 _CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType LEAF_NODE 6 _CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int structFirst ; SIMPLE_DECL 6 int structFirst ; VAR_DECL 7 int structFirst TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 structFirst LEAF_NODE 9 structFirst LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType LEAF_NODE 4 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67b_badSink LEAF_NODE 3 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67b_badSink PARAMETER_LIST 2 ( CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType myStruct TYPE 4 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType TYPE_NAME 5 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType LEAF_NODE 6 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int data ; data = myStruct . structFirst ; VAR_DECL 4 int data ; data = myStruct . structFirst TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; SIMPLE_DECL 4 int * intPointer ; VAR_DECL 5 int * intPointer TYPE 6 int * TYPE_NAME 7 int LEAF_NODE 8 int POINTER 7 * LEAF_NODE 8 * NAME 6 intPointer LEAF_NODE 7 intPointer LEAF_NODE 5 ; EXPR_STATEMENT 4 intPointer = ( int * ) malloc ( data * sizeof ( int ) ) ; EXPR 5 intPointer = ( int * ) malloc ( data * sizeof ( int ) ) ASSIGN 6 intPointer = ( int * ) malloc ( data * sizeof ( int ) ) LVAL 7 intPointer FIELD 8 intPointer LEAF_NODE 9 intPointer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( int * ) malloc ( data * sizeof ( int ) ) LEAF_NODE 8 ( TYPE_NAME 8 int LEAF_NODE 9 int LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( data * sizeof ( int ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 data * sizeof ( int ) FIELD 10 data LEAF_NODE 11 data LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( int ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 int FIELD 12 int LEAF_NODE 13 int LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < ( size_t ) data EXPR 6 i < ( size_t ) data FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < LEAF_NODE 7 ( TYPE_NAME 7 size_t LEAF_NODE 8 size_t LEAF_NODE 7 ) FIELD 7 data LEAF_NODE 8 data LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 intPointer [ i ] = 0 ; EXPR 8 intPointer [ i ] = 0 ASSIGN 9 intPointer [ i ] = 0 LVAL 10 intPointer [ i ] FIELD 11 intPointer [ i ] LEAF_NODE 12 intPointer LEAF_NODE 12 [ EXPR 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 8 ; LEAF_NODE 6 } EXPR_STATEMENT 4 printIntLine ( intPointer [ 0 ] ) ; EXPR 5 printIntLine ( intPointer [ 0 ] ) FUNCTION_CALL 6 printIntLine ( intPointer [ 0 ] ) CALLEE 7 printIntLine LEAF_NODE 8 printIntLine LEAF_NODE 7 ( ARGUMENT 7 intPointer [ 0 ] FIELD 8 intPointer [ 0 ] LEAF_NODE 9 intPointer LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( intPointer ) ; EXPR 5 free ( intPointer ) FUNCTION_CALL 6 free ( intPointer ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 intPointer FIELD 8 intPointer LEAF_NODE 9 intPointer LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67b_goodG2BSink LEAF_NODE 3 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67b_goodG2BSink PARAMETER_LIST 2 ( CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType myStruct TYPE 4 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType TYPE_NAME 5 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType LEAF_NODE 6 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int data ; data = myStruct . structFirst ; VAR_DECL 4 int data ; data = myStruct . structFirst TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; SIMPLE_DECL 4 int * intPointer ; VAR_DECL 5 int * intPointer TYPE 6 int * TYPE_NAME 7 int LEAF_NODE 8 int POINTER 7 * LEAF_NODE 8 * NAME 6 intPointer LEAF_NODE 7 intPointer LEAF_NODE 5 ; EXPR_STATEMENT 4 intPointer = ( int * ) malloc ( data * sizeof ( int ) ) ; EXPR 5 intPointer = ( int * ) malloc ( data * sizeof ( int ) ) ASSIGN 6 intPointer = ( int * ) malloc ( data * sizeof ( int ) ) LVAL 7 intPointer FIELD 8 intPointer LEAF_NODE 9 intPointer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( int * ) malloc ( data * sizeof ( int ) ) LEAF_NODE 8 ( TYPE_NAME 8 int LEAF_NODE 9 int LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( data * sizeof ( int ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 data * sizeof ( int ) FIELD 10 data LEAF_NODE 11 data LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( int ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 int FIELD 12 int LEAF_NODE 13 int LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < ( size_t ) data EXPR 6 i < ( size_t ) data FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < LEAF_NODE 7 ( TYPE_NAME 7 size_t LEAF_NODE 8 size_t LEAF_NODE 7 ) FIELD 7 data LEAF_NODE 8 data LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 intPointer [ i ] = 0 ; EXPR 8 intPointer [ i ] = 0 ASSIGN 9 intPointer [ i ] = 0 LVAL 10 intPointer [ i ] FIELD 11 intPointer [ i ] LEAF_NODE 12 intPointer LEAF_NODE 12 [ EXPR 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 8 ; LEAF_NODE 6 } EXPR_STATEMENT 4 printIntLine ( intPointer [ 0 ] ) ; EXPR 5 printIntLine ( intPointer [ 0 ] ) FUNCTION_CALL 6 printIntLine ( intPointer [ 0 ] ) CALLEE 7 printIntLine LEAF_NODE 8 printIntLine LEAF_NODE 7 ( ARGUMENT 7 intPointer [ 0 ] FIELD 8 intPointer [ 0 ] LEAF_NODE 9 intPointer LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( intPointer ) ; EXPR 5 free ( intPointer ) FUNCTION_CALL 6 free ( intPointer ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 intPointer FIELD 8 intPointer LEAF_NODE 9 intPointer LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 81, "project": "cwe119_ast_vul_function_test_adv_108", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 wchar_t * TYPE_NAME 3 wchar_t LEAF_NODE 4 wchar_t LEAF_NODE 3 * FUNCTION_NAME 2 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61b_badSource LEAF_NODE 3 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61b_badSource PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61_bad LEAF_NODE 3 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61b_badSource ( data ) ; EXPR 4 data = CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61b_badSource ( data ) ASSIGN 5 data = CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61b_badSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61b_badSource ( data ) FUNCTION_CALL 7 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61b_badSource ( data ) CALLEE 8 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61b_badSource LEAF_NODE 9 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61b_badSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] dest ; VAR_DECL 5 wchar_t [ 100 ] dest TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 dest LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( dest , data , wcslen ( dest ) ) ; EXPR 5 wcsncpy ( dest , data , wcslen ( dest ) ) FUNCTION_CALL 6 wcsncpy ( dest , data , wcslen ( dest ) ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 wcslen ( dest ) FUNCTION_CALL 8 wcslen ( dest ) CALLEE 9 wcslen LEAF_NODE 10 wcslen LEAF_NODE 9 ( ARGUMENT 9 dest FIELD 10 dest LEAF_NODE 11 dest LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( dest ) ; EXPR 5 printWLine ( dest ) FUNCTION_CALL 6 printWLine ( dest ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 wchar_t * TYPE_NAME 3 wchar_t LEAF_NODE 4 wchar_t LEAF_NODE 3 * FUNCTION_NAME 2 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61b_goodG2BSource LEAF_NODE 3 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61b_goodG2BSource PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61b_goodG2BSource ( data ) ; EXPR 4 data = CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61b_goodG2BSource ( data ) ASSIGN 5 data = CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61b_goodG2BSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61b_goodG2BSource ( data ) FUNCTION_CALL 7 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61b_goodG2BSource ( data ) CALLEE 8 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61b_goodG2BSource LEAF_NODE 9 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61b_goodG2BSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] dest ; VAR_DECL 5 wchar_t [ 100 ] dest TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 dest LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( dest , data , wcslen ( dest ) ) ; EXPR 5 wcsncpy ( dest , data , wcslen ( dest ) ) FUNCTION_CALL 6 wcsncpy ( dest , data , wcslen ( dest ) ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 wcslen ( dest ) FUNCTION_CALL 8 wcslen ( dest ) CALLEE 9 wcslen LEAF_NODE 10 wcslen LEAF_NODE 9 ( ARGUMENT 9 dest FIELD 10 dest LEAF_NODE 11 dest LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( dest ) ; EXPR 5 printWLine ( dest ) FUNCTION_CALL 6 printWLine ( dest ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61_good LEAF_NODE 3 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61_good ( ) ; EXPR 4 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61_good ( ) FUNCTION_CALL 5 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61_good ( ) CALLEE 6 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61_good LEAF_NODE 7 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61_bad ( ) ; EXPR 4 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61_bad ( ) FUNCTION_CALL 5 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61_bad ( ) CALLEE 6 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61_bad LEAF_NODE 7 CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 82, "project": "cwe119_ast_vul_function_test_adv_126", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51b_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBadBuffer ; dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBadBuffer ; dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ASSIGN 6 dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 ) * sizeof ( wchar_t ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataGoodBuffer ; dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataGoodBuffer ; dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ASSIGN 6 dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 + 1 ) * sizeof ( wchar_t ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51b_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51b_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51b_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51b_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51b_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBadBuffer ; dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBadBuffer ; dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ASSIGN 6 dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 ) * sizeof ( wchar_t ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataGoodBuffer ; dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataGoodBuffer ; dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ASSIGN 6 dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 + 1 ) * sizeof ( wchar_t ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51b_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51b_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51b_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 83, "project": "cwe119_ast_vul_function_test_adv_71", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__malloc_char_cpy_63b_badSink LEAF_NODE 3 CWE124_Buffer_Underwrite__malloc_char_cpy_63b_badSink PARAMETER_LIST 2 ( char * * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * * dataPtr TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__malloc_char_cpy_63_bad LEAF_NODE 3 CWE124_Buffer_Underwrite__malloc_char_cpy_63_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ; VAR_DECL 5 char * dataBuffer ; dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 dataBuffer LEAF_NODE 7 dataBuffer LEAF_NODE 6 ; INIT 6 dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 7 dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 8 dataBuffer NAME 9 dataBuffer LEAF_NODE 10 dataBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 9 ( TYPE_NAME 9 char LEAF_NODE 10 char LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 malloc ( 100 * sizeof ( char ) ) CALLEE 10 malloc LEAF_NODE 11 malloc LEAF_NODE 10 ( ARGUMENT 10 100 * sizeof ( char ) FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( char ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 char FIELD 13 char LEAF_NODE 14 char LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 5 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 6 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 dataBuffer FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 7 , ARGUMENT 7 'A' FIELD 8 'A' LEAF_NODE 9 'A' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 5 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 6 dataBuffer [ 100 - 1 ] = '\\0' LVAL 7 dataBuffer [ 100 - 1 ] FIELD 8 dataBuffer [ 100 - 1 ] LEAF_NODE 9 dataBuffer LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataBuffer - 8 ; EXPR 5 data = dataBuffer - 8 ASSIGN 6 data = dataBuffer - 8 LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataBuffer - 8 FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 8 - FIELD 8 8 LEAF_NODE 9 8 LEAF_NODE 5 ; LEAF_NODE 3 } EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__malloc_char_cpy_63b_badSink ( & data ) ; EXPR 4 CWE124_Buffer_Underwrite__malloc_char_cpy_63b_badSink ( & data ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__malloc_char_cpy_63b_badSink ( & data ) CALLEE 6 CWE124_Buffer_Underwrite__malloc_char_cpy_63b_badSink LEAF_NODE 7 CWE124_Buffer_Underwrite__malloc_char_cpy_63b_badSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__malloc_char_cpy_63b_goodG2BSink LEAF_NODE 3 CWE124_Buffer_Underwrite__malloc_char_cpy_63b_goodG2BSink PARAMETER_LIST 2 ( char * * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * * data TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ; VAR_DECL 5 char * dataBuffer ; dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 dataBuffer LEAF_NODE 7 dataBuffer LEAF_NODE 6 ; INIT 6 dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 7 dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 8 dataBuffer NAME 9 dataBuffer LEAF_NODE 10 dataBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 9 ( TYPE_NAME 9 char LEAF_NODE 10 char LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 malloc ( 100 * sizeof ( char ) ) CALLEE 10 malloc LEAF_NODE 11 malloc LEAF_NODE 10 ( ARGUMENT 10 100 * sizeof ( char ) FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( char ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 char FIELD 13 char LEAF_NODE 14 char LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 5 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 6 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 dataBuffer FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 7 , ARGUMENT 7 'A' FIELD 8 'A' LEAF_NODE 9 'A' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 5 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 6 dataBuffer [ 100 - 1 ] = '\\0' LVAL 7 dataBuffer [ 100 - 1 ] FIELD 8 dataBuffer [ 100 - 1 ] LEAF_NODE 9 dataBuffer LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataBuffer ; EXPR 5 data = dataBuffer ASSIGN 6 data = dataBuffer LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataBuffer FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 5 ; LEAF_NODE 3 } EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__malloc_char_cpy_63b_goodG2BSink ( & data ) ; EXPR 4 CWE124_Buffer_Underwrite__malloc_char_cpy_63b_goodG2BSink ( & data ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__malloc_char_cpy_63b_goodG2BSink ( & data ) CALLEE 6 CWE124_Buffer_Underwrite__malloc_char_cpy_63b_goodG2BSink LEAF_NODE 7 CWE124_Buffer_Underwrite__malloc_char_cpy_63b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__malloc_char_cpy_63_good LEAF_NODE 3 CWE124_Buffer_Underwrite__malloc_char_cpy_63_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__malloc_char_cpy_63_good ( ) ; EXPR 4 CWE124_Buffer_Underwrite__malloc_char_cpy_63_good ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__malloc_char_cpy_63_good ( ) CALLEE 6 CWE124_Buffer_Underwrite__malloc_char_cpy_63_good LEAF_NODE 7 CWE124_Buffer_Underwrite__malloc_char_cpy_63_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__malloc_char_cpy_63_bad ( ) ; EXPR 4 CWE124_Buffer_Underwrite__malloc_char_cpy_63_bad ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__malloc_char_cpy_63_bad ( ) CALLEE 6 CWE124_Buffer_Underwrite__malloc_char_cpy_63_bad LEAF_NODE 7 CWE124_Buffer_Underwrite__malloc_char_cpy_63_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 84, "project": "cwe119_ast_vul_function_test_adv_196", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52b_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 data LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52b_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52b_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52b_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52b_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52b_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 data LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 50 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 50 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52b_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52b_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52b_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 85, "project": "cwe119_ast_vul_function_test_adv_161", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ASSIGN 6 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 50 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 50 * sizeof ( char ) FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51b_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51b_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51b_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51b_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ASSIGN 6 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 50 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 50 * sizeof ( char ) FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51b_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51b_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51b_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 86, "project": "cwe119_ast_vul_function_test_adv_80", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 char * CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_badData ; VAR_DECL 2 char * CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_badData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_badData LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_badData LEAF_NODE 2 ; SIMPLE_DECL 1 char * CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_goodG2BData ; VAR_DECL 2 char * CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_goodG2BData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_goodG2BData LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_goodG2BData LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68b_badSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_badData ; VAR_DECL 4 char * data ; data = CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_badData TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_badData ASSIGN 6 data = CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_badData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_badData FIELD 8 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_badData LEAF_NODE 9 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_badData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 strncat ( dest , data , strlen ( data ) ) ; EXPR 5 strncat ( dest , data , strlen ( data ) ) FUNCTION_CALL 6 strncat ( dest , data , strlen ( data ) ) CALLEE 7 strncat LEAF_NODE 8 strncat LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( data ) FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 50 - 1 ] = '\\0' ; EXPR 5 dest [ 50 - 1 ] = '\\0' ASSIGN 6 dest [ 50 - 1 ] = '\\0' LVAL 7 dest [ 50 - 1 ] FIELD 8 dest [ 50 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68b_goodG2BSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_goodG2BData ; VAR_DECL 4 char * data ; data = CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_goodG2BData TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_goodG2BData ASSIGN 6 data = CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_goodG2BData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_goodG2BData FIELD 8 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_goodG2BData LEAF_NODE 9 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68_goodG2BData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 strncat ( dest , data , strlen ( data ) ) ; EXPR 5 strncat ( dest , data , strlen ( data ) ) FUNCTION_CALL 6 strncat ( dest , data , strlen ( data ) ) CALLEE 7 strncat LEAF_NODE 8 strncat LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( data ) FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 50 - 1 ] = '\\0' ; EXPR 5 dest [ 50 - 1 ] = '\\0' ASSIGN 6 dest [ 50 - 1 ] = '\\0' LVAL 7 dest [ 50 - 1 ] FIELD 8 dest [ 50 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 87, "project": "cwe119_ast_vul_function_test_adv_129", "target": 1}
{"func": "NAMESPACE_DEF 1 namespace CWE124_Buffer_Underwrite__new_char_memcpy_53 { void badSink_b ( char * data ) { STATEMENTS } ; void bad ( ) { char * data ; data = NULL ; { char * dataBuffer = new char [ 100 ] ; memset ( dataBuffer , 'A' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = '\\0' ; data = dataBuffer - 8 ; } badSink_b ( data ) ; } void goodG2BSink_b ( char * data ) { STATEMENTS } ; static void goodG2B ( ) { char * data ; data = NULL ; { char * dataBuffer = new char [ 100 ] ; memset ( dataBuffer , 'A' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = '\\0' ; data = dataBuffer ; } goodG2BSink_b ( data ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE124_Buffer_Underwrite__new_char_memcpy_53 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink_b LEAF_NODE 4 badSink_b PARAMETER_LIST 3 ( char * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 dataBuffer LEAF_NODE 5 = LEAF_NODE 5 new EXPR_STATEMENT 5 char [ 100 ] ; EXPR 6 char [ 100 ] FIELD 7 char [ 100 ] LEAF_NODE 8 char LEAF_NODE 8 [ EXPR 8 100 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 8 ] LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 6 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 7 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 dataBuffer FIELD 9 dataBuffer LEAF_NODE 10 dataBuffer LEAF_NODE 8 , ARGUMENT 8 'A' FIELD 9 'A' LEAF_NODE 10 'A' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 6 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 7 dataBuffer [ 100 - 1 ] = '\\0' LVAL 8 dataBuffer [ 100 - 1 ] FIELD 9 dataBuffer [ 100 - 1 ] LEAF_NODE 10 dataBuffer LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 data = dataBuffer - 8 ; EXPR 6 data = dataBuffer - 8 ASSIGN 7 data = dataBuffer - 8 LVAL 8 data FIELD 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataBuffer - 8 FIELD 9 dataBuffer LEAF_NODE 10 dataBuffer LEAF_NODE 9 - FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 6 ; LEAF_NODE 4 } EXPR_STATEMENT 4 badSink_b ( data ) ; EXPR 5 badSink_b ( data ) FUNCTION_CALL 6 badSink_b ( data ) CALLEE 7 badSink_b LEAF_NODE 8 badSink_b LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink_b LEAF_NODE 4 goodG2BSink_b PARAMETER_LIST 3 ( char * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 dataBuffer LEAF_NODE 5 = LEAF_NODE 5 new EXPR_STATEMENT 5 char [ 100 ] ; EXPR 6 char [ 100 ] FIELD 7 char [ 100 ] LEAF_NODE 8 char LEAF_NODE 8 [ EXPR 8 100 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 8 ] LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 6 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 7 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 dataBuffer FIELD 9 dataBuffer LEAF_NODE 10 dataBuffer LEAF_NODE 8 , ARGUMENT 8 'A' FIELD 9 'A' LEAF_NODE 10 'A' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 6 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 7 dataBuffer [ 100 - 1 ] = '\\0' LVAL 8 dataBuffer [ 100 - 1 ] FIELD 9 dataBuffer [ 100 - 1 ] LEAF_NODE 10 dataBuffer LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 data = dataBuffer ; EXPR 6 data = dataBuffer ASSIGN 7 data = dataBuffer LVAL 8 data FIELD 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataBuffer FIELD 9 dataBuffer LEAF_NODE 10 dataBuffer LEAF_NODE 6 ; LEAF_NODE 4 } EXPR_STATEMENT 4 goodG2BSink_b ( data ) ; EXPR 5 goodG2BSink_b ( data ) FUNCTION_CALL 6 goodG2BSink_b ( data ) CALLEE 7 goodG2BSink_b LEAF_NODE 8 goodG2BSink_b LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE124_Buffer_Underwrite__new_char_memcpy_53 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE124_Buffer_Underwrite__new_char_memcpy_53 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 88, "project": "cwe119_ast_vul_function_test_adv_144", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_alloca_ncpy_64b_badSink LEAF_NODE 3 CWE127_Buffer_Underread__char_alloca_ncpy_64b_badSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_alloca_ncpy_64_bad LEAF_NODE 3 CWE127_Buffer_Underread__char_alloca_ncpy_64_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer - 8 ; EXPR 4 data = dataBuffer - 8 ASSIGN 5 data = dataBuffer - 8 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer - 8 FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 7 - FIELD 7 8 LEAF_NODE 8 8 LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__char_alloca_ncpy_64b_badSink ( & data ) ; EXPR 4 CWE127_Buffer_Underread__char_alloca_ncpy_64b_badSink ( & data ) FUNCTION_CALL 5 CWE127_Buffer_Underread__char_alloca_ncpy_64b_badSink ( & data ) CALLEE 6 CWE127_Buffer_Underread__char_alloca_ncpy_64b_badSink LEAF_NODE 7 CWE127_Buffer_Underread__char_alloca_ncpy_64b_badSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_alloca_ncpy_64b_goodG2BSink LEAF_NODE 3 CWE127_Buffer_Underread__char_alloca_ncpy_64b_goodG2BSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__char_alloca_ncpy_64b_goodG2BSink ( & data ) ; EXPR 4 CWE127_Buffer_Underread__char_alloca_ncpy_64b_goodG2BSink ( & data ) FUNCTION_CALL 5 CWE127_Buffer_Underread__char_alloca_ncpy_64b_goodG2BSink ( & data ) CALLEE 6 CWE127_Buffer_Underread__char_alloca_ncpy_64b_goodG2BSink LEAF_NODE 7 CWE127_Buffer_Underread__char_alloca_ncpy_64b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_alloca_ncpy_64_good LEAF_NODE 3 CWE127_Buffer_Underread__char_alloca_ncpy_64_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__char_alloca_ncpy_64_good ( ) ; EXPR 4 CWE127_Buffer_Underread__char_alloca_ncpy_64_good ( ) FUNCTION_CALL 5 CWE127_Buffer_Underread__char_alloca_ncpy_64_good ( ) CALLEE 6 CWE127_Buffer_Underread__char_alloca_ncpy_64_good LEAF_NODE 7 CWE127_Buffer_Underread__char_alloca_ncpy_64_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__char_alloca_ncpy_64_bad ( ) ; EXPR 4 CWE127_Buffer_Underread__char_alloca_ncpy_64_bad ( ) FUNCTION_CALL 5 CWE127_Buffer_Underread__char_alloca_ncpy_64_bad ( ) CALLEE 6 CWE127_Buffer_Underread__char_alloca_ncpy_64_bad LEAF_NODE 7 CWE127_Buffer_Underread__char_alloca_ncpy_64_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 89, "project": "cwe119_ast_vul_function_test_adv_194", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_17_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_17_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int i ; VAR_DECL 4 int i TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < 1 EXPR 5 i < 1 FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 i ++ EXPR 5 i ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = ( wchar_t * ) malloc ( 50 * sizeof ( wchar_t ) ) ; EXPR 7 data = ( wchar_t * ) malloc ( 50 * sizeof ( wchar_t ) ) ASSIGN 8 data = ( wchar_t * ) malloc ( 50 * sizeof ( wchar_t ) ) LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( wchar_t * ) malloc ( 50 * sizeof ( wchar_t ) ) LEAF_NODE 10 ( TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t LEAF_NODE 10 * LEAF_NODE 10 ) FUNCTION_CALL 10 malloc ( 50 * sizeof ( wchar_t ) ) CALLEE 11 malloc LEAF_NODE 12 malloc LEAF_NODE 11 ( ARGUMENT 11 50 * sizeof ( wchar_t ) FIELD 12 50 LEAF_NODE 13 50 LEAF_NODE 12 * FUNCTION_CALL 12 sizeof ( wchar_t ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 wchar_t FIELD 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 [ LEAF_NODE 6 0 LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; LEAF_NODE 4 SNPRINTF LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 \"%s\" LEAF_NODE 4 , LEAF_NODE 4 source LEAF_NODE 4 ) LEAF_NODE 4 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int h ; VAR_DECL 4 int h TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 h LEAF_NODE 6 h LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 h = 0 ; EXPR 5 h = 0 ASSIGN 6 h = 0 LVAL 7 h FIELD 8 h LEAF_NODE 9 h ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 h < 1 EXPR 5 h < 1 FIELD 6 h LEAF_NODE 7 h REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 h ++ EXPR 5 h ++ FIELD 6 h ++ LEAF_NODE 7 h LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 7 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 8 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 10 ( TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t LEAF_NODE 10 * LEAF_NODE 10 ) FUNCTION_CALL 10 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 11 malloc LEAF_NODE 12 malloc LEAF_NODE 11 ( ARGUMENT 11 100 * sizeof ( wchar_t ) FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 * FUNCTION_CALL 12 sizeof ( wchar_t ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 wchar_t FIELD 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 [ LEAF_NODE 6 0 LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; LEAF_NODE 4 SNPRINTF LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 \"%s\" LEAF_NODE 4 , LEAF_NODE 4 source LEAF_NODE 4 ) LEAF_NODE 4 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_17_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_17_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_17_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_17_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_17_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_17_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_17_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_17_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_17_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_17_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_17_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_17_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 90, "project": "cwe119_ast_vul_function_test_adv_20", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_74 { void badSink ( map < int , char * > dataMap ) { STATEMENTS } ; void bad ( ) { char * data ; map < int , char * > dataMap ; char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\\0' ; dataMap [ 0 ] = data ; dataMap [ 1 ] = data ; dataMap [ 2 ] = data ; badSink ( dataMap ) ; } void goodG2BSink ( map < int , char * > dataMap ) { STATEMENTS } ; static void goodG2B ( ) { char * data ; map < int , char * > dataMap ; char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\\0' ; dataMap [ 0 ] = data ; dataMap [ 1 ] = data ; dataMap [ 2 ] = data ; goodG2BSink ( dataMap ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_74 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( map < int , char * > dataMap ) LEAF_NODE 4 ( PARAMETER_DECL 4 map < int , char * > dataMap TYPE 5 map < int , char * > TYPE_NAME 6 map < int , char * > LEAF_NODE 7 map LEAF_NODE 7 < LEAF_NODE 7 int LEAF_NODE 7 , LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataMap LEAF_NODE 6 dataMap LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 map < int , char * > dataMap ; VAR_DECL 5 map < int , char * > dataMap TYPE 6 map < int , char * > TYPE_NAME 7 map < int , char * > LEAF_NODE 8 map LEAF_NODE 8 < LEAF_NODE 8 int LEAF_NODE 8 , LEAF_NODE 8 char LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataMap LEAF_NODE 7 dataMap LEAF_NODE 5 ; SIMPLE_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; VAR_DECL 5 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 dataBadBuffer LEAF_NODE 7 dataBadBuffer LEAF_NODE 6 ; INIT 6 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ASSIGN 7 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LVAL 8 dataBadBuffer NAME 9 dataBadBuffer LEAF_NODE 10 dataBadBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LEAF_NODE 9 ( TYPE_NAME 9 char LEAF_NODE 10 char LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 ALLOCA ( 50 * sizeof ( char ) ) CALLEE 10 ALLOCA LEAF_NODE 11 ALLOCA LEAF_NODE 10 ( ARGUMENT 10 50 * sizeof ( char ) FIELD 11 50 LEAF_NODE 12 50 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( char ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 char FIELD 13 char LEAF_NODE 14 char LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 5 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 dataGoodBuffer LEAF_NODE 7 dataGoodBuffer LEAF_NODE 6 ; INIT 6 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 7 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 8 dataGoodBuffer NAME 9 dataGoodBuffer LEAF_NODE 10 dataGoodBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 9 ( TYPE_NAME 9 char LEAF_NODE 10 char LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 10 ALLOCA LEAF_NODE 11 ALLOCA LEAF_NODE 10 ( ARGUMENT 10 100 * sizeof ( char ) FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( char ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 char FIELD 13 char LEAF_NODE 14 char LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataBadBuffer ; EXPR 5 data = dataBadBuffer ASSIGN 6 data = dataBadBuffer LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataBadBuffer FIELD 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 0 ] = '\\0' ; EXPR 5 data [ 0 ] = '\\0' ASSIGN 6 data [ 0 ] = '\\0' LVAL 7 data [ 0 ] FIELD 8 data [ 0 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataMap [ 0 ] = data ; EXPR 5 dataMap [ 0 ] = data ASSIGN 6 dataMap [ 0 ] = data LVAL 7 dataMap [ 0 ] FIELD 8 dataMap [ 0 ] LEAF_NODE 9 dataMap LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 dataMap [ 1 ] = data ; EXPR 5 dataMap [ 1 ] = data ASSIGN 6 dataMap [ 1 ] = data LVAL 7 dataMap [ 1 ] FIELD 8 dataMap [ 1 ] LEAF_NODE 9 dataMap LEAF_NODE 9 [ EXPR 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 dataMap [ 2 ] = data ; EXPR 5 dataMap [ 2 ] = data ASSIGN 6 dataMap [ 2 ] = data LVAL 7 dataMap [ 2 ] FIELD 8 dataMap [ 2 ] LEAF_NODE 9 dataMap LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( dataMap ) ; EXPR 5 badSink ( dataMap ) FUNCTION_CALL 6 badSink ( dataMap ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( ARGUMENT 7 dataMap FIELD 8 dataMap LEAF_NODE 9 dataMap LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( map < int , char * > dataMap ) LEAF_NODE 4 ( PARAMETER_DECL 4 map < int , char * > dataMap TYPE 5 map < int , char * > TYPE_NAME 6 map < int , char * > LEAF_NODE 7 map LEAF_NODE 7 < LEAF_NODE 7 int LEAF_NODE 7 , LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataMap LEAF_NODE 6 dataMap LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 map < int , char * > dataMap ; VAR_DECL 5 map < int , char * > dataMap TYPE 6 map < int , char * > TYPE_NAME 7 map < int , char * > LEAF_NODE 8 map LEAF_NODE 8 < LEAF_NODE 8 int LEAF_NODE 8 , LEAF_NODE 8 char LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataMap LEAF_NODE 7 dataMap LEAF_NODE 5 ; SIMPLE_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; VAR_DECL 5 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 dataBadBuffer LEAF_NODE 7 dataBadBuffer LEAF_NODE 6 ; INIT 6 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ASSIGN 7 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LVAL 8 dataBadBuffer NAME 9 dataBadBuffer LEAF_NODE 10 dataBadBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LEAF_NODE 9 ( TYPE_NAME 9 char LEAF_NODE 10 char LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 ALLOCA ( 50 * sizeof ( char ) ) CALLEE 10 ALLOCA LEAF_NODE 11 ALLOCA LEAF_NODE 10 ( ARGUMENT 10 50 * sizeof ( char ) FIELD 11 50 LEAF_NODE 12 50 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( char ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 char FIELD 13 char LEAF_NODE 14 char LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 5 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 dataGoodBuffer LEAF_NODE 7 dataGoodBuffer LEAF_NODE 6 ; INIT 6 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 7 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 8 dataGoodBuffer NAME 9 dataGoodBuffer LEAF_NODE 10 dataGoodBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 9 ( TYPE_NAME 9 char LEAF_NODE 10 char LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 10 ALLOCA LEAF_NODE 11 ALLOCA LEAF_NODE 10 ( ARGUMENT 10 100 * sizeof ( char ) FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( char ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 char FIELD 13 char LEAF_NODE 14 char LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataGoodBuffer ; EXPR 5 data = dataGoodBuffer ASSIGN 6 data = dataGoodBuffer LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataGoodBuffer FIELD 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 0 ] = '\\0' ; EXPR 5 data [ 0 ] = '\\0' ASSIGN 6 data [ 0 ] = '\\0' LVAL 7 data [ 0 ] FIELD 8 data [ 0 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataMap [ 0 ] = data ; EXPR 5 dataMap [ 0 ] = data ASSIGN 6 dataMap [ 0 ] = data LVAL 7 dataMap [ 0 ] FIELD 8 dataMap [ 0 ] LEAF_NODE 9 dataMap LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 dataMap [ 1 ] = data ; EXPR 5 dataMap [ 1 ] = data ASSIGN 6 dataMap [ 1 ] = data LVAL 7 dataMap [ 1 ] FIELD 8 dataMap [ 1 ] LEAF_NODE 9 dataMap LEAF_NODE 9 [ EXPR 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 dataMap [ 2 ] = data ; EXPR 5 dataMap [ 2 ] = data ASSIGN 6 dataMap [ 2 ] = data LVAL 7 dataMap [ 2 ] FIELD 8 dataMap [ 2 ] LEAF_NODE 9 dataMap LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( dataMap ) ; EXPR 5 goodG2BSink ( dataMap ) FUNCTION_CALL 6 goodG2BSink ( dataMap ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( ARGUMENT 7 dataMap FIELD 8 dataMap LEAF_NODE 9 dataMap LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_74 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_74 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 91, "project": "cwe119_ast_vul_function_test_adv_120", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_17_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_17_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int i ; VAR_DECL 4 int i TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBadBuffer ; dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBadBuffer ; dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ASSIGN 6 dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 ) * sizeof ( wchar_t ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataGoodBuffer ; dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataGoodBuffer ; dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ASSIGN 6 dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 + 1 ) * sizeof ( wchar_t ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < 1 EXPR 5 i < 1 FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 i ++ EXPR 5 i ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBadBuffer ; EXPR 7 data = dataBadBuffer ASSIGN 8 data = dataBadBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBadBuffer FIELD 10 dataBadBuffer LEAF_NODE 11 dataBadBuffer LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 [ LEAF_NODE 6 0 LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 5 wchar_t [ 10 + 1 ] source ; source = SRC_STRING TYPE 6 wchar_t [ 10 + 1 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 10 + 1 ] LEAF_NODE 8 [ FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 6 ; INIT 6 source = SRC_STRING ASSIGN 7 source = SRC_STRING LVAL 8 source NAME 9 source LEAF_NODE 10 source ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 SRC_STRING FIELD 9 SRC_STRING LEAF_NODE 10 SRC_STRING LEAF_NODE 5 ; EXPR_STATEMENT 4 wcscpy ( data , source ) ; EXPR 5 wcscpy ( data , source ) FUNCTION_CALL 6 wcscpy ( data , source ) CALLEE 7 wcscpy LEAF_NODE 8 wcscpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int h ; VAR_DECL 4 int h TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 h LEAF_NODE 6 h LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBadBuffer ; dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBadBuffer ; dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ASSIGN 6 dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 ) * sizeof ( wchar_t ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataGoodBuffer ; dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataGoodBuffer ; dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ASSIGN 6 dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 + 1 ) * sizeof ( wchar_t ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 h = 0 ; EXPR 5 h = 0 ASSIGN 6 h = 0 LVAL 7 h FIELD 8 h LEAF_NODE 9 h ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 h < 1 EXPR 5 h < 1 FIELD 6 h LEAF_NODE 7 h REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 h ++ EXPR 5 h ++ FIELD 6 h ++ LEAF_NODE 7 h LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataGoodBuffer ; EXPR 7 data = dataGoodBuffer ASSIGN 8 data = dataGoodBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataGoodBuffer FIELD 10 dataGoodBuffer LEAF_NODE 11 dataGoodBuffer LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 [ LEAF_NODE 6 0 LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 5 wchar_t [ 10 + 1 ] source ; source = SRC_STRING TYPE 6 wchar_t [ 10 + 1 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 10 + 1 ] LEAF_NODE 8 [ FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 6 ; INIT 6 source = SRC_STRING ASSIGN 7 source = SRC_STRING LVAL 8 source NAME 9 source LEAF_NODE 10 source ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 SRC_STRING FIELD 9 SRC_STRING LEAF_NODE 10 SRC_STRING LEAF_NODE 5 ; EXPR_STATEMENT 4 wcscpy ( data , source ) ; EXPR 5 wcscpy ( data , source ) FUNCTION_CALL 6 wcscpy ( data , source ) CALLEE 7 wcscpy LEAF_NODE 8 wcscpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_17_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_17_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_17_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_17_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_17_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_17_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_17_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_17_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_17_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_17_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_17_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_17_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 92, "project": "cwe119_ast_vul_function_test_adv_8", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_21 { static int badStatic ; badStatic = 0 ; static char * badSource ( char * data ) { if ( badStatic ) { data = new char [ 10 ] ; } return data ; } void bad ( ) { char * data ; data = NULL ; badStatic = 1 ; data = badSource ( data ) ; { char [ 10 + 1 ] source ; source = SRC_STRING ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; delete [ ] data ; } ; } static int goodG2B1Static ; goodG2B1Static = 0 ; static int goodG2B2Static ; goodG2B2Static = 0 ; static char * goodG2B1Source ( char * data ) { if ( goodG2B1Static ) { printLine ( \"Benign, fixed string\" ) ; } else { data = new char [ 10 + 1 ] ; } return data ; } static void goodG2B1 ( ) { char * data ; data = NULL ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { char [ 10 + 1 ] source ; source = SRC_STRING ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; delete [ ] data ; } ; } static char * goodG2B2Source ( char * data ) { if ( goodG2B2Static ) { data = new char [ 10 + 1 ] ; } return data ; } static void goodG2B2 ( ) { char * data ; data = NULL ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { char [ 10 + 1 ] source ; source = SRC_STRING ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; delete [ ] data ; } ; } void good ( ) { goodG2B1 ( ) ; goodG2B2 ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_21 LEAF_NODE 2 { LEAF_NODE 2 static SIMPLE_DECL 2 int badStatic ; badStatic = 0 ; VAR_DECL 3 int badStatic ; badStatic = 0 TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 badStatic LEAF_NODE 5 badStatic LEAF_NODE 4 ; INIT 4 badStatic = 0 ASSIGN 5 badStatic = 0 LVAL 6 badStatic NAME 7 badStatic LEAF_NODE 8 badStatic ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 3 ; FUNCTION_DEF 2 RETURN_TYPE 3 static char * LEAF_NODE 4 static TYPE_NAME 4 char LEAF_NODE 5 char LEAF_NODE 4 * FUNCTION_NAME 3 badSource LEAF_NODE 4 badSource PARAMETER_LIST 3 ( char * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 badStatic EXPR 6 badStatic FIELD 7 badStatic LEAF_NODE 8 badStatic LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 data LEAF_NODE 7 = LEAF_NODE 7 new EXPR_STATEMENT 7 char [ 10 ] ; EXPR 8 char [ 10 ] FIELD 9 char [ 10 ] LEAF_NODE 10 char LEAF_NODE 10 [ EXPR 10 10 FIELD 11 10 LEAF_NODE 12 10 LEAF_NODE 10 ] LEAF_NODE 8 ; LEAF_NODE 6 } JUMP_STATEMENT 4 return data ; KEYWORD 5 return LEAF_NODE 6 return DESTINATION 5 data EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; EXPR_STATEMENT 4 badStatic = 1 ; EXPR 5 badStatic = 1 ASSIGN 6 badStatic = 1 LVAL 7 badStatic FIELD 8 badStatic LEAF_NODE 9 badStatic ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 5 ; EXPR_STATEMENT 4 data = badSource ( data ) ; EXPR 5 data = badSource ( data ) ASSIGN 6 data = badSource ( data ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 badSource ( data ) FUNCTION_CALL 8 badSource ( data ) CALLEE 9 badSource LEAF_NODE 10 badSource LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 6 char [ 10 + 1 ] source ; source = SRC_STRING TYPE 7 char [ 10 + 1 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 10 + 1 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 7 ; INIT 7 source = SRC_STRING ASSIGN 8 source = SRC_STRING LVAL 9 source NAME 10 source LEAF_NODE 11 source ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SRC_STRING FIELD 10 SRC_STRING LEAF_NODE 11 SRC_STRING LEAF_NODE 6 ; EXPR_STATEMENT 5 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; EXPR 6 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) FUNCTION_CALL 7 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) CALLEE 8 memmove LEAF_NODE 9 memmove LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 ( strlen ( source ) + 1 ) * sizeof ( char ) LEAF_NODE 9 ( FUNCTION_CALL 9 strlen ( source ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 source FIELD 11 source LEAF_NODE 12 source LEAF_NODE 10 ) LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ) LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 4 ; LEAF_NODE 3 } LEAF_NODE 2 static SIMPLE_DECL 2 int goodG2B1Static ; goodG2B1Static = 0 ; VAR_DECL 3 int goodG2B1Static ; goodG2B1Static = 0 TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 goodG2B1Static LEAF_NODE 5 goodG2B1Static LEAF_NODE 4 ; INIT 4 goodG2B1Static = 0 ASSIGN 5 goodG2B1Static = 0 LVAL 6 goodG2B1Static NAME 7 goodG2B1Static LEAF_NODE 8 goodG2B1Static ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 3 ; LEAF_NODE 2 static SIMPLE_DECL 2 int goodG2B2Static ; goodG2B2Static = 0 ; VAR_DECL 3 int goodG2B2Static ; goodG2B2Static = 0 TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 goodG2B2Static LEAF_NODE 5 goodG2B2Static LEAF_NODE 4 ; INIT 4 goodG2B2Static = 0 ASSIGN 5 goodG2B2Static = 0 LVAL 6 goodG2B2Static NAME 7 goodG2B2Static LEAF_NODE 8 goodG2B2Static ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 3 ; FUNCTION_DEF 2 RETURN_TYPE 3 static char * LEAF_NODE 4 static TYPE_NAME 4 char LEAF_NODE 5 char LEAF_NODE 4 * FUNCTION_NAME 3 goodG2B1Source LEAF_NODE 4 goodG2B1Source PARAMETER_LIST 3 ( char * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 goodG2B1Static EXPR 6 goodG2B1Static FIELD 7 goodG2B1Static LEAF_NODE 8 goodG2B1Static LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Benign, fixed string\" ) ; EXPR 8 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 9 printLine ( \"Benign, fixed string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Benign, fixed string\" FIELD 11 \"Benign, fixed string\" LEAF_NODE 12 \"Benign, fixed string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 data LEAF_NODE 7 = LEAF_NODE 7 new EXPR_STATEMENT 7 char [ 10 + 1 ] ; EXPR 8 char [ 10 + 1 ] FIELD 9 char [ 10 + 1 ] LEAF_NODE 10 char LEAF_NODE 10 [ EXPR 10 10 + 1 FIELD 11 10 LEAF_NODE 12 10 LEAF_NODE 11 + FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] LEAF_NODE 8 ; LEAF_NODE 6 } JUMP_STATEMENT 4 return data ; KEYWORD 5 return LEAF_NODE 6 return DESTINATION 5 data EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B1 LEAF_NODE 4 goodG2B1 PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2B1Static = 0 ; EXPR 5 goodG2B1Static = 0 ASSIGN 6 goodG2B1Static = 0 LVAL 7 goodG2B1Static FIELD 8 goodG2B1Static LEAF_NODE 9 goodG2B1Static ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; EXPR_STATEMENT 4 data = goodG2B1Source ( data ) ; EXPR 5 data = goodG2B1Source ( data ) ASSIGN 6 data = goodG2B1Source ( data ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 goodG2B1Source ( data ) FUNCTION_CALL 8 goodG2B1Source ( data ) CALLEE 9 goodG2B1Source LEAF_NODE 10 goodG2B1Source LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 6 char [ 10 + 1 ] source ; source = SRC_STRING TYPE 7 char [ 10 + 1 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 10 + 1 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 7 ; INIT 7 source = SRC_STRING ASSIGN 8 source = SRC_STRING LVAL 9 source NAME 10 source LEAF_NODE 11 source ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SRC_STRING FIELD 10 SRC_STRING LEAF_NODE 11 SRC_STRING LEAF_NODE 6 ; EXPR_STATEMENT 5 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; EXPR 6 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) FUNCTION_CALL 7 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) CALLEE 8 memmove LEAF_NODE 9 memmove LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 ( strlen ( source ) + 1 ) * sizeof ( char ) LEAF_NODE 9 ( FUNCTION_CALL 9 strlen ( source ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 source FIELD 11 source LEAF_NODE 12 source LEAF_NODE 10 ) LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ) LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 4 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static char * LEAF_NODE 4 static TYPE_NAME 4 char LEAF_NODE 5 char LEAF_NODE 4 * FUNCTION_NAME 3 goodG2B2Source LEAF_NODE 4 goodG2B2Source PARAMETER_LIST 3 ( char * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 goodG2B2Static EXPR 6 goodG2B2Static FIELD 7 goodG2B2Static LEAF_NODE 8 goodG2B2Static LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 data LEAF_NODE 7 = LEAF_NODE 7 new EXPR_STATEMENT 7 char [ 10 + 1 ] ; EXPR 8 char [ 10 + 1 ] FIELD 9 char [ 10 + 1 ] LEAF_NODE 10 char LEAF_NODE 10 [ EXPR 10 10 + 1 FIELD 11 10 LEAF_NODE 12 10 LEAF_NODE 11 + FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] LEAF_NODE 8 ; LEAF_NODE 6 } JUMP_STATEMENT 4 return data ; KEYWORD 5 return LEAF_NODE 6 return DESTINATION 5 data EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B2 LEAF_NODE 4 goodG2B2 PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2B2Static = 1 ; EXPR 5 goodG2B2Static = 1 ASSIGN 6 goodG2B2Static = 1 LVAL 7 goodG2B2Static FIELD 8 goodG2B2Static LEAF_NODE 9 goodG2B2Static ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 5 ; EXPR_STATEMENT 4 data = goodG2B2Source ( data ) ; EXPR 5 data = goodG2B2Source ( data ) ASSIGN 6 data = goodG2B2Source ( data ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 goodG2B2Source ( data ) FUNCTION_CALL 8 goodG2B2Source ( data ) CALLEE 9 goodG2B2Source LEAF_NODE 10 goodG2B2Source LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 6 char [ 10 + 1 ] source ; source = SRC_STRING TYPE 7 char [ 10 + 1 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 10 + 1 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 7 ; INIT 7 source = SRC_STRING ASSIGN 8 source = SRC_STRING LVAL 9 source NAME 10 source LEAF_NODE 11 source ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SRC_STRING FIELD 10 SRC_STRING LEAF_NODE 11 SRC_STRING LEAF_NODE 6 ; EXPR_STATEMENT 5 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; EXPR 6 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) FUNCTION_CALL 7 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) CALLEE 8 memmove LEAF_NODE 9 memmove LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 ( strlen ( source ) + 1 ) * sizeof ( char ) LEAF_NODE 9 ( FUNCTION_CALL 9 strlen ( source ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 source FIELD 11 source LEAF_NODE 12 source LEAF_NODE 10 ) LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ) LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 4 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B1 ( ) ; EXPR 5 goodG2B1 ( ) FUNCTION_CALL 6 goodG2B1 ( ) CALLEE 7 goodG2B1 LEAF_NODE 8 goodG2B1 LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2B2 ( ) ; EXPR 5 goodG2B2 ( ) FUNCTION_CALL 6 goodG2B2 ( ) CALLEE 7 goodG2B2 LEAF_NODE 8 goodG2B2 LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_21 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_21 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 93, "project": "cwe119_ast_vul_function_test_adv_47", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_14_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_14_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; SIMPLE_DECL 3 int globalFive ; VAR_DECL 4 int globalFive TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalFive LEAF_NODE 6 globalFive LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalFive == 5 EXPR 5 globalFive == 5 FIELD 6 globalFive LEAF_NODE 7 globalFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 wmemset LEAF_NODE 6 ( LEAF_NODE 6 data LEAF_NODE 6 , LEAF_NODE 6 L LEAF_NODE 6 'A' LEAF_NODE 6 , LEAF_NODE 6 100 LEAF_NODE 6 - LEAF_NODE 6 1 LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 6 data LEAF_NODE 6 [ LEAF_NODE 6 100 LEAF_NODE 6 - LEAF_NODE 6 1 LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 wchar_t LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 \"\" ; EXPR 5 \"\" FIELD 6 \"\" LEAF_NODE 7 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( dest , data , wcslen ( data ) ) ; EXPR 5 wcsncpy ( dest , data , wcslen ( data ) ) FUNCTION_CALL 6 wcsncpy ( dest , data , wcslen ( data ) ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 wcslen ( data ) FUNCTION_CALL 8 wcslen ( data ) CALLEE 9 wcslen LEAF_NODE 10 wcslen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; SIMPLE_DECL 3 int globalFive ; VAR_DECL 4 int globalFive TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalFive LEAF_NODE 6 globalFive LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalFive != 5 EXPR 5 globalFive != 5 FIELD 6 globalFive LEAF_NODE 7 globalFive EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 wmemset LEAF_NODE 6 ( LEAF_NODE 6 data LEAF_NODE 6 , LEAF_NODE 6 L LEAF_NODE 6 'A' LEAF_NODE 6 , LEAF_NODE 6 50 LEAF_NODE 6 - LEAF_NODE 6 1 LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 6 data LEAF_NODE 6 [ LEAF_NODE 6 50 LEAF_NODE 6 - LEAF_NODE 6 1 LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 wchar_t LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 \"\" ; EXPR 5 \"\" FIELD 6 \"\" LEAF_NODE 7 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( dest , data , wcslen ( data ) ) ; EXPR 5 wcsncpy ( dest , data , wcslen ( data ) ) FUNCTION_CALL 6 wcsncpy ( dest , data , wcslen ( data ) ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 wcslen ( data ) FUNCTION_CALL 8 wcslen ( data ) CALLEE 9 wcslen LEAF_NODE 10 wcslen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; SIMPLE_DECL 3 int globalFive ; VAR_DECL 4 int globalFive TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalFive LEAF_NODE 6 globalFive LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalFive == 5 EXPR 5 globalFive == 5 FIELD 6 globalFive LEAF_NODE 7 globalFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 wmemset LEAF_NODE 6 ( LEAF_NODE 6 data LEAF_NODE 6 , LEAF_NODE 6 L LEAF_NODE 6 'A' LEAF_NODE 6 , LEAF_NODE 6 50 LEAF_NODE 6 - LEAF_NODE 6 1 LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 6 data LEAF_NODE 6 [ LEAF_NODE 6 50 LEAF_NODE 6 - LEAF_NODE 6 1 LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 wchar_t LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 \"\" ; EXPR 5 \"\" FIELD 6 \"\" LEAF_NODE 7 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( dest , data , wcslen ( data ) ) ; EXPR 5 wcsncpy ( dest , data , wcslen ( data ) ) FUNCTION_CALL 6 wcsncpy ( dest , data , wcslen ( data ) ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 wcslen ( data ) FUNCTION_CALL 8 wcslen ( data ) CALLEE 9 wcslen LEAF_NODE 10 wcslen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_14_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_14_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_14_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_14_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_14_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_14_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_14_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_14_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_14_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_14_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_14_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_14_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 94, "project": "cwe119_ast_vul_function_test_adv_0", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; VAR_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ASSIGN 6 dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 ) * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 ) * sizeof ( char ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; VAR_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ASSIGN 6 dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 + 1 ) * sizeof ( char ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51b_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51b_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51b_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51b_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; VAR_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ASSIGN 6 dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 ) * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 ) * sizeof ( char ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; VAR_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ASSIGN 6 dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 ( 10 + 1 ) * sizeof ( char ) LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51b_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51b_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51b_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 95, "project": "cwe119_ast_vul_function_test_adv_65", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_54e_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_54e_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcscpy ( data , source ) ; EXPR 5 wcscpy ( data , source ) FUNCTION_CALL 6 wcscpy ( data , source ) CALLEE 7 wcscpy LEAF_NODE 8 wcscpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_54e_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_54e_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcscpy ( data , source ) ; EXPR 5 wcscpy ( data , source ) FUNCTION_CALL 6 wcscpy ( data , source ) CALLEE 7 wcscpy LEAF_NODE 8 wcscpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 96, "project": "cwe119_ast_vul_function_test_adv_191", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_badSink LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_badSink PARAMETER_LIST 2 ( char * [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * [ ] dataArray TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_snprintf_66_bad LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_66_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * [ 5 ] dataArray ; VAR_DECL 4 char * [ 5 ] dataArray TYPE 5 char * [ 5 ] TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * TYPE_SUFFIX 6 [ 5 ] LEAF_NODE 7 [ FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; dataBuffer = \"\" ; VAR_DECL 4 char [ 100 ] dataBuffer ; dataBuffer = \"\" TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = \"\" ASSIGN 6 dataBuffer = \"\" LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 \"\" FIELD 8 \"\" LEAF_NODE 9 \"\" LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 dataArray [ 2 ] = data ; EXPR 4 dataArray [ 2 ] = data ASSIGN 5 dataArray [ 2 ] = data LVAL 6 dataArray [ 2 ] FIELD 7 dataArray [ 2 ] LEAF_NODE 8 dataArray LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_badSink ( dataArray ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_badSink ( dataArray ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_badSink ( dataArray ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_badSink LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_badSink LEAF_NODE 6 ( ARGUMENT 6 dataArray FIELD 7 dataArray LEAF_NODE 8 dataArray LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_goodG2BSink LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_goodG2BSink PARAMETER_LIST 2 ( char * [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * [ ] dataArray TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * [ 5 ] dataArray ; VAR_DECL 4 char * [ 5 ] dataArray TYPE 5 char * [ 5 ] TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * TYPE_SUFFIX 6 [ 5 ] LEAF_NODE 7 [ FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; dataBuffer = \"\" ; VAR_DECL 4 char [ 100 ] dataBuffer ; dataBuffer = \"\" TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = \"\" ASSIGN 6 dataBuffer = \"\" LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 \"\" FIELD 8 \"\" LEAF_NODE 9 \"\" LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 strcpy ( data , \"fixedstringtest\" ) ; EXPR 4 strcpy ( data , \"fixedstringtest\" ) FUNCTION_CALL 5 strcpy ( data , \"fixedstringtest\" ) CALLEE 6 strcpy LEAF_NODE 7 strcpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 \"fixedstringtest\" FIELD 7 \"fixedstringtest\" LEAF_NODE 8 \"fixedstringtest\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataArray [ 2 ] = data ; EXPR 4 dataArray [ 2 ] = data ASSIGN 5 dataArray [ 2 ] = data LVAL 6 dataArray [ 2 ] FIELD 7 dataArray [ 2 ] LEAF_NODE 8 dataArray LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_goodG2BSink ( dataArray ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_goodG2BSink ( dataArray ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_goodG2BSink ( dataArray ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_goodG2BSink LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 dataArray FIELD 7 dataArray LEAF_NODE 8 dataArray LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_goodB2GSink LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_goodB2GSink PARAMETER_LIST 2 ( char * [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * [ ] dataArray TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodB2G LEAF_NODE 3 goodB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * [ 5 ] dataArray ; VAR_DECL 4 char * [ 5 ] dataArray TYPE 5 char * [ 5 ] TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * TYPE_SUFFIX 6 [ 5 ] LEAF_NODE 7 [ FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; dataBuffer = \"\" ; VAR_DECL 4 char [ 100 ] dataBuffer ; dataBuffer = \"\" TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = \"\" ASSIGN 6 dataBuffer = \"\" LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 \"\" FIELD 8 \"\" LEAF_NODE 9 \"\" LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 dataArray [ 2 ] = data ; EXPR 4 dataArray [ 2 ] = data ASSIGN 5 dataArray [ 2 ] = data LVAL 6 dataArray [ 2 ] FIELD 7 dataArray [ 2 ] LEAF_NODE 8 dataArray LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_goodB2GSink ( dataArray ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_goodB2GSink ( dataArray ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_goodB2GSink ( dataArray ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_goodB2GSink LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_goodB2GSink LEAF_NODE 6 ( ARGUMENT 6 dataArray FIELD 7 dataArray LEAF_NODE 8 dataArray LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_snprintf_66_good LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_66_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodB2G ( ) ; EXPR 4 goodB2G ( ) FUNCTION_CALL 5 goodB2G ( ) CALLEE 6 goodB2G LEAF_NODE 7 goodB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_66_good ( ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_snprintf_66_good ( ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_snprintf_66_good ( ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_snprintf_66_good LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_snprintf_66_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_snprintf_66_bad ( ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_snprintf_66_bad ( ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_snprintf_66_bad ( ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_snprintf_66_bad LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_snprintf_66_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 97, "project": "cwe119_ast_vul_function_test_adv_84", "target": 1}
{"func": "USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_ncat_73 { void badSink ( list < char * > dataList ) { STATEMENTS } ; void bad ( ) { char * data ; list < char * > dataList ; data = NULL ; data = new char [ 50 ] ; data [ 0 ] = '\\0' ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; badSink ( dataList ) ; } void goodG2BSink ( list < char * > dataList ) { STATEMENTS } ; static void goodG2B ( ) { char * data ; list < char * > dataList ; data = NULL ; data = new char [ 100 ] ; data [ 0 ] = '\\0' ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; goodG2BSink ( dataList ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_ncat_73 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( list < char * > dataList ) LEAF_NODE 4 ( PARAMETER_DECL 4 list < char * > dataList TYPE 5 list < char * > TYPE_NAME 6 list < char * > LEAF_NODE 7 list LEAF_NODE 7 < LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataList LEAF_NODE 6 dataList LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 list < char * > dataList ; VAR_DECL 5 list < char * > dataList TYPE 6 list < char * > TYPE_NAME 7 list < char * > LEAF_NODE 8 list LEAF_NODE 8 < LEAF_NODE 8 char LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataList LEAF_NODE 7 dataList LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 char [ 50 ] ; EXPR 5 char [ 50 ] FIELD 6 char [ 50 ] LEAF_NODE 7 char LEAF_NODE 7 [ EXPR 7 50 FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 7 ] LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 0 ] = '\\0' ; EXPR 5 data [ 0 ] = '\\0' ASSIGN 6 data [ 0 ] = '\\0' LVAL 7 data [ 0 ] FIELD 8 data [ 0 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( dataList ) ; EXPR 5 badSink ( dataList ) FUNCTION_CALL 6 badSink ( dataList ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( ARGUMENT 7 dataList FIELD 8 dataList LEAF_NODE 9 dataList LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( list < char * > dataList ) LEAF_NODE 4 ( PARAMETER_DECL 4 list < char * > dataList TYPE 5 list < char * > TYPE_NAME 6 list < char * > LEAF_NODE 7 list LEAF_NODE 7 < LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataList LEAF_NODE 6 dataList LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 list < char * > dataList ; VAR_DECL 5 list < char * > dataList TYPE 6 list < char * > TYPE_NAME 7 list < char * > LEAF_NODE 8 list LEAF_NODE 8 < LEAF_NODE 8 char LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataList LEAF_NODE 7 dataList LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 char [ 100 ] ; EXPR 5 char [ 100 ] FIELD 6 char [ 100 ] LEAF_NODE 7 char LEAF_NODE 7 [ EXPR 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 ] LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 0 ] = '\\0' ; EXPR 5 data [ 0 ] = '\\0' ASSIGN 6 data [ 0 ] = '\\0' LVAL 7 data [ 0 ] FIELD 8 data [ 0 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( dataList ) ; EXPR 5 goodG2BSink ( dataList ) FUNCTION_CALL 6 goodG2BSink ( dataList ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( ARGUMENT 7 dataList FIELD 8 dataList LEAF_NODE 9 dataList LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_ncat_73 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_ncat_73 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 98, "project": "cwe119_ast_vul_function_test_adv_96", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_wchar_t_ncpy_51 { void badSink ( wchar_t * data ) { STATEMENTS } ; void bad ( ) { wchar_t * data ; data = new wchar_t [ 100 ] ; wmemset ( data , L 'A' , 100 - 1 ) ; data [ 100 - 1 ] = L '\\0' ; badSink ( data ) ; } void goodG2BSink ( wchar_t * data ) { STATEMENTS } ; static void goodG2B ( ) { wchar_t * data ; data = new wchar_t [ 100 ] ; wmemset ( data , L 'A' , 50 - 1 ) ; data [ 50 - 1 ] = L '\\0' ; goodG2BSink ( data ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_wchar_t_ncpy_51 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( wchar_t * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 wchar_t [ 100 ] ; EXPR 5 wchar_t [ 100 ] FIELD 6 wchar_t [ 100 ] LEAF_NODE 7 wchar_t LEAF_NODE 7 [ EXPR 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 ] LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'A' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( data ) ; EXPR 5 badSink ( data ) FUNCTION_CALL 6 badSink ( data ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( wchar_t * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 wchar_t [ 100 ] ; EXPR 5 wchar_t [ 100 ] FIELD 6 wchar_t [ 100 ] LEAF_NODE 7 wchar_t LEAF_NODE 7 [ EXPR 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 ] LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'A' LEAF_NODE 4 , LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( data ) ; EXPR 5 goodG2BSink ( data ) FUNCTION_CALL 6 goodG2BSink ( data ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_wchar_t_ncpy_51 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_wchar_t_ncpy_51 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 99, "project": "cwe119_ast_vul_function_test_adv_113", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_65b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_65b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncat ( data , source , 100 ) ; EXPR 5 strncat ( data , source , 100 ) FUNCTION_CALL 6 strncat ( data , source , 100 ) CALLEE 7 strncat LEAF_NODE 8 strncat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_65b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_65b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncat ( data , source , 100 ) ; EXPR 5 strncat ( data , source , 100 ) FUNCTION_CALL 6 strncat ( data , source , 100 ) CALLEE 7 strncat LEAF_NODE 8 strncat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 100, "project": "cwe119_ast_vul_function_test_adv_64", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_declare_cpy_01_bad LEAF_NODE 3 CWE124_Buffer_Underwrite__char_declare_cpy_01_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; VAR_DECL 4 char [ 100 ] dataBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer - 8 ; EXPR 4 data = dataBuffer - 8 ASSIGN 5 data = dataBuffer - 8 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer - 8 FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 7 - FIELD 7 8 LEAF_NODE 8 8 LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcpy ( data , source ) ; EXPR 5 strcpy ( data , source ) FUNCTION_CALL 6 strcpy ( data , source ) CALLEE 7 strcpy LEAF_NODE 8 strcpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; VAR_DECL 4 char [ 100 ] dataBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcpy ( data , source ) ; EXPR 5 strcpy ( data , source ) FUNCTION_CALL 6 strcpy ( data , source ) CALLEE 7 strcpy LEAF_NODE 8 strcpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_declare_cpy_01_good LEAF_NODE 3 CWE124_Buffer_Underwrite__char_declare_cpy_01_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__char_declare_cpy_01_good ( ) ; EXPR 4 CWE124_Buffer_Underwrite__char_declare_cpy_01_good ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__char_declare_cpy_01_good ( ) CALLEE 6 CWE124_Buffer_Underwrite__char_declare_cpy_01_good LEAF_NODE 7 CWE124_Buffer_Underwrite__char_declare_cpy_01_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__char_declare_cpy_01_bad ( ) ; EXPR 4 CWE124_Buffer_Underwrite__char_declare_cpy_01_bad ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__char_declare_cpy_01_bad ( ) CALLEE 6 CWE124_Buffer_Underwrite__char_declare_cpy_01_bad LEAF_NODE 7 CWE124_Buffer_Underwrite__char_declare_cpy_01_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 101, "project": "cwe119_ast_vul_function_test_adv_11", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct _CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType BASE_CLASSES { char * structFirst ; } CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType ; VAR_DECL 2 struct _CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType BASE_CLASSES { char * structFirst ; } CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType TYPE 3 struct _CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType BASE_CLASSES { char * structFirst ; } CLASS_DEF 4 struct _CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType BASE_CLASSES { char * structFirst ; } LEAF_NODE 5 struct CLASS_NAME 5 _CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType LEAF_NODE 6 _CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 char * structFirst ; SIMPLE_DECL 6 char * structFirst ; VAR_DECL 7 char * structFirst TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 structFirst LEAF_NODE 9 structFirst LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67b_badSink PARAMETER_LIST 2 ( CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType myStruct TYPE 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType TYPE_NAME 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType LEAF_NODE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType myStruct ; VAR_DECL 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType myStruct TYPE 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType TYPE_NAME 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType NAME 5 myStruct LEAF_NODE 6 myStruct LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ASSIGN 6 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 50 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 50 * sizeof ( char ) FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 myStruct . structFirst = data ; EXPR 4 myStruct . structFirst = data ASSIGN 5 myStruct . structFirst = data LVAL 6 myStruct . structFirst FIELD 7 myStruct . structFirst LEAF_NODE 8 myStruct LEAF_NODE 8 . LEAF_NODE 8 structFirst ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67b_badSink ( myStruct ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67b_badSink ( myStruct ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67b_badSink ( myStruct ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67b_badSink LEAF_NODE 6 ( ARGUMENT 6 myStruct FIELD 7 myStruct LEAF_NODE 8 myStruct LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67b_goodG2BSink PARAMETER_LIST 2 ( CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType myStruct TYPE 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType TYPE_NAME 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType LEAF_NODE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType myStruct ; VAR_DECL 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType myStruct TYPE 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType TYPE_NAME 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_structType NAME 5 myStruct LEAF_NODE 6 myStruct LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBadBuffer ; dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ASSIGN 6 dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 50 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 50 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 50 * sizeof ( char ) FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataGoodBuffer ; dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 myStruct . structFirst = data ; EXPR 4 myStruct . structFirst = data ASSIGN 5 myStruct . structFirst = data LVAL 6 myStruct . structFirst FIELD 7 myStruct . structFirst LEAF_NODE 8 myStruct LEAF_NODE 8 . LEAF_NODE 8 structFirst ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67b_goodG2BSink ( myStruct ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67b_goodG2BSink ( myStruct ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67b_goodG2BSink ( myStruct ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 myStruct FIELD 7 myStruct LEAF_NODE 8 myStruct LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 102, "project": "cwe119_ast_vul_function_test_adv_151", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__malloc_char_ncpy_51b_badSink LEAF_NODE 3 CWE124_Buffer_Underwrite__malloc_char_ncpy_51b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncpy ( data , source , 100 - 1 ) ; EXPR 5 strncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 strncpy ( data , source , 100 - 1 ) CALLEE 7 strncpy LEAF_NODE 8 strncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 100 - 1 ] = '\\0' ; EXPR 5 data [ 100 - 1 ] = '\\0' ASSIGN 6 data [ 100 - 1 ] = '\\0' LVAL 7 data [ 100 - 1 ] FIELD 8 data [ 100 - 1 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__malloc_char_ncpy_51b_goodG2BSink LEAF_NODE 3 CWE124_Buffer_Underwrite__malloc_char_ncpy_51b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncpy ( data , source , 100 - 1 ) ; EXPR 5 strncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 strncpy ( data , source , 100 - 1 ) CALLEE 7 strncpy LEAF_NODE 8 strncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 100 - 1 ] = '\\0' ; EXPR 5 data [ 100 - 1 ] = '\\0' ASSIGN 6 data [ 100 - 1 ] = '\\0' LVAL 7 data [ 100 - 1 ] FIELD 8 data [ 100 - 1 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 103, "project": "cwe119_ast_vul_function_test_adv_82", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_53 { void badSink_d ( int * data ) { { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; delete [ ] data ; } } void goodG2BSink_d ( int * data ) { { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; delete [ ] data ; } } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_53 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink_d LEAF_NODE 4 badSink_d PARAMETER_LIST 3 ( int * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 int * data TYPE 5 int * TYPE_NAME 6 int LEAF_NODE 7 int POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 int LEAF_NODE 5 source LEAF_NODE 5 [ LEAF_NODE 5 100 LEAF_NODE 5 ] LEAF_NODE 5 = LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 0 LEAF_NODE 5 } LEAF_NODE 5 ; EXPR_STATEMENT 5 memmove ( data , source , 100 * sizeof ( int ) ) ; EXPR 6 memmove ( data , source , 100 * sizeof ( int ) ) FUNCTION_CALL 7 memmove ( data , source , 100 * sizeof ( int ) ) CALLEE 8 memmove LEAF_NODE 9 memmove LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 * sizeof ( int ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( int ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 int FIELD 11 int LEAF_NODE 12 int LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printIntLine ( data [ 0 ] ) ; EXPR 6 printIntLine ( data [ 0 ] ) FUNCTION_CALL 7 printIntLine ( data [ 0 ] ) CALLEE 8 printIntLine LEAF_NODE 9 printIntLine LEAF_NODE 8 ( ARGUMENT 8 data [ 0 ] FIELD 9 data [ 0 ] LEAF_NODE 10 data LEAF_NODE 10 [ EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ] LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink_d LEAF_NODE 4 goodG2BSink_d PARAMETER_LIST 3 ( int * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 int * data TYPE 5 int * TYPE_NAME 6 int LEAF_NODE 7 int POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 int LEAF_NODE 5 source LEAF_NODE 5 [ LEAF_NODE 5 100 LEAF_NODE 5 ] LEAF_NODE 5 = LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 0 LEAF_NODE 5 } LEAF_NODE 5 ; EXPR_STATEMENT 5 memmove ( data , source , 100 * sizeof ( int ) ) ; EXPR 6 memmove ( data , source , 100 * sizeof ( int ) ) FUNCTION_CALL 7 memmove ( data , source , 100 * sizeof ( int ) ) CALLEE 8 memmove LEAF_NODE 9 memmove LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 * sizeof ( int ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( int ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 int FIELD 11 int LEAF_NODE 12 int LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printIntLine ( data [ 0 ] ) ; EXPR 6 printIntLine ( data [ 0 ] ) FUNCTION_CALL 7 printIntLine ( data [ 0 ] ) CALLEE 8 printIntLine LEAF_NODE 9 printIntLine LEAF_NODE 8 ( ARGUMENT 8 data [ 0 ] FIELD 9 data [ 0 ] LEAF_NODE 10 data LEAF_NODE 10 [ EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ] LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 104, "project": "cwe119_ast_vul_function_test_adv_198", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 fgets LEAF_NODE 3 fgets PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 fgets LEAF_NODE 3 fgets PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 fgets LEAF_NODE 3 fgets PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 fgets LEAF_NODE 3 fgets PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 fgets LEAF_NODE 3 fgets PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 fgets LEAF_NODE 3 fgets PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 const int STATIC_CONST_TRUE ; STATIC_CONST_TRUE = 1 ; VAR_DECL 2 const int STATIC_CONST_TRUE ; STATIC_CONST_TRUE = 1 TYPE 3 const int TYPE_NAME 4 const int LEAF_NODE 5 const LEAF_NODE 5 int NAME 3 STATIC_CONST_TRUE LEAF_NODE 4 STATIC_CONST_TRUE LEAF_NODE 3 ; INIT 3 STATIC_CONST_TRUE = 1 ASSIGN 4 STATIC_CONST_TRUE = 1 LVAL 5 STATIC_CONST_TRUE NAME 6 STATIC_CONST_TRUE LEAF_NODE 7 STATIC_CONST_TRUE ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 2 ; SIMPLE_DECL 1 const int STATIC_CONST_FALSE ; STATIC_CONST_FALSE = 0 ; VAR_DECL 2 const int STATIC_CONST_FALSE ; STATIC_CONST_FALSE = 0 TYPE 3 const int TYPE_NAME 4 const int LEAF_NODE 5 const LEAF_NODE 5 int NAME 3 STATIC_CONST_FALSE LEAF_NODE 4 STATIC_CONST_FALSE LEAF_NODE 3 ; INIT 3 STATIC_CONST_FALSE = 0 ASSIGN 4 STATIC_CONST_FALSE = 0 LVAL 5 STATIC_CONST_FALSE NAME 6 STATIC_CONST_FALSE LEAF_NODE 7 STATIC_CONST_FALSE ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE680_Integer_Overflow_to_Buffer_Overflow__new_fgets_04 { void bad ( ) { int data ; data = - 1 ; if ( STATIC_CONST_TRUE ) { { char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; bool stdin ; stdin = false ; if ( fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( \"fgets() failed.\" ) ; } } } { size_t dataBytes , size_t i ; int * intPointer ; dataBytes = data * sizeof ( int ) ; intPointer = ( int * ) new char [ dataBytes ] ; for ( i = 0 ; i < ( size_t ) data ; i ++ ) { intPointer [ i ] = 0 ; } printIntLine ( intPointer [ 0 ] ) ; delete [ ] intPointer ; } } static void goodG2B1 ( ) { int data ; data = - 1 ; if ( STATIC_CONST_FALSE ) { printLine ( \"Benign, fixed string\" ) ; } else { data = 20 ; } { size_t dataBytes , size_t i ; int * intPointer ; dataBytes = data * sizeof ( int ) ; intPointer = ( int * ) new char [ dataBytes ] ; for ( i = 0 ; i < ( size_t ) data ; i ++ ) { intPointer [ i ] = 0 ; } printIntLine ( intPointer [ 0 ] ) ; delete [ ] intPointer ; } } static void goodG2B2 ( ) { int data ; data = - 1 ; if ( STATIC_CONST_TRUE ) { data = 20 ; } { size_t dataBytes , size_t i ; int * intPointer ; dataBytes = data * sizeof ( int ) ; intPointer = ( int * ) new char [ dataBytes ] ; for ( i = 0 ; i < ( size_t ) data ; i ++ ) { intPointer [ i ] = 0 ; } printIntLine ( intPointer [ 0 ] ) ; delete [ ] intPointer ; } } void good ( ) { goodG2B1 ( ) ; goodG2B2 ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE680_Integer_Overflow_to_Buffer_Overflow__new_fgets_04 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int data ; VAR_DECL 5 int data TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = - 1 ; EXPR 5 data = - 1 ASSIGN 6 data = - 1 LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 STATIC_CONST_TRUE EXPR 6 STATIC_CONST_TRUE FIELD 7 STATIC_CONST_TRUE LEAF_NODE 8 STATIC_CONST_TRUE LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SIMPLE_DECL 8 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 9 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 10 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 11 char LEAF_NODE 12 char TYPE_SUFFIX 11 [ CHAR_ARRAY_SIZE ] LEAF_NODE 12 [ FIELD 12 CHAR_ARRAY_SIZE LEAF_NODE 13 CHAR_ARRAY_SIZE LEAF_NODE 12 ] NAME 10 inputBuffer LEAF_NODE 11 inputBuffer LEAF_NODE 10 ; INIT 10 inputBuffer = \"\" ASSIGN 11 inputBuffer = \"\" LVAL 12 inputBuffer NAME 13 inputBuffer LEAF_NODE 14 inputBuffer ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 \"\" FIELD 13 \"\" LEAF_NODE 14 \"\" LEAF_NODE 9 ; SIMPLE_DECL 8 bool stdin ; stdin = false ; VAR_DECL 9 bool stdin ; stdin = false TYPE 10 bool TYPE_NAME 11 bool LEAF_NODE 12 bool NAME 10 stdin LEAF_NODE 11 stdin LEAF_NODE 10 ; INIT 10 stdin = false ASSIGN 11 stdin = false LVAL 12 stdin NAME 13 stdin LEAF_NODE 14 stdin ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 false FIELD 13 false LEAF_NODE 14 false LEAF_NODE 9 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 10 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 11 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 12 fgets LEAF_NODE 13 fgets LEAF_NODE 12 ( ARGUMENT 12 inputBuffer FIELD 13 inputBuffer LEAF_NODE 14 inputBuffer LEAF_NODE 12 , ARGUMENT 12 CHAR_ARRAY_SIZE FIELD 13 CHAR_ARRAY_SIZE LEAF_NODE 14 CHAR_ARRAY_SIZE LEAF_NODE 12 , ARGUMENT 12 stdin FIELD 13 stdin LEAF_NODE 14 stdin LEAF_NODE 12 ) EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 data = atoi ( inputBuffer ) ; EXPR 12 data = atoi ( inputBuffer ) ASSIGN 13 data = atoi ( inputBuffer ) LVAL 14 data FIELD 15 data LEAF_NODE 16 data ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 atoi ( inputBuffer ) FUNCTION_CALL 15 atoi ( inputBuffer ) CALLEE 16 atoi LEAF_NODE 17 atoi LEAF_NODE 16 ( ARGUMENT 16 inputBuffer FIELD 17 inputBuffer LEAF_NODE 18 inputBuffer LEAF_NODE 16 ) LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 8 KEYWORD 9 else LEAF_NODE 10 else STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 printLine ( \"fgets() failed.\" ) ; EXPR 12 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 13 printLine ( \"fgets() failed.\" ) CALLEE 14 printLine LEAF_NODE 15 printLine LEAF_NODE 14 ( ARGUMENT 14 \"fgets() failed.\" FIELD 15 \"fgets() failed.\" LEAF_NODE 16 \"fgets() failed.\" LEAF_NODE 14 ) LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 7 } LEAF_NODE 6 } LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 size_t dataBytes , size_t i ; INIT_DECL_LIST 6 size_t dataBytes , size_t i VAR_DECL 7 size_t dataBytes TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 dataBytes LEAF_NODE 9 dataBytes LEAF_NODE 7 , VAR_DECL 7 size_t i TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 i LEAF_NODE 9 i LEAF_NODE 6 ; SIMPLE_DECL 5 int * intPointer ; VAR_DECL 6 int * intPointer TYPE 7 int * TYPE_NAME 8 int LEAF_NODE 9 int POINTER 8 * LEAF_NODE 9 * NAME 7 intPointer LEAF_NODE 8 intPointer LEAF_NODE 6 ; EXPR_STATEMENT 5 dataBytes = data * sizeof ( int ) ; EXPR 6 dataBytes = data * sizeof ( int ) ASSIGN 7 dataBytes = data * sizeof ( int ) LVAL 8 dataBytes FIELD 9 dataBytes LEAF_NODE 10 dataBytes ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 data * sizeof ( int ) FIELD 9 data LEAF_NODE 10 data LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( int ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 int FIELD 11 int LEAF_NODE 12 int LEAF_NODE 10 ) LEAF_NODE 6 ; LEAF_NODE 5 intPointer LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 int LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 new EXPR_STATEMENT 5 char [ dataBytes ] ; EXPR 6 char [ dataBytes ] FIELD 7 char [ dataBytes ] LEAF_NODE 8 char LEAF_NODE 8 [ EXPR 8 dataBytes FIELD 9 dataBytes LEAF_NODE 10 dataBytes LEAF_NODE 8 ] LEAF_NODE 6 ; ITERATION 5 KEYWORD 6 for LEAF_NODE 7 for LEAF_NODE 6 ( FOR_INIT 6 i = 0 ; EXPR 7 i = 0 ASSIGN 8 i = 0 LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; CONDITION 6 i < ( size_t ) data EXPR 7 i < ( size_t ) data FIELD 8 i LEAF_NODE 9 i REL_OPERATOR 8 < LEAF_NODE 9 < LEAF_NODE 8 ( TYPE_NAME 8 size_t LEAF_NODE 9 size_t LEAF_NODE 8 ) FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ; FOR_EXPR 6 i ++ EXPR 7 i ++ FIELD 8 i ++ LEAF_NODE 9 i LEAF_NODE 9 ++ LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 intPointer [ i ] = 0 ; EXPR 9 intPointer [ i ] = 0 ASSIGN 10 intPointer [ i ] = 0 LVAL 11 intPointer [ i ] FIELD 12 intPointer [ i ] LEAF_NODE 13 intPointer LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; LEAF_NODE 7 } EXPR_STATEMENT 5 printIntLine ( intPointer [ 0 ] ) ; EXPR 6 printIntLine ( intPointer [ 0 ] ) FUNCTION_CALL 7 printIntLine ( intPointer [ 0 ] ) CALLEE 8 printIntLine LEAF_NODE 9 printIntLine LEAF_NODE 8 ( ARGUMENT 8 intPointer [ 0 ] FIELD 9 intPointer [ 0 ] LEAF_NODE 10 intPointer LEAF_NODE 10 [ EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ] LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 intPointer ; EXPR 6 intPointer FIELD 7 intPointer LEAF_NODE 8 intPointer LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B1 LEAF_NODE 4 goodG2B1 PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int data ; VAR_DECL 5 int data TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = - 1 ; EXPR 5 data = - 1 ASSIGN 6 data = - 1 LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 STATIC_CONST_FALSE EXPR 6 STATIC_CONST_FALSE FIELD 7 STATIC_CONST_FALSE LEAF_NODE 8 STATIC_CONST_FALSE LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Benign, fixed string\" ) ; EXPR 8 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 9 printLine ( \"Benign, fixed string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Benign, fixed string\" FIELD 11 \"Benign, fixed string\" LEAF_NODE 12 \"Benign, fixed string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 data = 20 ; EXPR 8 data = 20 ASSIGN 9 data = 20 LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 20 FIELD 11 20 LEAF_NODE 12 20 LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 size_t dataBytes , size_t i ; INIT_DECL_LIST 6 size_t dataBytes , size_t i VAR_DECL 7 size_t dataBytes TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 dataBytes LEAF_NODE 9 dataBytes LEAF_NODE 7 , VAR_DECL 7 size_t i TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 i LEAF_NODE 9 i LEAF_NODE 6 ; SIMPLE_DECL 5 int * intPointer ; VAR_DECL 6 int * intPointer TYPE 7 int * TYPE_NAME 8 int LEAF_NODE 9 int POINTER 8 * LEAF_NODE 9 * NAME 7 intPointer LEAF_NODE 8 intPointer LEAF_NODE 6 ; EXPR_STATEMENT 5 dataBytes = data * sizeof ( int ) ; EXPR 6 dataBytes = data * sizeof ( int ) ASSIGN 7 dataBytes = data * sizeof ( int ) LVAL 8 dataBytes FIELD 9 dataBytes LEAF_NODE 10 dataBytes ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 data * sizeof ( int ) FIELD 9 data LEAF_NODE 10 data LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( int ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 int FIELD 11 int LEAF_NODE 12 int LEAF_NODE 10 ) LEAF_NODE 6 ; LEAF_NODE 5 intPointer LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 int LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 new EXPR_STATEMENT 5 char [ dataBytes ] ; EXPR 6 char [ dataBytes ] FIELD 7 char [ dataBytes ] LEAF_NODE 8 char LEAF_NODE 8 [ EXPR 8 dataBytes FIELD 9 dataBytes LEAF_NODE 10 dataBytes LEAF_NODE 8 ] LEAF_NODE 6 ; ITERATION 5 KEYWORD 6 for LEAF_NODE 7 for LEAF_NODE 6 ( FOR_INIT 6 i = 0 ; EXPR 7 i = 0 ASSIGN 8 i = 0 LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; CONDITION 6 i < ( size_t ) data EXPR 7 i < ( size_t ) data FIELD 8 i LEAF_NODE 9 i REL_OPERATOR 8 < LEAF_NODE 9 < LEAF_NODE 8 ( TYPE_NAME 8 size_t LEAF_NODE 9 size_t LEAF_NODE 8 ) FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ; FOR_EXPR 6 i ++ EXPR 7 i ++ FIELD 8 i ++ LEAF_NODE 9 i LEAF_NODE 9 ++ LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 intPointer [ i ] = 0 ; EXPR 9 intPointer [ i ] = 0 ASSIGN 10 intPointer [ i ] = 0 LVAL 11 intPointer [ i ] FIELD 12 intPointer [ i ] LEAF_NODE 13 intPointer LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; LEAF_NODE 7 } EXPR_STATEMENT 5 printIntLine ( intPointer [ 0 ] ) ; EXPR 6 printIntLine ( intPointer [ 0 ] ) FUNCTION_CALL 7 printIntLine ( intPointer [ 0 ] ) CALLEE 8 printIntLine LEAF_NODE 9 printIntLine LEAF_NODE 8 ( ARGUMENT 8 intPointer [ 0 ] FIELD 9 intPointer [ 0 ] LEAF_NODE 10 intPointer LEAF_NODE 10 [ EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ] LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 intPointer ; EXPR 6 intPointer FIELD 7 intPointer LEAF_NODE 8 intPointer LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B2 LEAF_NODE 4 goodG2B2 PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int data ; VAR_DECL 5 int data TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = - 1 ; EXPR 5 data = - 1 ASSIGN 6 data = - 1 LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 STATIC_CONST_TRUE EXPR 6 STATIC_CONST_TRUE FIELD 7 STATIC_CONST_TRUE LEAF_NODE 8 STATIC_CONST_TRUE LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 data = 20 ; EXPR 8 data = 20 ASSIGN 9 data = 20 LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 20 FIELD 11 20 LEAF_NODE 12 20 LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 size_t dataBytes , size_t i ; INIT_DECL_LIST 6 size_t dataBytes , size_t i VAR_DECL 7 size_t dataBytes TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 dataBytes LEAF_NODE 9 dataBytes LEAF_NODE 7 , VAR_DECL 7 size_t i TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 i LEAF_NODE 9 i LEAF_NODE 6 ; SIMPLE_DECL 5 int * intPointer ; VAR_DECL 6 int * intPointer TYPE 7 int * TYPE_NAME 8 int LEAF_NODE 9 int POINTER 8 * LEAF_NODE 9 * NAME 7 intPointer LEAF_NODE 8 intPointer LEAF_NODE 6 ; EXPR_STATEMENT 5 dataBytes = data * sizeof ( int ) ; EXPR 6 dataBytes = data * sizeof ( int ) ASSIGN 7 dataBytes = data * sizeof ( int ) LVAL 8 dataBytes FIELD 9 dataBytes LEAF_NODE 10 dataBytes ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 data * sizeof ( int ) FIELD 9 data LEAF_NODE 10 data LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( int ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 int FIELD 11 int LEAF_NODE 12 int LEAF_NODE 10 ) LEAF_NODE 6 ; LEAF_NODE 5 intPointer LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 int LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 new EXPR_STATEMENT 5 char [ dataBytes ] ; EXPR 6 char [ dataBytes ] FIELD 7 char [ dataBytes ] LEAF_NODE 8 char LEAF_NODE 8 [ EXPR 8 dataBytes FIELD 9 dataBytes LEAF_NODE 10 dataBytes LEAF_NODE 8 ] LEAF_NODE 6 ; ITERATION 5 KEYWORD 6 for LEAF_NODE 7 for LEAF_NODE 6 ( FOR_INIT 6 i = 0 ; EXPR 7 i = 0 ASSIGN 8 i = 0 LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; CONDITION 6 i < ( size_t ) data EXPR 7 i < ( size_t ) data FIELD 8 i LEAF_NODE 9 i REL_OPERATOR 8 < LEAF_NODE 9 < LEAF_NODE 8 ( TYPE_NAME 8 size_t LEAF_NODE 9 size_t LEAF_NODE 8 ) FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ; FOR_EXPR 6 i ++ EXPR 7 i ++ FIELD 8 i ++ LEAF_NODE 9 i LEAF_NODE 9 ++ LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 intPointer [ i ] = 0 ; EXPR 9 intPointer [ i ] = 0 ASSIGN 10 intPointer [ i ] = 0 LVAL 11 intPointer [ i ] FIELD 12 intPointer [ i ] LEAF_NODE 13 intPointer LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; LEAF_NODE 7 } EXPR_STATEMENT 5 printIntLine ( intPointer [ 0 ] ) ; EXPR 6 printIntLine ( intPointer [ 0 ] ) FUNCTION_CALL 7 printIntLine ( intPointer [ 0 ] ) CALLEE 8 printIntLine LEAF_NODE 9 printIntLine LEAF_NODE 8 ( ARGUMENT 8 intPointer [ 0 ] FIELD 9 intPointer [ 0 ] LEAF_NODE 10 intPointer LEAF_NODE 10 [ EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ] LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 intPointer ; EXPR 6 intPointer FIELD 7 intPointer LEAF_NODE 8 intPointer LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B1 ( ) ; EXPR 5 goodG2B1 ( ) FUNCTION_CALL 6 goodG2B1 ( ) CALLEE 7 goodG2B1 LEAF_NODE 8 goodG2B1 LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2B2 ( ) ; EXPR 5 goodG2B2 ( ) FUNCTION_CALL 6 goodG2B2 ( ) CALLEE 7 goodG2B2 LEAF_NODE 8 goodG2B2 LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE680_Integer_Overflow_to_Buffer_Overflow__new_fgets_04 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE680_Integer_Overflow_to_Buffer_Overflow__new_fgets_04 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 105, "project": "cwe119_ast_vul_function_test_adv_77", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_51b_badSink LEAF_NODE 3 CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_51b_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcscpy ( data , source ) ; EXPR 5 wcscpy ( data , source ) FUNCTION_CALL 6 wcscpy ( data , source ) CALLEE 7 wcscpy LEAF_NODE 8 wcscpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_51b_goodG2BSink LEAF_NODE 3 CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_51b_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcscpy ( data , source ) ; EXPR 5 wcscpy ( data , source ) FUNCTION_CALL 6 wcscpy ( data , source ) CALLEE 7 wcscpy LEAF_NODE 8 wcscpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 106, "project": "cwe119_ast_vul_function_test_adv_85", "target": 1}
{"func": "SIMPLE_DECL 1 char * CWE124_Buffer_Underwrite__new_char_loop_68_badData ; VAR_DECL 2 char * CWE124_Buffer_Underwrite__new_char_loop_68_badData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE124_Buffer_Underwrite__new_char_loop_68_badData LEAF_NODE 4 CWE124_Buffer_Underwrite__new_char_loop_68_badData LEAF_NODE 2 ; SIMPLE_DECL 1 char * CWE124_Buffer_Underwrite__new_char_loop_68_goodG2BData ; VAR_DECL 2 char * CWE124_Buffer_Underwrite__new_char_loop_68_goodG2BData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE124_Buffer_Underwrite__new_char_loop_68_goodG2BData LEAF_NODE 4 CWE124_Buffer_Underwrite__new_char_loop_68_goodG2BData LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE124_Buffer_Underwrite__new_char_loop_68 { void badSink ( ) { STATEMENTS } ; void bad ( ) { char * data ; data = NULL ; { char * dataBuffer = new char [ 100 ] ; memset ( dataBuffer , 'A' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = '\\0' ; data = dataBuffer - 8 ; } CWE124_Buffer_Underwrite__new_char_loop_68_badData = data ; badSink ( ) ; } void goodG2BSink ( ) { STATEMENTS } ; static void goodG2B ( ) { char * data ; data = NULL ; { char * dataBuffer = new char [ 100 ] ; memset ( dataBuffer , 'A' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = '\\0' ; data = dataBuffer ; } CWE124_Buffer_Underwrite__new_char_loop_68_goodG2BData = data ; goodG2BSink ( ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE124_Buffer_Underwrite__new_char_loop_68 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 dataBuffer LEAF_NODE 5 = LEAF_NODE 5 new EXPR_STATEMENT 5 char [ 100 ] ; EXPR 6 char [ 100 ] FIELD 7 char [ 100 ] LEAF_NODE 8 char LEAF_NODE 8 [ EXPR 8 100 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 8 ] LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 6 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 7 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 dataBuffer FIELD 9 dataBuffer LEAF_NODE 10 dataBuffer LEAF_NODE 8 , ARGUMENT 8 'A' FIELD 9 'A' LEAF_NODE 10 'A' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 6 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 7 dataBuffer [ 100 - 1 ] = '\\0' LVAL 8 dataBuffer [ 100 - 1 ] FIELD 9 dataBuffer [ 100 - 1 ] LEAF_NODE 10 dataBuffer LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 data = dataBuffer - 8 ; EXPR 6 data = dataBuffer - 8 ASSIGN 7 data = dataBuffer - 8 LVAL 8 data FIELD 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataBuffer - 8 FIELD 9 dataBuffer LEAF_NODE 10 dataBuffer LEAF_NODE 9 - FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 6 ; LEAF_NODE 4 } EXPR_STATEMENT 4 CWE124_Buffer_Underwrite__new_char_loop_68_badData = data ; EXPR 5 CWE124_Buffer_Underwrite__new_char_loop_68_badData = data ASSIGN 6 CWE124_Buffer_Underwrite__new_char_loop_68_badData = data LVAL 7 CWE124_Buffer_Underwrite__new_char_loop_68_badData FIELD 8 CWE124_Buffer_Underwrite__new_char_loop_68_badData LEAF_NODE 9 CWE124_Buffer_Underwrite__new_char_loop_68_badData ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( ) ; EXPR 5 badSink ( ) FUNCTION_CALL 6 badSink ( ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 dataBuffer LEAF_NODE 5 = LEAF_NODE 5 new EXPR_STATEMENT 5 char [ 100 ] ; EXPR 6 char [ 100 ] FIELD 7 char [ 100 ] LEAF_NODE 8 char LEAF_NODE 8 [ EXPR 8 100 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 8 ] LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 6 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 7 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 dataBuffer FIELD 9 dataBuffer LEAF_NODE 10 dataBuffer LEAF_NODE 8 , ARGUMENT 8 'A' FIELD 9 'A' LEAF_NODE 10 'A' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 6 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 7 dataBuffer [ 100 - 1 ] = '\\0' LVAL 8 dataBuffer [ 100 - 1 ] FIELD 9 dataBuffer [ 100 - 1 ] LEAF_NODE 10 dataBuffer LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 data = dataBuffer ; EXPR 6 data = dataBuffer ASSIGN 7 data = dataBuffer LVAL 8 data FIELD 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataBuffer FIELD 9 dataBuffer LEAF_NODE 10 dataBuffer LEAF_NODE 6 ; LEAF_NODE 4 } EXPR_STATEMENT 4 CWE124_Buffer_Underwrite__new_char_loop_68_goodG2BData = data ; EXPR 5 CWE124_Buffer_Underwrite__new_char_loop_68_goodG2BData = data ASSIGN 6 CWE124_Buffer_Underwrite__new_char_loop_68_goodG2BData = data LVAL 7 CWE124_Buffer_Underwrite__new_char_loop_68_goodG2BData FIELD 8 CWE124_Buffer_Underwrite__new_char_loop_68_goodG2BData LEAF_NODE 9 CWE124_Buffer_Underwrite__new_char_loop_68_goodG2BData ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( ) ; EXPR 5 goodG2BSink ( ) FUNCTION_CALL 6 goodG2BSink ( ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE124_Buffer_Underwrite__new_char_loop_68 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE124_Buffer_Underwrite__new_char_loop_68 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 107, "project": "cwe119_ast_vul_function_test_adv_68", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct _CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType BASE_CLASSES { char * structFirst ; } CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType ; VAR_DECL 2 struct _CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType BASE_CLASSES { char * structFirst ; } CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType TYPE 3 struct _CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType BASE_CLASSES { char * structFirst ; } CLASS_DEF 4 struct _CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType BASE_CLASSES { char * structFirst ; } LEAF_NODE 5 struct CLASS_NAME 5 _CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType LEAF_NODE 6 _CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 char * structFirst ; SIMPLE_DECL 6 char * structFirst ; VAR_DECL 7 char * structFirst TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 structFirst LEAF_NODE 9 structFirst LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType LEAF_NODE 4 CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__malloc_char_ncpy_67b_badSink LEAF_NODE 3 CWE124_Buffer_Underwrite__malloc_char_ncpy_67b_badSink PARAMETER_LIST 2 ( CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType myStruct TYPE 4 CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType TYPE_NAME 5 CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType LEAF_NODE 6 CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = myStruct . structFirst ; VAR_DECL 4 char * data ; data = myStruct . structFirst TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncpy ( data , source , 100 - 1 ) ; EXPR 5 strncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 strncpy ( data , source , 100 - 1 ) CALLEE 7 strncpy LEAF_NODE 8 strncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 100 - 1 ] = '\\0' ; EXPR 5 data [ 100 - 1 ] = '\\0' ASSIGN 6 data [ 100 - 1 ] = '\\0' LVAL 7 data [ 100 - 1 ] FIELD 8 data [ 100 - 1 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__malloc_char_ncpy_67b_goodG2BSink LEAF_NODE 3 CWE124_Buffer_Underwrite__malloc_char_ncpy_67b_goodG2BSink PARAMETER_LIST 2 ( CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType myStruct TYPE 4 CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType TYPE_NAME 5 CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType LEAF_NODE 6 CWE124_Buffer_Underwrite__malloc_char_ncpy_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = myStruct . structFirst ; VAR_DECL 4 char * data ; data = myStruct . structFirst TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncpy ( data , source , 100 - 1 ) ; EXPR 5 strncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 strncpy ( data , source , 100 - 1 ) CALLEE 7 strncpy LEAF_NODE 8 strncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 100 - 1 ] = '\\0' ; EXPR 5 data [ 100 - 1 ] = '\\0' ASSIGN 6 data [ 100 - 1 ] = '\\0' LVAL 7 data [ 100 - 1 ] FIELD 8 data [ 100 - 1 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 108, "project": "cwe119_ast_vul_function_test_adv_147", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54c_badSink LEAF_NODE 3 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54c_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54b_badSink LEAF_NODE 3 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54b_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54c_badSink ( data ) ; EXPR 4 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54c_badSink ( data ) FUNCTION_CALL 5 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54c_badSink ( data ) CALLEE 6 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54c_badSink LEAF_NODE 7 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54c_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54c_goodG2BSink LEAF_NODE 3 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54c_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54b_goodG2BSink LEAF_NODE 3 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54b_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54c_goodG2BSink ( data ) ; EXPR 4 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54c_goodG2BSink ( data ) FUNCTION_CALL 5 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54c_goodG2BSink ( data ) CALLEE 6 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54c_goodG2BSink LEAF_NODE 7 CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54c_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 109, "project": "cwe119_ast_vul_function_test_adv_164", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 globalReturnsFalse LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 globalReturnsFalse PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 globalReturnsTrue LEAF_NODE 3 globalReturnsTrue PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_alloca_ncpy_11_bad LEAF_NODE 3 CWE124_Buffer_Underwrite__char_alloca_ncpy_11_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsTrue ( ) EXPR 5 globalReturnsTrue ( ) FUNCTION_CALL 6 globalReturnsTrue ( ) CALLEE 7 globalReturnsTrue LEAF_NODE 8 globalReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBuffer - 8 ; EXPR 7 data = dataBuffer - 8 ASSIGN 8 data = dataBuffer - 8 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer - 8 FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 10 - FIELD 10 8 LEAF_NODE 11 8 LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncpy ( data , source , 100 - 1 ) ; EXPR 5 strncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 strncpy ( data , source , 100 - 1 ) CALLEE 7 strncpy LEAF_NODE 8 strncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 100 - 1 ] = '\\0' ; EXPR 5 data [ 100 - 1 ] = '\\0' ASSIGN 6 data [ 100 - 1 ] = '\\0' LVAL 7 data [ 100 - 1 ] FIELD 8 data [ 100 - 1 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsFalse ( ) EXPR 5 globalReturnsFalse ( ) FUNCTION_CALL 6 globalReturnsFalse ( ) CALLEE 7 globalReturnsFalse LEAF_NODE 8 globalReturnsFalse LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBuffer ; EXPR 7 data = dataBuffer ASSIGN 8 data = dataBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncpy ( data , source , 100 - 1 ) ; EXPR 5 strncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 strncpy ( data , source , 100 - 1 ) CALLEE 7 strncpy LEAF_NODE 8 strncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 100 - 1 ] = '\\0' ; EXPR 5 data [ 100 - 1 ] = '\\0' ASSIGN 6 data [ 100 - 1 ] = '\\0' LVAL 7 data [ 100 - 1 ] FIELD 8 data [ 100 - 1 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsTrue ( ) EXPR 5 globalReturnsTrue ( ) FUNCTION_CALL 6 globalReturnsTrue ( ) CALLEE 7 globalReturnsTrue LEAF_NODE 8 globalReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBuffer ; EXPR 7 data = dataBuffer ASSIGN 8 data = dataBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncpy ( data , source , 100 - 1 ) ; EXPR 5 strncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 strncpy ( data , source , 100 - 1 ) CALLEE 7 strncpy LEAF_NODE 8 strncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 100 - 1 ] = '\\0' ; EXPR 5 data [ 100 - 1 ] = '\\0' ASSIGN 6 data [ 100 - 1 ] = '\\0' LVAL 7 data [ 100 - 1 ] FIELD 8 data [ 100 - 1 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_alloca_ncpy_11_good LEAF_NODE 3 CWE124_Buffer_Underwrite__char_alloca_ncpy_11_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__char_alloca_ncpy_11_good ( ) ; EXPR 4 CWE124_Buffer_Underwrite__char_alloca_ncpy_11_good ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__char_alloca_ncpy_11_good ( ) CALLEE 6 CWE124_Buffer_Underwrite__char_alloca_ncpy_11_good LEAF_NODE 7 CWE124_Buffer_Underwrite__char_alloca_ncpy_11_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__char_alloca_ncpy_11_bad ( ) ; EXPR 4 CWE124_Buffer_Underwrite__char_alloca_ncpy_11_bad ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__char_alloca_ncpy_11_bad ( ) CALLEE 6 CWE124_Buffer_Underwrite__char_alloca_ncpy_11_bad LEAF_NODE 7 CWE124_Buffer_Underwrite__char_alloca_ncpy_11_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 110, "project": "cwe119_ast_vul_function_test_adv_29", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_51b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_51b_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( data , source , 100 - 1 ) ; EXPR 5 wcsncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 wcsncpy ( data , source , 100 - 1 ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_51b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_51b_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( data , source , 100 - 1 ) ; EXPR 5 wcsncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 wcsncpy ( data , source , 100 - 1 ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 111, "project": "cwe119_ast_vul_function_test_adv_193", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 char * CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_badData ; VAR_DECL 2 char * CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_badData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_badData LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_badData LEAF_NODE 2 ; SIMPLE_DECL 1 char * CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_goodG2BData ; VAR_DECL 2 char * CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_goodG2BData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_goodG2BData LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_goodG2BData LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68b_badSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_badData ; VAR_DECL 4 char * data ; data = CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_badData TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_badData ASSIGN 6 data = CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_badData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_badData FIELD 8 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_badData LEAF_NODE 9 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_badData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 SNPRINTF ( data , 100 , \"%s\" , source ) ; EXPR 5 SNPRINTF ( data , 100 , \"%s\" , source ) FUNCTION_CALL 6 SNPRINTF ( data , 100 , \"%s\" , source ) CALLEE 7 SNPRINTF LEAF_NODE 8 SNPRINTF LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 , ARGUMENT 7 \"%s\" FIELD 8 \"%s\" LEAF_NODE 9 \"%s\" LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68b_goodG2BSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_goodG2BData ; VAR_DECL 4 char * data ; data = CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_goodG2BData TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_goodG2BData ASSIGN 6 data = CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_goodG2BData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_goodG2BData FIELD 8 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_goodG2BData LEAF_NODE 9 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68_goodG2BData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 SNPRINTF ( data , 100 , \"%s\" , source ) ; EXPR 5 SNPRINTF ( data , 100 , \"%s\" , source ) FUNCTION_CALL 6 SNPRINTF ( data , 100 , \"%s\" , source ) CALLEE 7 SNPRINTF LEAF_NODE 8 SNPRINTF LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 , ARGUMENT 7 \"%s\" FIELD 8 \"%s\" LEAF_NODE 9 \"%s\" LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 112, "project": "cwe119_ast_vul_function_test_adv_178", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fgets_61 { int badSource ( int data ) { STATEMENTS } ; void bad ( ) { int data ; data = - 1 ; data = badSource ( data ) ; { int i ; int * buffer = new int [ 10 ] ; for ( i = 0 ; i < 10 ; i ++ ) { buffer [ i ] = 0 ; } if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( \"ERROR: Array index is negative.\" ) ; } delete [ ] buffer ; } } int goodG2BSource ( int data ) { STATEMENTS } ; static void goodG2B ( ) { int data ; data = - 1 ; data = goodG2BSource ( data ) ; { int i ; int * buffer = new int [ 10 ] ; for ( i = 0 ; i < 10 ; i ++ ) { buffer [ i ] = 0 ; } if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( \"ERROR: Array index is negative.\" ) ; } delete [ ] buffer ; } } int goodB2GSource ( int data ) { STATEMENTS } ; static void goodB2G ( ) { int data ; data = - 1 ; data = goodB2GSource ( data ) ; { int i ; int * buffer = new int [ 10 ] ; for ( i = 0 ; i < 10 ; i ++ ) { buffer [ i ] = 0 ; } if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( \"ERROR: Array index is out-of-bounds\" ) ; } delete [ ] buffer ; } } void good ( ) { goodG2B ( ) ; goodB2G ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fgets_61 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int FUNCTION_NAME 3 badSource LEAF_NODE 4 badSource PARAMETER_LIST 3 ( int data ) LEAF_NODE 4 ( PARAMETER_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int data ; VAR_DECL 5 int data TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = - 1 ; EXPR 5 data = - 1 ASSIGN 6 data = - 1 LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 5 ; EXPR_STATEMENT 4 data = badSource ( data ) ; EXPR 5 data = badSource ( data ) ASSIGN 6 data = badSource ( data ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 badSource ( data ) FUNCTION_CALL 8 badSource ( data ) CALLEE 9 badSource LEAF_NODE 10 badSource LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 int i ; VAR_DECL 6 int i TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 i LEAF_NODE 8 i LEAF_NODE 6 ; LEAF_NODE 5 int LEAF_NODE 5 * LEAF_NODE 5 buffer LEAF_NODE 5 = LEAF_NODE 5 new EXPR_STATEMENT 5 int [ 10 ] ; EXPR 6 int [ 10 ] FIELD 7 int [ 10 ] LEAF_NODE 8 int LEAF_NODE 8 [ EXPR 8 10 FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 8 ] LEAF_NODE 6 ; ITERATION 5 KEYWORD 6 for LEAF_NODE 7 for LEAF_NODE 6 ( FOR_INIT 6 i = 0 ; EXPR 7 i = 0 ASSIGN 8 i = 0 LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; CONDITION 6 i < 10 EXPR 7 i < 10 FIELD 8 i LEAF_NODE 9 i REL_OPERATOR 8 < LEAF_NODE 9 < FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 6 ; FOR_EXPR 6 i ++ EXPR 7 i ++ FIELD 8 i ++ LEAF_NODE 9 i LEAF_NODE 9 ++ LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 buffer [ i ] = 0 ; EXPR 9 buffer [ i ] = 0 ASSIGN 10 buffer [ i ] = 0 LVAL 11 buffer [ i ] FIELD 12 buffer [ i ] LEAF_NODE 13 buffer LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 data >= 0 EXPR 7 data >= 0 FIELD 8 data LEAF_NODE 9 data REL_OPERATOR 8 >= LEAF_NODE 9 >= FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 buffer [ data ] = 1 ; EXPR 9 buffer [ data ] = 1 ASSIGN 10 buffer [ data ] = 1 LVAL 11 buffer [ data ] FIELD 12 buffer [ data ] LEAF_NODE 13 buffer LEAF_NODE 13 [ EXPR 13 data FIELD 14 data LEAF_NODE 15 data LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; ITERATION 8 KEYWORD 9 for LEAF_NODE 10 for LEAF_NODE 9 ( FOR_INIT 9 i = 0 ; EXPR 10 i = 0 ASSIGN 11 i = 0 LVAL 12 i FIELD 13 i LEAF_NODE 14 i ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; CONDITION 9 i < 10 EXPR 10 i < 10 FIELD 11 i LEAF_NODE 12 i REL_OPERATOR 11 < LEAF_NODE 12 < FIELD 11 10 LEAF_NODE 12 10 LEAF_NODE 9 ; FOR_EXPR 9 i ++ EXPR 10 i ++ FIELD 11 i ++ LEAF_NODE 12 i LEAF_NODE 12 ++ LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 printIntLine ( buffer [ i ] ) ; EXPR 12 printIntLine ( buffer [ i ] ) FUNCTION_CALL 13 printIntLine ( buffer [ i ] ) CALLEE 14 printIntLine LEAF_NODE 15 printIntLine LEAF_NODE 14 ( ARGUMENT 14 buffer [ i ] FIELD 15 buffer [ i ] LEAF_NODE 16 buffer LEAF_NODE 16 [ EXPR 16 i FIELD 17 i LEAF_NODE 18 i LEAF_NODE 16 ] LEAF_NODE 14 ) LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 7 } SELECTION 5 KEYWORD 6 else LEAF_NODE 7 else STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 printLine ( \"ERROR: Array index is negative.\" ) ; EXPR 9 printLine ( \"ERROR: Array index is negative.\" ) FUNCTION_CALL 10 printLine ( \"ERROR: Array index is negative.\" ) CALLEE 11 printLine LEAF_NODE 12 printLine LEAF_NODE 11 ( ARGUMENT 11 \"ERROR: Array index is negative.\" FIELD 12 \"ERROR: Array index is negative.\" LEAF_NODE 13 \"ERROR: Array index is negative.\" LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 7 } LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 buffer ; EXPR 6 buffer FIELD 7 buffer LEAF_NODE 8 buffer LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int FUNCTION_NAME 3 goodG2BSource LEAF_NODE 4 goodG2BSource PARAMETER_LIST 3 ( int data ) LEAF_NODE 4 ( PARAMETER_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int data ; VAR_DECL 5 int data TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = - 1 ; EXPR 5 data = - 1 ASSIGN 6 data = - 1 LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 5 ; EXPR_STATEMENT 4 data = goodG2BSource ( data ) ; EXPR 5 data = goodG2BSource ( data ) ASSIGN 6 data = goodG2BSource ( data ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 goodG2BSource ( data ) FUNCTION_CALL 8 goodG2BSource ( data ) CALLEE 9 goodG2BSource LEAF_NODE 10 goodG2BSource LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 int i ; VAR_DECL 6 int i TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 i LEAF_NODE 8 i LEAF_NODE 6 ; LEAF_NODE 5 int LEAF_NODE 5 * LEAF_NODE 5 buffer LEAF_NODE 5 = LEAF_NODE 5 new EXPR_STATEMENT 5 int [ 10 ] ; EXPR 6 int [ 10 ] FIELD 7 int [ 10 ] LEAF_NODE 8 int LEAF_NODE 8 [ EXPR 8 10 FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 8 ] LEAF_NODE 6 ; ITERATION 5 KEYWORD 6 for LEAF_NODE 7 for LEAF_NODE 6 ( FOR_INIT 6 i = 0 ; EXPR 7 i = 0 ASSIGN 8 i = 0 LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; CONDITION 6 i < 10 EXPR 7 i < 10 FIELD 8 i LEAF_NODE 9 i REL_OPERATOR 8 < LEAF_NODE 9 < FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 6 ; FOR_EXPR 6 i ++ EXPR 7 i ++ FIELD 8 i ++ LEAF_NODE 9 i LEAF_NODE 9 ++ LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 buffer [ i ] = 0 ; EXPR 9 buffer [ i ] = 0 ASSIGN 10 buffer [ i ] = 0 LVAL 11 buffer [ i ] FIELD 12 buffer [ i ] LEAF_NODE 13 buffer LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 data >= 0 EXPR 7 data >= 0 FIELD 8 data LEAF_NODE 9 data REL_OPERATOR 8 >= LEAF_NODE 9 >= FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 buffer [ data ] = 1 ; EXPR 9 buffer [ data ] = 1 ASSIGN 10 buffer [ data ] = 1 LVAL 11 buffer [ data ] FIELD 12 buffer [ data ] LEAF_NODE 13 buffer LEAF_NODE 13 [ EXPR 13 data FIELD 14 data LEAF_NODE 15 data LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; ITERATION 8 KEYWORD 9 for LEAF_NODE 10 for LEAF_NODE 9 ( FOR_INIT 9 i = 0 ; EXPR 10 i = 0 ASSIGN 11 i = 0 LVAL 12 i FIELD 13 i LEAF_NODE 14 i ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; CONDITION 9 i < 10 EXPR 10 i < 10 FIELD 11 i LEAF_NODE 12 i REL_OPERATOR 11 < LEAF_NODE 12 < FIELD 11 10 LEAF_NODE 12 10 LEAF_NODE 9 ; FOR_EXPR 9 i ++ EXPR 10 i ++ FIELD 11 i ++ LEAF_NODE 12 i LEAF_NODE 12 ++ LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 printIntLine ( buffer [ i ] ) ; EXPR 12 printIntLine ( buffer [ i ] ) FUNCTION_CALL 13 printIntLine ( buffer [ i ] ) CALLEE 14 printIntLine LEAF_NODE 15 printIntLine LEAF_NODE 14 ( ARGUMENT 14 buffer [ i ] FIELD 15 buffer [ i ] LEAF_NODE 16 buffer LEAF_NODE 16 [ EXPR 16 i FIELD 17 i LEAF_NODE 18 i LEAF_NODE 16 ] LEAF_NODE 14 ) LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 7 } SELECTION 5 KEYWORD 6 else LEAF_NODE 7 else STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 printLine ( \"ERROR: Array index is negative.\" ) ; EXPR 9 printLine ( \"ERROR: Array index is negative.\" ) FUNCTION_CALL 10 printLine ( \"ERROR: Array index is negative.\" ) CALLEE 11 printLine LEAF_NODE 12 printLine LEAF_NODE 11 ( ARGUMENT 11 \"ERROR: Array index is negative.\" FIELD 12 \"ERROR: Array index is negative.\" LEAF_NODE 13 \"ERROR: Array index is negative.\" LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 7 } LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 buffer ; EXPR 6 buffer FIELD 7 buffer LEAF_NODE 8 buffer LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int FUNCTION_NAME 3 goodB2GSource LEAF_NODE 4 goodB2GSource PARAMETER_LIST 3 ( int data ) LEAF_NODE 4 ( PARAMETER_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodB2G LEAF_NODE 4 goodB2G PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int data ; VAR_DECL 5 int data TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = - 1 ; EXPR 5 data = - 1 ASSIGN 6 data = - 1 LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 5 ; EXPR_STATEMENT 4 data = goodB2GSource ( data ) ; EXPR 5 data = goodB2GSource ( data ) ASSIGN 6 data = goodB2GSource ( data ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 goodB2GSource ( data ) FUNCTION_CALL 8 goodB2GSource ( data ) CALLEE 9 goodB2GSource LEAF_NODE 10 goodB2GSource LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 int i ; VAR_DECL 6 int i TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 i LEAF_NODE 8 i LEAF_NODE 6 ; LEAF_NODE 5 int LEAF_NODE 5 * LEAF_NODE 5 buffer LEAF_NODE 5 = LEAF_NODE 5 new EXPR_STATEMENT 5 int [ 10 ] ; EXPR 6 int [ 10 ] FIELD 7 int [ 10 ] LEAF_NODE 8 int LEAF_NODE 8 [ EXPR 8 10 FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 8 ] LEAF_NODE 6 ; ITERATION 5 KEYWORD 6 for LEAF_NODE 7 for LEAF_NODE 6 ( FOR_INIT 6 i = 0 ; EXPR 7 i = 0 ASSIGN 8 i = 0 LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; CONDITION 6 i < 10 EXPR 7 i < 10 FIELD 8 i LEAF_NODE 9 i REL_OPERATOR 8 < LEAF_NODE 9 < FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 6 ; FOR_EXPR 6 i ++ EXPR 7 i ++ FIELD 8 i ++ LEAF_NODE 9 i LEAF_NODE 9 ++ LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 buffer [ i ] = 0 ; EXPR 9 buffer [ i ] = 0 ASSIGN 10 buffer [ i ] = 0 LVAL 11 buffer [ i ] FIELD 12 buffer [ i ] LEAF_NODE 13 buffer LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 data >= 0 && data < ( 10 ) EXPR 7 data >= 0 && data < ( 10 ) AND 8 data >= 0 && data < ( 10 ) EXPR 9 data >= 0 FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 >= LEAF_NODE 11 >= FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 && EXPR 9 data < ( 10 ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 < LEAF_NODE 11 < LEAF_NODE 10 ( FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 ) LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 buffer [ data ] = 1 ; EXPR 9 buffer [ data ] = 1 ASSIGN 10 buffer [ data ] = 1 LVAL 11 buffer [ data ] FIELD 12 buffer [ data ] LEAF_NODE 13 buffer LEAF_NODE 13 [ EXPR 13 data FIELD 14 data LEAF_NODE 15 data LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; ITERATION 8 KEYWORD 9 for LEAF_NODE 10 for LEAF_NODE 9 ( FOR_INIT 9 i = 0 ; EXPR 10 i = 0 ASSIGN 11 i = 0 LVAL 12 i FIELD 13 i LEAF_NODE 14 i ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; CONDITION 9 i < 10 EXPR 10 i < 10 FIELD 11 i LEAF_NODE 12 i REL_OPERATOR 11 < LEAF_NODE 12 < FIELD 11 10 LEAF_NODE 12 10 LEAF_NODE 9 ; FOR_EXPR 9 i ++ EXPR 10 i ++ FIELD 11 i ++ LEAF_NODE 12 i LEAF_NODE 12 ++ LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 printIntLine ( buffer [ i ] ) ; EXPR 12 printIntLine ( buffer [ i ] ) FUNCTION_CALL 13 printIntLine ( buffer [ i ] ) CALLEE 14 printIntLine LEAF_NODE 15 printIntLine LEAF_NODE 14 ( ARGUMENT 14 buffer [ i ] FIELD 15 buffer [ i ] LEAF_NODE 16 buffer LEAF_NODE 16 [ EXPR 16 i FIELD 17 i LEAF_NODE 18 i LEAF_NODE 16 ] LEAF_NODE 14 ) LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 7 } SELECTION 5 KEYWORD 6 else LEAF_NODE 7 else STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 printLine ( \"ERROR: Array index is out-of-bounds\" ) ; EXPR 9 printLine ( \"ERROR: Array index is out-of-bounds\" ) FUNCTION_CALL 10 printLine ( \"ERROR: Array index is out-of-bounds\" ) CALLEE 11 printLine LEAF_NODE 12 printLine LEAF_NODE 11 ( ARGUMENT 11 \"ERROR: Array index is out-of-bounds\" FIELD 12 \"ERROR: Array index is out-of-bounds\" LEAF_NODE 13 \"ERROR: Array index is out-of-bounds\" LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 7 } LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 buffer ; EXPR 6 buffer FIELD 7 buffer LEAF_NODE 8 buffer LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 goodB2G ( ) ; EXPR 5 goodB2G ( ) FUNCTION_CALL 6 goodB2G ( ) CALLEE 7 goodB2G LEAF_NODE 8 goodB2G LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fgets_61 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fgets_61 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 113, "project": "cwe119_ast_vul_function_test_adv_165", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE124_Buffer_Underwrite__new_char_loop_73 { void badSink ( list < char * > dataList ) { char * data ; data = dataList . back ( ) ; { size_t i ; char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\\0' ; printLine ( data ) ; } } void goodG2BSink ( list < char * > dataList ) { char * data ; data = dataList . back ( ) ; { size_t i ; char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\\0' ; printLine ( data ) ; } } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE124_Buffer_Underwrite__new_char_loop_73 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( list < char * > dataList ) LEAF_NODE 4 ( PARAMETER_DECL 4 list < char * > dataList TYPE 5 list < char * > TYPE_NAME 6 list < char * > LEAF_NODE 7 list LEAF_NODE 7 < LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataList LEAF_NODE 6 dataList LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = dataList . back ( ) ; VAR_DECL 5 char * data ; data = dataList . back ( ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataList . back ( ) ASSIGN 7 data = dataList . back ( ) LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataList . back ( ) FUNCTION_CALL 9 dataList . back ( ) CALLEE 10 dataList . back LEAF_NODE 11 dataList LEAF_NODE 11 . LEAF_NODE 11 back LEAF_NODE 10 ( LEAF_NODE 10 ) LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 size_t i ; VAR_DECL 6 size_t i TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 i LEAF_NODE 8 i LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; ITERATION 5 KEYWORD 6 for LEAF_NODE 7 for LEAF_NODE 6 ( FOR_INIT 6 i = 0 ; EXPR 7 i = 0 ASSIGN 8 i = 0 LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; CONDITION 6 i < 100 EXPR 7 i < 100 FIELD 8 i LEAF_NODE 9 i REL_OPERATOR 8 < LEAF_NODE 9 < FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 6 ; FOR_EXPR 6 i ++ EXPR 7 i ++ FIELD 8 i ++ LEAF_NODE 9 i LEAF_NODE 9 ++ LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 data [ i ] = source [ i ] ; EXPR 9 data [ i ] = source [ i ] ASSIGN 10 data [ i ] = source [ i ] LVAL 11 data [ i ] FIELD 12 data [ i ] LEAF_NODE 13 data LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 source [ i ] FIELD 12 source [ i ] LEAF_NODE 13 source LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] LEAF_NODE 9 ; LEAF_NODE 7 } EXPR_STATEMENT 5 data [ 100 - 1 ] = '\\0' ; EXPR 6 data [ 100 - 1 ] = '\\0' ASSIGN 7 data [ 100 - 1 ] = '\\0' LVAL 8 data [ 100 - 1 ] FIELD 9 data [ 100 - 1 ] LEAF_NODE 10 data LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( list < char * > dataList ) LEAF_NODE 4 ( PARAMETER_DECL 4 list < char * > dataList TYPE 5 list < char * > TYPE_NAME 6 list < char * > LEAF_NODE 7 list LEAF_NODE 7 < LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataList LEAF_NODE 6 dataList LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = dataList . back ( ) ; VAR_DECL 5 char * data ; data = dataList . back ( ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataList . back ( ) ASSIGN 7 data = dataList . back ( ) LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataList . back ( ) FUNCTION_CALL 9 dataList . back ( ) CALLEE 10 dataList . back LEAF_NODE 11 dataList LEAF_NODE 11 . LEAF_NODE 11 back LEAF_NODE 10 ( LEAF_NODE 10 ) LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 size_t i ; VAR_DECL 6 size_t i TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 i LEAF_NODE 8 i LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; ITERATION 5 KEYWORD 6 for LEAF_NODE 7 for LEAF_NODE 6 ( FOR_INIT 6 i = 0 ; EXPR 7 i = 0 ASSIGN 8 i = 0 LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; CONDITION 6 i < 100 EXPR 7 i < 100 FIELD 8 i LEAF_NODE 9 i REL_OPERATOR 8 < LEAF_NODE 9 < FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 6 ; FOR_EXPR 6 i ++ EXPR 7 i ++ FIELD 8 i ++ LEAF_NODE 9 i LEAF_NODE 9 ++ LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 data [ i ] = source [ i ] ; EXPR 9 data [ i ] = source [ i ] ASSIGN 10 data [ i ] = source [ i ] LVAL 11 data [ i ] FIELD 12 data [ i ] LEAF_NODE 13 data LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 source [ i ] FIELD 12 source [ i ] LEAF_NODE 13 source LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] LEAF_NODE 9 ; LEAF_NODE 7 } EXPR_STATEMENT 5 data [ 100 - 1 ] = '\\0' ; EXPR 6 data [ 100 - 1 ] = '\\0' ASSIGN 7 data [ 100 - 1 ] = '\\0' LVAL 8 data [ 100 - 1 ] FIELD 9 data [ 100 - 1 ] LEAF_NODE 10 data LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 114, "project": "cwe119_ast_vul_function_test_adv_132", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_printf_10_bad LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_printf_10_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; dataBuffer = \"\" ; VAR_DECL 4 char [ 100 ] dataBuffer ; dataBuffer = \"\" TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = \"\" ASSIGN 6 dataBuffer = \"\" LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 \"\" FIELD 8 \"\" LEAF_NODE 9 \"\" LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 int globalTrue ; VAR_DECL 4 int globalTrue TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalTrue LEAF_NODE 6 globalTrue LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalTrue EXPR 5 globalTrue FIELD 6 globalTrue LEAF_NODE 7 globalTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 8 size_t dataLen ; dataLen = strlen ( data ) TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 dataLen LEAF_NODE 10 dataLen LEAF_NODE 9 ; INIT 9 dataLen = strlen ( data ) ASSIGN 10 dataLen = strlen ( data ) LVAL 11 dataLen NAME 12 dataLen LEAF_NODE 13 dataLen ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 strlen ( data ) FUNCTION_CALL 12 strlen ( data ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 data FIELD 14 data LEAF_NODE 15 data LEAF_NODE 13 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 100 - dataLen > 1 EXPR 9 100 - dataLen > 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 dataLen LEAF_NODE 11 dataLen REL_OPERATOR 10 > LEAF_NODE 11 > FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SIMPLE_DECL 10 int stdin ; VAR_DECL 11 int stdin TYPE 12 int TYPE_NAME 13 int LEAF_NODE 14 int NAME 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 stdin FIELD 15 stdin LEAF_NODE 16 stdin LEAF_NODE 14 ) EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 dataLen = strlen ( data ) ; EXPR 14 dataLen = strlen ( data ) ASSIGN 15 dataLen = strlen ( data ) LVAL 16 dataLen FIELD 17 dataLen LEAF_NODE 18 dataLen ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 strlen ( data ) FUNCTION_CALL 17 strlen ( data ) CALLEE 18 strlen LEAF_NODE 19 strlen LEAF_NODE 18 ( ARGUMENT 18 data FIELD 19 data LEAF_NODE 20 data LEAF_NODE 18 ) LEAF_NODE 14 ; SELECTION 13 KEYWORD 14 if LEAF_NODE 15 if LEAF_NODE 14 ( CONDITION 14 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 15 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 16 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 17 dataLen > 0 FIELD 18 dataLen LEAF_NODE 19 dataLen REL_OPERATOR 18 > LEAF_NODE 19 > FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 17 && EXPR 17 data [ dataLen - 1 ] == '\\n' FIELD 18 data [ dataLen - 1 ] LEAF_NODE 19 data LEAF_NODE 19 [ EXPR 19 dataLen - 1 FIELD 20 dataLen LEAF_NODE 21 dataLen LEAF_NODE 20 - FIELD 20 1 LEAF_NODE 21 1 LEAF_NODE 19 ] EQ_OPERATOR 18 == LEAF_NODE 19 == FIELD 18 '\\n' LEAF_NODE 19 '\\n' LEAF_NODE 14 ) STATEMENTS 14 LEAF_NODE 15 { STATEMENTS 15 EXPR_STATEMENT 16 data [ dataLen - 1 ] = '\\0' ; EXPR 17 data [ dataLen - 1 ] = '\\0' ASSIGN 18 data [ dataLen - 1 ] = '\\0' LVAL 19 data [ dataLen - 1 ] FIELD 20 data [ dataLen - 1 ] LEAF_NODE 21 data LEAF_NODE 21 [ EXPR 21 dataLen - 1 FIELD 22 dataLen LEAF_NODE 23 dataLen LEAF_NODE 22 - FIELD 22 1 LEAF_NODE 23 1 LEAF_NODE 21 ] ASSIGN_OP 19 = LEAF_NODE 20 = RVAL 19 '\\0' FIELD 20 '\\0' LEAF_NODE 21 '\\0' LEAF_NODE 17 ; LEAF_NODE 15 } LEAF_NODE 12 } SELECTION 10 KEYWORD 11 else LEAF_NODE 12 else STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalTrue EXPR 5 globalTrue FIELD 6 globalTrue LEAF_NODE 7 globalTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printf ( data ) ; EXPR 7 printf ( data ) FUNCTION_CALL 8 printf ( data ) CALLEE 9 printf LEAF_NODE 10 printf LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodB2G1 LEAF_NODE 3 goodB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; dataBuffer = \"\" ; VAR_DECL 4 char [ 100 ] dataBuffer ; dataBuffer = \"\" TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = \"\" ASSIGN 6 dataBuffer = \"\" LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 \"\" FIELD 8 \"\" LEAF_NODE 9 \"\" LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 int globalTrue ; VAR_DECL 4 int globalTrue TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalTrue LEAF_NODE 6 globalTrue LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalTrue EXPR 5 globalTrue FIELD 6 globalTrue LEAF_NODE 7 globalTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 8 size_t dataLen ; dataLen = strlen ( data ) TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 dataLen LEAF_NODE 10 dataLen LEAF_NODE 9 ; INIT 9 dataLen = strlen ( data ) ASSIGN 10 dataLen = strlen ( data ) LVAL 11 dataLen NAME 12 dataLen LEAF_NODE 13 dataLen ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 strlen ( data ) FUNCTION_CALL 12 strlen ( data ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 data FIELD 14 data LEAF_NODE 15 data LEAF_NODE 13 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 100 - dataLen > 1 EXPR 9 100 - dataLen > 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 dataLen LEAF_NODE 11 dataLen REL_OPERATOR 10 > LEAF_NODE 11 > FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SIMPLE_DECL 10 int stdin ; VAR_DECL 11 int stdin TYPE 12 int TYPE_NAME 13 int LEAF_NODE 14 int NAME 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 stdin FIELD 15 stdin LEAF_NODE 16 stdin LEAF_NODE 14 ) EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 dataLen = strlen ( data ) ; EXPR 14 dataLen = strlen ( data ) ASSIGN 15 dataLen = strlen ( data ) LVAL 16 dataLen FIELD 17 dataLen LEAF_NODE 18 dataLen ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 strlen ( data ) FUNCTION_CALL 17 strlen ( data ) CALLEE 18 strlen LEAF_NODE 19 strlen LEAF_NODE 18 ( ARGUMENT 18 data FIELD 19 data LEAF_NODE 20 data LEAF_NODE 18 ) LEAF_NODE 14 ; SELECTION 13 KEYWORD 14 if LEAF_NODE 15 if LEAF_NODE 14 ( CONDITION 14 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 15 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 16 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 17 dataLen > 0 FIELD 18 dataLen LEAF_NODE 19 dataLen REL_OPERATOR 18 > LEAF_NODE 19 > FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 17 && EXPR 17 data [ dataLen - 1 ] == '\\n' FIELD 18 data [ dataLen - 1 ] LEAF_NODE 19 data LEAF_NODE 19 [ EXPR 19 dataLen - 1 FIELD 20 dataLen LEAF_NODE 21 dataLen LEAF_NODE 20 - FIELD 20 1 LEAF_NODE 21 1 LEAF_NODE 19 ] EQ_OPERATOR 18 == LEAF_NODE 19 == FIELD 18 '\\n' LEAF_NODE 19 '\\n' LEAF_NODE 14 ) STATEMENTS 14 LEAF_NODE 15 { STATEMENTS 15 EXPR_STATEMENT 16 data [ dataLen - 1 ] = '\\0' ; EXPR 17 data [ dataLen - 1 ] = '\\0' ASSIGN 18 data [ dataLen - 1 ] = '\\0' LVAL 19 data [ dataLen - 1 ] FIELD 20 data [ dataLen - 1 ] LEAF_NODE 21 data LEAF_NODE 21 [ EXPR 21 dataLen - 1 FIELD 22 dataLen LEAF_NODE 23 dataLen LEAF_NODE 22 - FIELD 22 1 LEAF_NODE 23 1 LEAF_NODE 21 ] ASSIGN_OP 19 = LEAF_NODE 20 = RVAL 19 '\\0' FIELD 20 '\\0' LEAF_NODE 21 '\\0' LEAF_NODE 17 ; LEAF_NODE 15 } LEAF_NODE 12 } SELECTION 10 KEYWORD 11 else LEAF_NODE 12 else STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } SIMPLE_DECL 3 int globalFalse ; VAR_DECL 4 int globalFalse TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalFalse LEAF_NODE 6 globalFalse LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalFalse EXPR 5 globalFalse FIELD 6 globalFalse LEAF_NODE 7 globalFalse LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printf ( \"%s\\n\" , data ) ; EXPR 7 printf ( \"%s\\n\" , data ) FUNCTION_CALL 8 printf ( \"%s\\n\" , data ) CALLEE 9 printf LEAF_NODE 10 printf LEAF_NODE 9 ( ARGUMENT 9 \"%s\\n\" FIELD 10 \"%s\\n\" LEAF_NODE 11 \"%s\\n\" LEAF_NODE 9 , ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodB2G2 LEAF_NODE 3 goodB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; dataBuffer = \"\" ; VAR_DECL 4 char [ 100 ] dataBuffer ; dataBuffer = \"\" TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = \"\" ASSIGN 6 dataBuffer = \"\" LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 \"\" FIELD 8 \"\" LEAF_NODE 9 \"\" LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 int globalTrue ; VAR_DECL 4 int globalTrue TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalTrue LEAF_NODE 6 globalTrue LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalTrue EXPR 5 globalTrue FIELD 6 globalTrue LEAF_NODE 7 globalTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 8 size_t dataLen ; dataLen = strlen ( data ) TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 dataLen LEAF_NODE 10 dataLen LEAF_NODE 9 ; INIT 9 dataLen = strlen ( data ) ASSIGN 10 dataLen = strlen ( data ) LVAL 11 dataLen NAME 12 dataLen LEAF_NODE 13 dataLen ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 strlen ( data ) FUNCTION_CALL 12 strlen ( data ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 data FIELD 14 data LEAF_NODE 15 data LEAF_NODE 13 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 100 - dataLen > 1 EXPR 9 100 - dataLen > 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 dataLen LEAF_NODE 11 dataLen REL_OPERATOR 10 > LEAF_NODE 11 > FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SIMPLE_DECL 10 int stdin ; VAR_DECL 11 int stdin TYPE 12 int TYPE_NAME 13 int LEAF_NODE 14 int NAME 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 stdin FIELD 15 stdin LEAF_NODE 16 stdin LEAF_NODE 14 ) EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 dataLen = strlen ( data ) ; EXPR 14 dataLen = strlen ( data ) ASSIGN 15 dataLen = strlen ( data ) LVAL 16 dataLen FIELD 17 dataLen LEAF_NODE 18 dataLen ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 strlen ( data ) FUNCTION_CALL 17 strlen ( data ) CALLEE 18 strlen LEAF_NODE 19 strlen LEAF_NODE 18 ( ARGUMENT 18 data FIELD 19 data LEAF_NODE 20 data LEAF_NODE 18 ) LEAF_NODE 14 ; SELECTION 13 KEYWORD 14 if LEAF_NODE 15 if LEAF_NODE 14 ( CONDITION 14 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 15 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 16 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 17 dataLen > 0 FIELD 18 dataLen LEAF_NODE 19 dataLen REL_OPERATOR 18 > LEAF_NODE 19 > FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 17 && EXPR 17 data [ dataLen - 1 ] == '\\n' FIELD 18 data [ dataLen - 1 ] LEAF_NODE 19 data LEAF_NODE 19 [ EXPR 19 dataLen - 1 FIELD 20 dataLen LEAF_NODE 21 dataLen LEAF_NODE 20 - FIELD 20 1 LEAF_NODE 21 1 LEAF_NODE 19 ] EQ_OPERATOR 18 == LEAF_NODE 19 == FIELD 18 '\\n' LEAF_NODE 19 '\\n' LEAF_NODE 14 ) STATEMENTS 14 LEAF_NODE 15 { STATEMENTS 15 EXPR_STATEMENT 16 data [ dataLen - 1 ] = '\\0' ; EXPR 17 data [ dataLen - 1 ] = '\\0' ASSIGN 18 data [ dataLen - 1 ] = '\\0' LVAL 19 data [ dataLen - 1 ] FIELD 20 data [ dataLen - 1 ] LEAF_NODE 21 data LEAF_NODE 21 [ EXPR 21 dataLen - 1 FIELD 22 dataLen LEAF_NODE 23 dataLen LEAF_NODE 22 - FIELD 22 1 LEAF_NODE 23 1 LEAF_NODE 21 ] ASSIGN_OP 19 = LEAF_NODE 20 = RVAL 19 '\\0' FIELD 20 '\\0' LEAF_NODE 21 '\\0' LEAF_NODE 17 ; LEAF_NODE 15 } LEAF_NODE 12 } SELECTION 10 KEYWORD 11 else LEAF_NODE 12 else STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalTrue EXPR 5 globalTrue FIELD 6 globalTrue LEAF_NODE 7 globalTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printf ( \"%s\\n\" , data ) ; EXPR 7 printf ( \"%s\\n\" , data ) FUNCTION_CALL 8 printf ( \"%s\\n\" , data ) CALLEE 9 printf LEAF_NODE 10 printf LEAF_NODE 9 ( ARGUMENT 9 \"%s\\n\" FIELD 10 \"%s\\n\" LEAF_NODE 11 \"%s\\n\" LEAF_NODE 9 , ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; dataBuffer = \"\" ; VAR_DECL 4 char [ 100 ] dataBuffer ; dataBuffer = \"\" TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = \"\" ASSIGN 6 dataBuffer = \"\" LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 \"\" FIELD 8 \"\" LEAF_NODE 9 \"\" LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 int globalFalse ; VAR_DECL 4 int globalFalse TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalFalse LEAF_NODE 6 globalFalse LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalFalse EXPR 5 globalFalse FIELD 6 globalFalse LEAF_NODE 7 globalFalse LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 strcpy ( data , \"fixedstringtest\" ) ; EXPR 7 strcpy ( data , \"fixedstringtest\" ) FUNCTION_CALL 8 strcpy ( data , \"fixedstringtest\" ) CALLEE 9 strcpy LEAF_NODE 10 strcpy LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 \"fixedstringtest\" FIELD 10 \"fixedstringtest\" LEAF_NODE 11 \"fixedstringtest\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SIMPLE_DECL 3 int globalTrue ; VAR_DECL 4 int globalTrue TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalTrue LEAF_NODE 6 globalTrue LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalTrue EXPR 5 globalTrue FIELD 6 globalTrue LEAF_NODE 7 globalTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printf ( data ) ; EXPR 7 printf ( data ) FUNCTION_CALL 8 printf ( data ) CALLEE 9 printf LEAF_NODE 10 printf LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; dataBuffer = \"\" ; VAR_DECL 4 char [ 100 ] dataBuffer ; dataBuffer = \"\" TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = \"\" ASSIGN 6 dataBuffer = \"\" LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 \"\" FIELD 8 \"\" LEAF_NODE 9 \"\" LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 int globalTrue ; VAR_DECL 4 int globalTrue TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalTrue LEAF_NODE 6 globalTrue LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalTrue EXPR 5 globalTrue FIELD 6 globalTrue LEAF_NODE 7 globalTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 strcpy ( data , \"fixedstringtest\" ) ; EXPR 7 strcpy ( data , \"fixedstringtest\" ) FUNCTION_CALL 8 strcpy ( data , \"fixedstringtest\" ) CALLEE 9 strcpy LEAF_NODE 10 strcpy LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 \"fixedstringtest\" FIELD 10 \"fixedstringtest\" LEAF_NODE 11 \"fixedstringtest\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalTrue EXPR 5 globalTrue FIELD 6 globalTrue LEAF_NODE 7 globalTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printf ( data ) ; EXPR 7 printf ( data ) FUNCTION_CALL 8 printf ( data ) CALLEE 9 printf LEAF_NODE 10 printf LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_printf_10_good LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_printf_10_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodB2G1 ( ) ; EXPR 4 goodB2G1 ( ) FUNCTION_CALL 5 goodB2G1 ( ) CALLEE 6 goodB2G1 LEAF_NODE 7 goodB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodB2G2 ( ) ; EXPR 4 goodB2G2 ( ) FUNCTION_CALL 5 goodB2G2 ( ) CALLEE 6 goodB2G2 LEAF_NODE 7 goodB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_printf_10_good ( ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_printf_10_good ( ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_printf_10_good ( ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_printf_10_good LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_printf_10_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_printf_10_bad ( ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_printf_10_bad ( ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_printf_10_bad ( ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_printf_10_bad LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_printf_10_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 115, "project": "cwe119_ast_vul_function_test_adv_35", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_ncat_15 { void bad ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6 : data = new char [ 50 ] ; data [ 0 ] = '\\0' ; break DESTINATION ; default : printLine ( \"Benign, fixed string\" ) ; break DESTINATION ; } { char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; delete [ ] data ; } } static void goodG2B1 ( ) { char * data ; data = NULL ; switch ( 5 ) { case 6 : printLine ( \"Benign, fixed string\" ) ; break DESTINATION ; default : data = new char [ 100 ] ; data [ 0 ] = '\\0' ; break DESTINATION ; } { char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; delete [ ] data ; } } static void goodG2B2 ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6 : data = new char [ 100 ] ; data [ 0 ] = '\\0' ; break DESTINATION ; default : printLine ( \"Benign, fixed string\" ) ; break DESTINATION ; } { char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; delete [ ] data ; } } void good ( ) { goodG2B1 ( ) ; goodG2B2 ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_ncat_15 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 switch LEAF_NODE 6 switch LEAF_NODE 5 ( CONDITION 5 6 EXPR 6 6 FIELD 7 6 LEAF_NODE 8 6 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LABEL 7 case 6 : LEAF_NODE 8 case LEAF_NODE 8 6 LEAF_NODE 8 : LEAF_NODE 7 data LEAF_NODE 7 = LEAF_NODE 7 new EXPR_STATEMENT 7 char [ 50 ] ; EXPR 8 char [ 50 ] FIELD 9 char [ 50 ] LEAF_NODE 10 char LEAF_NODE 10 [ EXPR 10 50 FIELD 11 50 LEAF_NODE 12 50 LEAF_NODE 10 ] LEAF_NODE 8 ; EXPR_STATEMENT 7 data [ 0 ] = '\\0' ; EXPR 8 data [ 0 ] = '\\0' ASSIGN 9 data [ 0 ] = '\\0' LVAL 10 data [ 0 ] FIELD 11 data [ 0 ] LEAF_NODE 12 data LEAF_NODE 12 [ EXPR 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 '\\0' FIELD 11 '\\0' LEAF_NODE 12 '\\0' LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LABEL 7 default : LEAF_NODE 8 default LEAF_NODE 8 : EXPR_STATEMENT 7 printLine ( \"Benign, fixed string\" ) ; EXPR 8 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 9 printLine ( \"Benign, fixed string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Benign, fixed string\" FIELD 11 \"Benign, fixed string\" LEAF_NODE 12 \"Benign, fixed string\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 strncat ( data , source , 100 ) ; EXPR 6 strncat ( data , source , 100 ) FUNCTION_CALL 7 strncat ( data , source , 100 ) CALLEE 8 strncat LEAF_NODE 9 strncat LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B1 LEAF_NODE 4 goodG2B1 PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 switch LEAF_NODE 6 switch LEAF_NODE 5 ( CONDITION 5 5 EXPR 6 5 FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LABEL 7 case 6 : LEAF_NODE 8 case LEAF_NODE 8 6 LEAF_NODE 8 : EXPR_STATEMENT 7 printLine ( \"Benign, fixed string\" ) ; EXPR 8 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 9 printLine ( \"Benign, fixed string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Benign, fixed string\" FIELD 11 \"Benign, fixed string\" LEAF_NODE 12 \"Benign, fixed string\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LABEL 7 default : LEAF_NODE 8 default LEAF_NODE 8 : LEAF_NODE 7 data LEAF_NODE 7 = LEAF_NODE 7 new EXPR_STATEMENT 7 char [ 100 ] ; EXPR 8 char [ 100 ] FIELD 9 char [ 100 ] LEAF_NODE 10 char LEAF_NODE 10 [ EXPR 10 100 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 10 ] LEAF_NODE 8 ; EXPR_STATEMENT 7 data [ 0 ] = '\\0' ; EXPR 8 data [ 0 ] = '\\0' ASSIGN 9 data [ 0 ] = '\\0' LVAL 10 data [ 0 ] FIELD 11 data [ 0 ] LEAF_NODE 12 data LEAF_NODE 12 [ EXPR 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 '\\0' FIELD 11 '\\0' LEAF_NODE 12 '\\0' LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 strncat ( data , source , 100 ) ; EXPR 6 strncat ( data , source , 100 ) FUNCTION_CALL 7 strncat ( data , source , 100 ) CALLEE 8 strncat LEAF_NODE 9 strncat LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B2 LEAF_NODE 4 goodG2B2 PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 switch LEAF_NODE 6 switch LEAF_NODE 5 ( CONDITION 5 6 EXPR 6 6 FIELD 7 6 LEAF_NODE 8 6 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LABEL 7 case 6 : LEAF_NODE 8 case LEAF_NODE 8 6 LEAF_NODE 8 : LEAF_NODE 7 data LEAF_NODE 7 = LEAF_NODE 7 new EXPR_STATEMENT 7 char [ 100 ] ; EXPR 8 char [ 100 ] FIELD 9 char [ 100 ] LEAF_NODE 10 char LEAF_NODE 10 [ EXPR 10 100 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 10 ] LEAF_NODE 8 ; EXPR_STATEMENT 7 data [ 0 ] = '\\0' ; EXPR 8 data [ 0 ] = '\\0' ASSIGN 9 data [ 0 ] = '\\0' LVAL 10 data [ 0 ] FIELD 11 data [ 0 ] LEAF_NODE 12 data LEAF_NODE 12 [ EXPR 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 '\\0' FIELD 11 '\\0' LEAF_NODE 12 '\\0' LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LABEL 7 default : LEAF_NODE 8 default LEAF_NODE 8 : EXPR_STATEMENT 7 printLine ( \"Benign, fixed string\" ) ; EXPR 8 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 9 printLine ( \"Benign, fixed string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Benign, fixed string\" FIELD 11 \"Benign, fixed string\" LEAF_NODE 12 \"Benign, fixed string\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 strncat ( data , source , 100 ) ; EXPR 6 strncat ( data , source , 100 ) FUNCTION_CALL 7 strncat ( data , source , 100 ) CALLEE 8 strncat LEAF_NODE 9 strncat LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B1 ( ) ; EXPR 5 goodG2B1 ( ) FUNCTION_CALL 6 goodG2B1 ( ) CALLEE 7 goodG2B1 LEAF_NODE 8 goodG2B1 LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2B2 ( ) ; EXPR 5 goodG2B2 ( ) FUNCTION_CALL 6 goodG2B2 ( ) CALLEE 7 goodG2B2 LEAF_NODE 8 goodG2B2 LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_ncat_15 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_ncat_15 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 116, "project": "cwe119_ast_vul_function_test_adv_15", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53d_badSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53d_badSink PARAMETER_LIST 2 ( int data ) LEAF_NODE 3 ( PARAMETER_DECL 3 int data TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int i ; VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; SIMPLE_DECL 4 int * buffer ; buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) ; VAR_DECL 5 int * buffer ; buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) TYPE 6 int * TYPE_NAME 7 int LEAF_NODE 8 int POINTER 7 * LEAF_NODE 8 * NAME 6 buffer LEAF_NODE 7 buffer LEAF_NODE 6 ; INIT 6 buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) ASSIGN 7 buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) LVAL 8 buffer NAME 9 buffer LEAF_NODE 10 buffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( int * ) malloc ( 10 * sizeof ( int ) ) LEAF_NODE 9 ( TYPE_NAME 9 int LEAF_NODE 10 int LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 malloc ( 10 * sizeof ( int ) ) CALLEE 10 malloc LEAF_NODE 11 malloc LEAF_NODE 10 ( ARGUMENT 10 10 * sizeof ( int ) FIELD 11 10 LEAF_NODE 12 10 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( int ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 int FIELD 13 int LEAF_NODE 14 int LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < 10 EXPR 6 i < 10 FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 buffer [ i ] = 0 ; EXPR 8 buffer [ i ] = 0 ASSIGN 9 buffer [ i ] = 0 LVAL 10 buffer [ i ] FIELD 11 buffer [ i ] LEAF_NODE 12 buffer LEAF_NODE 12 [ EXPR 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data >= 0 EXPR 6 data >= 0 FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 >= LEAF_NODE 8 >= FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 buffer [ data ] = 1 ; EXPR 8 buffer [ data ] = 1 ASSIGN 9 buffer [ data ] = 1 LVAL 10 buffer [ data ] FIELD 11 buffer [ data ] LEAF_NODE 12 buffer LEAF_NODE 12 [ EXPR 12 data FIELD 13 data LEAF_NODE 14 data LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 1 FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < 10 EXPR 9 i < 10 FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printIntLine ( buffer [ i ] ) ; EXPR 11 printIntLine ( buffer [ i ] ) FUNCTION_CALL 12 printIntLine ( buffer [ i ] ) CALLEE 13 printIntLine LEAF_NODE 14 printIntLine LEAF_NODE 13 ( ARGUMENT 13 buffer [ i ] FIELD 14 buffer [ i ] LEAF_NODE 15 buffer LEAF_NODE 15 [ EXPR 15 i FIELD 16 i LEAF_NODE 17 i LEAF_NODE 15 ] LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"ERROR: Array index is negative.\" ) ; EXPR 8 printLine ( \"ERROR: Array index is negative.\" ) FUNCTION_CALL 9 printLine ( \"ERROR: Array index is negative.\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"ERROR: Array index is negative.\" FIELD 11 \"ERROR: Array index is negative.\" LEAF_NODE 12 \"ERROR: Array index is negative.\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } EXPR_STATEMENT 4 free ( buffer ) ; EXPR 5 free ( buffer ) FUNCTION_CALL 6 free ( buffer ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 buffer FIELD 8 buffer LEAF_NODE 9 buffer LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53d_goodG2BSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53d_goodG2BSink PARAMETER_LIST 2 ( int data ) LEAF_NODE 3 ( PARAMETER_DECL 3 int data TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int i ; VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; SIMPLE_DECL 4 int * buffer ; buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) ; VAR_DECL 5 int * buffer ; buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) TYPE 6 int * TYPE_NAME 7 int LEAF_NODE 8 int POINTER 7 * LEAF_NODE 8 * NAME 6 buffer LEAF_NODE 7 buffer LEAF_NODE 6 ; INIT 6 buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) ASSIGN 7 buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) LVAL 8 buffer NAME 9 buffer LEAF_NODE 10 buffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( int * ) malloc ( 10 * sizeof ( int ) ) LEAF_NODE 9 ( TYPE_NAME 9 int LEAF_NODE 10 int LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 malloc ( 10 * sizeof ( int ) ) CALLEE 10 malloc LEAF_NODE 11 malloc LEAF_NODE 10 ( ARGUMENT 10 10 * sizeof ( int ) FIELD 11 10 LEAF_NODE 12 10 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( int ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 int FIELD 13 int LEAF_NODE 14 int LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < 10 EXPR 6 i < 10 FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 buffer [ i ] = 0 ; EXPR 8 buffer [ i ] = 0 ASSIGN 9 buffer [ i ] = 0 LVAL 10 buffer [ i ] FIELD 11 buffer [ i ] LEAF_NODE 12 buffer LEAF_NODE 12 [ EXPR 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data >= 0 EXPR 6 data >= 0 FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 >= LEAF_NODE 8 >= FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 buffer [ data ] = 1 ; EXPR 8 buffer [ data ] = 1 ASSIGN 9 buffer [ data ] = 1 LVAL 10 buffer [ data ] FIELD 11 buffer [ data ] LEAF_NODE 12 buffer LEAF_NODE 12 [ EXPR 12 data FIELD 13 data LEAF_NODE 14 data LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 1 FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < 10 EXPR 9 i < 10 FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printIntLine ( buffer [ i ] ) ; EXPR 11 printIntLine ( buffer [ i ] ) FUNCTION_CALL 12 printIntLine ( buffer [ i ] ) CALLEE 13 printIntLine LEAF_NODE 14 printIntLine LEAF_NODE 13 ( ARGUMENT 13 buffer [ i ] FIELD 14 buffer [ i ] LEAF_NODE 15 buffer LEAF_NODE 15 [ EXPR 15 i FIELD 16 i LEAF_NODE 17 i LEAF_NODE 15 ] LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"ERROR: Array index is negative.\" ) ; EXPR 8 printLine ( \"ERROR: Array index is negative.\" ) FUNCTION_CALL 9 printLine ( \"ERROR: Array index is negative.\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"ERROR: Array index is negative.\" FIELD 11 \"ERROR: Array index is negative.\" LEAF_NODE 12 \"ERROR: Array index is negative.\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } EXPR_STATEMENT 4 free ( buffer ) ; EXPR 5 free ( buffer ) FUNCTION_CALL 6 free ( buffer ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 buffer FIELD 8 buffer LEAF_NODE 9 buffer LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53d_goodB2GSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53d_goodB2GSink PARAMETER_LIST 2 ( int data ) LEAF_NODE 3 ( PARAMETER_DECL 3 int data TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int i ; VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; SIMPLE_DECL 4 int * buffer ; buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) ; VAR_DECL 5 int * buffer ; buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) TYPE 6 int * TYPE_NAME 7 int LEAF_NODE 8 int POINTER 7 * LEAF_NODE 8 * NAME 6 buffer LEAF_NODE 7 buffer LEAF_NODE 6 ; INIT 6 buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) ASSIGN 7 buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) LVAL 8 buffer NAME 9 buffer LEAF_NODE 10 buffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( int * ) malloc ( 10 * sizeof ( int ) ) LEAF_NODE 9 ( TYPE_NAME 9 int LEAF_NODE 10 int LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 malloc ( 10 * sizeof ( int ) ) CALLEE 10 malloc LEAF_NODE 11 malloc LEAF_NODE 10 ( ARGUMENT 10 10 * sizeof ( int ) FIELD 11 10 LEAF_NODE 12 10 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( int ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 int FIELD 13 int LEAF_NODE 14 int LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < 10 EXPR 6 i < 10 FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 buffer [ i ] = 0 ; EXPR 8 buffer [ i ] = 0 ASSIGN 9 buffer [ i ] = 0 LVAL 10 buffer [ i ] FIELD 11 buffer [ i ] LEAF_NODE 12 buffer LEAF_NODE 12 [ EXPR 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data >= 0 && data < ( 10 ) EXPR 6 data >= 0 && data < ( 10 ) AND 7 data >= 0 && data < ( 10 ) EXPR 8 data >= 0 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 >= LEAF_NODE 10 >= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 && EXPR 8 data < ( 10 ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < LEAF_NODE 9 ( FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 buffer [ data ] = 1 ; EXPR 8 buffer [ data ] = 1 ASSIGN 9 buffer [ data ] = 1 LVAL 10 buffer [ data ] FIELD 11 buffer [ data ] LEAF_NODE 12 buffer LEAF_NODE 12 [ EXPR 12 data FIELD 13 data LEAF_NODE 14 data LEAF_NODE 12 ] ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 1 FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < 10 EXPR 9 i < 10 FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printIntLine ( buffer [ i ] ) ; EXPR 11 printIntLine ( buffer [ i ] ) FUNCTION_CALL 12 printIntLine ( buffer [ i ] ) CALLEE 13 printIntLine LEAF_NODE 14 printIntLine LEAF_NODE 13 ( ARGUMENT 13 buffer [ i ] FIELD 14 buffer [ i ] LEAF_NODE 15 buffer LEAF_NODE 15 [ EXPR 15 i FIELD 16 i LEAF_NODE 17 i LEAF_NODE 15 ] LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"ERROR: Array index is out-of-bounds\" ) ; EXPR 8 printLine ( \"ERROR: Array index is out-of-bounds\" ) FUNCTION_CALL 9 printLine ( \"ERROR: Array index is out-of-bounds\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"ERROR: Array index is out-of-bounds\" FIELD 11 \"ERROR: Array index is out-of-bounds\" LEAF_NODE 12 \"ERROR: Array index is out-of-bounds\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } EXPR_STATEMENT 4 free ( buffer ) ; EXPR 5 free ( buffer ) FUNCTION_CALL 6 free ( buffer ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 buffer FIELD 8 buffer LEAF_NODE 9 buffer LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 117, "project": "cwe119_ast_vul_function_test_adv_56", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_65b_badSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_65b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 strncpy ( dest , data , strlen ( data ) ) ; EXPR 5 strncpy ( dest , data , strlen ( data ) ) FUNCTION_CALL 6 strncpy ( dest , data , strlen ( data ) ) CALLEE 7 strncpy LEAF_NODE 8 strncpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( data ) FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 50 - 1 ] = '\\0' ; EXPR 5 dest [ 50 - 1 ] = '\\0' ASSIGN 6 dest [ 50 - 1 ] = '\\0' LVAL 7 dest [ 50 - 1 ] FIELD 8 dest [ 50 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_65b_goodG2BSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_65b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 strncpy ( dest , data , strlen ( data ) ) ; EXPR 5 strncpy ( dest , data , strlen ( data ) ) FUNCTION_CALL 6 strncpy ( dest , data , strlen ( data ) ) CALLEE 7 strncpy LEAF_NODE 8 strncpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( data ) FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 50 - 1 ] = '\\0' ; EXPR 5 dest [ 50 - 1 ] = '\\0' ASSIGN 6 dest [ 50 - 1 ] = '\\0' LVAL 7 dest [ 50 - 1 ] FIELD 8 dest [ 50 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 118, "project": "cwe119_ast_vul_function_test_adv_101", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54e_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54e_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54d_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54d_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54e_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54e_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54e_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54e_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54e_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54e_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54e_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54d_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54d_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54e_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54e_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54e_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54e_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54e_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 119, "project": "cwe119_ast_vul_function_test_adv_153", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53b_badSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 10 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 10 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 10 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 10 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 10 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 10 * sizeof ( char ) FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53b_badSink ( data ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53b_badSink ( data ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53b_badSink ( data ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53b_badSink LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53b_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53b_goodG2BSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( ( 10 + 1 ) * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 ( 10 + 1 ) * sizeof ( char ) LEAF_NODE 9 ( FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ) LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53b_goodG2BSink ( data ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53b_goodG2BSink ( data ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53b_goodG2BSink ( data ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53b_goodG2BSink LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 120, "project": "cwe119_ast_vul_function_test_adv_182", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_54c_badSink LEAF_NODE 3 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_54c_badSink PARAMETER_LIST 2 ( int data ) LEAF_NODE 3 ( PARAMETER_DECL 3 int data TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_54b_badSink LEAF_NODE 3 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_54b_badSink PARAMETER_LIST 2 ( int data ) LEAF_NODE 3 ( PARAMETER_DECL 3 int data TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_54c_badSink ( data ) ; EXPR 4 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_54c_badSink ( data ) FUNCTION_CALL 5 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_54c_badSink ( data ) CALLEE 6 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_54c_badSink LEAF_NODE 7 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_54c_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_54c_goodG2BSink LEAF_NODE 3 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_54c_goodG2BSink PARAMETER_LIST 2 ( int data ) LEAF_NODE 3 ( PARAMETER_DECL 3 int data TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_54b_goodG2BSink LEAF_NODE 3 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_54b_goodG2BSink PARAMETER_LIST 2 ( int data ) LEAF_NODE 3 ( PARAMETER_DECL 3 int data TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_54c_goodG2BSink ( data ) ; EXPR 4 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_54c_goodG2BSink ( data ) FUNCTION_CALL 5 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_54c_goodG2BSink ( data ) CALLEE 6 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_54c_goodG2BSink LEAF_NODE 7 CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_54c_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 121, "project": "cwe119_ast_vul_function_test_adv_52", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_32_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_32_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataPtr1 ; dataPtr1 = & data ; VAR_DECL 4 wchar_t * dataPtr1 ; dataPtr1 = & data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr1 LEAF_NODE 6 dataPtr1 LEAF_NODE 5 ; INIT 5 dataPtr1 = & data ASSIGN 6 dataPtr1 = & data LVAL 7 dataPtr1 NAME 8 dataPtr1 LEAF_NODE 9 dataPtr1 ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & data UNARY_EXPR 8 & data UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 data LEAF_NODE 10 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataPtr2 ; dataPtr2 = & data ; VAR_DECL 4 wchar_t * dataPtr2 ; dataPtr2 = & data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr2 LEAF_NODE 6 dataPtr2 LEAF_NODE 5 ; INIT 5 dataPtr2 = & data ASSIGN 6 dataPtr2 = & data LVAL 7 dataPtr2 NAME 8 dataPtr2 LEAF_NODE 9 dataPtr2 ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & data UNARY_EXPR 8 & data UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 data LEAF_NODE 10 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; data = * dataPtr1 ; VAR_DECL 5 wchar_t * data ; data = * dataPtr1 TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = * dataPtr1 ASSIGN 7 data = * dataPtr1 LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 * dataPtr1 UNARY_EXPR 9 * dataPtr1 UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 dataPtr1 LEAF_NODE 11 dataPtr1 LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'A' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 * dataPtr1 = data ; EXPR 5 * dataPtr1 = data ASSIGN 6 * dataPtr1 = data LVAL 7 * dataPtr1 UNARY_EXPR 8 * dataPtr1 UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr1 LEAF_NODE 10 dataPtr1 ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; data = * dataPtr2 ; VAR_DECL 5 wchar_t * data ; data = * dataPtr2 TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = * dataPtr2 ASSIGN 7 data = * dataPtr2 LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 * dataPtr2 UNARY_EXPR 9 * dataPtr2 UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 dataPtr2 LEAF_NODE 11 dataPtr2 LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 wchar_t LEAF_NODE 5 dest LEAF_NODE 5 [ LEAF_NODE 5 50 LEAF_NODE 5 ] LEAF_NODE 5 = LEAF_NODE 5 L EXPR_STATEMENT 5 \"\" ; EXPR 6 \"\" FIELD 7 \"\" LEAF_NODE 8 \"\" LEAF_NODE 6 ; EXPR_STATEMENT 5 wcscpy ( dest , data ) ; EXPR 6 wcscpy ( dest , data ) FUNCTION_CALL 7 wcscpy ( dest , data ) CALLEE 8 wcscpy LEAF_NODE 9 wcscpy LEAF_NODE 8 ( ARGUMENT 8 dest FIELD 9 dest LEAF_NODE 10 dest LEAF_NODE 8 , ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printWLine ( data ) ; EXPR 6 printWLine ( data ) FUNCTION_CALL 7 printWLine ( data ) CALLEE 8 printWLine LEAF_NODE 9 printWLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataPtr1 ; dataPtr1 = & data ; VAR_DECL 4 wchar_t * dataPtr1 ; dataPtr1 = & data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr1 LEAF_NODE 6 dataPtr1 LEAF_NODE 5 ; INIT 5 dataPtr1 = & data ASSIGN 6 dataPtr1 = & data LVAL 7 dataPtr1 NAME 8 dataPtr1 LEAF_NODE 9 dataPtr1 ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & data UNARY_EXPR 8 & data UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 data LEAF_NODE 10 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataPtr2 ; dataPtr2 = & data ; VAR_DECL 4 wchar_t * dataPtr2 ; dataPtr2 = & data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr2 LEAF_NODE 6 dataPtr2 LEAF_NODE 5 ; INIT 5 dataPtr2 = & data ASSIGN 6 dataPtr2 = & data LVAL 7 dataPtr2 NAME 8 dataPtr2 LEAF_NODE 9 dataPtr2 ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & data UNARY_EXPR 8 & data UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 data LEAF_NODE 10 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; data = * dataPtr1 ; VAR_DECL 5 wchar_t * data ; data = * dataPtr1 TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = * dataPtr1 ASSIGN 7 data = * dataPtr1 LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 * dataPtr1 UNARY_EXPR 9 * dataPtr1 UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 dataPtr1 LEAF_NODE 11 dataPtr1 LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'A' LEAF_NODE 4 , LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 * dataPtr1 = data ; EXPR 5 * dataPtr1 = data ASSIGN 6 * dataPtr1 = data LVAL 7 * dataPtr1 UNARY_EXPR 8 * dataPtr1 UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr1 LEAF_NODE 10 dataPtr1 ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; data = * dataPtr2 ; VAR_DECL 5 wchar_t * data ; data = * dataPtr2 TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = * dataPtr2 ASSIGN 7 data = * dataPtr2 LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 * dataPtr2 UNARY_EXPR 9 * dataPtr2 UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 dataPtr2 LEAF_NODE 11 dataPtr2 LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 wchar_t LEAF_NODE 5 dest LEAF_NODE 5 [ LEAF_NODE 5 50 LEAF_NODE 5 ] LEAF_NODE 5 = LEAF_NODE 5 L EXPR_STATEMENT 5 \"\" ; EXPR 6 \"\" FIELD 7 \"\" LEAF_NODE 8 \"\" LEAF_NODE 6 ; EXPR_STATEMENT 5 wcscpy ( dest , data ) ; EXPR 6 wcscpy ( dest , data ) FUNCTION_CALL 7 wcscpy ( dest , data ) CALLEE 8 wcscpy LEAF_NODE 9 wcscpy LEAF_NODE 8 ( ARGUMENT 8 dest FIELD 9 dest LEAF_NODE 10 dest LEAF_NODE 8 , ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printWLine ( data ) ; EXPR 6 printWLine ( data ) FUNCTION_CALL 7 printWLine ( data ) CALLEE 8 printWLine LEAF_NODE 9 printWLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_32_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_32_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_32_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_32_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_32_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_32_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_32_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_32_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_32_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_32_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_32_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_32_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 122, "project": "cwe119_ast_vul_function_test_adv_33", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_74 { void badSink ( map < int , wchar_t * > dataMap ) { STATEMENTS } ; void bad ( ) { wchar_t * data ; map < int , wchar_t * > dataMap ; wchar_t * dataBadBuffer ; dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer ; dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L '\\0' ; dataMap [ 0 ] = data ; dataMap [ 1 ] = data ; dataMap [ 2 ] = data ; badSink ( dataMap ) ; } void goodG2BSink ( map < int , wchar_t * > dataMap ) { STATEMENTS } ; static void goodG2B ( ) { wchar_t * data ; map < int , wchar_t * > dataMap ; wchar_t * dataBadBuffer ; dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer ; dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L '\\0' ; dataMap [ 0 ] = data ; dataMap [ 1 ] = data ; dataMap [ 2 ] = data ; goodG2BSink ( dataMap ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_74 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( map < int , wchar_t * > dataMap ) LEAF_NODE 4 ( PARAMETER_DECL 4 map < int , wchar_t * > dataMap TYPE 5 map < int , wchar_t * > TYPE_NAME 6 map < int , wchar_t * > LEAF_NODE 7 map LEAF_NODE 7 < LEAF_NODE 7 int LEAF_NODE 7 , LEAF_NODE 7 wchar_t LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataMap LEAF_NODE 6 dataMap LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 map < int , wchar_t * > dataMap ; VAR_DECL 5 map < int , wchar_t * > dataMap TYPE 6 map < int , wchar_t * > TYPE_NAME 7 map < int , wchar_t * > LEAF_NODE 8 map LEAF_NODE 8 < LEAF_NODE 8 int LEAF_NODE 8 , LEAF_NODE 8 wchar_t LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataMap LEAF_NODE 7 dataMap LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * dataBadBuffer ; dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; VAR_DECL 5 wchar_t * dataBadBuffer ; dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 dataBadBuffer LEAF_NODE 7 dataBadBuffer LEAF_NODE 6 ; INIT 6 dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ASSIGN 7 dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) LVAL 8 dataBadBuffer NAME 9 dataBadBuffer LEAF_NODE 10 dataBadBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) LEAF_NODE 9 ( TYPE_NAME 9 wchar_t LEAF_NODE 10 wchar_t LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 ALLOCA ( 50 * sizeof ( wchar_t ) ) CALLEE 10 ALLOCA LEAF_NODE 11 ALLOCA LEAF_NODE 10 ( ARGUMENT 10 50 * sizeof ( wchar_t ) FIELD 11 50 LEAF_NODE 12 50 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( wchar_t ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 wchar_t FIELD 13 wchar_t LEAF_NODE 14 wchar_t LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * dataGoodBuffer ; dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 5 wchar_t * dataGoodBuffer ; dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 dataGoodBuffer LEAF_NODE 7 dataGoodBuffer LEAF_NODE 6 ; INIT 6 dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 7 dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 8 dataGoodBuffer NAME 9 dataGoodBuffer LEAF_NODE 10 dataGoodBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 9 ( TYPE_NAME 9 wchar_t LEAF_NODE 10 wchar_t LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 10 ALLOCA LEAF_NODE 11 ALLOCA LEAF_NODE 10 ( ARGUMENT 10 100 * sizeof ( wchar_t ) FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( wchar_t ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 wchar_t FIELD 13 wchar_t LEAF_NODE 14 wchar_t LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataBadBuffer ; EXPR 5 data = dataBadBuffer ASSIGN 6 data = dataBadBuffer LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataBadBuffer FIELD 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 0 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataMap [ 0 ] = data ; EXPR 5 dataMap [ 0 ] = data ASSIGN 6 dataMap [ 0 ] = data LVAL 7 dataMap [ 0 ] FIELD 8 dataMap [ 0 ] LEAF_NODE 9 dataMap LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 dataMap [ 1 ] = data ; EXPR 5 dataMap [ 1 ] = data ASSIGN 6 dataMap [ 1 ] = data LVAL 7 dataMap [ 1 ] FIELD 8 dataMap [ 1 ] LEAF_NODE 9 dataMap LEAF_NODE 9 [ EXPR 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 dataMap [ 2 ] = data ; EXPR 5 dataMap [ 2 ] = data ASSIGN 6 dataMap [ 2 ] = data LVAL 7 dataMap [ 2 ] FIELD 8 dataMap [ 2 ] LEAF_NODE 9 dataMap LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( dataMap ) ; EXPR 5 badSink ( dataMap ) FUNCTION_CALL 6 badSink ( dataMap ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( ARGUMENT 7 dataMap FIELD 8 dataMap LEAF_NODE 9 dataMap LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( map < int , wchar_t * > dataMap ) LEAF_NODE 4 ( PARAMETER_DECL 4 map < int , wchar_t * > dataMap TYPE 5 map < int , wchar_t * > TYPE_NAME 6 map < int , wchar_t * > LEAF_NODE 7 map LEAF_NODE 7 < LEAF_NODE 7 int LEAF_NODE 7 , LEAF_NODE 7 wchar_t LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataMap LEAF_NODE 6 dataMap LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 map < int , wchar_t * > dataMap ; VAR_DECL 5 map < int , wchar_t * > dataMap TYPE 6 map < int , wchar_t * > TYPE_NAME 7 map < int , wchar_t * > LEAF_NODE 8 map LEAF_NODE 8 < LEAF_NODE 8 int LEAF_NODE 8 , LEAF_NODE 8 wchar_t LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataMap LEAF_NODE 7 dataMap LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * dataBadBuffer ; dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; VAR_DECL 5 wchar_t * dataBadBuffer ; dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 dataBadBuffer LEAF_NODE 7 dataBadBuffer LEAF_NODE 6 ; INIT 6 dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ASSIGN 7 dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) LVAL 8 dataBadBuffer NAME 9 dataBadBuffer LEAF_NODE 10 dataBadBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) LEAF_NODE 9 ( TYPE_NAME 9 wchar_t LEAF_NODE 10 wchar_t LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 ALLOCA ( 50 * sizeof ( wchar_t ) ) CALLEE 10 ALLOCA LEAF_NODE 11 ALLOCA LEAF_NODE 10 ( ARGUMENT 10 50 * sizeof ( wchar_t ) FIELD 11 50 LEAF_NODE 12 50 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( wchar_t ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 wchar_t FIELD 13 wchar_t LEAF_NODE 14 wchar_t LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * dataGoodBuffer ; dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 5 wchar_t * dataGoodBuffer ; dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 dataGoodBuffer LEAF_NODE 7 dataGoodBuffer LEAF_NODE 6 ; INIT 6 dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 7 dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 8 dataGoodBuffer NAME 9 dataGoodBuffer LEAF_NODE 10 dataGoodBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 9 ( TYPE_NAME 9 wchar_t LEAF_NODE 10 wchar_t LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 10 ALLOCA LEAF_NODE 11 ALLOCA LEAF_NODE 10 ( ARGUMENT 10 100 * sizeof ( wchar_t ) FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( wchar_t ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 wchar_t FIELD 13 wchar_t LEAF_NODE 14 wchar_t LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataGoodBuffer ; EXPR 5 data = dataGoodBuffer ASSIGN 6 data = dataGoodBuffer LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataGoodBuffer FIELD 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 0 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataMap [ 0 ] = data ; EXPR 5 dataMap [ 0 ] = data ASSIGN 6 dataMap [ 0 ] = data LVAL 7 dataMap [ 0 ] FIELD 8 dataMap [ 0 ] LEAF_NODE 9 dataMap LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 dataMap [ 1 ] = data ; EXPR 5 dataMap [ 1 ] = data ASSIGN 6 dataMap [ 1 ] = data LVAL 7 dataMap [ 1 ] FIELD 8 dataMap [ 1 ] LEAF_NODE 9 dataMap LEAF_NODE 9 [ EXPR 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 dataMap [ 2 ] = data ; EXPR 5 dataMap [ 2 ] = data ASSIGN 6 dataMap [ 2 ] = data LVAL 7 dataMap [ 2 ] FIELD 8 dataMap [ 2 ] LEAF_NODE 9 dataMap LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( dataMap ) ; EXPR 5 goodG2BSink ( dataMap ) FUNCTION_CALL 6 goodG2BSink ( dataMap ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( ARGUMENT 7 dataMap FIELD 8 dataMap LEAF_NODE 9 dataMap LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_74 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_74 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 123, "project": "cwe119_ast_vul_function_test_adv_122", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_18_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_18_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 10 ] dataBadBuffer ; VAR_DECL 4 wchar_t [ 10 ] dataBadBuffer TYPE 5 wchar_t [ 10 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 10 ] LEAF_NODE 7 [ FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 10 + 1 ] dataGoodBuffer ; VAR_DECL 4 wchar_t [ 10 + 1 ] dataGoodBuffer TYPE 5 wchar_t [ 10 + 1 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 10 + 1 ] LEAF_NODE 7 [ FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 7 + FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; JUMP_STATEMENT 3 goto source ; KEYWORD 4 goto LEAF_NODE 5 goto DESTINATION 4 source LEAF_NODE 5 source LEAF_NODE 4 ; LABEL 3 source : LEAF_NODE 4 source LEAF_NODE 4 : EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 5 wchar_t [ 10 + 1 ] source ; source = SRC_STRING TYPE 6 wchar_t [ 10 + 1 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 10 + 1 ] LEAF_NODE 8 [ FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 6 ; INIT 6 source = SRC_STRING ASSIGN 7 source = SRC_STRING LVAL 8 source NAME 9 source LEAF_NODE 10 source ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 SRC_STRING FIELD 9 SRC_STRING LEAF_NODE 10 SRC_STRING LEAF_NODE 5 ; EXPR_STATEMENT 4 wcscpy ( data , source ) ; EXPR 5 wcscpy ( data , source ) FUNCTION_CALL 6 wcscpy ( data , source ) CALLEE 7 wcscpy LEAF_NODE 8 wcscpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 10 ] dataBadBuffer ; VAR_DECL 4 wchar_t [ 10 ] dataBadBuffer TYPE 5 wchar_t [ 10 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 10 ] LEAF_NODE 7 [ FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 10 + 1 ] dataGoodBuffer ; VAR_DECL 4 wchar_t [ 10 + 1 ] dataGoodBuffer TYPE 5 wchar_t [ 10 + 1 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 10 + 1 ] LEAF_NODE 7 [ FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 7 + FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; JUMP_STATEMENT 3 goto source ; KEYWORD 4 goto LEAF_NODE 5 goto DESTINATION 4 source LEAF_NODE 5 source LEAF_NODE 4 ; LABEL 3 source : LEAF_NODE 4 source LEAF_NODE 4 : EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 5 wchar_t [ 10 + 1 ] source ; source = SRC_STRING TYPE 6 wchar_t [ 10 + 1 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 10 + 1 ] LEAF_NODE 8 [ FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 6 ; INIT 6 source = SRC_STRING ASSIGN 7 source = SRC_STRING LVAL 8 source NAME 9 source LEAF_NODE 10 source ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 SRC_STRING FIELD 9 SRC_STRING LEAF_NODE 10 SRC_STRING LEAF_NODE 5 ; EXPR_STATEMENT 4 wcscpy ( data , source ) ; EXPR 5 wcscpy ( data , source ) FUNCTION_CALL 6 wcscpy ( data , source ) CALLEE 7 wcscpy LEAF_NODE 8 wcscpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_18_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_18_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_18_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_18_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_18_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_18_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_18_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_18_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_18_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_18_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_18_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_18_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 124, "project": "cwe119_ast_vul_function_test_adv_36", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_alloca_ncpy_63b_badSink LEAF_NODE 3 CWE124_Buffer_Underwrite__char_alloca_ncpy_63b_badSink PARAMETER_LIST 2 ( char * * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * * dataPtr TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_alloca_ncpy_63_bad LEAF_NODE 3 CWE124_Buffer_Underwrite__char_alloca_ncpy_63_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer - 8 ; EXPR 4 data = dataBuffer - 8 ASSIGN 5 data = dataBuffer - 8 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer - 8 FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 7 - FIELD 7 8 LEAF_NODE 8 8 LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__char_alloca_ncpy_63b_badSink ( & data ) ; EXPR 4 CWE124_Buffer_Underwrite__char_alloca_ncpy_63b_badSink ( & data ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__char_alloca_ncpy_63b_badSink ( & data ) CALLEE 6 CWE124_Buffer_Underwrite__char_alloca_ncpy_63b_badSink LEAF_NODE 7 CWE124_Buffer_Underwrite__char_alloca_ncpy_63b_badSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_alloca_ncpy_63b_goodG2BSink LEAF_NODE 3 CWE124_Buffer_Underwrite__char_alloca_ncpy_63b_goodG2BSink PARAMETER_LIST 2 ( char * * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * * data TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__char_alloca_ncpy_63b_goodG2BSink ( & data ) ; EXPR 4 CWE124_Buffer_Underwrite__char_alloca_ncpy_63b_goodG2BSink ( & data ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__char_alloca_ncpy_63b_goodG2BSink ( & data ) CALLEE 6 CWE124_Buffer_Underwrite__char_alloca_ncpy_63b_goodG2BSink LEAF_NODE 7 CWE124_Buffer_Underwrite__char_alloca_ncpy_63b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_alloca_ncpy_63_good LEAF_NODE 3 CWE124_Buffer_Underwrite__char_alloca_ncpy_63_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__char_alloca_ncpy_63_good ( ) ; EXPR 4 CWE124_Buffer_Underwrite__char_alloca_ncpy_63_good ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__char_alloca_ncpy_63_good ( ) CALLEE 6 CWE124_Buffer_Underwrite__char_alloca_ncpy_63_good LEAF_NODE 7 CWE124_Buffer_Underwrite__char_alloca_ncpy_63_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__char_alloca_ncpy_63_bad ( ) ; EXPR 4 CWE124_Buffer_Underwrite__char_alloca_ncpy_63_bad ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__char_alloca_ncpy_63_bad ( ) CALLEE 6 CWE124_Buffer_Underwrite__char_alloca_ncpy_63_bad LEAF_NODE 7 CWE124_Buffer_Underwrite__char_alloca_ncpy_63_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 125, "project": "cwe119_ast_vul_function_test_adv_93", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51b_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBadBuffer ; dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBadBuffer ; dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ASSIGN 6 dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 50 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 50 * sizeof ( wchar_t ) FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataGoodBuffer ; dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataGoodBuffer ; dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51b_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51b_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51b_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51b_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51b_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBadBuffer ; dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBadBuffer ; dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 5 ; INIT 5 dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ASSIGN 6 dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) LVAL 7 dataBadBuffer NAME 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 50 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 50 * sizeof ( wchar_t ) FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataGoodBuffer ; dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataGoodBuffer ; dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 5 ; INIT 5 dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 7 dataGoodBuffer NAME 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51b_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51b_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51b_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 126, "project": "cwe119_ast_vul_function_test_adv_50", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_64b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_64b_badSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * dataPtr ; dataPtr = ( wchar_t * * ) dataVoidPtr ; VAR_DECL 4 wchar_t * dataPtr ; dataPtr = ( wchar_t * * ) dataVoidPtr TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( wchar_t * * ) dataVoidPtr ASSIGN 6 dataPtr = ( wchar_t * * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * data ; data = ( * dataPtr ) ; VAR_DECL 4 wchar_t * data ; data = ( * dataPtr ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 wchar_t LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 \"\" ; EXPR 5 \"\" FIELD 6 \"\" LEAF_NODE 7 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncat ( dest , data , wcslen ( data ) ) ; EXPR 5 wcsncat ( dest , data , wcslen ( data ) ) FUNCTION_CALL 6 wcsncat ( dest , data , wcslen ( data ) ) CALLEE 7 wcsncat LEAF_NODE 8 wcsncat LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 wcslen ( data ) FUNCTION_CALL 8 wcslen ( data ) CALLEE 9 wcslen LEAF_NODE 10 wcslen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_64b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_64b_goodG2BSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * dataPtr ; dataPtr = ( wchar_t * * ) dataVoidPtr ; VAR_DECL 4 wchar_t * dataPtr ; dataPtr = ( wchar_t * * ) dataVoidPtr TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( wchar_t * * ) dataVoidPtr ASSIGN 6 dataPtr = ( wchar_t * * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * data ; data = ( * dataPtr ) ; VAR_DECL 4 wchar_t * data ; data = ( * dataPtr ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 wchar_t LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 \"\" ; EXPR 5 \"\" FIELD 6 \"\" LEAF_NODE 7 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncat ( dest , data , wcslen ( data ) ) ; EXPR 5 wcsncat ( dest , data , wcslen ( data ) ) FUNCTION_CALL 6 wcsncat ( dest , data , wcslen ( data ) ) CALLEE 7 wcsncat LEAF_NODE 8 wcsncat LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 wcslen ( data ) FUNCTION_CALL 8 wcslen ( data ) CALLEE 9 wcslen LEAF_NODE 10 wcslen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 127, "project": "cwe119_ast_vul_function_test_adv_173", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__wchar_t_declare_cpy_17_bad LEAF_NODE 3 CWE124_Buffer_Underwrite__wchar_t_declare_cpy_17_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int i ; VAR_DECL 4 int i TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 100 ] dataBuffer ; VAR_DECL 4 wchar_t [ 100 ] dataBuffer TYPE 5 wchar_t [ 100 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 dataBuffer LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 dataBuffer LEAF_NODE 3 [ LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < 1 EXPR 5 i < 1 FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 i ++ EXPR 5 i ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBuffer - 8 ; EXPR 7 data = dataBuffer - 8 ASSIGN 8 data = dataBuffer - 8 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer - 8 FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 10 - FIELD 10 8 LEAF_NODE 11 8 LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcscpy ( data , source ) ; EXPR 5 wcscpy ( data , source ) FUNCTION_CALL 6 wcscpy ( data , source ) CALLEE 7 wcscpy LEAF_NODE 8 wcscpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int h ; VAR_DECL 4 int h TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 h LEAF_NODE 6 h LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 100 ] dataBuffer ; VAR_DECL 4 wchar_t [ 100 ] dataBuffer TYPE 5 wchar_t [ 100 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 dataBuffer LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 dataBuffer LEAF_NODE 3 [ LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 h = 0 ; EXPR 5 h = 0 ASSIGN 6 h = 0 LVAL 7 h FIELD 8 h LEAF_NODE 9 h ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 h < 1 EXPR 5 h < 1 FIELD 6 h LEAF_NODE 7 h REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 h ++ EXPR 5 h ++ FIELD 6 h ++ LEAF_NODE 7 h LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBuffer ; EXPR 7 data = dataBuffer ASSIGN 8 data = dataBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcscpy ( data , source ) ; EXPR 5 wcscpy ( data , source ) FUNCTION_CALL 6 wcscpy ( data , source ) CALLEE 7 wcscpy LEAF_NODE 8 wcscpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__wchar_t_declare_cpy_17_good LEAF_NODE 3 CWE124_Buffer_Underwrite__wchar_t_declare_cpy_17_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__wchar_t_declare_cpy_17_good ( ) ; EXPR 4 CWE124_Buffer_Underwrite__wchar_t_declare_cpy_17_good ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__wchar_t_declare_cpy_17_good ( ) CALLEE 6 CWE124_Buffer_Underwrite__wchar_t_declare_cpy_17_good LEAF_NODE 7 CWE124_Buffer_Underwrite__wchar_t_declare_cpy_17_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__wchar_t_declare_cpy_17_bad ( ) ; EXPR 4 CWE124_Buffer_Underwrite__wchar_t_declare_cpy_17_bad ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__wchar_t_declare_cpy_17_bad ( ) CALLEE 6 CWE124_Buffer_Underwrite__wchar_t_declare_cpy_17_bad LEAF_NODE 7 CWE124_Buffer_Underwrite__wchar_t_declare_cpy_17_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 128, "project": "cwe119_ast_vul_function_test_adv_5", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_alloca_cpy_51b_badSink LEAF_NODE 3 CWE127_Buffer_Underread__char_alloca_cpy_51b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 * 2 ] dest ; VAR_DECL 5 char [ 100 * 2 ] dest TYPE 6 char [ 100 * 2 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 * 2 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 * FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( dest , 'C' , 100 * 2 - 1 ) ; EXPR 5 memset ( dest , 'C' , 100 * 2 - 1 ) FUNCTION_CALL 6 memset ( dest , 'C' , 100 * 2 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 * 2 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 * FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 100 * 2 - 1 ] = '\\0' ; EXPR 5 dest [ 100 * 2 - 1 ] = '\\0' ASSIGN 6 dest [ 100 * 2 - 1 ] = '\\0' LVAL 7 dest [ 100 * 2 - 1 ] FIELD 8 dest [ 100 * 2 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 100 * 2 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcpy ( dest , data ) ; EXPR 5 strcpy ( dest , data ) FUNCTION_CALL 6 strcpy ( dest , data ) CALLEE 7 strcpy LEAF_NODE 8 strcpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( dest ) ; EXPR 5 printLine ( dest ) FUNCTION_CALL 6 printLine ( dest ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_alloca_cpy_51b_goodG2BSink LEAF_NODE 3 CWE127_Buffer_Underread__char_alloca_cpy_51b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 * 2 ] dest ; VAR_DECL 5 char [ 100 * 2 ] dest TYPE 6 char [ 100 * 2 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 * 2 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 * FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( dest , 'C' , 100 * 2 - 1 ) ; EXPR 5 memset ( dest , 'C' , 100 * 2 - 1 ) FUNCTION_CALL 6 memset ( dest , 'C' , 100 * 2 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 * 2 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 * FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 100 * 2 - 1 ] = '\\0' ; EXPR 5 dest [ 100 * 2 - 1 ] = '\\0' ASSIGN 6 dest [ 100 * 2 - 1 ] = '\\0' LVAL 7 dest [ 100 * 2 - 1 ] FIELD 8 dest [ 100 * 2 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 100 * 2 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcpy ( dest , data ) ; EXPR 5 strcpy ( dest , data ) FUNCTION_CALL 6 strcpy ( dest , data ) CALLEE 7 strcpy LEAF_NODE 8 strcpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( dest ) ; EXPR 5 printLine ( dest ) FUNCTION_CALL 6 printLine ( dest ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 129, "project": "cwe119_ast_vul_function_test_adv_130", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_declare_ncpy_54e_badSink LEAF_NODE 3 CWE127_Buffer_Underread__char_declare_ncpy_54e_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_declare_ncpy_54d_badSink LEAF_NODE 3 CWE127_Buffer_Underread__char_declare_ncpy_54d_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE127_Buffer_Underread__char_declare_ncpy_54e_badSink ( data ) ; EXPR 4 CWE127_Buffer_Underread__char_declare_ncpy_54e_badSink ( data ) FUNCTION_CALL 5 CWE127_Buffer_Underread__char_declare_ncpy_54e_badSink ( data ) CALLEE 6 CWE127_Buffer_Underread__char_declare_ncpy_54e_badSink LEAF_NODE 7 CWE127_Buffer_Underread__char_declare_ncpy_54e_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_declare_ncpy_54e_goodG2BSink LEAF_NODE 3 CWE127_Buffer_Underread__char_declare_ncpy_54e_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_declare_ncpy_54d_goodG2BSink LEAF_NODE 3 CWE127_Buffer_Underread__char_declare_ncpy_54d_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE127_Buffer_Underread__char_declare_ncpy_54e_goodG2BSink ( data ) ; EXPR 4 CWE127_Buffer_Underread__char_declare_ncpy_54e_goodG2BSink ( data ) FUNCTION_CALL 5 CWE127_Buffer_Underread__char_declare_ncpy_54e_goodG2BSink ( data ) CALLEE 6 CWE127_Buffer_Underread__char_declare_ncpy_54e_goodG2BSink LEAF_NODE 7 CWE127_Buffer_Underread__char_declare_ncpy_54e_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 130, "project": "cwe119_ast_vul_function_test_adv_116", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52c_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52c_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52c_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52c_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52c_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52c_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52c_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52c_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52c_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52c_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52c_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52c_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52c_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52c_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 131, "project": "cwe119_ast_vul_function_test_adv_58", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_cpy_67 { typedef struct _structType BASE_CLASSES { char * structFirst ; } structType ; void badSink ( structType myStruct ) { char * data ; data = myStruct . structFirst ; { char [ 10 + 1 ] source ; source = SRC_STRING ; strcpy ( data , source ) ; printLine ( data ) ; delete [ ] data ; } } void goodG2BSink ( structType myStruct ) { char * data ; data = myStruct . structFirst ; { char [ 10 + 1 ] source ; source = SRC_STRING ; strcpy ( data , source ) ; printLine ( data ) ; delete [ ] data ; } } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_cpy_67 LEAF_NODE 2 { LEAF_NODE 2 typedef SIMPLE_DECL 2 struct _structType BASE_CLASSES { char * structFirst ; } structType ; VAR_DECL 3 struct _structType BASE_CLASSES { char * structFirst ; } structType TYPE 4 struct _structType BASE_CLASSES { char * structFirst ; } CLASS_DEF 5 struct _structType BASE_CLASSES { char * structFirst ; } LEAF_NODE 6 struct CLASS_NAME 6 _structType LEAF_NODE 7 _structType LEAF_NODE 6 BASE_CLASSES LEAF_NODE 6 { CLASS_CONTENT 6 char * structFirst ; SIMPLE_DECL 7 char * structFirst ; VAR_DECL 8 char * structFirst TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 structFirst LEAF_NODE 10 structFirst LEAF_NODE 8 ; LEAF_NODE 6 } NAME 4 structType LEAF_NODE 5 structType LEAF_NODE 3 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( structType myStruct ) LEAF_NODE 4 ( PARAMETER_DECL 4 structType myStruct TYPE 5 structType TYPE_NAME 6 structType LEAF_NODE 7 structType NAME 5 myStruct LEAF_NODE 6 myStruct LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = myStruct . structFirst ; VAR_DECL 5 char * data ; data = myStruct . structFirst TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = myStruct . structFirst ASSIGN 7 data = myStruct . structFirst LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 myStruct . structFirst FIELD 9 myStruct . structFirst LEAF_NODE 10 myStruct LEAF_NODE 10 . LEAF_NODE 10 structFirst LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 6 char [ 10 + 1 ] source ; source = SRC_STRING TYPE 7 char [ 10 + 1 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 10 + 1 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 7 ; INIT 7 source = SRC_STRING ASSIGN 8 source = SRC_STRING LVAL 9 source NAME 10 source LEAF_NODE 11 source ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SRC_STRING FIELD 10 SRC_STRING LEAF_NODE 11 SRC_STRING LEAF_NODE 6 ; EXPR_STATEMENT 5 strcpy ( data , source ) ; EXPR 6 strcpy ( data , source ) FUNCTION_CALL 7 strcpy ( data , source ) CALLEE 8 strcpy LEAF_NODE 9 strcpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( structType myStruct ) LEAF_NODE 4 ( PARAMETER_DECL 4 structType myStruct TYPE 5 structType TYPE_NAME 6 structType LEAF_NODE 7 structType NAME 5 myStruct LEAF_NODE 6 myStruct LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = myStruct . structFirst ; VAR_DECL 5 char * data ; data = myStruct . structFirst TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = myStruct . structFirst ASSIGN 7 data = myStruct . structFirst LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 myStruct . structFirst FIELD 9 myStruct . structFirst LEAF_NODE 10 myStruct LEAF_NODE 10 . LEAF_NODE 10 structFirst LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 6 char [ 10 + 1 ] source ; source = SRC_STRING TYPE 7 char [ 10 + 1 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 10 + 1 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 7 ; INIT 7 source = SRC_STRING ASSIGN 8 source = SRC_STRING LVAL 9 source NAME 10 source LEAF_NODE 11 source ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SRC_STRING FIELD 10 SRC_STRING LEAF_NODE 11 SRC_STRING LEAF_NODE 6 ; EXPR_STATEMENT 5 strcpy ( data , source ) ; EXPR 6 strcpy ( data , source ) FUNCTION_CALL 7 strcpy ( data , source ) CALLEE 8 strcpy LEAF_NODE 9 strcpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 data ; EXPR 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 132, "project": "cwe119_ast_vul_function_test_adv_188", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 wchar_t * CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_badData ; VAR_DECL 2 wchar_t * CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_badData TYPE 3 wchar_t * TYPE_NAME 4 wchar_t LEAF_NODE 5 wchar_t POINTER 4 * LEAF_NODE 5 * NAME 3 CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_badData LEAF_NODE 4 CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_badData LEAF_NODE 2 ; SIMPLE_DECL 1 wchar_t * CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_goodG2BData ; VAR_DECL 2 wchar_t * CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_goodG2BData TYPE 3 wchar_t * TYPE_NAME 4 wchar_t LEAF_NODE 5 wchar_t POINTER 4 * LEAF_NODE 5 * NAME 3 CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_goodG2BData LEAF_NODE 4 CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_goodG2BData LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68b_badSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68b_badSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_badData ; VAR_DECL 4 wchar_t * data ; data = CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_badData TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_badData ASSIGN 6 data = CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_badData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_badData FIELD 8 CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_badData LEAF_NODE 9 CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_badData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcscpy ( data , source ) ; EXPR 5 wcscpy ( data , source ) FUNCTION_CALL 6 wcscpy ( data , source ) CALLEE 7 wcscpy LEAF_NODE 8 wcscpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68b_goodG2BSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68b_goodG2BSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_goodG2BData ; VAR_DECL 4 wchar_t * data ; data = CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_goodG2BData TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_goodG2BData ASSIGN 6 data = CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_goodG2BData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_goodG2BData FIELD 8 CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_goodG2BData LEAF_NODE 9 CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68_goodG2BData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcscpy ( data , source ) ; EXPR 5 wcscpy ( data , source ) FUNCTION_CALL 6 wcscpy ( data , source ) CALLEE 7 wcscpy LEAF_NODE 8 wcscpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 133, "project": "cwe119_ast_vul_function_test_adv_156", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65b_badSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 char LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65b_badSink ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65b_badSink FIELD 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65b_badSink LEAF_NODE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65b_badSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 10 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 10 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 10 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 10 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 10 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 10 * sizeof ( char ) FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65b_goodG2BSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 char LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65b_goodG2BSink ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65b_goodG2BSink FIELD 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65b_goodG2BSink LEAF_NODE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65b_goodG2BSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( ( 10 + 1 ) * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 ( 10 + 1 ) * sizeof ( char ) LEAF_NODE 9 ( FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ) LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 134, "project": "cwe119_ast_vul_function_test_adv_104", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_13_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_13_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE == 5 EXPR 5 GLOBAL_CONST_FIVE == 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 memset ( data , 'A' , 100 - 1 ) ; EXPR 7 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 8 memset ( data , 'A' , 100 - 1 ) CALLEE 9 memset LEAF_NODE 10 memset LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 'A' FIELD 10 'A' LEAF_NODE 11 'A' LEAF_NODE 9 , ARGUMENT 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 data [ 100 - 1 ] = '\\0' ; EXPR 7 data [ 100 - 1 ] = '\\0' ASSIGN 8 data [ 100 - 1 ] = '\\0' LVAL 9 data [ 100 - 1 ] FIELD 10 data [ 100 - 1 ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 100 - 1 FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 SNPRINTF ( dest , strlen ( data ) , \"%s\" , data ) ; EXPR 5 SNPRINTF ( dest , strlen ( data ) , \"%s\" , data ) FUNCTION_CALL 6 SNPRINTF ( dest , strlen ( data ) , \"%s\" , data ) CALLEE 7 SNPRINTF LEAF_NODE 8 SNPRINTF LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 strlen ( data ) FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 \"%s\" FIELD 8 \"%s\" LEAF_NODE 9 \"%s\" LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE != 5 EXPR 5 GLOBAL_CONST_FIVE != 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 memset ( data , 'A' , 50 - 1 ) ; EXPR 7 memset ( data , 'A' , 50 - 1 ) FUNCTION_CALL 8 memset ( data , 'A' , 50 - 1 ) CALLEE 9 memset LEAF_NODE 10 memset LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 'A' FIELD 10 'A' LEAF_NODE 11 'A' LEAF_NODE 9 , ARGUMENT 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 data [ 50 - 1 ] = '\\0' ; EXPR 7 data [ 50 - 1 ] = '\\0' ASSIGN 8 data [ 50 - 1 ] = '\\0' LVAL 9 data [ 50 - 1 ] FIELD 10 data [ 50 - 1 ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 50 - 1 FIELD 12 50 LEAF_NODE 13 50 LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 SNPRINTF ( dest , strlen ( data ) , \"%s\" , data ) ; EXPR 5 SNPRINTF ( dest , strlen ( data ) , \"%s\" , data ) FUNCTION_CALL 6 SNPRINTF ( dest , strlen ( data ) , \"%s\" , data ) CALLEE 7 SNPRINTF LEAF_NODE 8 SNPRINTF LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 strlen ( data ) FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 \"%s\" FIELD 8 \"%s\" LEAF_NODE 9 \"%s\" LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE == 5 EXPR 5 GLOBAL_CONST_FIVE == 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 memset ( data , 'A' , 50 - 1 ) ; EXPR 7 memset ( data , 'A' , 50 - 1 ) FUNCTION_CALL 8 memset ( data , 'A' , 50 - 1 ) CALLEE 9 memset LEAF_NODE 10 memset LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 'A' FIELD 10 'A' LEAF_NODE 11 'A' LEAF_NODE 9 , ARGUMENT 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 data [ 50 - 1 ] = '\\0' ; EXPR 7 data [ 50 - 1 ] = '\\0' ASSIGN 8 data [ 50 - 1 ] = '\\0' LVAL 9 data [ 50 - 1 ] FIELD 10 data [ 50 - 1 ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 50 - 1 FIELD 12 50 LEAF_NODE 13 50 LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 SNPRINTF ( dest , strlen ( data ) , \"%s\" , data ) ; EXPR 5 SNPRINTF ( dest , strlen ( data ) , \"%s\" , data ) FUNCTION_CALL 6 SNPRINTF ( dest , strlen ( data ) , \"%s\" , data ) CALLEE 7 SNPRINTF LEAF_NODE 8 SNPRINTF LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 strlen ( data ) FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 \"%s\" FIELD 8 \"%s\" LEAF_NODE 9 \"%s\" LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_13_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_13_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_13_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_13_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_13_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_13_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_13_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_13_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_13_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_13_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_13_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_13_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 135, "project": "cwe119_ast_vul_function_test_adv_18", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_74 { void badSink ( map < int , char * > dataMap ) { char * data ; data = dataMap [ 2 ] ; { char [ 50 ] dest ; dest = \"\" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\\0' ; printLine ( data ) ; } } void goodG2BSink ( map < int , char * > dataMap ) { char * data ; data = dataMap [ 2 ] ; { char [ 50 ] dest ; dest = \"\" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\\0' ; printLine ( data ) ; } } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_74 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( map < int , char * > dataMap ) LEAF_NODE 4 ( PARAMETER_DECL 4 map < int , char * > dataMap TYPE 5 map < int , char * > TYPE_NAME 6 map < int , char * > LEAF_NODE 7 map LEAF_NODE 7 < LEAF_NODE 7 int LEAF_NODE 7 , LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataMap LEAF_NODE 6 dataMap LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = dataMap [ 2 ] ; VAR_DECL 5 char * data ; data = dataMap [ 2 ] TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataMap [ 2 ] ASSIGN 7 data = dataMap [ 2 ] LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataMap [ 2 ] FIELD 9 dataMap [ 2 ] LEAF_NODE 10 dataMap LEAF_NODE 10 [ EXPR 10 2 FIELD 11 2 LEAF_NODE 12 2 LEAF_NODE 10 ] LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 6 char [ 50 ] dest ; dest = \"\" TYPE 7 char [ 50 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 50 ] LEAF_NODE 9 [ FIELD 9 50 LEAF_NODE 10 50 LEAF_NODE 9 ] NAME 7 dest LEAF_NODE 8 dest LEAF_NODE 7 ; INIT 7 dest = \"\" ASSIGN 8 dest = \"\" LVAL 9 dest NAME 10 dest LEAF_NODE 11 dest ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 \"\" FIELD 10 \"\" LEAF_NODE 11 \"\" LEAF_NODE 6 ; EXPR_STATEMENT 5 memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; EXPR 6 memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) FUNCTION_CALL 7 memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) CALLEE 8 memmove LEAF_NODE 9 memmove LEAF_NODE 8 ( ARGUMENT 8 dest FIELD 9 dest LEAF_NODE 10 dest LEAF_NODE 8 , ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 strlen ( data ) * sizeof ( char ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 dest [ 50 - 1 ] = '\\0' ; EXPR 6 dest [ 50 - 1 ] = '\\0' ASSIGN 7 dest [ 50 - 1 ] = '\\0' LVAL 8 dest [ 50 - 1 ] FIELD 9 dest [ 50 - 1 ] LEAF_NODE 10 dest LEAF_NODE 10 [ EXPR 10 50 - 1 FIELD 11 50 LEAF_NODE 12 50 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( map < int , char * > dataMap ) LEAF_NODE 4 ( PARAMETER_DECL 4 map < int , char * > dataMap TYPE 5 map < int , char * > TYPE_NAME 6 map < int , char * > LEAF_NODE 7 map LEAF_NODE 7 < LEAF_NODE 7 int LEAF_NODE 7 , LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataMap LEAF_NODE 6 dataMap LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = dataMap [ 2 ] ; VAR_DECL 5 char * data ; data = dataMap [ 2 ] TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataMap [ 2 ] ASSIGN 7 data = dataMap [ 2 ] LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataMap [ 2 ] FIELD 9 dataMap [ 2 ] LEAF_NODE 10 dataMap LEAF_NODE 10 [ EXPR 10 2 FIELD 11 2 LEAF_NODE 12 2 LEAF_NODE 10 ] LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 6 char [ 50 ] dest ; dest = \"\" TYPE 7 char [ 50 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 50 ] LEAF_NODE 9 [ FIELD 9 50 LEAF_NODE 10 50 LEAF_NODE 9 ] NAME 7 dest LEAF_NODE 8 dest LEAF_NODE 7 ; INIT 7 dest = \"\" ASSIGN 8 dest = \"\" LVAL 9 dest NAME 10 dest LEAF_NODE 11 dest ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 \"\" FIELD 10 \"\" LEAF_NODE 11 \"\" LEAF_NODE 6 ; EXPR_STATEMENT 5 memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; EXPR 6 memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) FUNCTION_CALL 7 memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) CALLEE 8 memmove LEAF_NODE 9 memmove LEAF_NODE 8 ( ARGUMENT 8 dest FIELD 9 dest LEAF_NODE 10 dest LEAF_NODE 8 , ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 strlen ( data ) * sizeof ( char ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 dest [ 50 - 1 ] = '\\0' ; EXPR 6 dest [ 50 - 1 ] = '\\0' ASSIGN 7 dest [ 50 - 1 ] = '\\0' LVAL 8 dest [ 50 - 1 ] FIELD 9 dest [ 50 - 1 ] LEAF_NODE 10 dest LEAF_NODE 10 [ EXPR 10 50 - 1 FIELD 11 50 LEAF_NODE 12 50 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 136, "project": "cwe119_ast_vul_function_test_adv_107", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 char * CWE124_Buffer_Underwrite__char_declare_cpy_68_badData ; VAR_DECL 2 char * CWE124_Buffer_Underwrite__char_declare_cpy_68_badData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE124_Buffer_Underwrite__char_declare_cpy_68_badData LEAF_NODE 4 CWE124_Buffer_Underwrite__char_declare_cpy_68_badData LEAF_NODE 2 ; SIMPLE_DECL 1 char * CWE124_Buffer_Underwrite__char_declare_cpy_68_goodG2BData ; VAR_DECL 2 char * CWE124_Buffer_Underwrite__char_declare_cpy_68_goodG2BData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE124_Buffer_Underwrite__char_declare_cpy_68_goodG2BData LEAF_NODE 4 CWE124_Buffer_Underwrite__char_declare_cpy_68_goodG2BData LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_declare_cpy_68b_badSink LEAF_NODE 3 CWE124_Buffer_Underwrite__char_declare_cpy_68b_badSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = CWE124_Buffer_Underwrite__char_declare_cpy_68_badData ; VAR_DECL 4 char * data ; data = CWE124_Buffer_Underwrite__char_declare_cpy_68_badData TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE124_Buffer_Underwrite__char_declare_cpy_68_badData ASSIGN 6 data = CWE124_Buffer_Underwrite__char_declare_cpy_68_badData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE124_Buffer_Underwrite__char_declare_cpy_68_badData FIELD 8 CWE124_Buffer_Underwrite__char_declare_cpy_68_badData LEAF_NODE 9 CWE124_Buffer_Underwrite__char_declare_cpy_68_badData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcpy ( data , source ) ; EXPR 5 strcpy ( data , source ) FUNCTION_CALL 6 strcpy ( data , source ) CALLEE 7 strcpy LEAF_NODE 8 strcpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_declare_cpy_68b_goodG2BSink LEAF_NODE 3 CWE124_Buffer_Underwrite__char_declare_cpy_68b_goodG2BSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = CWE124_Buffer_Underwrite__char_declare_cpy_68_goodG2BData ; VAR_DECL 4 char * data ; data = CWE124_Buffer_Underwrite__char_declare_cpy_68_goodG2BData TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE124_Buffer_Underwrite__char_declare_cpy_68_goodG2BData ASSIGN 6 data = CWE124_Buffer_Underwrite__char_declare_cpy_68_goodG2BData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE124_Buffer_Underwrite__char_declare_cpy_68_goodG2BData FIELD 8 CWE124_Buffer_Underwrite__char_declare_cpy_68_goodG2BData LEAF_NODE 9 CWE124_Buffer_Underwrite__char_declare_cpy_68_goodG2BData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcpy ( data , source ) ; EXPR 5 strcpy ( data , source ) FUNCTION_CALL 6 strcpy ( data , source ) CALLEE 7 strcpy LEAF_NODE 8 strcpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 137, "project": "cwe119_ast_vul_function_test_adv_171", "target": 1}
{"func": "NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_54 { void badSink_d ( char * data ) { STATEMENTS } ; void badSink_c ( char * data ) { badSink_d ( data ) ; } void goodG2BSink_d ( char * data ) { STATEMENTS } ; void goodG2BSink_c ( char * data ) { goodG2BSink_d ( data ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_54 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink_d LEAF_NODE 4 badSink_d PARAMETER_LIST 3 ( char * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink_c LEAF_NODE 4 badSink_c PARAMETER_LIST 3 ( char * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 badSink_d ( data ) ; EXPR 5 badSink_d ( data ) FUNCTION_CALL 6 badSink_d ( data ) CALLEE 7 badSink_d LEAF_NODE 8 badSink_d LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink_d LEAF_NODE 4 goodG2BSink_d PARAMETER_LIST 3 ( char * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink_c LEAF_NODE 4 goodG2BSink_c PARAMETER_LIST 3 ( char * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2BSink_d ( data ) ; EXPR 5 goodG2BSink_d ( data ) FUNCTION_CALL 6 goodG2BSink_d ( data ) CALLEE 7 goodG2BSink_d LEAF_NODE 8 goodG2BSink_d LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 138, "project": "cwe119_ast_vul_function_test_adv_92", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_64b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_64b_badSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * dataPtr ; dataPtr = ( char * * ) dataVoidPtr ; VAR_DECL 4 char * dataPtr ; dataPtr = ( char * * ) dataVoidPtr TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( char * * ) dataVoidPtr ASSIGN 6 dataPtr = ( char * * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 char * data ; data = ( * dataPtr ) ; VAR_DECL 4 char * data ; data = ( * dataPtr ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcat ( data , source ) ; EXPR 5 strcat ( data , source ) FUNCTION_CALL 6 strcat ( data , source ) CALLEE 7 strcat LEAF_NODE 8 strcat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_64b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_64b_goodG2BSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * dataPtr ; dataPtr = ( char * * ) dataVoidPtr ; VAR_DECL 4 char * dataPtr ; dataPtr = ( char * * ) dataVoidPtr TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( char * * ) dataVoidPtr ASSIGN 6 dataPtr = ( char * * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 char * data ; data = ( * dataPtr ) ; VAR_DECL 4 char * data ; data = ( * dataPtr ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcat ( data , source ) ; EXPR 5 strcat ( data , source ) FUNCTION_CALL 6 strcat ( data , source ) CALLEE 7 strcat LEAF_NODE 8 strcat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 139, "project": "cwe119_ast_vul_function_test_adv_63", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLongLongLine LEAF_NODE 3 printLongLongLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLongLongLine LEAF_NODE 3 printLongLongLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLongLongLine LEAF_NODE 3 printLongLongLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLongLongLine LEAF_NODE 3 printLongLongLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLongLongLine LEAF_NODE 3 printLongLongLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLongLongLine LEAF_NODE 3 printLongLongLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_72 { void badSink ( vector < int64_t * > dataVector ) { int64_t * data ; data = dataVector [ 2 ] ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; free ( data ) ; } } void goodG2BSink ( vector < int64_t * > dataVector ) { int64_t * data ; data = dataVector [ 2 ] ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; free ( data ) ; } } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_72 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( vector < int64_t * > dataVector ) LEAF_NODE 4 ( PARAMETER_DECL 4 vector < int64_t * > dataVector TYPE 5 vector < int64_t * > TYPE_NAME 6 vector < int64_t * > LEAF_NODE 7 vector LEAF_NODE 7 < LEAF_NODE 7 int64_t LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataVector LEAF_NODE 6 dataVector LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int64_t * data ; data = dataVector [ 2 ] ; VAR_DECL 5 int64_t * data ; data = dataVector [ 2 ] TYPE 6 int64_t * TYPE_NAME 7 int64_t LEAF_NODE 8 int64_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataVector [ 2 ] ASSIGN 7 data = dataVector [ 2 ] LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataVector [ 2 ] FIELD 9 dataVector [ 2 ] LEAF_NODE 10 dataVector LEAF_NODE 10 [ EXPR 10 2 FIELD 11 2 LEAF_NODE 12 2 LEAF_NODE 10 ] LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 int64_t LEAF_NODE 5 source LEAF_NODE 5 [ LEAF_NODE 5 100 LEAF_NODE 5 ] LEAF_NODE 5 = LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 0 LEAF_NODE 5 } LEAF_NODE 5 ; EXPR_STATEMENT 5 memmove ( data , source , 100 * sizeof ( int64_t ) ) ; EXPR 6 memmove ( data , source , 100 * sizeof ( int64_t ) ) FUNCTION_CALL 7 memmove ( data , source , 100 * sizeof ( int64_t ) ) CALLEE 8 memmove LEAF_NODE 9 memmove LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 * sizeof ( int64_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( int64_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 int64_t FIELD 11 int64_t LEAF_NODE 12 int64_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLongLongLine ( data [ 0 ] ) ; EXPR 6 printLongLongLine ( data [ 0 ] ) FUNCTION_CALL 7 printLongLongLine ( data [ 0 ] ) CALLEE 8 printLongLongLine LEAF_NODE 9 printLongLongLine LEAF_NODE 8 ( ARGUMENT 8 data [ 0 ] FIELD 9 data [ 0 ] LEAF_NODE 10 data LEAF_NODE 10 [ EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ] LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 free ( data ) ; EXPR 6 free ( data ) FUNCTION_CALL 7 free ( data ) CALLEE 8 free LEAF_NODE 9 free LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( vector < int64_t * > dataVector ) LEAF_NODE 4 ( PARAMETER_DECL 4 vector < int64_t * > dataVector TYPE 5 vector < int64_t * > TYPE_NAME 6 vector < int64_t * > LEAF_NODE 7 vector LEAF_NODE 7 < LEAF_NODE 7 int64_t LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataVector LEAF_NODE 6 dataVector LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int64_t * data ; data = dataVector [ 2 ] ; VAR_DECL 5 int64_t * data ; data = dataVector [ 2 ] TYPE 6 int64_t * TYPE_NAME 7 int64_t LEAF_NODE 8 int64_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataVector [ 2 ] ASSIGN 7 data = dataVector [ 2 ] LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataVector [ 2 ] FIELD 9 dataVector [ 2 ] LEAF_NODE 10 dataVector LEAF_NODE 10 [ EXPR 10 2 FIELD 11 2 LEAF_NODE 12 2 LEAF_NODE 10 ] LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 int64_t LEAF_NODE 5 source LEAF_NODE 5 [ LEAF_NODE 5 100 LEAF_NODE 5 ] LEAF_NODE 5 = LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 0 LEAF_NODE 5 } LEAF_NODE 5 ; EXPR_STATEMENT 5 memmove ( data , source , 100 * sizeof ( int64_t ) ) ; EXPR 6 memmove ( data , source , 100 * sizeof ( int64_t ) ) FUNCTION_CALL 7 memmove ( data , source , 100 * sizeof ( int64_t ) ) CALLEE 8 memmove LEAF_NODE 9 memmove LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 * sizeof ( int64_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( int64_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 int64_t FIELD 11 int64_t LEAF_NODE 12 int64_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLongLongLine ( data [ 0 ] ) ; EXPR 6 printLongLongLine ( data [ 0 ] ) FUNCTION_CALL 7 printLongLongLine ( data [ 0 ] ) CALLEE 8 printLongLongLine LEAF_NODE 9 printLongLongLine LEAF_NODE 8 ( ARGUMENT 8 data [ 0 ] FIELD 9 data [ 0 ] LEAF_NODE 10 data LEAF_NODE 10 [ EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ] LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 free ( data ) ; EXPR 6 free ( data ) FUNCTION_CALL 7 free ( data ) CALLEE 8 free LEAF_NODE 9 free LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 140, "project": "cwe119_ast_vul_function_test_adv_190", "target": 1}
{"func": "SIMPLE_DECL 1 struct CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_base BASE_CLASSES { bool action ( ) { STATEMENTS } ; bool action ( bool a ) { STATEMENTS } ; bool action ( bool a , bool b ) { STATEMENTS } ; bool action ( bool a , bool b , bool c ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } ; CLASS_DEF 2 struct CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_base BASE_CLASSES { bool action ( ) { STATEMENTS } ; bool action ( bool a ) { STATEMENTS } ; bool action ( bool a , bool b ) { STATEMENTS } ; bool action ( bool a , bool b , bool c ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } CLASS_DEF 3 struct CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_base BASE_CLASSES { bool action ( ) { STATEMENTS } ; bool action ( bool a ) { STATEMENTS } ; bool action ( bool a , bool b ) { STATEMENTS } ; bool action ( bool a , bool b , bool c ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } LEAF_NODE 4 struct CLASS_NAME 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_base LEAF_NODE 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_base LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 bool action ( ) { STATEMENTS } ; bool action ( bool a ) { STATEMENTS } ; bool action ( bool a , bool b ) { STATEMENTS } ; bool action ( bool a , bool b , bool c ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; FUNCTION_DEF 5 RETURN_TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool FUNCTION_NAME 6 action LEAF_NODE 7 action PARAMETER_LIST 6 ( ) LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 RETURN_TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool FUNCTION_NAME 6 action LEAF_NODE 7 action PARAMETER_LIST 6 ( bool a ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 RETURN_TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool FUNCTION_NAME 6 action LEAF_NODE 7 action PARAMETER_LIST 6 ( bool a , bool b ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 RETURN_TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool FUNCTION_NAME 6 action LEAF_NODE 7 action PARAMETER_LIST 6 ( bool a , bool b , bool c ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 RETURN_TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool FUNCTION_NAME 6 action LEAF_NODE 7 action PARAMETER_LIST 6 ( bool a , bool b , bool c , bool d ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 , PARAMETER_DECL 7 bool d TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 d LEAF_NODE 9 d LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 RETURN_TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool FUNCTION_NAME 6 action LEAF_NODE 7 action PARAMETER_LIST 6 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 , PARAMETER_DECL 7 bool d TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 d LEAF_NODE 9 d LEAF_NODE 7 , PARAMETER_DECL 7 bool e TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 e LEAF_NODE 9 e LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B : CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_base { RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } ; CLASS_DEF 2 struct CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B : CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_base { RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } CLASS_DEF 3 struct CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B : CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_base { RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } LEAF_NODE 4 struct CLASS_NAME 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B LEAF_NODE 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B BASE_CLASSES 4 : CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_base LEAF_NODE 5 : LEAF_NODE 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_base LEAF_NODE 4 { CLASS_CONTENT 4 RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B PARAMETER_LIST 6 ( ) LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B PARAMETER_LIST 6 ( bool a ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B PARAMETER_LIST 6 ( bool a , bool b ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B PARAMETER_LIST 6 ( bool a , bool b , bool c ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B PARAMETER_LIST 6 ( bool a , bool b , bool c , bool d ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 , PARAMETER_DECL 7 bool d TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 d LEAF_NODE 9 d LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B PARAMETER_LIST 6 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 , PARAMETER_DECL 7 bool d TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 d LEAF_NODE 9 d LEAF_NODE 7 , PARAMETER_DECL 7 bool e TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 e LEAF_NODE 9 e LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad : CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_base { RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } ; CLASS_DEF 2 struct CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad : CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_base { RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } CLASS_DEF 3 struct CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad : CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_base { RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } LEAF_NODE 4 struct CLASS_NAME 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad LEAF_NODE 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad BASE_CLASSES 4 : CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_base LEAF_NODE 5 : LEAF_NODE 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_base LEAF_NODE 4 { CLASS_CONTENT 4 RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad PARAMETER_LIST 6 ( ) LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad PARAMETER_LIST 6 ( bool a ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad PARAMETER_LIST 6 ( bool a , bool b ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad PARAMETER_LIST 6 ( bool a , bool b , bool c ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad PARAMETER_LIST 6 ( bool a , bool b , bool c , bool d ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 , PARAMETER_DECL 7 bool d TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 d LEAF_NODE 9 d LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad PARAMETER_LIST 6 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 , PARAMETER_DECL 7 bool d TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 d LEAF_NODE 9 d LEAF_NODE 7 , PARAMETER_DECL 7 bool e TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 e LEAF_NODE 9 e LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82 { void bad ( ) { char * data ; char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\\0' ; CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_base * baseObject = new CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ; baseObject -> action ( data ) ; delete baseObject ; } static void goodG2B ( ) { char * data ; char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\\0' ; CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_base * baseObject = new CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ; baseObject -> action ( data ) ; delete baseObject ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 5 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 dataBuffer LEAF_NODE 7 dataBuffer LEAF_NODE 6 ; INIT 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 7 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 8 dataBuffer NAME 9 dataBuffer LEAF_NODE 10 dataBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 9 ( TYPE_NAME 9 char LEAF_NODE 10 char LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 10 ALLOCA LEAF_NODE 11 ALLOCA LEAF_NODE 10 ( ARGUMENT 10 100 * sizeof ( char ) FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( char ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 char FIELD 13 char LEAF_NODE 14 char LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataBuffer ; EXPR 5 data = dataBuffer ASSIGN 6 data = dataBuffer LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataBuffer FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( data , 'A' , 100 - 1 ) ; EXPR 5 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 6 memset ( data , 'A' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 'A' FIELD 8 'A' LEAF_NODE 9 'A' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 100 - 1 ] = '\\0' ; EXPR 5 data [ 100 - 1 ] = '\\0' ASSIGN 6 data [ 100 - 1 ] = '\\0' LVAL 7 data [ 100 - 1 ] FIELD 8 data [ 100 - 1 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_base LEAF_NODE 4 * LEAF_NODE 4 baseObject LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad ; EXPR 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad FIELD 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_bad LEAF_NODE 5 ; EXPR_STATEMENT 4 baseObject -> action ( data ) ; EXPR 5 baseObject -> action ( data ) FUNCTION_CALL 6 baseObject -> action ( data ) CALLEE 7 baseObject -> action LEAF_NODE 8 baseObject LEAF_NODE 8 -> LEAF_NODE 8 action LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 delete EXPR_STATEMENT 4 baseObject ; EXPR 5 baseObject FIELD 6 baseObject LEAF_NODE 7 baseObject LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 5 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 dataBuffer LEAF_NODE 7 dataBuffer LEAF_NODE 6 ; INIT 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 7 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 8 dataBuffer NAME 9 dataBuffer LEAF_NODE 10 dataBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 9 ( TYPE_NAME 9 char LEAF_NODE 10 char LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 10 ALLOCA LEAF_NODE 11 ALLOCA LEAF_NODE 10 ( ARGUMENT 10 100 * sizeof ( char ) FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( char ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 char FIELD 13 char LEAF_NODE 14 char LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataBuffer ; EXPR 5 data = dataBuffer ASSIGN 6 data = dataBuffer LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataBuffer FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( data , 'A' , 50 - 1 ) ; EXPR 5 memset ( data , 'A' , 50 - 1 ) FUNCTION_CALL 6 memset ( data , 'A' , 50 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 'A' FIELD 8 'A' LEAF_NODE 9 'A' LEAF_NODE 7 , ARGUMENT 7 50 - 1 FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 50 - 1 ] = '\\0' ; EXPR 5 data [ 50 - 1 ] = '\\0' ASSIGN 6 data [ 50 - 1 ] = '\\0' LVAL 7 data [ 50 - 1 ] FIELD 8 data [ 50 - 1 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_base LEAF_NODE 4 * LEAF_NODE 4 baseObject LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B ; EXPR 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B FIELD 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82_goodG2B LEAF_NODE 5 ; EXPR_STATEMENT 4 baseObject -> action ( data ) ; EXPR 5 baseObject -> action ( data ) FUNCTION_CALL 6 baseObject -> action ( data ) CALLEE 7 baseObject -> action LEAF_NODE 8 baseObject LEAF_NODE 8 -> LEAF_NODE 8 action LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 delete EXPR_STATEMENT 4 baseObject ; EXPR 5 baseObject FIELD 6 baseObject LEAF_NODE 7 baseObject LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_82 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 141, "project": "cwe119_ast_vul_function_test_adv_124", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53c_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53c_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53c_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53c_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53c_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53c_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53c_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53c_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53c_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53c_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53c_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53c_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53c_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53c_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 142, "project": "cwe119_ast_vul_function_test_adv_131", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_14_bad LEAF_NODE 3 CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_14_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 100 ] dataBuffer ; VAR_DECL 4 wchar_t [ 100 ] dataBuffer TYPE 5 wchar_t [ 100 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 dataBuffer LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 dataBuffer LEAF_NODE 3 [ LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; SIMPLE_DECL 3 int globalFive ; VAR_DECL 4 int globalFive TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalFive LEAF_NODE 6 globalFive LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalFive == 5 EXPR 5 globalFive == 5 FIELD 6 globalFive LEAF_NODE 7 globalFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBuffer - 8 ; EXPR 7 data = dataBuffer - 8 ASSIGN 8 data = dataBuffer - 8 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer - 8 FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 10 - FIELD 10 8 LEAF_NODE 11 8 LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( data , source , 100 - 1 ) ; EXPR 5 wcsncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 wcsncpy ( data , source , 100 - 1 ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 100 ] dataBuffer ; VAR_DECL 4 wchar_t [ 100 ] dataBuffer TYPE 5 wchar_t [ 100 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 dataBuffer LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 dataBuffer LEAF_NODE 3 [ LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; SIMPLE_DECL 3 int globalFive ; VAR_DECL 4 int globalFive TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalFive LEAF_NODE 6 globalFive LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalFive != 5 EXPR 5 globalFive != 5 FIELD 6 globalFive LEAF_NODE 7 globalFive EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBuffer ; EXPR 7 data = dataBuffer ASSIGN 8 data = dataBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( data , source , 100 - 1 ) ; EXPR 5 wcsncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 wcsncpy ( data , source , 100 - 1 ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 100 ] dataBuffer ; VAR_DECL 4 wchar_t [ 100 ] dataBuffer TYPE 5 wchar_t [ 100 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 dataBuffer LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 dataBuffer LEAF_NODE 3 [ LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; SIMPLE_DECL 3 int globalFive ; VAR_DECL 4 int globalFive TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalFive LEAF_NODE 6 globalFive LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalFive == 5 EXPR 5 globalFive == 5 FIELD 6 globalFive LEAF_NODE 7 globalFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBuffer ; EXPR 7 data = dataBuffer ASSIGN 8 data = dataBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( data , source , 100 - 1 ) ; EXPR 5 wcsncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 wcsncpy ( data , source , 100 - 1 ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_14_good LEAF_NODE 3 CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_14_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_14_good ( ) ; EXPR 4 CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_14_good ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_14_good ( ) CALLEE 6 CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_14_good LEAF_NODE 7 CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_14_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_14_bad ( ) ; EXPR 4 CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_14_bad ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_14_bad ( ) CALLEE 6 CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_14_bad LEAF_NODE 7 CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_14_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 143, "project": "cwe119_ast_vul_function_test_adv_22", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal ; CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal = 0 ; VAR_DECL 2 int CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal ; CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal LEAF_NODE 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal LEAF_NODE 3 ; INIT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal = 0 ASSIGN 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal = 0 LVAL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badSource LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal = 1 ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal = 1 ASSIGN 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal = 1 LVAL 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal FIELD 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal LEAF_NODE 8 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badGlobal ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badSource ( data ) ; EXPR 4 data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badSource ( data ) ASSIGN 5 data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badSource ( data ) FUNCTION_CALL 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badSource ( data ) CALLEE 8 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badSource LEAF_NODE 9 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_badSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 SNPRINTF ( data , 100 , \"%s\" , source ) ; EXPR 5 SNPRINTF ( data , 100 , \"%s\" , source ) FUNCTION_CALL 6 SNPRINTF ( data , 100 , \"%s\" , source ) CALLEE 7 SNPRINTF LEAF_NODE 8 SNPRINTF LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 , ARGUMENT 7 \"%s\" FIELD 8 \"%s\" LEAF_NODE 9 \"%s\" LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } SIMPLE_DECL 1 int CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Global ; CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Global = 0 ; VAR_DECL 2 int CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Global ; CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Global = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Global LEAF_NODE 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Global LEAF_NODE 3 ; INIT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Global = 0 ASSIGN 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Global = 0 LVAL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Global NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Global LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Global ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; SIMPLE_DECL 1 int CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Global ; CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Global = 0 ; VAR_DECL 2 int CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Global ; CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Global = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Global LEAF_NODE 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Global LEAF_NODE 3 ; INIT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Global = 0 ASSIGN 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Global = 0 LVAL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Global NAME 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Global LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Global ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Source LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Source PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Global = 0 ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Global = 0 ASSIGN 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Global = 0 LVAL 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Global FIELD 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Global LEAF_NODE 8 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Global ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Source ( data ) ; EXPR 4 data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Source ( data ) ASSIGN 5 data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Source ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Source ( data ) FUNCTION_CALL 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Source ( data ) CALLEE 8 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Source LEAF_NODE 9 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B1Source LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 SNPRINTF ( data , 100 , \"%s\" , source ) ; EXPR 5 SNPRINTF ( data , 100 , \"%s\" , source ) FUNCTION_CALL 6 SNPRINTF ( data , 100 , \"%s\" , source ) CALLEE 7 SNPRINTF LEAF_NODE 8 SNPRINTF LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 , ARGUMENT 7 \"%s\" FIELD 8 \"%s\" LEAF_NODE 9 \"%s\" LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Source LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Source PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Global = 1 ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Global = 1 ASSIGN 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Global = 1 LVAL 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Global FIELD 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Global LEAF_NODE 8 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Global ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Source ( data ) ; EXPR 4 data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Source ( data ) ASSIGN 5 data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Source ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Source ( data ) FUNCTION_CALL 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Source ( data ) CALLEE 8 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Source LEAF_NODE 9 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_goodG2B2Source LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 SNPRINTF ( data , 100 , \"%s\" , source ) ; EXPR 5 SNPRINTF ( data , 100 , \"%s\" , source ) FUNCTION_CALL 6 SNPRINTF ( data , 100 , \"%s\" , source ) CALLEE 7 SNPRINTF LEAF_NODE 8 SNPRINTF LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 , ARGUMENT 7 \"%s\" FIELD 8 \"%s\" LEAF_NODE 9 \"%s\" LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 144, "project": "cwe119_ast_vul_function_test_adv_67", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 badSink LEAF_NODE 3 badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcpy ( data , source ) ; EXPR 5 strcpy ( data , source ) FUNCTION_CALL 6 strcpy ( data , source ) CALLEE 7 strcpy LEAF_NODE 8 strcpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_declare_cpy_44_bad LEAF_NODE 3 CWE124_Buffer_Underwrite__char_declare_cpy_44_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 char LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 badSink ; EXPR 4 badSink FIELD 5 badSink LEAF_NODE 6 badSink LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; VAR_DECL 4 char [ 100 ] dataBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer - 8 ; EXPR 4 data = dataBuffer - 8 ASSIGN 5 data = dataBuffer - 8 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer - 8 FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 7 - FIELD 7 8 LEAF_NODE 8 8 LEAF_NODE 4 ; EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2BSink LEAF_NODE 3 goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcpy ( data , source ) ; EXPR 5 strcpy ( data , source ) FUNCTION_CALL 6 strcpy ( data , source ) CALLEE 7 strcpy LEAF_NODE 8 strcpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 char LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 goodG2BSink ; EXPR 4 goodG2BSink FIELD 5 goodG2BSink LEAF_NODE 6 goodG2BSink LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; VAR_DECL 4 char [ 100 ] dataBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_declare_cpy_44_good LEAF_NODE 3 CWE124_Buffer_Underwrite__char_declare_cpy_44_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__char_declare_cpy_44_good ( ) ; EXPR 4 CWE124_Buffer_Underwrite__char_declare_cpy_44_good ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__char_declare_cpy_44_good ( ) CALLEE 6 CWE124_Buffer_Underwrite__char_declare_cpy_44_good LEAF_NODE 7 CWE124_Buffer_Underwrite__char_declare_cpy_44_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE124_Buffer_Underwrite__char_declare_cpy_44_bad ( ) ; EXPR 4 CWE124_Buffer_Underwrite__char_declare_cpy_44_bad ( ) FUNCTION_CALL 5 CWE124_Buffer_Underwrite__char_declare_cpy_44_bad ( ) CALLEE 6 CWE124_Buffer_Underwrite__char_declare_cpy_44_bad LEAF_NODE 7 CWE124_Buffer_Underwrite__char_declare_cpy_44_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 145, "project": "cwe119_ast_vul_function_test_adv_9", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_badSink PARAMETER_LIST 2 ( int data ) LEAF_NODE 3 ( PARAMETER_DECL 3 int data TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54d_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54d_badSink PARAMETER_LIST 2 ( int data ) LEAF_NODE 3 ( PARAMETER_DECL 3 int data TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodG2BSink PARAMETER_LIST 2 ( int data ) LEAF_NODE 3 ( PARAMETER_DECL 3 int data TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54d_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54d_goodG2BSink PARAMETER_LIST 2 ( int data ) LEAF_NODE 3 ( PARAMETER_DECL 3 int data TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodB2GSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodB2GSink PARAMETER_LIST 2 ( int data ) LEAF_NODE 3 ( PARAMETER_DECL 3 int data TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54d_goodB2GSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54d_goodB2GSink PARAMETER_LIST 2 ( int data ) LEAF_NODE 3 ( PARAMETER_DECL 3 int data TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodB2GSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodB2GSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodB2GSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodB2GSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 146, "project": "cwe119_ast_vul_function_test_adv_169", "target": 1}
{"func": "USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_ncat_72 { void badSink ( vector < char * > dataVector ) { STATEMENTS } ; void bad ( ) { char * data ; vector < char * > dataVector ; data = NULL ; data = new char [ 50 ] ; data [ 0 ] = '\\0' ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; badSink ( dataVector ) ; } void goodG2BSink ( vector < char * > dataVector ) { STATEMENTS } ; static void goodG2B ( ) { char * data ; vector < char * > dataVector ; data = NULL ; data = new char [ 100 ] ; data [ 0 ] = '\\0' ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; goodG2BSink ( dataVector ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_ncat_72 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( vector < char * > dataVector ) LEAF_NODE 4 ( PARAMETER_DECL 4 vector < char * > dataVector TYPE 5 vector < char * > TYPE_NAME 6 vector < char * > LEAF_NODE 7 vector LEAF_NODE 7 < LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataVector LEAF_NODE 6 dataVector LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 vector < char * > dataVector ; VAR_DECL 5 vector < char * > dataVector TYPE 6 vector < char * > TYPE_NAME 7 vector < char * > LEAF_NODE 8 vector LEAF_NODE 8 < LEAF_NODE 8 char LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataVector LEAF_NODE 7 dataVector LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 char [ 50 ] ; EXPR 5 char [ 50 ] FIELD 6 char [ 50 ] LEAF_NODE 7 char LEAF_NODE 7 [ EXPR 7 50 FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 7 ] LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 0 ] = '\\0' ; EXPR 5 data [ 0 ] = '\\0' ASSIGN 6 data [ 0 ] = '\\0' LVAL 7 data [ 0 ] FIELD 8 data [ 0 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( dataVector ) ; EXPR 5 badSink ( dataVector ) FUNCTION_CALL 6 badSink ( dataVector ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( ARGUMENT 7 dataVector FIELD 8 dataVector LEAF_NODE 9 dataVector LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( vector < char * > dataVector ) LEAF_NODE 4 ( PARAMETER_DECL 4 vector < char * > dataVector TYPE 5 vector < char * > TYPE_NAME 6 vector < char * > LEAF_NODE 7 vector LEAF_NODE 7 < LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataVector LEAF_NODE 6 dataVector LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 vector < char * > dataVector ; VAR_DECL 5 vector < char * > dataVector TYPE 6 vector < char * > TYPE_NAME 7 vector < char * > LEAF_NODE 8 vector LEAF_NODE 8 < LEAF_NODE 8 char LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataVector LEAF_NODE 7 dataVector LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 char [ 100 ] ; EXPR 5 char [ 100 ] FIELD 6 char [ 100 ] LEAF_NODE 7 char LEAF_NODE 7 [ EXPR 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 ] LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 0 ] = '\\0' ; EXPR 5 data [ 0 ] = '\\0' ASSIGN 6 data [ 0 ] = '\\0' LVAL 7 data [ 0 ] FIELD 8 data [ 0 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( dataVector ) ; EXPR 5 goodG2BSink ( dataVector ) FUNCTION_CALL 6 goodG2BSink ( dataVector ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( ARGUMENT 7 dataVector FIELD 8 dataVector LEAF_NODE 9 dataVector LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_ncat_72 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_ncat_72 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 147, "project": "cwe119_ast_vul_function_test_adv_88", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52c_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52c_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52b_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52c_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52c_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52c_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52c_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52c_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52c_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52c_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52b_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52c_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52c_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52c_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52c_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52c_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 148, "project": "cwe119_ast_vul_function_test_adv_103", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_badSink PARAMETER_LIST 2 ( int data ) LEAF_NODE 3 ( PARAMETER_DECL 3 int data TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54b_badSink PARAMETER_LIST 2 ( int data ) LEAF_NODE 3 ( PARAMETER_DECL 3 int data TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodG2BSink PARAMETER_LIST 2 ( int data ) LEAF_NODE 3 ( PARAMETER_DECL 3 int data TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54b_goodG2BSink PARAMETER_LIST 2 ( int data ) LEAF_NODE 3 ( PARAMETER_DECL 3 int data TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodB2GSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodB2GSink PARAMETER_LIST 2 ( int data ) LEAF_NODE 3 ( PARAMETER_DECL 3 int data TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54b_goodB2GSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54b_goodB2GSink PARAMETER_LIST 2 ( int data ) LEAF_NODE 3 ( PARAMETER_DECL 3 int data TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodB2GSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodB2GSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodB2GSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodB2GSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 149, "project": "cwe119_ast_vul_function_test_adv_115", "target": 1}
{"func": "SIMPLE_DECL 1 struct CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_base BASE_CLASSES { bool action ( ) { STATEMENTS } ; LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData action ( bool a ) { STATEMENTS } ; bool action ( bool a , bool b ) { STATEMENTS } ; bool action ( bool a , bool b , bool c ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } ; CLASS_DEF 2 struct CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_base BASE_CLASSES { bool action ( ) { STATEMENTS } ; bool action ( bool a ) { STATEMENTS } ; bool action ( bool a , bool b ) { STATEMENTS } ; bool action ( bool a , bool b , bool c ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } CLASS_DEF 3 struct CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_base BASE_CLASSES { bool action ( ) { STATEMENTS } ; bool action ( bool a ) { STATEMENTS } ; bool action ( bool a , bool b ) { STATEMENTS } ; bool action ( bool a , bool b , bool c ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } LEAF_NODE 4 struct CLASS_NAME 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_base LEAF_NODE 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_base LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 bool action ( ) { STATEMENTS } ; bool action ( bool a ) { STATEMENTS } ; bool action ( bool a , bool b ) { STATEMENTS } ; bool action ( bool a , bool b , bool c ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; bool action ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; FUNCTION_DEF 5 EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof RETURN_TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool FUNCTION_NAME 6 action LEAF_NODE 7 action PARAMETER_LIST 6 ( ) LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 RETURN_TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool FUNCTION_NAME 6 action LEAF_NODE 7 action PARAMETER_LIST 6 ( bool a ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 RETURN_TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool FUNCTION_NAME 6 action LEAF_NODE 7 action PARAMETER_LIST 6 ( bool a , bool b ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 RETURN_TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool FUNCTION_NAME 6 action LEAF_NODE 7 action PARAMETER_LIST 6 ( bool a , bool b , bool c ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 RETURN_TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool FUNCTION_NAME 6 action LEAF_NODE 7 action PARAMETER_LIST 6 ( bool a , bool b , bool c , bool d ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 , PARAMETER_DECL 7 bool d TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 d LEAF_NODE 9 d LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 RETURN_TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool FUNCTION_NAME 6 action LEAF_NODE 7 action PARAMETER_LIST 6 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 , PARAMETER_DECL 7 bool d TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 d LEAF_NODE 9 d LEAF_NODE 7 , PARAMETER_DECL 7 bool e TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 e LEAF_NODE 9 e LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B : CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_base { RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } ; CLASS_DEF 2 struct CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B : CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_base { RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } CLASS_DEF 3 struct CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B : CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_base { RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } LEAF_NODE 4 struct CLASS_NAME 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B LEAF_NODE 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B BASE_CLASSES 4 : CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_base LEAF_NODE 5 : LEAF_NODE 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_base LEAF_NODE 4 { CLASS_CONTENT 4 RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B PARAMETER_LIST 6 ( ) LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B PARAMETER_LIST 6 ( bool a ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B PARAMETER_LIST 6 ( bool a , bool b ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B PARAMETER_LIST 6 ( bool a , bool b , bool c ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B PARAMETER_LIST 6 ( bool a , bool b , bool c , bool d ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 , PARAMETER_DECL 7 bool d TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 d LEAF_NODE 9 d LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B PARAMETER_LIST 6 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 , PARAMETER_DECL 7 bool d TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 d LEAF_NODE 9 d LEAF_NODE 7 , PARAMETER_DECL 7 bool e TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 e LEAF_NODE 9 e LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad : CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_base { RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } ; CLASS_DEF 2 struct CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad : CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_base { RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } CLASS_DEF 3 struct CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad : CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_base { RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; } LEAF_NODE 4 struct CLASS_NAME 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad LEAF_NODE 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad BASE_CLASSES 4 : CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_base LEAF_NODE 5 : LEAF_NODE 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_base LEAF_NODE 4 { CLASS_CONTENT 4 RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a , bool b ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a , bool b , bool c ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a , bool b , bool c , bool d ) { STATEMENTS } ; RETURN_TYPE CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ( bool a , bool b , bool c , bool d , bool e ) { STATEMENTS } ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad PARAMETER_LIST 6 ( ) LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad PARAMETER_LIST 6 ( bool a ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad PARAMETER_LIST 6 ( bool a , bool b ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad PARAMETER_LIST 6 ( bool a , bool b , bool c ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad PARAMETER_LIST 6 ( bool a , bool b , bool c , bool d ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 , PARAMETER_DECL 7 bool d TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 d LEAF_NODE 9 d LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; FUNCTION_DEF 5 LEAF_NODE 6 RETURN_TYPE FUNCTION_NAME 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad PARAMETER_LIST 6 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 7 ( PARAMETER_DECL 7 bool a TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 a LEAF_NODE 9 a LEAF_NODE 7 , PARAMETER_DECL 7 bool b TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 b LEAF_NODE 9 b LEAF_NODE 7 , PARAMETER_DECL 7 bool c TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 c LEAF_NODE 9 c LEAF_NODE 7 , PARAMETER_DECL 7 bool d TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 d LEAF_NODE 9 d LEAF_NODE 7 , PARAMETER_DECL 7 bool e TYPE 8 bool TYPE_NAME 9 bool LEAF_NODE 10 bool NAME 8 e LEAF_NODE 9 e LEAF_NODE 7 ) LEAF_NODE 6 { LEAF_NODE 6 STATEMENTS LEAF_NODE 6 } LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82 { void bad ( ) { wchar_t * data ; wchar_t [ 100 ] dataBuffer ; data = dataBuffer ; wmemset ( data , L 'A' , 100 - 1 ) ; data [ 100 - 1 ] = L '\\0' ; CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_base * baseObject = new CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ; baseObject -> action ( data ) ; delete baseObject ; } static void goodG2B ( ) { wchar_t * data ; wchar_t [ 100 ] dataBuffer ; data = dataBuffer ; wmemset ( data , L 'A' , 50 - 1 ) ; data [ 50 - 1 ] = L '\\0' ; CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_base * baseObject = new CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ; baseObject -> action ( data ) ; delete baseObject ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t [ 100 ] dataBuffer ; VAR_DECL 5 wchar_t [ 100 ] dataBuffer TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 dataBuffer LEAF_NODE 7 dataBuffer LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataBuffer ; EXPR 5 data = dataBuffer ASSIGN 6 data = dataBuffer LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataBuffer FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'A' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_base LEAF_NODE 4 * LEAF_NODE 4 baseObject LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad ; EXPR 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad FIELD 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_bad LEAF_NODE 5 ; EXPR_STATEMENT 4 baseObject -> action ( data ) ; EXPR 5 baseObject -> action ( data ) FUNCTION_CALL 6 baseObject -> action ( data ) CALLEE 7 baseObject -> action LEAF_NODE 8 baseObject LEAF_NODE 8 -> LEAF_NODE 8 action LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 delete EXPR_STATEMENT 4 baseObject ; EXPR 5 baseObject FIELD 6 baseObject LEAF_NODE 7 baseObject LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t [ 100 ] dataBuffer ; VAR_DECL 5 wchar_t [ 100 ] dataBuffer TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 dataBuffer LEAF_NODE 7 dataBuffer LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataBuffer ; EXPR 5 data = dataBuffer ASSIGN 6 data = dataBuffer LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataBuffer FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'A' LEAF_NODE 4 , LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_base LEAF_NODE 4 * LEAF_NODE 4 baseObject LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B ; EXPR 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B FIELD 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82_goodG2B LEAF_NODE 5 ; EXPR_STATEMENT 4 baseObject -> action ( data ) ; EXPR 5 baseObject -> action ( data ) FUNCTION_CALL 6 baseObject -> action ( data ) CALLEE 7 baseObject -> action LEAF_NODE 8 baseObject LEAF_NODE 8 -> LEAF_NODE 8 action LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 delete EXPR_STATEMENT 4 baseObject ; EXPR 5 baseObject FIELD 6 baseObject LEAF_NODE 7 baseObject LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_82 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 150, "project": "cwe119_ast_vul_function_test_adv_12", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLongLongLine LEAF_NODE 3 printLongLongLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLongLongLine LEAF_NODE 3 printLongLongLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLongLongLine LEAF_NODE 3 printLongLongLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLongLongLine LEAF_NODE 3 printLongLongLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLongLongLine LEAF_NODE 3 printLongLongLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLongLongLine LEAF_NODE 3 printLongLongLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_73 { void badSink ( list < int64_t * > dataList ) { int64_t * data ; data = dataList . back ( ) ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; free ( data ) ; } } void goodG2BSink ( list < int64_t * > dataList ) { int64_t * data ; data = dataList . back ( ) ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; free ( data ) ; } } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_73 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( list < int64_t * > dataList ) LEAF_NODE 4 ( PARAMETER_DECL 4 list < int64_t * > dataList TYPE 5 list < int64_t * > TYPE_NAME 6 list < int64_t * > LEAF_NODE 7 list LEAF_NODE 7 < LEAF_NODE 7 int64_t LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataList LEAF_NODE 6 dataList LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int64_t * data ; data = dataList . back ( ) ; VAR_DECL 5 int64_t * data ; data = dataList . back ( ) TYPE 6 int64_t * TYPE_NAME 7 int64_t LEAF_NODE 8 int64_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataList . back ( ) ASSIGN 7 data = dataList . back ( ) LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataList . back ( ) FUNCTION_CALL 9 dataList . back ( ) CALLEE 10 dataList . back LEAF_NODE 11 dataList LEAF_NODE 11 . LEAF_NODE 11 back LEAF_NODE 10 ( LEAF_NODE 10 ) LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 int64_t LEAF_NODE 5 source LEAF_NODE 5 [ LEAF_NODE 5 100 LEAF_NODE 5 ] LEAF_NODE 5 = LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 0 LEAF_NODE 5 } LEAF_NODE 5 ; EXPR_STATEMENT 5 memmove ( data , source , 100 * sizeof ( int64_t ) ) ; EXPR 6 memmove ( data , source , 100 * sizeof ( int64_t ) ) FUNCTION_CALL 7 memmove ( data , source , 100 * sizeof ( int64_t ) ) CALLEE 8 memmove LEAF_NODE 9 memmove LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 * sizeof ( int64_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( int64_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 int64_t FIELD 11 int64_t LEAF_NODE 12 int64_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLongLongLine ( data [ 0 ] ) ; EXPR 6 printLongLongLine ( data [ 0 ] ) FUNCTION_CALL 7 printLongLongLine ( data [ 0 ] ) CALLEE 8 printLongLongLine LEAF_NODE 9 printLongLongLine LEAF_NODE 8 ( ARGUMENT 8 data [ 0 ] FIELD 9 data [ 0 ] LEAF_NODE 10 data LEAF_NODE 10 [ EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ] LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 free ( data ) ; EXPR 6 free ( data ) FUNCTION_CALL 7 free ( data ) CALLEE 8 free LEAF_NODE 9 free LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( list < int64_t * > dataList ) LEAF_NODE 4 ( PARAMETER_DECL 4 list < int64_t * > dataList TYPE 5 list < int64_t * > TYPE_NAME 6 list < int64_t * > LEAF_NODE 7 list LEAF_NODE 7 < LEAF_NODE 7 int64_t LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataList LEAF_NODE 6 dataList LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int64_t * data ; data = dataList . back ( ) ; VAR_DECL 5 int64_t * data ; data = dataList . back ( ) TYPE 6 int64_t * TYPE_NAME 7 int64_t LEAF_NODE 8 int64_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataList . back ( ) ASSIGN 7 data = dataList . back ( ) LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataList . back ( ) FUNCTION_CALL 9 dataList . back ( ) CALLEE 10 dataList . back LEAF_NODE 11 dataList LEAF_NODE 11 . LEAF_NODE 11 back LEAF_NODE 10 ( LEAF_NODE 10 ) LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 int64_t LEAF_NODE 5 source LEAF_NODE 5 [ LEAF_NODE 5 100 LEAF_NODE 5 ] LEAF_NODE 5 = LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 0 LEAF_NODE 5 } LEAF_NODE 5 ; EXPR_STATEMENT 5 memmove ( data , source , 100 * sizeof ( int64_t ) ) ; EXPR 6 memmove ( data , source , 100 * sizeof ( int64_t ) ) FUNCTION_CALL 7 memmove ( data , source , 100 * sizeof ( int64_t ) ) CALLEE 8 memmove LEAF_NODE 9 memmove LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 * sizeof ( int64_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( int64_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 int64_t FIELD 11 int64_t LEAF_NODE 12 int64_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 printLongLongLine ( data [ 0 ] ) ; EXPR 6 printLongLongLine ( data [ 0 ] ) FUNCTION_CALL 7 printLongLongLine ( data [ 0 ] ) CALLEE 8 printLongLongLine LEAF_NODE 9 printLongLongLine LEAF_NODE 8 ( ARGUMENT 8 data [ 0 ] FIELD 9 data [ 0 ] LEAF_NODE 10 data LEAF_NODE 10 [ EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ] LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 free ( data ) ; EXPR 6 free ( data ) FUNCTION_CALL 7 free ( data ) CALLEE 8 free LEAF_NODE 9 free LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 151, "project": "cwe119_ast_vul_function_test_adv_187", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 globalReturnsTrueOrFalse LEAF_NODE 3 globalReturnsTrueOrFalse PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_12_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_12_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsTrueOrFalse ( ) EXPR 5 globalReturnsTrueOrFalse ( ) FUNCTION_CALL 6 globalReturnsTrueOrFalse ( ) CALLEE 7 globalReturnsTrueOrFalse LEAF_NODE 8 globalReturnsTrueOrFalse LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 memset ( data , 'A' , 100 - 1 ) ; EXPR 7 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 8 memset ( data , 'A' , 100 - 1 ) CALLEE 9 memset LEAF_NODE 10 memset LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 'A' FIELD 10 'A' LEAF_NODE 11 'A' LEAF_NODE 9 , ARGUMENT 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 data [ 100 - 1 ] = '\\0' ; EXPR 7 data [ 100 - 1 ] = '\\0' ASSIGN 8 data [ 100 - 1 ] = '\\0' LVAL 9 data [ 100 - 1 ] FIELD 10 data [ 100 - 1 ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 100 - 1 FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 memset ( data , 'A' , 50 - 1 ) ; EXPR 7 memset ( data , 'A' , 50 - 1 ) FUNCTION_CALL 8 memset ( data , 'A' , 50 - 1 ) CALLEE 9 memset LEAF_NODE 10 memset LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 'A' FIELD 10 'A' LEAF_NODE 11 'A' LEAF_NODE 9 , ARGUMENT 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 data [ 50 - 1 ] = '\\0' ; EXPR 7 data [ 50 - 1 ] = '\\0' ASSIGN 8 data [ 50 - 1 ] = '\\0' LVAL 9 data [ 50 - 1 ] FIELD 10 data [ 50 - 1 ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 50 - 1 FIELD 12 50 LEAF_NODE 13 50 LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 strcpy ( dest , data ) ; EXPR 5 strcpy ( dest , data ) FUNCTION_CALL 6 strcpy ( dest , data ) CALLEE 7 strcpy LEAF_NODE 8 strcpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsTrueOrFalse ( ) EXPR 5 globalReturnsTrueOrFalse ( ) FUNCTION_CALL 6 globalReturnsTrueOrFalse ( ) CALLEE 7 globalReturnsTrueOrFalse LEAF_NODE 8 globalReturnsTrueOrFalse LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 memset ( data , 'A' , 50 - 1 ) ; EXPR 7 memset ( data , 'A' , 50 - 1 ) FUNCTION_CALL 8 memset ( data , 'A' , 50 - 1 ) CALLEE 9 memset LEAF_NODE 10 memset LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 'A' FIELD 10 'A' LEAF_NODE 11 'A' LEAF_NODE 9 , ARGUMENT 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 data [ 50 - 1 ] = '\\0' ; EXPR 7 data [ 50 - 1 ] = '\\0' ASSIGN 8 data [ 50 - 1 ] = '\\0' LVAL 9 data [ 50 - 1 ] FIELD 10 data [ 50 - 1 ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 50 - 1 FIELD 12 50 LEAF_NODE 13 50 LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 memset ( data , 'A' , 50 - 1 ) ; EXPR 7 memset ( data , 'A' , 50 - 1 ) FUNCTION_CALL 8 memset ( data , 'A' , 50 - 1 ) CALLEE 9 memset LEAF_NODE 10 memset LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 'A' FIELD 10 'A' LEAF_NODE 11 'A' LEAF_NODE 9 , ARGUMENT 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 data [ 50 - 1 ] = '\\0' ; EXPR 7 data [ 50 - 1 ] = '\\0' ASSIGN 8 data [ 50 - 1 ] = '\\0' LVAL 9 data [ 50 - 1 ] FIELD 10 data [ 50 - 1 ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 50 - 1 FIELD 12 50 LEAF_NODE 13 50 LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 strcpy ( dest , data ) ; EXPR 5 strcpy ( dest , data ) FUNCTION_CALL 6 strcpy ( dest , data ) CALLEE 7 strcpy LEAF_NODE 8 strcpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_12_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_12_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_12_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_12_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_12_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_12_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_12_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_12_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_12_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_12_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_12_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_12_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 152, "project": "cwe119_ast_vul_function_test_adv_40", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_alloca_ncpy_52b_badSink LEAF_NODE 3 CWE127_Buffer_Underread__char_alloca_ncpy_52b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_alloca_ncpy_52_bad LEAF_NODE 3 CWE127_Buffer_Underread__char_alloca_ncpy_52_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer - 8 ; EXPR 4 data = dataBuffer - 8 ASSIGN 5 data = dataBuffer - 8 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer - 8 FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 7 - FIELD 7 8 LEAF_NODE 8 8 LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__char_alloca_ncpy_52b_badSink ( data ) ; EXPR 4 CWE127_Buffer_Underread__char_alloca_ncpy_52b_badSink ( data ) FUNCTION_CALL 5 CWE127_Buffer_Underread__char_alloca_ncpy_52b_badSink ( data ) CALLEE 6 CWE127_Buffer_Underread__char_alloca_ncpy_52b_badSink LEAF_NODE 7 CWE127_Buffer_Underread__char_alloca_ncpy_52b_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_alloca_ncpy_52b_goodG2BSink LEAF_NODE 3 CWE127_Buffer_Underread__char_alloca_ncpy_52b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__char_alloca_ncpy_52b_goodG2BSink ( data ) ; EXPR 4 CWE127_Buffer_Underread__char_alloca_ncpy_52b_goodG2BSink ( data ) FUNCTION_CALL 5 CWE127_Buffer_Underread__char_alloca_ncpy_52b_goodG2BSink ( data ) CALLEE 6 CWE127_Buffer_Underread__char_alloca_ncpy_52b_goodG2BSink LEAF_NODE 7 CWE127_Buffer_Underread__char_alloca_ncpy_52b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_alloca_ncpy_52_good LEAF_NODE 3 CWE127_Buffer_Underread__char_alloca_ncpy_52_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__char_alloca_ncpy_52_good ( ) ; EXPR 4 CWE127_Buffer_Underread__char_alloca_ncpy_52_good ( ) FUNCTION_CALL 5 CWE127_Buffer_Underread__char_alloca_ncpy_52_good ( ) CALLEE 6 CWE127_Buffer_Underread__char_alloca_ncpy_52_good LEAF_NODE 7 CWE127_Buffer_Underread__char_alloca_ncpy_52_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__char_alloca_ncpy_52_bad ( ) ; EXPR 4 CWE127_Buffer_Underread__char_alloca_ncpy_52_bad ( ) FUNCTION_CALL 5 CWE127_Buffer_Underread__char_alloca_ncpy_52_bad ( ) CALLEE 6 CWE127_Buffer_Underread__char_alloca_ncpy_52_bad LEAF_NODE 7 CWE127_Buffer_Underread__char_alloca_ncpy_52_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 153, "project": "cwe119_ast_vul_function_test_adv_125", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53c_badSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53c_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53b_badSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53c_badSink ( data ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53c_badSink ( data ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53c_badSink ( data ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53c_badSink LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53c_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53c_goodG2BSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53c_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53b_goodG2BSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53c_goodG2BSink ( data ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53c_goodG2BSink ( data ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53c_goodG2BSink ( data ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53c_goodG2BSink LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53c_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 154, "project": "cwe119_ast_vul_function_test_adv_186", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE == 5 EXPR 5 GLOBAL_CONST_FIVE == 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = ( char * ) malloc ( 10 * sizeof ( char ) ) ; EXPR 7 data = ( char * ) malloc ( 10 * sizeof ( char ) ) ASSIGN 8 data = ( char * ) malloc ( 10 * sizeof ( char ) ) LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( char * ) malloc ( 10 * sizeof ( char ) ) LEAF_NODE 10 ( TYPE_NAME 10 char LEAF_NODE 11 char LEAF_NODE 10 * LEAF_NODE 10 ) FUNCTION_CALL 10 malloc ( 10 * sizeof ( char ) ) CALLEE 11 malloc LEAF_NODE 12 malloc LEAF_NODE 11 ( ARGUMENT 11 10 * sizeof ( char ) FIELD 12 10 LEAF_NODE 13 10 LEAF_NODE 12 * FUNCTION_CALL 12 sizeof ( char ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 char FIELD 14 char LEAF_NODE 15 char LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 5 char [ 10 + 1 ] source ; source = SRC_STRING TYPE 6 char [ 10 + 1 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 10 + 1 ] LEAF_NODE 8 [ FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 6 ; INIT 6 source = SRC_STRING ASSIGN 7 source = SRC_STRING LVAL 8 source NAME 9 source LEAF_NODE 10 source ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 SRC_STRING FIELD 9 SRC_STRING LEAF_NODE 10 SRC_STRING LEAF_NODE 5 ; EXPR_STATEMENT 4 memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; EXPR 5 memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) FUNCTION_CALL 6 memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) CALLEE 7 memcpy LEAF_NODE 8 memcpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 ( strlen ( source ) + 1 ) * sizeof ( char ) LEAF_NODE 8 ( FUNCTION_CALL 8 strlen ( source ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 source FIELD 10 source LEAF_NODE 11 source LEAF_NODE 9 ) LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 8 ) LEAF_NODE 8 * FUNCTION_CALL 8 sizeof ( char ) CALLEE 9 sizeof LEAF_NODE 10 sizeof LEAF_NODE 9 ( ARGUMENT 9 char FIELD 10 char LEAF_NODE 11 char LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE != 5 EXPR 5 GLOBAL_CONST_FIVE != 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) ; EXPR 7 data = ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) ASSIGN 8 data = ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) LEAF_NODE 10 ( TYPE_NAME 10 char LEAF_NODE 11 char LEAF_NODE 10 * LEAF_NODE 10 ) FUNCTION_CALL 10 malloc ( ( 10 + 1 ) * sizeof ( char ) ) CALLEE 11 malloc LEAF_NODE 12 malloc LEAF_NODE 11 ( ARGUMENT 11 ( 10 + 1 ) * sizeof ( char ) LEAF_NODE 12 ( FIELD 12 10 LEAF_NODE 13 10 LEAF_NODE 12 + FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 12 ) LEAF_NODE 12 * FUNCTION_CALL 12 sizeof ( char ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 char FIELD 14 char LEAF_NODE 15 char LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 5 char [ 10 + 1 ] source ; source = SRC_STRING TYPE 6 char [ 10 + 1 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 10 + 1 ] LEAF_NODE 8 [ FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 6 ; INIT 6 source = SRC_STRING ASSIGN 7 source = SRC_STRING LVAL 8 source NAME 9 source LEAF_NODE 10 source ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 SRC_STRING FIELD 9 SRC_STRING LEAF_NODE 10 SRC_STRING LEAF_NODE 5 ; EXPR_STATEMENT 4 memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; EXPR 5 memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) FUNCTION_CALL 6 memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) CALLEE 7 memcpy LEAF_NODE 8 memcpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 ( strlen ( source ) + 1 ) * sizeof ( char ) LEAF_NODE 8 ( FUNCTION_CALL 8 strlen ( source ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 source FIELD 10 source LEAF_NODE 11 source LEAF_NODE 9 ) LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 8 ) LEAF_NODE 8 * FUNCTION_CALL 8 sizeof ( char ) CALLEE 9 sizeof LEAF_NODE 10 sizeof LEAF_NODE 9 ( ARGUMENT 9 char FIELD 10 char LEAF_NODE 11 char LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE == 5 EXPR 5 GLOBAL_CONST_FIVE == 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) ; EXPR 7 data = ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) ASSIGN 8 data = ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) LEAF_NODE 10 ( TYPE_NAME 10 char LEAF_NODE 11 char LEAF_NODE 10 * LEAF_NODE 10 ) FUNCTION_CALL 10 malloc ( ( 10 + 1 ) * sizeof ( char ) ) CALLEE 11 malloc LEAF_NODE 12 malloc LEAF_NODE 11 ( ARGUMENT 11 ( 10 + 1 ) * sizeof ( char ) LEAF_NODE 12 ( FIELD 12 10 LEAF_NODE 13 10 LEAF_NODE 12 + FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 12 ) LEAF_NODE 12 * FUNCTION_CALL 12 sizeof ( char ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 char FIELD 14 char LEAF_NODE 15 char LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 5 char [ 10 + 1 ] source ; source = SRC_STRING TYPE 6 char [ 10 + 1 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 10 + 1 ] LEAF_NODE 8 [ FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 6 ; INIT 6 source = SRC_STRING ASSIGN 7 source = SRC_STRING LVAL 8 source NAME 9 source LEAF_NODE 10 source ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 SRC_STRING FIELD 9 SRC_STRING LEAF_NODE 10 SRC_STRING LEAF_NODE 5 ; EXPR_STATEMENT 4 memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; EXPR 5 memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) FUNCTION_CALL 6 memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) CALLEE 7 memcpy LEAF_NODE 8 memcpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 ( strlen ( source ) + 1 ) * sizeof ( char ) LEAF_NODE 8 ( FUNCTION_CALL 8 strlen ( source ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 source FIELD 10 source LEAF_NODE 11 source LEAF_NODE 9 ) LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 8 ) LEAF_NODE 8 * FUNCTION_CALL 8 sizeof ( char ) CALLEE 9 sizeof LEAF_NODE 10 sizeof LEAF_NODE 9 ( ARGUMENT 9 char FIELD 10 char LEAF_NODE 11 char LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 155, "project": "cwe119_ast_vul_function_test_adv_43", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int staticTrue ; staticTrue = 1 ; VAR_DECL 2 int staticTrue ; staticTrue = 1 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticTrue LEAF_NODE 4 staticTrue LEAF_NODE 3 ; INIT 3 staticTrue = 1 ASSIGN 4 staticTrue = 1 LVAL 5 staticTrue NAME 6 staticTrue LEAF_NODE 7 staticTrue ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 2 ; SIMPLE_DECL 1 int staticFalse ; staticFalse = 0 ; VAR_DECL 2 int staticFalse ; staticFalse = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticFalse LEAF_NODE 4 staticFalse LEAF_NODE 3 ; INIT 3 staticFalse = 0 ASSIGN 4 staticFalse = 0 LVAL 5 staticFalse NAME 6 staticFalse LEAF_NODE 7 staticFalse ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_alloca_ncpy_05_bad LEAF_NODE 3 CWE127_Buffer_Underread__char_alloca_ncpy_05_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticTrue EXPR 5 staticTrue FIELD 6 staticTrue LEAF_NODE 7 staticTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBuffer - 8 ; EXPR 7 data = dataBuffer - 8 ASSIGN 8 data = dataBuffer - 8 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer - 8 FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 10 - FIELD 10 8 LEAF_NODE 11 8 LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] dest ; VAR_DECL 5 char [ 100 ] dest TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( dest , 'C' , 100 - 1 ) ; EXPR 5 memset ( dest , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( dest , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 100 - 1 ] = '\\0' ; EXPR 5 dest [ 100 - 1 ] = '\\0' ASSIGN 6 dest [ 100 - 1 ] = '\\0' LVAL 7 dest [ 100 - 1 ] FIELD 8 dest [ 100 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncpy ( dest , data , strlen ( dest ) ) ; EXPR 5 strncpy ( dest , data , strlen ( dest ) ) FUNCTION_CALL 6 strncpy ( dest , data , strlen ( dest ) ) CALLEE 7 strncpy LEAF_NODE 8 strncpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( dest ) FUNCTION_CALL 8 strlen ( dest ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 dest FIELD 10 dest LEAF_NODE 11 dest LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 100 - 1 ] = '\\0' ; EXPR 5 dest [ 100 - 1 ] = '\\0' ASSIGN 6 dest [ 100 - 1 ] = '\\0' LVAL 7 dest [ 100 - 1 ] FIELD 8 dest [ 100 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( dest ) ; EXPR 5 printLine ( dest ) FUNCTION_CALL 6 printLine ( dest ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFalse EXPR 5 staticFalse FIELD 6 staticFalse LEAF_NODE 7 staticFalse LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBuffer ; EXPR 7 data = dataBuffer ASSIGN 8 data = dataBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] dest ; VAR_DECL 5 char [ 100 ] dest TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( dest , 'C' , 100 - 1 ) ; EXPR 5 memset ( dest , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( dest , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 100 - 1 ] = '\\0' ; EXPR 5 dest [ 100 - 1 ] = '\\0' ASSIGN 6 dest [ 100 - 1 ] = '\\0' LVAL 7 dest [ 100 - 1 ] FIELD 8 dest [ 100 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncpy ( dest , data , strlen ( dest ) ) ; EXPR 5 strncpy ( dest , data , strlen ( dest ) ) FUNCTION_CALL 6 strncpy ( dest , data , strlen ( dest ) ) CALLEE 7 strncpy LEAF_NODE 8 strncpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( dest ) FUNCTION_CALL 8 strlen ( dest ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 dest FIELD 10 dest LEAF_NODE 11 dest LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 100 - 1 ] = '\\0' ; EXPR 5 dest [ 100 - 1 ] = '\\0' ASSIGN 6 dest [ 100 - 1 ] = '\\0' LVAL 7 dest [ 100 - 1 ] FIELD 8 dest [ 100 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( dest ) ; EXPR 5 printLine ( dest ) FUNCTION_CALL 6 printLine ( dest ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticTrue EXPR 5 staticTrue FIELD 6 staticTrue LEAF_NODE 7 staticTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBuffer ; EXPR 7 data = dataBuffer ASSIGN 8 data = dataBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] dest ; VAR_DECL 5 char [ 100 ] dest TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( dest , 'C' , 100 - 1 ) ; EXPR 5 memset ( dest , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( dest , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 100 - 1 ] = '\\0' ; EXPR 5 dest [ 100 - 1 ] = '\\0' ASSIGN 6 dest [ 100 - 1 ] = '\\0' LVAL 7 dest [ 100 - 1 ] FIELD 8 dest [ 100 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncpy ( dest , data , strlen ( dest ) ) ; EXPR 5 strncpy ( dest , data , strlen ( dest ) ) FUNCTION_CALL 6 strncpy ( dest , data , strlen ( dest ) ) CALLEE 7 strncpy LEAF_NODE 8 strncpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( dest ) FUNCTION_CALL 8 strlen ( dest ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 dest FIELD 10 dest LEAF_NODE 11 dest LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 100 - 1 ] = '\\0' ; EXPR 5 dest [ 100 - 1 ] = '\\0' ASSIGN 6 dest [ 100 - 1 ] = '\\0' LVAL 7 dest [ 100 - 1 ] FIELD 8 dest [ 100 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( dest ) ; EXPR 5 printLine ( dest ) FUNCTION_CALL 6 printLine ( dest ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_alloca_ncpy_05_good LEAF_NODE 3 CWE127_Buffer_Underread__char_alloca_ncpy_05_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__char_alloca_ncpy_05_good ( ) ; EXPR 4 CWE127_Buffer_Underread__char_alloca_ncpy_05_good ( ) FUNCTION_CALL 5 CWE127_Buffer_Underread__char_alloca_ncpy_05_good ( ) CALLEE 6 CWE127_Buffer_Underread__char_alloca_ncpy_05_good LEAF_NODE 7 CWE127_Buffer_Underread__char_alloca_ncpy_05_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__char_alloca_ncpy_05_bad ( ) ; EXPR 4 CWE127_Buffer_Underread__char_alloca_ncpy_05_bad ( ) FUNCTION_CALL 5 CWE127_Buffer_Underread__char_alloca_ncpy_05_bad ( ) CALLEE 6 CWE127_Buffer_Underread__char_alloca_ncpy_05_bad LEAF_NODE 7 CWE127_Buffer_Underread__char_alloca_ncpy_05_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 156, "project": "cwe119_ast_vul_function_test_adv_28", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54c_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54c_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54b_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54c_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54c_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54c_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54c_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54c_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54c_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54c_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54b_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54c_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54c_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54c_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54c_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54c_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 157, "project": "cwe119_ast_vul_function_test_adv_121", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63b_badSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63b_badSink PARAMETER_LIST 2 ( char * * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * * dataPtr TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 50 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 50 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 50 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 50 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 50 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 50 * sizeof ( char ) FIELD 9 50 LEAF_NODE 10 50 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63b_badSink ( & data ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63b_badSink ( & data ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63b_badSink ( & data ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63b_badSink LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63b_badSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63b_goodG2BSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63b_goodG2BSink PARAMETER_LIST 2 ( char * * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * * data TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63b_goodG2BSink ( & data ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63b_goodG2BSink ( & data ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63b_goodG2BSink ( & data ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63b_goodG2BSink LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 158, "project": "cwe119_ast_vul_function_test_adv_155", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 50 ] dataBadBuffer ; VAR_DECL 4 char [ 50 ] dataBadBuffer TYPE 5 char [ 50 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 50 ] LEAF_NODE 7 [ FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataGoodBuffer ; VAR_DECL 4 char [ 100 ] dataGoodBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51b_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51b_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51b_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51b_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 50 ] dataBadBuffer ; VAR_DECL 4 char [ 50 ] dataBadBuffer TYPE 5 char [ 50 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 50 ] LEAF_NODE 7 [ FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataGoodBuffer ; VAR_DECL 4 char [ 100 ] dataGoodBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51b_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51b_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51b_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 159, "project": "cwe119_ast_vul_function_test_adv_170", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_43 { static void badSource ( char * & data ) { data = ( char * ) malloc ( 50 * sizeof ( char ) ) ; data [ 0 ] = '\\0' ; } void bad ( ) { char * data ; data = NULL ; badSource ( data ) ; { char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\\0' ; printLine ( data ) ; free ( data ) ; } } static void goodG2BSource ( char * & data ) { data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; data [ 0 ] = '\\0' ; } static void goodG2B ( ) { char * data ; data = NULL ; goodG2BSource ( data ) ; { char [ 100 ] source ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\\0' ; printLine ( data ) ; free ( data ) ; } } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_43 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSource LEAF_NODE 4 badSource PARAMETER_LIST 3 ( char * & data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * & data TYPE 5 char * & TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * & LEAF_NODE 7 * LEAF_NODE 7 & NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 data = ( char * ) malloc ( 50 * sizeof ( char ) ) ; EXPR 5 data = ( char * ) malloc ( 50 * sizeof ( char ) ) ASSIGN 6 data = ( char * ) malloc ( 50 * sizeof ( char ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) malloc ( 50 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 50 * sizeof ( char ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 50 * sizeof ( char ) FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 0 ] = '\\0' ; EXPR 5 data [ 0 ] = '\\0' ASSIGN 6 data [ 0 ] = '\\0' LVAL 7 data [ 0 ] FIELD 8 data [ 0 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; EXPR_STATEMENT 4 badSource ( data ) ; EXPR 5 badSource ( data ) FUNCTION_CALL 6 badSource ( data ) CALLEE 7 badSource LEAF_NODE 8 badSource LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 memcpy ( data , source , 100 * sizeof ( char ) ) ; EXPR 6 memcpy ( data , source , 100 * sizeof ( char ) ) FUNCTION_CALL 7 memcpy ( data , source , 100 * sizeof ( char ) ) CALLEE 8 memcpy LEAF_NODE 9 memcpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 data [ 100 - 1 ] = '\\0' ; EXPR 6 data [ 100 - 1 ] = '\\0' ASSIGN 7 data [ 100 - 1 ] = '\\0' LVAL 8 data [ 100 - 1 ] FIELD 9 data [ 100 - 1 ] LEAF_NODE 10 data LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 free ( data ) ; EXPR 6 free ( data ) FUNCTION_CALL 7 free ( data ) CALLEE 8 free LEAF_NODE 9 free LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSource LEAF_NODE 4 goodG2BSource PARAMETER_LIST 3 ( char * & data ) LEAF_NODE 4 ( PARAMETER_DECL 4 char * & data TYPE 5 char * & TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * & LEAF_NODE 7 * LEAF_NODE 7 & NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 6 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( char ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 0 ] = '\\0' ; EXPR 5 data [ 0 ] = '\\0' ASSIGN 6 data [ 0 ] = '\\0' LVAL 7 data [ 0 ] FIELD 8 data [ 0 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSource ( data ) ; EXPR 5 goodG2BSource ( data ) FUNCTION_CALL 6 goodG2BSource ( data ) CALLEE 7 goodG2BSource LEAF_NODE 8 goodG2BSource LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char [ 100 ] source ; VAR_DECL 6 char [ 100 ] source TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 source LEAF_NODE 8 source LEAF_NODE 6 ; EXPR_STATEMENT 5 memset ( source , 'C' , 100 - 1 ) ; EXPR 6 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 7 memset ( source , 'C' , 100 - 1 ) CALLEE 8 memset LEAF_NODE 9 memset LEAF_NODE 8 ( ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 'C' FIELD 9 'C' LEAF_NODE 10 'C' LEAF_NODE 8 , ARGUMENT 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 source [ 100 - 1 ] = '\\0' ; EXPR 6 source [ 100 - 1 ] = '\\0' ASSIGN 7 source [ 100 - 1 ] = '\\0' LVAL 8 source [ 100 - 1 ] FIELD 9 source [ 100 - 1 ] LEAF_NODE 10 source LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 memcpy ( data , source , 100 * sizeof ( char ) ) ; EXPR 6 memcpy ( data , source , 100 * sizeof ( char ) ) FUNCTION_CALL 7 memcpy ( data , source , 100 * sizeof ( char ) ) CALLEE 8 memcpy LEAF_NODE 9 memcpy LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 source FIELD 9 source LEAF_NODE 10 source LEAF_NODE 8 , ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 data [ 100 - 1 ] = '\\0' ; EXPR 6 data [ 100 - 1 ] = '\\0' ASSIGN 7 data [ 100 - 1 ] = '\\0' LVAL 8 data [ 100 - 1 ] FIELD 9 data [ 100 - 1 ] LEAF_NODE 10 data LEAF_NODE 10 [ EXPR 10 100 - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 5 printLine ( data ) ; EXPR 6 printLine ( data ) FUNCTION_CALL 7 printLine ( data ) CALLEE 8 printLine LEAF_NODE 9 printLine LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 5 free ( data ) ; EXPR 6 free ( data ) FUNCTION_CALL 7 free ( data ) CALLEE 8 free LEAF_NODE 9 free LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_43 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_43 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 160, "project": "cwe119_ast_vul_function_test_adv_24", "target": 1}
{"func": "NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_51 { void badSink ( int * data ) { STATEMENTS } ; void bad ( ) { int * data ; data = NULL ; data = new int [ 50 ] ; badSink ( data ) ; } void goodG2BSink ( int * data ) { STATEMENTS } ; static void goodG2B ( ) { int * data ; data = NULL ; data = new int [ 100 ] ; goodG2BSink ( data ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_51 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( int * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 int * data TYPE 5 int * TYPE_NAME 6 int LEAF_NODE 7 int POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int * data ; VAR_DECL 5 int * data TYPE 6 int * TYPE_NAME 7 int LEAF_NODE 8 int POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 int [ 50 ] ; EXPR 5 int [ 50 ] FIELD 6 int [ 50 ] LEAF_NODE 7 int LEAF_NODE 7 [ EXPR 7 50 FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 7 ] LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( data ) ; EXPR 5 badSink ( data ) FUNCTION_CALL 6 badSink ( data ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( int * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 int * data TYPE 5 int * TYPE_NAME 6 int LEAF_NODE 7 int POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int * data ; VAR_DECL 5 int * data TYPE 6 int * TYPE_NAME 7 int LEAF_NODE 8 int POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 int [ 100 ] ; EXPR 5 int [ 100 ] FIELD 6 int [ 100 ] LEAF_NODE 7 int LEAF_NODE 7 [ EXPR 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 ] LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( data ) ; EXPR 5 goodG2BSink ( data ) FUNCTION_CALL 6 goodG2BSink ( data ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_51 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_51 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 161, "project": "cwe119_ast_vul_function_test_adv_183", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54d_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54d_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54c_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54c_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54d_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54d_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54d_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54d_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54d_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54d_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54d_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54c_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54c_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54d_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54d_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54d_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54d_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54d_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 162, "project": "cwe119_ast_vul_function_test_adv_148", "target": 1}
{"func": "NAMESPACE_DEF 1 namespace CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_54 { void badSink_c ( int data ) { STATEMENTS } ; void badSink_b ( int data ) { badSink_c ( data ) ; } void goodG2BSink_c ( int data ) { STATEMENTS } ; void goodG2BSink_b ( int data ) { goodG2BSink_c ( data ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_54 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink_c LEAF_NODE 4 badSink_c PARAMETER_LIST 3 ( int data ) LEAF_NODE 4 ( PARAMETER_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink_b LEAF_NODE 4 badSink_b PARAMETER_LIST 3 ( int data ) LEAF_NODE 4 ( PARAMETER_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 badSink_c ( data ) ; EXPR 5 badSink_c ( data ) FUNCTION_CALL 6 badSink_c ( data ) CALLEE 7 badSink_c LEAF_NODE 8 badSink_c LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink_c LEAF_NODE 4 goodG2BSink_c PARAMETER_LIST 3 ( int data ) LEAF_NODE 4 ( PARAMETER_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink_b LEAF_NODE 4 goodG2BSink_b PARAMETER_LIST 3 ( int data ) LEAF_NODE 4 ( PARAMETER_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2BSink_c ( data ) ; EXPR 5 goodG2BSink_c ( data ) FUNCTION_CALL 6 goodG2BSink_c ( data ) CALLEE 7 goodG2BSink_c LEAF_NODE 8 goodG2BSink_c LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 163, "project": "cwe119_ast_vul_function_test_adv_98", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52c_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52c_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52b_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52c_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52c_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52c_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52c_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52c_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52c_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52c_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52b_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52c_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52c_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52c_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52c_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52c_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 164, "project": "cwe119_ast_vul_function_test_adv_99", "target": 1}
{"func": "USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_73 { void badSink ( list < wchar_t * > dataList ) { STATEMENTS } ; void bad ( ) { wchar_t * data ; list < wchar_t * > dataList ; wchar_t [ 50 ] dataBadBuffer ; wchar_t [ 100 ] dataGoodBuffer ; data = dataBadBuffer ; data [ 0 ] = L '\\0' ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; badSink ( dataList ) ; } void goodG2BSink ( list < wchar_t * > dataList ) { STATEMENTS } ; static void goodG2B ( ) { wchar_t * data ; list < wchar_t * > dataList ; wchar_t [ 50 ] dataBadBuffer ; wchar_t [ 100 ] dataGoodBuffer ; data = dataGoodBuffer ; data [ 0 ] = L '\\0' ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; goodG2BSink ( dataList ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_73 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( list < wchar_t * > dataList ) LEAF_NODE 4 ( PARAMETER_DECL 4 list < wchar_t * > dataList TYPE 5 list < wchar_t * > TYPE_NAME 6 list < wchar_t * > LEAF_NODE 7 list LEAF_NODE 7 < LEAF_NODE 7 wchar_t LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataList LEAF_NODE 6 dataList LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 list < wchar_t * > dataList ; VAR_DECL 5 list < wchar_t * > dataList TYPE 6 list < wchar_t * > TYPE_NAME 7 list < wchar_t * > LEAF_NODE 8 list LEAF_NODE 8 < LEAF_NODE 8 wchar_t LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataList LEAF_NODE 7 dataList LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t [ 50 ] dataBadBuffer ; VAR_DECL 5 wchar_t [ 50 ] dataBadBuffer TYPE 6 wchar_t [ 50 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dataBadBuffer LEAF_NODE 7 dataBadBuffer LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t [ 100 ] dataGoodBuffer ; VAR_DECL 5 wchar_t [ 100 ] dataGoodBuffer TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 dataGoodBuffer LEAF_NODE 7 dataGoodBuffer LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataBadBuffer ; EXPR 5 data = dataBadBuffer ASSIGN 6 data = dataBadBuffer LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataBadBuffer FIELD 8 dataBadBuffer LEAF_NODE 9 dataBadBuffer LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 0 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( dataList ) ; EXPR 5 badSink ( dataList ) FUNCTION_CALL 6 badSink ( dataList ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( ARGUMENT 7 dataList FIELD 8 dataList LEAF_NODE 9 dataList LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( list < wchar_t * > dataList ) LEAF_NODE 4 ( PARAMETER_DECL 4 list < wchar_t * > dataList TYPE 5 list < wchar_t * > TYPE_NAME 6 list < wchar_t * > LEAF_NODE 7 list LEAF_NODE 7 < LEAF_NODE 7 wchar_t LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataList LEAF_NODE 6 dataList LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 list < wchar_t * > dataList ; VAR_DECL 5 list < wchar_t * > dataList TYPE 6 list < wchar_t * > TYPE_NAME 7 list < wchar_t * > LEAF_NODE 8 list LEAF_NODE 8 < LEAF_NODE 8 wchar_t LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataList LEAF_NODE 7 dataList LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t [ 50 ] dataBadBuffer ; VAR_DECL 5 wchar_t [ 50 ] dataBadBuffer TYPE 6 wchar_t [ 50 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dataBadBuffer LEAF_NODE 7 dataBadBuffer LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t [ 100 ] dataGoodBuffer ; VAR_DECL 5 wchar_t [ 100 ] dataGoodBuffer TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 dataGoodBuffer LEAF_NODE 7 dataGoodBuffer LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataGoodBuffer ; EXPR 5 data = dataGoodBuffer ASSIGN 6 data = dataGoodBuffer LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataGoodBuffer FIELD 8 dataGoodBuffer LEAF_NODE 9 dataGoodBuffer LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 0 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( dataList ) ; EXPR 5 goodG2BSink ( dataList ) FUNCTION_CALL 6 goodG2BSink ( dataList ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( ARGUMENT 7 dataList FIELD 8 dataList LEAF_NODE 9 dataList LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_73 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_73 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 165, "project": "cwe119_ast_vul_function_test_adv_133", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__malloc_wchar_t_cpy_54d_badSink LEAF_NODE 3 CWE127_Buffer_Underread__malloc_wchar_t_cpy_54d_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__malloc_wchar_t_cpy_54c_badSink LEAF_NODE 3 CWE127_Buffer_Underread__malloc_wchar_t_cpy_54c_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE127_Buffer_Underread__malloc_wchar_t_cpy_54d_badSink ( data ) ; EXPR 4 CWE127_Buffer_Underread__malloc_wchar_t_cpy_54d_badSink ( data ) FUNCTION_CALL 5 CWE127_Buffer_Underread__malloc_wchar_t_cpy_54d_badSink ( data ) CALLEE 6 CWE127_Buffer_Underread__malloc_wchar_t_cpy_54d_badSink LEAF_NODE 7 CWE127_Buffer_Underread__malloc_wchar_t_cpy_54d_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__malloc_wchar_t_cpy_54d_goodG2BSink LEAF_NODE 3 CWE127_Buffer_Underread__malloc_wchar_t_cpy_54d_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__malloc_wchar_t_cpy_54c_goodG2BSink LEAF_NODE 3 CWE127_Buffer_Underread__malloc_wchar_t_cpy_54c_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE127_Buffer_Underread__malloc_wchar_t_cpy_54d_goodG2BSink ( data ) ; EXPR 4 CWE127_Buffer_Underread__malloc_wchar_t_cpy_54d_goodG2BSink ( data ) FUNCTION_CALL 5 CWE127_Buffer_Underread__malloc_wchar_t_cpy_54d_goodG2BSink ( data ) CALLEE 6 CWE127_Buffer_Underread__malloc_wchar_t_cpy_54d_goodG2BSink LEAF_NODE 7 CWE127_Buffer_Underread__malloc_wchar_t_cpy_54d_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 166, "project": "cwe119_ast_vul_function_test_adv_158", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53b_badSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 50 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 50 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 50 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 50 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 50 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 50 * sizeof ( char ) FIELD 9 50 LEAF_NODE 10 50 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53b_badSink ( data ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53b_badSink ( data ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53b_badSink ( data ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53b_badSink LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53b_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53b_goodG2BSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53b_goodG2BSink ( data ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53b_goodG2BSink ( data ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53b_goodG2BSink ( data ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53b_goodG2BSink LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 167, "project": "cwe119_ast_vul_function_test_adv_78", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncat ( data , source , 100 ) ; EXPR 5 wcsncat ( data , source , 100 ) FUNCTION_CALL 6 wcsncat ( data , source , 100 ) CALLEE 7 wcsncat LEAF_NODE 8 wcsncat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 50 ] dataBadBuffer ; VAR_DECL 4 wchar_t [ 50 ] dataBadBuffer TYPE 5 wchar_t [ 50 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 50 ] LEAF_NODE 7 [ FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 100 ] dataGoodBuffer ; VAR_DECL 4 wchar_t [ 100 ] dataGoodBuffer TYPE 5 wchar_t [ 100 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncat ( data , source , 100 ) ; EXPR 5 wcsncat ( data , source , 100 ) FUNCTION_CALL 6 wcsncat ( data , source , 100 ) CALLEE 7 wcsncat LEAF_NODE 8 wcsncat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 50 ] dataBadBuffer ; VAR_DECL 4 wchar_t [ 50 ] dataBadBuffer TYPE 5 wchar_t [ 50 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 50 ] LEAF_NODE 7 [ FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 100 ] dataGoodBuffer ; VAR_DECL 4 wchar_t [ 100 ] dataGoodBuffer TYPE 5 wchar_t [ 100 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 168, "project": "cwe119_ast_vul_function_test_adv_44", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 badSink LEAF_NODE 3 badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 wchar_t LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 \"\" ; EXPR 5 \"\" FIELD 6 \"\" LEAF_NODE 7 \"\" LEAF_NODE 5 ; LEAF_NODE 4 SNPRINTF LEAF_NODE 4 ( LEAF_NODE 4 dest LEAF_NODE 4 , LEAF_NODE 4 wcslen LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 \"%s\" LEAF_NODE 4 , LEAF_NODE 4 data LEAF_NODE 4 ) LEAF_NODE 4 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_44_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_44_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 wchar_t LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 badSink ; EXPR 4 badSink FIELD 5 badSink LEAF_NODE 6 badSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 data LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2BSink LEAF_NODE 3 goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 wchar_t LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 \"\" ; EXPR 5 \"\" FIELD 6 \"\" LEAF_NODE 7 \"\" LEAF_NODE 5 ; LEAF_NODE 4 SNPRINTF LEAF_NODE 4 ( LEAF_NODE 4 dest LEAF_NODE 4 , LEAF_NODE 4 wcslen LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 \"%s\" LEAF_NODE 4 , LEAF_NODE 4 data LEAF_NODE 4 ) LEAF_NODE 4 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 wchar_t LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 goodG2BSink ; EXPR 4 goodG2BSink FIELD 5 goodG2BSink LEAF_NODE 6 goodG2BSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 data LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 50 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 50 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_44_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_44_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_44_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_44_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_44_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_44_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_44_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_44_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_44_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_44_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_44_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_44_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 169, "project": "cwe119_ast_vul_function_test_adv_34", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_02_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_02_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = ( wchar_t * ) malloc ( 50 * sizeof ( wchar_t ) ) ; EXPR 7 data = ( wchar_t * ) malloc ( 50 * sizeof ( wchar_t ) ) ASSIGN 8 data = ( wchar_t * ) malloc ( 50 * sizeof ( wchar_t ) ) LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( wchar_t * ) malloc ( 50 * sizeof ( wchar_t ) ) LEAF_NODE 10 ( TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t LEAF_NODE 10 * LEAF_NODE 10 ) FUNCTION_CALL 10 malloc ( 50 * sizeof ( wchar_t ) ) CALLEE 11 malloc LEAF_NODE 12 malloc LEAF_NODE 11 ( ARGUMENT 11 50 * sizeof ( wchar_t ) FIELD 12 50 LEAF_NODE 13 50 LEAF_NODE 12 * FUNCTION_CALL 12 sizeof ( wchar_t ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 wchar_t FIELD 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 [ LEAF_NODE 6 0 LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( data , source , 100 - 1 ) ; EXPR 5 wcsncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 wcsncpy ( data , source , 100 - 1 ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 7 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 8 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 10 ( TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t LEAF_NODE 10 * LEAF_NODE 10 ) FUNCTION_CALL 10 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 11 malloc LEAF_NODE 12 malloc LEAF_NODE 11 ( ARGUMENT 11 100 * sizeof ( wchar_t ) FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 * FUNCTION_CALL 12 sizeof ( wchar_t ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 wchar_t FIELD 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 [ LEAF_NODE 6 0 LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( data , source , 100 - 1 ) ; EXPR 5 wcsncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 wcsncpy ( data , source , 100 - 1 ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 7 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 8 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 10 ( TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t LEAF_NODE 10 * LEAF_NODE 10 ) FUNCTION_CALL 10 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 11 malloc LEAF_NODE 12 malloc LEAF_NODE 11 ( ARGUMENT 11 100 * sizeof ( wchar_t ) FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 * FUNCTION_CALL 12 sizeof ( wchar_t ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 wchar_t FIELD 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 [ LEAF_NODE 6 0 LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncpy ( data , source , 100 - 1 ) ; EXPR 5 wcsncpy ( data , source , 100 - 1 ) FUNCTION_CALL 6 wcsncpy ( data , source , 100 - 1 ) CALLEE 7 wcsncpy LEAF_NODE 8 wcsncpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_02_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_02_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_02_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_02_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_02_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_02_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_02_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_02_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_02_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_02_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_02_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_02_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 170, "project": "cwe119_ast_vul_function_test_adv_10", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__wchar_t_alloca_cpy_03_bad LEAF_NODE 3 CWE127_Buffer_Underread__wchar_t_alloca_cpy_03_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 dataBuffer LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 dataBuffer LEAF_NODE 3 [ LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBuffer - 8 ; EXPR 7 data = dataBuffer - 8 ASSIGN 8 data = dataBuffer - 8 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer - 8 FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 10 - FIELD 10 8 LEAF_NODE 11 8 LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 * 2 ] dest ; VAR_DECL 5 wchar_t [ 100 * 2 ] dest TYPE 6 wchar_t [ 100 * 2 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 * 2 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 * FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 dest LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 * LEAF_NODE 4 2 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 * LEAF_NODE 4 2 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcscpy ( dest , data ) ; EXPR 5 wcscpy ( dest , data ) FUNCTION_CALL 6 wcscpy ( dest , data ) CALLEE 7 wcscpy LEAF_NODE 8 wcscpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( dest ) ; EXPR 5 printWLine ( dest ) FUNCTION_CALL 6 printWLine ( dest ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 dataBuffer LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 dataBuffer LEAF_NODE 3 [ LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 != 5 EXPR 5 5 != 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBuffer ; EXPR 7 data = dataBuffer ASSIGN 8 data = dataBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 * 2 ] dest ; VAR_DECL 5 wchar_t [ 100 * 2 ] dest TYPE 6 wchar_t [ 100 * 2 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 * 2 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 * FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 dest LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 * LEAF_NODE 4 2 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 * LEAF_NODE 4 2 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcscpy ( dest , data ) ; EXPR 5 wcscpy ( dest , data ) FUNCTION_CALL 6 wcscpy ( dest , data ) CALLEE 7 wcscpy LEAF_NODE 8 wcscpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( dest ) ; EXPR 5 printWLine ( dest ) FUNCTION_CALL 6 printWLine ( dest ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 dataBuffer LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 dataBuffer LEAF_NODE 3 [ LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBuffer ; EXPR 7 data = dataBuffer ASSIGN 8 data = dataBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 * 2 ] dest ; VAR_DECL 5 wchar_t [ 100 * 2 ] dest TYPE 6 wchar_t [ 100 * 2 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 * 2 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 * FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 dest LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 * LEAF_NODE 4 2 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 * LEAF_NODE 4 2 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcscpy ( dest , data ) ; EXPR 5 wcscpy ( dest , data ) FUNCTION_CALL 6 wcscpy ( dest , data ) CALLEE 7 wcscpy LEAF_NODE 8 wcscpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( dest ) ; EXPR 5 printWLine ( dest ) FUNCTION_CALL 6 printWLine ( dest ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__wchar_t_alloca_cpy_03_good LEAF_NODE 3 CWE127_Buffer_Underread__wchar_t_alloca_cpy_03_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__wchar_t_alloca_cpy_03_good ( ) ; EXPR 4 CWE127_Buffer_Underread__wchar_t_alloca_cpy_03_good ( ) FUNCTION_CALL 5 CWE127_Buffer_Underread__wchar_t_alloca_cpy_03_good ( ) CALLEE 6 CWE127_Buffer_Underread__wchar_t_alloca_cpy_03_good LEAF_NODE 7 CWE127_Buffer_Underread__wchar_t_alloca_cpy_03_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__wchar_t_alloca_cpy_03_bad ( ) ; EXPR 4 CWE127_Buffer_Underread__wchar_t_alloca_cpy_03_bad ( ) FUNCTION_CALL 5 CWE127_Buffer_Underread__wchar_t_alloca_cpy_03_bad ( ) CALLEE 6 CWE127_Buffer_Underread__wchar_t_alloca_cpy_03_bad LEAF_NODE 7 CWE127_Buffer_Underread__wchar_t_alloca_cpy_03_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 171, "project": "cwe119_ast_vul_function_test_adv_39", "target": 1}
{"func": "NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_wchar_t_memmove_51 { void badSink ( wchar_t * data ) { STATEMENTS } ; void bad ( ) { wchar_t * data ; data = NULL ; data = new wchar_t [ 10 ] ; badSink ( data ) ; } void goodG2BSink ( wchar_t * data ) { STATEMENTS } ; static void goodG2B ( ) { wchar_t * data ; data = NULL ; data = new wchar_t [ 10 + 1 ] ; goodG2BSink ( data ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_wchar_t_memmove_51 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( wchar_t * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 wchar_t [ 10 ] ; EXPR 5 wchar_t [ 10 ] FIELD 6 wchar_t [ 10 ] LEAF_NODE 7 wchar_t LEAF_NODE 7 [ EXPR 7 10 FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 7 ] LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( data ) ; EXPR 5 badSink ( data ) FUNCTION_CALL 6 badSink ( data ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( wchar_t * data ) LEAF_NODE 4 ( PARAMETER_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 wchar_t [ 10 + 1 ] ; EXPR 5 wchar_t [ 10 + 1 ] FIELD 6 wchar_t [ 10 + 1 ] LEAF_NODE 7 wchar_t LEAF_NODE 7 [ EXPR 7 10 + 1 FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ] LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( data ) ; EXPR 5 goodG2BSink ( data ) FUNCTION_CALL 6 goodG2BSink ( data ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_wchar_t_memmove_51 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_wchar_t_memmove_51 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 172, "project": "cwe119_ast_vul_function_test_adv_86", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65b_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 wchar_t LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65b_badSink ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65b_badSink FIELD 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65b_badSink LEAF_NODE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65b_badSink LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 50 ] dataBadBuffer ; VAR_DECL 4 wchar_t [ 50 ] dataBadBuffer TYPE 5 wchar_t [ 50 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 50 ] LEAF_NODE 7 [ FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 100 ] dataGoodBuffer ; VAR_DECL 4 wchar_t [ 100 ] dataGoodBuffer TYPE 5 wchar_t [ 100 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65b_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 wchar_t LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65b_goodG2BSink ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65b_goodG2BSink FIELD 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65b_goodG2BSink LEAF_NODE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65b_goodG2BSink LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 50 ] dataBadBuffer ; VAR_DECL 4 wchar_t [ 50 ] dataBadBuffer TYPE 5 wchar_t [ 50 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 50 ] LEAF_NODE 7 [ FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 100 ] dataGoodBuffer ; VAR_DECL 4 wchar_t [ 100 ] dataGoodBuffer TYPE 5 wchar_t [ 100 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 173, "project": "cwe119_ast_vul_function_test_adv_83", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64b_badSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 data LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64b_badSink ( & data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64b_badSink ( & data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64b_badSink ( & data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64b_badSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64b_goodG2BSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 data LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 50 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 50 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64b_goodG2BSink ( & data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64b_goodG2BSink ( & data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64b_goodG2BSink ( & data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 174, "project": "cwe119_ast_vul_function_test_adv_74", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_31 { void bad ( ) { char * data ; data = NULL ; data = new char [ 10 ] ; { char * dataCopy ; dataCopy = data ; char * data ; data = dataCopy ; { char [ 10 + 1 ] source ; source = SRC_STRING ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; delete [ ] data ; } } } static void goodG2B ( ) { char * data ; data = NULL ; data = new char [ 10 + 1 ] ; { char * dataCopy ; dataCopy = data ; char * data ; data = dataCopy ; { char [ 10 + 1 ] source ; source = SRC_STRING ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; delete [ ] data ; } } } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_31 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 char [ 10 ] ; EXPR 5 char [ 10 ] FIELD 6 char [ 10 ] LEAF_NODE 7 char LEAF_NODE 7 [ EXPR 7 10 FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 7 ] LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char * dataCopy ; dataCopy = data ; VAR_DECL 6 char * dataCopy ; dataCopy = data TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 dataCopy LEAF_NODE 8 dataCopy LEAF_NODE 7 ; INIT 7 dataCopy = data ASSIGN 8 dataCopy = data LVAL 9 dataCopy NAME 10 dataCopy LEAF_NODE 11 dataCopy ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 6 ; SIMPLE_DECL 5 char * data ; data = dataCopy ; VAR_DECL 6 char * data ; data = dataCopy TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 7 ; INIT 7 data = dataCopy ASSIGN 8 data = dataCopy LVAL 9 data NAME 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataCopy FIELD 10 dataCopy LEAF_NODE 11 dataCopy LEAF_NODE 6 ; LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 char [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 7 char [ 10 + 1 ] source ; source = SRC_STRING TYPE 8 char [ 10 + 1 ] TYPE_NAME 9 char LEAF_NODE 10 char TYPE_SUFFIX 9 [ 10 + 1 ] LEAF_NODE 10 [ FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 source LEAF_NODE 9 source LEAF_NODE 8 ; INIT 8 source = SRC_STRING ASSIGN 9 source = SRC_STRING LVAL 10 source NAME 11 source LEAF_NODE 12 source ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 SRC_STRING FIELD 11 SRC_STRING LEAF_NODE 12 SRC_STRING LEAF_NODE 7 ; EXPR_STATEMENT 6 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; EXPR 7 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) FUNCTION_CALL 8 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) CALLEE 9 memmove LEAF_NODE 10 memmove LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 source FIELD 10 source LEAF_NODE 11 source LEAF_NODE 9 , ARGUMENT 9 ( strlen ( source ) + 1 ) * sizeof ( char ) LEAF_NODE 10 ( FUNCTION_CALL 10 strlen ( source ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 source FIELD 12 source LEAF_NODE 13 source LEAF_NODE 11 ) LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 printLine ( data ) ; EXPR 7 printLine ( data ) FUNCTION_CALL 8 printLine ( data ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 6 delete LEAF_NODE 6 [ LEAF_NODE 6 ] EXPR_STATEMENT 6 data ; EXPR 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 char [ 10 + 1 ] ; EXPR 5 char [ 10 + 1 ] FIELD 6 char [ 10 + 1 ] LEAF_NODE 7 char LEAF_NODE 7 [ EXPR 7 10 + 1 FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 8 + FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ] LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char * dataCopy ; dataCopy = data ; VAR_DECL 6 char * dataCopy ; dataCopy = data TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 dataCopy LEAF_NODE 8 dataCopy LEAF_NODE 7 ; INIT 7 dataCopy = data ASSIGN 8 dataCopy = data LVAL 9 dataCopy NAME 10 dataCopy LEAF_NODE 11 dataCopy ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 6 ; SIMPLE_DECL 5 char * data ; data = dataCopy ; VAR_DECL 6 char * data ; data = dataCopy TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 7 ; INIT 7 data = dataCopy ASSIGN 8 data = dataCopy LVAL 9 data NAME 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataCopy FIELD 10 dataCopy LEAF_NODE 11 dataCopy LEAF_NODE 6 ; LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 char [ 10 + 1 ] source ; source = SRC_STRING ; VAR_DECL 7 char [ 10 + 1 ] source ; source = SRC_STRING TYPE 8 char [ 10 + 1 ] TYPE_NAME 9 char LEAF_NODE 10 char TYPE_SUFFIX 9 [ 10 + 1 ] LEAF_NODE 10 [ FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 source LEAF_NODE 9 source LEAF_NODE 8 ; INIT 8 source = SRC_STRING ASSIGN 9 source = SRC_STRING LVAL 10 source NAME 11 source LEAF_NODE 12 source ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 SRC_STRING FIELD 11 SRC_STRING LEAF_NODE 12 SRC_STRING LEAF_NODE 7 ; EXPR_STATEMENT 6 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; EXPR 7 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) FUNCTION_CALL 8 memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) CALLEE 9 memmove LEAF_NODE 10 memmove LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 source FIELD 10 source LEAF_NODE 11 source LEAF_NODE 9 , ARGUMENT 9 ( strlen ( source ) + 1 ) * sizeof ( char ) LEAF_NODE 10 ( FUNCTION_CALL 10 strlen ( source ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 source FIELD 12 source LEAF_NODE 13 source LEAF_NODE 11 ) LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ) LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 printLine ( data ) ; EXPR 7 printLine ( data ) FUNCTION_CALL 8 printLine ( data ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 6 delete LEAF_NODE 6 [ LEAF_NODE 6 ] EXPR_STATEMENT 6 data ; EXPR 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_31 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_31 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 175, "project": "cwe119_ast_vul_function_test_adv_49", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printIntLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printIntLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int staticFive ; staticFive = 5 ; VAR_DECL 2 int staticFive ; staticFive = 5 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticFive LEAF_NODE 4 staticFive LEAF_NODE 3 ; INIT 3 staticFive = 5 ASSIGN 4 staticFive = 5 LVAL 5 staticFive NAME 6 staticFive LEAF_NODE 7 staticFive ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 5 FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int data ; VAR_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = - 1 ; EXPR 4 data = - 1 ASSIGN 5 data = - 1 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 - 1 UNARY_EXPR 7 - 1 UNARY_OPERATOR 8 - LEAF_NODE 9 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 8 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 9 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 10 char LEAF_NODE 11 char TYPE_SUFFIX 10 [ CHAR_ARRAY_SIZE ] LEAF_NODE 11 [ FIELD 11 CHAR_ARRAY_SIZE LEAF_NODE 12 CHAR_ARRAY_SIZE LEAF_NODE 11 ] NAME 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 9 ; INIT 9 inputBuffer = \"\" ASSIGN 10 inputBuffer = \"\" LVAL 11 inputBuffer NAME 12 inputBuffer LEAF_NODE 13 inputBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 \"\" FIELD 12 \"\" LEAF_NODE 13 \"\" LEAF_NODE 8 ; SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 9 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 10 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 inputBuffer FIELD 12 inputBuffer LEAF_NODE 13 inputBuffer LEAF_NODE 11 , ARGUMENT 11 CHAR_ARRAY_SIZE FIELD 12 CHAR_ARRAY_SIZE LEAF_NODE 13 CHAR_ARRAY_SIZE LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 data = atoi ( inputBuffer ) ; EXPR 11 data = atoi ( inputBuffer ) ASSIGN 12 data = atoi ( inputBuffer ) LVAL 13 data FIELD 14 data LEAF_NODE 15 data ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 atoi ( inputBuffer ) FUNCTION_CALL 14 atoi ( inputBuffer ) CALLEE 15 atoi LEAF_NODE 16 atoi LEAF_NODE 15 ( ARGUMENT 15 inputBuffer FIELD 16 inputBuffer LEAF_NODE 17 inputBuffer LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed.\" ) ; EXPR 11 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed.\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed.\" FIELD 14 \"fgets() failed.\" LEAF_NODE 15 \"fgets() failed.\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int i ; VAR_DECL 8 int i TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; SIMPLE_DECL 7 int * buffer ; buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) ; VAR_DECL 8 int * buffer ; buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) TYPE 9 int * TYPE_NAME 10 int LEAF_NODE 11 int POINTER 10 * LEAF_NODE 11 * NAME 9 buffer LEAF_NODE 10 buffer LEAF_NODE 9 ; INIT 9 buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) ASSIGN 10 buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) LVAL 11 buffer NAME 12 buffer LEAF_NODE 13 buffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ( int * ) malloc ( 10 * sizeof ( int ) ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 * LEAF_NODE 12 ) FUNCTION_CALL 12 malloc ( 10 * sizeof ( int ) ) CALLEE 13 malloc LEAF_NODE 14 malloc LEAF_NODE 13 ( ARGUMENT 13 10 * sizeof ( int ) FIELD 14 10 LEAF_NODE 15 10 LEAF_NODE 14 * FUNCTION_CALL 14 sizeof ( int ) CALLEE 15 sizeof LEAF_NODE 16 sizeof LEAF_NODE 15 ( ARGUMENT 15 int FIELD 16 int LEAF_NODE 17 int LEAF_NODE 15 ) LEAF_NODE 13 ) LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < 10 EXPR 9 i < 10 FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 buffer [ i ] = 0 ; EXPR 11 buffer [ i ] = 0 ASSIGN 12 buffer [ i ] = 0 LVAL 13 buffer [ i ] FIELD 14 buffer [ i ] LEAF_NODE 15 buffer LEAF_NODE 15 [ EXPR 15 i FIELD 16 i LEAF_NODE 17 i LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data >= 0 EXPR 9 data >= 0 FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 >= LEAF_NODE 11 >= FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 buffer [ data ] = 1 ; EXPR 11 buffer [ data ] = 1 ASSIGN 12 buffer [ data ] = 1 LVAL 13 buffer [ data ] FIELD 14 buffer [ data ] LEAF_NODE 15 buffer LEAF_NODE 15 [ EXPR 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 1 FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 11 ; ITERATION 10 KEYWORD 11 for LEAF_NODE 12 for LEAF_NODE 11 ( FOR_INIT 11 i = 0 ; EXPR 12 i = 0 ASSIGN 13 i = 0 LVAL 14 i FIELD 15 i LEAF_NODE 16 i ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 12 ; CONDITION 11 i < 10 EXPR 12 i < 10 FIELD 13 i LEAF_NODE 14 i REL_OPERATOR 13 < LEAF_NODE 14 < FIELD 13 10 LEAF_NODE 14 10 LEAF_NODE 11 ; FOR_EXPR 11 i ++ EXPR 12 i ++ FIELD 13 i ++ LEAF_NODE 14 i LEAF_NODE 14 ++ LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printIntLine ( buffer [ i ] ) ; EXPR 14 printIntLine ( buffer [ i ] ) FUNCTION_CALL 15 printIntLine ( buffer [ i ] ) CALLEE 16 printIntLine LEAF_NODE 17 printIntLine LEAF_NODE 16 ( ARGUMENT 16 buffer [ i ] FIELD 17 buffer [ i ] LEAF_NODE 18 buffer LEAF_NODE 18 [ EXPR 18 i FIELD 19 i LEAF_NODE 20 i LEAF_NODE 18 ] LEAF_NODE 16 ) LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"ERROR: Array index is negative.\" ) ; EXPR 11 printLine ( \"ERROR: Array index is negative.\" ) FUNCTION_CALL 12 printLine ( \"ERROR: Array index is negative.\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"ERROR: Array index is negative.\" FIELD 14 \"ERROR: Array index is negative.\" LEAF_NODE 15 \"ERROR: Array index is negative.\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } EXPR_STATEMENT 7 free ( buffer ) ; EXPR 8 free ( buffer ) FUNCTION_CALL 9 free ( buffer ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 buffer FIELD 11 buffer LEAF_NODE 12 buffer LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodB2G1 LEAF_NODE 3 goodB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int data ; VAR_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = - 1 ; EXPR 4 data = - 1 ASSIGN 5 data = - 1 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 - 1 UNARY_EXPR 7 - 1 UNARY_OPERATOR 8 - LEAF_NODE 9 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 8 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 9 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 10 char LEAF_NODE 11 char TYPE_SUFFIX 10 [ CHAR_ARRAY_SIZE ] LEAF_NODE 11 [ FIELD 11 CHAR_ARRAY_SIZE LEAF_NODE 12 CHAR_ARRAY_SIZE LEAF_NODE 11 ] NAME 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 9 ; INIT 9 inputBuffer = \"\" ASSIGN 10 inputBuffer = \"\" LVAL 11 inputBuffer NAME 12 inputBuffer LEAF_NODE 13 inputBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 \"\" FIELD 12 \"\" LEAF_NODE 13 \"\" LEAF_NODE 8 ; SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 9 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 10 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 inputBuffer FIELD 12 inputBuffer LEAF_NODE 13 inputBuffer LEAF_NODE 11 , ARGUMENT 11 CHAR_ARRAY_SIZE FIELD 12 CHAR_ARRAY_SIZE LEAF_NODE 13 CHAR_ARRAY_SIZE LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 data = atoi ( inputBuffer ) ; EXPR 11 data = atoi ( inputBuffer ) ASSIGN 12 data = atoi ( inputBuffer ) LVAL 13 data FIELD 14 data LEAF_NODE 15 data ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 atoi ( inputBuffer ) FUNCTION_CALL 14 atoi ( inputBuffer ) CALLEE 15 atoi LEAF_NODE 16 atoi LEAF_NODE 15 ( ARGUMENT 15 inputBuffer FIELD 16 inputBuffer LEAF_NODE 17 inputBuffer LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed.\" ) ; EXPR 11 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed.\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed.\" FIELD 14 \"fgets() failed.\" LEAF_NODE 15 \"fgets() failed.\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive != 5 EXPR 5 staticFive != 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int i ; VAR_DECL 8 int i TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; SIMPLE_DECL 7 int * buffer ; buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) ; VAR_DECL 8 int * buffer ; buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) TYPE 9 int * TYPE_NAME 10 int LEAF_NODE 11 int POINTER 10 * LEAF_NODE 11 * NAME 9 buffer LEAF_NODE 10 buffer LEAF_NODE 9 ; INIT 9 buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) ASSIGN 10 buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) LVAL 11 buffer NAME 12 buffer LEAF_NODE 13 buffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ( int * ) malloc ( 10 * sizeof ( int ) ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 * LEAF_NODE 12 ) FUNCTION_CALL 12 malloc ( 10 * sizeof ( int ) ) CALLEE 13 malloc LEAF_NODE 14 malloc LEAF_NODE 13 ( ARGUMENT 13 10 * sizeof ( int ) FIELD 14 10 LEAF_NODE 15 10 LEAF_NODE 14 * FUNCTION_CALL 14 sizeof ( int ) CALLEE 15 sizeof LEAF_NODE 16 sizeof LEAF_NODE 15 ( ARGUMENT 15 int FIELD 16 int LEAF_NODE 17 int LEAF_NODE 15 ) LEAF_NODE 13 ) LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < 10 EXPR 9 i < 10 FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 buffer [ i ] = 0 ; EXPR 11 buffer [ i ] = 0 ASSIGN 12 buffer [ i ] = 0 LVAL 13 buffer [ i ] FIELD 14 buffer [ i ] LEAF_NODE 15 buffer LEAF_NODE 15 [ EXPR 15 i FIELD 16 i LEAF_NODE 17 i LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data >= 0 && data < ( 10 ) EXPR 9 data >= 0 && data < ( 10 ) AND 10 data >= 0 && data < ( 10 ) EXPR 11 data >= 0 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 >= LEAF_NODE 13 >= FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 && EXPR 11 data < ( 10 ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < LEAF_NODE 12 ( FIELD 12 10 LEAF_NODE 13 10 LEAF_NODE 12 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 buffer [ data ] = 1 ; EXPR 11 buffer [ data ] = 1 ASSIGN 12 buffer [ data ] = 1 LVAL 13 buffer [ data ] FIELD 14 buffer [ data ] LEAF_NODE 15 buffer LEAF_NODE 15 [ EXPR 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 1 FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 11 ; ITERATION 10 KEYWORD 11 for LEAF_NODE 12 for LEAF_NODE 11 ( FOR_INIT 11 i = 0 ; EXPR 12 i = 0 ASSIGN 13 i = 0 LVAL 14 i FIELD 15 i LEAF_NODE 16 i ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 12 ; CONDITION 11 i < 10 EXPR 12 i < 10 FIELD 13 i LEAF_NODE 14 i REL_OPERATOR 13 < LEAF_NODE 14 < FIELD 13 10 LEAF_NODE 14 10 LEAF_NODE 11 ; FOR_EXPR 11 i ++ EXPR 12 i ++ FIELD 13 i ++ LEAF_NODE 14 i LEAF_NODE 14 ++ LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printIntLine ( buffer [ i ] ) ; EXPR 14 printIntLine ( buffer [ i ] ) FUNCTION_CALL 15 printIntLine ( buffer [ i ] ) CALLEE 16 printIntLine LEAF_NODE 17 printIntLine LEAF_NODE 16 ( ARGUMENT 16 buffer [ i ] FIELD 17 buffer [ i ] LEAF_NODE 18 buffer LEAF_NODE 18 [ EXPR 18 i FIELD 19 i LEAF_NODE 20 i LEAF_NODE 18 ] LEAF_NODE 16 ) LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"ERROR: Array index is out-of-bounds\" ) ; EXPR 11 printLine ( \"ERROR: Array index is out-of-bounds\" ) FUNCTION_CALL 12 printLine ( \"ERROR: Array index is out-of-bounds\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"ERROR: Array index is out-of-bounds\" FIELD 14 \"ERROR: Array index is out-of-bounds\" LEAF_NODE 15 \"ERROR: Array index is out-of-bounds\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } EXPR_STATEMENT 7 free ( buffer ) ; EXPR 8 free ( buffer ) FUNCTION_CALL 9 free ( buffer ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 buffer FIELD 11 buffer LEAF_NODE 12 buffer LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodB2G2 LEAF_NODE 3 goodB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int data ; VAR_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = - 1 ; EXPR 4 data = - 1 ASSIGN 5 data = - 1 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 - 1 UNARY_EXPR 7 - 1 UNARY_OPERATOR 8 - LEAF_NODE 9 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 8 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 9 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 10 char LEAF_NODE 11 char TYPE_SUFFIX 10 [ CHAR_ARRAY_SIZE ] LEAF_NODE 11 [ FIELD 11 CHAR_ARRAY_SIZE LEAF_NODE 12 CHAR_ARRAY_SIZE LEAF_NODE 11 ] NAME 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 9 ; INIT 9 inputBuffer = \"\" ASSIGN 10 inputBuffer = \"\" LVAL 11 inputBuffer NAME 12 inputBuffer LEAF_NODE 13 inputBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 \"\" FIELD 12 \"\" LEAF_NODE 13 \"\" LEAF_NODE 8 ; SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 9 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 10 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 inputBuffer FIELD 12 inputBuffer LEAF_NODE 13 inputBuffer LEAF_NODE 11 , ARGUMENT 11 CHAR_ARRAY_SIZE FIELD 12 CHAR_ARRAY_SIZE LEAF_NODE 13 CHAR_ARRAY_SIZE LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 data = atoi ( inputBuffer ) ; EXPR 11 data = atoi ( inputBuffer ) ASSIGN 12 data = atoi ( inputBuffer ) LVAL 13 data FIELD 14 data LEAF_NODE 15 data ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 atoi ( inputBuffer ) FUNCTION_CALL 14 atoi ( inputBuffer ) CALLEE 15 atoi LEAF_NODE 16 atoi LEAF_NODE 15 ( ARGUMENT 15 inputBuffer FIELD 16 inputBuffer LEAF_NODE 17 inputBuffer LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed.\" ) ; EXPR 11 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed.\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed.\" FIELD 14 \"fgets() failed.\" LEAF_NODE 15 \"fgets() failed.\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int i ; VAR_DECL 8 int i TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; SIMPLE_DECL 7 int * buffer ; buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) ; VAR_DECL 8 int * buffer ; buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) TYPE 9 int * TYPE_NAME 10 int LEAF_NODE 11 int POINTER 10 * LEAF_NODE 11 * NAME 9 buffer LEAF_NODE 10 buffer LEAF_NODE 9 ; INIT 9 buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) ASSIGN 10 buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) LVAL 11 buffer NAME 12 buffer LEAF_NODE 13 buffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ( int * ) malloc ( 10 * sizeof ( int ) ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 * LEAF_NODE 12 ) FUNCTION_CALL 12 malloc ( 10 * sizeof ( int ) ) CALLEE 13 malloc LEAF_NODE 14 malloc LEAF_NODE 13 ( ARGUMENT 13 10 * sizeof ( int ) FIELD 14 10 LEAF_NODE 15 10 LEAF_NODE 14 * FUNCTION_CALL 14 sizeof ( int ) CALLEE 15 sizeof LEAF_NODE 16 sizeof LEAF_NODE 15 ( ARGUMENT 15 int FIELD 16 int LEAF_NODE 17 int LEAF_NODE 15 ) LEAF_NODE 13 ) LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < 10 EXPR 9 i < 10 FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 buffer [ i ] = 0 ; EXPR 11 buffer [ i ] = 0 ASSIGN 12 buffer [ i ] = 0 LVAL 13 buffer [ i ] FIELD 14 buffer [ i ] LEAF_NODE 15 buffer LEAF_NODE 15 [ EXPR 15 i FIELD 16 i LEAF_NODE 17 i LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data >= 0 && data < ( 10 ) EXPR 9 data >= 0 && data < ( 10 ) AND 10 data >= 0 && data < ( 10 ) EXPR 11 data >= 0 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 >= LEAF_NODE 13 >= FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 && EXPR 11 data < ( 10 ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < LEAF_NODE 12 ( FIELD 12 10 LEAF_NODE 13 10 LEAF_NODE 12 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 buffer [ data ] = 1 ; EXPR 11 buffer [ data ] = 1 ASSIGN 12 buffer [ data ] = 1 LVAL 13 buffer [ data ] FIELD 14 buffer [ data ] LEAF_NODE 15 buffer LEAF_NODE 15 [ EXPR 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 1 FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 11 ; ITERATION 10 KEYWORD 11 for LEAF_NODE 12 for LEAF_NODE 11 ( FOR_INIT 11 i = 0 ; EXPR 12 i = 0 ASSIGN 13 i = 0 LVAL 14 i FIELD 15 i LEAF_NODE 16 i ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 12 ; CONDITION 11 i < 10 EXPR 12 i < 10 FIELD 13 i LEAF_NODE 14 i REL_OPERATOR 13 < LEAF_NODE 14 < FIELD 13 10 LEAF_NODE 14 10 LEAF_NODE 11 ; FOR_EXPR 11 i ++ EXPR 12 i ++ FIELD 13 i ++ LEAF_NODE 14 i LEAF_NODE 14 ++ LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printIntLine ( buffer [ i ] ) ; EXPR 14 printIntLine ( buffer [ i ] ) FUNCTION_CALL 15 printIntLine ( buffer [ i ] ) CALLEE 16 printIntLine LEAF_NODE 17 printIntLine LEAF_NODE 16 ( ARGUMENT 16 buffer [ i ] FIELD 17 buffer [ i ] LEAF_NODE 18 buffer LEAF_NODE 18 [ EXPR 18 i FIELD 19 i LEAF_NODE 20 i LEAF_NODE 18 ] LEAF_NODE 16 ) LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"ERROR: Array index is out-of-bounds\" ) ; EXPR 11 printLine ( \"ERROR: Array index is out-of-bounds\" ) FUNCTION_CALL 12 printLine ( \"ERROR: Array index is out-of-bounds\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"ERROR: Array index is out-of-bounds\" FIELD 14 \"ERROR: Array index is out-of-bounds\" LEAF_NODE 15 \"ERROR: Array index is out-of-bounds\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } EXPR_STATEMENT 7 free ( buffer ) ; EXPR 8 free ( buffer ) FUNCTION_CALL 9 free ( buffer ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 buffer FIELD 11 buffer LEAF_NODE 12 buffer LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int data ; VAR_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = - 1 ; EXPR 4 data = - 1 ASSIGN 5 data = - 1 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 - 1 UNARY_EXPR 7 - 1 UNARY_OPERATOR 8 - LEAF_NODE 9 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive != 5 EXPR 5 staticFive != 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 7 ; EXPR 7 data = 7 ASSIGN 8 data = 7 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 7 FIELD 10 7 LEAF_NODE 11 7 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int i ; VAR_DECL 8 int i TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; SIMPLE_DECL 7 int * buffer ; buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) ; VAR_DECL 8 int * buffer ; buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) TYPE 9 int * TYPE_NAME 10 int LEAF_NODE 11 int POINTER 10 * LEAF_NODE 11 * NAME 9 buffer LEAF_NODE 10 buffer LEAF_NODE 9 ; INIT 9 buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) ASSIGN 10 buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) LVAL 11 buffer NAME 12 buffer LEAF_NODE 13 buffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ( int * ) malloc ( 10 * sizeof ( int ) ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 * LEAF_NODE 12 ) FUNCTION_CALL 12 malloc ( 10 * sizeof ( int ) ) CALLEE 13 malloc LEAF_NODE 14 malloc LEAF_NODE 13 ( ARGUMENT 13 10 * sizeof ( int ) FIELD 14 10 LEAF_NODE 15 10 LEAF_NODE 14 * FUNCTION_CALL 14 sizeof ( int ) CALLEE 15 sizeof LEAF_NODE 16 sizeof LEAF_NODE 15 ( ARGUMENT 15 int FIELD 16 int LEAF_NODE 17 int LEAF_NODE 15 ) LEAF_NODE 13 ) LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < 10 EXPR 9 i < 10 FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 buffer [ i ] = 0 ; EXPR 11 buffer [ i ] = 0 ASSIGN 12 buffer [ i ] = 0 LVAL 13 buffer [ i ] FIELD 14 buffer [ i ] LEAF_NODE 15 buffer LEAF_NODE 15 [ EXPR 15 i FIELD 16 i LEAF_NODE 17 i LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data >= 0 EXPR 9 data >= 0 FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 >= LEAF_NODE 11 >= FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 buffer [ data ] = 1 ; EXPR 11 buffer [ data ] = 1 ASSIGN 12 buffer [ data ] = 1 LVAL 13 buffer [ data ] FIELD 14 buffer [ data ] LEAF_NODE 15 buffer LEAF_NODE 15 [ EXPR 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 1 FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 11 ; ITERATION 10 KEYWORD 11 for LEAF_NODE 12 for LEAF_NODE 11 ( FOR_INIT 11 i = 0 ; EXPR 12 i = 0 ASSIGN 13 i = 0 LVAL 14 i FIELD 15 i LEAF_NODE 16 i ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 12 ; CONDITION 11 i < 10 EXPR 12 i < 10 FIELD 13 i LEAF_NODE 14 i REL_OPERATOR 13 < LEAF_NODE 14 < FIELD 13 10 LEAF_NODE 14 10 LEAF_NODE 11 ; FOR_EXPR 11 i ++ EXPR 12 i ++ FIELD 13 i ++ LEAF_NODE 14 i LEAF_NODE 14 ++ LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printIntLine ( buffer [ i ] ) ; EXPR 14 printIntLine ( buffer [ i ] ) FUNCTION_CALL 15 printIntLine ( buffer [ i ] ) CALLEE 16 printIntLine LEAF_NODE 17 printIntLine LEAF_NODE 16 ( ARGUMENT 16 buffer [ i ] FIELD 17 buffer [ i ] LEAF_NODE 18 buffer LEAF_NODE 18 [ EXPR 18 i FIELD 19 i LEAF_NODE 20 i LEAF_NODE 18 ] LEAF_NODE 16 ) LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"ERROR: Array index is negative.\" ) ; EXPR 11 printLine ( \"ERROR: Array index is negative.\" ) FUNCTION_CALL 12 printLine ( \"ERROR: Array index is negative.\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"ERROR: Array index is negative.\" FIELD 14 \"ERROR: Array index is negative.\" LEAF_NODE 15 \"ERROR: Array index is negative.\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } EXPR_STATEMENT 7 free ( buffer ) ; EXPR 8 free ( buffer ) FUNCTION_CALL 9 free ( buffer ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 buffer FIELD 11 buffer LEAF_NODE 12 buffer LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int data ; VAR_DECL 4 int data TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = - 1 ; EXPR 4 data = - 1 ASSIGN 5 data = - 1 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 - 1 UNARY_EXPR 7 - 1 UNARY_OPERATOR 8 - LEAF_NODE 9 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 7 ; EXPR 7 data = 7 ASSIGN 8 data = 7 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 7 FIELD 10 7 LEAF_NODE 11 7 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int i ; VAR_DECL 8 int i TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; SIMPLE_DECL 7 int * buffer ; buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) ; VAR_DECL 8 int * buffer ; buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) TYPE 9 int * TYPE_NAME 10 int LEAF_NODE 11 int POINTER 10 * LEAF_NODE 11 * NAME 9 buffer LEAF_NODE 10 buffer LEAF_NODE 9 ; INIT 9 buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) ASSIGN 10 buffer = ( int * ) malloc ( 10 * sizeof ( int ) ) LVAL 11 buffer NAME 12 buffer LEAF_NODE 13 buffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ( int * ) malloc ( 10 * sizeof ( int ) ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 * LEAF_NODE 12 ) FUNCTION_CALL 12 malloc ( 10 * sizeof ( int ) ) CALLEE 13 malloc LEAF_NODE 14 malloc LEAF_NODE 13 ( ARGUMENT 13 10 * sizeof ( int ) FIELD 14 10 LEAF_NODE 15 10 LEAF_NODE 14 * FUNCTION_CALL 14 sizeof ( int ) CALLEE 15 sizeof LEAF_NODE 16 sizeof LEAF_NODE 15 ( ARGUMENT 15 int FIELD 16 int LEAF_NODE 17 int LEAF_NODE 15 ) LEAF_NODE 13 ) LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < 10 EXPR 9 i < 10 FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 buffer [ i ] = 0 ; EXPR 11 buffer [ i ] = 0 ASSIGN 12 buffer [ i ] = 0 LVAL 13 buffer [ i ] FIELD 14 buffer [ i ] LEAF_NODE 15 buffer LEAF_NODE 15 [ EXPR 15 i FIELD 16 i LEAF_NODE 17 i LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data >= 0 EXPR 9 data >= 0 FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 >= LEAF_NODE 11 >= FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 buffer [ data ] = 1 ; EXPR 11 buffer [ data ] = 1 ASSIGN 12 buffer [ data ] = 1 LVAL 13 buffer [ data ] FIELD 14 buffer [ data ] LEAF_NODE 15 buffer LEAF_NODE 15 [ EXPR 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 1 FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 11 ; ITERATION 10 KEYWORD 11 for LEAF_NODE 12 for LEAF_NODE 11 ( FOR_INIT 11 i = 0 ; EXPR 12 i = 0 ASSIGN 13 i = 0 LVAL 14 i FIELD 15 i LEAF_NODE 16 i ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 12 ; CONDITION 11 i < 10 EXPR 12 i < 10 FIELD 13 i LEAF_NODE 14 i REL_OPERATOR 13 < LEAF_NODE 14 < FIELD 13 10 LEAF_NODE 14 10 LEAF_NODE 11 ; FOR_EXPR 11 i ++ EXPR 12 i ++ FIELD 13 i ++ LEAF_NODE 14 i LEAF_NODE 14 ++ LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printIntLine ( buffer [ i ] ) ; EXPR 14 printIntLine ( buffer [ i ] ) FUNCTION_CALL 15 printIntLine ( buffer [ i ] ) CALLEE 16 printIntLine LEAF_NODE 17 printIntLine LEAF_NODE 16 ( ARGUMENT 16 buffer [ i ] FIELD 17 buffer [ i ] LEAF_NODE 18 buffer LEAF_NODE 18 [ EXPR 18 i FIELD 19 i LEAF_NODE 20 i LEAF_NODE 18 ] LEAF_NODE 16 ) LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"ERROR: Array index is negative.\" ) ; EXPR 11 printLine ( \"ERROR: Array index is negative.\" ) FUNCTION_CALL 12 printLine ( \"ERROR: Array index is negative.\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"ERROR: Array index is negative.\" FIELD 14 \"ERROR: Array index is negative.\" LEAF_NODE 15 \"ERROR: Array index is negative.\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } EXPR_STATEMENT 7 free ( buffer ) ; EXPR 8 free ( buffer ) FUNCTION_CALL 9 free ( buffer ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 buffer FIELD 11 buffer LEAF_NODE 12 buffer LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodB2G1 ( ) ; EXPR 4 goodB2G1 ( ) FUNCTION_CALL 5 goodB2G1 ( ) CALLEE 6 goodB2G1 LEAF_NODE 7 goodB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodB2G2 ( ) ; EXPR 4 goodB2G2 ( ) FUNCTION_CALL 5 goodB2G2 ( ) CALLEE 6 goodB2G2 LEAF_NODE 7 goodB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 176, "project": "cwe119_ast_vul_function_test_adv_48", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_declare_ncpy_66b_badSink LEAF_NODE 3 CWE127_Buffer_Underread__char_declare_ncpy_66b_badSink PARAMETER_LIST 2 ( char * [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * [ ] dataArray TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_declare_ncpy_66_bad LEAF_NODE 3 CWE127_Buffer_Underread__char_declare_ncpy_66_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * [ 5 ] dataArray ; VAR_DECL 4 char * [ 5 ] dataArray TYPE 5 char * [ 5 ] TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * TYPE_SUFFIX 6 [ 5 ] LEAF_NODE 7 [ FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; VAR_DECL 4 char [ 100 ] dataBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer - 8 ; EXPR 4 data = dataBuffer - 8 ASSIGN 5 data = dataBuffer - 8 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer - 8 FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 7 - FIELD 7 8 LEAF_NODE 8 8 LEAF_NODE 4 ; EXPR_STATEMENT 3 dataArray [ 2 ] = data ; EXPR 4 dataArray [ 2 ] = data ASSIGN 5 dataArray [ 2 ] = data LVAL 6 dataArray [ 2 ] FIELD 7 dataArray [ 2 ] LEAF_NODE 8 dataArray LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__char_declare_ncpy_66b_badSink ( dataArray ) ; EXPR 4 CWE127_Buffer_Underread__char_declare_ncpy_66b_badSink ( dataArray ) FUNCTION_CALL 5 CWE127_Buffer_Underread__char_declare_ncpy_66b_badSink ( dataArray ) CALLEE 6 CWE127_Buffer_Underread__char_declare_ncpy_66b_badSink LEAF_NODE 7 CWE127_Buffer_Underread__char_declare_ncpy_66b_badSink LEAF_NODE 6 ( ARGUMENT 6 dataArray FIELD 7 dataArray LEAF_NODE 8 dataArray LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_declare_ncpy_66b_goodG2BSink LEAF_NODE 3 CWE127_Buffer_Underread__char_declare_ncpy_66b_goodG2BSink PARAMETER_LIST 2 ( char * [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * [ ] dataArray TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * [ 5 ] dataArray ; VAR_DECL 4 char * [ 5 ] dataArray TYPE 5 char * [ 5 ] TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * TYPE_SUFFIX 6 [ 5 ] LEAF_NODE 7 [ FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; VAR_DECL 4 char [ 100 ] dataBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 dataArray [ 2 ] = data ; EXPR 4 dataArray [ 2 ] = data ASSIGN 5 dataArray [ 2 ] = data LVAL 6 dataArray [ 2 ] FIELD 7 dataArray [ 2 ] LEAF_NODE 8 dataArray LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__char_declare_ncpy_66b_goodG2BSink ( dataArray ) ; EXPR 4 CWE127_Buffer_Underread__char_declare_ncpy_66b_goodG2BSink ( dataArray ) FUNCTION_CALL 5 CWE127_Buffer_Underread__char_declare_ncpy_66b_goodG2BSink ( dataArray ) CALLEE 6 CWE127_Buffer_Underread__char_declare_ncpy_66b_goodG2BSink LEAF_NODE 7 CWE127_Buffer_Underread__char_declare_ncpy_66b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 dataArray FIELD 7 dataArray LEAF_NODE 8 dataArray LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_declare_ncpy_66_good LEAF_NODE 3 CWE127_Buffer_Underread__char_declare_ncpy_66_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__char_declare_ncpy_66_good ( ) ; EXPR 4 CWE127_Buffer_Underread__char_declare_ncpy_66_good ( ) FUNCTION_CALL 5 CWE127_Buffer_Underread__char_declare_ncpy_66_good ( ) CALLEE 6 CWE127_Buffer_Underread__char_declare_ncpy_66_good LEAF_NODE 7 CWE127_Buffer_Underread__char_declare_ncpy_66_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__char_declare_ncpy_66_bad ( ) ; EXPR 4 CWE127_Buffer_Underread__char_declare_ncpy_66_bad ( ) FUNCTION_CALL 5 CWE127_Buffer_Underread__char_declare_ncpy_66_bad ( ) CALLEE 6 CWE127_Buffer_Underread__char_declare_ncpy_66_bad LEAF_NODE 7 CWE127_Buffer_Underread__char_declare_ncpy_66_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 177, "project": "cwe119_ast_vul_function_test_adv_192", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_72 { void badSink ( vector < wchar_t * > dataVector ) { STATEMENTS } ; void bad ( ) { wchar_t * data ; vector < wchar_t * > dataVector ; data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; wmemset ( data , L 'A' , 100 - 1 ) ; data [ 100 - 1 ] = L '\\0' ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; badSink ( dataVector ) ; } void goodG2BSink ( vector < wchar_t * > dataVector ) { STATEMENTS } ; static void goodG2B ( ) { wchar_t * data ; vector < wchar_t * > dataVector ; data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; wmemset ( data , L 'A' , 50 - 1 ) ; data [ 50 - 1 ] = L '\\0' ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; dataVector . insert ( dataVector . end ( ) , 1 , data ) ; goodG2BSink ( dataVector ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_72 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( vector < wchar_t * > dataVector ) LEAF_NODE 4 ( PARAMETER_DECL 4 vector < wchar_t * > dataVector TYPE 5 vector < wchar_t * > TYPE_NAME 6 vector < wchar_t * > LEAF_NODE 7 vector LEAF_NODE 7 < LEAF_NODE 7 wchar_t LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataVector LEAF_NODE 6 dataVector LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 vector < wchar_t * > dataVector ; VAR_DECL 5 vector < wchar_t * > dataVector TYPE 6 vector < wchar_t * > TYPE_NAME 7 vector < wchar_t * > LEAF_NODE 8 vector LEAF_NODE 8 < LEAF_NODE 8 wchar_t LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataVector LEAF_NODE 7 dataVector LEAF_NODE 5 ; EXPR_STATEMENT 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'A' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( dataVector ) ; EXPR 5 badSink ( dataVector ) FUNCTION_CALL 6 badSink ( dataVector ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( ARGUMENT 7 dataVector FIELD 8 dataVector LEAF_NODE 9 dataVector LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( vector < wchar_t * > dataVector ) LEAF_NODE 4 ( PARAMETER_DECL 4 vector < wchar_t * > dataVector TYPE 5 vector < wchar_t * > TYPE_NAME 6 vector < wchar_t * > LEAF_NODE 7 vector LEAF_NODE 7 < LEAF_NODE 7 wchar_t LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataVector LEAF_NODE 6 dataVector LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 vector < wchar_t * > dataVector ; VAR_DECL 5 vector < wchar_t * > dataVector TYPE 6 vector < wchar_t * > TYPE_NAME 7 vector < wchar_t * > LEAF_NODE 8 vector LEAF_NODE 8 < LEAF_NODE 8 wchar_t LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataVector LEAF_NODE 7 dataVector LEAF_NODE 5 ; EXPR_STATEMENT 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 wchar_t FIELD 12 wchar_t LEAF_NODE 13 wchar_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'A' LEAF_NODE 4 , LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataVector . insert ( dataVector . end ( ) , 1 , data ) ; EXPR 5 dataVector . insert ( dataVector . end ( ) , 1 , data ) FUNCTION_CALL 6 dataVector . insert ( dataVector . end ( ) , 1 , data ) CALLEE 7 dataVector . insert LEAF_NODE 8 dataVector LEAF_NODE 8 . LEAF_NODE 8 insert LEAF_NODE 7 ( ARGUMENT 7 dataVector . end ( ) FUNCTION_CALL 8 dataVector . end ( ) CALLEE 9 dataVector . end LEAF_NODE 10 dataVector LEAF_NODE 10 . LEAF_NODE 10 end LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( dataVector ) ; EXPR 5 goodG2BSink ( dataVector ) FUNCTION_CALL 6 goodG2BSink ( dataVector ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( ARGUMENT 7 dataVector FIELD 8 dataVector LEAF_NODE 9 dataVector LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_72 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_72 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 178, "project": "cwe119_ast_vul_function_test_adv_179", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 const int STATIC_CONST_TRUE ; STATIC_CONST_TRUE = 1 ; VAR_DECL 2 const int STATIC_CONST_TRUE ; STATIC_CONST_TRUE = 1 TYPE 3 const int TYPE_NAME 4 const int LEAF_NODE 5 const LEAF_NODE 5 int NAME 3 STATIC_CONST_TRUE LEAF_NODE 4 STATIC_CONST_TRUE LEAF_NODE 3 ; INIT 3 STATIC_CONST_TRUE = 1 ASSIGN 4 STATIC_CONST_TRUE = 1 LVAL 5 STATIC_CONST_TRUE NAME 6 STATIC_CONST_TRUE LEAF_NODE 7 STATIC_CONST_TRUE ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 2 ; SIMPLE_DECL 1 const int STATIC_CONST_FALSE ; STATIC_CONST_FALSE = 0 ; VAR_DECL 2 const int STATIC_CONST_FALSE ; STATIC_CONST_FALSE = 0 TYPE 3 const int TYPE_NAME 4 const int LEAF_NODE 5 const LEAF_NODE 5 int NAME 3 STATIC_CONST_FALSE LEAF_NODE 4 STATIC_CONST_FALSE LEAF_NODE 3 ; INIT 3 STATIC_CONST_FALSE = 0 ASSIGN 4 STATIC_CONST_FALSE = 0 LVAL 5 STATIC_CONST_FALSE NAME 6 STATIC_CONST_FALSE LEAF_NODE 7 STATIC_CONST_FALSE ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_04_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_04_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 50 ] dataBadBuffer ; VAR_DECL 4 wchar_t [ 50 ] dataBadBuffer TYPE 5 wchar_t [ 50 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 50 ] LEAF_NODE 7 [ FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 100 ] dataGoodBuffer ; VAR_DECL 4 wchar_t [ 100 ] dataGoodBuffer TYPE 5 wchar_t [ 100 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_TRUE EXPR 5 STATIC_CONST_TRUE FIELD 6 STATIC_CONST_TRUE LEAF_NODE 7 STATIC_CONST_TRUE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBadBuffer ; EXPR 7 data = dataBadBuffer ASSIGN 8 data = dataBadBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBadBuffer FIELD 10 dataBadBuffer LEAF_NODE 11 dataBadBuffer LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 [ LEAF_NODE 6 0 LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncat ( data , source , 100 ) ; EXPR 5 wcsncat ( data , source , 100 ) FUNCTION_CALL 6 wcsncat ( data , source , 100 ) CALLEE 7 wcsncat LEAF_NODE 8 wcsncat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 50 ] dataBadBuffer ; VAR_DECL 4 wchar_t [ 50 ] dataBadBuffer TYPE 5 wchar_t [ 50 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 50 ] LEAF_NODE 7 [ FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 100 ] dataGoodBuffer ; VAR_DECL 4 wchar_t [ 100 ] dataGoodBuffer TYPE 5 wchar_t [ 100 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_FALSE EXPR 5 STATIC_CONST_FALSE FIELD 6 STATIC_CONST_FALSE LEAF_NODE 7 STATIC_CONST_FALSE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataGoodBuffer ; EXPR 7 data = dataGoodBuffer ASSIGN 8 data = dataGoodBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataGoodBuffer FIELD 10 dataGoodBuffer LEAF_NODE 11 dataGoodBuffer LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 [ LEAF_NODE 6 0 LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncat ( data , source , 100 ) ; EXPR 5 wcsncat ( data , source , 100 ) FUNCTION_CALL 6 wcsncat ( data , source , 100 ) CALLEE 7 wcsncat LEAF_NODE 8 wcsncat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 50 ] dataBadBuffer ; VAR_DECL 4 wchar_t [ 50 ] dataBadBuffer TYPE 5 wchar_t [ 50 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 50 ] LEAF_NODE 7 [ FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 100 ] dataGoodBuffer ; VAR_DECL 4 wchar_t [ 100 ] dataGoodBuffer TYPE 5 wchar_t [ 100 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_TRUE EXPR 5 STATIC_CONST_TRUE FIELD 6 STATIC_CONST_TRUE LEAF_NODE 7 STATIC_CONST_TRUE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataGoodBuffer ; EXPR 7 data = dataGoodBuffer ASSIGN 8 data = dataGoodBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataGoodBuffer FIELD 10 dataGoodBuffer LEAF_NODE 11 dataGoodBuffer LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 [ LEAF_NODE 6 0 LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 ] source ; VAR_DECL 5 wchar_t [ 100 ] source TYPE 6 wchar_t [ 100 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 source LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 source LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncat ( data , source , 100 ) ; EXPR 5 wcsncat ( data , source , 100 ) FUNCTION_CALL 6 wcsncat ( data , source , 100 ) CALLEE 7 wcsncat LEAF_NODE 8 wcsncat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_04_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_04_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_04_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_04_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_04_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_04_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_04_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_04_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_04_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_04_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_04_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_04_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 179, "project": "cwe119_ast_vul_function_test_adv_45", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__malloc_wchar_t_cpy_52c_badSink LEAF_NODE 3 CWE127_Buffer_Underread__malloc_wchar_t_cpy_52c_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__malloc_wchar_t_cpy_52b_badSink LEAF_NODE 3 CWE127_Buffer_Underread__malloc_wchar_t_cpy_52b_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE127_Buffer_Underread__malloc_wchar_t_cpy_52c_badSink ( data ) ; EXPR 4 CWE127_Buffer_Underread__malloc_wchar_t_cpy_52c_badSink ( data ) FUNCTION_CALL 5 CWE127_Buffer_Underread__malloc_wchar_t_cpy_52c_badSink ( data ) CALLEE 6 CWE127_Buffer_Underread__malloc_wchar_t_cpy_52c_badSink LEAF_NODE 7 CWE127_Buffer_Underread__malloc_wchar_t_cpy_52c_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__malloc_wchar_t_cpy_52c_goodG2BSink LEAF_NODE 3 CWE127_Buffer_Underread__malloc_wchar_t_cpy_52c_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__malloc_wchar_t_cpy_52b_goodG2BSink LEAF_NODE 3 CWE127_Buffer_Underread__malloc_wchar_t_cpy_52b_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE127_Buffer_Underread__malloc_wchar_t_cpy_52c_goodG2BSink ( data ) ; EXPR 4 CWE127_Buffer_Underread__malloc_wchar_t_cpy_52c_goodG2BSink ( data ) FUNCTION_CALL 5 CWE127_Buffer_Underread__malloc_wchar_t_cpy_52c_goodG2BSink ( data ) CALLEE 6 CWE127_Buffer_Underread__malloc_wchar_t_cpy_52c_goodG2BSink LEAF_NODE 7 CWE127_Buffer_Underread__malloc_wchar_t_cpy_52c_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 180, "project": "cwe119_ast_vul_function_test_adv_102", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 char * CWE134_Uncontrolled_Format_String__char_console_fprintf_68_badData ; VAR_DECL 2 char * CWE134_Uncontrolled_Format_String__char_console_fprintf_68_badData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_badData LEAF_NODE 4 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_badData LEAF_NODE 2 ; SIMPLE_DECL 1 char * CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodG2BData ; VAR_DECL 2 char * CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodG2BData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodG2BData LEAF_NODE 4 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodG2BData LEAF_NODE 2 ; SIMPLE_DECL 1 char * CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodB2GData ; VAR_DECL 2 char * CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodB2GData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodB2GData LEAF_NODE 4 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodB2GData LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_badSink LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_badSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_bad LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; dataBuffer = \"\" ; VAR_DECL 4 char [ 100 ] dataBuffer ; dataBuffer = \"\" TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = \"\" ASSIGN 6 dataBuffer = \"\" LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 \"\" FIELD 8 \"\" LEAF_NODE 9 \"\" LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_badData = data ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_badData = data ASSIGN 5 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_badData = data LVAL 6 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_badData FIELD 7 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_badData LEAF_NODE 8 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_badData ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_badSink ( ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_badSink ( ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_badSink ( ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_badSink LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_badSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_goodG2BSink LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_goodG2BSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_goodB2GSink LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_goodB2GSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; dataBuffer = \"\" ; VAR_DECL 4 char [ 100 ] dataBuffer ; dataBuffer = \"\" TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = \"\" ASSIGN 6 dataBuffer = \"\" LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 \"\" FIELD 8 \"\" LEAF_NODE 9 \"\" LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 strcpy ( data , \"fixedstringtest\" ) ; EXPR 4 strcpy ( data , \"fixedstringtest\" ) FUNCTION_CALL 5 strcpy ( data , \"fixedstringtest\" ) CALLEE 6 strcpy LEAF_NODE 7 strcpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 \"fixedstringtest\" FIELD 7 \"fixedstringtest\" LEAF_NODE 8 \"fixedstringtest\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodG2BData = data ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodG2BData = data ASSIGN 5 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodG2BData = data LVAL 6 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodG2BData FIELD 7 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodG2BData LEAF_NODE 8 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodG2BData ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_goodG2BSink ( ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_goodG2BSink ( ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_goodG2BSink ( ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_goodG2BSink LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_goodG2BSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodB2G LEAF_NODE 3 goodB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; dataBuffer = \"\" ; VAR_DECL 4 char [ 100 ] dataBuffer ; dataBuffer = \"\" TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = \"\" ASSIGN 6 dataBuffer = \"\" LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 \"\" FIELD 8 \"\" LEAF_NODE 9 \"\" LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodB2GData = data ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodB2GData = data ASSIGN 5 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodB2GData = data LVAL 6 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodB2GData FIELD 7 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodB2GData LEAF_NODE 8 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_goodB2GData ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_goodB2GSink ( ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_goodB2GSink ( ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_goodB2GSink ( ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_goodB2GSink LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_goodB2GSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_good LEAF_NODE 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodB2G ( ) ; EXPR 4 goodB2G ( ) FUNCTION_CALL 5 goodB2G ( ) CALLEE 6 goodB2G LEAF_NODE 7 goodB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_good ( ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_good ( ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_good ( ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_good LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_bad ( ) ; EXPR 4 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_bad ( ) FUNCTION_CALL 5 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_bad ( ) CALLEE 6 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_bad LEAF_NODE 7 CWE134_Uncontrolled_Format_String__char_console_fprintf_68_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 181, "project": "cwe119_ast_vul_function_test_adv_97", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66b_badSink PARAMETER_LIST 2 ( char * [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * [ ] dataArray TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * [ 5 ] dataArray ; VAR_DECL 4 char * [ 5 ] dataArray TYPE 5 char * [ 5 ] TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * TYPE_SUFFIX 6 [ 5 ] LEAF_NODE 7 [ FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 10 ] dataBadBuffer ; VAR_DECL 4 char [ 10 ] dataBadBuffer TYPE 5 char [ 10 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 10 ] LEAF_NODE 7 [ FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 10 + 1 ] dataGoodBuffer ; VAR_DECL 4 char [ 10 + 1 ] dataGoodBuffer TYPE 5 char [ 10 + 1 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 10 + 1 ] LEAF_NODE 7 [ FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 7 + FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 dataArray [ 2 ] = data ; EXPR 4 dataArray [ 2 ] = data ASSIGN 5 dataArray [ 2 ] = data LVAL 6 dataArray [ 2 ] FIELD 7 dataArray [ 2 ] LEAF_NODE 8 dataArray LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66b_badSink ( dataArray ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66b_badSink ( dataArray ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66b_badSink ( dataArray ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66b_badSink LEAF_NODE 6 ( ARGUMENT 6 dataArray FIELD 7 dataArray LEAF_NODE 8 dataArray LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66b_goodG2BSink PARAMETER_LIST 2 ( char * [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * [ ] dataArray TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * [ 5 ] dataArray ; VAR_DECL 4 char * [ 5 ] dataArray TYPE 5 char * [ 5 ] TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * TYPE_SUFFIX 6 [ 5 ] LEAF_NODE 7 [ FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 10 ] dataBadBuffer ; VAR_DECL 4 char [ 10 ] dataBadBuffer TYPE 5 char [ 10 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 10 ] LEAF_NODE 7 [ FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 10 + 1 ] dataGoodBuffer ; VAR_DECL 4 char [ 10 + 1 ] dataGoodBuffer TYPE 5 char [ 10 + 1 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 10 + 1 ] LEAF_NODE 7 [ FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 7 + FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 dataArray [ 2 ] = data ; EXPR 4 dataArray [ 2 ] = data ASSIGN 5 dataArray [ 2 ] = data LVAL 6 dataArray [ 2 ] FIELD 7 dataArray [ 2 ] LEAF_NODE 8 dataArray LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66b_goodG2BSink ( dataArray ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66b_goodG2BSink ( dataArray ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66b_goodG2BSink ( dataArray ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 dataArray FIELD 7 dataArray LEAF_NODE 8 dataArray LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 182, "project": "cwe119_ast_vul_function_test_adv_87", "target": 1}
{"func": "SIMPLE_DECL 1 char * CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_badData ; VAR_DECL 2 char * CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_badData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_badData LEAF_NODE 4 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_badData LEAF_NODE 2 ; SIMPLE_DECL 1 char * CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_goodG2BData ; VAR_DECL 2 char * CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_goodG2BData TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_goodG2BData LEAF_NODE 4 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_goodG2BData LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68 { void badSink ( ) { STATEMENTS } ; void bad ( ) { char * data ; data = NULL ; data = new char [ 50 ] ; data [ 0 ] = '\\0' ; CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_badData = data ; badSink ( ) ; } void goodG2BSink ( ) { STATEMENTS } ; static void goodG2B ( ) { char * data ; data = NULL ; data = new char [ 100 ] ; data [ 0 ] = '\\0' ; CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_goodG2BData = data ; goodG2BSink ( ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 char [ 50 ] ; EXPR 5 char [ 50 ] FIELD 6 char [ 50 ] LEAF_NODE 7 char LEAF_NODE 7 [ EXPR 7 50 FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 7 ] LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 0 ] = '\\0' ; EXPR 5 data [ 0 ] = '\\0' ASSIGN 6 data [ 0 ] = '\\0' LVAL 7 data [ 0 ] FIELD 8 data [ 0 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_badData = data ; EXPR 5 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_badData = data ASSIGN 6 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_badData = data LVAL 7 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_badData FIELD 8 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_badData LEAF_NODE 9 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_badData ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( ) ; EXPR 5 badSink ( ) FUNCTION_CALL 6 badSink ( ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = NULL ; EXPR 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 = LEAF_NODE 4 new EXPR_STATEMENT 4 char [ 100 ] ; EXPR 5 char [ 100 ] FIELD 6 char [ 100 ] LEAF_NODE 7 char LEAF_NODE 7 [ EXPR 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 ] LEAF_NODE 5 ; EXPR_STATEMENT 4 data [ 0 ] = '\\0' ; EXPR 5 data [ 0 ] = '\\0' ASSIGN 6 data [ 0 ] = '\\0' LVAL 7 data [ 0 ] FIELD 8 data [ 0 ] LEAF_NODE 9 data LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_goodG2BData = data ; EXPR 5 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_goodG2BData = data ASSIGN 6 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_goodG2BData = data LVAL 7 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_goodG2BData FIELD 8 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_goodG2BData LEAF_NODE 9 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68_goodG2BData ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( ) ; EXPR 5 goodG2BSink ( ) FUNCTION_CALL 6 goodG2BSink ( ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_68 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 183, "project": "cwe119_ast_vul_function_test_adv_174", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54c_badSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54c_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54b_badSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54b_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54c_badSink ( data ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54c_badSink ( data ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54c_badSink ( data ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54c_badSink LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54c_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54c_goodG2BSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54c_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54b_goodG2BSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54b_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54c_goodG2BSink ( data ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54c_goodG2BSink ( data ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54c_goodG2BSink ( data ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54c_goodG2BSink LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54c_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 184, "project": "cwe119_ast_vul_function_test_adv_162", "target": 1}
{"func": "SIMPLE_DECL 1 wchar_t * CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_badData ; VAR_DECL 2 wchar_t * CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_badData TYPE 3 wchar_t * TYPE_NAME 4 wchar_t LEAF_NODE 5 wchar_t POINTER 4 * LEAF_NODE 5 * NAME 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_badData LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_badData LEAF_NODE 2 ; SIMPLE_DECL 1 wchar_t * CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_goodG2BData ; VAR_DECL 2 wchar_t * CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_goodG2BData TYPE 3 wchar_t * TYPE_NAME 4 wchar_t LEAF_NODE 5 wchar_t POINTER 4 * LEAF_NODE 5 * NAME 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_goodG2BData LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_goodG2BData LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68b_badSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 100 ] dataBuffer ; VAR_DECL 4 wchar_t [ 100 ] dataBuffer TYPE 5 wchar_t [ 100 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 data LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 100 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_badData = data ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_badData = data ASSIGN 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_badData = data LVAL 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_badData FIELD 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_badData LEAF_NODE 8 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_badData ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68b_badSink ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68b_badSink ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68b_badSink ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68b_badSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68b_goodG2BSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 100 ] dataBuffer ; VAR_DECL 4 wchar_t [ 100 ] dataBuffer TYPE 5 wchar_t [ 100 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; LEAF_NODE 3 wmemset LEAF_NODE 3 ( LEAF_NODE 3 data LEAF_NODE 3 , LEAF_NODE 3 L LEAF_NODE 3 'A' LEAF_NODE 3 , LEAF_NODE 3 50 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 50 LEAF_NODE 3 - LEAF_NODE 3 1 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_goodG2BData = data ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_goodG2BData = data ASSIGN 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_goodG2BData = data LVAL 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_goodG2BData FIELD 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_goodG2BData LEAF_NODE 8 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_goodG2BData ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68b_goodG2BSink ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68b_goodG2BSink ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68b_goodG2BSink ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68b_goodG2BSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 185, "project": "cwe119_ast_vul_function_test_adv_135", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61b_badSource LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61b_badSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; VAR_DECL 4 char [ 100 ] dataBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61b_badSource ( data ) ; EXPR 4 data = CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61b_badSource ( data ) ASSIGN 5 data = CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61b_badSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61b_badSource ( data ) FUNCTION_CALL 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61b_badSource ( data ) CALLEE 8 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61b_badSource LEAF_NODE 9 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61b_badSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; EXPR 5 memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) FUNCTION_CALL 6 memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) CALLEE 7 memcpy LEAF_NODE 8 memcpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( data ) * sizeof ( char ) FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 8 * FUNCTION_CALL 8 sizeof ( char ) CALLEE 9 sizeof LEAF_NODE 10 sizeof LEAF_NODE 9 ( ARGUMENT 9 char FIELD 10 char LEAF_NODE 11 char LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 50 - 1 ] = '\\0' ; EXPR 5 dest [ 50 - 1 ] = '\\0' ASSIGN 6 dest [ 50 - 1 ] = '\\0' LVAL 7 dest [ 50 - 1 ] FIELD 8 dest [ 50 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61b_goodG2BSource LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61b_goodG2BSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; VAR_DECL 4 char [ 100 ] dataBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61b_goodG2BSource ( data ) ; EXPR 4 data = CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61b_goodG2BSource ( data ) ASSIGN 5 data = CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61b_goodG2BSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61b_goodG2BSource ( data ) FUNCTION_CALL 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61b_goodG2BSource ( data ) CALLEE 8 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61b_goodG2BSource LEAF_NODE 9 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61b_goodG2BSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 50 ] dest ; dest = \"\" ; VAR_DECL 5 char [ 50 ] dest ; dest = \"\" TYPE 6 char [ 50 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 50 ] LEAF_NODE 8 [ FIELD 8 50 LEAF_NODE 9 50 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 6 ; INIT 6 dest = \"\" ASSIGN 7 dest = \"\" LVAL 8 dest NAME 9 dest LEAF_NODE 10 dest ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; EXPR 5 memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) FUNCTION_CALL 6 memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) CALLEE 7 memcpy LEAF_NODE 8 memcpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 strlen ( data ) * sizeof ( char ) FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 8 * FUNCTION_CALL 8 sizeof ( char ) CALLEE 9 sizeof LEAF_NODE 10 sizeof LEAF_NODE 9 ( ARGUMENT 9 char FIELD 10 char LEAF_NODE 11 char LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 50 - 1 ] = '\\0' ; EXPR 5 dest [ 50 - 1 ] = '\\0' ASSIGN 6 dest [ 50 - 1 ] = '\\0' LVAL 7 dest [ 50 - 1 ] FIELD 8 dest [ 50 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 50 - 1 FIELD 10 50 LEAF_NODE 11 50 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 186, "project": "cwe119_ast_vul_function_test_adv_145", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int globalFive ; VAR_DECL 4 int globalFive TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalFive LEAF_NODE 6 globalFive LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalFive == 5 EXPR 5 globalFive == 5 FIELD 6 globalFive LEAF_NODE 7 globalFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = ( char * ) malloc ( 50 * sizeof ( char ) ) ; EXPR 7 data = ( char * ) malloc ( 50 * sizeof ( char ) ) ASSIGN 8 data = ( char * ) malloc ( 50 * sizeof ( char ) ) LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( char * ) malloc ( 50 * sizeof ( char ) ) LEAF_NODE 10 ( TYPE_NAME 10 char LEAF_NODE 11 char LEAF_NODE 10 * LEAF_NODE 10 ) FUNCTION_CALL 10 malloc ( 50 * sizeof ( char ) ) CALLEE 11 malloc LEAF_NODE 12 malloc LEAF_NODE 11 ( ARGUMENT 11 50 * sizeof ( char ) FIELD 12 50 LEAF_NODE 13 50 LEAF_NODE 12 * FUNCTION_CALL 12 sizeof ( char ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 char FIELD 14 char LEAF_NODE 15 char LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 data [ 0 ] = '\\0' ; EXPR 7 data [ 0 ] = '\\0' ASSIGN 8 data [ 0 ] = '\\0' LVAL 9 data [ 0 ] FIELD 10 data [ 0 ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncat ( data , source , 100 ) ; EXPR 5 strncat ( data , source , 100 ) FUNCTION_CALL 6 strncat ( data , source , 100 ) CALLEE 7 strncat LEAF_NODE 8 strncat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int globalFive ; VAR_DECL 4 int globalFive TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalFive LEAF_NODE 6 globalFive LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalFive != 5 EXPR 5 globalFive != 5 FIELD 6 globalFive LEAF_NODE 7 globalFive EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 7 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 8 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 10 ( TYPE_NAME 10 char LEAF_NODE 11 char LEAF_NODE 10 * LEAF_NODE 10 ) FUNCTION_CALL 10 malloc ( 100 * sizeof ( char ) ) CALLEE 11 malloc LEAF_NODE 12 malloc LEAF_NODE 11 ( ARGUMENT 11 100 * sizeof ( char ) FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 * FUNCTION_CALL 12 sizeof ( char ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 char FIELD 14 char LEAF_NODE 15 char LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 data [ 0 ] = '\\0' ; EXPR 7 data [ 0 ] = '\\0' ASSIGN 8 data [ 0 ] = '\\0' LVAL 9 data [ 0 ] FIELD 10 data [ 0 ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncat ( data , source , 100 ) ; EXPR 5 strncat ( data , source , 100 ) FUNCTION_CALL 6 strncat ( data , source , 100 ) CALLEE 7 strncat LEAF_NODE 8 strncat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int globalFive ; VAR_DECL 4 int globalFive TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalFive LEAF_NODE 6 globalFive LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalFive == 5 EXPR 5 globalFive == 5 FIELD 6 globalFive LEAF_NODE 7 globalFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 7 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 8 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 10 ( TYPE_NAME 10 char LEAF_NODE 11 char LEAF_NODE 10 * LEAF_NODE 10 ) FUNCTION_CALL 10 malloc ( 100 * sizeof ( char ) ) CALLEE 11 malloc LEAF_NODE 12 malloc LEAF_NODE 11 ( ARGUMENT 11 100 * sizeof ( char ) FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 * FUNCTION_CALL 12 sizeof ( char ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 char FIELD 14 char LEAF_NODE 15 char LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 data [ 0 ] = '\\0' ; EXPR 7 data [ 0 ] = '\\0' ASSIGN 8 data [ 0 ] = '\\0' LVAL 9 data [ 0 ] FIELD 10 data [ 0 ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strncat ( data , source , 100 ) ; EXPR 5 strncat ( data , source , 100 ) FUNCTION_CALL 6 strncat ( data , source , 100 ) CALLEE 7 strncat LEAF_NODE 8 strncat LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 187, "project": "cwe119_ast_vul_function_test_adv_42", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_badSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_badSink PARAMETER_LIST 2 ( char * [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * [ ] dataArray TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_bad LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * [ 5 ] dataArray ; VAR_DECL 4 char * [ 5 ] dataArray TYPE 5 char * [ 5 ] TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * TYPE_SUFFIX 6 [ 5 ] LEAF_NODE 7 [ FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 10 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 10 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 10 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 10 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 10 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 10 * sizeof ( char ) FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataArray [ 2 ] = data ; EXPR 4 dataArray [ 2 ] = data ASSIGN 5 dataArray [ 2 ] = data LVAL 6 dataArray [ 2 ] FIELD 7 dataArray [ 2 ] LEAF_NODE 8 dataArray LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_badSink ( dataArray ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_badSink ( dataArray ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_badSink ( dataArray ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_badSink LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_badSink LEAF_NODE 6 ( ARGUMENT 6 dataArray FIELD 7 dataArray LEAF_NODE 8 dataArray LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_goodG2BSink LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_goodG2BSink PARAMETER_LIST 2 ( char * [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * [ ] dataArray TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * [ 5 ] dataArray ; VAR_DECL 4 char * [ 5 ] dataArray TYPE 5 char * [ 5 ] TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * TYPE_SUFFIX 6 [ 5 ] LEAF_NODE 7 [ FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ; EXPR_STATEMENT 3 data = NULL ; EXPR 4 data = NULL ASSIGN 5 data = NULL LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( ( 10 + 1 ) * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 ( 10 + 1 ) * sizeof ( char ) LEAF_NODE 9 ( FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ) LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataArray [ 2 ] = data ; EXPR 4 dataArray [ 2 ] = data ASSIGN 5 dataArray [ 2 ] = data LVAL 6 dataArray [ 2 ] FIELD 7 dataArray [ 2 ] LEAF_NODE 8 dataArray LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_goodG2BSink ( dataArray ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_goodG2BSink ( dataArray ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_goodG2BSink ( dataArray ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_goodG2BSink LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 dataArray FIELD 7 dataArray LEAF_NODE 8 dataArray LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_good LEAF_NODE 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_good ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_good ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_good ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_good LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_bad ( ) ; EXPR 4 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_bad ( ) FUNCTION_CALL 5 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_bad ( ) CALLEE 6 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_bad LEAF_NODE 7 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 188, "project": "cwe119_ast_vul_function_test_adv_134", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 50 ] dataBadBuffer ; VAR_DECL 4 char [ 50 ] dataBadBuffer TYPE 5 char [ 50 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 50 ] LEAF_NODE 7 [ FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataGoodBuffer ; VAR_DECL 4 char [ 100 ] dataGoodBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53b_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53b_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53b_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53b_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 50 ] dataBadBuffer ; VAR_DECL 4 char [ 50 ] dataBadBuffer TYPE 5 char [ 50 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 50 ] LEAF_NODE 7 [ FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataGoodBuffer ; VAR_DECL 4 char [ 100 ] dataGoodBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53b_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53b_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53b_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 189, "project": "cwe119_ast_vul_function_test_adv_138", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52b_badSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( data , 'A' , 100 - 1 ) ; EXPR 4 memset ( data , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( data , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 100 - 1 ] = '\\0' ; EXPR 4 data [ 100 - 1 ] = '\\0' ASSIGN 5 data [ 100 - 1 ] = '\\0' LVAL 6 data [ 100 - 1 ] FIELD 7 data [ 100 - 1 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52b_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52b_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52b_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52b_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52b_goodG2BSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; VAR_DECL 4 char * dataBuffer ; dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 5 ; INIT 5 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ASSIGN 6 dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LVAL 7 dataBuffer NAME 8 dataBuffer LEAF_NODE 9 dataBuffer ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * ) ALLOCA ( 100 * sizeof ( char ) ) LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 ALLOCA ( 100 * sizeof ( char ) ) CALLEE 9 ALLOCA LEAF_NODE 10 ALLOCA LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( char ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( char ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 char FIELD 12 char LEAF_NODE 13 char LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBuffer ; EXPR 4 data = dataBuffer ASSIGN 5 data = dataBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( data , 'A' , 50 - 1 ) ; EXPR 4 memset ( data , 'A' , 50 - 1 ) FUNCTION_CALL 5 memset ( data , 'A' , 50 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 50 - 1 FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 50 - 1 ] = '\\0' ; EXPR 4 data [ 50 - 1 ] = '\\0' ASSIGN 5 data [ 50 - 1 ] = '\\0' LVAL 6 data [ 50 - 1 ] FIELD 7 data [ 50 - 1 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 50 - 1 FIELD 9 50 LEAF_NODE 10 50 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52b_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52b_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52b_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 190, "project": "cwe119_ast_vul_function_test_adv_168", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_alloca_cpy_64b_badSink LEAF_NODE 3 CWE124_Buffer_Underwrite__char_alloca_cpy_64b_badSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * dataPtr ; dataPtr = ( char * * ) dataVoidPtr ; VAR_DECL 4 char * dataPtr ; dataPtr = ( char * * ) dataVoidPtr TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( char * * ) dataVoidPtr ASSIGN 6 dataPtr = ( char * * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 char * data ; data = ( * dataPtr ) ; VAR_DECL 4 char * data ; data = ( * dataPtr ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcpy ( data , source ) ; EXPR 5 strcpy ( data , source ) FUNCTION_CALL 6 strcpy ( data , source ) CALLEE 7 strcpy LEAF_NODE 8 strcpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE124_Buffer_Underwrite__char_alloca_cpy_64b_goodG2BSink LEAF_NODE 3 CWE124_Buffer_Underwrite__char_alloca_cpy_64b_goodG2BSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * dataPtr ; dataPtr = ( char * * ) dataVoidPtr ; VAR_DECL 4 char * dataPtr ; dataPtr = ( char * * ) dataVoidPtr TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( char * * ) dataVoidPtr ASSIGN 6 dataPtr = ( char * * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( char * * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 char LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 char * data ; data = ( * dataPtr ) ; VAR_DECL 4 char * data ; data = ( * dataPtr ) TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcpy ( data , source ) ; EXPR 5 strcpy ( data , source ) FUNCTION_CALL 6 strcpy ( data , source ) CALLEE 7 strcpy LEAF_NODE 8 strcpy LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 191, "project": "cwe119_ast_vul_function_test_adv_119", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 ALLOCA LEAF_NODE 3 ALLOCA PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace std ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 std LEAF_NODE 2 ; NAMESPACE_DEF 1 namespace CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_73 { void badSink ( list < wchar_t * > dataList ) { STATEMENTS } ; void bad ( ) { wchar_t * data ; list < wchar_t * > dataList ; wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L 'A' , 100 - 1 ) ; data [ 100 - 1 ] = L '\\0' ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; badSink ( dataList ) ; } void goodG2BSink ( list < wchar_t * > dataList ) { STATEMENTS } ; static void goodG2B ( ) { wchar_t * data ; list < wchar_t * > dataList ; wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L 'A' , 50 - 1 ) ; data [ 50 - 1 ] = L '\\0' ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; dataList . push_back ( data ) ; goodG2BSink ( dataList ) ; } void good ( ) { goodG2B ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_73 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSink LEAF_NODE 4 badSink PARAMETER_LIST 3 ( list < wchar_t * > dataList ) LEAF_NODE 4 ( PARAMETER_DECL 4 list < wchar_t * > dataList TYPE 5 list < wchar_t * > TYPE_NAME 6 list < wchar_t * > LEAF_NODE 7 list LEAF_NODE 7 < LEAF_NODE 7 wchar_t LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataList LEAF_NODE 6 dataList LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 list < wchar_t * > dataList ; VAR_DECL 5 list < wchar_t * > dataList TYPE 6 list < wchar_t * > TYPE_NAME 7 list < wchar_t * > LEAF_NODE 8 list LEAF_NODE 8 < LEAF_NODE 8 wchar_t LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataList LEAF_NODE 7 dataList LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 5 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 dataBuffer LEAF_NODE 7 dataBuffer LEAF_NODE 6 ; INIT 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 7 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 8 dataBuffer NAME 9 dataBuffer LEAF_NODE 10 dataBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 9 ( TYPE_NAME 9 wchar_t LEAF_NODE 10 wchar_t LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 10 ALLOCA LEAF_NODE 11 ALLOCA LEAF_NODE 10 ( ARGUMENT 10 100 * sizeof ( wchar_t ) FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( wchar_t ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 wchar_t FIELD 13 wchar_t LEAF_NODE 14 wchar_t LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataBuffer ; EXPR 5 data = dataBuffer ASSIGN 6 data = dataBuffer LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataBuffer FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'A' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 badSink ( dataList ) ; EXPR 5 badSink ( dataList ) FUNCTION_CALL 6 badSink ( dataList ) CALLEE 7 badSink LEAF_NODE 8 badSink LEAF_NODE 7 ( ARGUMENT 7 dataList FIELD 8 dataList LEAF_NODE 9 dataList LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSink LEAF_NODE 4 goodG2BSink PARAMETER_LIST 3 ( list < wchar_t * > dataList ) LEAF_NODE 4 ( PARAMETER_DECL 4 list < wchar_t * > dataList TYPE 5 list < wchar_t * > TYPE_NAME 6 list < wchar_t * > LEAF_NODE 7 list LEAF_NODE 7 < LEAF_NODE 7 wchar_t LEAF_NODE 7 * LEAF_NODE 7 > NAME 5 dataList LEAF_NODE 6 dataList LEAF_NODE 4 ) LEAF_NODE 3 { LEAF_NODE 3 STATEMENTS LEAF_NODE 3 } LEAF_NODE 2 ; FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B LEAF_NODE 4 goodG2B PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * data ; VAR_DECL 5 wchar_t * data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; SIMPLE_DECL 4 list < wchar_t * > dataList ; VAR_DECL 5 list < wchar_t * > dataList TYPE 6 list < wchar_t * > TYPE_NAME 7 list < wchar_t * > LEAF_NODE 8 list LEAF_NODE 8 < LEAF_NODE 8 wchar_t LEAF_NODE 8 * LEAF_NODE 8 > NAME 6 dataList LEAF_NODE 7 dataList LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; VAR_DECL 5 wchar_t * dataBuffer ; dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 dataBuffer LEAF_NODE 7 dataBuffer LEAF_NODE 6 ; INIT 6 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ASSIGN 7 dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LVAL 8 dataBuffer NAME 9 dataBuffer LEAF_NODE 10 dataBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 9 ( TYPE_NAME 9 wchar_t LEAF_NODE 10 wchar_t LEAF_NODE 9 * LEAF_NODE 9 ) FUNCTION_CALL 9 ALLOCA ( 100 * sizeof ( wchar_t ) ) CALLEE 10 ALLOCA LEAF_NODE 11 ALLOCA LEAF_NODE 10 ( ARGUMENT 10 100 * sizeof ( wchar_t ) FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 * FUNCTION_CALL 11 sizeof ( wchar_t ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 wchar_t FIELD 13 wchar_t LEAF_NODE 14 wchar_t LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 data = dataBuffer ; EXPR 5 data = dataBuffer ASSIGN 6 data = dataBuffer LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataBuffer FIELD 8 dataBuffer LEAF_NODE 9 dataBuffer LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'A' LEAF_NODE 4 , LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dataList . push_back ( data ) ; EXPR 5 dataList . push_back ( data ) FUNCTION_CALL 6 dataList . push_back ( data ) CALLEE 7 dataList . push_back LEAF_NODE 8 dataList LEAF_NODE 8 . LEAF_NODE 8 push_back LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2BSink ( dataList ) ; EXPR 5 goodG2BSink ( dataList ) FUNCTION_CALL 6 goodG2BSink ( dataList ) CALLEE 7 goodG2BSink LEAF_NODE 8 goodG2BSink LEAF_NODE 7 ( ARGUMENT 7 dataList FIELD 8 dataList LEAF_NODE 9 dataList LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B ( ) ; EXPR 5 goodG2B ( ) FUNCTION_CALL 6 goodG2B ( ) CALLEE 7 goodG2B LEAF_NODE 8 goodG2B LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_73 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_73 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 192, "project": "cwe119_ast_vul_function_test_adv_139", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 wchar_t * CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_badData ; VAR_DECL 2 wchar_t * CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_badData TYPE 3 wchar_t * TYPE_NAME 4 wchar_t LEAF_NODE 5 wchar_t POINTER 4 * LEAF_NODE 5 * NAME 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_badData LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_badData LEAF_NODE 2 ; SIMPLE_DECL 1 wchar_t * CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_goodG2BData ; VAR_DECL 2 wchar_t * CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_goodG2BData TYPE 3 wchar_t * TYPE_NAME 4 wchar_t LEAF_NODE 5 wchar_t POINTER 4 * LEAF_NODE 5 * NAME 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_goodG2BData LEAF_NODE 4 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_goodG2BData LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68b_badSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_badData ; VAR_DECL 4 wchar_t * data ; data = CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_badData TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_badData ASSIGN 6 data = CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_badData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_badData FIELD 8 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_badData LEAF_NODE 9 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_badData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 wchar_t LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 \"\" ; EXPR 5 \"\" FIELD 6 \"\" LEAF_NODE 7 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncat ( dest , data , wcslen ( data ) ) ; EXPR 5 wcsncat ( dest , data , wcslen ( data ) ) FUNCTION_CALL 6 wcsncat ( dest , data , wcslen ( data ) ) CALLEE 7 wcsncat LEAF_NODE 8 wcsncat LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 wcslen ( data ) FUNCTION_CALL 8 wcslen ( data ) CALLEE 9 wcslen LEAF_NODE 10 wcslen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68b_goodG2BSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_goodG2BData ; VAR_DECL 4 wchar_t * data ; data = CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_goodG2BData TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_goodG2BData ASSIGN 6 data = CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_goodG2BData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_goodG2BData FIELD 8 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_goodG2BData LEAF_NODE 9 CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68_goodG2BData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 wchar_t LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 \"\" ; EXPR 5 \"\" FIELD 6 \"\" LEAF_NODE 7 \"\" LEAF_NODE 5 ; EXPR_STATEMENT 4 wcsncat ( dest , data , wcslen ( data ) ) ; EXPR 5 wcsncat ( dest , data , wcslen ( data ) ) FUNCTION_CALL 6 wcsncat ( dest , data , wcslen ( data ) ) CALLEE 7 wcsncat LEAF_NODE 8 wcsncat LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 wcslen ( data ) FUNCTION_CALL 8 wcslen ( data ) CALLEE 9 wcslen LEAF_NODE 10 wcslen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( data ) ; EXPR 5 printWLine ( data ) FUNCTION_CALL 6 printWLine ( data ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 193, "project": "cwe119_ast_vul_function_test_adv_197", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51b_badSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51b_badSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 10 ] dataBadBuffer ; VAR_DECL 4 wchar_t [ 10 ] dataBadBuffer TYPE 5 wchar_t [ 10 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 10 ] LEAF_NODE 7 [ FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 10 + 1 ] dataGoodBuffer ; VAR_DECL 4 wchar_t [ 10 + 1 ] dataGoodBuffer TYPE 5 wchar_t [ 10 + 1 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 10 + 1 ] LEAF_NODE 7 [ FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 7 + FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataBadBuffer ; EXPR 4 data = dataBadBuffer ASSIGN 5 data = dataBadBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataBadBuffer FIELD 7 dataBadBuffer LEAF_NODE 8 dataBadBuffer LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51b_badSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51b_badSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51b_badSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51b_badSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51b_badSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51b_goodG2BSink LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51b_goodG2BSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B LEAF_NODE 3 goodG2B PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 10 ] dataBadBuffer ; VAR_DECL 4 wchar_t [ 10 ] dataBadBuffer TYPE 5 wchar_t [ 10 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 10 ] LEAF_NODE 7 [ FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t [ 10 + 1 ] dataGoodBuffer ; VAR_DECL 4 wchar_t [ 10 + 1 ] dataGoodBuffer TYPE 5 wchar_t [ 10 + 1 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t TYPE_SUFFIX 6 [ 10 + 1 ] LEAF_NODE 7 [ FIELD 7 10 LEAF_NODE 8 10 LEAF_NODE 7 + FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 data = dataGoodBuffer ; EXPR 4 data = dataGoodBuffer ASSIGN 5 data = dataGoodBuffer LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dataGoodBuffer FIELD 7 dataGoodBuffer LEAF_NODE 8 dataGoodBuffer LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51b_goodG2BSink ( data ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51b_goodG2BSink ( data ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51b_goodG2BSink ( data ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51b_goodG2BSink LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51b_goodG2BSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B ( ) ; EXPR 4 goodG2B ( ) FUNCTION_CALL 5 goodG2B ( ) CALLEE 6 goodG2B LEAF_NODE 7 goodG2B LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 194, "project": "cwe119_ast_vul_function_test_adv_79", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_declare_cpy_15_bad LEAF_NODE 3 CWE127_Buffer_Underread__char_declare_cpy_15_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; VAR_DECL 4 char [ 100 ] dataBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 6 EXPR 5 6 FIELD 6 6 LEAF_NODE 7 6 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 6 : LEAF_NODE 7 case LEAF_NODE 7 6 LEAF_NODE 7 : EXPR_STATEMENT 6 data = dataBuffer - 8 ; EXPR 7 data = dataBuffer - 8 ASSIGN 8 data = dataBuffer - 8 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer - 8 FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 10 - FIELD 10 8 LEAF_NODE 11 8 LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 * 2 ] dest ; VAR_DECL 5 char [ 100 * 2 ] dest TYPE 6 char [ 100 * 2 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 * 2 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 * FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( dest , 'C' , 100 * 2 - 1 ) ; EXPR 5 memset ( dest , 'C' , 100 * 2 - 1 ) FUNCTION_CALL 6 memset ( dest , 'C' , 100 * 2 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 * 2 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 * FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 100 * 2 - 1 ] = '\\0' ; EXPR 5 dest [ 100 * 2 - 1 ] = '\\0' ASSIGN 6 dest [ 100 * 2 - 1 ] = '\\0' LVAL 7 dest [ 100 * 2 - 1 ] FIELD 8 dest [ 100 * 2 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 100 * 2 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcpy ( dest , data ) ; EXPR 5 strcpy ( dest , data ) FUNCTION_CALL 6 strcpy ( dest , data ) CALLEE 7 strcpy LEAF_NODE 8 strcpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( dest ) ; EXPR 5 printLine ( dest ) FUNCTION_CALL 6 printLine ( dest ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; VAR_DECL 4 char [ 100 ] dataBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 5 EXPR 5 5 FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 6 : LEAF_NODE 7 case LEAF_NODE 7 6 LEAF_NODE 7 : EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 data = dataBuffer ; EXPR 7 data = dataBuffer ASSIGN 8 data = dataBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 * 2 ] dest ; VAR_DECL 5 char [ 100 * 2 ] dest TYPE 6 char [ 100 * 2 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 * 2 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 * FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( dest , 'C' , 100 * 2 - 1 ) ; EXPR 5 memset ( dest , 'C' , 100 * 2 - 1 ) FUNCTION_CALL 6 memset ( dest , 'C' , 100 * 2 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 * 2 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 * FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 100 * 2 - 1 ] = '\\0' ; EXPR 5 dest [ 100 * 2 - 1 ] = '\\0' ASSIGN 6 dest [ 100 * 2 - 1 ] = '\\0' LVAL 7 dest [ 100 * 2 - 1 ] FIELD 8 dest [ 100 * 2 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 100 * 2 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcpy ( dest , data ) ; EXPR 5 strcpy ( dest , data ) FUNCTION_CALL 6 strcpy ( dest , data ) CALLEE 7 strcpy LEAF_NODE 8 strcpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( dest ) ; EXPR 5 printLine ( dest ) FUNCTION_CALL 6 printLine ( dest ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataBuffer ; VAR_DECL 4 char [ 100 ] dataBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataBuffer LEAF_NODE 6 dataBuffer LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( dataBuffer , 'A' , 100 - 1 ) ; EXPR 4 memset ( dataBuffer , 'A' , 100 - 1 ) FUNCTION_CALL 5 memset ( dataBuffer , 'A' , 100 - 1 ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 dataBuffer FIELD 7 dataBuffer LEAF_NODE 8 dataBuffer LEAF_NODE 6 , ARGUMENT 6 'A' FIELD 7 'A' LEAF_NODE 8 'A' LEAF_NODE 6 , ARGUMENT 6 100 - 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataBuffer [ 100 - 1 ] = '\\0' ; EXPR 4 dataBuffer [ 100 - 1 ] = '\\0' ASSIGN 5 dataBuffer [ 100 - 1 ] = '\\0' LVAL 6 dataBuffer [ 100 - 1 ] FIELD 7 dataBuffer [ 100 - 1 ] LEAF_NODE 8 dataBuffer LEAF_NODE 8 [ EXPR 8 100 - 1 FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 6 EXPR 5 6 FIELD 6 6 LEAF_NODE 7 6 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 6 : LEAF_NODE 7 case LEAF_NODE 7 6 LEAF_NODE 7 : EXPR_STATEMENT 6 data = dataBuffer ; EXPR 7 data = dataBuffer ASSIGN 8 data = dataBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBuffer FIELD 10 dataBuffer LEAF_NODE 11 dataBuffer LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 * 2 ] dest ; VAR_DECL 5 char [ 100 * 2 ] dest TYPE 6 char [ 100 * 2 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 * 2 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 * FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( dest , 'C' , 100 * 2 - 1 ) ; EXPR 5 memset ( dest , 'C' , 100 * 2 - 1 ) FUNCTION_CALL 6 memset ( dest , 'C' , 100 * 2 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 * 2 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 * FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 dest [ 100 * 2 - 1 ] = '\\0' ; EXPR 5 dest [ 100 * 2 - 1 ] = '\\0' ASSIGN 6 dest [ 100 * 2 - 1 ] = '\\0' LVAL 7 dest [ 100 * 2 - 1 ] FIELD 8 dest [ 100 * 2 - 1 ] LEAF_NODE 9 dest LEAF_NODE 9 [ EXPR 9 100 * 2 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 strcpy ( dest , data ) ; EXPR 5 strcpy ( dest , data ) FUNCTION_CALL 6 strcpy ( dest , data ) CALLEE 7 strcpy LEAF_NODE 8 strcpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( dest ) ; EXPR 5 printLine ( dest ) FUNCTION_CALL 6 printLine ( dest ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__char_declare_cpy_15_good LEAF_NODE 3 CWE127_Buffer_Underread__char_declare_cpy_15_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__char_declare_cpy_15_good ( ) ; EXPR 4 CWE127_Buffer_Underread__char_declare_cpy_15_good ( ) FUNCTION_CALL 5 CWE127_Buffer_Underread__char_declare_cpy_15_good ( ) CALLEE 6 CWE127_Buffer_Underread__char_declare_cpy_15_good LEAF_NODE 7 CWE127_Buffer_Underread__char_declare_cpy_15_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE127_Buffer_Underread__char_declare_cpy_15_bad ( ) ; EXPR 4 CWE127_Buffer_Underread__char_declare_cpy_15_bad ( ) FUNCTION_CALL 5 CWE127_Buffer_Underread__char_declare_cpy_15_bad ( ) CALLEE 6 CWE127_Buffer_Underread__char_declare_cpy_15_bad LEAF_NODE 7 CWE127_Buffer_Underread__char_declare_cpy_15_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 195, "project": "cwe119_ast_vul_function_test_adv_3", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 31:8 31:8 5 struct CLASS_NAME 31:15 31:15 5 myData LEAF_NODE 31:15 31:15 6 myData LEAF_NODE 0:0 0:0 5 BASE_CLASSES LEAF_NODE 31:21 31:21 5 { CLASS_CONTENT 32:4 33:4 5 int data ; struct myData * dataPtr ; SIMPLE_DECL 32:4 32:12 6 int data ; VAR_DECL 32:4 32:8 7 int data TYPE 32:4 32:4 8 int TYPE_NAME 32:4 32:4 9 int LEAF_NODE 32:4 32:4 10 int NAME 32:8 32:8 8 data LEAF_NODE 32:8 32:8 9 data LEAF_NODE 32:12 32:12 7 ; SIMPLE_DECL 33:4 33:26 6 struct myData * dataPtr ; VAR_DECL 33:4 33:19 7 struct myData * dataPtr TYPE 33:4 33:18 8 struct myData * TYPE_NAME 33:4 33:11 9 struct myData LEAF_NODE 33:4 33:4 10 struct LEAF_NODE 33:11 33:11 10 myData 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { EXPR 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 6 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 9 malloc LEAF_NODE 10 malloc LEAF_NODE 9 ( ARGUMENT 9 100 * sizeof ( wchar_t ) FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( wchar_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_10_bad LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_10_bad PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 50 ] dataBadBuffer ; VAR_DECL 4 char [ 50 ] dataBadBuffer TYPE 5 char [ 50 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 50 ] LEAF_NODE 7 [ FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataGoodBuffer ; VAR_DECL 4 char [ 100 ] dataGoodBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 int globalTrue ; VAR_DECL 4 int globalTrue TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalTrue LEAF_NODE 6 globalTrue LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalTrue EXPR 5 globalTrue FIELD 6 globalTrue LEAF_NODE 7 globalTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataBadBuffer ; EXPR 7 data = dataBadBuffer ASSIGN 8 data = dataBadBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataBadBuffer FIELD 10 dataBadBuffer LEAF_NODE 11 dataBadBuffer LEAF_NODE 7 ; EXPR_STATEMENT 6 data [ 0 ] = '\\0' ; EXPR 7 data [ 0 ] = '\\0' ASSIGN 8 data [ 0 ] = '\\0' LVAL 9 data [ 0 ] FIELD 10 data [ 0 ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 SNPRINTF ( data , 100 , \"%s\" , source ) ; EXPR 5 SNPRINTF ( data , 100 , \"%s\" , source ) FUNCTION_CALL 6 SNPRINTF ( data , 100 , \"%s\" , source ) CALLEE 7 SNPRINTF LEAF_NODE 8 SNPRINTF LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 , ARGUMENT 7 \"%s\" FIELD 8 \"%s\" LEAF_NODE 9 \"%s\" LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B1 LEAF_NODE 3 goodG2B1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 50 ] dataBadBuffer ; VAR_DECL 4 char [ 50 ] dataBadBuffer TYPE 5 char [ 50 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 50 ] LEAF_NODE 7 [ FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataGoodBuffer ; VAR_DECL 4 char [ 100 ] dataGoodBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 int globalFalse ; VAR_DECL 4 int globalFalse TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalFalse LEAF_NODE 6 globalFalse LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalFalse EXPR 5 globalFalse FIELD 6 globalFalse LEAF_NODE 7 globalFalse LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataGoodBuffer ; EXPR 7 data = dataGoodBuffer ASSIGN 8 data = dataGoodBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataGoodBuffer FIELD 10 dataGoodBuffer LEAF_NODE 11 dataGoodBuffer LEAF_NODE 7 ; EXPR_STATEMENT 6 data [ 0 ] = '\\0' ; EXPR 7 data [ 0 ] = '\\0' ASSIGN 8 data [ 0 ] = '\\0' LVAL 9 data [ 0 ] FIELD 10 data [ 0 ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 SNPRINTF ( data , 100 , \"%s\" , source ) ; EXPR 5 SNPRINTF ( data , 100 , \"%s\" , source ) FUNCTION_CALL 6 SNPRINTF ( data , 100 , \"%s\" , source ) CALLEE 7 SNPRINTF LEAF_NODE 8 SNPRINTF LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 , ARGUMENT 7 \"%s\" FIELD 8 \"%s\" LEAF_NODE 9 \"%s\" LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 goodG2B2 LEAF_NODE 3 goodG2B2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 50 ] dataBadBuffer ; VAR_DECL 4 char [ 50 ] dataBadBuffer TYPE 5 char [ 50 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 50 ] LEAF_NODE 7 [ FIELD 7 50 LEAF_NODE 8 50 LEAF_NODE 7 ] NAME 5 dataBadBuffer LEAF_NODE 6 dataBadBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 100 ] dataGoodBuffer ; VAR_DECL 4 char [ 100 ] dataGoodBuffer TYPE 5 char [ 100 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 100 ] LEAF_NODE 7 [ FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 ] NAME 5 dataGoodBuffer LEAF_NODE 6 dataGoodBuffer LEAF_NODE 4 ; SIMPLE_DECL 3 int globalTrue ; VAR_DECL 4 int globalTrue TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 globalTrue LEAF_NODE 6 globalTrue LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalTrue EXPR 5 globalTrue FIELD 6 globalTrue LEAF_NODE 7 globalTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = dataGoodBuffer ; EXPR 7 data = dataGoodBuffer ASSIGN 8 data = dataGoodBuffer LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dataGoodBuffer FIELD 10 dataGoodBuffer LEAF_NODE 11 dataGoodBuffer LEAF_NODE 7 ; EXPR_STATEMENT 6 data [ 0 ] = '\\0' ; EXPR 7 data [ 0 ] = '\\0' ASSIGN 8 data [ 0 ] = '\\0' LVAL 9 data [ 0 ] FIELD 10 data [ 0 ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ 100 ] source ; VAR_DECL 5 char [ 100 ] source TYPE 6 char [ 100 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 100 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 ] NAME 6 source LEAF_NODE 7 source LEAF_NODE 5 ; EXPR_STATEMENT 4 memset ( source , 'C' , 100 - 1 ) ; EXPR 5 memset ( source , 'C' , 100 - 1 ) FUNCTION_CALL 6 memset ( source , 'C' , 100 - 1 ) CALLEE 7 memset LEAF_NODE 8 memset LEAF_NODE 7 ( ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 , ARGUMENT 7 'C' FIELD 8 'C' LEAF_NODE 9 'C' LEAF_NODE 7 , ARGUMENT 7 100 - 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 source [ 100 - 1 ] = '\\0' ; EXPR 5 source [ 100 - 1 ] = '\\0' ASSIGN 6 source [ 100 - 1 ] = '\\0' LVAL 7 source [ 100 - 1 ] FIELD 8 source [ 100 - 1 ] LEAF_NODE 9 source LEAF_NODE 9 [ EXPR 9 100 - 1 FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ] ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 SNPRINTF ( data , 100 , \"%s\" , source ) ; EXPR 5 SNPRINTF ( data , 100 , \"%s\" , source ) FUNCTION_CALL 6 SNPRINTF ( data , 100 , \"%s\" , source ) CALLEE 7 SNPRINTF LEAF_NODE 8 SNPRINTF LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 100 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 7 , ARGUMENT 7 \"%s\" FIELD 8 \"%s\" LEAF_NODE 9 \"%s\" LEAF_NODE 7 , ARGUMENT 7 source FIELD 8 source LEAF_NODE 9 source LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printLine ( data ) ; EXPR 5 printLine ( data ) FUNCTION_CALL 6 printLine ( data ) CALLEE 7 printLine LEAF_NODE 8 printLine LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_10_good LEAF_NODE 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_10_good PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 goodG2B1 ( ) ; EXPR 4 goodG2B1 ( ) FUNCTION_CALL 5 goodG2B1 ( ) CALLEE 6 goodG2B1 LEAF_NODE 7 goodG2B1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 goodG2B2 ( ) ; EXPR 4 goodG2B2 ( ) FUNCTION_CALL 5 goodG2B2 ( ) CALLEE 6 goodG2B2 LEAF_NODE 7 goodG2B2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_10_good ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_10_good ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_10_good ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_10_good LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_10_good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_10_bad ( ) ; EXPR 4 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_10_bad ( ) FUNCTION_CALL 5 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_10_bad ( ) CALLEE 6 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_10_bad LEAF_NODE 7 CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_10_bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 196, "project": "cwe119_ast_vul_function_test_adv_46", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 wmemset LEAF_NODE 3 wmemset PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_62 { void badSource ( wchar_t * & data ) { wmemset ( data , L 'A' , 100 - 1 ) ; data [ 100 - 1 ] = L '\\0' ; } void goodG2BSource ( wchar_t * & data ) { wmemset ( data , L 'A' , 50 - 1 ) ; data [ 50 - 1 ] = L '\\0' ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_62 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 badSource LEAF_NODE 4 badSource PARAMETER_LIST 3 ( wchar_t * & data ) LEAF_NODE 4 ( PARAMETER_DECL 4 wchar_t * & data TYPE 5 wchar_t * & TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * & LEAF_NODE 7 * LEAF_NODE 7 & NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'A' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2BSource LEAF_NODE 4 goodG2BSource PARAMETER_LIST 3 ( wchar_t * & data ) LEAF_NODE 4 ( PARAMETER_DECL 4 wchar_t * & data TYPE 5 wchar_t * & TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * & LEAF_NODE 7 * LEAF_NODE 7 & NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 data LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'A' LEAF_NODE 4 , LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 data LEAF_NODE 4 [ LEAF_NODE 4 50 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 197, "project": "cwe119_ast_vul_function_test_adv_163", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__malloc_wchar_t_cpy_64b_badSink LEAF_NODE 3 CWE127_Buffer_Underread__malloc_wchar_t_cpy_64b_badSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * dataPtr ; dataPtr = ( wchar_t * * ) dataVoidPtr ; VAR_DECL 4 wchar_t * dataPtr ; dataPtr = ( wchar_t * * ) dataVoidPtr TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( wchar_t * * ) dataVoidPtr ASSIGN 6 dataPtr = ( wchar_t * * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * data ; data = ( * dataPtr ) ; VAR_DECL 4 wchar_t * data ; data = ( * dataPtr ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 * 2 ] dest ; VAR_DECL 5 wchar_t [ 100 * 2 ] dest TYPE 6 wchar_t [ 100 * 2 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 * 2 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 * FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 dest LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 * LEAF_NODE 4 2 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 * LEAF_NODE 4 2 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcscpy ( dest , data ) ; EXPR 5 wcscpy ( dest , data ) FUNCTION_CALL 6 wcscpy ( dest , data ) CALLEE 7 wcscpy LEAF_NODE 8 wcscpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( dest ) ; EXPR 5 printWLine ( dest ) FUNCTION_CALL 6 printWLine ( dest ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE127_Buffer_Underread__malloc_wchar_t_cpy_64b_goodG2BSink LEAF_NODE 3 CWE127_Buffer_Underread__malloc_wchar_t_cpy_64b_goodG2BSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * dataPtr ; dataPtr = ( wchar_t * * ) dataVoidPtr ; VAR_DECL 4 wchar_t * dataPtr ; dataPtr = ( wchar_t * * ) dataVoidPtr TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( wchar_t * * ) dataVoidPtr ASSIGN 6 dataPtr = ( wchar_t * * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * data ; data = ( * dataPtr ) ; VAR_DECL 4 wchar_t * data ; data = ( * dataPtr ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t [ 100 * 2 ] dest ; VAR_DECL 5 wchar_t [ 100 * 2 ] dest TYPE 6 wchar_t [ 100 * 2 ] TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t TYPE_SUFFIX 7 [ 100 * 2 ] LEAF_NODE 8 [ FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 * FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 8 ] NAME 6 dest LEAF_NODE 7 dest LEAF_NODE 5 ; LEAF_NODE 4 wmemset LEAF_NODE 4 ( LEAF_NODE 4 dest LEAF_NODE 4 , LEAF_NODE 4 L LEAF_NODE 4 'C' LEAF_NODE 4 , LEAF_NODE 4 100 LEAF_NODE 4 * LEAF_NODE 4 2 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ) LEAF_NODE 4 ; LEAF_NODE 4 dest LEAF_NODE 4 [ LEAF_NODE 4 100 LEAF_NODE 4 * LEAF_NODE 4 2 LEAF_NODE 4 - LEAF_NODE 4 1 LEAF_NODE 4 ] LEAF_NODE 4 = LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; EXPR_STATEMENT 4 wcscpy ( dest , data ) ; EXPR 5 wcscpy ( dest , data ) FUNCTION_CALL 6 wcscpy ( dest , data ) CALLEE 7 wcscpy LEAF_NODE 8 wcscpy LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 , ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 printWLine ( dest ) ; EXPR 5 printWLine ( dest ) FUNCTION_CALL 6 printWLine ( dest ) CALLEE 7 printWLine LEAF_NODE 8 printWLine LEAF_NODE 7 ( ARGUMENT 7 dest FIELD 8 dest LEAF_NODE 9 dest LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 198, "project": "cwe119_ast_vul_function_test_adv_185", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printIntLine LEAF_NODE 3 printIntLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 fgets LEAF_NODE 3 fgets PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 fgets LEAF_NODE 3 fgets PARAMETER_LIST 2 ( bool a ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 fgets LEAF_NODE 3 fgets PARAMETER_LIST 2 ( bool a , bool b ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 fgets LEAF_NODE 3 fgets PARAMETER_LIST 2 ( bool a , bool b , bool c ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 fgets LEAF_NODE 3 fgets PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 bool TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 fgets LEAF_NODE 3 fgets PARAMETER_LIST 2 ( bool a , bool b , bool c , bool d , bool e ) LEAF_NODE 3 ( PARAMETER_DECL 3 bool a TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 bool b TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 , PARAMETER_DECL 3 bool c TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 bool d TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 bool e TYPE 4 bool TYPE_NAME 5 bool LEAF_NODE 6 bool NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } NAMESPACE_DEF 1 namespace CWE680_Integer_Overflow_to_Buffer_Overflow__new_fgets_14 { void bad ( ) { int data ; data = - 1 ; bool globalFive ; globalFive = false ; if ( globalFive == 5 ) { { char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; bool stdin ; stdin = false ; if ( fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( \"fgets() failed.\" ) ; } } } { size_t dataBytes , size_t i ; int * intPointer ; dataBytes = data * sizeof ( int ) ; intPointer = ( int * ) new char [ dataBytes ] ; for ( i = 0 ; i < ( size_t ) data ; i ++ ) { intPointer [ i ] = 0 ; } printIntLine ( intPointer [ 0 ] ) ; delete [ ] intPointer ; } } static void goodG2B1 ( ) { int data ; data = - 1 ; bool globalFive ; globalFive = false ; if ( globalFive != 5 ) { printLine ( \"Benign, fixed string\" ) ; } else { data = 20 ; } { size_t dataBytes , size_t i ; int * intPointer ; dataBytes = data * sizeof ( int ) ; intPointer = ( int * ) new char [ dataBytes ] ; for ( i = 0 ; i < ( size_t ) data ; i ++ ) { intPointer [ i ] = 0 ; } printIntLine ( intPointer [ 0 ] ) ; delete [ ] intPointer ; } } static void goodG2B2 ( ) { int data ; data = - 1 ; bool globalFive ; globalFive = false ; if ( globalFive == 5 ) { data = 20 ; } { size_t dataBytes , size_t i ; int * intPointer ; dataBytes = data * sizeof ( int ) ; intPointer = ( int * ) new char [ dataBytes ] ; for ( i = 0 ; i < ( size_t ) data ; i ++ ) { intPointer [ i ] = 0 ; } printIntLine ( intPointer [ 0 ] ) ; delete [ ] intPointer ; } } void good ( ) { goodG2B1 ( ) ; goodG2B2 ( ) ; } } LEAF_NODE 2 namespace LEAF_NODE 2 CWE680_Integer_Overflow_to_Buffer_Overflow__new_fgets_14 LEAF_NODE 2 { FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 bad LEAF_NODE 4 bad PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int data ; VAR_DECL 5 int data TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = - 1 ; EXPR 5 data = - 1 ASSIGN 6 data = - 1 LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 5 ; SIMPLE_DECL 4 bool globalFive ; globalFive = false ; VAR_DECL 5 bool globalFive ; globalFive = false TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool NAME 6 globalFive LEAF_NODE 7 globalFive LEAF_NODE 6 ; INIT 6 globalFive = false ASSIGN 7 globalFive = false LVAL 8 globalFive NAME 9 globalFive LEAF_NODE 10 globalFive ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 false FIELD 9 false LEAF_NODE 10 false LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 globalFive == 5 EXPR 6 globalFive == 5 FIELD 7 globalFive LEAF_NODE 8 globalFive EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SIMPLE_DECL 8 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 9 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 10 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 11 char LEAF_NODE 12 char TYPE_SUFFIX 11 [ CHAR_ARRAY_SIZE ] LEAF_NODE 12 [ FIELD 12 CHAR_ARRAY_SIZE LEAF_NODE 13 CHAR_ARRAY_SIZE LEAF_NODE 12 ] NAME 10 inputBuffer LEAF_NODE 11 inputBuffer LEAF_NODE 10 ; INIT 10 inputBuffer = \"\" ASSIGN 11 inputBuffer = \"\" LVAL 12 inputBuffer NAME 13 inputBuffer LEAF_NODE 14 inputBuffer ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 \"\" FIELD 13 \"\" LEAF_NODE 14 \"\" LEAF_NODE 9 ; SIMPLE_DECL 8 bool stdin ; stdin = false ; VAR_DECL 9 bool stdin ; stdin = false TYPE 10 bool TYPE_NAME 11 bool LEAF_NODE 12 bool NAME 10 stdin LEAF_NODE 11 stdin LEAF_NODE 10 ; INIT 10 stdin = false ASSIGN 11 stdin = false LVAL 12 stdin NAME 13 stdin LEAF_NODE 14 stdin ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 false FIELD 13 false LEAF_NODE 14 false LEAF_NODE 9 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 10 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 11 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 12 fgets LEAF_NODE 13 fgets LEAF_NODE 12 ( ARGUMENT 12 inputBuffer FIELD 13 inputBuffer LEAF_NODE 14 inputBuffer LEAF_NODE 12 , ARGUMENT 12 CHAR_ARRAY_SIZE FIELD 13 CHAR_ARRAY_SIZE LEAF_NODE 14 CHAR_ARRAY_SIZE LEAF_NODE 12 , ARGUMENT 12 stdin FIELD 13 stdin LEAF_NODE 14 stdin LEAF_NODE 12 ) EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 data = atoi ( inputBuffer ) ; EXPR 12 data = atoi ( inputBuffer ) ASSIGN 13 data = atoi ( inputBuffer ) LVAL 14 data FIELD 15 data LEAF_NODE 16 data ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 atoi ( inputBuffer ) FUNCTION_CALL 15 atoi ( inputBuffer ) CALLEE 16 atoi LEAF_NODE 17 atoi LEAF_NODE 16 ( ARGUMENT 16 inputBuffer FIELD 17 inputBuffer LEAF_NODE 18 inputBuffer LEAF_NODE 16 ) LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 8 KEYWORD 9 else LEAF_NODE 10 else STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 printLine ( \"fgets() failed.\" ) ; EXPR 12 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 13 printLine ( \"fgets() failed.\" ) CALLEE 14 printLine LEAF_NODE 15 printLine LEAF_NODE 14 ( ARGUMENT 14 \"fgets() failed.\" FIELD 15 \"fgets() failed.\" LEAF_NODE 16 \"fgets() failed.\" LEAF_NODE 14 ) LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 7 } LEAF_NODE 6 } LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 size_t dataBytes , size_t i ; INIT_DECL_LIST 6 size_t dataBytes , size_t i VAR_DECL 7 size_t dataBytes TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 dataBytes LEAF_NODE 9 dataBytes LEAF_NODE 7 , VAR_DECL 7 size_t i TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 i LEAF_NODE 9 i LEAF_NODE 6 ; SIMPLE_DECL 5 int * intPointer ; VAR_DECL 6 int * intPointer TYPE 7 int * TYPE_NAME 8 int LEAF_NODE 9 int POINTER 8 * LEAF_NODE 9 * NAME 7 intPointer LEAF_NODE 8 intPointer LEAF_NODE 6 ; EXPR_STATEMENT 5 dataBytes = data * sizeof ( int ) ; EXPR 6 dataBytes = data * sizeof ( int ) ASSIGN 7 dataBytes = data * sizeof ( int ) LVAL 8 dataBytes FIELD 9 dataBytes LEAF_NODE 10 dataBytes ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 data * sizeof ( int ) FIELD 9 data LEAF_NODE 10 data LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( int ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 int FIELD 11 int LEAF_NODE 12 int LEAF_NODE 10 ) LEAF_NODE 6 ; LEAF_NODE 5 intPointer LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 int LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 new EXPR_STATEMENT 5 char [ dataBytes ] ; EXPR 6 char [ dataBytes ] FIELD 7 char [ dataBytes ] LEAF_NODE 8 char LEAF_NODE 8 [ EXPR 8 dataBytes FIELD 9 dataBytes LEAF_NODE 10 dataBytes LEAF_NODE 8 ] LEAF_NODE 6 ; ITERATION 5 KEYWORD 6 for LEAF_NODE 7 for LEAF_NODE 6 ( FOR_INIT 6 i = 0 ; EXPR 7 i = 0 ASSIGN 8 i = 0 LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; CONDITION 6 i < ( size_t ) data EXPR 7 i < ( size_t ) data FIELD 8 i LEAF_NODE 9 i REL_OPERATOR 8 < LEAF_NODE 9 < LEAF_NODE 8 ( TYPE_NAME 8 size_t LEAF_NODE 9 size_t LEAF_NODE 8 ) FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ; FOR_EXPR 6 i ++ EXPR 7 i ++ FIELD 8 i ++ LEAF_NODE 9 i LEAF_NODE 9 ++ LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 intPointer [ i ] = 0 ; EXPR 9 intPointer [ i ] = 0 ASSIGN 10 intPointer [ i ] = 0 LVAL 11 intPointer [ i ] FIELD 12 intPointer [ i ] LEAF_NODE 13 intPointer LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; LEAF_NODE 7 } EXPR_STATEMENT 5 printIntLine ( intPointer [ 0 ] ) ; EXPR 6 printIntLine ( intPointer [ 0 ] ) FUNCTION_CALL 7 printIntLine ( intPointer [ 0 ] ) CALLEE 8 printIntLine LEAF_NODE 9 printIntLine LEAF_NODE 8 ( ARGUMENT 8 intPointer [ 0 ] FIELD 9 intPointer [ 0 ] LEAF_NODE 10 intPointer LEAF_NODE 10 [ EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ] LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 intPointer ; EXPR 6 intPointer FIELD 7 intPointer LEAF_NODE 8 intPointer LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B1 LEAF_NODE 4 goodG2B1 PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int data ; VAR_DECL 5 int data TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = - 1 ; EXPR 5 data = - 1 ASSIGN 6 data = - 1 LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 5 ; SIMPLE_DECL 4 bool globalFive ; globalFive = false ; VAR_DECL 5 bool globalFive ; globalFive = false TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool NAME 6 globalFive LEAF_NODE 7 globalFive LEAF_NODE 6 ; INIT 6 globalFive = false ASSIGN 7 globalFive = false LVAL 8 globalFive NAME 9 globalFive LEAF_NODE 10 globalFive ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 false FIELD 9 false LEAF_NODE 10 false LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 globalFive != 5 EXPR 6 globalFive != 5 FIELD 7 globalFive LEAF_NODE 8 globalFive EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Benign, fixed string\" ) ; EXPR 8 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 9 printLine ( \"Benign, fixed string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Benign, fixed string\" FIELD 11 \"Benign, fixed string\" LEAF_NODE 12 \"Benign, fixed string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 data = 20 ; EXPR 8 data = 20 ASSIGN 9 data = 20 LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 20 FIELD 11 20 LEAF_NODE 12 20 LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 size_t dataBytes , size_t i ; INIT_DECL_LIST 6 size_t dataBytes , size_t i VAR_DECL 7 size_t dataBytes TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 dataBytes LEAF_NODE 9 dataBytes LEAF_NODE 7 , VAR_DECL 7 size_t i TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 i LEAF_NODE 9 i LEAF_NODE 6 ; SIMPLE_DECL 5 int * intPointer ; VAR_DECL 6 int * intPointer TYPE 7 int * TYPE_NAME 8 int LEAF_NODE 9 int POINTER 8 * LEAF_NODE 9 * NAME 7 intPointer LEAF_NODE 8 intPointer LEAF_NODE 6 ; EXPR_STATEMENT 5 dataBytes = data * sizeof ( int ) ; EXPR 6 dataBytes = data * sizeof ( int ) ASSIGN 7 dataBytes = data * sizeof ( int ) LVAL 8 dataBytes FIELD 9 dataBytes LEAF_NODE 10 dataBytes ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 data * sizeof ( int ) FIELD 9 data LEAF_NODE 10 data LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( int ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 int FIELD 11 int LEAF_NODE 12 int LEAF_NODE 10 ) LEAF_NODE 6 ; LEAF_NODE 5 intPointer LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 int LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 new EXPR_STATEMENT 5 char [ dataBytes ] ; EXPR 6 char [ dataBytes ] FIELD 7 char [ dataBytes ] LEAF_NODE 8 char LEAF_NODE 8 [ EXPR 8 dataBytes FIELD 9 dataBytes LEAF_NODE 10 dataBytes LEAF_NODE 8 ] LEAF_NODE 6 ; ITERATION 5 KEYWORD 6 for LEAF_NODE 7 for LEAF_NODE 6 ( FOR_INIT 6 i = 0 ; EXPR 7 i = 0 ASSIGN 8 i = 0 LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; CONDITION 6 i < ( size_t ) data EXPR 7 i < ( size_t ) data FIELD 8 i LEAF_NODE 9 i REL_OPERATOR 8 < LEAF_NODE 9 < LEAF_NODE 8 ( TYPE_NAME 8 size_t LEAF_NODE 9 size_t LEAF_NODE 8 ) FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ; FOR_EXPR 6 i ++ EXPR 7 i ++ FIELD 8 i ++ LEAF_NODE 9 i LEAF_NODE 9 ++ LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 intPointer [ i ] = 0 ; EXPR 9 intPointer [ i ] = 0 ASSIGN 10 intPointer [ i ] = 0 LVAL 11 intPointer [ i ] FIELD 12 intPointer [ i ] LEAF_NODE 13 intPointer LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; LEAF_NODE 7 } EXPR_STATEMENT 5 printIntLine ( intPointer [ 0 ] ) ; EXPR 6 printIntLine ( intPointer [ 0 ] ) FUNCTION_CALL 7 printIntLine ( intPointer [ 0 ] ) CALLEE 8 printIntLine LEAF_NODE 9 printIntLine LEAF_NODE 8 ( ARGUMENT 8 intPointer [ 0 ] FIELD 9 intPointer [ 0 ] LEAF_NODE 10 intPointer LEAF_NODE 10 [ EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ] LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 intPointer ; EXPR 6 intPointer FIELD 7 intPointer LEAF_NODE 8 intPointer LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 static void LEAF_NODE 4 static TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 goodG2B2 LEAF_NODE 4 goodG2B2 PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int data ; VAR_DECL 5 int data TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 data LEAF_NODE 7 data LEAF_NODE 5 ; EXPR_STATEMENT 4 data = - 1 ; EXPR 5 data = - 1 ASSIGN 6 data = - 1 LVAL 7 data FIELD 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 5 ; SIMPLE_DECL 4 bool globalFive ; globalFive = false ; VAR_DECL 5 bool globalFive ; globalFive = false TYPE 6 bool TYPE_NAME 7 bool LEAF_NODE 8 bool NAME 6 globalFive LEAF_NODE 7 globalFive LEAF_NODE 6 ; INIT 6 globalFive = false ASSIGN 7 globalFive = false LVAL 8 globalFive NAME 9 globalFive LEAF_NODE 10 globalFive ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 false FIELD 9 false LEAF_NODE 10 false LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 globalFive == 5 EXPR 6 globalFive == 5 FIELD 7 globalFive LEAF_NODE 8 globalFive EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 data = 20 ; EXPR 8 data = 20 ASSIGN 9 data = 20 LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 20 FIELD 11 20 LEAF_NODE 12 20 LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 size_t dataBytes , size_t i ; INIT_DECL_LIST 6 size_t dataBytes , size_t i VAR_DECL 7 size_t dataBytes TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 dataBytes LEAF_NODE 9 dataBytes LEAF_NODE 7 , VAR_DECL 7 size_t i TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 i LEAF_NODE 9 i LEAF_NODE 6 ; SIMPLE_DECL 5 int * intPointer ; VAR_DECL 6 int * intPointer TYPE 7 int * TYPE_NAME 8 int LEAF_NODE 9 int POINTER 8 * LEAF_NODE 9 * NAME 7 intPointer LEAF_NODE 8 intPointer LEAF_NODE 6 ; EXPR_STATEMENT 5 dataBytes = data * sizeof ( int ) ; EXPR 6 dataBytes = data * sizeof ( int ) ASSIGN 7 dataBytes = data * sizeof ( int ) LVAL 8 dataBytes FIELD 9 dataBytes LEAF_NODE 10 dataBytes ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 data * sizeof ( int ) FIELD 9 data LEAF_NODE 10 data LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( int ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 int FIELD 11 int LEAF_NODE 12 int LEAF_NODE 10 ) LEAF_NODE 6 ; LEAF_NODE 5 intPointer LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 int LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 new EXPR_STATEMENT 5 char [ dataBytes ] ; EXPR 6 char [ dataBytes ] FIELD 7 char [ dataBytes ] LEAF_NODE 8 char LEAF_NODE 8 [ EXPR 8 dataBytes FIELD 9 dataBytes LEAF_NODE 10 dataBytes LEAF_NODE 8 ] LEAF_NODE 6 ; ITERATION 5 KEYWORD 6 for LEAF_NODE 7 for LEAF_NODE 6 ( FOR_INIT 6 i = 0 ; EXPR 7 i = 0 ASSIGN 8 i = 0 LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; CONDITION 6 i < ( size_t ) data EXPR 7 i < ( size_t ) data FIELD 8 i LEAF_NODE 9 i REL_OPERATOR 8 < LEAF_NODE 9 < LEAF_NODE 8 ( TYPE_NAME 8 size_t LEAF_NODE 9 size_t LEAF_NODE 8 ) FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ; FOR_EXPR 6 i ++ EXPR 7 i ++ FIELD 8 i ++ LEAF_NODE 9 i LEAF_NODE 9 ++ LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 intPointer [ i ] = 0 ; EXPR 9 intPointer [ i ] = 0 ASSIGN 10 intPointer [ i ] = 0 LVAL 11 intPointer [ i ] FIELD 12 intPointer [ i ] LEAF_NODE 13 intPointer LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; LEAF_NODE 7 } EXPR_STATEMENT 5 printIntLine ( intPointer [ 0 ] ) ; EXPR 6 printIntLine ( intPointer [ 0 ] ) FUNCTION_CALL 7 printIntLine ( intPointer [ 0 ] ) CALLEE 8 printIntLine LEAF_NODE 9 printIntLine LEAF_NODE 8 ( ARGUMENT 8 intPointer [ 0 ] FIELD 9 intPointer [ 0 ] LEAF_NODE 10 intPointer LEAF_NODE 10 [ EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ] LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 5 delete LEAF_NODE 5 [ LEAF_NODE 5 ] EXPR_STATEMENT 5 intPointer ; EXPR 6 intPointer FIELD 7 intPointer LEAF_NODE 8 intPointer LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } FUNCTION_DEF 2 RETURN_TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void FUNCTION_NAME 3 good LEAF_NODE 4 good PARAMETER_LIST 3 ( ) LEAF_NODE 4 ( LEAF_NODE 4 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 goodG2B1 ( ) ; EXPR 5 goodG2B1 ( ) FUNCTION_CALL 6 goodG2B1 ( ) CALLEE 7 goodG2B1 LEAF_NODE 8 goodG2B1 LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 goodG2B2 ( ) ; EXPR 5 goodG2B2 ( ) FUNCTION_CALL 6 goodG2B2 ( ) CALLEE 7 goodG2B2 LEAF_NODE 8 goodG2B2 LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } USING_DIRECTIVE 1 using namespace CWE680_Integer_Overflow_to_Buffer_Overflow__new_fgets_14 ; LEAF_NODE 2 using LEAF_NODE 2 namespace LEAF_NODE 2 CWE680_Integer_Overflow_to_Buffer_Overflow__new_fgets_14 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling good()...\" ) ; EXPR 4 printLine ( \"Calling good()...\" ) FUNCTION_CALL 5 printLine ( \"Calling good()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling good()...\" FIELD 7 \"Calling good()...\" LEAF_NODE 8 \"Calling good()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 good ( ) ; EXPR 4 good ( ) FUNCTION_CALL 5 good ( ) CALLEE 6 good LEAF_NODE 7 good LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished good()\" ) ; EXPR 4 printLine ( \"Finished good()\" ) FUNCTION_CALL 5 printLine ( \"Finished good()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished good()\" FIELD 7 \"Finished good()\" LEAF_NODE 8 \"Finished good()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling bad()...\" ) ; EXPR 4 printLine ( \"Calling bad()...\" ) FUNCTION_CALL 5 printLine ( \"Calling bad()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling bad()...\" FIELD 7 \"Calling bad()...\" LEAF_NODE 8 \"Calling bad()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bad ( ) ; EXPR 4 bad ( ) FUNCTION_CALL 5 bad ( ) CALLEE 6 bad LEAF_NODE 7 bad LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished bad()\" ) ; EXPR 4 printLine ( \"Finished bad()\" ) FUNCTION_CALL 5 printLine ( \"Finished bad()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished bad()\" FIELD 7 \"Finished bad()\" LEAF_NODE 8 \"Finished bad()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 199, "project": "cwe119_ast_vul_function_test_adv_72", "target": 1}
