{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 X509V3_conf_free LEAF_NODE 3 X509V3_conf_free PARAMETER_LIST 2 ( CONF_VALUE * conf ) LEAF_NODE 3 ( PARAMETER_DECL 3 CONF_VALUE * conf TYPE 4 CONF_VALUE * TYPE_NAME 5 CONF_VALUE LEAF_NODE 6 CONF_VALUE POINTER 5 * LEAF_NODE 6 * NAME 4 conf LEAF_NODE 5 conf LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! conf EXPR 5 ! conf UNARY_EXPR 6 ! conf UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 conf LEAF_NODE 8 conf LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return DESTINATION ; KEYWORD 6 return LEAF_NODE 7 return LEAF_NODE 6 DESTINATION LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 conf -> name EXPR 5 conf -> name FIELD 6 conf -> name LEAF_NODE 7 conf LEAF_NODE 7 -> LEAF_NODE 7 name LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 OPENSSL_free ( conf -> name ) ; EXPR 6 OPENSSL_free ( conf -> name ) FUNCTION_CALL 7 OPENSSL_free ( conf -> name ) CALLEE 8 OPENSSL_free LEAF_NODE 9 OPENSSL_free LEAF_NODE 8 ( ARGUMENT 8 conf -> name FIELD 9 conf -> name LEAF_NODE 10 conf LEAF_NODE 10 -> LEAF_NODE 10 name LEAF_NODE 8 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 conf -> value EXPR 5 conf -> value FIELD 6 conf -> value LEAF_NODE 7 conf LEAF_NODE 7 -> LEAF_NODE 7 value LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 OPENSSL_free ( conf -> value ) ; EXPR 6 OPENSSL_free ( conf -> value ) FUNCTION_CALL 7 OPENSSL_free ( conf -> value ) CALLEE 8 OPENSSL_free LEAF_NODE 9 OPENSSL_free LEAF_NODE 8 ( ARGUMENT 8 conf -> value FIELD 9 conf -> value LEAF_NODE 10 conf LEAF_NODE 10 -> LEAF_NODE 10 value LEAF_NODE 8 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 conf -> section EXPR 5 conf -> section FIELD 6 conf -> section LEAF_NODE 7 conf LEAF_NODE 7 -> LEAF_NODE 7 section LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 OPENSSL_free ( conf -> section ) ; EXPR 6 OPENSSL_free ( conf -> section ) FUNCTION_CALL 7 OPENSSL_free ( conf -> section ) CALLEE 8 OPENSSL_free LEAF_NODE 9 OPENSSL_free LEAF_NODE 8 ( ARGUMENT 8 conf -> section FIELD 9 conf -> section LEAF_NODE 10 conf LEAF_NODE 10 -> LEAF_NODE 10 section LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 3 OPENSSL_free ( conf ) ; EXPR 4 OPENSSL_free ( conf ) FUNCTION_CALL 5 OPENSSL_free ( conf ) CALLEE 6 OPENSSL_free LEAF_NODE 7 OPENSSL_free LEAF_NODE 6 ( ARGUMENT 6 conf FIELD 7 conf LEAF_NODE 8 conf LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 do_tcreate LEAF_NODE 3 do_tcreate PARAMETER_LIST 2 ( const char * value , const char * name ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * value TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 value LEAF_NODE 5 value LEAF_NODE 3 , PARAMETER_DECL 3 const char * name TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 name LEAF_NODE 5 name LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * eptr ; VAR_DECL 4 char * eptr TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 eptr LEAF_NODE 6 eptr LEAF_NODE 4 ; SIMPLE_DECL 3 int nid , int i , int rv ; rv = 0 ; INIT_DECL_LIST 4 int nid , int i , int rv ; rv = 0 VAR_DECL 5 int nid TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 nid LEAF_NODE 7 nid LEAF_NODE 5 , INIT_DECL_LIST 5 int i , int rv ; rv = 0 VAR_DECL 6 int i TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 i LEAF_NODE 8 i LEAF_NODE 6 , VAR_DECL 6 int rv ; rv = 0 TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rv LEAF_NODE 8 rv LEAF_NODE 7 ; INIT 7 rv = 0 ASSIGN 8 rv = 0 LVAL 9 rv NAME 10 rv LEAF_NODE 11 rv ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 4 ; SIMPLE_DECL 3 long tbl_min ; tbl_min = - 1 , long tbl_max ; tbl_max = - 1 ; INIT_DECL_LIST 4 long tbl_min ; tbl_min = - 1 , long tbl_max ; tbl_max = - 1 VAR_DECL 5 long tbl_min ; tbl_min = - 1 TYPE 6 long TYPE_NAME 7 long LEAF_NODE 8 long NAME 6 tbl_min LEAF_NODE 7 tbl_min LEAF_NODE 6 ; INIT 6 tbl_min = - 1 ASSIGN 7 tbl_min = - 1 LVAL 8 tbl_min NAME 9 tbl_min LEAF_NODE 10 tbl_min ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 5 , VAR_DECL 5 long tbl_max ; tbl_max = - 1 TYPE 6 long TYPE_NAME 7 long LEAF_NODE 8 long NAME 6 tbl_max LEAF_NODE 7 tbl_max LEAF_NODE 6 ; INIT 6 tbl_max = - 1 ASSIGN 7 tbl_max = - 1 LVAL 8 tbl_max NAME 9 tbl_max LEAF_NODE 10 tbl_max ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned long tbl_mask ; tbl_mask = 0 , unsigned long tbl_flags ; tbl_flags = 0 ; INIT_DECL_LIST 4 unsigned long tbl_mask ; tbl_mask = 0 , unsigned long tbl_flags ; tbl_flags = 0 VAR_DECL 5 unsigned long tbl_mask ; tbl_mask = 0 TYPE 6 unsigned long TYPE_NAME 7 unsigned long LEAF_NODE 8 unsigned LEAF_NODE 8 long NAME 6 tbl_mask LEAF_NODE 7 tbl_mask LEAF_NODE 6 ; INIT 6 tbl_mask = 0 ASSIGN 7 tbl_mask = 0 LVAL 8 tbl_mask NAME 9 tbl_mask LEAF_NODE 10 tbl_mask ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 5 , VAR_DECL 5 unsigned long tbl_flags ; tbl_flags = 0 TYPE 6 unsigned long TYPE_NAME 7 unsigned long LEAF_NODE 8 unsigned LEAF_NODE 8 long NAME 6 tbl_flags LEAF_NODE 7 tbl_flags LEAF_NODE 6 ; INIT 6 tbl_flags = 0 ASSIGN 7 tbl_flags = 0 LVAL 8 tbl_flags NAME 9 tbl_flags LEAF_NODE 10 tbl_flags ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 STACK_OF ( CONF_VALUE ) * lst = NULL ; EXPR 4 STACK_OF ( CONF_VALUE ) * lst = NULL ASSIGN 5 STACK_OF ( CONF_VALUE ) * lst = NULL LVAL 6 STACK_OF ( CONF_VALUE ) * lst FUNCTION_CALL 7 STACK_OF ( CONF_VALUE ) CALLEE 8 STACK_OF LEAF_NODE 9 STACK_OF LEAF_NODE 8 ( ARGUMENT 8 CONF_VALUE FIELD 9 CONF_VALUE LEAF_NODE 10 CONF_VALUE LEAF_NODE 8 ) LEAF_NODE 7 * FIELD 7 lst LEAF_NODE 8 lst ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 CONF_VALUE * cnf ; cnf = NULL ; VAR_DECL 4 CONF_VALUE * cnf ; cnf = NULL TYPE 5 CONF_VALUE * TYPE_NAME 6 CONF_VALUE LEAF_NODE 7 CONF_VALUE POINTER 6 * LEAF_NODE 7 * NAME 5 cnf LEAF_NODE 6 cnf LEAF_NODE 5 ; INIT 5 cnf = NULL ASSIGN 6 cnf = NULL LVAL 7 cnf NAME 8 cnf LEAF_NODE 9 cnf ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 nid = OBJ_sn2nid ( name ) ; EXPR 4 nid = OBJ_sn2nid ( name ) ASSIGN 5 nid = OBJ_sn2nid ( name ) LVAL 6 nid FIELD 7 nid LEAF_NODE 8 nid ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 OBJ_sn2nid ( name ) FUNCTION_CALL 7 OBJ_sn2nid ( name ) CALLEE 8 OBJ_sn2nid LEAF_NODE 9 OBJ_sn2nid LEAF_NODE 8 ( ARGUMENT 8 name FIELD 9 name LEAF_NODE 10 name LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 nid == NID_undef EXPR 5 nid == NID_undef FIELD 6 nid LEAF_NODE 7 nid EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NID_undef LEAF_NODE 7 NID_undef LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 nid = OBJ_ln2nid ( name ) ; EXPR 6 nid = OBJ_ln2nid ( name ) ASSIGN 7 nid = OBJ_ln2nid ( name ) LVAL 8 nid FIELD 9 nid LEAF_NODE 10 nid ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 OBJ_ln2nid ( name ) FUNCTION_CALL 9 OBJ_ln2nid ( name ) CALLEE 10 OBJ_ln2nid LEAF_NODE 11 OBJ_ln2nid LEAF_NODE 10 ( ARGUMENT 10 name FIELD 11 name LEAF_NODE 12 name LEAF_NODE 10 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 nid == NID_undef EXPR 5 nid == NID_undef FIELD 6 nid LEAF_NODE 7 nid EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NID_undef LEAF_NODE 7 NID_undef LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto err ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 err LEAF_NODE 7 err LEAF_NODE 6 ; EXPR_STATEMENT 3 lst = X509V3_parse_list ( value ) ; EXPR 4 lst = X509V3_parse_list ( value ) ASSIGN 5 lst = X509V3_parse_list ( value ) LVAL 6 lst FIELD 7 lst LEAF_NODE 8 lst ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 X509V3_parse_list ( value ) FUNCTION_CALL 7 X509V3_parse_list ( value ) CALLEE 8 X509V3_parse_list LEAF_NODE 9 X509V3_parse_list LEAF_NODE 8 ( ARGUMENT 8 value FIELD 9 value LEAF_NODE 10 value LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! lst EXPR 5 ! lst UNARY_EXPR 6 ! lst UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 lst LEAF_NODE 8 lst LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto err ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 err LEAF_NODE 7 err LEAF_NODE 6 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < sk_CONF_VALUE_num ( lst ) EXPR 5 i < sk_CONF_VALUE_num ( lst ) FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FUNCTION_CALL 6 sk_CONF_VALUE_num ( lst ) CALLEE 7 sk_CONF_VALUE_num LEAF_NODE 8 sk_CONF_VALUE_num LEAF_NODE 7 ( ARGUMENT 7 lst FIELD 8 lst LEAF_NODE 9 lst LEAF_NODE 7 ) LEAF_NODE 4 ; FOR_EXPR 4 i ++ EXPR 5 i ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 cnf = sk_CONF_VALUE_value ( lst , i ) ; EXPR 7 cnf = sk_CONF_VALUE_value ( lst , i ) ASSIGN 8 cnf = sk_CONF_VALUE_value ( lst , i ) LVAL 9 cnf FIELD 10 cnf LEAF_NODE 11 cnf ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 sk_CONF_VALUE_value ( lst , i ) FUNCTION_CALL 10 sk_CONF_VALUE_value ( lst , i ) CALLEE 11 sk_CONF_VALUE_value LEAF_NODE 12 sk_CONF_VALUE_value LEAF_NODE 11 ( ARGUMENT 11 lst FIELD 12 lst LEAF_NODE 13 lst LEAF_NODE 11 , ARGUMENT 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 strcmp ( cnf -> name , \"min\" ) == 0 EXPR 8 strcmp ( cnf -> name , \"min\" ) == 0 FUNCTION_CALL 9 strcmp ( cnf -> name , \"min\" ) CALLEE 10 strcmp LEAF_NODE 11 strcmp LEAF_NODE 10 ( ARGUMENT 10 cnf -> name FIELD 11 cnf -> name LEAF_NODE 12 cnf LEAF_NODE 12 -> LEAF_NODE 12 name LEAF_NODE 10 , ARGUMENT 10 \"min\" FIELD 11 \"min\" LEAF_NODE 12 \"min\" LEAF_NODE 10 ) EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 tbl_min = strtoul ( cnf -> value , & eptr , 0 ) ; EXPR 10 tbl_min = strtoul ( cnf -> value , & eptr , 0 ) ASSIGN 11 tbl_min = strtoul ( cnf -> value , & eptr , 0 ) LVAL 12 tbl_min FIELD 13 tbl_min LEAF_NODE 14 tbl_min ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 strtoul ( cnf -> value , & eptr , 0 ) FUNCTION_CALL 13 strtoul ( cnf -> value , & eptr , 0 ) CALLEE 14 strtoul LEAF_NODE 15 strtoul LEAF_NODE 14 ( ARGUMENT 14 cnf -> value FIELD 15 cnf -> value LEAF_NODE 16 cnf LEAF_NODE 16 -> LEAF_NODE 16 value LEAF_NODE 14 , ARGUMENT 14 & eptr UNARY_EXPR 15 & eptr UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 eptr LEAF_NODE 17 eptr LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 * eptr EXPR 11 * eptr UNARY_EXPR 12 * eptr UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 eptr LEAF_NODE 14 eptr LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 goto err ; KEYWORD 12 goto LEAF_NODE 13 goto DESTINATION 12 err LEAF_NODE 13 err LEAF_NODE 12 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 strcmp ( cnf -> name , \"max\" ) == 0 EXPR 10 strcmp ( cnf -> name , \"max\" ) == 0 FUNCTION_CALL 11 strcmp ( cnf -> name , \"max\" ) CALLEE 12 strcmp LEAF_NODE 13 strcmp LEAF_NODE 12 ( ARGUMENT 12 cnf -> name FIELD 13 cnf -> name LEAF_NODE 14 cnf LEAF_NODE 14 -> LEAF_NODE 14 name LEAF_NODE 12 , ARGUMENT 12 \"max\" FIELD 13 \"max\" LEAF_NODE 14 \"max\" LEAF_NODE 12 ) EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 tbl_max = strtoul ( cnf -> value , & eptr , 0 ) ; EXPR 12 tbl_max = strtoul ( cnf -> value , & eptr , 0 ) ASSIGN 13 tbl_max = strtoul ( cnf -> value , & eptr , 0 ) LVAL 14 tbl_max FIELD 15 tbl_max LEAF_NODE 16 tbl_max ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 strtoul ( cnf -> value , & eptr , 0 ) FUNCTION_CALL 15 strtoul ( cnf -> value , & eptr , 0 ) CALLEE 16 strtoul LEAF_NODE 17 strtoul LEAF_NODE 16 ( ARGUMENT 16 cnf -> value FIELD 17 cnf -> value LEAF_NODE 18 cnf LEAF_NODE 18 -> LEAF_NODE 18 value LEAF_NODE 16 , ARGUMENT 16 & eptr UNARY_EXPR 17 & eptr UNARY_OPERATOR 18 & LEAF_NODE 19 & FIELD 18 eptr LEAF_NODE 19 eptr LEAF_NODE 16 , ARGUMENT 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 16 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 * eptr EXPR 13 * eptr UNARY_EXPR 14 * eptr UNARY_OPERATOR 15 * LEAF_NODE 16 * FIELD 15 eptr LEAF_NODE 16 eptr LEAF_NODE 12 ) STATEMENTS 12 JUMP_STATEMENT 13 goto err ; KEYWORD 14 goto LEAF_NODE 15 goto DESTINATION 14 err LEAF_NODE 15 err LEAF_NODE 14 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 strcmp ( cnf -> name , \"mask\" ) == 0 EXPR 10 strcmp ( cnf -> name , \"mask\" ) == 0 FUNCTION_CALL 11 strcmp ( cnf -> name , \"mask\" ) CALLEE 12 strcmp LEAF_NODE 13 strcmp LEAF_NODE 12 ( ARGUMENT 12 cnf -> name FIELD 13 cnf -> name LEAF_NODE 14 cnf LEAF_NODE 14 -> LEAF_NODE 14 name LEAF_NODE 12 , ARGUMENT 12 \"mask\" FIELD 13 \"mask\" LEAF_NODE 14 \"mask\" LEAF_NODE 12 ) EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ! ASN1_str2mask ( cnf -> value , & tbl_mask ) || ! tbl_mask EXPR 13 ! ASN1_str2mask ( cnf -> value , & tbl_mask ) || ! tbl_mask OR 14 ! ASN1_str2mask ( cnf -> value , & tbl_mask ) || ! tbl_mask EXPR 15 ! ASN1_str2mask ( cnf -> value , & tbl_mask ) UNARY_EXPR 16 ! ASN1_str2mask ( cnf -> value , & tbl_mask ) UNARY_OPERATOR 17 ! LEAF_NODE 18 ! FUNCTION_CALL 17 ASN1_str2mask ( cnf -> value , & tbl_mask ) CALLEE 18 ASN1_str2mask LEAF_NODE 19 ASN1_str2mask LEAF_NODE 18 ( ARGUMENT 18 cnf -> value FIELD 19 cnf -> value LEAF_NODE 20 cnf LEAF_NODE 20 -> LEAF_NODE 20 value LEAF_NODE 18 , ARGUMENT 18 & tbl_mask UNARY_EXPR 19 & tbl_mask UNARY_OPERATOR 20 & LEAF_NODE 21 & FIELD 20 tbl_mask LEAF_NODE 21 tbl_mask LEAF_NODE 18 ) LEAF_NODE 15 || EXPR 15 ! tbl_mask UNARY_EXPR 16 ! tbl_mask UNARY_OPERATOR 17 ! LEAF_NODE 18 ! FIELD 17 tbl_mask LEAF_NODE 18 tbl_mask LEAF_NODE 12 ) STATEMENTS 12 JUMP_STATEMENT 13 goto err ; KEYWORD 14 goto LEAF_NODE 15 goto DESTINATION 14 err LEAF_NODE 15 err LEAF_NODE 14 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 strcmp ( cnf -> name , \"flags\" ) == 0 EXPR 10 strcmp ( cnf -> name , \"flags\" ) == 0 FUNCTION_CALL 11 strcmp ( cnf -> name , \"flags\" ) CALLEE 12 strcmp LEAF_NODE 13 strcmp LEAF_NODE 12 ( ARGUMENT 12 cnf -> name FIELD 13 cnf -> name LEAF_NODE 14 cnf LEAF_NODE 14 -> LEAF_NODE 14 name LEAF_NODE 12 , ARGUMENT 12 \"flags\" FIELD 13 \"flags\" LEAF_NODE 14 \"flags\" LEAF_NODE 12 ) EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 strcmp ( cnf -> value , \"nomask\" ) == 0 EXPR 13 strcmp ( cnf -> value , \"nomask\" ) == 0 FUNCTION_CALL 14 strcmp ( cnf -> value , \"nomask\" ) CALLEE 15 strcmp LEAF_NODE 16 strcmp LEAF_NODE 15 ( ARGUMENT 15 cnf -> value FIELD 16 cnf -> value LEAF_NODE 17 cnf LEAF_NODE 17 -> LEAF_NODE 17 value LEAF_NODE 15 , ARGUMENT 15 \"nomask\" FIELD 16 \"nomask\" LEAF_NODE 17 \"nomask\" LEAF_NODE 15 ) EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 tbl_flags = STABLE_NO_MASK ; EXPR 14 tbl_flags = STABLE_NO_MASK ASSIGN 15 tbl_flags = STABLE_NO_MASK LVAL 16 tbl_flags FIELD 17 tbl_flags LEAF_NODE 18 tbl_flags ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 STABLE_NO_MASK FIELD 17 STABLE_NO_MASK LEAF_NODE 18 STABLE_NO_MASK LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 else LEAF_NODE 13 else STATEMENTS 12 SELECTION 13 KEYWORD 14 if LEAF_NODE 15 if LEAF_NODE 14 ( CONDITION 14 strcmp ( cnf -> value , \"none\" ) == 0 EXPR 15 strcmp ( cnf -> value , \"none\" ) == 0 FUNCTION_CALL 16 strcmp ( cnf -> value , \"none\" ) CALLEE 17 strcmp LEAF_NODE 18 strcmp LEAF_NODE 17 ( ARGUMENT 17 cnf -> value FIELD 18 cnf -> value LEAF_NODE 19 cnf LEAF_NODE 19 -> LEAF_NODE 19 value LEAF_NODE 17 , ARGUMENT 17 \"none\" FIELD 18 \"none\" LEAF_NODE 19 \"none\" LEAF_NODE 17 ) EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 14 ) STATEMENTS 14 EXPR_STATEMENT 15 tbl_flags = STABLE_FLAGS_CLEAR ; EXPR 16 tbl_flags = STABLE_FLAGS_CLEAR ASSIGN 17 tbl_flags = STABLE_FLAGS_CLEAR LVAL 18 tbl_flags FIELD 19 tbl_flags LEAF_NODE 20 tbl_flags ASSIGN_OP 18 = LEAF_NODE 19 = RVAL 18 STABLE_FLAGS_CLEAR FIELD 19 STABLE_FLAGS_CLEAR LEAF_NODE 20 STABLE_FLAGS_CLEAR LEAF_NODE 16 ; SELECTION 11 KEYWORD 12 else LEAF_NODE 13 else STATEMENTS 12 JUMP_STATEMENT 13 goto err ; KEYWORD 14 goto LEAF_NODE 15 goto DESTINATION 14 err LEAF_NODE 15 err LEAF_NODE 14 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 JUMP_STATEMENT 8 goto err ; KEYWORD 9 goto LEAF_NODE 10 goto DESTINATION 9 err LEAF_NODE 10 err LEAF_NODE 9 ; LEAF_NODE 5 } EXPR_STATEMENT 3 rv = 1 ; EXPR 4 rv = 1 ASSIGN 5 rv = 1 LVAL 6 rv FIELD 7 rv LEAF_NODE 8 rv ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; LABEL 3 err : LEAF_NODE 4 err LEAF_NODE 4 : SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 rv == 0 EXPR 5 rv == 0 FIELD 6 rv LEAF_NODE 7 rv EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASN1err ( ASN1_F_DO_TCREATE , ASN1_R_INVALID_STRING_TABLE_VALUE ) ; EXPR 7 ASN1err ( ASN1_F_DO_TCREATE , ASN1_R_INVALID_STRING_TABLE_VALUE ) FUNCTION_CALL 8 ASN1err ( ASN1_F_DO_TCREATE , ASN1_R_INVALID_STRING_TABLE_VALUE ) CALLEE 9 ASN1err LEAF_NODE 10 ASN1err LEAF_NODE 9 ( ARGUMENT 9 ASN1_F_DO_TCREATE FIELD 10 ASN1_F_DO_TCREATE LEAF_NODE 11 ASN1_F_DO_TCREATE LEAF_NODE 9 , ARGUMENT 9 ASN1_R_INVALID_STRING_TABLE_VALUE FIELD 10 ASN1_R_INVALID_STRING_TABLE_VALUE LEAF_NODE 11 ASN1_R_INVALID_STRING_TABLE_VALUE LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 cnf EXPR 8 cnf FIELD 9 cnf LEAF_NODE 10 cnf LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 ERR_add_error_data ( 4 , \"field=\" , cnf -> name , \", value=\" , cnf -> value ) ; EXPR 9 ERR_add_error_data ( 4 , \"field=\" , cnf -> name , \", value=\" , cnf -> value ) FUNCTION_CALL 10 ERR_add_error_data ( 4 , \"field=\" , cnf -> name , \", value=\" , cnf -> value ) CALLEE 11 ERR_add_error_data LEAF_NODE 12 ERR_add_error_data LEAF_NODE 11 ( ARGUMENT 11 4 FIELD 12 4 LEAF_NODE 13 4 LEAF_NODE 11 , ARGUMENT 11 \"field=\" FIELD 12 \"field=\" LEAF_NODE 13 \"field=\" LEAF_NODE 11 , ARGUMENT 11 cnf -> name FIELD 12 cnf -> name LEAF_NODE 13 cnf LEAF_NODE 13 -> LEAF_NODE 13 name LEAF_NODE 11 , ARGUMENT 11 \", value=\" FIELD 12 \", value=\" LEAF_NODE 13 \", value=\" LEAF_NODE 11 , ARGUMENT 11 cnf -> value FIELD 12 cnf -> value LEAF_NODE 13 cnf LEAF_NODE 13 -> LEAF_NODE 13 value LEAF_NODE 11 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 EXPR_STATEMENT 8 ERR_add_error_data ( 4 , \"name=\" , name , \", value=\" , value ) ; EXPR 9 ERR_add_error_data ( 4 , \"name=\" , name , \", value=\" , value ) FUNCTION_CALL 10 ERR_add_error_data ( 4 , \"name=\" , name , \", value=\" , value ) CALLEE 11 ERR_add_error_data LEAF_NODE 12 ERR_add_error_data LEAF_NODE 11 ( ARGUMENT 11 4 FIELD 12 4 LEAF_NODE 13 4 LEAF_NODE 11 , ARGUMENT 11 \"name=\" FIELD 12 \"name=\" LEAF_NODE 13 \"name=\" LEAF_NODE 11 , ARGUMENT 11 name FIELD 12 name LEAF_NODE 13 name LEAF_NODE 11 , ARGUMENT 11 \", value=\" FIELD 12 \", value=\" LEAF_NODE 13 \", value=\" LEAF_NODE 11 , ARGUMENT 11 value FIELD 12 value LEAF_NODE 13 value LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 rv = ASN1_STRING_TABLE_add ( nid , tbl_min , tbl_max , tbl_mask , tbl_flags ) ; EXPR 7 rv = ASN1_STRING_TABLE_add ( nid , tbl_min , tbl_max , tbl_mask , tbl_flags ) ASSIGN 8 rv = ASN1_STRING_TABLE_add ( nid , tbl_min , tbl_max , tbl_mask , tbl_flags ) LVAL 9 rv FIELD 10 rv LEAF_NODE 11 rv ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ASN1_STRING_TABLE_add ( nid , tbl_min , tbl_max , tbl_mask , tbl_flags ) FUNCTION_CALL 10 ASN1_STRING_TABLE_add ( nid , tbl_min , tbl_max , tbl_mask , tbl_flags ) CALLEE 11 ASN1_STRING_TABLE_add LEAF_NODE 12 ASN1_STRING_TABLE_add LEAF_NODE 11 ( ARGUMENT 11 nid FIELD 12 nid LEAF_NODE 13 nid LEAF_NODE 11 , ARGUMENT 11 tbl_min FIELD 12 tbl_min LEAF_NODE 13 tbl_min LEAF_NODE 11 , ARGUMENT 11 tbl_max FIELD 12 tbl_max LEAF_NODE 13 tbl_max LEAF_NODE 11 , ARGUMENT 11 tbl_mask FIELD 12 tbl_mask LEAF_NODE 13 tbl_mask LEAF_NODE 11 , ARGUMENT 11 tbl_flags FIELD 12 tbl_flags LEAF_NODE 13 tbl_flags LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! rv EXPR 8 ! rv UNARY_EXPR 9 ! rv UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FIELD 10 rv LEAF_NODE 11 rv LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 ASN1err ( ASN1_F_DO_TCREATE , ERR_R_MALLOC_FAILURE ) ; EXPR 9 ASN1err ( ASN1_F_DO_TCREATE , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 10 ASN1err ( ASN1_F_DO_TCREATE , ERR_R_MALLOC_FAILURE ) CALLEE 11 ASN1err LEAF_NODE 12 ASN1err LEAF_NODE 11 ( ARGUMENT 11 ASN1_F_DO_TCREATE FIELD 12 ASN1_F_DO_TCREATE LEAF_NODE 13 ASN1_F_DO_TCREATE LEAF_NODE 11 , ARGUMENT 11 ERR_R_MALLOC_FAILURE FIELD 12 ERR_R_MALLOC_FAILURE LEAF_NODE 13 ERR_R_MALLOC_FAILURE LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 5 } EXPR_STATEMENT 3 sk_CONF_VALUE_pop_free ( lst , X509V3_conf_free ) ; EXPR 4 sk_CONF_VALUE_pop_free ( lst , X509V3_conf_free ) FUNCTION_CALL 5 sk_CONF_VALUE_pop_free ( lst , X509V3_conf_free ) CALLEE 6 sk_CONF_VALUE_pop_free LEAF_NODE 7 sk_CONF_VALUE_pop_free LEAF_NODE 6 ( ARGUMENT 6 lst FIELD 7 lst LEAF_NODE 8 lst LEAF_NODE 6 , ARGUMENT 6 X509V3_conf_free FIELD 7 X509V3_conf_free LEAF_NODE 8 X509V3_conf_free LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return rv ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 rv EXPR 5 rv FIELD 6 rv LEAF_NODE 7 rv LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 0, "project": "openssl_ast_normal_function_test_13", "target": 0}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } ; CLASS_DEF 2 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } CLASS_DEF 3 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } LEAF_NODE 4 struct CLASS_NAME 4 bio_addrinfo_st LEAF_NODE 5 bio_addrinfo_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; SIMPLE_DECL 5 int bai_family ; VAR_DECL 6 int bai_family TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_family LEAF_NODE 8 bai_family LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_socktype ; VAR_DECL 6 int bai_socktype TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_socktype LEAF_NODE 8 bai_socktype LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_protocol ; VAR_DECL 6 int bai_protocol TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_protocol LEAF_NODE 8 bai_protocol LEAF_NODE 6 ; SIMPLE_DECL 5 size_t bai_addrlen ; VAR_DECL 6 size_t bai_addrlen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 bai_addrlen LEAF_NODE 8 bai_addrlen LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr * bai_addr ; VAR_DECL 6 struct sockaddr * bai_addr TYPE 7 struct sockaddr * TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr POINTER 8 * LEAF_NODE 9 * NAME 7 bai_addr LEAF_NODE 8 bai_addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct bio_addrinfo_st * bai_next ; VAR_DECL 6 struct bio_addrinfo_st * bai_next TYPE 7 struct bio_addrinfo_st * TYPE_NAME 8 struct bio_addrinfo_st LEAF_NODE 9 struct LEAF_NODE 9 bio_addrinfo_st POINTER 8 * LEAF_NODE 9 * NAME 7 bai_next LEAF_NODE 8 bai_next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BIO_ADDRINFO ; VAR_DECL 2 struct bio_addrinfo_st BIO_ADDRINFO TYPE 3 struct bio_addrinfo_st TYPE_NAME 4 struct bio_addrinfo_st LEAF_NODE 5 struct LEAF_NODE 5 bio_addrinfo_st NAME 3 BIO_ADDRINFO LEAF_NODE 4 BIO_ADDRINFO LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t socklen_t ; VAR_DECL 2 uint32_t socklen_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 socklen_t LEAF_NODE 4 socklen_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } ; CLASS_DEF 2 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } CLASS_DEF 3 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } LEAF_NODE 4 enum CLASS_NAME 4 BIO_hostserv_priorities LEAF_NODE 5 BIO_hostserv_priorities LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV LEAF_NODE 5 BIO_PARSE_PRIO_HOST LEAF_NODE 5 , LEAF_NODE 5 BIO_PARSE_PRIO_SERV LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } ; CLASS_DEF 2 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } CLASS_DEF 3 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } LEAF_NODE 4 enum CLASS_NAME 4 BIO_lookup_type LEAF_NODE 5 BIO_lookup_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER LEAF_NODE 5 BIO_LOOKUP_CLIENT LEAF_NODE 5 , LEAF_NODE 5 BIO_LOOKUP_SERVER LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 32 ] session_id ; VAR_DECL 2 unsigned char [ 32 ] session_id TYPE 3 unsigned char [ 32 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 32 ] LEAF_NODE 5 [ FIELD 5 32 LEAF_NODE 6 32 LEAF_NODE 5 ] NAME 3 session_id LEAF_NODE 4 session_id LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 48 ] master_secret ; VAR_DECL 2 unsigned char [ 48 ] master_secret TYPE 3 unsigned char [ 48 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 48 ] LEAF_NODE 5 [ FIELD 5 48 LEAF_NODE 6 48 LEAF_NODE 5 ] NAME 3 master_secret LEAF_NODE 4 master_secret LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ SSL3_RANDOM_SIZE ] client_random ; VAR_DECL 2 unsigned char [ SSL3_RANDOM_SIZE ] client_random TYPE 3 unsigned char [ SSL3_RANDOM_SIZE ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ SSL3_RANDOM_SIZE ] LEAF_NODE 5 [ FIELD 5 SSL3_RANDOM_SIZE LEAF_NODE 6 SSL3_RANDOM_SIZE LEAF_NODE 5 ] NAME 3 client_random LEAF_NODE 4 client_random LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ SSL3_RANDOM_SIZE ] server_random ; VAR_DECL 2 unsigned char [ SSL3_RANDOM_SIZE ] server_random TYPE 3 unsigned char [ SSL3_RANDOM_SIZE ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ SSL3_RANDOM_SIZE ] LEAF_NODE 5 [ FIELD 5 SSL3_RANDOM_SIZE LEAF_NODE 6 SSL3_RANDOM_SIZE LEAF_NODE 5 ] NAME 3 server_random LEAF_NODE 4 server_random LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 104 ] key_block ; VAR_DECL 2 unsigned char [ 104 ] key_block TYPE 3 unsigned char [ 104 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 104 ] LEAF_NODE 5 [ FIELD 5 104 LEAF_NODE 6 104 LEAF_NODE 5 ] NAME 3 key_block LEAF_NODE 4 key_block LEAF_NODE 2 ; SIMPLE_DECL 1 EVP_MD_CTX * handshake_md ; VAR_DECL 2 EVP_MD_CTX * handshake_md TYPE 3 EVP_MD_CTX * TYPE_NAME 4 EVP_MD_CTX LEAF_NODE 5 EVP_MD_CTX POINTER 4 * LEAF_NODE 5 * NAME 3 handshake_md LEAF_NODE 4 handshake_md LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } PACKET ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } PACKET TYPE 3 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 const unsigned char * curr ; size_t remaining ; SIMPLE_DECL 6 const unsigned char * curr ; VAR_DECL 7 const unsigned char * curr TYPE 8 const unsigned char * TYPE_NAME 9 const unsigned char LEAF_NODE 10 const LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 curr LEAF_NODE 9 curr LEAF_NODE 7 ; SIMPLE_DECL 6 size_t remaining ; VAR_DECL 7 size_t remaining TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 remaining LEAF_NODE 9 remaining LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 PACKET LEAF_NODE 4 PACKET LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 20 ] cookie ; VAR_DECL 2 unsigned char [ 20 ] cookie TYPE 3 unsigned char [ 20 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 20 ] LEAF_NODE 5 [ FIELD 5 20 LEAF_NODE 6 20 LEAF_NODE 5 ] NAME 3 cookie LEAF_NODE 4 cookie LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 validate_client_hello LEAF_NODE 3 validate_client_hello PARAMETER_LIST 2 ( BIO * wbio ) LEAF_NODE 3 ( PARAMETER_DECL 3 BIO * wbio TYPE 4 BIO * TYPE_NAME 5 BIO LEAF_NODE 6 BIO POINTER 5 * LEAF_NODE 6 * NAME 4 wbio LEAF_NODE 5 wbio LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 PACKET pkt , PACKET pkt2 ; INIT_DECL_LIST 4 PACKET pkt , PACKET pkt2 VAR_DECL 5 PACKET pkt TYPE 6 PACKET TYPE_NAME 7 PACKET LEAF_NODE 8 PACKET NAME 6 pkt LEAF_NODE 7 pkt LEAF_NODE 5 , VAR_DECL 5 PACKET pkt2 TYPE 6 PACKET TYPE_NAME 7 PACKET LEAF_NODE 8 PACKET NAME 6 pkt2 LEAF_NODE 7 pkt2 LEAF_NODE 4 ; SIMPLE_DECL 3 long len ; VAR_DECL 4 long len TYPE 5 long TYPE_NAME 6 long LEAF_NODE 7 long NAME 5 len LEAF_NODE 6 len LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * data ; VAR_DECL 4 unsigned char * data TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 int cookie_found ; cookie_found = 0 ; VAR_DECL 4 int cookie_found ; cookie_found = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 cookie_found LEAF_NODE 6 cookie_found LEAF_NODE 5 ; INIT 5 cookie_found = 0 ASSIGN 6 cookie_found = 0 LVAL 7 cookie_found NAME 8 cookie_found LEAF_NODE 9 cookie_found ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int u ; u = 0 ; VAR_DECL 4 unsigned int u ; u = 0 TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 u LEAF_NODE 6 u LEAF_NODE 5 ; INIT 5 u = 0 ASSIGN 6 u = 0 LVAL 7 u NAME 8 u LEAF_NODE 9 u ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 len = BIO_get_mem_data ( wbio , ( char * * ) & data ) ; EXPR 4 len = BIO_get_mem_data ( wbio , ( char * * ) & data ) ASSIGN 5 len = BIO_get_mem_data ( wbio , ( char * * ) & data ) LVAL 6 len FIELD 7 len LEAF_NODE 8 len ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 BIO_get_mem_data ( wbio , ( char * * ) & data ) FUNCTION_CALL 7 BIO_get_mem_data ( wbio , ( char * * ) & data ) CALLEE 8 BIO_get_mem_data LEAF_NODE 9 BIO_get_mem_data LEAF_NODE 8 ( ARGUMENT 8 wbio FIELD 9 wbio LEAF_NODE 10 wbio LEAF_NODE 8 , ARGUMENT 8 ( char * * ) & data LEAF_NODE 9 ( TYPE_NAME 9 char LEAF_NODE 10 char LEAF_NODE 9 * LEAF_NODE 9 * LEAF_NODE 9 ) UNARY_EXPR 9 & data UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 data LEAF_NODE 11 data LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_buf_init ( & pkt , data , len ) EXPR 5 ! PACKET_buf_init ( & pkt , data , len ) UNARY_EXPR 6 ! PACKET_buf_init ( & pkt , data , len ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 PACKET_buf_init ( & pkt , data , len ) CALLEE 8 PACKET_buf_init LEAF_NODE 9 PACKET_buf_init LEAF_NODE 8 ( ARGUMENT 8 & pkt UNARY_EXPR 9 & pkt UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 pkt LEAF_NODE 11 pkt LEAF_NODE 8 , ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 len FIELD 9 len LEAF_NODE 10 len LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_get_1 ( & pkt , & u ) || u != SSL3_RT_HANDSHAKE EXPR 5 ! PACKET_get_1 ( & pkt , & u ) || u != SSL3_RT_HANDSHAKE OR 6 ! PACKET_get_1 ( & pkt , & u ) || u != SSL3_RT_HANDSHAKE EXPR 7 ! PACKET_get_1 ( & pkt , & u ) UNARY_EXPR 8 ! PACKET_get_1 ( & pkt , & u ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 PACKET_get_1 ( & pkt , & u ) CALLEE 10 PACKET_get_1 LEAF_NODE 11 PACKET_get_1 LEAF_NODE 10 ( ARGUMENT 10 & pkt UNARY_EXPR 11 & pkt UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt LEAF_NODE 13 pkt LEAF_NODE 10 , ARGUMENT 10 & u UNARY_EXPR 11 & u UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 u LEAF_NODE 13 u LEAF_NODE 10 ) LEAF_NODE 7 || EXPR 7 u != SSL3_RT_HANDSHAKE FIELD 8 u LEAF_NODE 9 u EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 SSL3_RT_HANDSHAKE LEAF_NODE 9 SSL3_RT_HANDSHAKE LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_get_net_2 ( & pkt , & u ) || u != DTLS1_BAD_VER EXPR 5 ! PACKET_get_net_2 ( & pkt , & u ) || u != DTLS1_BAD_VER OR 6 ! PACKET_get_net_2 ( & pkt , & u ) || u != DTLS1_BAD_VER EXPR 7 ! PACKET_get_net_2 ( & pkt , & u ) UNARY_EXPR 8 ! PACKET_get_net_2 ( & pkt , & u ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 PACKET_get_net_2 ( & pkt , & u ) CALLEE 10 PACKET_get_net_2 LEAF_NODE 11 PACKET_get_net_2 LEAF_NODE 10 ( ARGUMENT 10 & pkt UNARY_EXPR 11 & pkt UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt LEAF_NODE 13 pkt LEAF_NODE 10 , ARGUMENT 10 & u UNARY_EXPR 11 & u UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 u LEAF_NODE 13 u LEAF_NODE 10 ) LEAF_NODE 7 || EXPR 7 u != DTLS1_BAD_VER FIELD 8 u LEAF_NODE 9 u EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 DTLS1_BAD_VER LEAF_NODE 9 DTLS1_BAD_VER LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_forward ( & pkt , DTLS1_RT_HEADER_LENGTH - 3 ) EXPR 5 ! PACKET_forward ( & pkt , DTLS1_RT_HEADER_LENGTH - 3 ) UNARY_EXPR 6 ! PACKET_forward ( & pkt , DTLS1_RT_HEADER_LENGTH - 3 ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 PACKET_forward ( & pkt , DTLS1_RT_HEADER_LENGTH - 3 ) CALLEE 8 PACKET_forward LEAF_NODE 9 PACKET_forward LEAF_NODE 8 ( ARGUMENT 8 & pkt UNARY_EXPR 9 & pkt UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 pkt LEAF_NODE 11 pkt LEAF_NODE 8 , ARGUMENT 8 DTLS1_RT_HEADER_LENGTH - 3 FIELD 9 DTLS1_RT_HEADER_LENGTH LEAF_NODE 10 DTLS1_RT_HEADER_LENGTH LEAF_NODE 9 - FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_get_1 ( & pkt , & u ) || u != SSL3_MT_CLIENT_HELLO EXPR 5 ! PACKET_get_1 ( & pkt , & u ) || u != SSL3_MT_CLIENT_HELLO OR 6 ! PACKET_get_1 ( & pkt , & u ) || u != SSL3_MT_CLIENT_HELLO EXPR 7 ! PACKET_get_1 ( & pkt , & u ) UNARY_EXPR 8 ! PACKET_get_1 ( & pkt , & u ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 PACKET_get_1 ( & pkt , & u ) CALLEE 10 PACKET_get_1 LEAF_NODE 11 PACKET_get_1 LEAF_NODE 10 ( ARGUMENT 10 & pkt UNARY_EXPR 11 & pkt UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt LEAF_NODE 13 pkt LEAF_NODE 10 , ARGUMENT 10 & u UNARY_EXPR 11 & u UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 u LEAF_NODE 13 u LEAF_NODE 10 ) LEAF_NODE 7 || EXPR 7 u != SSL3_MT_CLIENT_HELLO FIELD 8 u LEAF_NODE 9 u EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 SSL3_MT_CLIENT_HELLO LEAF_NODE 9 SSL3_MT_CLIENT_HELLO LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_forward ( & pkt , DTLS1_HM_HEADER_LENGTH - 1 ) EXPR 5 ! PACKET_forward ( & pkt , DTLS1_HM_HEADER_LENGTH - 1 ) UNARY_EXPR 6 ! PACKET_forward ( & pkt , DTLS1_HM_HEADER_LENGTH - 1 ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 PACKET_forward ( & pkt , DTLS1_HM_HEADER_LENGTH - 1 ) CALLEE 8 PACKET_forward LEAF_NODE 9 PACKET_forward LEAF_NODE 8 ( ARGUMENT 8 & pkt UNARY_EXPR 9 & pkt UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 pkt LEAF_NODE 11 pkt LEAF_NODE 8 , ARGUMENT 8 DTLS1_HM_HEADER_LENGTH - 1 FIELD 9 DTLS1_HM_HEADER_LENGTH LEAF_NODE 10 DTLS1_HM_HEADER_LENGTH LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_get_net_2 ( & pkt , & u ) || u != DTLS1_BAD_VER EXPR 5 ! PACKET_get_net_2 ( & pkt , & u ) || u != DTLS1_BAD_VER OR 6 ! PACKET_get_net_2 ( & pkt , & u ) || u != DTLS1_BAD_VER EXPR 7 ! PACKET_get_net_2 ( & pkt , & u ) UNARY_EXPR 8 ! PACKET_get_net_2 ( & pkt , & u ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 PACKET_get_net_2 ( & pkt , & u ) CALLEE 10 PACKET_get_net_2 LEAF_NODE 11 PACKET_get_net_2 LEAF_NODE 10 ( ARGUMENT 10 & pkt UNARY_EXPR 11 & pkt UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt LEAF_NODE 13 pkt LEAF_NODE 10 , ARGUMENT 10 & u UNARY_EXPR 11 & u UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 u LEAF_NODE 13 u LEAF_NODE 10 ) LEAF_NODE 7 || EXPR 7 u != DTLS1_BAD_VER FIELD 8 u LEAF_NODE 9 u EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 DTLS1_BAD_VER LEAF_NODE 9 DTLS1_BAD_VER LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_copy_bytes ( & pkt , client_random , SSL3_RANDOM_SIZE ) EXPR 5 ! PACKET_copy_bytes ( & pkt , client_random , SSL3_RANDOM_SIZE ) UNARY_EXPR 6 ! PACKET_copy_bytes ( & pkt , client_random , SSL3_RANDOM_SIZE ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 PACKET_copy_bytes ( & pkt , client_random , SSL3_RANDOM_SIZE ) CALLEE 8 PACKET_copy_bytes LEAF_NODE 9 PACKET_copy_bytes LEAF_NODE 8 ( ARGUMENT 8 & pkt UNARY_EXPR 9 & pkt UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 pkt LEAF_NODE 11 pkt LEAF_NODE 8 , ARGUMENT 8 client_random FIELD 9 client_random LEAF_NODE 10 client_random LEAF_NODE 8 , ARGUMENT 8 SSL3_RANDOM_SIZE FIELD 9 SSL3_RANDOM_SIZE LEAF_NODE 10 SSL3_RANDOM_SIZE LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_get_length_prefixed_1 ( & pkt , & pkt2 ) || ! PACKET_equal ( & pkt2 , session_id , sizeof ( session_id ) ) EXPR 5 ! PACKET_get_length_prefixed_1 ( & pkt , & pkt2 ) || ! PACKET_equal ( & pkt2 , session_id , sizeof ( session_id ) ) OR 6 ! PACKET_get_length_prefixed_1 ( & pkt , & pkt2 ) || ! PACKET_equal ( & pkt2 , session_id , sizeof ( session_id ) ) EXPR 7 ! PACKET_get_length_prefixed_1 ( & pkt , & pkt2 ) UNARY_EXPR 8 ! PACKET_get_length_prefixed_1 ( & pkt , & pkt2 ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 PACKET_get_length_prefixed_1 ( & pkt , & pkt2 ) CALLEE 10 PACKET_get_length_prefixed_1 LEAF_NODE 11 PACKET_get_length_prefixed_1 LEAF_NODE 10 ( ARGUMENT 10 & pkt UNARY_EXPR 11 & pkt UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt LEAF_NODE 13 pkt LEAF_NODE 10 , ARGUMENT 10 & pkt2 UNARY_EXPR 11 & pkt2 UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt2 LEAF_NODE 13 pkt2 LEAF_NODE 10 ) LEAF_NODE 7 || EXPR 7 ! PACKET_equal ( & pkt2 , session_id , sizeof ( session_id ) ) UNARY_EXPR 8 ! PACKET_equal ( & pkt2 , session_id , sizeof ( session_id ) ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 PACKET_equal ( & pkt2 , session_id , sizeof ( session_id ) ) CALLEE 10 PACKET_equal LEAF_NODE 11 PACKET_equal LEAF_NODE 10 ( ARGUMENT 10 & pkt2 UNARY_EXPR 11 & pkt2 UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt2 LEAF_NODE 13 pkt2 LEAF_NODE 10 , ARGUMENT 10 session_id FIELD 11 session_id LEAF_NODE 12 session_id LEAF_NODE 10 , ARGUMENT 10 sizeof ( session_id ) FUNCTION_CALL 11 sizeof ( session_id ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 session_id FIELD 13 session_id LEAF_NODE 14 session_id LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_get_length_prefixed_1 ( & pkt , & pkt2 ) EXPR 5 ! PACKET_get_length_prefixed_1 ( & pkt , & pkt2 ) UNARY_EXPR 6 ! PACKET_get_length_prefixed_1 ( & pkt , & pkt2 ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 PACKET_get_length_prefixed_1 ( & pkt , & pkt2 ) CALLEE 8 PACKET_get_length_prefixed_1 LEAF_NODE 9 PACKET_get_length_prefixed_1 LEAF_NODE 8 ( ARGUMENT 8 & pkt UNARY_EXPR 9 & pkt UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 pkt LEAF_NODE 11 pkt LEAF_NODE 8 , ARGUMENT 8 & pkt2 UNARY_EXPR 9 & pkt2 UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 pkt2 LEAF_NODE 11 pkt2 LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 PACKET_remaining ( & pkt2 ) EXPR 5 PACKET_remaining ( & pkt2 ) FUNCTION_CALL 6 PACKET_remaining ( & pkt2 ) CALLEE 7 PACKET_remaining LEAF_NODE 8 PACKET_remaining LEAF_NODE 7 ( ARGUMENT 7 & pkt2 UNARY_EXPR 8 & pkt2 UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 pkt2 LEAF_NODE 10 pkt2 LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! PACKET_equal ( & pkt2 , cookie , sizeof ( cookie ) ) EXPR 8 ! PACKET_equal ( & pkt2 , cookie , sizeof ( cookie ) ) UNARY_EXPR 9 ! PACKET_equal ( & pkt2 , cookie , sizeof ( cookie ) ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 PACKET_equal ( & pkt2 , cookie , sizeof ( cookie ) ) CALLEE 11 PACKET_equal LEAF_NODE 12 PACKET_equal LEAF_NODE 11 ( ARGUMENT 11 & pkt2 UNARY_EXPR 12 & pkt2 UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 pkt2 LEAF_NODE 14 pkt2 LEAF_NODE 11 , ARGUMENT 11 cookie FIELD 12 cookie LEAF_NODE 13 cookie LEAF_NODE 11 , ARGUMENT 11 sizeof ( cookie ) FUNCTION_CALL 12 sizeof ( cookie ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 cookie FIELD 14 cookie LEAF_NODE 15 cookie LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return 0 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 0 EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ; EXPR_STATEMENT 6 cookie_found = 1 ; EXPR 7 cookie_found = 1 ASSIGN 8 cookie_found = 1 LVAL 9 cookie_found FIELD 10 cookie_found LEAF_NODE 11 cookie_found ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_get_net_2 ( & pkt , & u ) || ! PACKET_forward ( & pkt , u ) EXPR 5 ! PACKET_get_net_2 ( & pkt , & u ) || ! PACKET_forward ( & pkt , u ) OR 6 ! PACKET_get_net_2 ( & pkt , & u ) || ! PACKET_forward ( & pkt , u ) EXPR 7 ! PACKET_get_net_2 ( & pkt , & u ) UNARY_EXPR 8 ! PACKET_get_net_2 ( & pkt , & u ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 PACKET_get_net_2 ( & pkt , & u ) CALLEE 10 PACKET_get_net_2 LEAF_NODE 11 PACKET_get_net_2 LEAF_NODE 10 ( ARGUMENT 10 & pkt UNARY_EXPR 11 & pkt UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt LEAF_NODE 13 pkt LEAF_NODE 10 , ARGUMENT 10 & u UNARY_EXPR 11 & u UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 u LEAF_NODE 13 u LEAF_NODE 10 ) LEAF_NODE 7 || EXPR 7 ! PACKET_forward ( & pkt , u ) UNARY_EXPR 8 ! PACKET_forward ( & pkt , u ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 PACKET_forward ( & pkt , u ) CALLEE 10 PACKET_forward LEAF_NODE 11 PACKET_forward LEAF_NODE 10 ( ARGUMENT 10 & pkt UNARY_EXPR 11 & pkt UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt LEAF_NODE 13 pkt LEAF_NODE 10 , ARGUMENT 10 u FIELD 11 u LEAF_NODE 12 u LEAF_NODE 10 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_get_1 ( & pkt , & u ) || ! PACKET_forward ( & pkt , u ) EXPR 5 ! PACKET_get_1 ( & pkt , & u ) || ! PACKET_forward ( & pkt , u ) OR 6 ! PACKET_get_1 ( & pkt , & u ) || ! PACKET_forward ( & pkt , u ) EXPR 7 ! PACKET_get_1 ( & pkt , & u ) UNARY_EXPR 8 ! PACKET_get_1 ( & pkt , & u ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 PACKET_get_1 ( & pkt , & u ) CALLEE 10 PACKET_get_1 LEAF_NODE 11 PACKET_get_1 LEAF_NODE 10 ( ARGUMENT 10 & pkt UNARY_EXPR 11 & pkt UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt LEAF_NODE 13 pkt LEAF_NODE 10 , ARGUMENT 10 & u UNARY_EXPR 11 & u UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 u LEAF_NODE 13 u LEAF_NODE 10 ) LEAF_NODE 7 || EXPR 7 ! PACKET_forward ( & pkt , u ) UNARY_EXPR 8 ! PACKET_forward ( & pkt , u ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 PACKET_forward ( & pkt , u ) CALLEE 10 PACKET_forward LEAF_NODE 11 PACKET_forward LEAF_NODE 10 ( ARGUMENT 10 & pkt UNARY_EXPR 11 & pkt UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt LEAF_NODE 13 pkt LEAF_NODE 10 , ARGUMENT 10 u FIELD 11 u LEAF_NODE 12 u LEAF_NODE 10 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_get_net_2 ( & pkt , & u ) || ! PACKET_forward ( & pkt , u ) EXPR 5 ! PACKET_get_net_2 ( & pkt , & u ) || ! PACKET_forward ( & pkt , u ) OR 6 ! PACKET_get_net_2 ( & pkt , & u ) || ! PACKET_forward ( & pkt , u ) EXPR 7 ! PACKET_get_net_2 ( & pkt , & u ) UNARY_EXPR 8 ! PACKET_get_net_2 ( & pkt , & u ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 PACKET_get_net_2 ( & pkt , & u ) CALLEE 10 PACKET_get_net_2 LEAF_NODE 11 PACKET_get_net_2 LEAF_NODE 10 ( ARGUMENT 10 & pkt UNARY_EXPR 11 & pkt UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt LEAF_NODE 13 pkt LEAF_NODE 10 , ARGUMENT 10 & u UNARY_EXPR 11 & u UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 u LEAF_NODE 13 u LEAF_NODE 10 ) LEAF_NODE 7 || EXPR 7 ! PACKET_forward ( & pkt , u ) UNARY_EXPR 8 ! PACKET_forward ( & pkt , u ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 PACKET_forward ( & pkt , u ) CALLEE 10 PACKET_forward LEAF_NODE 11 PACKET_forward LEAF_NODE 10 ( ARGUMENT 10 & pkt UNARY_EXPR 11 & pkt UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt LEAF_NODE 13 pkt LEAF_NODE 10 , ARGUMENT 10 u FIELD 11 u LEAF_NODE 12 u LEAF_NODE 10 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 PACKET_remaining ( & pkt ) EXPR 5 PACKET_remaining ( & pkt ) FUNCTION_CALL 6 PACKET_remaining ( & pkt ) CALLEE 7 PACKET_remaining LEAF_NODE 8 PACKET_remaining LEAF_NODE 7 ( ARGUMENT 7 & pkt UNARY_EXPR 8 & pkt UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 pkt LEAF_NODE 10 pkt LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 cookie_found && ! EVP_DigestUpdate ( handshake_md , data + MAC_OFFSET , len - MAC_OFFSET ) EXPR 5 cookie_found && ! EVP_DigestUpdate ( handshake_md , data + MAC_OFFSET , len - MAC_OFFSET ) AND 6 cookie_found && ! EVP_DigestUpdate ( handshake_md , data + MAC_OFFSET , len - MAC_OFFSET ) EXPR 7 cookie_found FIELD 8 cookie_found LEAF_NODE 9 cookie_found LEAF_NODE 7 && EXPR 7 ! EVP_DigestUpdate ( handshake_md , data + MAC_OFFSET , len - MAC_OFFSET ) UNARY_EXPR 8 ! EVP_DigestUpdate ( handshake_md , data + MAC_OFFSET , len - MAC_OFFSET ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 EVP_DigestUpdate ( handshake_md , data + MAC_OFFSET , len - MAC_OFFSET ) CALLEE 10 EVP_DigestUpdate LEAF_NODE 11 EVP_DigestUpdate LEAF_NODE 10 ( ARGUMENT 10 handshake_md FIELD 11 handshake_md LEAF_NODE 12 handshake_md LEAF_NODE 10 , ARGUMENT 10 data + MAC_OFFSET FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 MAC_OFFSET LEAF_NODE 12 MAC_OFFSET LEAF_NODE 10 , ARGUMENT 10 len - MAC_OFFSET FIELD 11 len LEAF_NODE 12 len LEAF_NODE 11 - FIELD 11 MAC_OFFSET LEAF_NODE 12 MAC_OFFSET LEAF_NODE 10 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; EXPR_STATEMENT 3 ( void ) BIO_reset ( wbio ) ; EXPR 4 ( void ) BIO_reset ( wbio ) LEAF_NODE 5 ( TYPE_NAME 5 void LEAF_NODE 6 void LEAF_NODE 5 ) FUNCTION_CALL 5 BIO_reset ( wbio ) CALLEE 6 BIO_reset LEAF_NODE 7 BIO_reset LEAF_NODE 6 ( ARGUMENT 6 wbio FIELD 7 wbio LEAF_NODE 8 wbio LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 + cookie_found ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 + cookie_found EXPR 5 1 + cookie_found FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 6 + FIELD 6 cookie_found LEAF_NODE 7 cookie_found LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 1, "project": "openssl_ast_normal_function_test_14", "target": 0}
{"func": "SIMPLE_DECL 1 int thread_local_thread_cb_ok ; thread_local_thread_cb_ok = 0 ; VAR_DECL 2 int thread_local_thread_cb_ok ; thread_local_thread_cb_ok = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 thread_local_thread_cb_ok LEAF_NODE 4 thread_local_thread_cb_ok LEAF_NODE 3 ; INIT 3 thread_local_thread_cb_ok = 0 ASSIGN 4 thread_local_thread_cb_ok = 0 LVAL 5 thread_local_thread_cb_ok NAME 6 thread_local_thread_cb_ok LEAF_NODE 7 thread_local_thread_cb_ok ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 thread_local_destructor LEAF_NODE 3 thread_local_destructor PARAMETER_LIST 2 ( void * arg ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * arg TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 arg LEAF_NODE 5 arg LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 unsigned EXPR_STATEMENT 3 * count ; EXPR 4 * count UNARY_EXPR 5 * count UNARY_OPERATOR 6 * LEAF_NODE 7 * FIELD 6 count LEAF_NODE 7 count LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 arg == NULL EXPR 5 arg == NULL FIELD 6 arg LEAF_NODE 7 arg EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return DESTINATION ; KEYWORD 6 return LEAF_NODE 7 return LEAF_NODE 6 DESTINATION LEAF_NODE 6 ; EXPR_STATEMENT 3 count = arg ; EXPR 4 count = arg ASSIGN 5 count = arg LVAL 6 count FIELD 7 count LEAF_NODE 8 count ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 arg FIELD 7 arg LEAF_NODE 8 arg LEAF_NODE 4 ; EXPR_STATEMENT 3 ( * count ) ++ ; EXPR 4 ( * count ) ++ LEAF_NODE 5 ( UNARY_EXPR 5 * count UNARY_OPERATOR 6 * LEAF_NODE 7 * FIELD 6 count LEAF_NODE 7 count LEAF_NODE 5 ) LEAF_NODE 5 ++ LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 2, "project": "openssl_ast_normal_function_test_23", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ossltest_rand_status LEAF_NODE 3 ossltest_rand_status PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 3, "project": "openssl_ast_normal_function_test_154", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 BN_security_bits LEAF_NODE 3 BN_security_bits PARAMETER_LIST 2 ( int L , int N ) LEAF_NODE 3 ( PARAMETER_DECL 3 int L TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 L LEAF_NODE 5 L LEAF_NODE 3 , PARAMETER_DECL 3 int N TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 N LEAF_NODE 5 N LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int secbits , int bits ; INIT_DECL_LIST 4 int secbits , int bits VAR_DECL 5 int secbits TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 secbits LEAF_NODE 7 secbits LEAF_NODE 5 , VAR_DECL 5 int bits TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 bits LEAF_NODE 7 bits LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 L >= 15360 EXPR 5 L >= 15360 FIELD 6 L LEAF_NODE 7 L REL_OPERATOR 6 >= LEAF_NODE 7 >= FIELD 6 15360 LEAF_NODE 7 15360 LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 secbits = 256 ; EXPR 6 secbits = 256 ASSIGN 7 secbits = 256 LVAL 8 secbits FIELD 9 secbits LEAF_NODE 10 secbits ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 256 FIELD 9 256 LEAF_NODE 10 256 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 L >= 7680 EXPR 7 L >= 7680 FIELD 8 L LEAF_NODE 9 L REL_OPERATOR 8 >= LEAF_NODE 9 >= FIELD 8 7680 LEAF_NODE 9 7680 LEAF_NODE 6 ) STATEMENTS 6 EXPR_STATEMENT 7 secbits = 192 ; EXPR 8 secbits = 192 ASSIGN 9 secbits = 192 LVAL 10 secbits FIELD 11 secbits LEAF_NODE 12 secbits ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 192 FIELD 11 192 LEAF_NODE 12 192 LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 L >= 3072 EXPR 7 L >= 3072 FIELD 8 L LEAF_NODE 9 L REL_OPERATOR 8 >= LEAF_NODE 9 >= FIELD 8 3072 LEAF_NODE 9 3072 LEAF_NODE 6 ) STATEMENTS 6 EXPR_STATEMENT 7 secbits = 128 ; EXPR 8 secbits = 128 ASSIGN 9 secbits = 128 LVAL 10 secbits FIELD 11 secbits LEAF_NODE 12 secbits ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 128 FIELD 11 128 LEAF_NODE 12 128 LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 L >= 2048 EXPR 7 L >= 2048 FIELD 8 L LEAF_NODE 9 L REL_OPERATOR 8 >= LEAF_NODE 9 >= FIELD 8 2048 LEAF_NODE 9 2048 LEAF_NODE 6 ) STATEMENTS 6 EXPR_STATEMENT 7 secbits = 112 ; EXPR 8 secbits = 112 ASSIGN 9 secbits = 112 LVAL 10 secbits FIELD 11 secbits LEAF_NODE 12 secbits ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 112 FIELD 11 112 LEAF_NODE 12 112 LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 L >= 1024 EXPR 7 L >= 1024 FIELD 8 L LEAF_NODE 9 L REL_OPERATOR 8 >= LEAF_NODE 9 >= FIELD 8 1024 LEAF_NODE 9 1024 LEAF_NODE 6 ) STATEMENTS 6 EXPR_STATEMENT 7 secbits = 80 ; EXPR 8 secbits = 80 ASSIGN 9 secbits = 80 LVAL 10 secbits FIELD 11 secbits LEAF_NODE 12 secbits ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 80 FIELD 11 80 LEAF_NODE 12 80 LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 N == - 1 EXPR 5 N == - 1 FIELD 6 N LEAF_NODE 7 N EQ_OPERATOR 6 == LEAF_NODE 7 == UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return secbits ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 secbits EXPR 7 secbits FIELD 8 secbits LEAF_NODE 9 secbits LEAF_NODE 6 ; EXPR_STATEMENT 3 bits = N / 2 ; EXPR 4 bits = N / 2 ASSIGN 5 bits = N / 2 LVAL 6 bits FIELD 7 bits LEAF_NODE 8 bits ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 N / 2 FIELD 7 N LEAF_NODE 8 N LEAF_NODE 7 / FIELD 7 2 LEAF_NODE 8 2 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 bits < 80 EXPR 5 bits < 80 FIELD 6 bits LEAF_NODE 7 bits REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 80 LEAF_NODE 7 80 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; JUMP_STATEMENT 3 return bits >= secbits ? secbits : bits ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 bits >= secbits ? secbits : bits EXPR 5 bits >= secbits ? secbits : bits COND_EXPR 6 bits >= secbits ? secbits : bits CONDITION 7 bits >= secbits FIELD 8 bits LEAF_NODE 9 bits REL_OPERATOR 8 >= LEAF_NODE 9 >= FIELD 8 secbits LEAF_NODE 9 secbits LEAF_NODE 7 ? EXPR 7 secbits FIELD 8 secbits LEAF_NODE 9 secbits LEAF_NODE 7 : FIELD 7 bits LEAF_NODE 8 bits LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 4, "project": "openssl_ast_normal_function_test_121", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 size_t TYPE_NAME 3 size_t LEAF_NODE 4 size_t FUNCTION_NAME 2 CRYPTO_secure_used LEAF_NODE 3 CRYPTO_secure_used PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return secure_mem_used ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 secure_mem_used EXPR 5 secure_mem_used FIELD 6 secure_mem_used LEAF_NODE 7 secure_mem_used LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 5, "project": "openssl_ast_normal_function_test_62", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 a2d_ASN1_OBJECT LEAF_NODE 3 a2d_ASN1_OBJECT PARAMETER_LIST 2 ( unsigned char * out , int olen , const char * buf , int num ) LEAF_NODE 3 ( PARAMETER_DECL 3 unsigned char * out TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 int olen TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 olen LEAF_NODE 5 olen LEAF_NODE 3 , PARAMETER_DECL 3 const char * buf TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 buf LEAF_NODE 5 buf LEAF_NODE 3 , PARAMETER_DECL 3 int num TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 num LEAF_NODE 5 num LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int i , int first , int len ; len = 0 , int c , int use_bn ; INIT_DECL_LIST 4 int i , int first , int len ; len = 0 , int c , int use_bn VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 , INIT_DECL_LIST 5 int first , int len ; len = 0 , int c , int use_bn VAR_DECL 6 int first TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 first LEAF_NODE 8 first LEAF_NODE 6 , INIT_DECL_LIST 6 int len ; len = 0 , int c , int use_bn VAR_DECL 7 int len ; len = 0 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 len LEAF_NODE 9 len LEAF_NODE 8 ; INIT 8 len = 0 ASSIGN 9 len = 0 LVAL 10 len NAME 11 len LEAF_NODE 12 len ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 , INIT_DECL_LIST 7 int c , int use_bn VAR_DECL 8 int c TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 c LEAF_NODE 10 c LEAF_NODE 8 , VAR_DECL 8 int use_bn TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 use_bn LEAF_NODE 10 use_bn LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 24 ] ftmp , char * tmp ; tmp = ftmp ; INIT_DECL_LIST 4 char [ 24 ] ftmp , char * tmp ; tmp = ftmp VAR_DECL 5 char [ 24 ] ftmp TYPE 6 char [ 24 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 24 ] LEAF_NODE 8 [ FIELD 8 24 LEAF_NODE 9 24 LEAF_NODE 8 ] NAME 6 ftmp LEAF_NODE 7 ftmp LEAF_NODE 5 , VAR_DECL 5 char * tmp ; tmp = ftmp TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 tmp LEAF_NODE 7 tmp LEAF_NODE 6 ; INIT 6 tmp = ftmp ASSIGN 7 tmp = ftmp LVAL 8 tmp NAME 9 tmp LEAF_NODE 10 tmp ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ftmp FIELD 9 ftmp LEAF_NODE 10 ftmp LEAF_NODE 4 ; SIMPLE_DECL 3 int tmpsize ; tmpsize = sizeof ( ftmp ) ; VAR_DECL 4 int tmpsize ; tmpsize = sizeof ( ftmp ) TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 tmpsize LEAF_NODE 6 tmpsize LEAF_NODE 5 ; INIT 5 tmpsize = sizeof ( ftmp ) ASSIGN 6 tmpsize = sizeof ( ftmp ) LVAL 7 tmpsize NAME 8 tmpsize LEAF_NODE 9 tmpsize ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 sizeof ( ftmp ) FUNCTION_CALL 8 sizeof ( ftmp ) CALLEE 9 sizeof LEAF_NODE 10 sizeof LEAF_NODE 9 ( ARGUMENT 9 ftmp FIELD 10 ftmp LEAF_NODE 11 ftmp LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 const char * p ; VAR_DECL 4 const char * p TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned long l ; VAR_DECL 4 unsigned long l TYPE 5 unsigned long TYPE_NAME 6 unsigned long LEAF_NODE 7 unsigned LEAF_NODE 7 long NAME 5 l LEAF_NODE 6 l LEAF_NODE 4 ; SIMPLE_DECL 3 BIGNUM * bl ; bl = NULL ; VAR_DECL 4 BIGNUM * bl ; bl = NULL TYPE 5 BIGNUM * TYPE_NAME 6 BIGNUM LEAF_NODE 7 BIGNUM POINTER 6 * LEAF_NODE 7 * NAME 5 bl LEAF_NODE 6 bl LEAF_NODE 5 ; INIT 5 bl = NULL ASSIGN 6 bl = NULL LVAL 7 bl NAME 8 bl LEAF_NODE 9 bl ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 num == 0 EXPR 5 num == 0 FIELD 6 num LEAF_NODE 7 num EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 num == - 1 EXPR 7 num == - 1 FIELD 8 num LEAF_NODE 9 num EQ_OPERATOR 8 == LEAF_NODE 9 == UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 6 ) STATEMENTS 6 EXPR_STATEMENT 7 num = strlen ( buf ) ; EXPR 8 num = strlen ( buf ) ASSIGN 9 num = strlen ( buf ) LVAL 10 num FIELD 11 num LEAF_NODE 12 num ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 strlen ( buf ) FUNCTION_CALL 11 strlen ( buf ) CALLEE 12 strlen LEAF_NODE 13 strlen LEAF_NODE 12 ( ARGUMENT 12 buf FIELD 13 buf LEAF_NODE 14 buf LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 3 p = buf ; EXPR 4 p = buf ASSIGN 5 p = buf LVAL 6 p FIELD 7 p LEAF_NODE 8 p ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 buf FIELD 7 buf LEAF_NODE 8 buf LEAF_NODE 4 ; EXPR_STATEMENT 3 c = * ( p ++ ) ; EXPR 4 c = * ( p ++ ) ASSIGN 5 c = * ( p ++ ) LVAL 6 c FIELD 7 c LEAF_NODE 8 c ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 * ( p ++ ) UNARY_EXPR 7 * ( p ++ ) UNARY_OPERATOR 8 * LEAF_NODE 9 * LEAF_NODE 8 ( FIELD 8 p ++ LEAF_NODE 9 p LEAF_NODE 9 ++ LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 num -- ; EXPR 4 num -- FIELD 5 num -- LEAF_NODE 6 num LEAF_NODE 6 -- LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( c >= '0' ) && ( c <= '2' ) EXPR 5 ( c >= '0' ) && ( c <= '2' ) AND 6 ( c >= '0' ) && ( c <= '2' ) EXPR 7 ( c >= '0' ) LEAF_NODE 8 ( FIELD 8 c LEAF_NODE 9 c REL_OPERATOR 8 >= LEAF_NODE 9 >= FIELD 8 '0' LEAF_NODE 9 '0' LEAF_NODE 8 ) LEAF_NODE 7 && EXPR 7 ( c <= '2' ) LEAF_NODE 8 ( FIELD 8 c LEAF_NODE 9 c REL_OPERATOR 8 <= LEAF_NODE 9 <= FIELD 8 '2' LEAF_NODE 9 '2' LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 first = c - '0' ; EXPR 7 first = c - '0' ASSIGN 8 first = c - '0' LVAL 9 first FIELD 10 first LEAF_NODE 11 first ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 c - '0' FIELD 10 c LEAF_NODE 11 c LEAF_NODE 10 - FIELD 10 '0' LEAF_NODE 11 '0' LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASN1err ( ASN1_F_A2D_ASN1_OBJECT , ASN1_R_FIRST_NUM_TOO_LARGE ) ; EXPR 7 ASN1err ( ASN1_F_A2D_ASN1_OBJECT , ASN1_R_FIRST_NUM_TOO_LARGE ) FUNCTION_CALL 8 ASN1err ( ASN1_F_A2D_ASN1_OBJECT , ASN1_R_FIRST_NUM_TOO_LARGE ) CALLEE 9 ASN1err LEAF_NODE 10 ASN1err LEAF_NODE 9 ( ARGUMENT 9 ASN1_F_A2D_ASN1_OBJECT FIELD 10 ASN1_F_A2D_ASN1_OBJECT LEAF_NODE 11 ASN1_F_A2D_ASN1_OBJECT LEAF_NODE 9 , ARGUMENT 9 ASN1_R_FIRST_NUM_TOO_LARGE FIELD 10 ASN1_R_FIRST_NUM_TOO_LARGE LEAF_NODE 11 ASN1_R_FIRST_NUM_TOO_LARGE LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 num <= 0 EXPR 5 num <= 0 FIELD 6 num LEAF_NODE 7 num REL_OPERATOR 6 <= LEAF_NODE 7 <= FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASN1err ( ASN1_F_A2D_ASN1_OBJECT , ASN1_R_MISSING_SECOND_NUMBER ) ; EXPR 7 ASN1err ( ASN1_F_A2D_ASN1_OBJECT , ASN1_R_MISSING_SECOND_NUMBER ) FUNCTION_CALL 8 ASN1err ( ASN1_F_A2D_ASN1_OBJECT , ASN1_R_MISSING_SECOND_NUMBER ) CALLEE 9 ASN1err LEAF_NODE 10 ASN1err LEAF_NODE 9 ( ARGUMENT 9 ASN1_F_A2D_ASN1_OBJECT FIELD 10 ASN1_F_A2D_ASN1_OBJECT LEAF_NODE 11 ASN1_F_A2D_ASN1_OBJECT LEAF_NODE 9 , ARGUMENT 9 ASN1_R_MISSING_SECOND_NUMBER FIELD 10 ASN1_R_MISSING_SECOND_NUMBER LEAF_NODE 11 ASN1_R_MISSING_SECOND_NUMBER LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 c = * ( p ++ ) ; EXPR 4 c = * ( p ++ ) ASSIGN 5 c = * ( p ++ ) LVAL 6 c FIELD 7 c LEAF_NODE 8 c ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 * ( p ++ ) UNARY_EXPR 7 * ( p ++ ) UNARY_OPERATOR 8 * LEAF_NODE 9 * LEAF_NODE 8 ( FIELD 8 p ++ LEAF_NODE 9 p LEAF_NODE 9 ++ LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 num -- ; EXPR 4 num -- FIELD 5 num -- LEAF_NODE 6 num LEAF_NODE 6 -- LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; LEAF_NODE 4 CONDITION LEAF_NODE 4 ; LEAF_NODE 4 FOR_EXPR LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 num <= 0 EXPR 8 num <= 0 FIELD 9 num LEAF_NODE 10 num REL_OPERATOR 9 <= LEAF_NODE 10 <= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 break DESTINATION ; KEYWORD 9 break LEAF_NODE 10 break LEAF_NODE 9 DESTINATION LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( c != '.' ) && ( c != ' ' ) EXPR 8 ( c != '.' ) && ( c != ' ' ) AND 9 ( c != '.' ) && ( c != ' ' ) EXPR 10 ( c != '.' ) LEAF_NODE 11 ( FIELD 11 c LEAF_NODE 12 c EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 '.' LEAF_NODE 12 '.' LEAF_NODE 11 ) LEAF_NODE 10 && EXPR 10 ( c != ' ' ) LEAF_NODE 11 ( FIELD 11 c LEAF_NODE 12 c EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 ' ' LEAF_NODE 12 ' ' LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ASN1err ( ASN1_F_A2D_ASN1_OBJECT , ASN1_R_INVALID_SEPARATOR ) ; EXPR 10 ASN1err ( ASN1_F_A2D_ASN1_OBJECT , ASN1_R_INVALID_SEPARATOR ) FUNCTION_CALL 11 ASN1err ( ASN1_F_A2D_ASN1_OBJECT , ASN1_R_INVALID_SEPARATOR ) CALLEE 12 ASN1err LEAF_NODE 13 ASN1err LEAF_NODE 12 ( ARGUMENT 12 ASN1_F_A2D_ASN1_OBJECT FIELD 13 ASN1_F_A2D_ASN1_OBJECT LEAF_NODE 14 ASN1_F_A2D_ASN1_OBJECT LEAF_NODE 12 , ARGUMENT 12 ASN1_R_INVALID_SEPARATOR FIELD 13 ASN1_R_INVALID_SEPARATOR LEAF_NODE 14 ASN1_R_INVALID_SEPARATOR LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 err LEAF_NODE 11 err LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 l = 0 ; EXPR 7 l = 0 ASSIGN 8 l = 0 LVAL 9 l FIELD 10 l LEAF_NODE 11 l ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; EXPR_STATEMENT 6 use_bn = 0 ; EXPR 7 use_bn = 0 ASSIGN 8 use_bn = 0 LVAL 9 use_bn FIELD 10 use_bn LEAF_NODE 11 use_bn ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 ; LEAF_NODE 8 ; LEAF_NODE 7 CONDITION LEAF_NODE 7 ; LEAF_NODE 7 FOR_EXPR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 num <= 0 EXPR 11 num <= 0 FIELD 12 num LEAF_NODE 13 num REL_OPERATOR 12 <= LEAF_NODE 13 <= FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 break DESTINATION ; KEYWORD 12 break LEAF_NODE 13 break LEAF_NODE 12 DESTINATION LEAF_NODE 12 ; EXPR_STATEMENT 9 num -- ; EXPR 10 num -- FIELD 11 num -- LEAF_NODE 12 num LEAF_NODE 12 -- LEAF_NODE 10 ; EXPR_STATEMENT 9 c = * ( p ++ ) ; EXPR 10 c = * ( p ++ ) ASSIGN 11 c = * ( p ++ ) LVAL 12 c FIELD 13 c LEAF_NODE 14 c ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 * ( p ++ ) UNARY_EXPR 13 * ( p ++ ) UNARY_OPERATOR 14 * LEAF_NODE 15 * LEAF_NODE 14 ( FIELD 14 p ++ LEAF_NODE 15 p LEAF_NODE 15 ++ LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ( c == ' ' ) || ( c == '.' ) EXPR 11 ( c == ' ' ) || ( c == '.' ) OR 12 ( c == ' ' ) || ( c == '.' ) EXPR 13 ( c == ' ' ) LEAF_NODE 14 ( FIELD 14 c LEAF_NODE 15 c EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 ' ' LEAF_NODE 15 ' ' LEAF_NODE 14 ) LEAF_NODE 13 || EXPR 13 ( c == '.' ) LEAF_NODE 14 ( FIELD 14 c LEAF_NODE 15 c EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 '.' LEAF_NODE 15 '.' LEAF_NODE 14 ) LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 break DESTINATION ; KEYWORD 12 break LEAF_NODE 13 break LEAF_NODE 12 DESTINATION LEAF_NODE 12 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! ossl_isdigit ( c ) EXPR 11 ! ossl_isdigit ( c ) UNARY_EXPR 12 ! ossl_isdigit ( c ) UNARY_OPERATOR 13 ! LEAF_NODE 14 ! FUNCTION_CALL 13 ossl_isdigit ( c ) CALLEE 14 ossl_isdigit LEAF_NODE 15 ossl_isdigit LEAF_NODE 14 ( ARGUMENT 14 c FIELD 15 c LEAF_NODE 16 c LEAF_NODE 14 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ASN1err ( ASN1_F_A2D_ASN1_OBJECT , ASN1_R_INVALID_DIGIT ) ; EXPR 13 ASN1err ( ASN1_F_A2D_ASN1_OBJECT , ASN1_R_INVALID_DIGIT ) FUNCTION_CALL 14 ASN1err ( ASN1_F_A2D_ASN1_OBJECT , ASN1_R_INVALID_DIGIT ) CALLEE 15 ASN1err LEAF_NODE 16 ASN1err LEAF_NODE 15 ( ARGUMENT 15 ASN1_F_A2D_ASN1_OBJECT FIELD 16 ASN1_F_A2D_ASN1_OBJECT LEAF_NODE 17 ASN1_F_A2D_ASN1_OBJECT LEAF_NODE 15 , ARGUMENT 15 ASN1_R_INVALID_DIGIT FIELD 16 ASN1_R_INVALID_DIGIT LEAF_NODE 17 ASN1_R_INVALID_DIGIT LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 goto err ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 err LEAF_NODE 14 err LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! use_bn && l >= ( ( ULONG_MAX - 80 ) / 10L ) EXPR 11 ! use_bn && l >= ( ( ULONG_MAX - 80 ) / 10L ) AND 12 ! use_bn && l >= ( ( ULONG_MAX - 80 ) / 10L ) EXPR 13 ! use_bn UNARY_EXPR 14 ! use_bn UNARY_OPERATOR 15 ! LEAF_NODE 16 ! FIELD 15 use_bn LEAF_NODE 16 use_bn LEAF_NODE 13 && EXPR 13 l >= ( ( ULONG_MAX - 80 ) / 10L ) FIELD 14 l LEAF_NODE 15 l REL_OPERATOR 14 >= LEAF_NODE 15 >= LEAF_NODE 14 ( LEAF_NODE 14 ( FIELD 14 ULONG_MAX LEAF_NODE 15 ULONG_MAX LEAF_NODE 14 - FIELD 14 80 LEAF_NODE 15 80 LEAF_NODE 14 ) LEAF_NODE 14 / FIELD 14 10L LEAF_NODE 15 10L LEAF_NODE 14 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 use_bn = 1 ; EXPR 13 use_bn = 1 ASSIGN 14 use_bn = 1 LVAL 15 use_bn FIELD 16 use_bn LEAF_NODE 17 use_bn ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 1 FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 bl == NULL EXPR 14 bl == NULL FIELD 15 bl LEAF_NODE 16 bl EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 NULL LEAF_NODE 16 NULL LEAF_NODE 13 ) STATEMENTS 13 EXPR_STATEMENT 14 bl = BN_new ( ) ; EXPR 15 bl = BN_new ( ) ASSIGN 16 bl = BN_new ( ) LVAL 17 bl FIELD 18 bl LEAF_NODE 19 bl ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 BN_new ( ) FUNCTION_CALL 18 BN_new ( ) CALLEE 19 BN_new LEAF_NODE 20 BN_new LEAF_NODE 19 ( LEAF_NODE 19 ) LEAF_NODE 15 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 bl == NULL || ! BN_set_word ( bl , l ) EXPR 14 bl == NULL || ! BN_set_word ( bl , l ) OR 15 bl == NULL || ! BN_set_word ( bl , l ) EXPR 16 bl == NULL FIELD 17 bl LEAF_NODE 18 bl EQ_OPERATOR 17 == LEAF_NODE 18 == FIELD 17 NULL LEAF_NODE 18 NULL LEAF_NODE 16 || EXPR 16 ! BN_set_word ( bl , l ) UNARY_EXPR 17 ! BN_set_word ( bl , l ) UNARY_OPERATOR 18 ! LEAF_NODE 19 ! FUNCTION_CALL 18 BN_set_word ( bl , l ) CALLEE 19 BN_set_word LEAF_NODE 20 BN_set_word LEAF_NODE 19 ( ARGUMENT 19 bl FIELD 20 bl LEAF_NODE 21 bl LEAF_NODE 19 , ARGUMENT 19 l FIELD 20 l LEAF_NODE 21 l LEAF_NODE 19 ) LEAF_NODE 13 ) STATEMENTS 13 JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 use_bn EXPR 11 use_bn FIELD 12 use_bn LEAF_NODE 13 use_bn LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 ! BN_mul_word ( bl , 10L ) || ! BN_add_word ( bl , c - '0' ) EXPR 14 ! BN_mul_word ( bl , 10L ) || ! BN_add_word ( bl , c - '0' ) OR 15 ! BN_mul_word ( bl , 10L ) || ! BN_add_word ( bl , c - '0' ) EXPR 16 ! BN_mul_word ( bl , 10L ) UNARY_EXPR 17 ! BN_mul_word ( bl , 10L ) UNARY_OPERATOR 18 ! LEAF_NODE 19 ! FUNCTION_CALL 18 BN_mul_word ( bl , 10L ) CALLEE 19 BN_mul_word LEAF_NODE 20 BN_mul_word LEAF_NODE 19 ( ARGUMENT 19 bl FIELD 20 bl LEAF_NODE 21 bl LEAF_NODE 19 , ARGUMENT 19 10L FIELD 20 10L LEAF_NODE 21 10L LEAF_NODE 19 ) LEAF_NODE 16 || EXPR 16 ! BN_add_word ( bl , c - '0' ) UNARY_EXPR 17 ! BN_add_word ( bl , c - '0' ) UNARY_OPERATOR 18 ! LEAF_NODE 19 ! FUNCTION_CALL 18 BN_add_word ( bl , c - '0' ) CALLEE 19 BN_add_word LEAF_NODE 20 BN_add_word LEAF_NODE 19 ( ARGUMENT 19 bl FIELD 20 bl LEAF_NODE 21 bl LEAF_NODE 19 , ARGUMENT 19 c - '0' FIELD 20 c LEAF_NODE 21 c LEAF_NODE 20 - FIELD 20 '0' LEAF_NODE 21 '0' LEAF_NODE 19 ) LEAF_NODE 13 ) STATEMENTS 13 JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 else LEAF_NODE 11 else STATEMENTS 10 EXPR_STATEMENT 11 l = l * 10L + ( long ) ( c - '0' ) ; EXPR 12 l = l * 10L + ( long ) ( c - '0' ) ASSIGN 13 l = l * 10L + ( long ) ( c - '0' ) LVAL 14 l FIELD 15 l LEAF_NODE 16 l ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 l * 10L + ( long ) ( c - '0' ) FIELD 15 l LEAF_NODE 16 l LEAF_NODE 15 * FIELD 15 10L LEAF_NODE 16 10L LEAF_NODE 15 + LEAF_NODE 15 ( TYPE_NAME 15 long LEAF_NODE 16 long LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 c LEAF_NODE 16 c LEAF_NODE 15 - FIELD 15 '0' LEAF_NODE 16 '0' LEAF_NODE 15 ) LEAF_NODE 12 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 len == 0 EXPR 8 len == 0 FIELD 9 len LEAF_NODE 10 len EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ( first < 2 ) && ( l >= 40 ) EXPR 11 ( first < 2 ) && ( l >= 40 ) AND 12 ( first < 2 ) && ( l >= 40 ) EXPR 13 ( first < 2 ) LEAF_NODE 14 ( FIELD 14 first LEAF_NODE 15 first REL_OPERATOR 14 < LEAF_NODE 15 < FIELD 14 2 LEAF_NODE 15 2 LEAF_NODE 14 ) LEAF_NODE 13 && EXPR 13 ( l >= 40 ) LEAF_NODE 14 ( FIELD 14 l LEAF_NODE 15 l REL_OPERATOR 14 >= LEAF_NODE 15 >= FIELD 14 40 LEAF_NODE 15 40 LEAF_NODE 14 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ASN1err ( ASN1_F_A2D_ASN1_OBJECT , ASN1_R_SECOND_NUMBER_TOO_LARGE ) ; EXPR 13 ASN1err ( ASN1_F_A2D_ASN1_OBJECT , ASN1_R_SECOND_NUMBER_TOO_LARGE ) FUNCTION_CALL 14 ASN1err ( ASN1_F_A2D_ASN1_OBJECT , ASN1_R_SECOND_NUMBER_TOO_LARGE ) CALLEE 15 ASN1err LEAF_NODE 16 ASN1err LEAF_NODE 15 ( ARGUMENT 15 ASN1_F_A2D_ASN1_OBJECT FIELD 16 ASN1_F_A2D_ASN1_OBJECT LEAF_NODE 17 ASN1_F_A2D_ASN1_OBJECT LEAF_NODE 15 , ARGUMENT 15 ASN1_R_SECOND_NUMBER_TOO_LARGE FIELD 16 ASN1_R_SECOND_NUMBER_TOO_LARGE LEAF_NODE 17 ASN1_R_SECOND_NUMBER_TOO_LARGE LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 goto err ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 err LEAF_NODE 14 err LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 use_bn EXPR 11 use_bn FIELD 12 use_bn LEAF_NODE 13 use_bn LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 ! BN_add_word ( bl , first * 40 ) EXPR 14 ! BN_add_word ( bl , first * 40 ) UNARY_EXPR 15 ! BN_add_word ( bl , first * 40 ) UNARY_OPERATOR 16 ! LEAF_NODE 17 ! FUNCTION_CALL 16 BN_add_word ( bl , first * 40 ) CALLEE 17 BN_add_word LEAF_NODE 18 BN_add_word LEAF_NODE 17 ( ARGUMENT 17 bl FIELD 18 bl LEAF_NODE 19 bl LEAF_NODE 17 , ARGUMENT 17 first * 40 FIELD 18 first LEAF_NODE 19 first LEAF_NODE 18 * FIELD 18 40 LEAF_NODE 19 40 LEAF_NODE 17 ) LEAF_NODE 13 ) STATEMENTS 13 JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 else LEAF_NODE 11 else STATEMENTS 10 EXPR_STATEMENT 11 l += ( long ) first * 40 ; EXPR 12 l += ( long ) first * 40 ASSIGN 13 l += ( long ) first * 40 LVAL 14 l FIELD 15 l LEAF_NODE 16 l ASSIGN_OP 14 += LEAF_NODE 15 += RVAL 14 ( long ) first * 40 LEAF_NODE 15 ( TYPE_NAME 15 long LEAF_NODE 16 long LEAF_NODE 15 ) FIELD 15 first LEAF_NODE 16 first LEAF_NODE 15 * FIELD 15 40 LEAF_NODE 16 40 LEAF_NODE 12 ; LEAF_NODE 8 } EXPR_STATEMENT 6 i = 0 ; EXPR 7 i = 0 ASSIGN 8 i = 0 LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 use_bn EXPR 8 use_bn FIELD 9 use_bn LEAF_NODE 10 use_bn LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SIMPLE_DECL 9 int blsize ; VAR_DECL 10 int blsize TYPE 11 int TYPE_NAME 12 int LEAF_NODE 13 int NAME 11 blsize LEAF_NODE 12 blsize LEAF_NODE 10 ; EXPR_STATEMENT 9 blsize = BN_num_bits ( bl ) ; EXPR 10 blsize = BN_num_bits ( bl ) ASSIGN 11 blsize = BN_num_bits ( bl ) LVAL 12 blsize FIELD 13 blsize LEAF_NODE 14 blsize ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 BN_num_bits ( bl ) FUNCTION_CALL 13 BN_num_bits ( bl ) CALLEE 14 BN_num_bits LEAF_NODE 15 BN_num_bits LEAF_NODE 14 ( ARGUMENT 14 bl FIELD 15 bl LEAF_NODE 16 bl LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 blsize = ( blsize + 6 ) / 7 ; EXPR 10 blsize = ( blsize + 6 ) / 7 ASSIGN 11 blsize = ( blsize + 6 ) / 7 LVAL 12 blsize FIELD 13 blsize LEAF_NODE 14 blsize ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( blsize + 6 ) / 7 LEAF_NODE 13 ( FIELD 13 blsize LEAF_NODE 14 blsize LEAF_NODE 13 + FIELD 13 6 LEAF_NODE 14 6 LEAF_NODE 13 ) LEAF_NODE 13 / FIELD 13 7 LEAF_NODE 14 7 LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 blsize > tmpsize EXPR 11 blsize > tmpsize FIELD 12 blsize LEAF_NODE 13 blsize REL_OPERATOR 12 > LEAF_NODE 13 > FIELD 12 tmpsize LEAF_NODE 13 tmpsize LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 tmp != ftmp EXPR 14 tmp != ftmp FIELD 15 tmp LEAF_NODE 16 tmp EQ_OPERATOR 15 != LEAF_NODE 16 != FIELD 15 ftmp LEAF_NODE 16 ftmp LEAF_NODE 13 ) STATEMENTS 13 EXPR_STATEMENT 14 OPENSSL_free ( tmp ) ; EXPR 15 OPENSSL_free ( tmp ) FUNCTION_CALL 16 OPENSSL_free ( tmp ) CALLEE 17 OPENSSL_free LEAF_NODE 18 OPENSSL_free LEAF_NODE 17 ( ARGUMENT 17 tmp FIELD 18 tmp LEAF_NODE 19 tmp LEAF_NODE 17 ) LEAF_NODE 15 ; EXPR_STATEMENT 12 tmpsize = blsize + 32 ; EXPR 13 tmpsize = blsize + 32 ASSIGN 14 tmpsize = blsize + 32 LVAL 15 tmpsize FIELD 16 tmpsize LEAF_NODE 17 tmpsize ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 blsize + 32 FIELD 16 blsize LEAF_NODE 17 blsize LEAF_NODE 16 + FIELD 16 32 LEAF_NODE 17 32 LEAF_NODE 13 ; EXPR_STATEMENT 12 tmp = OPENSSL_malloc ( tmpsize ) ; EXPR 13 tmp = OPENSSL_malloc ( tmpsize ) ASSIGN 14 tmp = OPENSSL_malloc ( tmpsize ) LVAL 15 tmp FIELD 16 tmp LEAF_NODE 17 tmp ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 OPENSSL_malloc ( tmpsize ) FUNCTION_CALL 16 OPENSSL_malloc ( tmpsize ) CALLEE 17 OPENSSL_malloc LEAF_NODE 18 OPENSSL_malloc LEAF_NODE 17 ( ARGUMENT 17 tmpsize FIELD 18 tmpsize LEAF_NODE 19 tmpsize LEAF_NODE 17 ) LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 tmp == NULL EXPR 14 tmp == NULL FIELD 15 tmp LEAF_NODE 16 tmp EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 NULL LEAF_NODE 16 NULL LEAF_NODE 13 ) STATEMENTS 13 JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 11 } ITERATION 9 KEYWORD 10 while LEAF_NODE 11 while LEAF_NODE 10 ( CONDITION 10 blsize -- EXPR 11 blsize -- FIELD 12 blsize -- LEAF_NODE 13 blsize LEAF_NODE 13 -- LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 SIMPLE_DECL 12 BN_ULONG t ; t = BN_div_word ( bl , 0x80L ) ; VAR_DECL 13 BN_ULONG t ; t = BN_div_word ( bl , 0x80L ) TYPE 14 BN_ULONG TYPE_NAME 15 BN_ULONG LEAF_NODE 16 BN_ULONG NAME 14 t LEAF_NODE 15 t LEAF_NODE 14 ; INIT 14 t = BN_div_word ( bl , 0x80L ) ASSIGN 15 t = BN_div_word ( bl , 0x80L ) LVAL 16 t NAME 17 t LEAF_NODE 18 t ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 BN_div_word ( bl , 0x80L ) FUNCTION_CALL 17 BN_div_word ( bl , 0x80L ) CALLEE 18 BN_div_word LEAF_NODE 19 BN_div_word LEAF_NODE 18 ( ARGUMENT 18 bl FIELD 19 bl LEAF_NODE 20 bl LEAF_NODE 18 , ARGUMENT 18 0x80L FIELD 19 0x80L LEAF_NODE 20 0x80L LEAF_NODE 18 ) LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 t == ( BN_ULONG ) - 1 EXPR 14 t == ( BN_ULONG ) - 1 FIELD 15 t LEAF_NODE 16 t EQ_OPERATOR 15 == LEAF_NODE 16 == LEAF_NODE 15 ( TYPE_NAME 15 BN_ULONG LEAF_NODE 16 BN_ULONG LEAF_NODE 15 ) UNARY_EXPR 15 - 1 UNARY_OPERATOR 16 - LEAF_NODE 17 - FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 13 ) STATEMENTS 13 JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; EXPR_STATEMENT 12 tmp [ i ++ ] = ( unsigned char ) t ; EXPR 13 tmp [ i ++ ] = ( unsigned char ) t ASSIGN 14 tmp [ i ++ ] = ( unsigned char ) t LVAL 15 tmp [ i ++ ] FIELD 16 tmp [ i ++ ] LEAF_NODE 17 tmp LEAF_NODE 17 [ EXPR 17 i ++ FIELD 18 i ++ LEAF_NODE 19 i LEAF_NODE 19 ++ LEAF_NODE 17 ] ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ( unsigned char ) t LEAF_NODE 16 ( TYPE_NAME 16 unsigned char LEAF_NODE 17 unsigned LEAF_NODE 17 char LEAF_NODE 16 ) FIELD 16 t LEAF_NODE 17 t LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 ITERATION 9 KEYWORD 10 for LEAF_NODE 11 for LEAF_NODE 10 ( FOR_INIT 10 ; LEAF_NODE 11 ; LEAF_NODE 10 CONDITION LEAF_NODE 10 ; LEAF_NODE 10 FOR_EXPR LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 tmp [ i ++ ] = ( unsigned char ) l & 0x7f ; EXPR 13 tmp [ i ++ ] = ( unsigned char ) l & 0x7f ASSIGN 14 tmp [ i ++ ] = ( unsigned char ) l & 0x7f LVAL 15 tmp [ i ++ ] FIELD 16 tmp [ i ++ ] LEAF_NODE 17 tmp LEAF_NODE 17 [ EXPR 17 i ++ FIELD 18 i ++ LEAF_NODE 19 i LEAF_NODE 19 ++ LEAF_NODE 17 ] ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ( unsigned char ) l & 0x7f LEAF_NODE 16 ( TYPE_NAME 16 unsigned char LEAF_NODE 17 unsigned LEAF_NODE 17 char LEAF_NODE 16 ) FIELD 16 l LEAF_NODE 17 l LEAF_NODE 16 & FIELD 16 0x7f LEAF_NODE 17 0x7f LEAF_NODE 13 ; EXPR_STATEMENT 12 l >>= 7L ; EXPR 13 l >>= 7L ASSIGN 14 l >>= 7L LVAL 15 l FIELD 16 l LEAF_NODE 17 l ASSIGN_OP 15 >>= LEAF_NODE 16 >>= RVAL 15 7L FIELD 16 7L LEAF_NODE 17 7L LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 l == 0L EXPR 14 l == 0L FIELD 15 l LEAF_NODE 16 l EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 0L LEAF_NODE 16 0L LEAF_NODE 13 ) STATEMENTS 13 JUMP_STATEMENT 14 break DESTINATION ; KEYWORD 15 break LEAF_NODE 16 break LEAF_NODE 15 DESTINATION LEAF_NODE 15 ; LEAF_NODE 11 } LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 out != NULL EXPR 8 out != NULL FIELD 9 out LEAF_NODE 10 out EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 len + i > olen EXPR 11 len + i > olen FIELD 12 len LEAF_NODE 13 len LEAF_NODE 12 + FIELD 12 i LEAF_NODE 13 i REL_OPERATOR 12 > LEAF_NODE 13 > FIELD 12 olen LEAF_NODE 13 olen LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ASN1err ( ASN1_F_A2D_ASN1_OBJECT , ASN1_R_BUFFER_TOO_SMALL ) ; EXPR 13 ASN1err ( ASN1_F_A2D_ASN1_OBJECT , ASN1_R_BUFFER_TOO_SMALL ) FUNCTION_CALL 14 ASN1err ( ASN1_F_A2D_ASN1_OBJECT , ASN1_R_BUFFER_TOO_SMALL ) CALLEE 15 ASN1err LEAF_NODE 16 ASN1err LEAF_NODE 15 ( ARGUMENT 15 ASN1_F_A2D_ASN1_OBJECT FIELD 16 ASN1_F_A2D_ASN1_OBJECT LEAF_NODE 17 ASN1_F_A2D_ASN1_OBJECT LEAF_NODE 15 , ARGUMENT 15 ASN1_R_BUFFER_TOO_SMALL FIELD 16 ASN1_R_BUFFER_TOO_SMALL LEAF_NODE 17 ASN1_R_BUFFER_TOO_SMALL LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 goto err ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 err LEAF_NODE 14 err LEAF_NODE 13 ; LEAF_NODE 11 } ITERATION 9 KEYWORD 10 while LEAF_NODE 11 while LEAF_NODE 10 ( CONDITION 10 -- i > 0 EXPR 11 -- i > 0 LEAF_NODE 12 -- FIELD 12 i LEAF_NODE 13 i REL_OPERATOR 12 > LEAF_NODE 13 > FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 out [ len ++ ] = tmp [ i ] | 0x80 ; EXPR 12 out [ len ++ ] = tmp [ i ] | 0x80 ASSIGN 13 out [ len ++ ] = tmp [ i ] | 0x80 LVAL 14 out [ len ++ ] FIELD 15 out [ len ++ ] LEAF_NODE 16 out LEAF_NODE 16 [ EXPR 16 len ++ FIELD 17 len ++ LEAF_NODE 18 len LEAF_NODE 18 ++ LEAF_NODE 16 ] ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 tmp [ i ] | 0x80 BIT_OR 15 tmp [ i ] | 0x80 BIT_OR_ELEM 16 tmp [ i ] FIELD 17 tmp [ i ] LEAF_NODE 18 tmp LEAF_NODE 18 [ EXPR 18 i FIELD 19 i LEAF_NODE 20 i LEAF_NODE 18 ] LEAF_NODE 16 | BIT_OR_ELEM 16 0x80 FIELD 17 0x80 LEAF_NODE 18 0x80 LEAF_NODE 12 ; EXPR_STATEMENT 9 out [ len ++ ] = tmp [ 0 ] ; EXPR 10 out [ len ++ ] = tmp [ 0 ] ASSIGN 11 out [ len ++ ] = tmp [ 0 ] LVAL 12 out [ len ++ ] FIELD 13 out [ len ++ ] LEAF_NODE 14 out LEAF_NODE 14 [ EXPR 14 len ++ FIELD 15 len ++ LEAF_NODE 16 len LEAF_NODE 16 ++ LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 tmp [ 0 ] FIELD 13 tmp [ 0 ] LEAF_NODE 14 tmp LEAF_NODE 14 [ EXPR 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ] LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 EXPR_STATEMENT 8 len += i ; EXPR 9 len += i ASSIGN 10 len += i LVAL 11 len FIELD 12 len LEAF_NODE 13 len ASSIGN_OP 11 += LEAF_NODE 12 += RVAL 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 tmp != ftmp EXPR 5 tmp != ftmp FIELD 6 tmp LEAF_NODE 7 tmp EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 ftmp LEAF_NODE 7 ftmp LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 OPENSSL_free ( tmp ) ; EXPR 6 OPENSSL_free ( tmp ) FUNCTION_CALL 7 OPENSSL_free ( tmp ) CALLEE 8 OPENSSL_free LEAF_NODE 9 OPENSSL_free LEAF_NODE 8 ( ARGUMENT 8 tmp FIELD 9 tmp LEAF_NODE 10 tmp LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 3 BN_free ( bl ) ; EXPR 4 BN_free ( bl ) FUNCTION_CALL 5 BN_free ( bl ) CALLEE 6 BN_free LEAF_NODE 7 BN_free LEAF_NODE 6 ( ARGUMENT 6 bl FIELD 7 bl LEAF_NODE 8 bl LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return len ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 len EXPR 5 len FIELD 6 len LEAF_NODE 7 len LEAF_NODE 4 ; LABEL 3 err : LEAF_NODE 4 err LEAF_NODE 4 : SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 tmp != ftmp EXPR 5 tmp != ftmp FIELD 6 tmp LEAF_NODE 7 tmp EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 ftmp LEAF_NODE 7 ftmp LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 OPENSSL_free ( tmp ) ; EXPR 6 OPENSSL_free ( tmp ) FUNCTION_CALL 7 OPENSSL_free ( tmp ) CALLEE 8 OPENSSL_free LEAF_NODE 9 OPENSSL_free LEAF_NODE 8 ( ARGUMENT 8 tmp FIELD 9 tmp LEAF_NODE 10 tmp LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 3 BN_free ( bl ) ; EXPR 4 BN_free ( bl ) FUNCTION_CALL 5 BN_free ( bl ) CALLEE 6 BN_free LEAF_NODE 7 BN_free LEAF_NODE 6 ( ARGUMENT 6 bl FIELD 7 bl LEAF_NODE 8 bl LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 6, "project": "openssl_ast_normal_function_test_159", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 ASN1_UTCTIME * TYPE_NAME 3 ASN1_UTCTIME LEAF_NODE 4 ASN1_UTCTIME LEAF_NODE 3 * FUNCTION_NAME 2 ASN1_UTCTIME_set LEAF_NODE 3 ASN1_UTCTIME_set PARAMETER_LIST 2 ( ASN1_UTCTIME * s , time_t t ) LEAF_NODE 3 ( PARAMETER_DECL 3 ASN1_UTCTIME * s TYPE 4 ASN1_UTCTIME * TYPE_NAME 5 ASN1_UTCTIME LEAF_NODE 6 ASN1_UTCTIME POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 time_t t TYPE 4 time_t TYPE_NAME 5 time_t LEAF_NODE 6 time_t NAME 4 t LEAF_NODE 5 t LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return ASN1_UTCTIME_adj ( s , t , 0 , 0 ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ASN1_UTCTIME_adj ( s , t , 0 , 0 ) EXPR 5 ASN1_UTCTIME_adj ( s , t , 0 , 0 ) FUNCTION_CALL 6 ASN1_UTCTIME_adj ( s , t , 0 , 0 ) CALLEE 7 ASN1_UTCTIME_adj LEAF_NODE 8 ASN1_UTCTIME_adj LEAF_NODE 7 ( ARGUMENT 7 s FIELD 8 s LEAF_NODE 9 s LEAF_NODE 7 , ARGUMENT 7 t FIELD 8 t LEAF_NODE 9 t LEAF_NODE 7 , ARGUMENT 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 7 , ARGUMENT 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 7, "project": "openssl_ast_normal_function_test_82", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 AES_ofb128_encrypt LEAF_NODE 3 AES_ofb128_encrypt PARAMETER_LIST 2 ( const unsigned char * in , unsigned char * out , size_t length , const AES_KEY * key , unsigned char * ivec , int * num ) LEAF_NODE 3 ( PARAMETER_DECL 3 const unsigned char * in TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 in LEAF_NODE 5 in LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * out TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 size_t length TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 length LEAF_NODE 5 length LEAF_NODE 3 , PARAMETER_DECL 3 const AES_KEY * key TYPE 4 const AES_KEY * TYPE_NAME 5 const AES_KEY LEAF_NODE 6 const LEAF_NODE 6 AES_KEY POINTER 5 * LEAF_NODE 6 * NAME 4 key LEAF_NODE 5 key LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * ivec TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 ivec LEAF_NODE 5 ivec LEAF_NODE 3 , PARAMETER_DECL 3 int * num TYPE 4 int * TYPE_NAME 5 int LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 num LEAF_NODE 5 num LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CRYPTO_ofb128_encrypt ( in , out , length , key , ivec , num , ( block128_f ) AES_encrypt ) ; EXPR 4 CRYPTO_ofb128_encrypt ( in , out , length , key , ivec , num , ( block128_f ) AES_encrypt ) FUNCTION_CALL 5 CRYPTO_ofb128_encrypt ( in , out , length , key , ivec , num , ( block128_f ) AES_encrypt ) CALLEE 6 CRYPTO_ofb128_encrypt LEAF_NODE 7 CRYPTO_ofb128_encrypt LEAF_NODE 6 ( ARGUMENT 6 in FIELD 7 in LEAF_NODE 8 in LEAF_NODE 6 , ARGUMENT 6 out FIELD 7 out LEAF_NODE 8 out LEAF_NODE 6 , ARGUMENT 6 length FIELD 7 length LEAF_NODE 8 length LEAF_NODE 6 , ARGUMENT 6 key FIELD 7 key LEAF_NODE 8 key LEAF_NODE 6 , ARGUMENT 6 ivec FIELD 7 ivec LEAF_NODE 8 ivec LEAF_NODE 6 , ARGUMENT 6 num FIELD 7 num LEAF_NODE 8 num LEAF_NODE 6 , ARGUMENT 6 ( block128_f ) AES_encrypt LEAF_NODE 7 ( TYPE_NAME 7 block128_f LEAF_NODE 8 block128_f LEAF_NODE 7 ) FIELD 7 AES_encrypt LEAF_NODE 8 AES_encrypt LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 8, "project": "openssl_ast_normal_function_test_46", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_object_size LEAF_NODE 3 ASN1_object_size PARAMETER_LIST 2 ( int constructed , int length , int tag ) LEAF_NODE 3 ( PARAMETER_DECL 3 int constructed TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 constructed LEAF_NODE 5 constructed LEAF_NODE 3 , PARAMETER_DECL 3 int length TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 length LEAF_NODE 5 length LEAF_NODE 3 , PARAMETER_DECL 3 int tag TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 tag LEAF_NODE 5 tag LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int ret ; ret = 1 ; VAR_DECL 4 int ret ; ret = 1 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 5 ; INIT 5 ret = 1 ASSIGN 6 ret = 1 LVAL 7 ret NAME 8 ret LEAF_NODE 9 ret ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 length < 0 EXPR 5 length < 0 FIELD 6 length LEAF_NODE 7 length REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return - 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 - 1 EXPR 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 tag >= 31 EXPR 5 tag >= 31 FIELD 6 tag LEAF_NODE 7 tag REL_OPERATOR 6 >= LEAF_NODE 7 >= FIELD 6 31 LEAF_NODE 7 31 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 ITERATION 6 KEYWORD 7 while LEAF_NODE 8 while LEAF_NODE 7 ( CONDITION 7 tag > 0 EXPR 8 tag > 0 FIELD 9 tag LEAF_NODE 10 tag REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 tag >>= 7 ; EXPR 10 tag >>= 7 ASSIGN 11 tag >>= 7 LVAL 12 tag FIELD 13 tag LEAF_NODE 14 tag ASSIGN_OP 12 >>= LEAF_NODE 13 >>= RVAL 12 7 FIELD 13 7 LEAF_NODE 14 7 LEAF_NODE 10 ; EXPR_STATEMENT 9 ret ++ ; EXPR 10 ret ++ FIELD 11 ret ++ LEAF_NODE 12 ret LEAF_NODE 12 ++ LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 constructed == 2 EXPR 5 constructed == 2 FIELD 6 constructed LEAF_NODE 7 constructed EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 2 LEAF_NODE 7 2 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ret += 3 ; EXPR 7 ret += 3 ASSIGN 8 ret += 3 LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 3 FIELD 10 3 LEAF_NODE 11 3 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ret ++ ; EXPR 7 ret ++ FIELD 8 ret ++ LEAF_NODE 9 ret LEAF_NODE 9 ++ LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 length > 127 EXPR 8 length > 127 FIELD 9 length LEAF_NODE 10 length REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 127 LEAF_NODE 10 127 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SIMPLE_DECL 9 int tmplen ; tmplen = length ; VAR_DECL 10 int tmplen ; tmplen = length TYPE 11 int TYPE_NAME 12 int LEAF_NODE 13 int NAME 11 tmplen LEAF_NODE 12 tmplen LEAF_NODE 11 ; INIT 11 tmplen = length ASSIGN 12 tmplen = length LVAL 13 tmplen NAME 14 tmplen LEAF_NODE 15 tmplen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 length FIELD 14 length LEAF_NODE 15 length LEAF_NODE 10 ; ITERATION 9 KEYWORD 10 while LEAF_NODE 11 while LEAF_NODE 10 ( CONDITION 10 tmplen > 0 EXPR 11 tmplen > 0 FIELD 12 tmplen LEAF_NODE 13 tmplen REL_OPERATOR 12 > LEAF_NODE 13 > FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 tmplen >>= 8 ; EXPR 13 tmplen >>= 8 ASSIGN 14 tmplen >>= 8 LVAL 15 tmplen FIELD 16 tmplen LEAF_NODE 17 tmplen ASSIGN_OP 15 >>= LEAF_NODE 16 >>= RVAL 15 8 FIELD 16 8 LEAF_NODE 17 8 LEAF_NODE 13 ; EXPR_STATEMENT 12 ret ++ ; EXPR 13 ret ++ FIELD 14 ret ++ LEAF_NODE 15 ret LEAF_NODE 15 ++ LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ret >= INT_MAX - length EXPR 5 ret >= INT_MAX - length FIELD 6 ret LEAF_NODE 7 ret REL_OPERATOR 6 >= LEAF_NODE 7 >= FIELD 6 INT_MAX LEAF_NODE 7 INT_MAX LEAF_NODE 6 - FIELD 6 length LEAF_NODE 7 length LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return - 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 - 1 EXPR 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 6 ; JUMP_STATEMENT 3 return ret + length ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ret + length EXPR 5 ret + length FIELD 6 ret LEAF_NODE 7 ret LEAF_NODE 6 + FIELD 6 length LEAF_NODE 7 length LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 9, "project": "openssl_ast_normal_function_test_152", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 dtls1_get_record LEAF_NODE 3 dtls1_get_record PARAMETER_LIST 2 ( SSL * s ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int ssl_major , int ssl_minor ; INIT_DECL_LIST 4 int ssl_major , int ssl_minor VAR_DECL 5 int ssl_major TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 ssl_major LEAF_NODE 7 ssl_major LEAF_NODE 5 , VAR_DECL 5 int ssl_minor TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 ssl_minor LEAF_NODE 7 ssl_minor LEAF_NODE 4 ; SIMPLE_DECL 3 int i , int n ; INIT_DECL_LIST 4 int i , int n VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 , VAR_DECL 5 int n TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 n LEAF_NODE 7 n LEAF_NODE 4 ; SIMPLE_DECL 3 SSL3_RECORD * rr ; VAR_DECL 4 SSL3_RECORD * rr TYPE 5 SSL3_RECORD * TYPE_NAME 6 SSL3_RECORD LEAF_NODE 7 SSL3_RECORD POINTER 6 * LEAF_NODE 7 * NAME 5 rr LEAF_NODE 6 rr LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * p ; p = NULL ; VAR_DECL 4 unsigned char * p ; p = NULL TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 5 ; INIT 5 p = NULL ASSIGN 6 p = NULL LVAL 7 p NAME 8 p LEAF_NODE 9 p ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned short version ; VAR_DECL 4 unsigned short version TYPE 5 unsigned short TYPE_NAME 6 unsigned short LEAF_NODE 7 unsigned LEAF_NODE 7 short NAME 5 version LEAF_NODE 6 version LEAF_NODE 4 ; SIMPLE_DECL 3 DTLS1_BITMAP * bitmap ; VAR_DECL 4 DTLS1_BITMAP * bitmap TYPE 5 DTLS1_BITMAP * TYPE_NAME 6 DTLS1_BITMAP LEAF_NODE 7 DTLS1_BITMAP POINTER 6 * LEAF_NODE 7 * NAME 5 bitmap LEAF_NODE 6 bitmap LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int is_next_epoch ; VAR_DECL 4 unsigned int is_next_epoch TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 is_next_epoch LEAF_NODE 6 is_next_epoch LEAF_NODE 4 ; EXPR_STATEMENT 3 rr = & ( s -> s3 -> rrec ) ; EXPR 4 rr = & ( s -> s3 -> rrec ) ASSIGN 5 rr = & ( s -> s3 -> rrec ) LVAL 6 rr FIELD 7 rr LEAF_NODE 8 rr ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 & ( s -> s3 -> rrec ) UNARY_EXPR 7 & ( s -> s3 -> rrec ) UNARY_OPERATOR 8 & LEAF_NODE 9 & LEAF_NODE 8 ( FIELD 8 s -> s3 -> rrec LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 s3 LEAF_NODE 9 -> LEAF_NODE 9 rrec LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dtls1_process_buffered_records ( s ) ; EXPR 4 dtls1_process_buffered_records ( s ) FUNCTION_CALL 5 dtls1_process_buffered_records ( s ) CALLEE 6 dtls1_process_buffered_records LEAF_NODE 7 dtls1_process_buffered_records LEAF_NODE 6 ( ARGUMENT 6 s FIELD 7 s LEAF_NODE 8 s LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 dtls1_get_processed_record ( s ) EXPR 5 dtls1_get_processed_record ( s ) FUNCTION_CALL 6 dtls1_get_processed_record ( s ) CALLEE 7 dtls1_get_processed_record LEAF_NODE 8 dtls1_get_processed_record LEAF_NODE 7 ( ARGUMENT 7 s FIELD 8 s LEAF_NODE 9 s LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 1 EXPR 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 6 ; LABEL 3 again : LEAF_NODE 4 again LEAF_NODE 4 : SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( s -> rstate != SSL_ST_READ_BODY ) || ( s -> packet_length < DTLS1_RT_HEADER_LENGTH ) EXPR 5 ( s -> rstate != SSL_ST_READ_BODY ) || ( s -> packet_length < DTLS1_RT_HEADER_LENGTH ) OR 6 ( s -> rstate != SSL_ST_READ_BODY ) || ( s -> packet_length < DTLS1_RT_HEADER_LENGTH ) EXPR 7 ( s -> rstate != SSL_ST_READ_BODY ) LEAF_NODE 8 ( FIELD 8 s -> rstate LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 rstate EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 SSL_ST_READ_BODY LEAF_NODE 9 SSL_ST_READ_BODY LEAF_NODE 8 ) LEAF_NODE 7 || EXPR 7 ( s -> packet_length < DTLS1_RT_HEADER_LENGTH ) LEAF_NODE 8 ( FIELD 8 s -> packet_length LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 packet_length REL_OPERATOR 8 < LEAF_NODE 9 < FIELD 8 DTLS1_RT_HEADER_LENGTH LEAF_NODE 9 DTLS1_RT_HEADER_LENGTH LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 n = ssl3_read_n ( s , DTLS1_RT_HEADER_LENGTH , s -> s3 -> rbuf . len , 0 ) ; EXPR 7 n = ssl3_read_n ( s , DTLS1_RT_HEADER_LENGTH , s -> s3 -> rbuf . len , 0 ) ASSIGN 8 n = ssl3_read_n ( s , DTLS1_RT_HEADER_LENGTH , s -> s3 -> rbuf . len , 0 ) LVAL 9 n FIELD 10 n LEAF_NODE 11 n ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ssl3_read_n ( s , DTLS1_RT_HEADER_LENGTH , s -> s3 -> rbuf . len , 0 ) FUNCTION_CALL 10 ssl3_read_n ( s , DTLS1_RT_HEADER_LENGTH , s -> s3 -> rbuf . len , 0 ) CALLEE 11 ssl3_read_n LEAF_NODE 12 ssl3_read_n LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 , ARGUMENT 11 DTLS1_RT_HEADER_LENGTH FIELD 12 DTLS1_RT_HEADER_LENGTH LEAF_NODE 13 DTLS1_RT_HEADER_LENGTH LEAF_NODE 11 , ARGUMENT 11 s -> s3 -> rbuf . len FIELD 12 s -> s3 -> rbuf . len LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 s3 LEAF_NODE 13 -> LEAF_NODE 13 rbuf LEAF_NODE 13 . LEAF_NODE 13 len LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 n <= 0 EXPR 8 n <= 0 FIELD 9 n LEAF_NODE 10 n REL_OPERATOR 9 <= LEAF_NODE 10 <= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 return LEAF_NODE 6 ( LEAF_NODE 6 n LEAF_NODE 6 ) LEAF_NODE 6 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> packet_length != DTLS1_RT_HEADER_LENGTH EXPR 8 s -> packet_length != DTLS1_RT_HEADER_LENGTH FIELD 9 s -> packet_length LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 packet_length EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 DTLS1_RT_HEADER_LENGTH LEAF_NODE 10 DTLS1_RT_HEADER_LENGTH LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 s -> packet_length = 0 ; EXPR 10 s -> packet_length = 0 ASSIGN 11 s -> packet_length = 0 LVAL 12 s -> packet_length FIELD 13 s -> packet_length LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 packet_length ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; JUMP_STATEMENT 9 goto again ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 again LEAF_NODE 11 again LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 s -> rstate = SSL_ST_READ_BODY ; EXPR 7 s -> rstate = SSL_ST_READ_BODY ASSIGN 8 s -> rstate = SSL_ST_READ_BODY LVAL 9 s -> rstate FIELD 10 s -> rstate LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 rstate ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL_ST_READ_BODY FIELD 10 SSL_ST_READ_BODY LEAF_NODE 11 SSL_ST_READ_BODY LEAF_NODE 7 ; EXPR_STATEMENT 6 p = s -> packet ; EXPR 7 p = s -> packet ASSIGN 8 p = s -> packet LVAL 9 p FIELD 10 p LEAF_NODE 11 p ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 s -> packet FIELD 10 s -> packet LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 packet LEAF_NODE 7 ; EXPR_STATEMENT 6 rr -> type = * ( p ++ ) ; EXPR 7 rr -> type = * ( p ++ ) ASSIGN 8 rr -> type = * ( p ++ ) LVAL 9 rr -> type FIELD 10 rr -> type LEAF_NODE 11 rr LEAF_NODE 11 -> LEAF_NODE 11 type ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 * ( p ++ ) UNARY_EXPR 10 * ( p ++ ) UNARY_OPERATOR 11 * LEAF_NODE 12 * LEAF_NODE 11 ( FIELD 11 p ++ LEAF_NODE 12 p LEAF_NODE 12 ++ LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ssl_major = * ( p ++ ) ; EXPR 7 ssl_major = * ( p ++ ) ASSIGN 8 ssl_major = * ( p ++ ) LVAL 9 ssl_major FIELD 10 ssl_major LEAF_NODE 11 ssl_major ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 * ( p ++ ) UNARY_EXPR 10 * ( p ++ ) UNARY_OPERATOR 11 * LEAF_NODE 12 * LEAF_NODE 11 ( FIELD 11 p ++ LEAF_NODE 12 p LEAF_NODE 12 ++ LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ssl_minor = * ( p ++ ) ; EXPR 7 ssl_minor = * ( p ++ ) ASSIGN 8 ssl_minor = * ( p ++ ) LVAL 9 ssl_minor FIELD 10 ssl_minor LEAF_NODE 11 ssl_minor ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 * ( p ++ ) UNARY_EXPR 10 * ( p ++ ) UNARY_OPERATOR 11 * LEAF_NODE 12 * LEAF_NODE 11 ( FIELD 11 p ++ LEAF_NODE 12 p LEAF_NODE 12 ++ LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 version = ( ssl_major << 8 ) | ssl_minor ; EXPR 7 version = ( ssl_major << 8 ) | ssl_minor ASSIGN 8 version = ( ssl_major << 8 ) | ssl_minor LVAL 9 version FIELD 10 version LEAF_NODE 11 version ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( ssl_major << 8 ) | ssl_minor BIT_OR 10 ( ssl_major << 8 ) | ssl_minor BIT_OR_ELEM 11 ( ssl_major << 8 ) LEAF_NODE 12 ( FIELD 12 ssl_major LEAF_NODE 13 ssl_major LEAF_NODE 12 << FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 ) LEAF_NODE 11 | BIT_OR_ELEM 11 ssl_minor FIELD 12 ssl_minor LEAF_NODE 13 ssl_minor LEAF_NODE 7 ; EXPR_STATEMENT 6 n2s ( p , rr -> epoch ) ; EXPR 7 n2s ( p , rr -> epoch ) FUNCTION_CALL 8 n2s ( p , rr -> epoch ) CALLEE 9 n2s LEAF_NODE 10 n2s LEAF_NODE 9 ( ARGUMENT 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 , ARGUMENT 9 rr -> epoch FIELD 10 rr -> epoch LEAF_NODE 11 rr LEAF_NODE 11 -> LEAF_NODE 11 epoch LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 memcpy ( & ( s -> s3 -> read_sequence [ 2 ] ) , p , 6 ) ; EXPR 7 memcpy ( & ( s -> s3 -> read_sequence [ 2 ] ) , p , 6 ) FUNCTION_CALL 8 memcpy ( & ( s -> s3 -> read_sequence [ 2 ] ) , p , 6 ) CALLEE 9 memcpy LEAF_NODE 10 memcpy LEAF_NODE 9 ( ARGUMENT 9 & ( s -> s3 -> read_sequence [ 2 ] ) UNARY_EXPR 10 & ( s -> s3 -> read_sequence [ 2 ] ) UNARY_OPERATOR 11 & LEAF_NODE 12 & LEAF_NODE 11 ( FIELD 11 s -> s3 -> read_sequence [ 2 ] LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 s3 LEAF_NODE 12 -> LEAF_NODE 12 read_sequence LEAF_NODE 12 [ EXPR 12 2 FIELD 13 2 LEAF_NODE 14 2 LEAF_NODE 12 ] LEAF_NODE 11 ) LEAF_NODE 9 , ARGUMENT 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 , ARGUMENT 9 6 FIELD 10 6 LEAF_NODE 11 6 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 p += 6 ; EXPR 7 p += 6 ASSIGN 8 p += 6 LVAL 9 p FIELD 10 p LEAF_NODE 11 p ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 6 FIELD 10 6 LEAF_NODE 11 6 LEAF_NODE 7 ; EXPR_STATEMENT 6 n2s ( p , rr -> length ) ; EXPR 7 n2s ( p , rr -> length ) FUNCTION_CALL 8 n2s ( p , rr -> length ) CALLEE 9 n2s LEAF_NODE 10 n2s LEAF_NODE 9 ( ARGUMENT 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 , ARGUMENT 9 rr -> length FIELD 10 rr -> length LEAF_NODE 11 rr LEAF_NODE 11 -> LEAF_NODE 11 length LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! s -> first_packet EXPR 8 ! s -> first_packet UNARY_EXPR 9 ! s -> first_packet UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FIELD 10 s -> first_packet LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 first_packet LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 version != s -> version EXPR 11 version != s -> version FIELD 12 version LEAF_NODE 13 version EQ_OPERATOR 12 != LEAF_NODE 13 != FIELD 12 s -> version LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 version LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 rr -> length = 0 ; EXPR 13 rr -> length = 0 ASSIGN 14 rr -> length = 0 LVAL 15 rr -> length FIELD 16 rr -> length LEAF_NODE 17 rr LEAF_NODE 17 -> LEAF_NODE 17 length ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 13 ; EXPR_STATEMENT 12 s -> packet_length = 0 ; EXPR 13 s -> packet_length = 0 ASSIGN 14 s -> packet_length = 0 LVAL 15 s -> packet_length FIELD 16 s -> packet_length LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 packet_length ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 13 ; JUMP_STATEMENT 12 goto again ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 again LEAF_NODE 14 again LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( version & 0xff00 ) != ( s -> version & 0xff00 ) EXPR 8 ( version & 0xff00 ) != ( s -> version & 0xff00 ) LEAF_NODE 9 ( FIELD 9 version LEAF_NODE 10 version LEAF_NODE 9 & FIELD 9 0xff00 LEAF_NODE 10 0xff00 LEAF_NODE 9 ) EQ_OPERATOR 9 != LEAF_NODE 10 != LEAF_NODE 9 ( FIELD 9 s -> version LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 version LEAF_NODE 9 & FIELD 9 0xff00 LEAF_NODE 10 0xff00 LEAF_NODE 9 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 rr -> length = 0 ; EXPR 10 rr -> length = 0 ASSIGN 11 rr -> length = 0 LVAL 12 rr -> length FIELD 13 rr -> length LEAF_NODE 14 rr LEAF_NODE 14 -> LEAF_NODE 14 length ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 s -> packet_length = 0 ; EXPR 10 s -> packet_length = 0 ASSIGN 11 s -> packet_length = 0 LVAL 12 s -> packet_length FIELD 13 s -> packet_length LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 packet_length ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; JUMP_STATEMENT 9 goto again ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 again LEAF_NODE 11 again LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 rr -> length > SSL3_RT_MAX_ENCRYPTED_LENGTH EXPR 8 rr -> length > SSL3_RT_MAX_ENCRYPTED_LENGTH FIELD 9 rr -> length LEAF_NODE 10 rr LEAF_NODE 10 -> LEAF_NODE 10 length REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 SSL3_RT_MAX_ENCRYPTED_LENGTH LEAF_NODE 10 SSL3_RT_MAX_ENCRYPTED_LENGTH LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 rr -> length = 0 ; EXPR 10 rr -> length = 0 ASSIGN 11 rr -> length = 0 LVAL 12 rr -> length FIELD 13 rr -> length LEAF_NODE 14 rr LEAF_NODE 14 -> LEAF_NODE 14 length ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 s -> packet_length = 0 ; EXPR 10 s -> packet_length = 0 ASSIGN 11 s -> packet_length = 0 LVAL 12 s -> packet_length FIELD 13 s -> packet_length LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 packet_length ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; JUMP_STATEMENT 9 goto again ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 again LEAF_NODE 11 again LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 rr -> length > s -> packet_length - DTLS1_RT_HEADER_LENGTH EXPR 5 rr -> length > s -> packet_length - DTLS1_RT_HEADER_LENGTH FIELD 6 rr -> length LEAF_NODE 7 rr LEAF_NODE 7 -> LEAF_NODE 7 length REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 s -> packet_length LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 packet_length LEAF_NODE 6 - FIELD 6 DTLS1_RT_HEADER_LENGTH LEAF_NODE 7 DTLS1_RT_HEADER_LENGTH LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 i = rr -> length ; EXPR 7 i = rr -> length ASSIGN 8 i = rr -> length LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 rr -> length FIELD 10 rr -> length LEAF_NODE 11 rr LEAF_NODE 11 -> LEAF_NODE 11 length LEAF_NODE 7 ; EXPR_STATEMENT 6 n = ssl3_read_n ( s , i , i , 1 ) ; EXPR 7 n = ssl3_read_n ( s , i , i , 1 ) ASSIGN 8 n = ssl3_read_n ( s , i , i , 1 ) LVAL 9 n FIELD 10 n LEAF_NODE 11 n ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ssl3_read_n ( s , i , i , 1 ) FUNCTION_CALL 10 ssl3_read_n ( s , i , i , 1 ) CALLEE 11 ssl3_read_n LEAF_NODE 12 ssl3_read_n LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 , ARGUMENT 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 , ARGUMENT 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 , ARGUMENT 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 n <= 0 EXPR 8 n <= 0 FIELD 9 n LEAF_NODE 10 n REL_OPERATOR 9 <= LEAF_NODE 10 <= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 return LEAF_NODE 6 ( LEAF_NODE 6 n LEAF_NODE 6 ) LEAF_NODE 6 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 n != i EXPR 8 n != i FIELD 9 n LEAF_NODE 10 n EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 i LEAF_NODE 10 i LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 rr -> length = 0 ; EXPR 10 rr -> length = 0 ASSIGN 11 rr -> length = 0 LVAL 12 rr -> length FIELD 13 rr -> length LEAF_NODE 14 rr LEAF_NODE 14 -> LEAF_NODE 14 length ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 s -> packet_length = 0 ; EXPR 10 s -> packet_length = 0 ASSIGN 11 s -> packet_length = 0 LVAL 12 s -> packet_length FIELD 13 s -> packet_length LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 packet_length ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; JUMP_STATEMENT 9 goto again ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 again LEAF_NODE 11 again LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 s -> rstate = SSL_ST_READ_HEADER ; EXPR 4 s -> rstate = SSL_ST_READ_HEADER ASSIGN 5 s -> rstate = SSL_ST_READ_HEADER LVAL 6 s -> rstate FIELD 7 s -> rstate LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 rstate ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 SSL_ST_READ_HEADER FIELD 7 SSL_ST_READ_HEADER LEAF_NODE 8 SSL_ST_READ_HEADER LEAF_NODE 4 ; EXPR_STATEMENT 3 bitmap = dtls1_get_bitmap ( s , rr , & is_next_epoch ) ; EXPR 4 bitmap = dtls1_get_bitmap ( s , rr , & is_next_epoch ) ASSIGN 5 bitmap = dtls1_get_bitmap ( s , rr , & is_next_epoch ) LVAL 6 bitmap FIELD 7 bitmap LEAF_NODE 8 bitmap ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dtls1_get_bitmap ( s , rr , & is_next_epoch ) FUNCTION_CALL 7 dtls1_get_bitmap ( s , rr , & is_next_epoch ) CALLEE 8 dtls1_get_bitmap LEAF_NODE 9 dtls1_get_bitmap LEAF_NODE 8 ( ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 , ARGUMENT 8 rr FIELD 9 rr LEAF_NODE 10 rr LEAF_NODE 8 , ARGUMENT 8 & is_next_epoch UNARY_EXPR 9 & is_next_epoch UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 is_next_epoch LEAF_NODE 11 is_next_epoch LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 bitmap == NULL EXPR 5 bitmap == NULL FIELD 6 bitmap LEAF_NODE 7 bitmap EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 rr -> length = 0 ; EXPR 7 rr -> length = 0 ASSIGN 8 rr -> length = 0 LVAL 9 rr -> length FIELD 10 rr -> length LEAF_NODE 11 rr LEAF_NODE 11 -> LEAF_NODE 11 length ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> packet_length = 0 ; EXPR 7 s -> packet_length = 0 ASSIGN 8 s -> packet_length = 0 LVAL 9 s -> packet_length FIELD 10 s -> packet_length LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 packet_length ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; JUMP_STATEMENT 6 goto again ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 again LEAF_NODE 8 again LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! BIO_dgram_is_sctp ( SSL_get_rbio ( s ) ) EXPR 5 ! BIO_dgram_is_sctp ( SSL_get_rbio ( s ) ) UNARY_EXPR 6 ! BIO_dgram_is_sctp ( SSL_get_rbio ( s ) ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 BIO_dgram_is_sctp ( SSL_get_rbio ( s ) ) CALLEE 8 BIO_dgram_is_sctp LEAF_NODE 9 BIO_dgram_is_sctp LEAF_NODE 8 ( ARGUMENT 8 SSL_get_rbio ( s ) FUNCTION_CALL 9 SSL_get_rbio ( s ) CALLEE 10 SSL_get_rbio LEAF_NODE 11 SSL_get_rbio LEAF_NODE 10 ( ARGUMENT 10 s FIELD 11 s LEAF_NODE 12 s LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! ( s -> d1 -> listen && rr -> type == SSL3_RT_HANDSHAKE && * p == SSL3_MT_CLIENT_HELLO ) && ! dtls1_record_replay_check ( s , bitmap ) EXPR 8 ! ( s -> d1 -> listen && rr -> type == SSL3_RT_HANDSHAKE && * p == SSL3_MT_CLIENT_HELLO ) && ! dtls1_record_replay_check ( s , bitmap ) AND 9 ! ( s -> d1 -> listen && rr -> type == SSL3_RT_HANDSHAKE && * p == SSL3_MT_CLIENT_HELLO ) && ! dtls1_record_replay_check ( s , bitmap ) EXPR 10 ! ( s -> d1 -> listen && rr -> type == SSL3_RT_HANDSHAKE && * p == SSL3_MT_CLIENT_HELLO ) UNARY_EXPR 11 ! ( s -> d1 -> listen && rr -> type == SSL3_RT_HANDSHAKE && * p == SSL3_MT_CLIENT_HELLO ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! LEAF_NODE 12 ( AND 12 s -> d1 -> listen && rr -> type == SSL3_RT_HANDSHAKE && * p == SSL3_MT_CLIENT_HELLO EXPR 13 s -> d1 -> listen FIELD 14 s -> d1 -> listen LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 d1 LEAF_NODE 15 -> LEAF_NODE 15 listen LEAF_NODE 13 && EXPR 13 rr -> type == SSL3_RT_HANDSHAKE && * p == SSL3_MT_CLIENT_HELLO AND 14 rr -> type == SSL3_RT_HANDSHAKE && * p == SSL3_MT_CLIENT_HELLO EXPR 15 rr -> type == SSL3_RT_HANDSHAKE FIELD 16 rr -> type LEAF_NODE 17 rr LEAF_NODE 17 -> LEAF_NODE 17 type EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 SSL3_RT_HANDSHAKE LEAF_NODE 17 SSL3_RT_HANDSHAKE LEAF_NODE 15 && EXPR 15 * p == SSL3_MT_CLIENT_HELLO UNARY_EXPR 16 * p UNARY_OPERATOR 17 * LEAF_NODE 18 * FIELD 17 p LEAF_NODE 18 p EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 SSL3_MT_CLIENT_HELLO LEAF_NODE 17 SSL3_MT_CLIENT_HELLO LEAF_NODE 12 ) LEAF_NODE 10 && EXPR 10 ! dtls1_record_replay_check ( s , bitmap ) UNARY_EXPR 11 ! dtls1_record_replay_check ( s , bitmap ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 dtls1_record_replay_check ( s , bitmap ) CALLEE 13 dtls1_record_replay_check LEAF_NODE 14 dtls1_record_replay_check LEAF_NODE 13 ( ARGUMENT 13 s FIELD 14 s LEAF_NODE 15 s LEAF_NODE 13 , ARGUMENT 13 bitmap FIELD 14 bitmap LEAF_NODE 15 bitmap LEAF_NODE 13 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 rr -> length = 0 ; EXPR 10 rr -> length = 0 ASSIGN 11 rr -> length = 0 LVAL 12 rr -> length FIELD 13 rr -> length LEAF_NODE 14 rr LEAF_NODE 14 -> LEAF_NODE 14 length ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 s -> packet_length = 0 ; EXPR 10 s -> packet_length = 0 ASSIGN 11 s -> packet_length = 0 LVAL 12 s -> packet_length FIELD 13 s -> packet_length LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 packet_length ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; JUMP_STATEMENT 9 goto again ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 again LEAF_NODE 11 again LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 rr -> length == 0 EXPR 5 rr -> length == 0 FIELD 6 rr -> length LEAF_NODE 7 rr LEAF_NODE 7 -> LEAF_NODE 7 length EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto again ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 again LEAF_NODE 7 again LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 is_next_epoch EXPR 5 is_next_epoch FIELD 6 is_next_epoch LEAF_NODE 7 is_next_epoch LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( SSL_in_init ( s ) || s -> in_handshake ) && ! s -> d1 -> listen EXPR 8 ( SSL_in_init ( s ) || s -> in_handshake ) && ! s -> d1 -> listen AND 9 ( SSL_in_init ( s ) || s -> in_handshake ) && ! s -> d1 -> listen EXPR 10 ( SSL_in_init ( s ) || s -> in_handshake ) LEAF_NODE 11 ( OR 11 SSL_in_init ( s ) || s -> in_handshake EXPR 12 SSL_in_init ( s ) FUNCTION_CALL 13 SSL_in_init ( s ) CALLEE 14 SSL_in_init LEAF_NODE 15 SSL_in_init LEAF_NODE 14 ( ARGUMENT 14 s FIELD 15 s LEAF_NODE 16 s LEAF_NODE 14 ) LEAF_NODE 12 || EXPR 12 s -> in_handshake FIELD 13 s -> in_handshake LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 in_handshake LEAF_NODE 11 ) LEAF_NODE 10 && EXPR 10 ! s -> d1 -> listen UNARY_EXPR 11 ! s -> d1 -> listen UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FIELD 12 s -> d1 -> listen LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 d1 LEAF_NODE 13 -> LEAF_NODE 13 listen LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 dtls1_buffer_record ( s , & ( s -> d1 -> unprocessed_rcds ) , rr -> seq_num ) ; EXPR 10 dtls1_buffer_record ( s , & ( s -> d1 -> unprocessed_rcds ) , rr -> seq_num ) FUNCTION_CALL 11 dtls1_buffer_record ( s , & ( s -> d1 -> unprocessed_rcds ) , rr -> seq_num ) CALLEE 12 dtls1_buffer_record LEAF_NODE 13 dtls1_buffer_record LEAF_NODE 12 ( ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 , ARGUMENT 12 & ( s -> d1 -> unprocessed_rcds ) UNARY_EXPR 13 & ( s -> d1 -> unprocessed_rcds ) UNARY_OPERATOR 14 & LEAF_NODE 15 & LEAF_NODE 14 ( FIELD 14 s -> d1 -> unprocessed_rcds LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 d1 LEAF_NODE 15 -> LEAF_NODE 15 unprocessed_rcds LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 rr -> seq_num FIELD 13 rr -> seq_num LEAF_NODE 14 rr LEAF_NODE 14 -> LEAF_NODE 14 seq_num LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 rr -> length = 0 ; EXPR 7 rr -> length = 0 ASSIGN 8 rr -> length = 0 LVAL 9 rr -> length FIELD 10 rr -> length LEAF_NODE 11 rr LEAF_NODE 11 -> LEAF_NODE 11 length ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> packet_length = 0 ; EXPR 7 s -> packet_length = 0 ASSIGN 8 s -> packet_length = 0 LVAL 9 s -> packet_length FIELD 10 s -> packet_length LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 packet_length ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; JUMP_STATEMENT 6 goto again ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 again LEAF_NODE 8 again LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! dtls1_process_record ( s ) EXPR 5 ! dtls1_process_record ( s ) UNARY_EXPR 6 ! dtls1_process_record ( s ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 dtls1_process_record ( s ) CALLEE 8 dtls1_process_record LEAF_NODE 9 dtls1_process_record LEAF_NODE 8 ( ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 rr -> length = 0 ; EXPR 7 rr -> length = 0 ASSIGN 8 rr -> length = 0 LVAL 9 rr -> length FIELD 10 rr -> length LEAF_NODE 11 rr LEAF_NODE 11 -> LEAF_NODE 11 length ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> packet_length = 0 ; EXPR 7 s -> packet_length = 0 ASSIGN 8 s -> packet_length = 0 LVAL 9 s -> packet_length FIELD 10 s -> packet_length LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 packet_length ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; JUMP_STATEMENT 6 goto again ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 again LEAF_NODE 8 again LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return ( 1 ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ( 1 ) EXPR 5 ( 1 ) LEAF_NODE 6 ( FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 10, "project": "openssl_ast_vul_function_test_23", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 is_utc LEAF_NODE 3 is_utc PARAMETER_LIST 2 ( const int year ) LEAF_NODE 3 ( PARAMETER_DECL 3 const int year TYPE 4 const int TYPE_NAME 5 const int LEAF_NODE 6 const LEAF_NODE 6 int NAME 4 year LEAF_NODE 5 year LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 50 <= year && year <= 149 EXPR 5 50 <= year && year <= 149 AND 6 50 <= year && year <= 149 EXPR 7 50 <= year FIELD 8 50 LEAF_NODE 9 50 REL_OPERATOR 8 <= LEAF_NODE 9 <= FIELD 8 year LEAF_NODE 9 year LEAF_NODE 7 && EXPR 7 year <= 149 FIELD 8 year LEAF_NODE 9 year REL_OPERATOR 8 <= LEAF_NODE 9 <= FIELD 8 149 LEAF_NODE 9 149 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 1 EXPR 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 6 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 11, "project": "openssl_ast_normal_function_test_31", "target": 0}
{"func": "SIMPLE_DECL 1 volatile int done ; done = 0 ; VAR_DECL 2 volatile int done ; done = 0 TYPE 3 volatile int TYPE_NAME 4 volatile int LEAF_NODE 5 volatile LEAF_NODE 5 int NAME 3 done LEAF_NODE 4 done LEAF_NODE 3 ; INIT 3 done = 0 ASSIGN 4 done = 0 LVAL 5 done NAME 6 done LEAF_NODE 7 done ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 interrupt LEAF_NODE 3 interrupt PARAMETER_LIST 2 ( int sig ) LEAF_NODE 3 ( PARAMETER_DECL 3 int sig TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 sig LEAF_NODE 5 sig LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 done = 1 ; EXPR 4 done = 1 ASSIGN 5 done = 1 LVAL 6 done FIELD 7 done LEAF_NODE 8 done ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 12, "project": "openssl_ast_normal_function_test_175", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 cpy_asc LEAF_NODE 3 cpy_asc PARAMETER_LIST 2 ( unsigned long value , void * arg ) LEAF_NODE 3 ( PARAMETER_DECL 3 unsigned long value TYPE 4 unsigned long TYPE_NAME 5 unsigned long LEAF_NODE 6 unsigned LEAF_NODE 6 long NAME 4 value LEAF_NODE 5 value LEAF_NODE 3 , PARAMETER_DECL 3 void * arg TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 arg LEAF_NODE 5 arg LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned char * p , unsigned char * q ; INIT_DECL_LIST 4 unsigned char * p , unsigned char * q VAR_DECL 5 unsigned char * p TYPE 6 unsigned char * TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 p LEAF_NODE 7 p LEAF_NODE 5 , VAR_DECL 5 unsigned char * q TYPE 6 unsigned char * TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 q LEAF_NODE 7 q LEAF_NODE 4 ; EXPR_STATEMENT 3 p = arg ; EXPR 4 p = arg ASSIGN 5 p = arg LVAL 6 p FIELD 7 p LEAF_NODE 8 p ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 arg FIELD 7 arg LEAF_NODE 8 arg LEAF_NODE 4 ; EXPR_STATEMENT 3 q = * p ; EXPR 4 q = * p ASSIGN 5 q = * p LVAL 6 q FIELD 7 q LEAF_NODE 8 q ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 * p UNARY_EXPR 7 * p UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 p LEAF_NODE 9 p LEAF_NODE 4 ; EXPR_STATEMENT 3 * q = ( unsigned char ) value ; EXPR 4 * q = ( unsigned char ) value ASSIGN 5 * q = ( unsigned char ) value LVAL 6 * q UNARY_EXPR 7 * q UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 q LEAF_NODE 9 q ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( unsigned char ) value LEAF_NODE 7 ( TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char LEAF_NODE 7 ) FIELD 7 value LEAF_NODE 8 value LEAF_NODE 4 ; EXPR_STATEMENT 3 ( * p ) ++ ; EXPR 4 ( * p ) ++ LEAF_NODE 5 ( UNARY_EXPR 5 * p UNARY_OPERATOR 6 * LEAF_NODE 7 * FIELD 6 p LEAF_NODE 7 p LEAF_NODE 5 ) LEAF_NODE 5 ++ LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 13, "project": "openssl_ast_normal_function_test_70", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_get_object LEAF_NODE 3 ASN1_get_object PARAMETER_LIST 2 ( const unsigned char * * pp , long * plength , int * ptag , int * pclass , long omax ) LEAF_NODE 3 ( PARAMETER_DECL 3 const unsigned char * * pp TYPE 4 const unsigned char * * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 pp LEAF_NODE 5 pp LEAF_NODE 3 , PARAMETER_DECL 3 long * plength TYPE 4 long * TYPE_NAME 5 long LEAF_NODE 6 long POINTER 5 * LEAF_NODE 6 * NAME 4 plength LEAF_NODE 5 plength LEAF_NODE 3 , PARAMETER_DECL 3 int * ptag TYPE 4 int * TYPE_NAME 5 int LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 ptag LEAF_NODE 5 ptag LEAF_NODE 3 , PARAMETER_DECL 3 int * pclass TYPE 4 int * TYPE_NAME 5 int LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 pclass LEAF_NODE 5 pclass LEAF_NODE 3 , PARAMETER_DECL 3 long omax TYPE 4 long TYPE_NAME 5 long LEAF_NODE 6 long NAME 4 omax LEAF_NODE 5 omax LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int i , int ret ; INIT_DECL_LIST 4 int i , int ret VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 , VAR_DECL 5 int ret TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 ret LEAF_NODE 7 ret LEAF_NODE 4 ; SIMPLE_DECL 3 long l ; VAR_DECL 4 long l TYPE 5 long TYPE_NAME 6 long LEAF_NODE 7 long NAME 5 l LEAF_NODE 6 l LEAF_NODE 4 ; SIMPLE_DECL 3 const unsigned char * p ; p = * pp ; VAR_DECL 4 const unsigned char * p ; p = * pp TYPE 5 const unsigned char * TYPE_NAME 6 const unsigned char LEAF_NODE 7 const LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 5 ; INIT 5 p = * pp ASSIGN 6 p = * pp LVAL 7 p NAME 8 p LEAF_NODE 9 p ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * pp UNARY_EXPR 8 * pp UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 pp LEAF_NODE 10 pp LEAF_NODE 4 ; SIMPLE_DECL 3 int tag , int xclass , int inf ; INIT_DECL_LIST 4 int tag , int xclass , int inf VAR_DECL 5 int tag TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 tag LEAF_NODE 7 tag LEAF_NODE 5 , INIT_DECL_LIST 5 int xclass , int inf VAR_DECL 6 int xclass TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 xclass LEAF_NODE 8 xclass LEAF_NODE 6 , VAR_DECL 6 int inf TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 inf LEAF_NODE 8 inf LEAF_NODE 4 ; SIMPLE_DECL 3 long max ; max = omax ; VAR_DECL 4 long max ; max = omax TYPE 5 long TYPE_NAME 6 long LEAF_NODE 7 long NAME 5 max LEAF_NODE 6 max LEAF_NODE 5 ; INIT 5 max = omax ASSIGN 6 max = omax LVAL 7 max NAME 8 max LEAF_NODE 9 max ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 omax FIELD 8 omax LEAF_NODE 9 omax LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! max EXPR 5 ! max UNARY_EXPR 6 ! max UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 max LEAF_NODE 8 max LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto err ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 err LEAF_NODE 7 err LEAF_NODE 6 ; EXPR_STATEMENT 3 ret = ( * p & V_ASN1_CONSTRUCTED ) ; EXPR 4 ret = ( * p & V_ASN1_CONSTRUCTED ) ASSIGN 5 ret = ( * p & V_ASN1_CONSTRUCTED ) LVAL 6 ret FIELD 7 ret LEAF_NODE 8 ret ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( * p & V_ASN1_CONSTRUCTED ) LEAF_NODE 7 ( UNARY_EXPR 7 * p UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 p LEAF_NODE 9 p LEAF_NODE 7 & FIELD 7 V_ASN1_CONSTRUCTED LEAF_NODE 8 V_ASN1_CONSTRUCTED LEAF_NODE 7 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 xclass = ( * p & V_ASN1_PRIVATE ) ; EXPR 4 xclass = ( * p & V_ASN1_PRIVATE ) ASSIGN 5 xclass = ( * p & V_ASN1_PRIVATE ) LVAL 6 xclass FIELD 7 xclass LEAF_NODE 8 xclass ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( * p & V_ASN1_PRIVATE ) LEAF_NODE 7 ( UNARY_EXPR 7 * p UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 p LEAF_NODE 9 p LEAF_NODE 7 & FIELD 7 V_ASN1_PRIVATE LEAF_NODE 8 V_ASN1_PRIVATE LEAF_NODE 7 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 i = * p & V_ASN1_PRIMITIVE_TAG ; EXPR 4 i = * p & V_ASN1_PRIMITIVE_TAG ASSIGN 5 i = * p & V_ASN1_PRIMITIVE_TAG LVAL 6 i FIELD 7 i LEAF_NODE 8 i ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 * p & V_ASN1_PRIMITIVE_TAG UNARY_EXPR 7 * p UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 p LEAF_NODE 9 p LEAF_NODE 7 & FIELD 7 V_ASN1_PRIMITIVE_TAG LEAF_NODE 8 V_ASN1_PRIMITIVE_TAG LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 i == V_ASN1_PRIMITIVE_TAG EXPR 5 i == V_ASN1_PRIMITIVE_TAG FIELD 6 i LEAF_NODE 7 i EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 V_ASN1_PRIMITIVE_TAG LEAF_NODE 7 V_ASN1_PRIMITIVE_TAG LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 p ++ ; EXPR 7 p ++ FIELD 8 p ++ LEAF_NODE 9 p LEAF_NODE 9 ++ LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 -- max == 0 EXPR 8 -- max == 0 LEAF_NODE 9 -- FIELD 9 max LEAF_NODE 10 max EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 goto err ; KEYWORD 9 goto LEAF_NODE 10 goto DESTINATION 9 err LEAF_NODE 10 err LEAF_NODE 9 ; EXPR_STATEMENT 6 l = 0 ; EXPR 7 l = 0 ASSIGN 8 l = 0 LVAL 9 l FIELD 10 l LEAF_NODE 11 l ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 while LEAF_NODE 8 while LEAF_NODE 7 ( CONDITION 7 * p & 0x80 EXPR 8 * p & 0x80 UNARY_EXPR 9 * p UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 & FIELD 9 0x80 LEAF_NODE 10 0x80 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 l <<= 7L ; EXPR 10 l <<= 7L ASSIGN 11 l <<= 7L LVAL 12 l FIELD 13 l LEAF_NODE 14 l ASSIGN_OP 12 <<= LEAF_NODE 13 <<= RVAL 12 7L FIELD 13 7L LEAF_NODE 14 7L LEAF_NODE 10 ; EXPR_STATEMENT 9 l |= * ( p ++ ) & 0x7f ; EXPR 10 l |= * ( p ++ ) & 0x7f ASSIGN 11 l |= * ( p ++ ) & 0x7f LVAL 12 l FIELD 13 l LEAF_NODE 14 l ASSIGN_OP 12 |= LEAF_NODE 13 |= RVAL 12 * ( p ++ ) & 0x7f UNARY_EXPR 13 * ( p ++ ) UNARY_OPERATOR 14 * LEAF_NODE 15 * LEAF_NODE 14 ( FIELD 14 p ++ LEAF_NODE 15 p LEAF_NODE 15 ++ LEAF_NODE 14 ) LEAF_NODE 13 & FIELD 13 0x7f LEAF_NODE 14 0x7f LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 -- max == 0 EXPR 11 -- max == 0 LEAF_NODE 12 -- FIELD 12 max LEAF_NODE 13 max EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 goto err ; KEYWORD 12 goto LEAF_NODE 13 goto DESTINATION 12 err LEAF_NODE 13 err LEAF_NODE 12 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 l > ( INT_MAX >> 7L ) EXPR 11 l > ( INT_MAX >> 7L ) FIELD 12 l LEAF_NODE 13 l REL_OPERATOR 12 > LEAF_NODE 13 > LEAF_NODE 12 ( FIELD 12 INT_MAX LEAF_NODE 13 INT_MAX LEAF_NODE 12 >> FIELD 12 7L LEAF_NODE 13 7L LEAF_NODE 12 ) LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 goto err ; KEYWORD 12 goto LEAF_NODE 13 goto DESTINATION 12 err LEAF_NODE 13 err LEAF_NODE 12 ; LEAF_NODE 8 } EXPR_STATEMENT 6 l <<= 7L ; EXPR 7 l <<= 7L ASSIGN 8 l <<= 7L LVAL 9 l FIELD 10 l LEAF_NODE 11 l ASSIGN_OP 9 <<= LEAF_NODE 10 <<= RVAL 9 7L FIELD 10 7L LEAF_NODE 11 7L LEAF_NODE 7 ; EXPR_STATEMENT 6 l |= * ( p ++ ) & 0x7f ; EXPR 7 l |= * ( p ++ ) & 0x7f ASSIGN 8 l |= * ( p ++ ) & 0x7f LVAL 9 l FIELD 10 l LEAF_NODE 11 l ASSIGN_OP 9 |= LEAF_NODE 10 |= RVAL 9 * ( p ++ ) & 0x7f UNARY_EXPR 10 * ( p ++ ) UNARY_OPERATOR 11 * LEAF_NODE 12 * LEAF_NODE 11 ( FIELD 11 p ++ LEAF_NODE 12 p LEAF_NODE 12 ++ LEAF_NODE 11 ) LEAF_NODE 10 & FIELD 10 0x7f LEAF_NODE 11 0x7f LEAF_NODE 7 ; EXPR_STATEMENT 6 tag = ( int ) l ; EXPR 7 tag = ( int ) l ASSIGN 8 tag = ( int ) l LVAL 9 tag FIELD 10 tag LEAF_NODE 11 tag ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( int ) l LEAF_NODE 10 ( TYPE_NAME 10 int LEAF_NODE 11 int LEAF_NODE 10 ) FIELD 10 l LEAF_NODE 11 l LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 -- max == 0 EXPR 8 -- max == 0 LEAF_NODE 9 -- FIELD 9 max LEAF_NODE 10 max EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 goto err ; KEYWORD 9 goto LEAF_NODE 10 goto DESTINATION 9 err LEAF_NODE 10 err LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 tag = i ; EXPR 7 tag = i ASSIGN 8 tag = i LVAL 9 tag FIELD 10 tag LEAF_NODE 11 tag ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 7 ; EXPR_STATEMENT 6 p ++ ; EXPR 7 p ++ FIELD 8 p ++ LEAF_NODE 9 p LEAF_NODE 9 ++ LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 -- max == 0 EXPR 8 -- max == 0 LEAF_NODE 9 -- FIELD 9 max LEAF_NODE 10 max EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 goto err ; KEYWORD 9 goto LEAF_NODE 10 goto DESTINATION 9 err LEAF_NODE 10 err LEAF_NODE 9 ; LEAF_NODE 5 } EXPR_STATEMENT 3 * ptag = tag ; EXPR 4 * ptag = tag ASSIGN 5 * ptag = tag LVAL 6 * ptag UNARY_EXPR 7 * ptag UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 ptag LEAF_NODE 9 ptag ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 tag FIELD 7 tag LEAF_NODE 8 tag LEAF_NODE 4 ; EXPR_STATEMENT 3 * pclass = xclass ; EXPR 4 * pclass = xclass ASSIGN 5 * pclass = xclass LVAL 6 * pclass UNARY_EXPR 7 * pclass UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 pclass LEAF_NODE 9 pclass ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 xclass FIELD 7 xclass LEAF_NODE 8 xclass LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! asn1_get_length ( & p , & inf , plength , max ) EXPR 5 ! asn1_get_length ( & p , & inf , plength , max ) UNARY_EXPR 6 ! asn1_get_length ( & p , & inf , plength , max ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 asn1_get_length ( & p , & inf , plength , max ) CALLEE 8 asn1_get_length LEAF_NODE 9 asn1_get_length LEAF_NODE 8 ( ARGUMENT 8 & p UNARY_EXPR 9 & p UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 p LEAF_NODE 11 p LEAF_NODE 8 , ARGUMENT 8 & inf UNARY_EXPR 9 & inf UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 inf LEAF_NODE 11 inf LEAF_NODE 8 , ARGUMENT 8 plength FIELD 9 plength LEAF_NODE 10 plength LEAF_NODE 8 , ARGUMENT 8 max FIELD 9 max LEAF_NODE 10 max LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto err ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 err LEAF_NODE 7 err LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 inf && ! ( ret & V_ASN1_CONSTRUCTED ) EXPR 5 inf && ! ( ret & V_ASN1_CONSTRUCTED ) AND 6 inf && ! ( ret & V_ASN1_CONSTRUCTED ) EXPR 7 inf FIELD 8 inf LEAF_NODE 9 inf LEAF_NODE 7 && EXPR 7 ! ( ret & V_ASN1_CONSTRUCTED ) UNARY_EXPR 8 ! ( ret & V_ASN1_CONSTRUCTED ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! LEAF_NODE 9 ( FIELD 9 ret LEAF_NODE 10 ret LEAF_NODE 9 & FIELD 9 V_ASN1_CONSTRUCTED LEAF_NODE 10 V_ASN1_CONSTRUCTED LEAF_NODE 9 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto err ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 err LEAF_NODE 7 err LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 * plength > ( omax - ( p - * pp ) ) EXPR 5 * plength > ( omax - ( p - * pp ) ) UNARY_EXPR 6 * plength UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 plength LEAF_NODE 8 plength REL_OPERATOR 6 > LEAF_NODE 7 > LEAF_NODE 6 ( FIELD 6 omax LEAF_NODE 7 omax LEAF_NODE 6 - LEAF_NODE 6 ( FIELD 6 p LEAF_NODE 7 p LEAF_NODE 6 - UNARY_EXPR 6 * pp UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 pp LEAF_NODE 8 pp LEAF_NODE 6 ) LEAF_NODE 6 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASN1err ( ASN1_F_ASN1_GET_OBJECT , ASN1_R_TOO_LONG ) ; EXPR 7 ASN1err ( ASN1_F_ASN1_GET_OBJECT , ASN1_R_TOO_LONG ) FUNCTION_CALL 8 ASN1err ( ASN1_F_ASN1_GET_OBJECT , ASN1_R_TOO_LONG ) CALLEE 9 ASN1err LEAF_NODE 10 ASN1err LEAF_NODE 9 ( ARGUMENT 9 ASN1_F_ASN1_GET_OBJECT FIELD 10 ASN1_F_ASN1_GET_OBJECT LEAF_NODE 11 ASN1_F_ASN1_GET_OBJECT LEAF_NODE 9 , ARGUMENT 9 ASN1_R_TOO_LONG FIELD 10 ASN1_R_TOO_LONG LEAF_NODE 11 ASN1_R_TOO_LONG LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ret |= 0x80 ; EXPR 7 ret |= 0x80 ASSIGN 8 ret |= 0x80 LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 |= LEAF_NODE 10 |= RVAL 9 0x80 FIELD 10 0x80 LEAF_NODE 11 0x80 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 * pp = p ; EXPR 4 * pp = p ASSIGN 5 * pp = p LVAL 6 * pp UNARY_EXPR 7 * pp UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 pp LEAF_NODE 9 pp ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 p FIELD 7 p LEAF_NODE 8 p LEAF_NODE 4 ; JUMP_STATEMENT 3 return ret | inf ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ret | inf EXPR 5 ret | inf BIT_OR 6 ret | inf BIT_OR_ELEM 7 ret FIELD 8 ret LEAF_NODE 9 ret LEAF_NODE 7 | BIT_OR_ELEM 7 inf FIELD 8 inf LEAF_NODE 9 inf LEAF_NODE 4 ; LABEL 3 err : LEAF_NODE 4 err LEAF_NODE 4 : EXPR_STATEMENT 3 ASN1err ( ASN1_F_ASN1_GET_OBJECT , ASN1_R_HEADER_TOO_LONG ) ; EXPR 4 ASN1err ( ASN1_F_ASN1_GET_OBJECT , ASN1_R_HEADER_TOO_LONG ) FUNCTION_CALL 5 ASN1err ( ASN1_F_ASN1_GET_OBJECT , ASN1_R_HEADER_TOO_LONG ) CALLEE 6 ASN1err LEAF_NODE 7 ASN1err LEAF_NODE 6 ( ARGUMENT 6 ASN1_F_ASN1_GET_OBJECT FIELD 7 ASN1_F_ASN1_GET_OBJECT LEAF_NODE 8 ASN1_F_ASN1_GET_OBJECT LEAF_NODE 6 , ARGUMENT 6 ASN1_R_HEADER_TOO_LONG FIELD 7 ASN1_R_HEADER_TOO_LONG LEAF_NODE 8 ASN1_R_HEADER_TOO_LONG LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0x80 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0x80 EXPR 5 0x80 FIELD 6 0x80 LEAF_NODE 7 0x80 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 14, "project": "openssl_ast_normal_function_test_8", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ssl_scan_clienthello_tlsext LEAF_NODE 3 ssl_scan_clienthello_tlsext PARAMETER_LIST 2 ( SSL * s , unsigned char * * p , unsigned char * limit , int * al ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * * p TYPE 4 unsigned char * * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 p LEAF_NODE 5 p LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * limit TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 limit LEAF_NODE 5 limit LEAF_NODE 3 , PARAMETER_DECL 3 int * al TYPE 4 int * TYPE_NAME 5 int LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 al LEAF_NODE 5 al LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned short type ; VAR_DECL 4 unsigned short type TYPE 5 unsigned short TYPE_NAME 6 unsigned short LEAF_NODE 7 unsigned LEAF_NODE 7 short NAME 5 type LEAF_NODE 6 type LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned short size ; VAR_DECL 4 unsigned short size TYPE 5 unsigned short TYPE_NAME 6 unsigned short LEAF_NODE 7 unsigned LEAF_NODE 7 short NAME 5 size LEAF_NODE 6 size LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned short len ; VAR_DECL 4 unsigned short len TYPE 5 unsigned short TYPE_NAME 6 unsigned short LEAF_NODE 7 unsigned LEAF_NODE 7 short NAME 5 len LEAF_NODE 6 len LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * data ; data = * p ; VAR_DECL 4 unsigned char * data ; data = * p TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * p ASSIGN 6 data = * p LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * p UNARY_EXPR 8 * p UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 p LEAF_NODE 10 p LEAF_NODE 4 ; SIMPLE_DECL 3 int renegotiate_seen ; renegotiate_seen = 0 ; VAR_DECL 4 int renegotiate_seen ; renegotiate_seen = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 renegotiate_seen LEAF_NODE 6 renegotiate_seen LEAF_NODE 5 ; INIT 5 renegotiate_seen = 0 ASSIGN 6 renegotiate_seen = 0 LVAL 7 renegotiate_seen NAME 8 renegotiate_seen LEAF_NODE 9 renegotiate_seen ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> servername_done = 0 ; EXPR 4 s -> servername_done = 0 ASSIGN 5 s -> servername_done = 0 LVAL 6 s -> servername_done FIELD 7 s -> servername_done LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 servername_done ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> tlsext_status_type = - 1 ; EXPR 4 s -> tlsext_status_type = - 1 ASSIGN 5 s -> tlsext_status_type = - 1 LVAL 6 s -> tlsext_status_type FIELD 7 s -> tlsext_status_type LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 tlsext_status_type ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 - 1 UNARY_EXPR 7 - 1 UNARY_OPERATOR 8 - LEAF_NODE 9 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> s3 -> next_proto_neg_seen = 0 ; EXPR 4 s -> s3 -> next_proto_neg_seen = 0 ASSIGN 5 s -> s3 -> next_proto_neg_seen = 0 LVAL 6 s -> s3 -> next_proto_neg_seen FIELD 7 s -> s3 -> next_proto_neg_seen LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s3 LEAF_NODE 8 -> LEAF_NODE 8 next_proto_neg_seen ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> s3 -> alpn_selected EXPR 5 s -> s3 -> alpn_selected FIELD 6 s -> s3 -> alpn_selected LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 s3 LEAF_NODE 7 -> LEAF_NODE 7 alpn_selected LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 OPENSSL_free ( s -> s3 -> alpn_selected ) ; EXPR 7 OPENSSL_free ( s -> s3 -> alpn_selected ) FUNCTION_CALL 8 OPENSSL_free ( s -> s3 -> alpn_selected ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 s -> s3 -> alpn_selected FIELD 10 s -> s3 -> alpn_selected LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s3 LEAF_NODE 11 -> LEAF_NODE 11 alpn_selected LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> s3 -> alpn_selected = NULL ; EXPR 7 s -> s3 -> alpn_selected = NULL ASSIGN 8 s -> s3 -> alpn_selected = NULL LVAL 9 s -> s3 -> alpn_selected FIELD 10 s -> s3 -> alpn_selected LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s3 LEAF_NODE 11 -> LEAF_NODE 11 alpn_selected ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 s -> s3 -> alpn_selected_len = 0 ; EXPR 4 s -> s3 -> alpn_selected_len = 0 ASSIGN 5 s -> s3 -> alpn_selected_len = 0 LVAL 6 s -> s3 -> alpn_selected_len FIELD 7 s -> s3 -> alpn_selected_len LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s3 LEAF_NODE 8 -> LEAF_NODE 8 alpn_selected_len ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> cert -> alpn_proposed EXPR 5 s -> cert -> alpn_proposed FIELD 6 s -> cert -> alpn_proposed LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 cert LEAF_NODE 7 -> LEAF_NODE 7 alpn_proposed LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 OPENSSL_free ( s -> cert -> alpn_proposed ) ; EXPR 7 OPENSSL_free ( s -> cert -> alpn_proposed ) FUNCTION_CALL 8 OPENSSL_free ( s -> cert -> alpn_proposed ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 s -> cert -> alpn_proposed FIELD 10 s -> cert -> alpn_proposed LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 cert LEAF_NODE 11 -> LEAF_NODE 11 alpn_proposed LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> cert -> alpn_proposed = NULL ; EXPR 7 s -> cert -> alpn_proposed = NULL ASSIGN 8 s -> cert -> alpn_proposed = NULL LVAL 9 s -> cert -> alpn_proposed FIELD 10 s -> cert -> alpn_proposed LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 cert LEAF_NODE 11 -> LEAF_NODE 11 alpn_proposed ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 s -> cert -> alpn_proposed_len = 0 ; EXPR 4 s -> cert -> alpn_proposed_len = 0 ASSIGN 5 s -> cert -> alpn_proposed_len = 0 LVAL 6 s -> cert -> alpn_proposed_len FIELD 7 s -> cert -> alpn_proposed_len LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 cert LEAF_NODE 8 -> LEAF_NODE 8 alpn_proposed_len ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> tlsext_heartbeat &= ~ ( SSL_TLSEXT_HB_ENABLED | SSL_TLSEXT_HB_DONT_SEND_REQUESTS ) ; EXPR 4 s -> tlsext_heartbeat &= ~ ( SSL_TLSEXT_HB_ENABLED | SSL_TLSEXT_HB_DONT_SEND_REQUESTS ) ASSIGN 5 s -> tlsext_heartbeat &= ~ ( SSL_TLSEXT_HB_ENABLED | SSL_TLSEXT_HB_DONT_SEND_REQUESTS ) LVAL 6 s -> tlsext_heartbeat FIELD 7 s -> tlsext_heartbeat LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 tlsext_heartbeat ASSIGN_OP 6 &= LEAF_NODE 7 &= RVAL 6 ~ ( SSL_TLSEXT_HB_ENABLED | SSL_TLSEXT_HB_DONT_SEND_REQUESTS ) UNARY_EXPR 7 ~ ( SSL_TLSEXT_HB_ENABLED | SSL_TLSEXT_HB_DONT_SEND_REQUESTS ) UNARY_OPERATOR 8 ~ LEAF_NODE 9 ~ LEAF_NODE 8 ( BIT_OR 8 SSL_TLSEXT_HB_ENABLED | SSL_TLSEXT_HB_DONT_SEND_REQUESTS BIT_OR_ELEM 9 SSL_TLSEXT_HB_ENABLED FIELD 10 SSL_TLSEXT_HB_ENABLED LEAF_NODE 11 SSL_TLSEXT_HB_ENABLED LEAF_NODE 9 | BIT_OR_ELEM 9 SSL_TLSEXT_HB_DONT_SEND_REQUESTS FIELD 10 SSL_TLSEXT_HB_DONT_SEND_REQUESTS LEAF_NODE 11 SSL_TLSEXT_HB_DONT_SEND_REQUESTS LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> options & SSL_OP_SAFARI_ECDHE_ECDSA_BUG EXPR 5 s -> options & SSL_OP_SAFARI_ECDHE_ECDSA_BUG FIELD 6 s -> options LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 options LEAF_NODE 6 & FIELD 6 SSL_OP_SAFARI_ECDHE_ECDSA_BUG LEAF_NODE 7 SSL_OP_SAFARI_ECDHE_ECDSA_BUG LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 ssl_check_for_safari ( s , data , limit ) ; EXPR 6 ssl_check_for_safari ( s , data , limit ) FUNCTION_CALL 7 ssl_check_for_safari ( s , data , limit ) CALLEE 8 ssl_check_for_safari LEAF_NODE 9 ssl_check_for_safari LEAF_NODE 8 ( ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 , ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 limit FIELD 9 limit LEAF_NODE 10 limit LEAF_NODE 8 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> cert -> peer_sigalgs EXPR 5 s -> cert -> peer_sigalgs FIELD 6 s -> cert -> peer_sigalgs LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 cert LEAF_NODE 7 -> LEAF_NODE 7 peer_sigalgs LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 OPENSSL_free ( s -> cert -> peer_sigalgs ) ; EXPR 7 OPENSSL_free ( s -> cert -> peer_sigalgs ) FUNCTION_CALL 8 OPENSSL_free ( s -> cert -> peer_sigalgs ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 s -> cert -> peer_sigalgs FIELD 10 s -> cert -> peer_sigalgs LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 cert LEAF_NODE 11 -> LEAF_NODE 11 peer_sigalgs LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> cert -> peer_sigalgs = NULL ; EXPR 7 s -> cert -> peer_sigalgs = NULL ASSIGN 8 s -> cert -> peer_sigalgs = NULL LVAL 9 s -> cert -> peer_sigalgs FIELD 10 s -> cert -> peer_sigalgs LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 cert LEAF_NODE 11 -> LEAF_NODE 11 peer_sigalgs ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> srp_ctx . login != NULL EXPR 5 s -> srp_ctx . login != NULL FIELD 6 s -> srp_ctx . login LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 srp_ctx LEAF_NODE 7 . LEAF_NODE 7 login EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 OPENSSL_free ( s -> srp_ctx . login ) ; EXPR 7 OPENSSL_free ( s -> srp_ctx . login ) FUNCTION_CALL 8 OPENSSL_free ( s -> srp_ctx . login ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 s -> srp_ctx . login FIELD 10 s -> srp_ctx . login LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 srp_ctx LEAF_NODE 11 . LEAF_NODE 11 login LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> srp_ctx . login = NULL ; EXPR 7 s -> srp_ctx . login = NULL ASSIGN 8 s -> srp_ctx . login = NULL LVAL 9 s -> srp_ctx . login FIELD 10 s -> srp_ctx . login LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 srp_ctx LEAF_NODE 11 . LEAF_NODE 11 login ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 s -> srtp_profile = NULL ; EXPR 4 s -> srtp_profile = NULL ASSIGN 5 s -> srtp_profile = NULL LVAL 6 s -> srtp_profile FIELD 7 s -> srtp_profile LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 srtp_profile ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 data == limit EXPR 5 data == limit FIELD 6 data LEAF_NODE 7 data EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 limit LEAF_NODE 7 limit LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto ri_check ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 ri_check LEAF_NODE 7 ri_check LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 data > ( limit - 2 ) EXPR 5 data > ( limit - 2 ) FIELD 6 data LEAF_NODE 7 data REL_OPERATOR 6 > LEAF_NODE 7 > LEAF_NODE 6 ( FIELD 6 limit LEAF_NODE 7 limit LEAF_NODE 6 - FIELD 6 2 LEAF_NODE 7 2 LEAF_NODE 6 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto err ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 err LEAF_NODE 7 err LEAF_NODE 6 ; EXPR_STATEMENT 3 n2s ( data , len ) ; EXPR 4 n2s ( data , len ) FUNCTION_CALL 5 n2s ( data , len ) CALLEE 6 n2s LEAF_NODE 7 n2s LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 len FIELD 7 len LEAF_NODE 8 len LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 data + len != limit EXPR 5 data + len != limit FIELD 6 data LEAF_NODE 7 data LEAF_NODE 6 + FIELD 6 len LEAF_NODE 7 len EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 limit LEAF_NODE 7 limit LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto err ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 err LEAF_NODE 7 err LEAF_NODE 6 ; ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 data <= ( limit - 4 ) EXPR 5 data <= ( limit - 4 ) FIELD 6 data LEAF_NODE 7 data REL_OPERATOR 6 <= LEAF_NODE 7 <= LEAF_NODE 6 ( FIELD 6 limit LEAF_NODE 7 limit LEAF_NODE 6 - FIELD 6 4 LEAF_NODE 7 4 LEAF_NODE 6 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 n2s ( data , type ) ; EXPR 7 n2s ( data , type ) FUNCTION_CALL 8 n2s ( data , type ) CALLEE 9 n2s LEAF_NODE 10 n2s LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 type FIELD 10 type LEAF_NODE 11 type LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 n2s ( data , size ) ; EXPR 7 n2s ( data , size ) FUNCTION_CALL 8 n2s ( data , size ) CALLEE 9 n2s LEAF_NODE 10 n2s LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 size FIELD 10 size LEAF_NODE 11 size LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 6 if LEAF_NODE 6 ( LEAF_NODE 6 data LEAF_NODE 6 + LEAF_NODE 6 size LEAF_NODE 6 > LEAF_NODE 6 ( LEAF_NODE 6 limit LEAF_NODE 6 ) LEAF_NODE 6 ) JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; EXPR_STATEMENT 6 fprintf ( stderr , \"Received extension type %d size %d\\n\" , type , size ) ; EXPR 7 fprintf ( stderr , \"Received extension type %d size %d\\n\" , type , size ) FUNCTION_CALL 8 fprintf ( stderr , \"Received extension type %d size %d\\n\" , type , size ) CALLEE 9 fprintf LEAF_NODE 10 fprintf LEAF_NODE 9 ( ARGUMENT 9 stderr FIELD 10 stderr LEAF_NODE 11 stderr LEAF_NODE 9 , ARGUMENT 9 \"Received extension type %d size %d\\n\" FIELD 10 \"Received extension type %d size %d\\n\" LEAF_NODE 11 \"Received extension type %d size %d\\n\" LEAF_NODE 9 , ARGUMENT 9 type FIELD 10 type LEAF_NODE 11 type LEAF_NODE 9 , ARGUMENT 9 size FIELD 10 size LEAF_NODE 11 size LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> tlsext_debug_cb EXPR 8 s -> tlsext_debug_cb FIELD 9 s -> tlsext_debug_cb LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 tlsext_debug_cb LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 s -> tlsext_debug_cb ( s , 0 , type , data , size , s -> tlsext_debug_arg ) ; EXPR 9 s -> tlsext_debug_cb ( s , 0 , type , data , size , s -> tlsext_debug_arg ) FUNCTION_CALL 10 s -> tlsext_debug_cb ( s , 0 , type , data , size , s -> tlsext_debug_arg ) CALLEE 11 s -> tlsext_debug_cb LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 tlsext_debug_cb LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 , ARGUMENT 11 type FIELD 12 type LEAF_NODE 13 type LEAF_NODE 11 , ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 , ARGUMENT 11 size FIELD 12 size LEAF_NODE 13 size LEAF_NODE 11 , ARGUMENT 11 s -> tlsext_debug_arg FIELD 12 s -> tlsext_debug_arg LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 tlsext_debug_arg LEAF_NODE 11 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 type == TLSEXT_TYPE_server_name EXPR 8 type == TLSEXT_TYPE_server_name FIELD 9 type LEAF_NODE 10 type EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 TLSEXT_TYPE_server_name LEAF_NODE 10 TLSEXT_TYPE_server_name LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SIMPLE_DECL 9 unsigned char * sdata ; VAR_DECL 10 unsigned char * sdata TYPE 11 unsigned char * TYPE_NAME 12 unsigned char LEAF_NODE 13 unsigned LEAF_NODE 13 char POINTER 12 * LEAF_NODE 13 * NAME 11 sdata LEAF_NODE 12 sdata LEAF_NODE 10 ; SIMPLE_DECL 9 int servname_type ; VAR_DECL 10 int servname_type TYPE 11 int TYPE_NAME 12 int LEAF_NODE 13 int NAME 11 servname_type LEAF_NODE 12 servname_type LEAF_NODE 10 ; SIMPLE_DECL 9 int dsize ; VAR_DECL 10 int dsize TYPE 11 int TYPE_NAME 12 int LEAF_NODE 13 int NAME 11 dsize LEAF_NODE 12 dsize LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 size < 2 EXPR 11 size < 2 FIELD 12 size LEAF_NODE 13 size REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 2 LEAF_NODE 13 2 LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 goto err ; KEYWORD 12 goto LEAF_NODE 13 goto DESTINATION 12 err LEAF_NODE 13 err LEAF_NODE 12 ; EXPR_STATEMENT 9 n2s ( data , dsize ) ; EXPR 10 n2s ( data , dsize ) FUNCTION_CALL 11 n2s ( data , dsize ) CALLEE 12 n2s LEAF_NODE 13 n2s LEAF_NODE 12 ( ARGUMENT 12 data FIELD 13 data LEAF_NODE 14 data LEAF_NODE 12 , ARGUMENT 12 dsize FIELD 13 dsize LEAF_NODE 14 dsize LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 size -= 2 ; EXPR 10 size -= 2 ASSIGN 11 size -= 2 LVAL 12 size FIELD 13 size LEAF_NODE 14 size ASSIGN_OP 12 -= LEAF_NODE 13 -= RVAL 12 2 FIELD 13 2 LEAF_NODE 14 2 LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 dsize > size EXPR 11 dsize > size FIELD 12 dsize LEAF_NODE 13 dsize REL_OPERATOR 12 > LEAF_NODE 13 > FIELD 12 size LEAF_NODE 13 size LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 goto err ; KEYWORD 12 goto LEAF_NODE 13 goto DESTINATION 12 err LEAF_NODE 13 err LEAF_NODE 12 ; EXPR_STATEMENT 9 sdata = data ; EXPR 10 sdata = data ASSIGN 11 sdata = data LVAL 12 sdata FIELD 13 sdata LEAF_NODE 14 sdata ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 data FIELD 13 data LEAF_NODE 14 data LEAF_NODE 10 ; ITERATION 9 KEYWORD 10 while LEAF_NODE 11 while LEAF_NODE 10 ( CONDITION 10 dsize > 3 EXPR 11 dsize > 3 FIELD 12 dsize LEAF_NODE 13 dsize REL_OPERATOR 12 > LEAF_NODE 13 > FIELD 12 3 LEAF_NODE 13 3 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 servname_type = * ( sdata ++ ) ; EXPR 13 servname_type = * ( sdata ++ ) ASSIGN 14 servname_type = * ( sdata ++ ) LVAL 15 servname_type FIELD 16 servname_type LEAF_NODE 17 servname_type ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 * ( sdata ++ ) UNARY_EXPR 16 * ( sdata ++ ) UNARY_OPERATOR 17 * LEAF_NODE 18 * LEAF_NODE 17 ( FIELD 17 sdata ++ LEAF_NODE 18 sdata LEAF_NODE 18 ++ LEAF_NODE 17 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 n2s ( sdata , len ) ; EXPR 13 n2s ( sdata , len ) FUNCTION_CALL 14 n2s ( sdata , len ) CALLEE 15 n2s LEAF_NODE 16 n2s LEAF_NODE 15 ( ARGUMENT 15 sdata FIELD 16 sdata LEAF_NODE 17 sdata LEAF_NODE 15 , ARGUMENT 15 len FIELD 16 len LEAF_NODE 17 len LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 dsize -= 3 ; EXPR 13 dsize -= 3 ASSIGN 14 dsize -= 3 LVAL 15 dsize FIELD 16 dsize LEAF_NODE 17 dsize ASSIGN_OP 15 -= LEAF_NODE 16 -= RVAL 15 3 FIELD 16 3 LEAF_NODE 17 3 LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 len > dsize EXPR 14 len > dsize FIELD 15 len LEAF_NODE 16 len REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 dsize LEAF_NODE 16 dsize LEAF_NODE 13 ) STATEMENTS 13 JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 s -> servername_done == 0 EXPR 14 s -> servername_done == 0 FIELD 15 s -> servername_done LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 servername_done EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 13 ) STATEMENTS 13 SELECTION 14 KEYWORD 15 switch LEAF_NODE 16 switch LEAF_NODE 15 ( CONDITION 15 servname_type EXPR 16 servname_type FIELD 17 servname_type LEAF_NODE 18 servname_type LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 LABEL 17 case TLSEXT_NAMETYPE_host_name : LEAF_NODE 18 case LEAF_NODE 18 TLSEXT_NAMETYPE_host_name LEAF_NODE 18 : SELECTION 17 KEYWORD 18 if LEAF_NODE 19 if LEAF_NODE 18 ( CONDITION 18 ! s -> hit EXPR 19 ! s -> hit UNARY_EXPR 20 ! s -> hit UNARY_OPERATOR 21 ! LEAF_NODE 22 ! FIELD 21 s -> hit LEAF_NODE 22 s LEAF_NODE 22 -> LEAF_NODE 22 hit LEAF_NODE 18 ) STATEMENTS 18 LEAF_NODE 19 { STATEMENTS 19 SELECTION 20 KEYWORD 21 if LEAF_NODE 22 if LEAF_NODE 21 ( CONDITION 21 s -> session -> tlsext_hostname EXPR 22 s -> session -> tlsext_hostname FIELD 23 s -> session -> tlsext_hostname LEAF_NODE 24 s LEAF_NODE 24 -> LEAF_NODE 24 session LEAF_NODE 24 -> LEAF_NODE 24 tlsext_hostname LEAF_NODE 21 ) STATEMENTS 21 JUMP_STATEMENT 22 goto err ; KEYWORD 23 goto LEAF_NODE 24 goto DESTINATION 23 err LEAF_NODE 24 err LEAF_NODE 23 ; SELECTION 20 KEYWORD 21 if LEAF_NODE 22 if LEAF_NODE 21 ( CONDITION 21 len > TLSEXT_MAXLEN_host_name EXPR 22 len > TLSEXT_MAXLEN_host_name FIELD 23 len LEAF_NODE 24 len REL_OPERATOR 23 > LEAF_NODE 24 > FIELD 23 TLSEXT_MAXLEN_host_name LEAF_NODE 24 TLSEXT_MAXLEN_host_name LEAF_NODE 21 ) STATEMENTS 21 LEAF_NODE 22 { STATEMENTS 22 EXPR_STATEMENT 23 * al = TLS1_AD_UNRECOGNIZED_NAME ; EXPR 24 * al = TLS1_AD_UNRECOGNIZED_NAME ASSIGN 25 * al = TLS1_AD_UNRECOGNIZED_NAME LVAL 26 * al UNARY_EXPR 27 * al UNARY_OPERATOR 28 * LEAF_NODE 29 * FIELD 28 al LEAF_NODE 29 al ASSIGN_OP 26 = LEAF_NODE 27 = RVAL 26 TLS1_AD_UNRECOGNIZED_NAME FIELD 27 TLS1_AD_UNRECOGNIZED_NAME LEAF_NODE 28 TLS1_AD_UNRECOGNIZED_NAME LEAF_NODE 24 ; JUMP_STATEMENT 23 return 0 ; KEYWORD 24 return LEAF_NODE 25 return DESTINATION 24 0 EXPR 25 0 FIELD 26 0 LEAF_NODE 27 0 LEAF_NODE 24 ; LEAF_NODE 22 } SELECTION 20 KEYWORD 21 if LEAF_NODE 22 if LEAF_NODE 21 ( CONDITION 21 ( s -> session -> tlsext_hostname = OPENSSL_malloc ( len + 1 ) ) == NULL EXPR 22 ( s -> session -> tlsext_hostname = OPENSSL_malloc ( len + 1 ) ) == NULL LEAF_NODE 23 ( ASSIGN 23 s -> session -> tlsext_hostname = OPENSSL_malloc ( len + 1 ) LVAL 24 s -> session -> tlsext_hostname FIELD 25 s -> session -> tlsext_hostname LEAF_NODE 26 s LEAF_NODE 26 -> LEAF_NODE 26 session LEAF_NODE 26 -> LEAF_NODE 26 tlsext_hostname ASSIGN_OP 24 = LEAF_NODE 25 = RVAL 24 OPENSSL_malloc ( len + 1 ) FUNCTION_CALL 25 OPENSSL_malloc ( len + 1 ) CALLEE 26 OPENSSL_malloc LEAF_NODE 27 OPENSSL_malloc LEAF_NODE 26 ( ARGUMENT 26 len + 1 FIELD 27 len LEAF_NODE 28 len LEAF_NODE 27 + FIELD 27 1 LEAF_NODE 28 1 LEAF_NODE 26 ) LEAF_NODE 23 ) EQ_OPERATOR 23 == LEAF_NODE 24 == FIELD 23 NULL LEAF_NODE 24 NULL LEAF_NODE 21 ) STATEMENTS 21 LEAF_NODE 22 { STATEMENTS 22 EXPR_STATEMENT 23 * al = TLS1_AD_INTERNAL_ERROR ; EXPR 24 * al = TLS1_AD_INTERNAL_ERROR ASSIGN 25 * al = TLS1_AD_INTERNAL_ERROR LVAL 26 * al UNARY_EXPR 27 * al UNARY_OPERATOR 28 * LEAF_NODE 29 * FIELD 28 al LEAF_NODE 29 al ASSIGN_OP 26 = LEAF_NODE 27 = RVAL 26 TLS1_AD_INTERNAL_ERROR FIELD 27 TLS1_AD_INTERNAL_ERROR LEAF_NODE 28 TLS1_AD_INTERNAL_ERROR LEAF_NODE 24 ; JUMP_STATEMENT 23 return 0 ; KEYWORD 24 return LEAF_NODE 25 return DESTINATION 24 0 EXPR 25 0 FIELD 26 0 LEAF_NODE 27 0 LEAF_NODE 24 ; LEAF_NODE 22 } EXPR_STATEMENT 20 memcpy ( s -> session -> tlsext_hostname , sdata , len ) ; EXPR 21 memcpy ( s -> session -> tlsext_hostname , sdata , len ) FUNCTION_CALL 22 memcpy ( s -> session -> tlsext_hostname , sdata , len ) CALLEE 23 memcpy LEAF_NODE 24 memcpy LEAF_NODE 23 ( ARGUMENT 23 s -> session -> tlsext_hostname FIELD 24 s -> session -> tlsext_hostname LEAF_NODE 25 s LEAF_NODE 25 -> LEAF_NODE 25 session LEAF_NODE 25 -> LEAF_NODE 25 tlsext_hostname LEAF_NODE 23 , ARGUMENT 23 sdata FIELD 24 sdata LEAF_NODE 25 sdata LEAF_NODE 23 , ARGUMENT 23 len FIELD 24 len LEAF_NODE 25 len LEAF_NODE 23 ) LEAF_NODE 21 ; EXPR_STATEMENT 20 s -> session -> tlsext_hostname [ len ] = '\\0' ; EXPR 21 s -> session -> tlsext_hostname [ len ] = '\\0' ASSIGN 22 s -> session -> tlsext_hostname [ len ] = '\\0' LVAL 23 s -> session -> tlsext_hostname [ len ] FIELD 24 s -> session -> tlsext_hostname [ len ] LEAF_NODE 25 s LEAF_NODE 25 -> LEAF_NODE 25 session LEAF_NODE 25 -> LEAF_NODE 25 tlsext_hostname LEAF_NODE 25 [ EXPR 25 len FIELD 26 len LEAF_NODE 27 len LEAF_NODE 25 ] ASSIGN_OP 23 = LEAF_NODE 24 = RVAL 23 '\\0' FIELD 24 '\\0' LEAF_NODE 25 '\\0' LEAF_NODE 21 ; SELECTION 20 KEYWORD 21 if LEAF_NODE 22 if LEAF_NODE 21 ( CONDITION 21 strlen ( s -> session -> tlsext_hostname ) != len EXPR 22 strlen ( s -> session -> tlsext_hostname ) != len FUNCTION_CALL 23 strlen ( s -> session -> tlsext_hostname ) CALLEE 24 strlen LEAF_NODE 25 strlen LEAF_NODE 24 ( ARGUMENT 24 s -> session -> tlsext_hostname FIELD 25 s -> session -> tlsext_hostname LEAF_NODE 26 s LEAF_NODE 26 -> LEAF_NODE 26 session LEAF_NODE 26 -> LEAF_NODE 26 tlsext_hostname LEAF_NODE 24 ) EQ_OPERATOR 23 != LEAF_NODE 24 != FIELD 23 len LEAF_NODE 24 len LEAF_NODE 21 ) STATEMENTS 21 LEAF_NODE 22 { STATEMENTS 22 EXPR_STATEMENT 23 OPENSSL_free ( s -> session -> tlsext_hostname ) ; EXPR 24 OPENSSL_free ( s -> session -> tlsext_hostname ) FUNCTION_CALL 25 OPENSSL_free ( s -> session -> tlsext_hostname ) CALLEE 26 OPENSSL_free LEAF_NODE 27 OPENSSL_free LEAF_NODE 26 ( ARGUMENT 26 s -> session -> tlsext_hostname FIELD 27 s -> session -> tlsext_hostname LEAF_NODE 28 s LEAF_NODE 28 -> LEAF_NODE 28 session LEAF_NODE 28 -> LEAF_NODE 28 tlsext_hostname LEAF_NODE 26 ) LEAF_NODE 24 ; EXPR_STATEMENT 23 s -> session -> tlsext_hostname = NULL ; EXPR 24 s -> session -> tlsext_hostname = NULL ASSIGN 25 s -> session -> tlsext_hostname = NULL LVAL 26 s -> session -> tlsext_hostname FIELD 27 s -> session -> tlsext_hostname LEAF_NODE 28 s LEAF_NODE 28 -> LEAF_NODE 28 session LEAF_NODE 28 -> LEAF_NODE 28 tlsext_hostname ASSIGN_OP 26 = LEAF_NODE 27 = RVAL 26 NULL FIELD 27 NULL LEAF_NODE 28 NULL LEAF_NODE 24 ; EXPR_STATEMENT 23 * al = TLS1_AD_UNRECOGNIZED_NAME ; EXPR 24 * al = TLS1_AD_UNRECOGNIZED_NAME ASSIGN 25 * al = TLS1_AD_UNRECOGNIZED_NAME LVAL 26 * al UNARY_EXPR 27 * al UNARY_OPERATOR 28 * LEAF_NODE 29 * FIELD 28 al LEAF_NODE 29 al ASSIGN_OP 26 = LEAF_NODE 27 = RVAL 26 TLS1_AD_UNRECOGNIZED_NAME FIELD 27 TLS1_AD_UNRECOGNIZED_NAME LEAF_NODE 28 TLS1_AD_UNRECOGNIZED_NAME LEAF_NODE 24 ; JUMP_STATEMENT 23 return 0 ; KEYWORD 24 return LEAF_NODE 25 return DESTINATION 24 0 EXPR 25 0 FIELD 26 0 LEAF_NODE 27 0 LEAF_NODE 24 ; LEAF_NODE 22 } EXPR_STATEMENT 20 s -> servername_done = 1 ; EXPR 21 s -> servername_done = 1 ASSIGN 22 s -> servername_done = 1 LVAL 23 s -> servername_done FIELD 24 s -> servername_done LEAF_NODE 25 s LEAF_NODE 25 -> LEAF_NODE 25 servername_done ASSIGN_OP 23 = LEAF_NODE 24 = RVAL 23 1 FIELD 24 1 LEAF_NODE 25 1 LEAF_NODE 21 ; LEAF_NODE 19 } SELECTION 17 KEYWORD 18 else LEAF_NODE 19 else STATEMENTS 18 EXPR_STATEMENT 19 s -> servername_done = s -> session -> tlsext_hostname && strlen ( s -> session -> tlsext_hostname ) == len && strncmp ( s -> session -> tlsext_hostname , ( char * ) sdata , len ) == 0 ; EXPR 20 s -> servername_done = s -> session -> tlsext_hostname && strlen ( s -> session -> tlsext_hostname ) == len && strncmp ( s -> session -> tlsext_hostname , ( char * ) sdata , len ) == 0 ASSIGN 21 s -> servername_done = s -> session -> tlsext_hostname && strlen ( s -> session -> tlsext_hostname ) == len && strncmp ( s -> session -> tlsext_hostname , ( char * ) sdata , len ) == 0 LVAL 22 s -> servername_done FIELD 23 s -> servername_done LEAF_NODE 24 s LEAF_NODE 24 -> LEAF_NODE 24 servername_done ASSIGN_OP 22 = LEAF_NODE 23 = RVAL 22 s -> session -> tlsext_hostname && strlen ( s -> session -> tlsext_hostname ) == len && strncmp ( s -> session -> tlsext_hostname , ( char * ) sdata , len ) == 0 AND 23 s -> session -> tlsext_hostname && strlen ( s -> session -> tlsext_hostname ) == len && strncmp ( s -> session -> tlsext_hostname , ( char * ) sdata , len ) == 0 EXPR 24 s -> session -> tlsext_hostname FIELD 25 s -> session -> tlsext_hostname LEAF_NODE 26 s LEAF_NODE 26 -> LEAF_NODE 26 session LEAF_NODE 26 -> LEAF_NODE 26 tlsext_hostname LEAF_NODE 24 && EXPR 24 strlen ( s -> session -> tlsext_hostname ) == len && strncmp ( s -> session -> tlsext_hostname , ( char * ) sdata , len ) == 0 AND 25 strlen ( s -> session -> tlsext_hostname ) == len && strncmp ( s -> session -> tlsext_hostname , ( char * ) sdata , len ) == 0 EXPR 26 strlen ( s -> session -> tlsext_hostname ) == len FUNCTION_CALL 27 strlen ( s -> session -> tlsext_hostname ) CALLEE 28 strlen LEAF_NODE 29 strlen LEAF_NODE 28 ( ARGUMENT 28 s -> session -> tlsext_hostname FIELD 29 s -> session -> tlsext_hostname LEAF_NODE 30 s LEAF_NODE 30 -> LEAF_NODE 30 session LEAF_NODE 30 -> LEAF_NODE 30 tlsext_hostname LEAF_NODE 28 ) EQ_OPERATOR 27 == LEAF_NODE 28 == FIELD 27 len LEAF_NODE 28 len LEAF_NODE 26 && EXPR 26 strncmp ( s -> session -> tlsext_hostname , ( char * ) sdata , len ) == 0 FUNCTION_CALL 27 strncmp ( s -> session -> tlsext_hostname , ( char * ) sdata , len ) CALLEE 28 strncmp LEAF_NODE 29 strncmp LEAF_NODE 28 ( ARGUMENT 28 s -> session -> tlsext_hostname FIELD 29 s -> session -> tlsext_hostname LEAF_NODE 30 s LEAF_NODE 30 -> LEAF_NODE 30 session LEAF_NODE 30 -> LEAF_NODE 30 tlsext_hostname LEAF_NODE 28 , ARGUMENT 28 ( char * ) sdata LEAF_NODE 29 ( TYPE_NAME 29 char LEAF_NODE 30 char LEAF_NODE 29 * LEAF_NODE 29 ) FIELD 29 sdata LEAF_NODE 30 sdata LEAF_NODE 28 , ARGUMENT 28 len FIELD 29 len LEAF_NODE 30 len LEAF_NODE 28 ) EQ_OPERATOR 27 == LEAF_NODE 28 == FIELD 27 0 LEAF_NODE 28 0 LEAF_NODE 20 ; JUMP_STATEMENT 17 break DESTINATION ; KEYWORD 18 break LEAF_NODE 19 break LEAF_NODE 18 DESTINATION LEAF_NODE 18 ; LABEL 17 default : LEAF_NODE 18 default LEAF_NODE 18 : JUMP_STATEMENT 17 break DESTINATION ; KEYWORD 18 break LEAF_NODE 19 break LEAF_NODE 18 DESTINATION LEAF_NODE 18 ; LEAF_NODE 16 } EXPR_STATEMENT 12 dsize -= len ; EXPR 13 dsize -= len ASSIGN 14 dsize -= len LVAL 15 dsize FIELD 16 dsize LEAF_NODE 17 dsize ASSIGN_OP 15 -= LEAF_NODE 16 -= RVAL 15 len FIELD 16 len LEAF_NODE 17 len LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 dsize != 0 EXPR 11 dsize != 0 FIELD 12 dsize LEAF_NODE 13 dsize EQ_OPERATOR 12 != LEAF_NODE 13 != FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 goto err ; KEYWORD 12 goto LEAF_NODE 13 goto DESTINATION 12 err LEAF_NODE 13 err LEAF_NODE 12 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 type == TLSEXT_TYPE_srp EXPR 10 type == TLSEXT_TYPE_srp FIELD 11 type LEAF_NODE 12 type EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 TLSEXT_TYPE_srp LEAF_NODE 12 TLSEXT_TYPE_srp LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 size == 0 || ( ( len = data [ 0 ] ) ) != ( size - 1 ) EXPR 13 size == 0 || ( ( len = data [ 0 ] ) ) != ( size - 1 ) OR 14 size == 0 || ( ( len = data [ 0 ] ) ) != ( size - 1 ) EXPR 15 size == 0 FIELD 16 size LEAF_NODE 17 size EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 || EXPR 15 ( ( len = data [ 0 ] ) ) != ( size - 1 ) LEAF_NODE 16 ( LEAF_NODE 16 ( ASSIGN 16 len = data [ 0 ] LVAL 17 len FIELD 18 len LEAF_NODE 19 len ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 data [ 0 ] FIELD 18 data [ 0 ] LEAF_NODE 19 data LEAF_NODE 19 [ EXPR 19 0 FIELD 20 0 LEAF_NODE 21 0 LEAF_NODE 19 ] LEAF_NODE 16 ) LEAF_NODE 16 ) EQ_OPERATOR 16 != LEAF_NODE 17 != LEAF_NODE 16 ( FIELD 16 size LEAF_NODE 17 size LEAF_NODE 16 - FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 16 ) LEAF_NODE 12 ) STATEMENTS 12 JUMP_STATEMENT 13 goto err ; KEYWORD 14 goto LEAF_NODE 15 goto DESTINATION 14 err LEAF_NODE 15 err LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> srp_ctx . login != NULL EXPR 13 s -> srp_ctx . login != NULL FIELD 14 s -> srp_ctx . login LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 srp_ctx LEAF_NODE 15 . LEAF_NODE 15 login EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 JUMP_STATEMENT 13 goto err ; KEYWORD 14 goto LEAF_NODE 15 goto DESTINATION 14 err LEAF_NODE 15 err LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ( s -> srp_ctx . login = OPENSSL_malloc ( len + 1 ) ) == NULL EXPR 13 ( s -> srp_ctx . login = OPENSSL_malloc ( len + 1 ) ) == NULL LEAF_NODE 14 ( ASSIGN 14 s -> srp_ctx . login = OPENSSL_malloc ( len + 1 ) LVAL 15 s -> srp_ctx . login FIELD 16 s -> srp_ctx . login LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 srp_ctx LEAF_NODE 17 . LEAF_NODE 17 login ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 OPENSSL_malloc ( len + 1 ) FUNCTION_CALL 16 OPENSSL_malloc ( len + 1 ) CALLEE 17 OPENSSL_malloc LEAF_NODE 18 OPENSSL_malloc LEAF_NODE 17 ( ARGUMENT 17 len + 1 FIELD 18 len LEAF_NODE 19 len LEAF_NODE 18 + FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 17 ) LEAF_NODE 14 ) EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 JUMP_STATEMENT 13 return - 1 ; KEYWORD 14 return LEAF_NODE 15 return DESTINATION 14 - 1 EXPR 15 - 1 UNARY_EXPR 16 - 1 UNARY_OPERATOR 17 - LEAF_NODE 18 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 14 ; EXPR_STATEMENT 11 memcpy ( s -> srp_ctx . login , & data [ 1 ] , len ) ; EXPR 12 memcpy ( s -> srp_ctx . login , & data [ 1 ] , len ) FUNCTION_CALL 13 memcpy ( s -> srp_ctx . login , & data [ 1 ] , len ) CALLEE 14 memcpy LEAF_NODE 15 memcpy LEAF_NODE 14 ( ARGUMENT 14 s -> srp_ctx . login FIELD 15 s -> srp_ctx . login LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 srp_ctx LEAF_NODE 16 . LEAF_NODE 16 login LEAF_NODE 14 , ARGUMENT 14 & data [ 1 ] UNARY_EXPR 15 & data [ 1 ] UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 data [ 1 ] LEAF_NODE 17 data LEAF_NODE 17 [ EXPR 17 1 FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 17 ] LEAF_NODE 14 , ARGUMENT 14 len FIELD 15 len LEAF_NODE 16 len LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 s -> srp_ctx . login [ len ] = '\\0' ; EXPR 12 s -> srp_ctx . login [ len ] = '\\0' ASSIGN 13 s -> srp_ctx . login [ len ] = '\\0' LVAL 14 s -> srp_ctx . login [ len ] FIELD 15 s -> srp_ctx . login [ len ] LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 srp_ctx LEAF_NODE 16 . LEAF_NODE 16 login LEAF_NODE 16 [ EXPR 16 len FIELD 17 len LEAF_NODE 18 len LEAF_NODE 16 ] ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 '\\0' FIELD 15 '\\0' LEAF_NODE 16 '\\0' LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 strlen ( s -> srp_ctx . login ) != len EXPR 13 strlen ( s -> srp_ctx . login ) != len FUNCTION_CALL 14 strlen ( s -> srp_ctx . login ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 s -> srp_ctx . login FIELD 16 s -> srp_ctx . login LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 srp_ctx LEAF_NODE 17 . LEAF_NODE 17 login LEAF_NODE 15 ) EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 len LEAF_NODE 15 len LEAF_NODE 12 ) STATEMENTS 12 JUMP_STATEMENT 13 goto err ; KEYWORD 14 goto LEAF_NODE 15 goto DESTINATION 14 err LEAF_NODE 15 err LEAF_NODE 14 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 type == TLSEXT_TYPE_ec_point_formats EXPR 10 type == TLSEXT_TYPE_ec_point_formats FIELD 11 type LEAF_NODE 12 type EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 TLSEXT_TYPE_ec_point_formats LEAF_NODE 12 TLSEXT_TYPE_ec_point_formats LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SIMPLE_DECL 11 unsigned char * sdata ; sdata = data ; VAR_DECL 12 unsigned char * sdata ; sdata = data TYPE 13 unsigned char * TYPE_NAME 14 unsigned char LEAF_NODE 15 unsigned LEAF_NODE 15 char POINTER 14 * LEAF_NODE 15 * NAME 13 sdata LEAF_NODE 14 sdata LEAF_NODE 13 ; INIT 13 sdata = data ASSIGN 14 sdata = data LVAL 15 sdata NAME 16 sdata LEAF_NODE 17 sdata ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 12 ; SIMPLE_DECL 11 int ecpointformatlist_length ; ecpointformatlist_length = * ( sdata ++ ) ; VAR_DECL 12 int ecpointformatlist_length ; ecpointformatlist_length = * ( sdata ++ ) TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 ecpointformatlist_length LEAF_NODE 14 ecpointformatlist_length LEAF_NODE 13 ; INIT 13 ecpointformatlist_length = * ( sdata ++ ) ASSIGN 14 ecpointformatlist_length = * ( sdata ++ ) LVAL 15 ecpointformatlist_length NAME 16 ecpointformatlist_length LEAF_NODE 17 ecpointformatlist_length ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 * ( sdata ++ ) UNARY_EXPR 16 * ( sdata ++ ) UNARY_OPERATOR 17 * LEAF_NODE 18 * LEAF_NODE 17 ( FIELD 17 sdata ++ LEAF_NODE 18 sdata LEAF_NODE 18 ++ LEAF_NODE 17 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ecpointformatlist_length != size - 1 || ecpointformatlist_length < 1 EXPR 13 ecpointformatlist_length != size - 1 || ecpointformatlist_length < 1 OR 14 ecpointformatlist_length != size - 1 || ecpointformatlist_length < 1 EXPR 15 ecpointformatlist_length != size - 1 FIELD 16 ecpointformatlist_length LEAF_NODE 17 ecpointformatlist_length EQ_OPERATOR 16 != LEAF_NODE 17 != FIELD 16 size LEAF_NODE 17 size LEAF_NODE 16 - FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 15 || EXPR 15 ecpointformatlist_length < 1 FIELD 16 ecpointformatlist_length LEAF_NODE 17 ecpointformatlist_length REL_OPERATOR 16 < LEAF_NODE 17 < FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 12 ) STATEMENTS 12 JUMP_STATEMENT 13 goto err ; KEYWORD 14 goto LEAF_NODE 15 goto DESTINATION 14 err LEAF_NODE 15 err LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ! s -> hit EXPR 13 ! s -> hit UNARY_EXPR 14 ! s -> hit UNARY_OPERATOR 15 ! LEAF_NODE 16 ! FIELD 15 s -> hit LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 hit LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 s -> session -> tlsext_ecpointformatlist EXPR 16 s -> session -> tlsext_ecpointformatlist FIELD 17 s -> session -> tlsext_ecpointformatlist LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 session LEAF_NODE 18 -> LEAF_NODE 18 tlsext_ecpointformatlist LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 EXPR_STATEMENT 17 OPENSSL_free ( s -> session -> tlsext_ecpointformatlist ) ; EXPR 18 OPENSSL_free ( s -> session -> tlsext_ecpointformatlist ) FUNCTION_CALL 19 OPENSSL_free ( s -> session -> tlsext_ecpointformatlist ) CALLEE 20 OPENSSL_free LEAF_NODE 21 OPENSSL_free LEAF_NODE 20 ( ARGUMENT 20 s -> session -> tlsext_ecpointformatlist FIELD 21 s -> session -> tlsext_ecpointformatlist LEAF_NODE 22 s LEAF_NODE 22 -> LEAF_NODE 22 session LEAF_NODE 22 -> LEAF_NODE 22 tlsext_ecpointformatlist LEAF_NODE 20 ) LEAF_NODE 18 ; EXPR_STATEMENT 17 s -> session -> tlsext_ecpointformatlist = NULL ; EXPR 18 s -> session -> tlsext_ecpointformatlist = NULL ASSIGN 19 s -> session -> tlsext_ecpointformatlist = NULL LVAL 20 s -> session -> tlsext_ecpointformatlist FIELD 21 s -> session -> tlsext_ecpointformatlist LEAF_NODE 22 s LEAF_NODE 22 -> LEAF_NODE 22 session LEAF_NODE 22 -> LEAF_NODE 22 tlsext_ecpointformatlist ASSIGN_OP 20 = LEAF_NODE 21 = RVAL 20 NULL FIELD 21 NULL LEAF_NODE 22 NULL LEAF_NODE 18 ; LEAF_NODE 16 } EXPR_STATEMENT 14 s -> session -> tlsext_ecpointformatlist_length = 0 ; EXPR 15 s -> session -> tlsext_ecpointformatlist_length = 0 ASSIGN 16 s -> session -> tlsext_ecpointformatlist_length = 0 LVAL 17 s -> session -> tlsext_ecpointformatlist_length FIELD 18 s -> session -> tlsext_ecpointformatlist_length LEAF_NODE 19 s LEAF_NODE 19 -> LEAF_NODE 19 session LEAF_NODE 19 -> LEAF_NODE 19 tlsext_ecpointformatlist_length ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 0 FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 15 ; SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 ( s -> session -> tlsext_ecpointformatlist = OPENSSL_malloc ( ecpointformatlist_length ) ) == NULL EXPR 16 ( s -> session -> tlsext_ecpointformatlist = OPENSSL_malloc ( ecpointformatlist_length ) ) == NULL LEAF_NODE 17 ( ASSIGN 17 s -> session -> tlsext_ecpointformatlist = OPENSSL_malloc ( ecpointformatlist_length ) LVAL 18 s -> session -> tlsext_ecpointformatlist FIELD 19 s -> session -> tlsext_ecpointformatlist LEAF_NODE 20 s LEAF_NODE 20 -> LEAF_NODE 20 session LEAF_NODE 20 -> LEAF_NODE 20 tlsext_ecpointformatlist ASSIGN_OP 18 = LEAF_NODE 19 = RVAL 18 OPENSSL_malloc ( ecpointformatlist_length ) FUNCTION_CALL 19 OPENSSL_malloc ( ecpointformatlist_length ) CALLEE 20 OPENSSL_malloc LEAF_NODE 21 OPENSSL_malloc LEAF_NODE 20 ( ARGUMENT 20 ecpointformatlist_length FIELD 21 ecpointformatlist_length LEAF_NODE 22 ecpointformatlist_length LEAF_NODE 20 ) LEAF_NODE 17 ) EQ_OPERATOR 17 == LEAF_NODE 18 == FIELD 17 NULL LEAF_NODE 18 NULL LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 EXPR_STATEMENT 17 * al = TLS1_AD_INTERNAL_ERROR ; EXPR 18 * al = TLS1_AD_INTERNAL_ERROR ASSIGN 19 * al = TLS1_AD_INTERNAL_ERROR LVAL 20 * al UNARY_EXPR 21 * al UNARY_OPERATOR 22 * LEAF_NODE 23 * FIELD 22 al LEAF_NODE 23 al ASSIGN_OP 20 = LEAF_NODE 21 = RVAL 20 TLS1_AD_INTERNAL_ERROR FIELD 21 TLS1_AD_INTERNAL_ERROR LEAF_NODE 22 TLS1_AD_INTERNAL_ERROR LEAF_NODE 18 ; JUMP_STATEMENT 17 return 0 ; KEYWORD 18 return LEAF_NODE 19 return DESTINATION 18 0 EXPR 19 0 FIELD 20 0 LEAF_NODE 21 0 LEAF_NODE 18 ; LEAF_NODE 16 } EXPR_STATEMENT 14 s -> session -> tlsext_ecpointformatlist_length = ecpointformatlist_length ; EXPR 15 s -> session -> tlsext_ecpointformatlist_length = ecpointformatlist_length ASSIGN 16 s -> session -> tlsext_ecpointformatlist_length = ecpointformatlist_length LVAL 17 s -> session -> tlsext_ecpointformatlist_length FIELD 18 s -> session -> tlsext_ecpointformatlist_length LEAF_NODE 19 s LEAF_NODE 19 -> LEAF_NODE 19 session LEAF_NODE 19 -> LEAF_NODE 19 tlsext_ecpointformatlist_length ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 ecpointformatlist_length FIELD 18 ecpointformatlist_length LEAF_NODE 19 ecpointformatlist_length LEAF_NODE 15 ; EXPR_STATEMENT 14 memcpy ( s -> session -> tlsext_ecpointformatlist , sdata , ecpointformatlist_length ) ; EXPR 15 memcpy ( s -> session -> tlsext_ecpointformatlist , sdata , ecpointformatlist_length ) FUNCTION_CALL 16 memcpy ( s -> session -> tlsext_ecpointformatlist , sdata , ecpointformatlist_length ) CALLEE 17 memcpy LEAF_NODE 18 memcpy LEAF_NODE 17 ( ARGUMENT 17 s -> session -> tlsext_ecpointformatlist FIELD 18 s -> session -> tlsext_ecpointformatlist LEAF_NODE 19 s LEAF_NODE 19 -> LEAF_NODE 19 session LEAF_NODE 19 -> LEAF_NODE 19 tlsext_ecpointformatlist LEAF_NODE 17 , ARGUMENT 17 sdata FIELD 18 sdata LEAF_NODE 19 sdata LEAF_NODE 17 , ARGUMENT 17 ecpointformatlist_length FIELD 18 ecpointformatlist_length LEAF_NODE 19 ecpointformatlist_length LEAF_NODE 17 ) LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 fprintf ( stderr , \"ssl_parse_clienthello_tlsext s->session->tlsext_ecpointformatlist (length=%i) \" , s -> session -> tlsext_ecpointformatlist_length ) ; EXPR 12 fprintf ( stderr , \"ssl_parse_clienthello_tlsext s->session->tlsext_ecpointformatlist (length=%i) \" , s -> session -> tlsext_ecpointformatlist_length ) FUNCTION_CALL 13 fprintf ( stderr , \"ssl_parse_clienthello_tlsext s->session->tlsext_ecpointformatlist (length=%i) \" , s -> session -> tlsext_ecpointformatlist_length ) CALLEE 14 fprintf LEAF_NODE 15 fprintf LEAF_NODE 14 ( ARGUMENT 14 stderr FIELD 15 stderr LEAF_NODE 16 stderr LEAF_NODE 14 , ARGUMENT 14 \"ssl_parse_clienthello_tlsext s->session->tlsext_ecpointformatlist (length=%i) \" FIELD 15 \"ssl_parse_clienthello_tlsext s->session->tlsext_ecpointformatlist (length=%i) \" LEAF_NODE 16 \"ssl_parse_clienthello_tlsext s->session->tlsext_ecpointformatlist (length=%i) \" LEAF_NODE 14 , ARGUMENT 14 s -> session -> tlsext_ecpointformatlist_length FIELD 15 s -> session -> tlsext_ecpointformatlist_length LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 tlsext_ecpointformatlist_length LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 sdata = s -> session -> tlsext_ecpointformatlist ; EXPR 12 sdata = s -> session -> tlsext_ecpointformatlist ASSIGN 13 sdata = s -> session -> tlsext_ecpointformatlist LVAL 14 sdata FIELD 15 sdata LEAF_NODE 16 sdata ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 s -> session -> tlsext_ecpointformatlist FIELD 15 s -> session -> tlsext_ecpointformatlist LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 tlsext_ecpointformatlist LEAF_NODE 12 ; ITERATION 11 KEYWORD 12 for LEAF_NODE 13 for LEAF_NODE 12 ( FOR_INIT 12 i = 0 ; EXPR 13 i = 0 ASSIGN 14 i = 0 LVAL 15 i FIELD 16 i LEAF_NODE 17 i ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 13 ; CONDITION 12 i < s -> session -> tlsext_ecpointformatlist_length EXPR 13 i < s -> session -> tlsext_ecpointformatlist_length FIELD 14 i LEAF_NODE 15 i REL_OPERATOR 14 < LEAF_NODE 15 < FIELD 14 s -> session -> tlsext_ecpointformatlist_length LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 session LEAF_NODE 15 -> LEAF_NODE 15 tlsext_ecpointformatlist_length LEAF_NODE 12 ; FOR_EXPR 12 i ++ EXPR 13 i ++ FIELD 14 i ++ LEAF_NODE 15 i LEAF_NODE 15 ++ LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 fprintf ( stderr , \"%i \" , * ( sdata ++ ) ) ; EXPR 14 fprintf ( stderr , \"%i \" , * ( sdata ++ ) ) FUNCTION_CALL 15 fprintf ( stderr , \"%i \" , * ( sdata ++ ) ) CALLEE 16 fprintf LEAF_NODE 17 fprintf LEAF_NODE 16 ( ARGUMENT 16 stderr FIELD 17 stderr LEAF_NODE 18 stderr LEAF_NODE 16 , ARGUMENT 16 \"%i \" FIELD 17 \"%i \" LEAF_NODE 18 \"%i \" LEAF_NODE 16 , ARGUMENT 16 * ( sdata ++ ) UNARY_EXPR 17 * ( sdata ++ ) UNARY_OPERATOR 18 * LEAF_NODE 19 * LEAF_NODE 18 ( FIELD 18 sdata ++ LEAF_NODE 19 sdata LEAF_NODE 19 ++ LEAF_NODE 18 ) LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 11 fprintf ( stderr , \"\\n\" ) ; EXPR 12 fprintf ( stderr , \"\\n\" ) FUNCTION_CALL 13 fprintf ( stderr , \"\\n\" ) CALLEE 14 fprintf LEAF_NODE 15 fprintf LEAF_NODE 14 ( ARGUMENT 14 stderr FIELD 15 stderr LEAF_NODE 16 stderr LEAF_NODE 14 , ARGUMENT 14 \"\\n\" FIELD 15 \"\\n\" LEAF_NODE 16 \"\\n\" LEAF_NODE 14 ) LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 type == TLSEXT_TYPE_elliptic_curves EXPR 10 type == TLSEXT_TYPE_elliptic_curves FIELD 11 type LEAF_NODE 12 type EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 TLSEXT_TYPE_elliptic_curves LEAF_NODE 12 TLSEXT_TYPE_elliptic_curves LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SIMPLE_DECL 11 unsigned char * sdata ; sdata = data ; VAR_DECL 12 unsigned char * sdata ; sdata = data TYPE 13 unsigned char * TYPE_NAME 14 unsigned char LEAF_NODE 15 unsigned LEAF_NODE 15 char POINTER 14 * LEAF_NODE 15 * NAME 13 sdata LEAF_NODE 14 sdata LEAF_NODE 13 ; INIT 13 sdata = data ASSIGN 14 sdata = data LVAL 15 sdata NAME 16 sdata LEAF_NODE 17 sdata ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 12 ; SIMPLE_DECL 11 int ellipticcurvelist_length ; ellipticcurvelist_length = ( * ( sdata ++ ) << 8 ) ; VAR_DECL 12 int ellipticcurvelist_length ; ellipticcurvelist_length = ( * ( sdata ++ ) << 8 ) TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 ellipticcurvelist_length LEAF_NODE 14 ellipticcurvelist_length LEAF_NODE 13 ; INIT 13 ellipticcurvelist_length = ( * ( sdata ++ ) << 8 ) ASSIGN 14 ellipticcurvelist_length = ( * ( sdata ++ ) << 8 ) LVAL 15 ellipticcurvelist_length NAME 16 ellipticcurvelist_length LEAF_NODE 17 ellipticcurvelist_length ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ( * ( sdata ++ ) << 8 ) LEAF_NODE 16 ( UNARY_EXPR 16 * ( sdata ++ ) UNARY_OPERATOR 17 * LEAF_NODE 18 * LEAF_NODE 17 ( FIELD 17 sdata ++ LEAF_NODE 18 sdata LEAF_NODE 18 ++ LEAF_NODE 17 ) LEAF_NODE 16 << FIELD 16 8 LEAF_NODE 17 8 LEAF_NODE 16 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 ellipticcurvelist_length += ( * ( sdata ++ ) ) ; EXPR 12 ellipticcurvelist_length += ( * ( sdata ++ ) ) ASSIGN 13 ellipticcurvelist_length += ( * ( sdata ++ ) ) LVAL 14 ellipticcurvelist_length FIELD 15 ellipticcurvelist_length LEAF_NODE 16 ellipticcurvelist_length ASSIGN_OP 14 += LEAF_NODE 15 += RVAL 14 ( * ( sdata ++ ) ) LEAF_NODE 15 ( UNARY_EXPR 15 * ( sdata ++ ) UNARY_OPERATOR 16 * LEAF_NODE 17 * LEAF_NODE 16 ( FIELD 16 sdata ++ LEAF_NODE 17 sdata LEAF_NODE 17 ++ LEAF_NODE 16 ) LEAF_NODE 15 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ellipticcurvelist_length != size - 2 || ellipticcurvelist_length < 1 || ellipticcurvelist_length & 1 EXPR 13 ellipticcurvelist_length != size - 2 || ellipticcurvelist_length < 1 || ellipticcurvelist_length & 1 OR 14 ellipticcurvelist_length != size - 2 || ellipticcurvelist_length < 1 || ellipticcurvelist_length & 1 EXPR 15 ellipticcurvelist_length != size - 2 FIELD 16 ellipticcurvelist_length LEAF_NODE 17 ellipticcurvelist_length EQ_OPERATOR 16 != LEAF_NODE 17 != FIELD 16 size LEAF_NODE 17 size LEAF_NODE 16 - FIELD 16 2 LEAF_NODE 17 2 LEAF_NODE 15 || EXPR 15 ellipticcurvelist_length < 1 || ellipticcurvelist_length & 1 OR 16 ellipticcurvelist_length < 1 || ellipticcurvelist_length & 1 EXPR 17 ellipticcurvelist_length < 1 FIELD 18 ellipticcurvelist_length LEAF_NODE 19 ellipticcurvelist_length REL_OPERATOR 18 < LEAF_NODE 19 < FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 17 || EXPR 17 ellipticcurvelist_length & 1 FIELD 18 ellipticcurvelist_length LEAF_NODE 19 ellipticcurvelist_length LEAF_NODE 18 & FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 12 ) STATEMENTS 12 JUMP_STATEMENT 13 goto err ; KEYWORD 14 goto LEAF_NODE 15 goto DESTINATION 14 err LEAF_NODE 15 err LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ! s -> hit EXPR 13 ! s -> hit UNARY_EXPR 14 ! s -> hit UNARY_OPERATOR 15 ! LEAF_NODE 16 ! FIELD 15 s -> hit LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 hit LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 s -> session -> tlsext_ellipticcurvelist EXPR 16 s -> session -> tlsext_ellipticcurvelist FIELD 17 s -> session -> tlsext_ellipticcurvelist LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 session LEAF_NODE 18 -> LEAF_NODE 18 tlsext_ellipticcurvelist LEAF_NODE 15 ) STATEMENTS 15 JUMP_STATEMENT 16 goto err ; KEYWORD 17 goto LEAF_NODE 18 goto DESTINATION 17 err LEAF_NODE 18 err LEAF_NODE 17 ; EXPR_STATEMENT 14 s -> session -> tlsext_ellipticcurvelist_length = 0 ; EXPR 15 s -> session -> tlsext_ellipticcurvelist_length = 0 ASSIGN 16 s -> session -> tlsext_ellipticcurvelist_length = 0 LVAL 17 s -> session -> tlsext_ellipticcurvelist_length FIELD 18 s -> session -> tlsext_ellipticcurvelist_length LEAF_NODE 19 s LEAF_NODE 19 -> LEAF_NODE 19 session LEAF_NODE 19 -> LEAF_NODE 19 tlsext_ellipticcurvelist_length ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 0 FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 15 ; SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 ( s -> session -> tlsext_ellipticcurvelist = OPENSSL_malloc ( ellipticcurvelist_length ) ) == NULL EXPR 16 ( s -> session -> tlsext_ellipticcurvelist = OPENSSL_malloc ( ellipticcurvelist_length ) ) == NULL LEAF_NODE 17 ( ASSIGN 17 s -> session -> tlsext_ellipticcurvelist = OPENSSL_malloc ( ellipticcurvelist_length ) LVAL 18 s -> session -> tlsext_ellipticcurvelist FIELD 19 s -> session -> tlsext_ellipticcurvelist LEAF_NODE 20 s LEAF_NODE 20 -> LEAF_NODE 20 session LEAF_NODE 20 -> LEAF_NODE 20 tlsext_ellipticcurvelist ASSIGN_OP 18 = LEAF_NODE 19 = RVAL 18 OPENSSL_malloc ( ellipticcurvelist_length ) FUNCTION_CALL 19 OPENSSL_malloc ( ellipticcurvelist_length ) CALLEE 20 OPENSSL_malloc LEAF_NODE 21 OPENSSL_malloc LEAF_NODE 20 ( ARGUMENT 20 ellipticcurvelist_length FIELD 21 ellipticcurvelist_length LEAF_NODE 22 ellipticcurvelist_length LEAF_NODE 20 ) LEAF_NODE 17 ) EQ_OPERATOR 17 == LEAF_NODE 18 == FIELD 17 NULL LEAF_NODE 18 NULL LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 EXPR_STATEMENT 17 * al = TLS1_AD_INTERNAL_ERROR ; EXPR 18 * al = TLS1_AD_INTERNAL_ERROR ASSIGN 19 * al = TLS1_AD_INTERNAL_ERROR LVAL 20 * al UNARY_EXPR 21 * al UNARY_OPERATOR 22 * LEAF_NODE 23 * FIELD 22 al LEAF_NODE 23 al ASSIGN_OP 20 = LEAF_NODE 21 = RVAL 20 TLS1_AD_INTERNAL_ERROR FIELD 21 TLS1_AD_INTERNAL_ERROR LEAF_NODE 22 TLS1_AD_INTERNAL_ERROR LEAF_NODE 18 ; JUMP_STATEMENT 17 return 0 ; KEYWORD 18 return LEAF_NODE 19 return DESTINATION 18 0 EXPR 19 0 FIELD 20 0 LEAF_NODE 21 0 LEAF_NODE 18 ; LEAF_NODE 16 } EXPR_STATEMENT 14 s -> session -> tlsext_ellipticcurvelist_length = ellipticcurvelist_length ; EXPR 15 s -> session -> tlsext_ellipticcurvelist_length = ellipticcurvelist_length ASSIGN 16 s -> session -> tlsext_ellipticcurvelist_length = ellipticcurvelist_length LVAL 17 s -> session -> tlsext_ellipticcurvelist_length FIELD 18 s -> session -> tlsext_ellipticcurvelist_length LEAF_NODE 19 s LEAF_NODE 19 -> LEAF_NODE 19 session LEAF_NODE 19 -> LEAF_NODE 19 tlsext_ellipticcurvelist_length ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 ellipticcurvelist_length FIELD 18 ellipticcurvelist_length LEAF_NODE 19 ellipticcurvelist_length LEAF_NODE 15 ; EXPR_STATEMENT 14 memcpy ( s -> session -> tlsext_ellipticcurvelist , sdata , ellipticcurvelist_length ) ; EXPR 15 memcpy ( s -> session -> tlsext_ellipticcurvelist , sdata , ellipticcurvelist_length ) FUNCTION_CALL 16 memcpy ( s -> session -> tlsext_ellipticcurvelist , sdata , ellipticcurvelist_length ) CALLEE 17 memcpy LEAF_NODE 18 memcpy LEAF_NODE 17 ( ARGUMENT 17 s -> session -> tlsext_ellipticcurvelist FIELD 18 s -> session -> tlsext_ellipticcurvelist LEAF_NODE 19 s LEAF_NODE 19 -> LEAF_NODE 19 session LEAF_NODE 19 -> LEAF_NODE 19 tlsext_ellipticcurvelist LEAF_NODE 17 , ARGUMENT 17 sdata FIELD 18 sdata LEAF_NODE 19 sdata LEAF_NODE 17 , ARGUMENT 17 ellipticcurvelist_length FIELD 18 ellipticcurvelist_length LEAF_NODE 19 ellipticcurvelist_length LEAF_NODE 17 ) LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 fprintf ( stderr , \"ssl_parse_clienthello_tlsext s->session->tlsext_ellipticcurvelist (length=%i) \" , s -> session -> tlsext_ellipticcurvelist_length ) ; EXPR 12 fprintf ( stderr , \"ssl_parse_clienthello_tlsext s->session->tlsext_ellipticcurvelist (length=%i) \" , s -> session -> tlsext_ellipticcurvelist_length ) FUNCTION_CALL 13 fprintf ( stderr , \"ssl_parse_clienthello_tlsext s->session->tlsext_ellipticcurvelist (length=%i) \" , s -> session -> tlsext_ellipticcurvelist_length ) CALLEE 14 fprintf LEAF_NODE 15 fprintf LEAF_NODE 14 ( ARGUMENT 14 stderr FIELD 15 stderr LEAF_NODE 16 stderr LEAF_NODE 14 , ARGUMENT 14 \"ssl_parse_clienthello_tlsext s->session->tlsext_ellipticcurvelist (length=%i) \" FIELD 15 \"ssl_parse_clienthello_tlsext s->session->tlsext_ellipticcurvelist (length=%i) \" LEAF_NODE 16 \"ssl_parse_clienthello_tlsext s->session->tlsext_ellipticcurvelist (length=%i) \" LEAF_NODE 14 , ARGUMENT 14 s -> session -> tlsext_ellipticcurvelist_length FIELD 15 s -> session -> tlsext_ellipticcurvelist_length LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 tlsext_ellipticcurvelist_length LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 sdata = s -> session -> tlsext_ellipticcurvelist ; EXPR 12 sdata = s -> session -> tlsext_ellipticcurvelist ASSIGN 13 sdata = s -> session -> tlsext_ellipticcurvelist LVAL 14 sdata FIELD 15 sdata LEAF_NODE 16 sdata ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 s -> session -> tlsext_ellipticcurvelist FIELD 15 s -> session -> tlsext_ellipticcurvelist LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 tlsext_ellipticcurvelist LEAF_NODE 12 ; ITERATION 11 KEYWORD 12 for LEAF_NODE 13 for LEAF_NODE 12 ( FOR_INIT 12 i = 0 ; EXPR 13 i = 0 ASSIGN 14 i = 0 LVAL 15 i FIELD 16 i LEAF_NODE 17 i ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 13 ; CONDITION 12 i < s -> session -> tlsext_ellipticcurvelist_length EXPR 13 i < s -> session -> tlsext_ellipticcurvelist_length FIELD 14 i LEAF_NODE 15 i REL_OPERATOR 14 < LEAF_NODE 15 < FIELD 14 s -> session -> tlsext_ellipticcurvelist_length LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 session LEAF_NODE 15 -> LEAF_NODE 15 tlsext_ellipticcurvelist_length LEAF_NODE 12 ; FOR_EXPR 12 i ++ EXPR 13 i ++ FIELD 14 i ++ LEAF_NODE 15 i LEAF_NODE 15 ++ LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 fprintf ( stderr , \"%i \" , * ( sdata ++ ) ) ; EXPR 14 fprintf ( stderr , \"%i \" , * ( sdata ++ ) ) FUNCTION_CALL 15 fprintf ( stderr , \"%i \" , * ( sdata ++ ) ) CALLEE 16 fprintf LEAF_NODE 17 fprintf LEAF_NODE 16 ( ARGUMENT 16 stderr FIELD 17 stderr LEAF_NODE 18 stderr LEAF_NODE 16 , ARGUMENT 16 \"%i \" FIELD 17 \"%i \" LEAF_NODE 18 \"%i \" LEAF_NODE 16 , ARGUMENT 16 * ( sdata ++ ) UNARY_EXPR 17 * ( sdata ++ ) UNARY_OPERATOR 18 * LEAF_NODE 19 * LEAF_NODE 18 ( FIELD 18 sdata ++ LEAF_NODE 19 sdata LEAF_NODE 19 ++ LEAF_NODE 18 ) LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 11 fprintf ( stderr , \"\\n\" ) ; EXPR 12 fprintf ( stderr , \"\\n\" ) FUNCTION_CALL 13 fprintf ( stderr , \"\\n\" ) CALLEE 14 fprintf LEAF_NODE 15 fprintf LEAF_NODE 14 ( ARGUMENT 14 stderr FIELD 15 stderr LEAF_NODE 16 stderr LEAF_NODE 14 , ARGUMENT 14 \"\\n\" FIELD 15 \"\\n\" LEAF_NODE 16 \"\\n\" LEAF_NODE 14 ) LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 type == TLSEXT_TYPE_opaque_prf_input EXPR 10 type == TLSEXT_TYPE_opaque_prf_input FIELD 11 type LEAF_NODE 12 type EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 TLSEXT_TYPE_opaque_prf_input LEAF_NODE 12 TLSEXT_TYPE_opaque_prf_input LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SIMPLE_DECL 11 unsigned char * sdata ; sdata = data ; VAR_DECL 12 unsigned char * sdata ; sdata = data TYPE 13 unsigned char * TYPE_NAME 14 unsigned char LEAF_NODE 15 unsigned LEAF_NODE 15 char POINTER 14 * LEAF_NODE 15 * NAME 13 sdata LEAF_NODE 14 sdata LEAF_NODE 13 ; INIT 13 sdata = data ASSIGN 14 sdata = data LVAL 15 sdata NAME 16 sdata LEAF_NODE 17 sdata ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 size < 2 EXPR 13 size < 2 FIELD 14 size LEAF_NODE 15 size REL_OPERATOR 14 < LEAF_NODE 15 < FIELD 14 2 LEAF_NODE 15 2 LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 * al = SSL_AD_DECODE_ERROR ; EXPR 15 * al = SSL_AD_DECODE_ERROR ASSIGN 16 * al = SSL_AD_DECODE_ERROR LVAL 17 * al UNARY_EXPR 18 * al UNARY_OPERATOR 19 * LEAF_NODE 20 * FIELD 19 al LEAF_NODE 20 al ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 SSL_AD_DECODE_ERROR FIELD 18 SSL_AD_DECODE_ERROR LEAF_NODE 19 SSL_AD_DECODE_ERROR LEAF_NODE 15 ; JUMP_STATEMENT 14 return 0 ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 0 EXPR 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 n2s ( sdata , s -> s3 -> client_opaque_prf_input_len ) ; EXPR 12 n2s ( sdata , s -> s3 -> client_opaque_prf_input_len ) FUNCTION_CALL 13 n2s ( sdata , s -> s3 -> client_opaque_prf_input_len ) CALLEE 14 n2s LEAF_NODE 15 n2s LEAF_NODE 14 ( ARGUMENT 14 sdata FIELD 15 sdata LEAF_NODE 16 sdata LEAF_NODE 14 , ARGUMENT 14 s -> s3 -> client_opaque_prf_input_len FIELD 15 s -> s3 -> client_opaque_prf_input_len LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 s3 LEAF_NODE 16 -> LEAF_NODE 16 client_opaque_prf_input_len LEAF_NODE 14 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> s3 -> client_opaque_prf_input_len != size - 2 EXPR 13 s -> s3 -> client_opaque_prf_input_len != size - 2 FIELD 14 s -> s3 -> client_opaque_prf_input_len LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 s3 LEAF_NODE 15 -> LEAF_NODE 15 client_opaque_prf_input_len EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 size LEAF_NODE 15 size LEAF_NODE 14 - FIELD 14 2 LEAF_NODE 15 2 LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 * al = SSL_AD_DECODE_ERROR ; EXPR 15 * al = SSL_AD_DECODE_ERROR ASSIGN 16 * al = SSL_AD_DECODE_ERROR LVAL 17 * al UNARY_EXPR 18 * al UNARY_OPERATOR 19 * LEAF_NODE 20 * FIELD 19 al LEAF_NODE 20 al ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 SSL_AD_DECODE_ERROR FIELD 18 SSL_AD_DECODE_ERROR LEAF_NODE 19 SSL_AD_DECODE_ERROR LEAF_NODE 15 ; JUMP_STATEMENT 14 return 0 ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 0 EXPR 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ; LEAF_NODE 13 } SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> s3 -> client_opaque_prf_input != NULL EXPR 13 s -> s3 -> client_opaque_prf_input != NULL FIELD 14 s -> s3 -> client_opaque_prf_input LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 s3 LEAF_NODE 15 -> LEAF_NODE 15 client_opaque_prf_input EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 OPENSSL_free ( s -> s3 -> client_opaque_prf_input ) ; EXPR 15 OPENSSL_free ( s -> s3 -> client_opaque_prf_input ) FUNCTION_CALL 16 OPENSSL_free ( s -> s3 -> client_opaque_prf_input ) CALLEE 17 OPENSSL_free LEAF_NODE 18 OPENSSL_free LEAF_NODE 17 ( ARGUMENT 17 s -> s3 -> client_opaque_prf_input FIELD 18 s -> s3 -> client_opaque_prf_input LEAF_NODE 19 s LEAF_NODE 19 -> LEAF_NODE 19 s3 LEAF_NODE 19 -> LEAF_NODE 19 client_opaque_prf_input LEAF_NODE 17 ) LEAF_NODE 15 ; LEAF_NODE 13 } SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> s3 -> client_opaque_prf_input_len == 0 EXPR 13 s -> s3 -> client_opaque_prf_input_len == 0 FIELD 14 s -> s3 -> client_opaque_prf_input_len LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 s3 LEAF_NODE 15 -> LEAF_NODE 15 client_opaque_prf_input_len EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 s -> s3 -> client_opaque_prf_input = OPENSSL_malloc ( 1 ) ; EXPR 14 s -> s3 -> client_opaque_prf_input = OPENSSL_malloc ( 1 ) ASSIGN 15 s -> s3 -> client_opaque_prf_input = OPENSSL_malloc ( 1 ) LVAL 16 s -> s3 -> client_opaque_prf_input FIELD 17 s -> s3 -> client_opaque_prf_input LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 s3 LEAF_NODE 18 -> LEAF_NODE 18 client_opaque_prf_input ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 OPENSSL_malloc ( 1 ) FUNCTION_CALL 17 OPENSSL_malloc ( 1 ) CALLEE 18 OPENSSL_malloc LEAF_NODE 19 OPENSSL_malloc LEAF_NODE 18 ( ARGUMENT 18 1 FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ) LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 else LEAF_NODE 13 else STATEMENTS 12 EXPR_STATEMENT 13 s -> s3 -> client_opaque_prf_input = BUF_memdup ( sdata , s -> s3 -> client_opaque_prf_input_len ) ; EXPR 14 s -> s3 -> client_opaque_prf_input = BUF_memdup ( sdata , s -> s3 -> client_opaque_prf_input_len ) ASSIGN 15 s -> s3 -> client_opaque_prf_input = BUF_memdup ( sdata , s -> s3 -> client_opaque_prf_input_len ) LVAL 16 s -> s3 -> client_opaque_prf_input FIELD 17 s -> s3 -> client_opaque_prf_input LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 s3 LEAF_NODE 18 -> LEAF_NODE 18 client_opaque_prf_input ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 BUF_memdup ( sdata , s -> s3 -> client_opaque_prf_input_len ) FUNCTION_CALL 17 BUF_memdup ( sdata , s -> s3 -> client_opaque_prf_input_len ) CALLEE 18 BUF_memdup LEAF_NODE 19 BUF_memdup LEAF_NODE 18 ( ARGUMENT 18 sdata FIELD 19 sdata LEAF_NODE 20 sdata LEAF_NODE 18 , ARGUMENT 18 s -> s3 -> client_opaque_prf_input_len FIELD 19 s -> s3 -> client_opaque_prf_input_len LEAF_NODE 20 s LEAF_NODE 20 -> LEAF_NODE 20 s3 LEAF_NODE 20 -> LEAF_NODE 20 client_opaque_prf_input_len LEAF_NODE 18 ) LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> s3 -> client_opaque_prf_input == NULL EXPR 13 s -> s3 -> client_opaque_prf_input == NULL FIELD 14 s -> s3 -> client_opaque_prf_input LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 s3 LEAF_NODE 15 -> LEAF_NODE 15 client_opaque_prf_input EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 * al = TLS1_AD_INTERNAL_ERROR ; EXPR 15 * al = TLS1_AD_INTERNAL_ERROR ASSIGN 16 * al = TLS1_AD_INTERNAL_ERROR LVAL 17 * al UNARY_EXPR 18 * al UNARY_OPERATOR 19 * LEAF_NODE 20 * FIELD 19 al LEAF_NODE 20 al ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 TLS1_AD_INTERNAL_ERROR FIELD 18 TLS1_AD_INTERNAL_ERROR LEAF_NODE 19 TLS1_AD_INTERNAL_ERROR LEAF_NODE 15 ; JUMP_STATEMENT 14 return 0 ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 0 EXPR 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ; LEAF_NODE 13 } LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 type == TLSEXT_TYPE_session_ticket EXPR 10 type == TLSEXT_TYPE_session_ticket FIELD 11 type LEAF_NODE 12 type EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 TLSEXT_TYPE_session_ticket LEAF_NODE 12 TLSEXT_TYPE_session_ticket LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> tls_session_ticket_ext_cb && ! s -> tls_session_ticket_ext_cb ( s , data , size , s -> tls_session_ticket_ext_cb_arg ) EXPR 13 s -> tls_session_ticket_ext_cb && ! s -> tls_session_ticket_ext_cb ( s , data , size , s -> tls_session_ticket_ext_cb_arg ) AND 14 s -> tls_session_ticket_ext_cb && ! s -> tls_session_ticket_ext_cb ( s , data , size , s -> tls_session_ticket_ext_cb_arg ) EXPR 15 s -> tls_session_ticket_ext_cb FIELD 16 s -> tls_session_ticket_ext_cb LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 tls_session_ticket_ext_cb LEAF_NODE 15 && EXPR 15 ! s -> tls_session_ticket_ext_cb ( s , data , size , s -> tls_session_ticket_ext_cb_arg ) UNARY_EXPR 16 ! s -> tls_session_ticket_ext_cb ( s , data , size , s -> tls_session_ticket_ext_cb_arg ) UNARY_OPERATOR 17 ! LEAF_NODE 18 ! FUNCTION_CALL 17 s -> tls_session_ticket_ext_cb ( s , data , size , s -> tls_session_ticket_ext_cb_arg ) CALLEE 18 s -> tls_session_ticket_ext_cb LEAF_NODE 19 s LEAF_NODE 19 -> LEAF_NODE 19 tls_session_ticket_ext_cb LEAF_NODE 18 ( ARGUMENT 18 s FIELD 19 s LEAF_NODE 20 s LEAF_NODE 18 , ARGUMENT 18 data FIELD 19 data LEAF_NODE 20 data LEAF_NODE 18 , ARGUMENT 18 size FIELD 19 size LEAF_NODE 20 size LEAF_NODE 18 , ARGUMENT 18 s -> tls_session_ticket_ext_cb_arg FIELD 19 s -> tls_session_ticket_ext_cb_arg LEAF_NODE 20 s LEAF_NODE 20 -> LEAF_NODE 20 tls_session_ticket_ext_cb_arg LEAF_NODE 18 ) LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 * al = TLS1_AD_INTERNAL_ERROR ; EXPR 15 * al = TLS1_AD_INTERNAL_ERROR ASSIGN 16 * al = TLS1_AD_INTERNAL_ERROR LVAL 17 * al UNARY_EXPR 18 * al UNARY_OPERATOR 19 * LEAF_NODE 20 * FIELD 19 al LEAF_NODE 20 al ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 TLS1_AD_INTERNAL_ERROR FIELD 18 TLS1_AD_INTERNAL_ERROR LEAF_NODE 19 TLS1_AD_INTERNAL_ERROR LEAF_NODE 15 ; JUMP_STATEMENT 14 return 0 ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 0 EXPR 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ; LEAF_NODE 13 } LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 type == TLSEXT_TYPE_renegotiate EXPR 10 type == TLSEXT_TYPE_renegotiate FIELD 11 type LEAF_NODE 12 type EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 TLSEXT_TYPE_renegotiate LEAF_NODE 12 TLSEXT_TYPE_renegotiate LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ! ssl_parse_clienthello_renegotiate_ext ( s , data , size , al ) EXPR 13 ! ssl_parse_clienthello_renegotiate_ext ( s , data , size , al ) UNARY_EXPR 14 ! ssl_parse_clienthello_renegotiate_ext ( s , data , size , al ) UNARY_OPERATOR 15 ! LEAF_NODE 16 ! FUNCTION_CALL 15 ssl_parse_clienthello_renegotiate_ext ( s , data , size , al ) CALLEE 16 ssl_parse_clienthello_renegotiate_ext LEAF_NODE 17 ssl_parse_clienthello_renegotiate_ext LEAF_NODE 16 ( ARGUMENT 16 s FIELD 17 s LEAF_NODE 18 s LEAF_NODE 16 , ARGUMENT 16 data FIELD 17 data LEAF_NODE 18 data LEAF_NODE 16 , ARGUMENT 16 size FIELD 17 size LEAF_NODE 18 size LEAF_NODE 16 , ARGUMENT 16 al FIELD 17 al LEAF_NODE 18 al LEAF_NODE 16 ) LEAF_NODE 12 ) STATEMENTS 12 JUMP_STATEMENT 13 return 0 ; KEYWORD 14 return LEAF_NODE 15 return DESTINATION 14 0 EXPR 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 14 ; EXPR_STATEMENT 11 renegotiate_seen = 1 ; EXPR 12 renegotiate_seen = 1 ASSIGN 13 renegotiate_seen = 1 LVAL 14 renegotiate_seen FIELD 15 renegotiate_seen LEAF_NODE 16 renegotiate_seen ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 type == TLSEXT_TYPE_signature_algorithms EXPR 10 type == TLSEXT_TYPE_signature_algorithms FIELD 11 type LEAF_NODE 12 type EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 TLSEXT_TYPE_signature_algorithms LEAF_NODE 12 TLSEXT_TYPE_signature_algorithms LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SIMPLE_DECL 11 int dsize ; VAR_DECL 12 int dsize TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 dsize LEAF_NODE 14 dsize LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> cert -> peer_sigalgs || size < 2 EXPR 13 s -> cert -> peer_sigalgs || size < 2 OR 14 s -> cert -> peer_sigalgs || size < 2 EXPR 15 s -> cert -> peer_sigalgs FIELD 16 s -> cert -> peer_sigalgs LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 cert LEAF_NODE 17 -> LEAF_NODE 17 peer_sigalgs LEAF_NODE 15 || EXPR 15 size < 2 FIELD 16 size LEAF_NODE 17 size REL_OPERATOR 16 < LEAF_NODE 17 < FIELD 16 2 LEAF_NODE 17 2 LEAF_NODE 12 ) STATEMENTS 12 JUMP_STATEMENT 13 goto err ; KEYWORD 14 goto LEAF_NODE 15 goto DESTINATION 14 err LEAF_NODE 15 err LEAF_NODE 14 ; EXPR_STATEMENT 11 n2s ( data , dsize ) ; EXPR 12 n2s ( data , dsize ) FUNCTION_CALL 13 n2s ( data , dsize ) CALLEE 14 n2s LEAF_NODE 15 n2s LEAF_NODE 14 ( ARGUMENT 14 data FIELD 15 data LEAF_NODE 16 data LEAF_NODE 14 , ARGUMENT 14 dsize FIELD 15 dsize LEAF_NODE 16 dsize LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 size -= 2 ; EXPR 12 size -= 2 ASSIGN 13 size -= 2 LVAL 14 size FIELD 15 size LEAF_NODE 16 size ASSIGN_OP 14 -= LEAF_NODE 15 -= RVAL 14 2 FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 dsize != size || dsize & 1 || ! dsize EXPR 13 dsize != size || dsize & 1 || ! dsize OR 14 dsize != size || dsize & 1 || ! dsize EXPR 15 dsize != size FIELD 16 dsize LEAF_NODE 17 dsize EQ_OPERATOR 16 != LEAF_NODE 17 != FIELD 16 size LEAF_NODE 17 size LEAF_NODE 15 || EXPR 15 dsize & 1 || ! dsize OR 16 dsize & 1 || ! dsize EXPR 17 dsize & 1 FIELD 18 dsize LEAF_NODE 19 dsize LEAF_NODE 18 & FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 17 || EXPR 17 ! dsize UNARY_EXPR 18 ! dsize UNARY_OPERATOR 19 ! LEAF_NODE 20 ! FIELD 19 dsize LEAF_NODE 20 dsize LEAF_NODE 12 ) STATEMENTS 12 JUMP_STATEMENT 13 goto err ; KEYWORD 14 goto LEAF_NODE 15 goto DESTINATION 14 err LEAF_NODE 15 err LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ! tls1_save_sigalgs ( s , data , dsize ) EXPR 13 ! tls1_save_sigalgs ( s , data , dsize ) UNARY_EXPR 14 ! tls1_save_sigalgs ( s , data , dsize ) UNARY_OPERATOR 15 ! LEAF_NODE 16 ! FUNCTION_CALL 15 tls1_save_sigalgs ( s , data , dsize ) CALLEE 16 tls1_save_sigalgs LEAF_NODE 17 tls1_save_sigalgs LEAF_NODE 16 ( ARGUMENT 16 s FIELD 17 s LEAF_NODE 18 s LEAF_NODE 16 , ARGUMENT 16 data FIELD 17 data LEAF_NODE 18 data LEAF_NODE 16 , ARGUMENT 16 dsize FIELD 17 dsize LEAF_NODE 18 dsize LEAF_NODE 16 ) LEAF_NODE 12 ) STATEMENTS 12 JUMP_STATEMENT 13 goto err ; KEYWORD 14 goto LEAF_NODE 15 goto DESTINATION 14 err LEAF_NODE 15 err LEAF_NODE 14 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 type == TLSEXT_TYPE_status_request EXPR 10 type == TLSEXT_TYPE_status_request FIELD 11 type LEAF_NODE 12 type EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 TLSEXT_TYPE_status_request LEAF_NODE 12 TLSEXT_TYPE_status_request LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 size < 5 EXPR 13 size < 5 FIELD 14 size LEAF_NODE 15 size REL_OPERATOR 14 < LEAF_NODE 15 < FIELD 14 5 LEAF_NODE 15 5 LEAF_NODE 12 ) STATEMENTS 12 JUMP_STATEMENT 13 goto err ; KEYWORD 14 goto LEAF_NODE 15 goto DESTINATION 14 err LEAF_NODE 15 err LEAF_NODE 14 ; EXPR_STATEMENT 11 s -> tlsext_status_type = * data ++ ; EXPR 12 s -> tlsext_status_type = * data ++ ASSIGN 13 s -> tlsext_status_type = * data ++ LVAL 14 s -> tlsext_status_type FIELD 15 s -> tlsext_status_type LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 tlsext_status_type ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 * data ++ UNARY_EXPR 15 * data ++ UNARY_OPERATOR 16 * LEAF_NODE 17 * FIELD 16 data ++ LEAF_NODE 17 data LEAF_NODE 17 ++ LEAF_NODE 12 ; EXPR_STATEMENT 11 size -- ; EXPR 12 size -- FIELD 13 size -- LEAF_NODE 14 size LEAF_NODE 14 -- LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> tlsext_status_type == TLSEXT_STATUSTYPE_ocsp EXPR 13 s -> tlsext_status_type == TLSEXT_STATUSTYPE_ocsp FIELD 14 s -> tlsext_status_type LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 tlsext_status_type EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 TLSEXT_STATUSTYPE_ocsp LEAF_NODE 15 TLSEXT_STATUSTYPE_ocsp LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 SIMPLE_DECL 14 const unsigned char * sdata ; VAR_DECL 15 const unsigned char * sdata TYPE 16 const unsigned char * TYPE_NAME 17 const unsigned char LEAF_NODE 18 const LEAF_NODE 18 unsigned LEAF_NODE 18 char POINTER 17 * LEAF_NODE 18 * NAME 16 sdata LEAF_NODE 17 sdata LEAF_NODE 15 ; SIMPLE_DECL 14 int dsize ; VAR_DECL 15 int dsize TYPE 16 int TYPE_NAME 17 int LEAF_NODE 18 int NAME 16 dsize LEAF_NODE 17 dsize LEAF_NODE 15 ; EXPR_STATEMENT 14 n2s ( data , dsize ) ; EXPR 15 n2s ( data , dsize ) FUNCTION_CALL 16 n2s ( data , dsize ) CALLEE 17 n2s LEAF_NODE 18 n2s LEAF_NODE 17 ( ARGUMENT 17 data FIELD 18 data LEAF_NODE 19 data LEAF_NODE 17 , ARGUMENT 17 dsize FIELD 18 dsize LEAF_NODE 19 dsize LEAF_NODE 17 ) LEAF_NODE 15 ; EXPR_STATEMENT 14 size -= 2 ; EXPR 15 size -= 2 ASSIGN 16 size -= 2 LVAL 17 size FIELD 18 size LEAF_NODE 19 size ASSIGN_OP 17 -= LEAF_NODE 18 -= RVAL 17 2 FIELD 18 2 LEAF_NODE 19 2 LEAF_NODE 15 ; SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 dsize > size EXPR 16 dsize > size FIELD 17 dsize LEAF_NODE 18 dsize REL_OPERATOR 17 > LEAF_NODE 18 > FIELD 17 size LEAF_NODE 18 size LEAF_NODE 15 ) STATEMENTS 15 JUMP_STATEMENT 16 goto err ; KEYWORD 17 goto LEAF_NODE 18 goto DESTINATION 17 err LEAF_NODE 18 err LEAF_NODE 17 ; ITERATION 14 KEYWORD 15 while LEAF_NODE 16 while LEAF_NODE 15 ( CONDITION 15 dsize > 0 EXPR 16 dsize > 0 FIELD 17 dsize LEAF_NODE 18 dsize REL_OPERATOR 17 > LEAF_NODE 18 > FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 SIMPLE_DECL 17 OCSP_RESPID * id ; VAR_DECL 18 OCSP_RESPID * id TYPE 19 OCSP_RESPID * TYPE_NAME 20 OCSP_RESPID LEAF_NODE 21 OCSP_RESPID POINTER 20 * LEAF_NODE 21 * NAME 19 id LEAF_NODE 20 id LEAF_NODE 18 ; SIMPLE_DECL 17 int idsize ; VAR_DECL 18 int idsize TYPE 19 int TYPE_NAME 20 int LEAF_NODE 21 int NAME 19 idsize LEAF_NODE 20 idsize LEAF_NODE 18 ; SELECTION 17 KEYWORD 18 if LEAF_NODE 19 if LEAF_NODE 18 ( CONDITION 18 dsize < 4 EXPR 19 dsize < 4 FIELD 20 dsize LEAF_NODE 21 dsize REL_OPERATOR 20 < LEAF_NODE 21 < FIELD 20 4 LEAF_NODE 21 4 LEAF_NODE 18 ) STATEMENTS 18 JUMP_STATEMENT 19 goto err ; KEYWORD 20 goto LEAF_NODE 21 goto DESTINATION 20 err LEAF_NODE 21 err LEAF_NODE 20 ; EXPR_STATEMENT 17 n2s ( data , idsize ) ; EXPR 18 n2s ( data , idsize ) FUNCTION_CALL 19 n2s ( data , idsize ) CALLEE 20 n2s LEAF_NODE 21 n2s LEAF_NODE 20 ( ARGUMENT 20 data FIELD 21 data LEAF_NODE 22 data LEAF_NODE 20 , ARGUMENT 20 idsize FIELD 21 idsize LEAF_NODE 22 idsize LEAF_NODE 20 ) LEAF_NODE 18 ; EXPR_STATEMENT 17 dsize -= 2 + idsize ; EXPR 18 dsize -= 2 + idsize ASSIGN 19 dsize -= 2 + idsize LVAL 20 dsize FIELD 21 dsize LEAF_NODE 22 dsize ASSIGN_OP 20 -= LEAF_NODE 21 -= RVAL 20 2 + idsize FIELD 21 2 LEAF_NODE 22 2 LEAF_NODE 21 + FIELD 21 idsize LEAF_NODE 22 idsize LEAF_NODE 18 ; EXPR_STATEMENT 17 size -= 2 + idsize ; EXPR 18 size -= 2 + idsize ASSIGN 19 size -= 2 + idsize LVAL 20 size FIELD 21 size LEAF_NODE 22 size ASSIGN_OP 20 -= LEAF_NODE 21 -= RVAL 20 2 + idsize FIELD 21 2 LEAF_NODE 22 2 LEAF_NODE 21 + FIELD 21 idsize LEAF_NODE 22 idsize LEAF_NODE 18 ; SELECTION 17 KEYWORD 18 if LEAF_NODE 19 if LEAF_NODE 18 ( CONDITION 18 dsize < 0 EXPR 19 dsize < 0 FIELD 20 dsize LEAF_NODE 21 dsize REL_OPERATOR 20 < LEAF_NODE 21 < FIELD 20 0 LEAF_NODE 21 0 LEAF_NODE 18 ) STATEMENTS 18 JUMP_STATEMENT 19 goto err ; KEYWORD 20 goto LEAF_NODE 21 goto DESTINATION 20 err LEAF_NODE 21 err LEAF_NODE 20 ; EXPR_STATEMENT 17 sdata = data ; EXPR 18 sdata = data ASSIGN 19 sdata = data LVAL 20 sdata FIELD 21 sdata LEAF_NODE 22 sdata ASSIGN_OP 20 = LEAF_NODE 21 = RVAL 20 data FIELD 21 data LEAF_NODE 22 data LEAF_NODE 18 ; EXPR_STATEMENT 17 data += idsize ; EXPR 18 data += idsize ASSIGN 19 data += idsize LVAL 20 data FIELD 21 data LEAF_NODE 22 data ASSIGN_OP 20 += LEAF_NODE 21 += RVAL 20 idsize FIELD 21 idsize LEAF_NODE 22 idsize LEAF_NODE 18 ; EXPR_STATEMENT 17 id = d2i_OCSP_RESPID ( NULL , & sdata , idsize ) ; EXPR 18 id = d2i_OCSP_RESPID ( NULL , & sdata , idsize ) ASSIGN 19 id = d2i_OCSP_RESPID ( NULL , & sdata , idsize ) LVAL 20 id FIELD 21 id LEAF_NODE 22 id ASSIGN_OP 20 = LEAF_NODE 21 = RVAL 20 d2i_OCSP_RESPID ( NULL , & sdata , idsize ) FUNCTION_CALL 21 d2i_OCSP_RESPID ( NULL , & sdata , idsize ) CALLEE 22 d2i_OCSP_RESPID LEAF_NODE 23 d2i_OCSP_RESPID LEAF_NODE 22 ( ARGUMENT 22 NULL FIELD 23 NULL LEAF_NODE 24 NULL LEAF_NODE 22 , ARGUMENT 22 & sdata UNARY_EXPR 23 & sdata UNARY_OPERATOR 24 & LEAF_NODE 25 & FIELD 24 sdata LEAF_NODE 25 sdata LEAF_NODE 22 , ARGUMENT 22 idsize FIELD 23 idsize LEAF_NODE 24 idsize LEAF_NODE 22 ) LEAF_NODE 18 ; SELECTION 17 KEYWORD 18 if LEAF_NODE 19 if LEAF_NODE 18 ( CONDITION 18 ! id EXPR 19 ! id UNARY_EXPR 20 ! id UNARY_OPERATOR 21 ! LEAF_NODE 22 ! FIELD 21 id LEAF_NODE 22 id LEAF_NODE 18 ) STATEMENTS 18 JUMP_STATEMENT 19 goto err ; KEYWORD 20 goto LEAF_NODE 21 goto DESTINATION 20 err LEAF_NODE 21 err LEAF_NODE 20 ; SELECTION 17 KEYWORD 18 if LEAF_NODE 19 if LEAF_NODE 18 ( CONDITION 18 data != sdata EXPR 19 data != sdata FIELD 20 data LEAF_NODE 21 data EQ_OPERATOR 20 != LEAF_NODE 21 != FIELD 20 sdata LEAF_NODE 21 sdata LEAF_NODE 18 ) STATEMENTS 18 LEAF_NODE 19 { STATEMENTS 19 EXPR_STATEMENT 20 OCSP_RESPID_free ( id ) ; EXPR 21 OCSP_RESPID_free ( id ) FUNCTION_CALL 22 OCSP_RESPID_free ( id ) CALLEE 23 OCSP_RESPID_free LEAF_NODE 24 OCSP_RESPID_free LEAF_NODE 23 ( ARGUMENT 23 id FIELD 24 id LEAF_NODE 25 id LEAF_NODE 23 ) LEAF_NODE 21 ; JUMP_STATEMENT 20 goto err ; KEYWORD 21 goto LEAF_NODE 22 goto DESTINATION 21 err LEAF_NODE 22 err LEAF_NODE 21 ; LEAF_NODE 19 } SELECTION 17 KEYWORD 18 if LEAF_NODE 19 if LEAF_NODE 18 ( CONDITION 18 ! s -> tlsext_ocsp_ids && ! ( s -> tlsext_ocsp_ids = sk_OCSP_RESPID_new_null ( ) ) EXPR 19 ! s -> tlsext_ocsp_ids && ! ( s -> tlsext_ocsp_ids = sk_OCSP_RESPID_new_null ( ) ) AND 20 ! s -> tlsext_ocsp_ids && ! ( s -> tlsext_ocsp_ids = sk_OCSP_RESPID_new_null ( ) ) EXPR 21 ! s -> tlsext_ocsp_ids UNARY_EXPR 22 ! s -> tlsext_ocsp_ids UNARY_OPERATOR 23 ! LEAF_NODE 24 ! FIELD 23 s -> tlsext_ocsp_ids LEAF_NODE 24 s LEAF_NODE 24 -> LEAF_NODE 24 tlsext_ocsp_ids LEAF_NODE 21 && EXPR 21 ! ( s -> tlsext_ocsp_ids = sk_OCSP_RESPID_new_null ( ) ) UNARY_EXPR 22 ! ( s -> tlsext_ocsp_ids = sk_OCSP_RESPID_new_null ( ) ) UNARY_OPERATOR 23 ! LEAF_NODE 24 ! LEAF_NODE 23 ( ASSIGN 23 s -> tlsext_ocsp_ids = sk_OCSP_RESPID_new_null ( ) LVAL 24 s -> tlsext_ocsp_ids FIELD 25 s -> tlsext_ocsp_ids LEAF_NODE 26 s LEAF_NODE 26 -> LEAF_NODE 26 tlsext_ocsp_ids ASSIGN_OP 24 = LEAF_NODE 25 = RVAL 24 sk_OCSP_RESPID_new_null ( ) FUNCTION_CALL 25 sk_OCSP_RESPID_new_null ( ) CALLEE 26 sk_OCSP_RESPID_new_null LEAF_NODE 27 sk_OCSP_RESPID_new_null LEAF_NODE 26 ( LEAF_NODE 26 ) LEAF_NODE 23 ) LEAF_NODE 18 ) STATEMENTS 18 LEAF_NODE 19 { STATEMENTS 19 EXPR_STATEMENT 20 OCSP_RESPID_free ( id ) ; EXPR 21 OCSP_RESPID_free ( id ) FUNCTION_CALL 22 OCSP_RESPID_free ( id ) CALLEE 23 OCSP_RESPID_free LEAF_NODE 24 OCSP_RESPID_free LEAF_NODE 23 ( ARGUMENT 23 id FIELD 24 id LEAF_NODE 25 id LEAF_NODE 23 ) LEAF_NODE 21 ; EXPR_STATEMENT 20 * al = SSL_AD_INTERNAL_ERROR ; EXPR 21 * al = SSL_AD_INTERNAL_ERROR ASSIGN 22 * al = SSL_AD_INTERNAL_ERROR LVAL 23 * al UNARY_EXPR 24 * al UNARY_OPERATOR 25 * LEAF_NODE 26 * FIELD 25 al LEAF_NODE 26 al ASSIGN_OP 23 = LEAF_NODE 24 = RVAL 23 SSL_AD_INTERNAL_ERROR FIELD 24 SSL_AD_INTERNAL_ERROR LEAF_NODE 25 SSL_AD_INTERNAL_ERROR LEAF_NODE 21 ; JUMP_STATEMENT 20 return 0 ; KEYWORD 21 return LEAF_NODE 22 return DESTINATION 21 0 EXPR 22 0 FIELD 23 0 LEAF_NODE 24 0 LEAF_NODE 21 ; LEAF_NODE 19 } SELECTION 17 KEYWORD 18 if LEAF_NODE 19 if LEAF_NODE 18 ( CONDITION 18 ! sk_OCSP_RESPID_push ( s -> tlsext_ocsp_ids , id ) EXPR 19 ! sk_OCSP_RESPID_push ( s -> tlsext_ocsp_ids , id ) UNARY_EXPR 20 ! sk_OCSP_RESPID_push ( s -> tlsext_ocsp_ids , id ) UNARY_OPERATOR 21 ! LEAF_NODE 22 ! FUNCTION_CALL 21 sk_OCSP_RESPID_push ( s -> tlsext_ocsp_ids , id ) CALLEE 22 sk_OCSP_RESPID_push LEAF_NODE 23 sk_OCSP_RESPID_push LEAF_NODE 22 ( ARGUMENT 22 s -> tlsext_ocsp_ids FIELD 23 s -> tlsext_ocsp_ids LEAF_NODE 24 s LEAF_NODE 24 -> LEAF_NODE 24 tlsext_ocsp_ids LEAF_NODE 22 , ARGUMENT 22 id FIELD 23 id LEAF_NODE 24 id LEAF_NODE 22 ) LEAF_NODE 18 ) STATEMENTS 18 LEAF_NODE 19 { STATEMENTS 19 EXPR_STATEMENT 20 OCSP_RESPID_free ( id ) ; EXPR 21 OCSP_RESPID_free ( id ) FUNCTION_CALL 22 OCSP_RESPID_free ( id ) CALLEE 23 OCSP_RESPID_free LEAF_NODE 24 OCSP_RESPID_free LEAF_NODE 23 ( ARGUMENT 23 id FIELD 24 id LEAF_NODE 25 id LEAF_NODE 23 ) LEAF_NODE 21 ; EXPR_STATEMENT 20 * al = SSL_AD_INTERNAL_ERROR ; EXPR 21 * al = SSL_AD_INTERNAL_ERROR ASSIGN 22 * al = SSL_AD_INTERNAL_ERROR LVAL 23 * al UNARY_EXPR 24 * al UNARY_OPERATOR 25 * LEAF_NODE 26 * FIELD 25 al LEAF_NODE 26 al ASSIGN_OP 23 = LEAF_NODE 24 = RVAL 23 SSL_AD_INTERNAL_ERROR FIELD 24 SSL_AD_INTERNAL_ERROR LEAF_NODE 25 SSL_AD_INTERNAL_ERROR LEAF_NODE 21 ; JUMP_STATEMENT 20 return 0 ; KEYWORD 21 return LEAF_NODE 22 return DESTINATION 21 0 EXPR 22 0 FIELD 23 0 LEAF_NODE 24 0 LEAF_NODE 21 ; LEAF_NODE 19 } LEAF_NODE 16 } SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 size < 2 EXPR 16 size < 2 FIELD 17 size LEAF_NODE 18 size REL_OPERATOR 17 < LEAF_NODE 18 < FIELD 17 2 LEAF_NODE 18 2 LEAF_NODE 15 ) STATEMENTS 15 JUMP_STATEMENT 16 goto err ; KEYWORD 17 goto LEAF_NODE 18 goto DESTINATION 17 err LEAF_NODE 18 err LEAF_NODE 17 ; EXPR_STATEMENT 14 n2s ( data , dsize ) ; EXPR 15 n2s ( data , dsize ) FUNCTION_CALL 16 n2s ( data , dsize ) CALLEE 17 n2s LEAF_NODE 18 n2s LEAF_NODE 17 ( ARGUMENT 17 data FIELD 18 data LEAF_NODE 19 data LEAF_NODE 17 , ARGUMENT 17 dsize FIELD 18 dsize LEAF_NODE 19 dsize LEAF_NODE 17 ) LEAF_NODE 15 ; EXPR_STATEMENT 14 size -= 2 ; EXPR 15 size -= 2 ASSIGN 16 size -= 2 LVAL 17 size FIELD 18 size LEAF_NODE 19 size ASSIGN_OP 17 -= LEAF_NODE 18 -= RVAL 17 2 FIELD 18 2 LEAF_NODE 19 2 LEAF_NODE 15 ; SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 dsize != size EXPR 16 dsize != size FIELD 17 dsize LEAF_NODE 18 dsize EQ_OPERATOR 17 != LEAF_NODE 18 != FIELD 17 size LEAF_NODE 18 size LEAF_NODE 15 ) STATEMENTS 15 JUMP_STATEMENT 16 goto err ; KEYWORD 17 goto LEAF_NODE 18 goto DESTINATION 17 err LEAF_NODE 18 err LEAF_NODE 17 ; EXPR_STATEMENT 14 sdata = data ; EXPR 15 sdata = data ASSIGN 16 sdata = data LVAL 17 sdata FIELD 18 sdata LEAF_NODE 19 sdata ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 data FIELD 18 data LEAF_NODE 19 data LEAF_NODE 15 ; SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 dsize > 0 EXPR 16 dsize > 0 FIELD 17 dsize LEAF_NODE 18 dsize REL_OPERATOR 17 > LEAF_NODE 18 > FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 SELECTION 17 KEYWORD 18 if LEAF_NODE 19 if LEAF_NODE 18 ( CONDITION 18 s -> tlsext_ocsp_exts EXPR 19 s -> tlsext_ocsp_exts FIELD 20 s -> tlsext_ocsp_exts LEAF_NODE 21 s LEAF_NODE 21 -> LEAF_NODE 21 tlsext_ocsp_exts LEAF_NODE 18 ) STATEMENTS 18 LEAF_NODE 19 { STATEMENTS 19 EXPR_STATEMENT 20 sk_X509_EXTENSION_pop_free ( s -> tlsext_ocsp_exts , X509_EXTENSION_free ) ; EXPR 21 sk_X509_EXTENSION_pop_free ( s -> tlsext_ocsp_exts , X509_EXTENSION_free ) FUNCTION_CALL 22 sk_X509_EXTENSION_pop_free ( s -> tlsext_ocsp_exts , X509_EXTENSION_free ) CALLEE 23 sk_X509_EXTENSION_pop_free LEAF_NODE 24 sk_X509_EXTENSION_pop_free LEAF_NODE 23 ( ARGUMENT 23 s -> tlsext_ocsp_exts FIELD 24 s -> tlsext_ocsp_exts LEAF_NODE 25 s LEAF_NODE 25 -> LEAF_NODE 25 tlsext_ocsp_exts LEAF_NODE 23 , ARGUMENT 23 X509_EXTENSION_free FIELD 24 X509_EXTENSION_free LEAF_NODE 25 X509_EXTENSION_free LEAF_NODE 23 ) LEAF_NODE 21 ; LEAF_NODE 19 } EXPR_STATEMENT 17 s -> tlsext_ocsp_exts = d2i_X509_EXTENSIONS ( NULL , & sdata , dsize ) ; EXPR 18 s -> tlsext_ocsp_exts = d2i_X509_EXTENSIONS ( NULL , & sdata , dsize ) ASSIGN 19 s -> tlsext_ocsp_exts = d2i_X509_EXTENSIONS ( NULL , & sdata , dsize ) LVAL 20 s -> tlsext_ocsp_exts FIELD 21 s -> tlsext_ocsp_exts LEAF_NODE 22 s LEAF_NODE 22 -> LEAF_NODE 22 tlsext_ocsp_exts ASSIGN_OP 20 = LEAF_NODE 21 = RVAL 20 d2i_X509_EXTENSIONS ( NULL , & sdata , dsize ) FUNCTION_CALL 21 d2i_X509_EXTENSIONS ( NULL , & sdata , dsize ) CALLEE 22 d2i_X509_EXTENSIONS LEAF_NODE 23 d2i_X509_EXTENSIONS LEAF_NODE 22 ( ARGUMENT 22 NULL FIELD 23 NULL LEAF_NODE 24 NULL LEAF_NODE 22 , ARGUMENT 22 & sdata UNARY_EXPR 23 & sdata UNARY_OPERATOR 24 & LEAF_NODE 25 & FIELD 24 sdata LEAF_NODE 25 sdata LEAF_NODE 22 , ARGUMENT 22 dsize FIELD 23 dsize LEAF_NODE 24 dsize LEAF_NODE 22 ) LEAF_NODE 18 ; SELECTION 17 KEYWORD 18 if LEAF_NODE 19 if LEAF_NODE 18 ( CONDITION 18 ! s -> tlsext_ocsp_exts || ( data + dsize != sdata ) EXPR 19 ! s -> tlsext_ocsp_exts || ( data + dsize != sdata ) OR 20 ! s -> tlsext_ocsp_exts || ( data + dsize != sdata ) EXPR 21 ! s -> tlsext_ocsp_exts UNARY_EXPR 22 ! s -> tlsext_ocsp_exts UNARY_OPERATOR 23 ! LEAF_NODE 24 ! FIELD 23 s -> tlsext_ocsp_exts LEAF_NODE 24 s LEAF_NODE 24 -> LEAF_NODE 24 tlsext_ocsp_exts LEAF_NODE 21 || EXPR 21 ( data + dsize != sdata ) LEAF_NODE 22 ( FIELD 22 data LEAF_NODE 23 data LEAF_NODE 22 + FIELD 22 dsize LEAF_NODE 23 dsize EQ_OPERATOR 22 != LEAF_NODE 23 != FIELD 22 sdata LEAF_NODE 23 sdata LEAF_NODE 22 ) LEAF_NODE 18 ) STATEMENTS 18 JUMP_STATEMENT 19 goto err ; KEYWORD 20 goto LEAF_NODE 21 goto DESTINATION 20 err LEAF_NODE 21 err LEAF_NODE 20 ; LEAF_NODE 16 } LEAF_NODE 13 } SELECTION 11 KEYWORD 12 else LEAF_NODE 13 else STATEMENTS 12 EXPR_STATEMENT 13 s -> tlsext_status_type = - 1 ; EXPR 14 s -> tlsext_status_type = - 1 ASSIGN 15 s -> tlsext_status_type = - 1 LVAL 16 s -> tlsext_status_type FIELD 17 s -> tlsext_status_type LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 tlsext_status_type ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 - 1 UNARY_EXPR 17 - 1 UNARY_OPERATOR 18 - LEAF_NODE 19 - FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 14 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 type == TLSEXT_TYPE_heartbeat EXPR 10 type == TLSEXT_TYPE_heartbeat FIELD 11 type LEAF_NODE 12 type EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 TLSEXT_TYPE_heartbeat LEAF_NODE 12 TLSEXT_TYPE_heartbeat LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SELECTION 11 KEYWORD 12 switch LEAF_NODE 13 switch LEAF_NODE 12 ( CONDITION 12 data [ 0 ] EXPR 13 data [ 0 ] FIELD 14 data [ 0 ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ] LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 LABEL 14 case 0x01 : LEAF_NODE 15 case LEAF_NODE 15 0x01 LEAF_NODE 15 : EXPR_STATEMENT 14 s -> tlsext_heartbeat |= SSL_TLSEXT_HB_ENABLED ; EXPR 15 s -> tlsext_heartbeat |= SSL_TLSEXT_HB_ENABLED ASSIGN 16 s -> tlsext_heartbeat |= SSL_TLSEXT_HB_ENABLED LVAL 17 s -> tlsext_heartbeat FIELD 18 s -> tlsext_heartbeat LEAF_NODE 19 s LEAF_NODE 19 -> LEAF_NODE 19 tlsext_heartbeat ASSIGN_OP 17 |= LEAF_NODE 18 |= RVAL 17 SSL_TLSEXT_HB_ENABLED FIELD 18 SSL_TLSEXT_HB_ENABLED LEAF_NODE 19 SSL_TLSEXT_HB_ENABLED LEAF_NODE 15 ; JUMP_STATEMENT 14 break DESTINATION ; KEYWORD 15 break LEAF_NODE 16 break LEAF_NODE 15 DESTINATION LEAF_NODE 15 ; LABEL 14 case 0x02 : LEAF_NODE 15 case LEAF_NODE 15 0x02 LEAF_NODE 15 : EXPR_STATEMENT 14 s -> tlsext_heartbeat |= SSL_TLSEXT_HB_ENABLED ; EXPR 15 s -> tlsext_heartbeat |= SSL_TLSEXT_HB_ENABLED ASSIGN 16 s -> tlsext_heartbeat |= SSL_TLSEXT_HB_ENABLED LVAL 17 s -> tlsext_heartbeat FIELD 18 s -> tlsext_heartbeat LEAF_NODE 19 s LEAF_NODE 19 -> LEAF_NODE 19 tlsext_heartbeat ASSIGN_OP 17 |= LEAF_NODE 18 |= RVAL 17 SSL_TLSEXT_HB_ENABLED FIELD 18 SSL_TLSEXT_HB_ENABLED LEAF_NODE 19 SSL_TLSEXT_HB_ENABLED LEAF_NODE 15 ; EXPR_STATEMENT 14 s -> tlsext_heartbeat |= SSL_TLSEXT_HB_DONT_SEND_REQUESTS ; EXPR 15 s -> tlsext_heartbeat |= SSL_TLSEXT_HB_DONT_SEND_REQUESTS ASSIGN 16 s -> tlsext_heartbeat |= SSL_TLSEXT_HB_DONT_SEND_REQUESTS LVAL 17 s -> tlsext_heartbeat FIELD 18 s -> tlsext_heartbeat LEAF_NODE 19 s LEAF_NODE 19 -> LEAF_NODE 19 tlsext_heartbeat ASSIGN_OP 17 |= LEAF_NODE 18 |= RVAL 17 SSL_TLSEXT_HB_DONT_SEND_REQUESTS FIELD 18 SSL_TLSEXT_HB_DONT_SEND_REQUESTS LEAF_NODE 19 SSL_TLSEXT_HB_DONT_SEND_REQUESTS LEAF_NODE 15 ; JUMP_STATEMENT 14 break DESTINATION ; KEYWORD 15 break LEAF_NODE 16 break LEAF_NODE 15 DESTINATION LEAF_NODE 15 ; LABEL 14 default : LEAF_NODE 15 default LEAF_NODE 15 : EXPR_STATEMENT 14 * al = SSL_AD_ILLEGAL_PARAMETER ; EXPR 15 * al = SSL_AD_ILLEGAL_PARAMETER ASSIGN 16 * al = SSL_AD_ILLEGAL_PARAMETER LVAL 17 * al UNARY_EXPR 18 * al UNARY_OPERATOR 19 * LEAF_NODE 20 * FIELD 19 al LEAF_NODE 20 al ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 SSL_AD_ILLEGAL_PARAMETER FIELD 18 SSL_AD_ILLEGAL_PARAMETER LEAF_NODE 19 SSL_AD_ILLEGAL_PARAMETER LEAF_NODE 15 ; JUMP_STATEMENT 14 return 0 ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 0 EXPR 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ; LEAF_NODE 13 } LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 type == TLSEXT_TYPE_next_proto_neg && s -> s3 -> tmp . finish_md_len == 0 EXPR 10 type == TLSEXT_TYPE_next_proto_neg && s -> s3 -> tmp . finish_md_len == 0 AND 11 type == TLSEXT_TYPE_next_proto_neg && s -> s3 -> tmp . finish_md_len == 0 EXPR 12 type == TLSEXT_TYPE_next_proto_neg FIELD 13 type LEAF_NODE 14 type EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 TLSEXT_TYPE_next_proto_neg LEAF_NODE 14 TLSEXT_TYPE_next_proto_neg LEAF_NODE 12 && EXPR 12 s -> s3 -> tmp . finish_md_len == 0 FIELD 13 s -> s3 -> tmp . finish_md_len LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 s3 LEAF_NODE 14 -> LEAF_NODE 14 tmp LEAF_NODE 14 . LEAF_NODE 14 finish_md_len EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 s -> s3 -> next_proto_neg_seen = 1 ; EXPR 12 s -> s3 -> next_proto_neg_seen = 1 ASSIGN 13 s -> s3 -> next_proto_neg_seen = 1 LVAL 14 s -> s3 -> next_proto_neg_seen FIELD 15 s -> s3 -> next_proto_neg_seen LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 s3 LEAF_NODE 16 -> LEAF_NODE 16 next_proto_neg_seen ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 type == TLSEXT_TYPE_application_layer_protocol_negotiation && s -> s3 -> tmp . finish_md_len == 0 EXPR 10 type == TLSEXT_TYPE_application_layer_protocol_negotiation && s -> s3 -> tmp . finish_md_len == 0 AND 11 type == TLSEXT_TYPE_application_layer_protocol_negotiation && s -> s3 -> tmp . finish_md_len == 0 EXPR 12 type == TLSEXT_TYPE_application_layer_protocol_negotiation FIELD 13 type LEAF_NODE 14 type EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 TLSEXT_TYPE_application_layer_protocol_negotiation LEAF_NODE 14 TLSEXT_TYPE_application_layer_protocol_negotiation LEAF_NODE 12 && EXPR 12 s -> s3 -> tmp . finish_md_len == 0 FIELD 13 s -> s3 -> tmp . finish_md_len LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 s3 LEAF_NODE 14 -> LEAF_NODE 14 tmp LEAF_NODE 14 . LEAF_NODE 14 finish_md_len EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 tls1_alpn_handle_client_hello ( s , data , size , al ) != 0 EXPR 13 tls1_alpn_handle_client_hello ( s , data , size , al ) != 0 FUNCTION_CALL 14 tls1_alpn_handle_client_hello ( s , data , size , al ) CALLEE 15 tls1_alpn_handle_client_hello LEAF_NODE 16 tls1_alpn_handle_client_hello LEAF_NODE 15 ( ARGUMENT 15 s FIELD 16 s LEAF_NODE 17 s LEAF_NODE 15 , ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 , ARGUMENT 15 size FIELD 16 size LEAF_NODE 17 size LEAF_NODE 15 , ARGUMENT 15 al FIELD 16 al LEAF_NODE 17 al LEAF_NODE 15 ) EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 ) STATEMENTS 12 JUMP_STATEMENT 13 return 0 ; KEYWORD 14 return LEAF_NODE 15 return DESTINATION 14 0 EXPR 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 14 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 SSL_IS_DTLS ( s ) && SSL_get_srtp_profiles ( s ) && type == TLSEXT_TYPE_use_srtp EXPR 10 SSL_IS_DTLS ( s ) && SSL_get_srtp_profiles ( s ) && type == TLSEXT_TYPE_use_srtp AND 11 SSL_IS_DTLS ( s ) && SSL_get_srtp_profiles ( s ) && type == TLSEXT_TYPE_use_srtp EXPR 12 SSL_IS_DTLS ( s ) FUNCTION_CALL 13 SSL_IS_DTLS ( s ) CALLEE 14 SSL_IS_DTLS LEAF_NODE 15 SSL_IS_DTLS LEAF_NODE 14 ( ARGUMENT 14 s FIELD 15 s LEAF_NODE 16 s LEAF_NODE 14 ) LEAF_NODE 12 && EXPR 12 SSL_get_srtp_profiles ( s ) && type == TLSEXT_TYPE_use_srtp AND 13 SSL_get_srtp_profiles ( s ) && type == TLSEXT_TYPE_use_srtp EXPR 14 SSL_get_srtp_profiles ( s ) FUNCTION_CALL 15 SSL_get_srtp_profiles ( s ) CALLEE 16 SSL_get_srtp_profiles LEAF_NODE 17 SSL_get_srtp_profiles LEAF_NODE 16 ( ARGUMENT 16 s FIELD 17 s LEAF_NODE 18 s LEAF_NODE 16 ) LEAF_NODE 14 && EXPR 14 type == TLSEXT_TYPE_use_srtp FIELD 15 type LEAF_NODE 16 type EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 TLSEXT_TYPE_use_srtp LEAF_NODE 16 TLSEXT_TYPE_use_srtp LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ssl_parse_clienthello_use_srtp_ext ( s , data , size , al ) EXPR 13 ssl_parse_clienthello_use_srtp_ext ( s , data , size , al ) FUNCTION_CALL 14 ssl_parse_clienthello_use_srtp_ext ( s , data , size , al ) CALLEE 15 ssl_parse_clienthello_use_srtp_ext LEAF_NODE 16 ssl_parse_clienthello_use_srtp_ext LEAF_NODE 15 ( ARGUMENT 15 s FIELD 16 s LEAF_NODE 17 s LEAF_NODE 15 , ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 , ARGUMENT 15 size FIELD 16 size LEAF_NODE 17 size LEAF_NODE 15 , ARGUMENT 15 al FIELD 16 al LEAF_NODE 17 al LEAF_NODE 15 ) LEAF_NODE 12 ) STATEMENTS 12 JUMP_STATEMENT 13 return 0 ; KEYWORD 14 return LEAF_NODE 15 return DESTINATION 14 0 EXPR 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 14 ; LEAF_NODE 10 } EXPR_STATEMENT 6 data += size ; EXPR 7 data += size ASSIGN 8 data += size LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 size FIELD 10 size LEAF_NODE 11 size LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 data != limit EXPR 5 data != limit FIELD 6 data LEAF_NODE 7 data EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 limit LEAF_NODE 7 limit LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto err ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 err LEAF_NODE 7 err LEAF_NODE 6 ; EXPR_STATEMENT 3 * p = data ; EXPR 4 * p = data ASSIGN 5 * p = data LVAL 6 * p UNARY_EXPR 7 * p UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 p LEAF_NODE 9 p ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; LABEL 3 ri_check : LEAF_NODE 4 ri_check LEAF_NODE 4 : SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! renegotiate_seen && s -> renegotiate && ! ( s -> options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION ) EXPR 5 ! renegotiate_seen && s -> renegotiate && ! ( s -> options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION ) AND 6 ! renegotiate_seen && s -> renegotiate && ! ( s -> options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION ) EXPR 7 ! renegotiate_seen UNARY_EXPR 8 ! renegotiate_seen UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 renegotiate_seen LEAF_NODE 10 renegotiate_seen LEAF_NODE 7 && EXPR 7 s -> renegotiate && ! ( s -> options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION ) AND 8 s -> renegotiate && ! ( s -> options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION ) EXPR 9 s -> renegotiate FIELD 10 s -> renegotiate LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 renegotiate LEAF_NODE 9 && EXPR 9 ! ( s -> options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION ) UNARY_EXPR 10 ! ( s -> options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION ) UNARY_OPERATOR 11 ! LEAF_NODE 12 ! LEAF_NODE 11 ( FIELD 11 s -> options LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 options LEAF_NODE 11 & FIELD 11 SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION LEAF_NODE 12 SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION LEAF_NODE 11 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 * al = SSL_AD_HANDSHAKE_FAILURE ; EXPR 7 * al = SSL_AD_HANDSHAKE_FAILURE ASSIGN 8 * al = SSL_AD_HANDSHAKE_FAILURE LVAL 9 * al UNARY_EXPR 10 * al UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 al LEAF_NODE 12 al ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL_AD_HANDSHAKE_FAILURE FIELD 10 SSL_AD_HANDSHAKE_FAILURE LEAF_NODE 11 SSL_AD_HANDSHAKE_FAILURE LEAF_NODE 7 ; EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT , SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED ) ; EXPR 7 SSLerr ( SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT , SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT , SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT FIELD 10 SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT LEAF_NODE 11 SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT LEAF_NODE 9 , ARGUMENT 9 SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED FIELD 10 SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED LEAF_NODE 11 SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LABEL 3 err : LEAF_NODE 4 err LEAF_NODE 4 : EXPR_STATEMENT 3 * al = SSL_AD_DECODE_ERROR ; EXPR 4 * al = SSL_AD_DECODE_ERROR ASSIGN 5 * al = SSL_AD_DECODE_ERROR LVAL 6 * al UNARY_EXPR 7 * al UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 al LEAF_NODE 9 al ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 SSL_AD_DECODE_ERROR FIELD 7 SSL_AD_DECODE_ERROR LEAF_NODE 8 SSL_AD_DECODE_ERROR LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 15, "project": "openssl_ast_vul_function_test_7", "target": 1}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 char * save_rand_file ; VAR_DECL 2 char * save_rand_file TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 save_rand_file LEAF_NODE 4 save_rand_file LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 loadfiles LEAF_NODE 3 loadfiles PARAMETER_LIST 2 ( char * name ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * name TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 name LEAF_NODE 5 name LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * p ; VAR_DECL 4 char * p TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 4 ; SIMPLE_DECL 3 int last , int ret ; ret = 1 ; INIT_DECL_LIST 4 int last , int ret ; ret = 1 VAR_DECL 5 int last TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 last LEAF_NODE 7 last LEAF_NODE 5 , VAR_DECL 5 int ret ; ret = 1 TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 ret LEAF_NODE 7 ret LEAF_NODE 6 ; INIT 6 ret = 1 ASSIGN 7 ret = 1 LVAL 8 ret NAME 9 ret LEAF_NODE 10 ret ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; LEAF_NODE 4 CONDITION LEAF_NODE 4 ; LEAF_NODE 4 FOR_EXPR LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 last = 0 ; EXPR 7 last = 0 ASSIGN 8 last = 0 LVAL 9 last FIELD 10 last LEAF_NODE 11 last ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 p = name ; EXPR 8 p = name ASSIGN 9 p = name LVAL 10 p FIELD 11 p LEAF_NODE 12 p ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 name FIELD 11 name LEAF_NODE 12 name LEAF_NODE 8 ; CONDITION 7 * p != '\\0' && * p != LIST_SEPARATOR_CHAR EXPR 8 * p != '\\0' && * p != LIST_SEPARATOR_CHAR AND 9 * p != '\\0' && * p != LIST_SEPARATOR_CHAR EXPR 10 * p != '\\0' UNARY_EXPR 11 * p UNARY_OPERATOR 12 * LEAF_NODE 13 * FIELD 12 p LEAF_NODE 13 p EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 '\\0' LEAF_NODE 12 '\\0' LEAF_NODE 10 && EXPR 10 * p != LIST_SEPARATOR_CHAR UNARY_EXPR 11 * p UNARY_OPERATOR 12 * LEAF_NODE 13 * FIELD 12 p LEAF_NODE 13 p EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 LIST_SEPARATOR_CHAR LEAF_NODE 12 LIST_SEPARATOR_CHAR LEAF_NODE 7 ; FOR_EXPR 7 p ++ EXPR 8 p ++ FIELD 9 p ++ LEAF_NODE 10 p LEAF_NODE 10 ++ LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 continue DESTINATION ; KEYWORD 9 continue LEAF_NODE 10 continue LEAF_NODE 9 DESTINATION LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * p == '\\0' EXPR 8 * p == '\\0' UNARY_EXPR 9 * p UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 p LEAF_NODE 11 p EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 last = 1 ; EXPR 9 last = 1 ASSIGN 10 last = 1 LVAL 11 last FIELD 12 last LEAF_NODE 13 last ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; EXPR_STATEMENT 6 * p = '\\0' ; EXPR 7 * p = '\\0' ASSIGN 8 * p = '\\0' LVAL 9 * p UNARY_EXPR 10 * p UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 p LEAF_NODE 12 p ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 RAND_load_file ( name , - 1 ) < 0 EXPR 8 RAND_load_file ( name , - 1 ) < 0 FUNCTION_CALL 9 RAND_load_file ( name , - 1 ) CALLEE 10 RAND_load_file LEAF_NODE 11 RAND_load_file LEAF_NODE 10 ( ARGUMENT 10 name FIELD 11 name LEAF_NODE 12 name LEAF_NODE 10 , ARGUMENT 10 - 1 UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 10 ) REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_printf ( bio_err , \"Can't load %s into RNG\\n\" , name ) ; EXPR 10 BIO_printf ( bio_err , \"Can't load %s into RNG\\n\" , name ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"Can't load %s into RNG\\n\" , name ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"Can't load %s into RNG\\n\" FIELD 13 \"Can't load %s into RNG\\n\" LEAF_NODE 14 \"Can't load %s into RNG\\n\" LEAF_NODE 12 , ARGUMENT 12 name FIELD 13 name LEAF_NODE 14 name LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ERR_print_errors ( bio_err ) ; EXPR 10 ERR_print_errors ( bio_err ) FUNCTION_CALL 11 ERR_print_errors ( bio_err ) CALLEE 12 ERR_print_errors LEAF_NODE 13 ERR_print_errors LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ret = 0 ; EXPR 10 ret = 0 ASSIGN 11 ret = 0 LVAL 12 ret FIELD 13 ret LEAF_NODE 14 ret ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 last EXPR 8 last FIELD 9 last LEAF_NODE 10 last LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 break DESTINATION ; KEYWORD 9 break LEAF_NODE 10 break LEAF_NODE 9 DESTINATION LEAF_NODE 9 ; EXPR_STATEMENT 6 name = p + 1 ; EXPR 7 name = p + 1 ASSIGN 8 name = p + 1 LVAL 9 name FIELD 10 name LEAF_NODE 11 name ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 p + 1 FIELD 10 p LEAF_NODE 11 p LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * name == '\\0' EXPR 8 * name == '\\0' UNARY_EXPR 9 * name UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 name LEAF_NODE 11 name EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 break DESTINATION ; KEYWORD 9 break LEAF_NODE 10 break LEAF_NODE 9 DESTINATION LEAF_NODE 9 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return ret ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ret EXPR 5 ret FIELD 6 ret LEAF_NODE 7 ret LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 16, "project": "openssl_ast_normal_function_test_32", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS ; VAR_DECL 2 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS TYPE 3 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } CLASS_DEF 4 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } LEAF_NODE 5 struct CLASS_NAME 5 args_st LEAF_NODE 6 args_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int size ; int argc ; char * argv ; SIMPLE_DECL 6 int size ; VAR_DECL 7 int size TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 size LEAF_NODE 9 size LEAF_NODE 7 ; SIMPLE_DECL 6 int argc ; VAR_DECL 7 int argc TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 argc LEAF_NODE 9 argc LEAF_NODE 7 ; SIMPLE_DECL 6 char * argv ; VAR_DECL 7 char * argv TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 argv LEAF_NODE 9 argv LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 ARGS LEAF_NODE 4 ARGS LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned long nmflag ; nmflag = 0 ; VAR_DECL 2 unsigned long nmflag ; nmflag = 0 TYPE 3 unsigned long TYPE_NAME 4 unsigned long LEAF_NODE 5 unsigned LEAF_NODE 5 long NAME 3 nmflag LEAF_NODE 4 nmflag LEAF_NODE 3 ; INIT 3 nmflag = 0 ASSIGN 4 nmflag = 0 LVAL 5 nmflag NAME 6 nmflag LEAF_NODE 7 nmflag ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; SIMPLE_DECL 1 void DIST_POINT_free ; DIST_POINT_free DIST_POINT_free ( DIST_POINT * a ) ; VAR_DECL 2 void DIST_POINT_free ; DIST_POINT_free DIST_POINT_free ( DIST_POINT * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 DIST_POINT_free LEAF_NODE 4 DIST_POINT_free LEAF_NODE 3 ; INIT 3 DIST_POINT_free DIST_POINT_free ( DIST_POINT * a ) ASSIGN 4 DIST_POINT_free DIST_POINT_free ( DIST_POINT * a ) LVAL 5 DIST_POINT_free NAME 6 DIST_POINT_free LEAF_NODE 7 DIST_POINT_free ASSIGN_OP 5 DIST_POINT_free NAME 6 DIST_POINT_free LEAF_NODE 7 DIST_POINT_free RVAL 5 ( DIST_POINT * a ) LEAF_NODE 6 ( EXPR 6 DIST_POINT * a FIELD 7 DIST_POINT LEAF_NODE 8 DIST_POINT LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 * LEAF_NODE 3 * FUNCTION_NAME 2 crls_http_cb LEAF_NODE 3 crls_http_cb PARAMETER_LIST 2 ( X509_STORE_CTX * ctx , X509_NAME * nm ) LEAF_NODE 3 ( PARAMETER_DECL 3 X509_STORE_CTX * ctx TYPE 4 X509_STORE_CTX * TYPE_NAME 5 X509_STORE_CTX LEAF_NODE 6 X509_STORE_CTX POINTER 5 * LEAF_NODE 6 * NAME 4 ctx LEAF_NODE 5 ctx LEAF_NODE 3 , PARAMETER_DECL 3 X509_NAME * nm TYPE 4 X509_NAME * TYPE_NAME 5 X509_NAME LEAF_NODE 6 X509_NAME POINTER 5 * LEAF_NODE 6 * NAME 4 nm LEAF_NODE 5 nm LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 X509 * x ; VAR_DECL 4 X509 * x TYPE 5 X509 * TYPE_NAME 6 X509 LEAF_NODE 7 X509 POINTER 6 * LEAF_NODE 7 * NAME 5 x LEAF_NODE 6 x LEAF_NODE 4 ; EXPR_STATEMENT 3 STACK_OF ( X509_CRL ) * crls = NULL ; EXPR 4 STACK_OF ( X509_CRL ) * crls = NULL ASSIGN 5 STACK_OF ( X509_CRL ) * crls = NULL LVAL 6 STACK_OF ( X509_CRL ) * crls FUNCTION_CALL 7 STACK_OF ( X509_CRL ) CALLEE 8 STACK_OF LEAF_NODE 9 STACK_OF LEAF_NODE 8 ( ARGUMENT 8 X509_CRL FIELD 9 X509_CRL LEAF_NODE 10 X509_CRL LEAF_NODE 8 ) LEAF_NODE 7 * FIELD 7 crls LEAF_NODE 8 crls ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 X509_CRL * crl ; VAR_DECL 4 X509_CRL * crl TYPE 5 X509_CRL * TYPE_NAME 6 X509_CRL LEAF_NODE 7 X509_CRL POINTER 6 * LEAF_NODE 7 * NAME 5 crl LEAF_NODE 6 crl LEAF_NODE 4 ; EXPR_STATEMENT 3 STACK_OF ( DIST_POINT ) * crldp ; EXPR 4 STACK_OF ( DIST_POINT ) * crldp FUNCTION_CALL 5 STACK_OF ( DIST_POINT ) CALLEE 6 STACK_OF LEAF_NODE 7 STACK_OF LEAF_NODE 6 ( ARGUMENT 6 DIST_POINT FIELD 7 DIST_POINT LEAF_NODE 8 DIST_POINT LEAF_NODE 6 ) LEAF_NODE 5 * FIELD 5 crldp LEAF_NODE 6 crldp LEAF_NODE 4 ; EXPR_STATEMENT 3 crls = sk_X509_CRL_new_null ( ) ; EXPR 4 crls = sk_X509_CRL_new_null ( ) ASSIGN 5 crls = sk_X509_CRL_new_null ( ) LVAL 6 crls FIELD 7 crls LEAF_NODE 8 crls ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 sk_X509_CRL_new_null ( ) FUNCTION_CALL 7 sk_X509_CRL_new_null ( ) CALLEE 8 sk_X509_CRL_new_null LEAF_NODE 9 sk_X509_CRL_new_null LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! crls EXPR 5 ! crls UNARY_EXPR 6 ! crls UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 crls LEAF_NODE 8 crls LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return NULL ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 NULL EXPR 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 6 ; EXPR_STATEMENT 3 x = X509_STORE_CTX_get_current_cert ( ctx ) ; EXPR 4 x = X509_STORE_CTX_get_current_cert ( ctx ) ASSIGN 5 x = X509_STORE_CTX_get_current_cert ( ctx ) LVAL 6 x FIELD 7 x LEAF_NODE 8 x ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 X509_STORE_CTX_get_current_cert ( ctx ) FUNCTION_CALL 7 X509_STORE_CTX_get_current_cert ( ctx ) CALLEE 8 X509_STORE_CTX_get_current_cert LEAF_NODE 9 X509_STORE_CTX_get_current_cert LEAF_NODE 8 ( ARGUMENT 8 ctx FIELD 9 ctx LEAF_NODE 10 ctx LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 crldp = X509_get_ext_d2i ( x , NID_crl_distribution_points , NULL , NULL ) ; EXPR 4 crldp = X509_get_ext_d2i ( x , NID_crl_distribution_points , NULL , NULL ) ASSIGN 5 crldp = X509_get_ext_d2i ( x , NID_crl_distribution_points , NULL , NULL ) LVAL 6 crldp FIELD 7 crldp LEAF_NODE 8 crldp ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 X509_get_ext_d2i ( x , NID_crl_distribution_points , NULL , NULL ) FUNCTION_CALL 7 X509_get_ext_d2i ( x , NID_crl_distribution_points , NULL , NULL ) CALLEE 8 X509_get_ext_d2i LEAF_NODE 9 X509_get_ext_d2i LEAF_NODE 8 ( ARGUMENT 8 x FIELD 9 x LEAF_NODE 10 x LEAF_NODE 8 , ARGUMENT 8 NID_crl_distribution_points FIELD 9 NID_crl_distribution_points LEAF_NODE 10 NID_crl_distribution_points LEAF_NODE 8 , ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 , ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 crl = load_crl_crldp ( crldp ) ; EXPR 4 crl = load_crl_crldp ( crldp ) ASSIGN 5 crl = load_crl_crldp ( crldp ) LVAL 6 crl FIELD 7 crl LEAF_NODE 8 crl ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 load_crl_crldp ( crldp ) FUNCTION_CALL 7 load_crl_crldp ( crldp ) CALLEE 8 load_crl_crldp LEAF_NODE 9 load_crl_crldp LEAF_NODE 8 ( ARGUMENT 8 crldp FIELD 9 crldp LEAF_NODE 10 crldp LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 sk_DIST_POINT_pop_free ( crldp , DIST_POINT_free ) ; EXPR 4 sk_DIST_POINT_pop_free ( crldp , DIST_POINT_free ) FUNCTION_CALL 5 sk_DIST_POINT_pop_free ( crldp , DIST_POINT_free ) CALLEE 6 sk_DIST_POINT_pop_free LEAF_NODE 7 sk_DIST_POINT_pop_free LEAF_NODE 6 ( ARGUMENT 6 crldp FIELD 7 crldp LEAF_NODE 8 crldp LEAF_NODE 6 , ARGUMENT 6 DIST_POINT_free FIELD 7 DIST_POINT_free LEAF_NODE 8 DIST_POINT_free LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! crl EXPR 5 ! crl UNARY_EXPR 6 ! crl UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 crl LEAF_NODE 8 crl LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 sk_X509_CRL_free ( crls ) ; EXPR 7 sk_X509_CRL_free ( crls ) FUNCTION_CALL 8 sk_X509_CRL_free ( crls ) CALLEE 9 sk_X509_CRL_free LEAF_NODE 10 sk_X509_CRL_free LEAF_NODE 9 ( ARGUMENT 9 crls FIELD 10 crls LEAF_NODE 11 crls LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return NULL ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 NULL EXPR 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 sk_X509_CRL_push ( crls , crl ) ; EXPR 4 sk_X509_CRL_push ( crls , crl ) FUNCTION_CALL 5 sk_X509_CRL_push ( crls , crl ) CALLEE 6 sk_X509_CRL_push LEAF_NODE 7 sk_X509_CRL_push LEAF_NODE 6 ( ARGUMENT 6 crls FIELD 7 crls LEAF_NODE 8 crls LEAF_NODE 6 , ARGUMENT 6 crl FIELD 7 crl LEAF_NODE 8 crl LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 crldp = X509_get_ext_d2i ( x , NID_freshest_crl , NULL , NULL ) ; EXPR 4 crldp = X509_get_ext_d2i ( x , NID_freshest_crl , NULL , NULL ) ASSIGN 5 crldp = X509_get_ext_d2i ( x , NID_freshest_crl , NULL , NULL ) LVAL 6 crldp FIELD 7 crldp LEAF_NODE 8 crldp ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 X509_get_ext_d2i ( x , NID_freshest_crl , NULL , NULL ) FUNCTION_CALL 7 X509_get_ext_d2i ( x , NID_freshest_crl , NULL , NULL ) CALLEE 8 X509_get_ext_d2i LEAF_NODE 9 X509_get_ext_d2i LEAF_NODE 8 ( ARGUMENT 8 x FIELD 9 x LEAF_NODE 10 x LEAF_NODE 8 , ARGUMENT 8 NID_freshest_crl FIELD 9 NID_freshest_crl LEAF_NODE 10 NID_freshest_crl LEAF_NODE 8 , ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 , ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 crl = load_crl_crldp ( crldp ) ; EXPR 4 crl = load_crl_crldp ( crldp ) ASSIGN 5 crl = load_crl_crldp ( crldp ) LVAL 6 crl FIELD 7 crl LEAF_NODE 8 crl ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 load_crl_crldp ( crldp ) FUNCTION_CALL 7 load_crl_crldp ( crldp ) CALLEE 8 load_crl_crldp LEAF_NODE 9 load_crl_crldp LEAF_NODE 8 ( ARGUMENT 8 crldp FIELD 9 crldp LEAF_NODE 10 crldp LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 sk_DIST_POINT_pop_free ( crldp , DIST_POINT_free ) ; EXPR 4 sk_DIST_POINT_pop_free ( crldp , DIST_POINT_free ) FUNCTION_CALL 5 sk_DIST_POINT_pop_free ( crldp , DIST_POINT_free ) CALLEE 6 sk_DIST_POINT_pop_free LEAF_NODE 7 sk_DIST_POINT_pop_free LEAF_NODE 6 ( ARGUMENT 6 crldp FIELD 7 crldp LEAF_NODE 8 crldp LEAF_NODE 6 , ARGUMENT 6 DIST_POINT_free FIELD 7 DIST_POINT_free LEAF_NODE 8 DIST_POINT_free LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 crl EXPR 5 crl FIELD 6 crl LEAF_NODE 7 crl LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 sk_X509_CRL_push ( crls , crl ) ; EXPR 6 sk_X509_CRL_push ( crls , crl ) FUNCTION_CALL 7 sk_X509_CRL_push ( crls , crl ) CALLEE 8 sk_X509_CRL_push LEAF_NODE 9 sk_X509_CRL_push LEAF_NODE 8 ( ARGUMENT 8 crls FIELD 9 crls LEAF_NODE 10 crls LEAF_NODE 8 , ARGUMENT 8 crl FIELD 9 crl LEAF_NODE 10 crl LEAF_NODE 8 ) LEAF_NODE 6 ; JUMP_STATEMENT 3 return crls ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 crls EXPR 5 crls FIELD 6 crls LEAF_NODE 7 crls LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 store_setup_crl_download LEAF_NODE 3 store_setup_crl_download PARAMETER_LIST 2 ( X509_STORE * st ) LEAF_NODE 3 ( PARAMETER_DECL 3 X509_STORE * st TYPE 4 X509_STORE * TYPE_NAME 5 X509_STORE LEAF_NODE 6 X509_STORE POINTER 5 * LEAF_NODE 6 * NAME 4 st LEAF_NODE 5 st LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 X509_STORE_set_lookup_crls_cb ( st , crls_http_cb ) ; EXPR 4 X509_STORE_set_lookup_crls_cb ( st , crls_http_cb ) FUNCTION_CALL 5 X509_STORE_set_lookup_crls_cb ( st , crls_http_cb ) CALLEE 6 X509_STORE_set_lookup_crls_cb LEAF_NODE 7 X509_STORE_set_lookup_crls_cb LEAF_NODE 6 ( ARGUMENT 6 st FIELD 7 st LEAF_NODE 8 st LEAF_NODE 6 , ARGUMENT 6 crls_http_cb FIELD 7 crls_http_cb LEAF_NODE 8 crls_http_cb LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 17, "project": "openssl_ast_normal_function_test_4", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 OPENSSL_hexchar2int LEAF_NODE 3 OPENSSL_hexchar2int PARAMETER_LIST 2 ( unsigned char c ) LEAF_NODE 3 ( PARAMETER_DECL 3 unsigned char c TYPE 4 unsigned char TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 c = os_toebcdic [ c ] ; EXPR 4 c = os_toebcdic [ c ] ASSIGN 5 c = os_toebcdic [ c ] LVAL 6 c FIELD 7 c LEAF_NODE 8 c ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 os_toebcdic [ c ] FIELD 7 os_toebcdic [ c ] LEAF_NODE 8 os_toebcdic LEAF_NODE 8 [ EXPR 8 c FIELD 9 c LEAF_NODE 10 c LEAF_NODE 8 ] LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 c EXPR 5 c FIELD 6 c LEAF_NODE 7 c LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 case LEAF_NODE 6 '0' LEAF_NODE 6 : JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 6 case LEAF_NODE 6 '1' LEAF_NODE 6 : JUMP_STATEMENT 6 return 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 1 EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ; LEAF_NODE 6 case LEAF_NODE 6 '2' LEAF_NODE 6 : JUMP_STATEMENT 6 return 2 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 2 EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 7 ; LEAF_NODE 6 case LEAF_NODE 6 '3' LEAF_NODE 6 : JUMP_STATEMENT 6 return 3 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 3 EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 7 ; LEAF_NODE 6 case LEAF_NODE 6 '4' LEAF_NODE 6 : JUMP_STATEMENT 6 return 4 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 4 EXPR 8 4 FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 7 ; LEAF_NODE 6 case LEAF_NODE 6 '5' LEAF_NODE 6 : JUMP_STATEMENT 6 return 5 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 5 EXPR 8 5 FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 7 ; LEAF_NODE 6 case LEAF_NODE 6 '6' LEAF_NODE 6 : JUMP_STATEMENT 6 return 6 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 6 EXPR 8 6 FIELD 9 6 LEAF_NODE 10 6 LEAF_NODE 7 ; LEAF_NODE 6 case LEAF_NODE 6 '7' LEAF_NODE 6 : JUMP_STATEMENT 6 return 7 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 7 EXPR 8 7 FIELD 9 7 LEAF_NODE 10 7 LEAF_NODE 7 ; LEAF_NODE 6 case LEAF_NODE 6 '8' LEAF_NODE 6 : JUMP_STATEMENT 6 return 8 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 8 EXPR 8 8 FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 7 ; LEAF_NODE 6 case LEAF_NODE 6 '9' LEAF_NODE 6 : JUMP_STATEMENT 6 return 9 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 9 EXPR 8 9 FIELD 9 9 LEAF_NODE 10 9 LEAF_NODE 7 ; LEAF_NODE 6 case LEAF_NODE 6 'a' LEAF_NODE 6 : LEAF_NODE 6 case LEAF_NODE 6 'A' LEAF_NODE 6 : JUMP_STATEMENT 6 return 0x0A ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0x0A EXPR 8 0x0A FIELD 9 0x0A LEAF_NODE 10 0x0A LEAF_NODE 7 ; LEAF_NODE 6 case LEAF_NODE 6 'b' LEAF_NODE 6 : LEAF_NODE 6 case LEAF_NODE 6 'B' LEAF_NODE 6 : JUMP_STATEMENT 6 return 0x0B ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0x0B EXPR 8 0x0B FIELD 9 0x0B LEAF_NODE 10 0x0B LEAF_NODE 7 ; LEAF_NODE 6 case LEAF_NODE 6 'c' LEAF_NODE 6 : LEAF_NODE 6 case LEAF_NODE 6 'C' LEAF_NODE 6 : JUMP_STATEMENT 6 return 0x0C ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0x0C EXPR 8 0x0C FIELD 9 0x0C LEAF_NODE 10 0x0C LEAF_NODE 7 ; LEAF_NODE 6 case LEAF_NODE 6 'd' LEAF_NODE 6 : LEAF_NODE 6 case LEAF_NODE 6 'D' LEAF_NODE 6 : JUMP_STATEMENT 6 return 0x0D ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0x0D EXPR 8 0x0D FIELD 9 0x0D LEAF_NODE 10 0x0D LEAF_NODE 7 ; LEAF_NODE 6 case LEAF_NODE 6 'e' LEAF_NODE 6 : LEAF_NODE 6 case LEAF_NODE 6 'E' LEAF_NODE 6 : JUMP_STATEMENT 6 return 0x0E ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0x0E EXPR 8 0x0E FIELD 9 0x0E LEAF_NODE 10 0x0E LEAF_NODE 7 ; LEAF_NODE 6 case LEAF_NODE 6 'f' LEAF_NODE 6 : LEAF_NODE 6 case LEAF_NODE 6 'F' LEAF_NODE 6 : JUMP_STATEMENT 6 return 0x0F ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0x0F EXPR 8 0x0F FIELD 9 0x0F LEAF_NODE 10 0x0F LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return - 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 - 1 EXPR 5 - 1 UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 18, "project": "openssl_ast_normal_function_test_88", "target": 0}
{"func": "SIMPLE_DECL 1 unsigned char [ 8 ] DES_cblock ; VAR_DECL 2 unsigned char [ 8 ] DES_cblock TYPE 3 unsigned char [ 8 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 8 ] LEAF_NODE 5 [ FIELD 5 8 LEAF_NODE 6 8 LEAF_NODE 5 ] NAME 3 DES_cblock LEAF_NODE 4 DES_cblock LEAF_NODE 2 ; SIMPLE_DECL 1 struct mdc2_ctx_st BASE_CLASSES { unsigned int num ; unsigned char [ MDC2_BLOCK ] data ; DES_cblock h , DES_cblock hh ; int pad_type ; } MDC2_CTX ; VAR_DECL 2 struct mdc2_ctx_st BASE_CLASSES { unsigned int num ; unsigned char [ MDC2_BLOCK ] data ; DES_cblock h , DES_cblock hh ; int pad_type ; } MDC2_CTX TYPE 3 struct mdc2_ctx_st BASE_CLASSES { unsigned int num ; unsigned char [ MDC2_BLOCK ] data ; DES_cblock h , DES_cblock hh ; int pad_type ; } CLASS_DEF 4 struct mdc2_ctx_st BASE_CLASSES { unsigned int num ; unsigned char [ MDC2_BLOCK ] data ; DES_cblock h , DES_cblock hh ; int pad_type ; } LEAF_NODE 5 struct CLASS_NAME 5 mdc2_ctx_st LEAF_NODE 6 mdc2_ctx_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned int num ; unsigned char [ MDC2_BLOCK ] data ; DES_cblock h , DES_cblock hh ; int pad_type ; SIMPLE_DECL 6 unsigned int num ; VAR_DECL 7 unsigned int num TYPE 8 unsigned int TYPE_NAME 9 unsigned int LEAF_NODE 10 unsigned LEAF_NODE 10 int NAME 8 num LEAF_NODE 9 num LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ MDC2_BLOCK ] data ; VAR_DECL 7 unsigned char [ MDC2_BLOCK ] data TYPE 8 unsigned char [ MDC2_BLOCK ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ MDC2_BLOCK ] LEAF_NODE 10 [ FIELD 10 MDC2_BLOCK LEAF_NODE 11 MDC2_BLOCK LEAF_NODE 10 ] NAME 8 data LEAF_NODE 9 data LEAF_NODE 7 ; SIMPLE_DECL 6 DES_cblock h , DES_cblock hh ; INIT_DECL_LIST 7 DES_cblock h , DES_cblock hh VAR_DECL 8 DES_cblock h TYPE 9 DES_cblock TYPE_NAME 10 DES_cblock LEAF_NODE 11 DES_cblock NAME 9 h LEAF_NODE 10 h LEAF_NODE 8 , VAR_DECL 8 DES_cblock hh TYPE 9 DES_cblock TYPE_NAME 10 DES_cblock LEAF_NODE 11 DES_cblock NAME 9 hh LEAF_NODE 10 hh LEAF_NODE 7 ; SIMPLE_DECL 6 int pad_type ; VAR_DECL 7 int pad_type TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 pad_type LEAF_NODE 9 pad_type LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 MDC2_CTX LEAF_NODE 4 MDC2_CTX LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 MDC2_Update LEAF_NODE 3 MDC2_Update PARAMETER_LIST 2 ( MDC2_CTX * c , const unsigned char * in , size_t len ) LEAF_NODE 3 ( PARAMETER_DECL 3 MDC2_CTX * c TYPE 4 MDC2_CTX * TYPE_NAME 5 MDC2_CTX LEAF_NODE 6 MDC2_CTX POINTER 5 * LEAF_NODE 6 * NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 const unsigned char * in TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 in LEAF_NODE 5 in LEAF_NODE 3 , PARAMETER_DECL 3 size_t len TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t i , size_t j ; INIT_DECL_LIST 4 size_t i , size_t j VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 , VAR_DECL 5 size_t j TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 j LEAF_NODE 7 j LEAF_NODE 4 ; EXPR_STATEMENT 3 i = c -> num ; EXPR 4 i = c -> num ASSIGN 5 i = c -> num LVAL 6 i FIELD 7 i LEAF_NODE 8 i ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 c -> num FIELD 7 c -> num LEAF_NODE 8 c LEAF_NODE 8 -> LEAF_NODE 8 num LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 i != 0 EXPR 5 i != 0 FIELD 6 i LEAF_NODE 7 i EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 i + len < MDC2_BLOCK EXPR 8 i + len < MDC2_BLOCK FIELD 9 i LEAF_NODE 10 i LEAF_NODE 9 + FIELD 9 len LEAF_NODE 10 len REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 MDC2_BLOCK LEAF_NODE 10 MDC2_BLOCK LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 memcpy ( & ( c -> data [ i ] ) , in , len ) ; EXPR 10 memcpy ( & ( c -> data [ i ] ) , in , len ) FUNCTION_CALL 11 memcpy ( & ( c -> data [ i ] ) , in , len ) CALLEE 12 memcpy LEAF_NODE 13 memcpy LEAF_NODE 12 ( ARGUMENT 12 & ( c -> data [ i ] ) UNARY_EXPR 13 & ( c -> data [ i ] ) UNARY_OPERATOR 14 & LEAF_NODE 15 & LEAF_NODE 14 ( FIELD 14 c -> data [ i ] LEAF_NODE 15 c LEAF_NODE 15 -> LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 i FIELD 16 i LEAF_NODE 17 i LEAF_NODE 15 ] LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 in FIELD 13 in LEAF_NODE 14 in LEAF_NODE 12 , ARGUMENT 12 len FIELD 13 len LEAF_NODE 14 len LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 c -> num += ( int ) len ; EXPR 10 c -> num += ( int ) len ASSIGN 11 c -> num += ( int ) len LVAL 12 c -> num FIELD 13 c -> num LEAF_NODE 14 c LEAF_NODE 14 -> LEAF_NODE 14 num ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 ( int ) len LEAF_NODE 13 ( TYPE_NAME 13 int LEAF_NODE 14 int LEAF_NODE 13 ) FIELD 13 len LEAF_NODE 14 len LEAF_NODE 10 ; JUMP_STATEMENT 9 return 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 1 EXPR 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 j = MDC2_BLOCK - i ; EXPR 10 j = MDC2_BLOCK - i ASSIGN 11 j = MDC2_BLOCK - i LVAL 12 j FIELD 13 j LEAF_NODE 14 j ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 MDC2_BLOCK - i FIELD 13 MDC2_BLOCK LEAF_NODE 14 MDC2_BLOCK LEAF_NODE 13 - FIELD 13 i LEAF_NODE 14 i LEAF_NODE 10 ; EXPR_STATEMENT 9 memcpy ( & ( c -> data [ i ] ) , in , j ) ; EXPR 10 memcpy ( & ( c -> data [ i ] ) , in , j ) FUNCTION_CALL 11 memcpy ( & ( c -> data [ i ] ) , in , j ) CALLEE 12 memcpy LEAF_NODE 13 memcpy LEAF_NODE 12 ( ARGUMENT 12 & ( c -> data [ i ] ) UNARY_EXPR 13 & ( c -> data [ i ] ) UNARY_OPERATOR 14 & LEAF_NODE 15 & LEAF_NODE 14 ( FIELD 14 c -> data [ i ] LEAF_NODE 15 c LEAF_NODE 15 -> LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 i FIELD 16 i LEAF_NODE 17 i LEAF_NODE 15 ] LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 in FIELD 13 in LEAF_NODE 14 in LEAF_NODE 12 , ARGUMENT 12 j FIELD 13 j LEAF_NODE 14 j LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 len -= j ; EXPR 10 len -= j ASSIGN 11 len -= j LVAL 12 len FIELD 13 len LEAF_NODE 14 len ASSIGN_OP 12 -= LEAF_NODE 13 -= RVAL 12 j FIELD 13 j LEAF_NODE 14 j LEAF_NODE 10 ; EXPR_STATEMENT 9 in += j ; EXPR 10 in += j ASSIGN 11 in += j LVAL 12 in FIELD 13 in LEAF_NODE 14 in ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 j FIELD 13 j LEAF_NODE 14 j LEAF_NODE 10 ; EXPR_STATEMENT 9 c -> num = 0 ; EXPR 10 c -> num = 0 ASSIGN 11 c -> num = 0 LVAL 12 c -> num FIELD 13 c -> num LEAF_NODE 14 c LEAF_NODE 14 -> LEAF_NODE 14 num ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 mdc2_body ( c , & ( c -> data [ 0 ] ) , MDC2_BLOCK ) ; EXPR 10 mdc2_body ( c , & ( c -> data [ 0 ] ) , MDC2_BLOCK ) FUNCTION_CALL 11 mdc2_body ( c , & ( c -> data [ 0 ] ) , MDC2_BLOCK ) CALLEE 12 mdc2_body LEAF_NODE 13 mdc2_body LEAF_NODE 12 ( ARGUMENT 12 c FIELD 13 c LEAF_NODE 14 c LEAF_NODE 12 , ARGUMENT 12 & ( c -> data [ 0 ] ) UNARY_EXPR 13 & ( c -> data [ 0 ] ) UNARY_OPERATOR 14 & LEAF_NODE 15 & LEAF_NODE 14 ( FIELD 14 c -> data [ 0 ] LEAF_NODE 15 c LEAF_NODE 15 -> LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ] LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 MDC2_BLOCK FIELD 13 MDC2_BLOCK LEAF_NODE 14 MDC2_BLOCK LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 i = len & ~ ( ( size_t ) MDC2_BLOCK - 1 ) ; EXPR 4 i = len & ~ ( ( size_t ) MDC2_BLOCK - 1 ) ASSIGN 5 i = len & ~ ( ( size_t ) MDC2_BLOCK - 1 ) LVAL 6 i FIELD 7 i LEAF_NODE 8 i ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 len & ~ ( ( size_t ) MDC2_BLOCK - 1 ) FIELD 7 len LEAF_NODE 8 len LEAF_NODE 7 & UNARY_EXPR 7 ~ ( ( size_t ) MDC2_BLOCK - 1 ) UNARY_OPERATOR 8 ~ LEAF_NODE 9 ~ LEAF_NODE 8 ( LEAF_NODE 8 ( TYPE_NAME 8 size_t LEAF_NODE 9 size_t LEAF_NODE 8 ) FIELD 8 MDC2_BLOCK LEAF_NODE 9 MDC2_BLOCK LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 i > 0 EXPR 5 i > 0 FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 mdc2_body ( c , in , i ) ; EXPR 6 mdc2_body ( c , in , i ) FUNCTION_CALL 7 mdc2_body ( c , in , i ) CALLEE 8 mdc2_body LEAF_NODE 9 mdc2_body LEAF_NODE 8 ( ARGUMENT 8 c FIELD 9 c LEAF_NODE 10 c LEAF_NODE 8 , ARGUMENT 8 in FIELD 9 in LEAF_NODE 10 in LEAF_NODE 8 , ARGUMENT 8 i FIELD 9 i LEAF_NODE 10 i LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 3 j = len - i ; EXPR 4 j = len - i ASSIGN 5 j = len - i LVAL 6 j FIELD 7 j LEAF_NODE 8 j ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 len - i FIELD 7 len LEAF_NODE 8 len LEAF_NODE 7 - FIELD 7 i LEAF_NODE 8 i LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 j > 0 EXPR 5 j > 0 FIELD 6 j LEAF_NODE 7 j REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 memcpy ( & ( c -> data [ 0 ] ) , & ( in [ i ] ) , j ) ; EXPR 7 memcpy ( & ( c -> data [ 0 ] ) , & ( in [ i ] ) , j ) FUNCTION_CALL 8 memcpy ( & ( c -> data [ 0 ] ) , & ( in [ i ] ) , j ) CALLEE 9 memcpy LEAF_NODE 10 memcpy LEAF_NODE 9 ( ARGUMENT 9 & ( c -> data [ 0 ] ) UNARY_EXPR 10 & ( c -> data [ 0 ] ) UNARY_OPERATOR 11 & LEAF_NODE 12 & LEAF_NODE 11 ( FIELD 11 c -> data [ 0 ] LEAF_NODE 12 c LEAF_NODE 12 -> LEAF_NODE 12 data LEAF_NODE 12 [ EXPR 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ] LEAF_NODE 11 ) LEAF_NODE 9 , ARGUMENT 9 & ( in [ i ] ) UNARY_EXPR 10 & ( in [ i ] ) UNARY_OPERATOR 11 & LEAF_NODE 12 & LEAF_NODE 11 ( FIELD 11 in [ i ] LEAF_NODE 12 in LEAF_NODE 12 [ EXPR 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 12 ] LEAF_NODE 11 ) LEAF_NODE 9 , ARGUMENT 9 j FIELD 10 j LEAF_NODE 11 j LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 c -> num = ( int ) j ; EXPR 7 c -> num = ( int ) j ASSIGN 8 c -> num = ( int ) j LVAL 9 c -> num FIELD 10 c -> num LEAF_NODE 11 c LEAF_NODE 11 -> LEAF_NODE 11 num ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( int ) j LEAF_NODE 10 ( TYPE_NAME 10 int LEAF_NODE 11 int LEAF_NODE 10 ) FIELD 10 j LEAF_NODE 11 j LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 19, "project": "openssl_ast_vul_function_test_5", "target": 1}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } ; CLASS_DEF 2 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } CLASS_DEF 3 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } LEAF_NODE 4 struct CLASS_NAME 4 bio_addrinfo_st LEAF_NODE 5 bio_addrinfo_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; SIMPLE_DECL 5 int bai_family ; VAR_DECL 6 int bai_family TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_family LEAF_NODE 8 bai_family LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_socktype ; VAR_DECL 6 int bai_socktype TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_socktype LEAF_NODE 8 bai_socktype LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_protocol ; VAR_DECL 6 int bai_protocol TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_protocol LEAF_NODE 8 bai_protocol LEAF_NODE 6 ; SIMPLE_DECL 5 size_t bai_addrlen ; VAR_DECL 6 size_t bai_addrlen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 bai_addrlen LEAF_NODE 8 bai_addrlen LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr * bai_addr ; VAR_DECL 6 struct sockaddr * bai_addr TYPE 7 struct sockaddr * TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr POINTER 8 * LEAF_NODE 9 * NAME 7 bai_addr LEAF_NODE 8 bai_addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct bio_addrinfo_st * bai_next ; VAR_DECL 6 struct bio_addrinfo_st * bai_next TYPE 7 struct bio_addrinfo_st * TYPE_NAME 8 struct bio_addrinfo_st LEAF_NODE 9 struct LEAF_NODE 9 bio_addrinfo_st POINTER 8 * LEAF_NODE 9 * NAME 7 bai_next LEAF_NODE 8 bai_next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BIO_ADDRINFO ; VAR_DECL 2 struct bio_addrinfo_st BIO_ADDRINFO TYPE 3 struct bio_addrinfo_st TYPE_NAME 4 struct bio_addrinfo_st LEAF_NODE 5 struct LEAF_NODE 5 bio_addrinfo_st NAME 3 BIO_ADDRINFO LEAF_NODE 4 BIO_ADDRINFO LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t socklen_t ; VAR_DECL 2 uint32_t socklen_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 socklen_t LEAF_NODE 4 socklen_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } ; CLASS_DEF 2 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } CLASS_DEF 3 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } LEAF_NODE 4 enum CLASS_NAME 4 BIO_hostserv_priorities LEAF_NODE 5 BIO_hostserv_priorities LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV LEAF_NODE 5 BIO_PARSE_PRIO_HOST LEAF_NODE 5 , LEAF_NODE 5 BIO_PARSE_PRIO_SERV LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 write_bio LEAF_NODE 3 write_bio PARAMETER_LIST 2 ( const void * data , size_t len , void * bp ) LEAF_NODE 3 ( PARAMETER_DECL 3 const void * data TYPE 4 const void * TYPE_NAME 5 const void LEAF_NODE 6 const LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 , PARAMETER_DECL 3 size_t len TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 , PARAMETER_DECL 3 void * bp TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 bp LEAF_NODE 5 bp LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return BIO_write ( ( BIO * ) bp , ( const char * ) data , len ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 BIO_write ( ( BIO * ) bp , ( const char * ) data , len ) EXPR 5 BIO_write ( ( BIO * ) bp , ( const char * ) data , len ) FUNCTION_CALL 6 BIO_write ( ( BIO * ) bp , ( const char * ) data , len ) CALLEE 7 BIO_write LEAF_NODE 8 BIO_write LEAF_NODE 7 ( ARGUMENT 7 ( BIO * ) bp LEAF_NODE 8 ( TYPE_NAME 8 BIO LEAF_NODE 9 BIO LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 bp LEAF_NODE 9 bp LEAF_NODE 7 , ARGUMENT 7 ( const char * ) data LEAF_NODE 8 ( TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 , ARGUMENT 7 len FIELD 8 len LEAF_NODE 9 len LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 BIO_dump LEAF_NODE 3 BIO_dump PARAMETER_LIST 2 ( BIO * bp , const char * s , int len ) LEAF_NODE 3 ( PARAMETER_DECL 3 BIO * bp TYPE 4 BIO * TYPE_NAME 5 BIO LEAF_NODE 6 BIO POINTER 5 * LEAF_NODE 6 * NAME 4 bp LEAF_NODE 5 bp LEAF_NODE 3 , PARAMETER_DECL 3 const char * s TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return BIO_dump_cb ( write_bio , bp , s , len ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 BIO_dump_cb ( write_bio , bp , s , len ) EXPR 5 BIO_dump_cb ( write_bio , bp , s , len ) FUNCTION_CALL 6 BIO_dump_cb ( write_bio , bp , s , len ) CALLEE 7 BIO_dump_cb LEAF_NODE 8 BIO_dump_cb LEAF_NODE 7 ( ARGUMENT 7 write_bio FIELD 8 write_bio LEAF_NODE 9 write_bio LEAF_NODE 7 , ARGUMENT 7 bp FIELD 8 bp LEAF_NODE 9 bp LEAF_NODE 7 , ARGUMENT 7 s FIELD 8 s LEAF_NODE 9 s LEAF_NODE 7 , ARGUMENT 7 len FIELD 8 len LEAF_NODE 9 len LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 20, "project": "openssl_ast_normal_function_test_81", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 tls1_change_cipher_state LEAF_NODE 3 tls1_change_cipher_state PARAMETER_LIST 2 ( SSL * s , int which ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 int which TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 which LEAF_NODE 5 which LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned char * p , unsigned char * mac_secret ; INIT_DECL_LIST 4 unsigned char * p , unsigned char * mac_secret VAR_DECL 5 unsigned char * p TYPE 6 unsigned char * TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 p LEAF_NODE 7 p LEAF_NODE 5 , VAR_DECL 5 unsigned char * mac_secret TYPE 6 unsigned char * TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 mac_secret LEAF_NODE 7 mac_secret LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char [ EVP_MAX_KEY_LENGTH ] tmp1 ; VAR_DECL 4 unsigned char [ EVP_MAX_KEY_LENGTH ] tmp1 TYPE 5 unsigned char [ EVP_MAX_KEY_LENGTH ] TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char TYPE_SUFFIX 6 [ EVP_MAX_KEY_LENGTH ] LEAF_NODE 7 [ FIELD 7 EVP_MAX_KEY_LENGTH LEAF_NODE 8 EVP_MAX_KEY_LENGTH LEAF_NODE 7 ] NAME 5 tmp1 LEAF_NODE 6 tmp1 LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char [ EVP_MAX_KEY_LENGTH ] tmp2 ; VAR_DECL 4 unsigned char [ EVP_MAX_KEY_LENGTH ] tmp2 TYPE 5 unsigned char [ EVP_MAX_KEY_LENGTH ] TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char TYPE_SUFFIX 6 [ EVP_MAX_KEY_LENGTH ] LEAF_NODE 7 [ FIELD 7 EVP_MAX_KEY_LENGTH LEAF_NODE 8 EVP_MAX_KEY_LENGTH LEAF_NODE 7 ] NAME 5 tmp2 LEAF_NODE 6 tmp2 LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char [ EVP_MAX_IV_LENGTH * 2 ] iv1 ; VAR_DECL 4 unsigned char [ EVP_MAX_IV_LENGTH * 2 ] iv1 TYPE 5 unsigned char [ EVP_MAX_IV_LENGTH * 2 ] TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char TYPE_SUFFIX 6 [ EVP_MAX_IV_LENGTH * 2 ] LEAF_NODE 7 [ FIELD 7 EVP_MAX_IV_LENGTH LEAF_NODE 8 EVP_MAX_IV_LENGTH LEAF_NODE 7 * FIELD 7 2 LEAF_NODE 8 2 LEAF_NODE 7 ] NAME 5 iv1 LEAF_NODE 6 iv1 LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char [ EVP_MAX_IV_LENGTH * 2 ] iv2 ; VAR_DECL 4 unsigned char [ EVP_MAX_IV_LENGTH * 2 ] iv2 TYPE 5 unsigned char [ EVP_MAX_IV_LENGTH * 2 ] TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char TYPE_SUFFIX 6 [ EVP_MAX_IV_LENGTH * 2 ] LEAF_NODE 7 [ FIELD 7 EVP_MAX_IV_LENGTH LEAF_NODE 8 EVP_MAX_IV_LENGTH LEAF_NODE 7 * FIELD 7 2 LEAF_NODE 8 2 LEAF_NODE 7 ] NAME 5 iv2 LEAF_NODE 6 iv2 LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * ms , unsigned char * key , unsigned char * iv ; INIT_DECL_LIST 4 unsigned char * ms , unsigned char * key , unsigned char * iv VAR_DECL 5 unsigned char * ms TYPE 6 unsigned char * TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 ms LEAF_NODE 7 ms LEAF_NODE 5 , INIT_DECL_LIST 5 unsigned char * key , unsigned char * iv VAR_DECL 6 unsigned char * key TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 key LEAF_NODE 8 key LEAF_NODE 6 , VAR_DECL 6 unsigned char * iv TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 iv LEAF_NODE 8 iv LEAF_NODE 4 ; SIMPLE_DECL 3 EVP_CIPHER_CTX * dd ; VAR_DECL 4 EVP_CIPHER_CTX * dd TYPE 5 EVP_CIPHER_CTX * TYPE_NAME 6 EVP_CIPHER_CTX LEAF_NODE 7 EVP_CIPHER_CTX POINTER 6 * LEAF_NODE 7 * NAME 5 dd LEAF_NODE 6 dd LEAF_NODE 4 ; SIMPLE_DECL 3 const EVP_CIPHER * c ; VAR_DECL 4 const EVP_CIPHER * c TYPE 5 const EVP_CIPHER * TYPE_NAME 6 const EVP_CIPHER LEAF_NODE 7 const LEAF_NODE 7 EVP_CIPHER POINTER 6 * LEAF_NODE 7 * NAME 5 c LEAF_NODE 6 c LEAF_NODE 4 ; SIMPLE_DECL 3 const SSL_COMP * comp ; VAR_DECL 4 const SSL_COMP * comp TYPE 5 const SSL_COMP * TYPE_NAME 6 const SSL_COMP LEAF_NODE 7 const LEAF_NODE 7 SSL_COMP POINTER 6 * LEAF_NODE 7 * NAME 5 comp LEAF_NODE 6 comp LEAF_NODE 4 ; SIMPLE_DECL 3 const EVP_MD * m ; VAR_DECL 4 const EVP_MD * m TYPE 5 const EVP_MD * TYPE_NAME 6 const EVP_MD LEAF_NODE 7 const LEAF_NODE 7 EVP_MD POINTER 6 * LEAF_NODE 7 * NAME 5 m LEAF_NODE 6 m LEAF_NODE 4 ; SIMPLE_DECL 3 int mac_type ; VAR_DECL 4 int mac_type TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 mac_type LEAF_NODE 6 mac_type LEAF_NODE 4 ; SIMPLE_DECL 3 int * mac_secret_size ; VAR_DECL 4 int * mac_secret_size TYPE 5 int * TYPE_NAME 6 int LEAF_NODE 7 int POINTER 6 * LEAF_NODE 7 * NAME 5 mac_secret_size LEAF_NODE 6 mac_secret_size LEAF_NODE 4 ; SIMPLE_DECL 3 EVP_MD_CTX * mac_ctx ; VAR_DECL 4 EVP_MD_CTX * mac_ctx TYPE 5 EVP_MD_CTX * TYPE_NAME 6 EVP_MD_CTX LEAF_NODE 7 EVP_MD_CTX POINTER 6 * LEAF_NODE 7 * NAME 5 mac_ctx LEAF_NODE 6 mac_ctx LEAF_NODE 4 ; SIMPLE_DECL 3 EVP_PKEY * mac_key ; VAR_DECL 4 EVP_PKEY * mac_key TYPE 5 EVP_PKEY * TYPE_NAME 6 EVP_PKEY LEAF_NODE 7 EVP_PKEY POINTER 6 * LEAF_NODE 7 * NAME 5 mac_key LEAF_NODE 6 mac_key LEAF_NODE 4 ; SIMPLE_DECL 3 int n , int i , int j , int k , int cl ; INIT_DECL_LIST 4 int n , int i , int j , int k , int cl VAR_DECL 5 int n TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 n LEAF_NODE 7 n LEAF_NODE 5 , INIT_DECL_LIST 5 int i , int j , int k , int cl VAR_DECL 6 int i TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 i LEAF_NODE 8 i LEAF_NODE 6 , INIT_DECL_LIST 6 int j , int k , int cl VAR_DECL 7 int j TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 j LEAF_NODE 9 j LEAF_NODE 7 , INIT_DECL_LIST 7 int k , int cl VAR_DECL 8 int k TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 k LEAF_NODE 10 k LEAF_NODE 8 , VAR_DECL 8 int cl TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 cl LEAF_NODE 10 cl LEAF_NODE 4 ; SIMPLE_DECL 3 int reuse_dd ; reuse_dd = 0 ; VAR_DECL 4 int reuse_dd ; reuse_dd = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 reuse_dd LEAF_NODE 6 reuse_dd LEAF_NODE 5 ; INIT 5 reuse_dd = 0 ASSIGN 6 reuse_dd = 0 LVAL 7 reuse_dd NAME 8 reuse_dd LEAF_NODE 9 reuse_dd ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 c = s -> s3 -> tmp . new_sym_enc ; EXPR 4 c = s -> s3 -> tmp . new_sym_enc ASSIGN 5 c = s -> s3 -> tmp . new_sym_enc LVAL 6 c FIELD 7 c LEAF_NODE 8 c ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 s -> s3 -> tmp . new_sym_enc FIELD 7 s -> s3 -> tmp . new_sym_enc LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s3 LEAF_NODE 8 -> LEAF_NODE 8 tmp LEAF_NODE 8 . LEAF_NODE 8 new_sym_enc LEAF_NODE 4 ; EXPR_STATEMENT 3 m = s -> s3 -> tmp . new_hash ; EXPR 4 m = s -> s3 -> tmp . new_hash ASSIGN 5 m = s -> s3 -> tmp . new_hash LVAL 6 m FIELD 7 m LEAF_NODE 8 m ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 s -> s3 -> tmp . new_hash FIELD 7 s -> s3 -> tmp . new_hash LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s3 LEAF_NODE 8 -> LEAF_NODE 8 tmp LEAF_NODE 8 . LEAF_NODE 8 new_hash LEAF_NODE 4 ; EXPR_STATEMENT 3 mac_type = s -> s3 -> tmp . new_mac_pkey_type ; EXPR 4 mac_type = s -> s3 -> tmp . new_mac_pkey_type ASSIGN 5 mac_type = s -> s3 -> tmp . new_mac_pkey_type LVAL 6 mac_type FIELD 7 mac_type LEAF_NODE 8 mac_type ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 s -> s3 -> tmp . new_mac_pkey_type FIELD 7 s -> s3 -> tmp . new_mac_pkey_type LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s3 LEAF_NODE 8 -> LEAF_NODE 8 tmp LEAF_NODE 8 . LEAF_NODE 8 new_mac_pkey_type LEAF_NODE 4 ; EXPR_STATEMENT 3 comp = s -> s3 -> tmp . new_compression ; EXPR 4 comp = s -> s3 -> tmp . new_compression ASSIGN 5 comp = s -> s3 -> tmp . new_compression LVAL 6 comp FIELD 7 comp LEAF_NODE 8 comp ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 s -> s3 -> tmp . new_compression FIELD 7 s -> s3 -> tmp . new_compression LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s3 LEAF_NODE 8 -> LEAF_NODE 8 tmp LEAF_NODE 8 . LEAF_NODE 8 new_compression LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 which & SSL3_CC_READ EXPR 5 which & SSL3_CC_READ FIELD 6 which LEAF_NODE 7 which LEAF_NODE 6 & FIELD 6 SSL3_CC_READ LEAF_NODE 7 SSL3_CC_READ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> s3 -> tmp . new_cipher -> algorithm2 & TLS1_STREAM_MAC EXPR 8 s -> s3 -> tmp . new_cipher -> algorithm2 & TLS1_STREAM_MAC FIELD 9 s -> s3 -> tmp . new_cipher -> algorithm2 LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 s3 LEAF_NODE 10 -> LEAF_NODE 10 tmp LEAF_NODE 10 . LEAF_NODE 10 new_cipher LEAF_NODE 10 -> LEAF_NODE 10 algorithm2 LEAF_NODE 9 & FIELD 9 TLS1_STREAM_MAC LEAF_NODE 10 TLS1_STREAM_MAC LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 s -> mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM ; EXPR 9 s -> mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM ASSIGN 10 s -> mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM LVAL 11 s -> mac_flags FIELD 12 s -> mac_flags LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 mac_flags ASSIGN_OP 11 |= LEAF_NODE 12 |= RVAL 11 SSL_MAC_FLAG_READ_MAC_STREAM FIELD 12 SSL_MAC_FLAG_READ_MAC_STREAM LEAF_NODE 13 SSL_MAC_FLAG_READ_MAC_STREAM LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 EXPR_STATEMENT 8 s -> mac_flags &= ~SSL_MAC_FLAG_READ_MAC_STREAM ; EXPR 9 s -> mac_flags &= ~SSL_MAC_FLAG_READ_MAC_STREAM ASSIGN 10 s -> mac_flags &= ~SSL_MAC_FLAG_READ_MAC_STREAM LVAL 11 s -> mac_flags FIELD 12 s -> mac_flags LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 mac_flags ASSIGN_OP 11 &= LEAF_NODE 12 &= RVAL 11 ~SSL_MAC_FLAG_READ_MAC_STREAM FIELD 12 ~SSL_MAC_FLAG_READ_MAC_STREAM LEAF_NODE 13 ~SSL_MAC_FLAG_READ_MAC_STREAM LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> enc_read_ctx != NULL EXPR 8 s -> enc_read_ctx != NULL FIELD 9 s -> enc_read_ctx LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 enc_read_ctx EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 reuse_dd = 1 ; EXPR 9 reuse_dd = 1 ASSIGN 10 reuse_dd = 1 LVAL 11 reuse_dd FIELD 12 reuse_dd LEAF_NODE 13 reuse_dd ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ( s -> enc_read_ctx = EVP_CIPHER_CTX_new ( ) ) == NULL EXPR 10 ( s -> enc_read_ctx = EVP_CIPHER_CTX_new ( ) ) == NULL LEAF_NODE 11 ( ASSIGN 11 s -> enc_read_ctx = EVP_CIPHER_CTX_new ( ) LVAL 12 s -> enc_read_ctx FIELD 13 s -> enc_read_ctx LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 enc_read_ctx ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 EVP_CIPHER_CTX_new ( ) FUNCTION_CALL 13 EVP_CIPHER_CTX_new ( ) CALLEE 14 EVP_CIPHER_CTX_new LEAF_NODE 15 EVP_CIPHER_CTX_new LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 11 ) EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 goto err ; KEYWORD 11 goto LEAF_NODE 12 goto DESTINATION 11 err LEAF_NODE 12 err LEAF_NODE 11 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 EXPR_STATEMENT 8 EVP_CIPHER_CTX_reset ( s -> enc_read_ctx ) ; EXPR 9 EVP_CIPHER_CTX_reset ( s -> enc_read_ctx ) FUNCTION_CALL 10 EVP_CIPHER_CTX_reset ( s -> enc_read_ctx ) CALLEE 11 EVP_CIPHER_CTX_reset LEAF_NODE 12 EVP_CIPHER_CTX_reset LEAF_NODE 11 ( ARGUMENT 11 s -> enc_read_ctx FIELD 12 s -> enc_read_ctx LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 enc_read_ctx LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 6 dd = s -> enc_read_ctx ; EXPR 7 dd = s -> enc_read_ctx ASSIGN 8 dd = s -> enc_read_ctx LVAL 9 dd FIELD 10 dd LEAF_NODE 11 dd ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 s -> enc_read_ctx FIELD 10 s -> enc_read_ctx LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 enc_read_ctx LEAF_NODE 7 ; EXPR_STATEMENT 6 mac_ctx = ssl_replace_hash ( & s -> read_hash , NULL ) ; EXPR 7 mac_ctx = ssl_replace_hash ( & s -> read_hash , NULL ) ASSIGN 8 mac_ctx = ssl_replace_hash ( & s -> read_hash , NULL ) LVAL 9 mac_ctx FIELD 10 mac_ctx LEAF_NODE 11 mac_ctx ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ssl_replace_hash ( & s -> read_hash , NULL ) FUNCTION_CALL 10 ssl_replace_hash ( & s -> read_hash , NULL ) CALLEE 11 ssl_replace_hash LEAF_NODE 12 ssl_replace_hash LEAF_NODE 11 ( ARGUMENT 11 & s -> read_hash UNARY_EXPR 12 & s -> read_hash UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 s -> read_hash LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 read_hash LEAF_NODE 11 , ARGUMENT 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 mac_ctx == NULL EXPR 8 mac_ctx == NULL FIELD 9 mac_ctx LEAF_NODE 10 mac_ctx EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 goto err ; KEYWORD 9 goto LEAF_NODE 10 goto DESTINATION 9 err LEAF_NODE 10 err LEAF_NODE 9 ; EXPR_STATEMENT 6 COMP_CTX_free ( s -> expand ) ; EXPR 7 COMP_CTX_free ( s -> expand ) FUNCTION_CALL 8 COMP_CTX_free ( s -> expand ) CALLEE 9 COMP_CTX_free LEAF_NODE 10 COMP_CTX_free LEAF_NODE 9 ( ARGUMENT 9 s -> expand FIELD 10 s -> expand LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 expand LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> expand = NULL ; EXPR 7 s -> expand = NULL ASSIGN 8 s -> expand = NULL LVAL 9 s -> expand FIELD 10 s -> expand LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 expand ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 comp != NULL EXPR 8 comp != NULL FIELD 9 comp LEAF_NODE 10 comp EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 s -> expand = COMP_CTX_new ( comp -> method ) ; EXPR 10 s -> expand = COMP_CTX_new ( comp -> method ) ASSIGN 11 s -> expand = COMP_CTX_new ( comp -> method ) LVAL 12 s -> expand FIELD 13 s -> expand LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 expand ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 COMP_CTX_new ( comp -> method ) FUNCTION_CALL 13 COMP_CTX_new ( comp -> method ) CALLEE 14 COMP_CTX_new LEAF_NODE 15 COMP_CTX_new LEAF_NODE 14 ( ARGUMENT 14 comp -> method FIELD 15 comp -> method LEAF_NODE 16 comp LEAF_NODE 16 -> LEAF_NODE 16 method LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 s -> expand == NULL EXPR 11 s -> expand == NULL FIELD 12 s -> expand LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 expand EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , SSL_R_COMPRESSION_LIBRARY_ERROR ) ; EXPR 13 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , SSL_R_COMPRESSION_LIBRARY_ERROR ) FUNCTION_CALL 14 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , SSL_R_COMPRESSION_LIBRARY_ERROR ) CALLEE 15 SSLerr LEAF_NODE 16 SSLerr LEAF_NODE 15 ( ARGUMENT 15 SSL_F_TLS1_CHANGE_CIPHER_STATE FIELD 16 SSL_F_TLS1_CHANGE_CIPHER_STATE LEAF_NODE 17 SSL_F_TLS1_CHANGE_CIPHER_STATE LEAF_NODE 15 , ARGUMENT 15 SSL_R_COMPRESSION_LIBRARY_ERROR FIELD 16 SSL_R_COMPRESSION_LIBRARY_ERROR LEAF_NODE 17 SSL_R_COMPRESSION_LIBRARY_ERROR LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 goto err2 ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 err2 LEAF_NODE 14 err2 LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! SSL_IS_DTLS ( s ) EXPR 8 ! SSL_IS_DTLS ( s ) UNARY_EXPR 9 ! SSL_IS_DTLS ( s ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 SSL_IS_DTLS ( s ) CALLEE 11 SSL_IS_DTLS LEAF_NODE 12 SSL_IS_DTLS LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 RECORD_LAYER_reset_read_sequence ( & s -> rlayer ) ; EXPR 9 RECORD_LAYER_reset_read_sequence ( & s -> rlayer ) FUNCTION_CALL 10 RECORD_LAYER_reset_read_sequence ( & s -> rlayer ) CALLEE 11 RECORD_LAYER_reset_read_sequence LEAF_NODE 12 RECORD_LAYER_reset_read_sequence LEAF_NODE 11 ( ARGUMENT 11 & s -> rlayer UNARY_EXPR 12 & s -> rlayer UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 s -> rlayer LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 rlayer LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 6 mac_secret = & ( s -> s3 -> read_mac_secret [ 0 ] ) ; EXPR 7 mac_secret = & ( s -> s3 -> read_mac_secret [ 0 ] ) ASSIGN 8 mac_secret = & ( s -> s3 -> read_mac_secret [ 0 ] ) LVAL 9 mac_secret FIELD 10 mac_secret LEAF_NODE 11 mac_secret ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 & ( s -> s3 -> read_mac_secret [ 0 ] ) UNARY_EXPR 10 & ( s -> s3 -> read_mac_secret [ 0 ] ) UNARY_OPERATOR 11 & LEAF_NODE 12 & LEAF_NODE 11 ( FIELD 11 s -> s3 -> read_mac_secret [ 0 ] LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 s3 LEAF_NODE 12 -> LEAF_NODE 12 read_mac_secret LEAF_NODE 12 [ EXPR 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ] LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 mac_secret_size = & ( s -> s3 -> read_mac_secret_size ) ; EXPR 7 mac_secret_size = & ( s -> s3 -> read_mac_secret_size ) ASSIGN 8 mac_secret_size = & ( s -> s3 -> read_mac_secret_size ) LVAL 9 mac_secret_size FIELD 10 mac_secret_size LEAF_NODE 11 mac_secret_size ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 & ( s -> s3 -> read_mac_secret_size ) UNARY_EXPR 10 & ( s -> s3 -> read_mac_secret_size ) UNARY_OPERATOR 11 & LEAF_NODE 12 & LEAF_NODE 11 ( FIELD 11 s -> s3 -> read_mac_secret_size LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 s3 LEAF_NODE 12 -> LEAF_NODE 12 read_mac_secret_size LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> s3 -> tmp . new_cipher -> algorithm2 & TLS1_STREAM_MAC EXPR 8 s -> s3 -> tmp . new_cipher -> algorithm2 & TLS1_STREAM_MAC FIELD 9 s -> s3 -> tmp . new_cipher -> algorithm2 LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 s3 LEAF_NODE 10 -> LEAF_NODE 10 tmp LEAF_NODE 10 . LEAF_NODE 10 new_cipher LEAF_NODE 10 -> LEAF_NODE 10 algorithm2 LEAF_NODE 9 & FIELD 9 TLS1_STREAM_MAC LEAF_NODE 10 TLS1_STREAM_MAC LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 s -> mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM ; EXPR 9 s -> mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM ASSIGN 10 s -> mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM LVAL 11 s -> mac_flags FIELD 12 s -> mac_flags LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 mac_flags ASSIGN_OP 11 |= LEAF_NODE 12 |= RVAL 11 SSL_MAC_FLAG_WRITE_MAC_STREAM FIELD 12 SSL_MAC_FLAG_WRITE_MAC_STREAM LEAF_NODE 13 SSL_MAC_FLAG_WRITE_MAC_STREAM LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 EXPR_STATEMENT 8 s -> mac_flags &= ~SSL_MAC_FLAG_WRITE_MAC_STREAM ; EXPR 9 s -> mac_flags &= ~SSL_MAC_FLAG_WRITE_MAC_STREAM ASSIGN 10 s -> mac_flags &= ~SSL_MAC_FLAG_WRITE_MAC_STREAM LVAL 11 s -> mac_flags FIELD 12 s -> mac_flags LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 mac_flags ASSIGN_OP 11 &= LEAF_NODE 12 &= RVAL 11 ~SSL_MAC_FLAG_WRITE_MAC_STREAM FIELD 12 ~SSL_MAC_FLAG_WRITE_MAC_STREAM LEAF_NODE 13 ~SSL_MAC_FLAG_WRITE_MAC_STREAM LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> enc_write_ctx != NULL && ! SSL_IS_DTLS ( s ) EXPR 8 s -> enc_write_ctx != NULL && ! SSL_IS_DTLS ( s ) AND 9 s -> enc_write_ctx != NULL && ! SSL_IS_DTLS ( s ) EXPR 10 s -> enc_write_ctx != NULL FIELD 11 s -> enc_write_ctx LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 enc_write_ctx EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 10 && EXPR 10 ! SSL_IS_DTLS ( s ) UNARY_EXPR 11 ! SSL_IS_DTLS ( s ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 SSL_IS_DTLS ( s ) CALLEE 13 SSL_IS_DTLS LEAF_NODE 14 SSL_IS_DTLS LEAF_NODE 13 ( ARGUMENT 13 s FIELD 14 s LEAF_NODE 15 s LEAF_NODE 13 ) LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 reuse_dd = 1 ; EXPR 9 reuse_dd = 1 ASSIGN 10 reuse_dd = 1 LVAL 11 reuse_dd FIELD 12 reuse_dd LEAF_NODE 13 reuse_dd ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ( s -> enc_write_ctx = EVP_CIPHER_CTX_new ( ) ) == NULL EXPR 10 ( s -> enc_write_ctx = EVP_CIPHER_CTX_new ( ) ) == NULL LEAF_NODE 11 ( ASSIGN 11 s -> enc_write_ctx = EVP_CIPHER_CTX_new ( ) LVAL 12 s -> enc_write_ctx FIELD 13 s -> enc_write_ctx LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 enc_write_ctx ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 EVP_CIPHER_CTX_new ( ) FUNCTION_CALL 13 EVP_CIPHER_CTX_new ( ) CALLEE 14 EVP_CIPHER_CTX_new LEAF_NODE 15 EVP_CIPHER_CTX_new LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 11 ) EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 goto err ; KEYWORD 11 goto LEAF_NODE 12 goto DESTINATION 11 err LEAF_NODE 12 err LEAF_NODE 11 ; EXPR_STATEMENT 6 dd = s -> enc_write_ctx ; EXPR 7 dd = s -> enc_write_ctx ASSIGN 8 dd = s -> enc_write_ctx LVAL 9 dd FIELD 10 dd LEAF_NODE 11 dd ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 s -> enc_write_ctx FIELD 10 s -> enc_write_ctx LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 enc_write_ctx LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 SSL_IS_DTLS ( s ) EXPR 8 SSL_IS_DTLS ( s ) FUNCTION_CALL 9 SSL_IS_DTLS ( s ) CALLEE 10 SSL_IS_DTLS LEAF_NODE 11 SSL_IS_DTLS LEAF_NODE 10 ( ARGUMENT 10 s FIELD 11 s LEAF_NODE 12 s LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 mac_ctx = EVP_MD_CTX_new ( ) ; EXPR 10 mac_ctx = EVP_MD_CTX_new ( ) ASSIGN 11 mac_ctx = EVP_MD_CTX_new ( ) LVAL 12 mac_ctx FIELD 13 mac_ctx LEAF_NODE 14 mac_ctx ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 EVP_MD_CTX_new ( ) FUNCTION_CALL 13 EVP_MD_CTX_new ( ) CALLEE 14 EVP_MD_CTX_new LEAF_NODE 15 EVP_MD_CTX_new LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 mac_ctx == NULL EXPR 11 mac_ctx == NULL FIELD 12 mac_ctx LEAF_NODE 13 mac_ctx EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 goto err ; KEYWORD 12 goto LEAF_NODE 13 goto DESTINATION 12 err LEAF_NODE 13 err LEAF_NODE 12 ; EXPR_STATEMENT 9 s -> write_hash = mac_ctx ; EXPR 10 s -> write_hash = mac_ctx ASSIGN 11 s -> write_hash = mac_ctx LVAL 12 s -> write_hash FIELD 13 s -> write_hash LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 write_hash ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 mac_ctx FIELD 13 mac_ctx LEAF_NODE 14 mac_ctx LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 mac_ctx = ssl_replace_hash ( & s -> write_hash , NULL ) ; EXPR 10 mac_ctx = ssl_replace_hash ( & s -> write_hash , NULL ) ASSIGN 11 mac_ctx = ssl_replace_hash ( & s -> write_hash , NULL ) LVAL 12 mac_ctx FIELD 13 mac_ctx LEAF_NODE 14 mac_ctx ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ssl_replace_hash ( & s -> write_hash , NULL ) FUNCTION_CALL 13 ssl_replace_hash ( & s -> write_hash , NULL ) CALLEE 14 ssl_replace_hash LEAF_NODE 15 ssl_replace_hash LEAF_NODE 14 ( ARGUMENT 14 & s -> write_hash UNARY_EXPR 15 & s -> write_hash UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 s -> write_hash LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 write_hash LEAF_NODE 14 , ARGUMENT 14 NULL FIELD 15 NULL LEAF_NODE 16 NULL LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 mac_ctx == NULL EXPR 11 mac_ctx == NULL FIELD 12 mac_ctx LEAF_NODE 13 mac_ctx EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 goto err ; KEYWORD 12 goto LEAF_NODE 13 goto DESTINATION 12 err LEAF_NODE 13 err LEAF_NODE 12 ; LEAF_NODE 8 } EXPR_STATEMENT 6 COMP_CTX_free ( s -> compress ) ; EXPR 7 COMP_CTX_free ( s -> compress ) FUNCTION_CALL 8 COMP_CTX_free ( s -> compress ) CALLEE 9 COMP_CTX_free LEAF_NODE 10 COMP_CTX_free LEAF_NODE 9 ( ARGUMENT 9 s -> compress FIELD 10 s -> compress LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 compress LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> compress = NULL ; EXPR 7 s -> compress = NULL ASSIGN 8 s -> compress = NULL LVAL 9 s -> compress FIELD 10 s -> compress LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 compress ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 comp != NULL EXPR 8 comp != NULL FIELD 9 comp LEAF_NODE 10 comp EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 s -> compress = COMP_CTX_new ( comp -> method ) ; EXPR 10 s -> compress = COMP_CTX_new ( comp -> method ) ASSIGN 11 s -> compress = COMP_CTX_new ( comp -> method ) LVAL 12 s -> compress FIELD 13 s -> compress LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 compress ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 COMP_CTX_new ( comp -> method ) FUNCTION_CALL 13 COMP_CTX_new ( comp -> method ) CALLEE 14 COMP_CTX_new LEAF_NODE 15 COMP_CTX_new LEAF_NODE 14 ( ARGUMENT 14 comp -> method FIELD 15 comp -> method LEAF_NODE 16 comp LEAF_NODE 16 -> LEAF_NODE 16 method LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 s -> compress == NULL EXPR 11 s -> compress == NULL FIELD 12 s -> compress LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 compress EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , SSL_R_COMPRESSION_LIBRARY_ERROR ) ; EXPR 13 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , SSL_R_COMPRESSION_LIBRARY_ERROR ) FUNCTION_CALL 14 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , SSL_R_COMPRESSION_LIBRARY_ERROR ) CALLEE 15 SSLerr LEAF_NODE 16 SSLerr LEAF_NODE 15 ( ARGUMENT 15 SSL_F_TLS1_CHANGE_CIPHER_STATE FIELD 16 SSL_F_TLS1_CHANGE_CIPHER_STATE LEAF_NODE 17 SSL_F_TLS1_CHANGE_CIPHER_STATE LEAF_NODE 15 , ARGUMENT 15 SSL_R_COMPRESSION_LIBRARY_ERROR FIELD 16 SSL_R_COMPRESSION_LIBRARY_ERROR LEAF_NODE 17 SSL_R_COMPRESSION_LIBRARY_ERROR LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 goto err2 ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 err2 LEAF_NODE 14 err2 LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! SSL_IS_DTLS ( s ) EXPR 8 ! SSL_IS_DTLS ( s ) UNARY_EXPR 9 ! SSL_IS_DTLS ( s ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 SSL_IS_DTLS ( s ) CALLEE 11 SSL_IS_DTLS LEAF_NODE 12 SSL_IS_DTLS LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 RECORD_LAYER_reset_write_sequence ( & s -> rlayer ) ; EXPR 9 RECORD_LAYER_reset_write_sequence ( & s -> rlayer ) FUNCTION_CALL 10 RECORD_LAYER_reset_write_sequence ( & s -> rlayer ) CALLEE 11 RECORD_LAYER_reset_write_sequence LEAF_NODE 12 RECORD_LAYER_reset_write_sequence LEAF_NODE 11 ( ARGUMENT 11 & s -> rlayer UNARY_EXPR 12 & s -> rlayer UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 s -> rlayer LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 rlayer LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 6 mac_secret = & ( s -> s3 -> write_mac_secret [ 0 ] ) ; EXPR 7 mac_secret = & ( s -> s3 -> write_mac_secret [ 0 ] ) ASSIGN 8 mac_secret = & ( s -> s3 -> write_mac_secret [ 0 ] ) LVAL 9 mac_secret FIELD 10 mac_secret LEAF_NODE 11 mac_secret ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 & ( s -> s3 -> write_mac_secret [ 0 ] ) UNARY_EXPR 10 & ( s -> s3 -> write_mac_secret [ 0 ] ) UNARY_OPERATOR 11 & LEAF_NODE 12 & LEAF_NODE 11 ( FIELD 11 s -> s3 -> write_mac_secret [ 0 ] LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 s3 LEAF_NODE 12 -> LEAF_NODE 12 write_mac_secret LEAF_NODE 12 [ EXPR 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ] LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 mac_secret_size = & ( s -> s3 -> write_mac_secret_size ) ; EXPR 7 mac_secret_size = & ( s -> s3 -> write_mac_secret_size ) ASSIGN 8 mac_secret_size = & ( s -> s3 -> write_mac_secret_size ) LVAL 9 mac_secret_size FIELD 10 mac_secret_size LEAF_NODE 11 mac_secret_size ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 & ( s -> s3 -> write_mac_secret_size ) UNARY_EXPR 10 & ( s -> s3 -> write_mac_secret_size ) UNARY_OPERATOR 11 & LEAF_NODE 12 & LEAF_NODE 11 ( FIELD 11 s -> s3 -> write_mac_secret_size LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 s3 LEAF_NODE 12 -> LEAF_NODE 12 write_mac_secret_size LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 reuse_dd EXPR 5 reuse_dd FIELD 6 reuse_dd LEAF_NODE 7 reuse_dd LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 EVP_CIPHER_CTX_reset ( dd ) ; EXPR 6 EVP_CIPHER_CTX_reset ( dd ) FUNCTION_CALL 7 EVP_CIPHER_CTX_reset ( dd ) CALLEE 8 EVP_CIPHER_CTX_reset LEAF_NODE 9 EVP_CIPHER_CTX_reset LEAF_NODE 8 ( ARGUMENT 8 dd FIELD 9 dd LEAF_NODE 10 dd LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 3 p = s -> s3 -> tmp . key_block ; EXPR 4 p = s -> s3 -> tmp . key_block ASSIGN 5 p = s -> s3 -> tmp . key_block LVAL 6 p FIELD 7 p LEAF_NODE 8 p ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 s -> s3 -> tmp . key_block FIELD 7 s -> s3 -> tmp . key_block LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s3 LEAF_NODE 8 -> LEAF_NODE 8 tmp LEAF_NODE 8 . LEAF_NODE 8 key_block LEAF_NODE 4 ; EXPR_STATEMENT 3 i = * mac_secret_size = s -> s3 -> tmp . new_mac_secret_size ; EXPR 4 i = * mac_secret_size = s -> s3 -> tmp . new_mac_secret_size ASSIGN 5 i = * mac_secret_size = s -> s3 -> tmp . new_mac_secret_size LVAL 6 i FIELD 7 i LEAF_NODE 8 i ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 * mac_secret_size = s -> s3 -> tmp . new_mac_secret_size ASSIGN 7 * mac_secret_size = s -> s3 -> tmp . new_mac_secret_size LVAL 8 * mac_secret_size UNARY_EXPR 9 * mac_secret_size UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 mac_secret_size LEAF_NODE 11 mac_secret_size ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 s -> s3 -> tmp . new_mac_secret_size FIELD 9 s -> s3 -> tmp . new_mac_secret_size LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 s3 LEAF_NODE 10 -> LEAF_NODE 10 tmp LEAF_NODE 10 . LEAF_NODE 10 new_mac_secret_size LEAF_NODE 4 ; EXPR_STATEMENT 3 cl = EVP_CIPHER_key_length ( c ) ; EXPR 4 cl = EVP_CIPHER_key_length ( c ) ASSIGN 5 cl = EVP_CIPHER_key_length ( c ) LVAL 6 cl FIELD 7 cl LEAF_NODE 8 cl ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 EVP_CIPHER_key_length ( c ) FUNCTION_CALL 7 EVP_CIPHER_key_length ( c ) CALLEE 8 EVP_CIPHER_key_length LEAF_NODE 9 EVP_CIPHER_key_length LEAF_NODE 8 ( ARGUMENT 8 c FIELD 9 c LEAF_NODE 10 c LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 j = cl ; EXPR 4 j = cl ASSIGN 5 j = cl LVAL 6 j FIELD 7 j LEAF_NODE 8 j ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 cl FIELD 7 cl LEAF_NODE 8 cl LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 EVP_CIPHER_mode ( c ) == EVP_CIPH_GCM_MODE EXPR 5 EVP_CIPHER_mode ( c ) == EVP_CIPH_GCM_MODE FUNCTION_CALL 6 EVP_CIPHER_mode ( c ) CALLEE 7 EVP_CIPHER_mode LEAF_NODE 8 EVP_CIPHER_mode LEAF_NODE 7 ( ARGUMENT 7 c FIELD 8 c LEAF_NODE 9 c LEAF_NODE 7 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 EVP_CIPH_GCM_MODE LEAF_NODE 7 EVP_CIPH_GCM_MODE LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 k = EVP_GCM_TLS_FIXED_IV_LEN ; EXPR 6 k = EVP_GCM_TLS_FIXED_IV_LEN ASSIGN 7 k = EVP_GCM_TLS_FIXED_IV_LEN LVAL 8 k FIELD 9 k LEAF_NODE 10 k ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 EVP_GCM_TLS_FIXED_IV_LEN FIELD 9 EVP_GCM_TLS_FIXED_IV_LEN LEAF_NODE 10 EVP_GCM_TLS_FIXED_IV_LEN LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 EVP_CIPHER_mode ( c ) == EVP_CIPH_CCM_MODE EXPR 7 EVP_CIPHER_mode ( c ) == EVP_CIPH_CCM_MODE FUNCTION_CALL 8 EVP_CIPHER_mode ( c ) CALLEE 9 EVP_CIPHER_mode LEAF_NODE 10 EVP_CIPHER_mode LEAF_NODE 9 ( ARGUMENT 9 c FIELD 10 c LEAF_NODE 11 c LEAF_NODE 9 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 EVP_CIPH_CCM_MODE LEAF_NODE 9 EVP_CIPH_CCM_MODE LEAF_NODE 6 ) STATEMENTS 6 EXPR_STATEMENT 7 k = EVP_CCM_TLS_FIXED_IV_LEN ; EXPR 8 k = EVP_CCM_TLS_FIXED_IV_LEN ASSIGN 9 k = EVP_CCM_TLS_FIXED_IV_LEN LVAL 10 k FIELD 11 k LEAF_NODE 12 k ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 EVP_CCM_TLS_FIXED_IV_LEN FIELD 11 EVP_CCM_TLS_FIXED_IV_LEN LEAF_NODE 12 EVP_CCM_TLS_FIXED_IV_LEN LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 EXPR_STATEMENT 5 k = EVP_CIPHER_iv_length ( c ) ; EXPR 6 k = EVP_CIPHER_iv_length ( c ) ASSIGN 7 k = EVP_CIPHER_iv_length ( c ) LVAL 8 k FIELD 9 k LEAF_NODE 10 k ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 EVP_CIPHER_iv_length ( c ) FUNCTION_CALL 9 EVP_CIPHER_iv_length ( c ) CALLEE 10 EVP_CIPHER_iv_length LEAF_NODE 11 EVP_CIPHER_iv_length LEAF_NODE 10 ( ARGUMENT 10 c FIELD 11 c LEAF_NODE 12 c LEAF_NODE 10 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( which == SSL3_CHANGE_CIPHER_CLIENT_WRITE ) || ( which == SSL3_CHANGE_CIPHER_SERVER_READ ) EXPR 5 ( which == SSL3_CHANGE_CIPHER_CLIENT_WRITE ) || ( which == SSL3_CHANGE_CIPHER_SERVER_READ ) OR 6 ( which == SSL3_CHANGE_CIPHER_CLIENT_WRITE ) || ( which == SSL3_CHANGE_CIPHER_SERVER_READ ) EXPR 7 ( which == SSL3_CHANGE_CIPHER_CLIENT_WRITE ) LEAF_NODE 8 ( FIELD 8 which LEAF_NODE 9 which EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 SSL3_CHANGE_CIPHER_CLIENT_WRITE LEAF_NODE 9 SSL3_CHANGE_CIPHER_CLIENT_WRITE LEAF_NODE 8 ) LEAF_NODE 7 || EXPR 7 ( which == SSL3_CHANGE_CIPHER_SERVER_READ ) LEAF_NODE 8 ( FIELD 8 which LEAF_NODE 9 which EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 SSL3_CHANGE_CIPHER_SERVER_READ LEAF_NODE 9 SSL3_CHANGE_CIPHER_SERVER_READ LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ms = & ( p [ 0 ] ) ; EXPR 7 ms = & ( p [ 0 ] ) ASSIGN 8 ms = & ( p [ 0 ] ) LVAL 9 ms FIELD 10 ms LEAF_NODE 11 ms ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 & ( p [ 0 ] ) UNARY_EXPR 10 & ( p [ 0 ] ) UNARY_OPERATOR 11 & LEAF_NODE 12 & LEAF_NODE 11 ( FIELD 11 p [ 0 ] LEAF_NODE 12 p LEAF_NODE 12 [ EXPR 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ] LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 n = i + i ; EXPR 7 n = i + i ASSIGN 8 n = i + i LVAL 9 n FIELD 10 n LEAF_NODE 11 n ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 i + i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 10 + FIELD 10 i LEAF_NODE 11 i LEAF_NODE 7 ; EXPR_STATEMENT 6 key = & ( p [ n ] ) ; EXPR 7 key = & ( p [ n ] ) ASSIGN 8 key = & ( p [ n ] ) LVAL 9 key FIELD 10 key LEAF_NODE 11 key ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 & ( p [ n ] ) UNARY_EXPR 10 & ( p [ n ] ) UNARY_OPERATOR 11 & LEAF_NODE 12 & LEAF_NODE 11 ( FIELD 11 p [ n ] LEAF_NODE 12 p LEAF_NODE 12 [ EXPR 12 n FIELD 13 n LEAF_NODE 14 n LEAF_NODE 12 ] LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 n += j + j ; EXPR 7 n += j + j ASSIGN 8 n += j + j LVAL 9 n FIELD 10 n LEAF_NODE 11 n ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 j + j FIELD 10 j LEAF_NODE 11 j LEAF_NODE 10 + FIELD 10 j LEAF_NODE 11 j LEAF_NODE 7 ; EXPR_STATEMENT 6 iv = & ( p [ n ] ) ; EXPR 7 iv = & ( p [ n ] ) ASSIGN 8 iv = & ( p [ n ] ) LVAL 9 iv FIELD 10 iv LEAF_NODE 11 iv ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 & ( p [ n ] ) UNARY_EXPR 10 & ( p [ n ] ) UNARY_OPERATOR 11 & LEAF_NODE 12 & LEAF_NODE 11 ( FIELD 11 p [ n ] LEAF_NODE 12 p LEAF_NODE 12 [ EXPR 12 n FIELD 13 n LEAF_NODE 14 n LEAF_NODE 12 ] LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 n += k + k ; EXPR 7 n += k + k ASSIGN 8 n += k + k LVAL 9 n FIELD 10 n LEAF_NODE 11 n ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 k + k FIELD 10 k LEAF_NODE 11 k LEAF_NODE 10 + FIELD 10 k LEAF_NODE 11 k LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 n = i ; EXPR 7 n = i ASSIGN 8 n = i LVAL 9 n FIELD 10 n LEAF_NODE 11 n ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 7 ; EXPR_STATEMENT 6 ms = & ( p [ n ] ) ; EXPR 7 ms = & ( p [ n ] ) ASSIGN 8 ms = & ( p [ n ] ) LVAL 9 ms FIELD 10 ms LEAF_NODE 11 ms ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 & ( p [ n ] ) UNARY_EXPR 10 & ( p [ n ] ) UNARY_OPERATOR 11 & LEAF_NODE 12 & LEAF_NODE 11 ( FIELD 11 p [ n ] LEAF_NODE 12 p LEAF_NODE 12 [ EXPR 12 n FIELD 13 n LEAF_NODE 14 n LEAF_NODE 12 ] LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 n += i + j ; EXPR 7 n += i + j ASSIGN 8 n += i + j LVAL 9 n FIELD 10 n LEAF_NODE 11 n ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 i + j FIELD 10 i LEAF_NODE 11 i LEAF_NODE 10 + FIELD 10 j LEAF_NODE 11 j LEAF_NODE 7 ; EXPR_STATEMENT 6 key = & ( p [ n ] ) ; EXPR 7 key = & ( p [ n ] ) ASSIGN 8 key = & ( p [ n ] ) LVAL 9 key FIELD 10 key LEAF_NODE 11 key ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 & ( p [ n ] ) UNARY_EXPR 10 & ( p [ n ] ) UNARY_OPERATOR 11 & LEAF_NODE 12 & LEAF_NODE 11 ( FIELD 11 p [ n ] LEAF_NODE 12 p LEAF_NODE 12 [ EXPR 12 n FIELD 13 n LEAF_NODE 14 n LEAF_NODE 12 ] LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 n += j + k ; EXPR 7 n += j + k ASSIGN 8 n += j + k LVAL 9 n FIELD 10 n LEAF_NODE 11 n ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 j + k FIELD 10 j LEAF_NODE 11 j LEAF_NODE 10 + FIELD 10 k LEAF_NODE 11 k LEAF_NODE 7 ; EXPR_STATEMENT 6 iv = & ( p [ n ] ) ; EXPR 7 iv = & ( p [ n ] ) ASSIGN 8 iv = & ( p [ n ] ) LVAL 9 iv FIELD 10 iv LEAF_NODE 11 iv ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 & ( p [ n ] ) UNARY_EXPR 10 & ( p [ n ] ) UNARY_OPERATOR 11 & LEAF_NODE 12 & LEAF_NODE 11 ( FIELD 11 p [ n ] LEAF_NODE 12 p LEAF_NODE 12 [ EXPR 12 n FIELD 13 n LEAF_NODE 14 n LEAF_NODE 12 ] LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 n += k ; EXPR 7 n += k ASSIGN 8 n += k LVAL 9 n FIELD 10 n LEAF_NODE 11 n ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 k FIELD 10 k LEAF_NODE 11 k LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 n > s -> s3 -> tmp . key_block_length EXPR 5 n > s -> s3 -> tmp . key_block_length FIELD 6 n LEAF_NODE 7 n REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 s -> s3 -> tmp . key_block_length LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 s3 LEAF_NODE 7 -> LEAF_NODE 7 tmp LEAF_NODE 7 . LEAF_NODE 7 key_block_length LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_INTERNAL_ERROR ) ; EXPR 7 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 8 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_INTERNAL_ERROR ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_TLS1_CHANGE_CIPHER_STATE FIELD 10 SSL_F_TLS1_CHANGE_CIPHER_STATE LEAF_NODE 11 SSL_F_TLS1_CHANGE_CIPHER_STATE LEAF_NODE 9 , ARGUMENT 9 ERR_R_INTERNAL_ERROR FIELD 10 ERR_R_INTERNAL_ERROR LEAF_NODE 11 ERR_R_INTERNAL_ERROR LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err2 ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err2 LEAF_NODE 8 err2 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 memcpy ( mac_secret , ms , i ) ; EXPR 4 memcpy ( mac_secret , ms , i ) FUNCTION_CALL 5 memcpy ( mac_secret , ms , i ) CALLEE 6 memcpy LEAF_NODE 7 memcpy LEAF_NODE 6 ( ARGUMENT 6 mac_secret FIELD 7 mac_secret LEAF_NODE 8 mac_secret LEAF_NODE 6 , ARGUMENT 6 ms FIELD 7 ms LEAF_NODE 8 ms LEAF_NODE 6 , ARGUMENT 6 i FIELD 7 i LEAF_NODE 8 i LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ( EVP_CIPHER_flags ( c ) & EVP_CIPH_FLAG_AEAD_CIPHER ) EXPR 5 ! ( EVP_CIPHER_flags ( c ) & EVP_CIPH_FLAG_AEAD_CIPHER ) UNARY_EXPR 6 ! ( EVP_CIPHER_flags ( c ) & EVP_CIPH_FLAG_AEAD_CIPHER ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! LEAF_NODE 7 ( FUNCTION_CALL 7 EVP_CIPHER_flags ( c ) CALLEE 8 EVP_CIPHER_flags LEAF_NODE 9 EVP_CIPHER_flags LEAF_NODE 8 ( ARGUMENT 8 c FIELD 9 c LEAF_NODE 10 c LEAF_NODE 8 ) LEAF_NODE 7 & FIELD 7 EVP_CIPH_FLAG_AEAD_CIPHER LEAF_NODE 8 EVP_CIPH_FLAG_AEAD_CIPHER LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 mac_key = EVP_PKEY_new_mac_key ( mac_type , NULL , mac_secret , * mac_secret_size ) ; EXPR 7 mac_key = EVP_PKEY_new_mac_key ( mac_type , NULL , mac_secret , * mac_secret_size ) ASSIGN 8 mac_key = EVP_PKEY_new_mac_key ( mac_type , NULL , mac_secret , * mac_secret_size ) LVAL 9 mac_key FIELD 10 mac_key LEAF_NODE 11 mac_key ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 EVP_PKEY_new_mac_key ( mac_type , NULL , mac_secret , * mac_secret_size ) FUNCTION_CALL 10 EVP_PKEY_new_mac_key ( mac_type , NULL , mac_secret , * mac_secret_size ) CALLEE 11 EVP_PKEY_new_mac_key LEAF_NODE 12 EVP_PKEY_new_mac_key LEAF_NODE 11 ( ARGUMENT 11 mac_type FIELD 12 mac_type LEAF_NODE 13 mac_type LEAF_NODE 11 , ARGUMENT 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 11 , ARGUMENT 11 mac_secret FIELD 12 mac_secret LEAF_NODE 13 mac_secret LEAF_NODE 11 , ARGUMENT 11 * mac_secret_size UNARY_EXPR 12 * mac_secret_size UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 mac_secret_size LEAF_NODE 14 mac_secret_size LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 mac_key == NULL || EVP_DigestSignInit ( mac_ctx , NULL , m , NULL , mac_key ) <= 0 EXPR 8 mac_key == NULL || EVP_DigestSignInit ( mac_ctx , NULL , m , NULL , mac_key ) <= 0 OR 9 mac_key == NULL || EVP_DigestSignInit ( mac_ctx , NULL , m , NULL , mac_key ) <= 0 EXPR 10 mac_key == NULL FIELD 11 mac_key LEAF_NODE 12 mac_key EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 10 || EXPR 10 EVP_DigestSignInit ( mac_ctx , NULL , m , NULL , mac_key ) <= 0 FUNCTION_CALL 11 EVP_DigestSignInit ( mac_ctx , NULL , m , NULL , mac_key ) CALLEE 12 EVP_DigestSignInit LEAF_NODE 13 EVP_DigestSignInit LEAF_NODE 12 ( ARGUMENT 12 mac_ctx FIELD 13 mac_ctx LEAF_NODE 14 mac_ctx LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 m FIELD 13 m LEAF_NODE 14 m LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 mac_key FIELD 13 mac_key LEAF_NODE 14 mac_key LEAF_NODE 12 ) REL_OPERATOR 11 <= LEAF_NODE 12 <= FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 EVP_PKEY_free ( mac_key ) ; EXPR 10 EVP_PKEY_free ( mac_key ) FUNCTION_CALL 11 EVP_PKEY_free ( mac_key ) CALLEE 12 EVP_PKEY_free LEAF_NODE 13 EVP_PKEY_free LEAF_NODE 12 ( ARGUMENT 12 mac_key FIELD 13 mac_key LEAF_NODE 14 mac_key LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_INTERNAL_ERROR ) ; EXPR 10 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 11 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_INTERNAL_ERROR ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_TLS1_CHANGE_CIPHER_STATE FIELD 13 SSL_F_TLS1_CHANGE_CIPHER_STATE LEAF_NODE 14 SSL_F_TLS1_CHANGE_CIPHER_STATE LEAF_NODE 12 , ARGUMENT 12 ERR_R_INTERNAL_ERROR FIELD 13 ERR_R_INTERNAL_ERROR LEAF_NODE 14 ERR_R_INTERNAL_ERROR LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto err2 ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 err2 LEAF_NODE 11 err2 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 EVP_PKEY_free ( mac_key ) ; EXPR 7 EVP_PKEY_free ( mac_key ) FUNCTION_CALL 8 EVP_PKEY_free ( mac_key ) CALLEE 9 EVP_PKEY_free LEAF_NODE 10 EVP_PKEY_free LEAF_NODE 9 ( ARGUMENT 9 mac_key FIELD 10 mac_key LEAF_NODE 11 mac_key LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 printf ( \"which = %04X\\nmac key=\" , which ) ; EXPR 4 printf ( \"which = %04X\\nmac key=\" , which ) FUNCTION_CALL 5 printf ( \"which = %04X\\nmac key=\" , which ) CALLEE 6 printf LEAF_NODE 7 printf LEAF_NODE 6 ( ARGUMENT 6 \"which = %04X\\nmac key=\" FIELD 7 \"which = %04X\\nmac key=\" LEAF_NODE 8 \"which = %04X\\nmac key=\" LEAF_NODE 6 , ARGUMENT 6 which FIELD 7 which LEAF_NODE 8 which LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int z ; VAR_DECL 5 int z TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 z LEAF_NODE 7 z LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 z = 0 ; EXPR 6 z = 0 ASSIGN 7 z = 0 LVAL 8 z FIELD 9 z LEAF_NODE 10 z ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 z < i EXPR 6 z < i FIELD 7 z LEAF_NODE 8 z REL_OPERATOR 7 < LEAF_NODE 8 < FIELD 7 i LEAF_NODE 8 i LEAF_NODE 5 ; FOR_EXPR 5 z ++ EXPR 6 z ++ FIELD 7 z ++ LEAF_NODE 8 z LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 EXPR_STATEMENT 6 printf ( \"%02X%c\" , ms [ z ] , ( ( z + 1 ) % 16 ) ? ' ' : '\\n' ) ; EXPR 7 printf ( \"%02X%c\" , ms [ z ] , ( ( z + 1 ) % 16 ) ? ' ' : '\\n' ) FUNCTION_CALL 8 printf ( \"%02X%c\" , ms [ z ] , ( ( z + 1 ) % 16 ) ? ' ' : '\\n' ) CALLEE 9 printf LEAF_NODE 10 printf LEAF_NODE 9 ( ARGUMENT 9 \"%02X%c\" FIELD 10 \"%02X%c\" LEAF_NODE 11 \"%02X%c\" LEAF_NODE 9 , ARGUMENT 9 ms [ z ] FIELD 10 ms [ z ] LEAF_NODE 11 ms LEAF_NODE 11 [ EXPR 11 z FIELD 12 z LEAF_NODE 13 z LEAF_NODE 11 ] LEAF_NODE 9 , ARGUMENT 9 ( ( z + 1 ) % 16 ) ? ' ' : '\\n' COND_EXPR 10 ( ( z + 1 ) % 16 ) ? ' ' : '\\n' CONDITION 11 ( ( z + 1 ) % 16 ) LEAF_NODE 12 ( LEAF_NODE 12 ( FIELD 12 z LEAF_NODE 13 z LEAF_NODE 12 + FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 12 ) LEAF_NODE 12 % FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 11 ? EXPR 11 ' ' FIELD 12 ' ' LEAF_NODE 13 ' ' LEAF_NODE 11 : FIELD 11 '\\n' LEAF_NODE 12 '\\n' LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 EVP_CIPHER_mode ( c ) == EVP_CIPH_GCM_MODE EXPR 5 EVP_CIPHER_mode ( c ) == EVP_CIPH_GCM_MODE FUNCTION_CALL 6 EVP_CIPHER_mode ( c ) CALLEE 7 EVP_CIPHER_mode LEAF_NODE 8 EVP_CIPHER_mode LEAF_NODE 7 ( ARGUMENT 7 c FIELD 8 c LEAF_NODE 9 c LEAF_NODE 7 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 EVP_CIPH_GCM_MODE LEAF_NODE 7 EVP_CIPH_GCM_MODE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! EVP_CipherInit_ex ( dd , c , NULL , key , NULL , ( which & SSL3_CC_WRITE ) ) || ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_GCM_SET_IV_FIXED , k , iv ) EXPR 8 ! EVP_CipherInit_ex ( dd , c , NULL , key , NULL , ( which & SSL3_CC_WRITE ) ) || ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_GCM_SET_IV_FIXED , k , iv ) OR 9 ! EVP_CipherInit_ex ( dd , c , NULL , key , NULL , ( which & SSL3_CC_WRITE ) ) || ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_GCM_SET_IV_FIXED , k , iv ) EXPR 10 ! EVP_CipherInit_ex ( dd , c , NULL , key , NULL , ( which & SSL3_CC_WRITE ) ) UNARY_EXPR 11 ! EVP_CipherInit_ex ( dd , c , NULL , key , NULL , ( which & SSL3_CC_WRITE ) ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 EVP_CipherInit_ex ( dd , c , NULL , key , NULL , ( which & SSL3_CC_WRITE ) ) CALLEE 13 EVP_CipherInit_ex LEAF_NODE 14 EVP_CipherInit_ex LEAF_NODE 13 ( ARGUMENT 13 dd FIELD 14 dd LEAF_NODE 15 dd LEAF_NODE 13 , ARGUMENT 13 c FIELD 14 c LEAF_NODE 15 c LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 , ARGUMENT 13 key FIELD 14 key LEAF_NODE 15 key LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 , ARGUMENT 13 ( which & SSL3_CC_WRITE ) LEAF_NODE 14 ( FIELD 14 which LEAF_NODE 15 which LEAF_NODE 14 & FIELD 14 SSL3_CC_WRITE LEAF_NODE 15 SSL3_CC_WRITE LEAF_NODE 14 ) LEAF_NODE 13 ) LEAF_NODE 10 || EXPR 10 ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_GCM_SET_IV_FIXED , k , iv ) UNARY_EXPR 11 ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_GCM_SET_IV_FIXED , k , iv ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_GCM_SET_IV_FIXED , k , iv ) CALLEE 13 EVP_CIPHER_CTX_ctrl LEAF_NODE 14 EVP_CIPHER_CTX_ctrl LEAF_NODE 13 ( ARGUMENT 13 dd FIELD 14 dd LEAF_NODE 15 dd LEAF_NODE 13 , ARGUMENT 13 EVP_CTRL_GCM_SET_IV_FIXED FIELD 14 EVP_CTRL_GCM_SET_IV_FIXED LEAF_NODE 15 EVP_CTRL_GCM_SET_IV_FIXED LEAF_NODE 13 , ARGUMENT 13 k FIELD 14 k LEAF_NODE 15 k LEAF_NODE 13 , ARGUMENT 13 iv FIELD 14 iv LEAF_NODE 15 iv LEAF_NODE 13 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_INTERNAL_ERROR ) ; EXPR 10 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 11 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_INTERNAL_ERROR ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_TLS1_CHANGE_CIPHER_STATE FIELD 13 SSL_F_TLS1_CHANGE_CIPHER_STATE LEAF_NODE 14 SSL_F_TLS1_CHANGE_CIPHER_STATE LEAF_NODE 12 , ARGUMENT 12 ERR_R_INTERNAL_ERROR FIELD 13 ERR_R_INTERNAL_ERROR LEAF_NODE 14 ERR_R_INTERNAL_ERROR LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto err2 ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 err2 LEAF_NODE 11 err2 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 EVP_CIPHER_mode ( c ) == EVP_CIPH_CCM_MODE EXPR 7 EVP_CIPHER_mode ( c ) == EVP_CIPH_CCM_MODE FUNCTION_CALL 8 EVP_CIPHER_mode ( c ) CALLEE 9 EVP_CIPHER_mode LEAF_NODE 10 EVP_CIPHER_mode LEAF_NODE 9 ( ARGUMENT 9 c FIELD 10 c LEAF_NODE 11 c LEAF_NODE 9 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 EVP_CIPH_CCM_MODE LEAF_NODE 9 EVP_CIPH_CCM_MODE LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SIMPLE_DECL 8 int taglen ; VAR_DECL 9 int taglen TYPE 10 int TYPE_NAME 11 int LEAF_NODE 12 int NAME 10 taglen LEAF_NODE 11 taglen LEAF_NODE 9 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 s -> s3 -> tmp . new_cipher -> algorithm_enc & ( SSL_AES128CCM8 | SSL_AES256CCM8 ) EXPR 10 s -> s3 -> tmp . new_cipher -> algorithm_enc & ( SSL_AES128CCM8 | SSL_AES256CCM8 ) FIELD 11 s -> s3 -> tmp . new_cipher -> algorithm_enc LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 s3 LEAF_NODE 12 -> LEAF_NODE 12 tmp LEAF_NODE 12 . LEAF_NODE 12 new_cipher LEAF_NODE 12 -> LEAF_NODE 12 algorithm_enc LEAF_NODE 11 & LEAF_NODE 11 ( BIT_OR 11 SSL_AES128CCM8 | SSL_AES256CCM8 BIT_OR_ELEM 12 SSL_AES128CCM8 FIELD 13 SSL_AES128CCM8 LEAF_NODE 14 SSL_AES128CCM8 LEAF_NODE 12 | BIT_OR_ELEM 12 SSL_AES256CCM8 FIELD 13 SSL_AES256CCM8 LEAF_NODE 14 SSL_AES256CCM8 LEAF_NODE 11 ) LEAF_NODE 9 ) STATEMENTS 9 EXPR_STATEMENT 10 taglen = 8 ; EXPR 11 taglen = 8 ASSIGN 12 taglen = 8 LVAL 13 taglen FIELD 14 taglen LEAF_NODE 15 taglen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 8 FIELD 14 8 LEAF_NODE 15 8 LEAF_NODE 11 ; SELECTION 8 KEYWORD 9 else LEAF_NODE 10 else STATEMENTS 9 EXPR_STATEMENT 10 taglen = 16 ; EXPR 11 taglen = 16 ASSIGN 12 taglen = 16 LVAL 13 taglen FIELD 14 taglen LEAF_NODE 15 taglen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 16 FIELD 14 16 LEAF_NODE 15 16 LEAF_NODE 11 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ! EVP_CipherInit_ex ( dd , c , NULL , NULL , NULL , ( which & SSL3_CC_WRITE ) ) || ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_IVLEN , 12 , NULL ) || ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_TAG , taglen , NULL ) || ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_CCM_SET_IV_FIXED , k , iv ) || ! EVP_CipherInit_ex ( dd , NULL , NULL , key , NULL , - 1 ) EXPR 10 ! EVP_CipherInit_ex ( dd , c , NULL , NULL , NULL , ( which & SSL3_CC_WRITE ) ) || ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_IVLEN , 12 , NULL ) || ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_TAG , taglen , NULL ) || ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_CCM_SET_IV_FIXED , k , iv ) || ! EVP_CipherInit_ex ( dd , NULL , NULL , key , NULL , - 1 ) OR 11 ! EVP_CipherInit_ex ( dd , c , NULL , NULL , NULL , ( which & SSL3_CC_WRITE ) ) || ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_IVLEN , 12 , NULL ) || ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_TAG , taglen , NULL ) || ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_CCM_SET_IV_FIXED , k , iv ) || ! EVP_CipherInit_ex ( dd , NULL , NULL , key , NULL , - 1 ) EXPR 12 ! EVP_CipherInit_ex ( dd , c , NULL , NULL , NULL , ( which & SSL3_CC_WRITE ) ) UNARY_EXPR 13 ! EVP_CipherInit_ex ( dd , c , NULL , NULL , NULL , ( which & SSL3_CC_WRITE ) ) UNARY_OPERATOR 14 ! LEAF_NODE 15 ! FUNCTION_CALL 14 EVP_CipherInit_ex ( dd , c , NULL , NULL , NULL , ( which & SSL3_CC_WRITE ) ) CALLEE 15 EVP_CipherInit_ex LEAF_NODE 16 EVP_CipherInit_ex LEAF_NODE 15 ( ARGUMENT 15 dd FIELD 16 dd LEAF_NODE 17 dd LEAF_NODE 15 , ARGUMENT 15 c FIELD 16 c LEAF_NODE 17 c LEAF_NODE 15 , ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 , ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 , ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 , ARGUMENT 15 ( which & SSL3_CC_WRITE ) LEAF_NODE 16 ( FIELD 16 which LEAF_NODE 17 which LEAF_NODE 16 & FIELD 16 SSL3_CC_WRITE LEAF_NODE 17 SSL3_CC_WRITE LEAF_NODE 16 ) LEAF_NODE 15 ) LEAF_NODE 12 || EXPR 12 ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_IVLEN , 12 , NULL ) || ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_TAG , taglen , NULL ) || ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_CCM_SET_IV_FIXED , k , iv ) || ! EVP_CipherInit_ex ( dd , NULL , NULL , key , NULL , - 1 ) OR 13 ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_IVLEN , 12 , NULL ) || ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_TAG , taglen , NULL ) || ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_CCM_SET_IV_FIXED , k , iv ) || ! EVP_CipherInit_ex ( dd , NULL , NULL , key , NULL , - 1 ) EXPR 14 ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_IVLEN , 12 , NULL ) UNARY_EXPR 15 ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_IVLEN , 12 , NULL ) UNARY_OPERATOR 16 ! LEAF_NODE 17 ! FUNCTION_CALL 16 EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_IVLEN , 12 , NULL ) CALLEE 17 EVP_CIPHER_CTX_ctrl LEAF_NODE 18 EVP_CIPHER_CTX_ctrl LEAF_NODE 17 ( ARGUMENT 17 dd FIELD 18 dd LEAF_NODE 19 dd LEAF_NODE 17 , ARGUMENT 17 EVP_CTRL_AEAD_SET_IVLEN FIELD 18 EVP_CTRL_AEAD_SET_IVLEN LEAF_NODE 19 EVP_CTRL_AEAD_SET_IVLEN LEAF_NODE 17 , ARGUMENT 17 12 FIELD 18 12 LEAF_NODE 19 12 LEAF_NODE 17 , ARGUMENT 17 NULL FIELD 18 NULL LEAF_NODE 19 NULL LEAF_NODE 17 ) LEAF_NODE 14 || EXPR 14 ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_TAG , taglen , NULL ) || ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_CCM_SET_IV_FIXED , k , iv ) || ! EVP_CipherInit_ex ( dd , NULL , NULL , key , NULL , - 1 ) OR 15 ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_TAG , taglen , NULL ) || ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_CCM_SET_IV_FIXED , k , iv ) || ! EVP_CipherInit_ex ( dd , NULL , NULL , key , NULL , - 1 ) EXPR 16 ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_TAG , taglen , NULL ) UNARY_EXPR 17 ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_TAG , taglen , NULL ) UNARY_OPERATOR 18 ! LEAF_NODE 19 ! FUNCTION_CALL 18 EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_TAG , taglen , NULL ) CALLEE 19 EVP_CIPHER_CTX_ctrl LEAF_NODE 20 EVP_CIPHER_CTX_ctrl LEAF_NODE 19 ( ARGUMENT 19 dd FIELD 20 dd LEAF_NODE 21 dd LEAF_NODE 19 , ARGUMENT 19 EVP_CTRL_AEAD_SET_TAG FIELD 20 EVP_CTRL_AEAD_SET_TAG LEAF_NODE 21 EVP_CTRL_AEAD_SET_TAG LEAF_NODE 19 , ARGUMENT 19 taglen FIELD 20 taglen LEAF_NODE 21 taglen LEAF_NODE 19 , ARGUMENT 19 NULL FIELD 20 NULL LEAF_NODE 21 NULL LEAF_NODE 19 ) LEAF_NODE 16 || EXPR 16 ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_CCM_SET_IV_FIXED , k , iv ) || ! EVP_CipherInit_ex ( dd , NULL , NULL , key , NULL , - 1 ) OR 17 ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_CCM_SET_IV_FIXED , k , iv ) || ! EVP_CipherInit_ex ( dd , NULL , NULL , key , NULL , - 1 ) EXPR 18 ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_CCM_SET_IV_FIXED , k , iv ) UNARY_EXPR 19 ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_CCM_SET_IV_FIXED , k , iv ) UNARY_OPERATOR 20 ! LEAF_NODE 21 ! FUNCTION_CALL 20 EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_CCM_SET_IV_FIXED , k , iv ) CALLEE 21 EVP_CIPHER_CTX_ctrl LEAF_NODE 22 EVP_CIPHER_CTX_ctrl LEAF_NODE 21 ( ARGUMENT 21 dd FIELD 22 dd LEAF_NODE 23 dd LEAF_NODE 21 , ARGUMENT 21 EVP_CTRL_CCM_SET_IV_FIXED FIELD 22 EVP_CTRL_CCM_SET_IV_FIXED LEAF_NODE 23 EVP_CTRL_CCM_SET_IV_FIXED LEAF_NODE 21 , ARGUMENT 21 k FIELD 22 k LEAF_NODE 23 k LEAF_NODE 21 , ARGUMENT 21 iv FIELD 22 iv LEAF_NODE 23 iv LEAF_NODE 21 ) LEAF_NODE 18 || EXPR 18 ! EVP_CipherInit_ex ( dd , NULL , NULL , key , NULL , - 1 ) UNARY_EXPR 19 ! EVP_CipherInit_ex ( dd , NULL , NULL , key , NULL , - 1 ) UNARY_OPERATOR 20 ! LEAF_NODE 21 ! FUNCTION_CALL 20 EVP_CipherInit_ex ( dd , NULL , NULL , key , NULL , - 1 ) CALLEE 21 EVP_CipherInit_ex LEAF_NODE 22 EVP_CipherInit_ex LEAF_NODE 21 ( ARGUMENT 21 dd FIELD 22 dd LEAF_NODE 23 dd LEAF_NODE 21 , ARGUMENT 21 NULL FIELD 22 NULL LEAF_NODE 23 NULL LEAF_NODE 21 , ARGUMENT 21 NULL FIELD 22 NULL LEAF_NODE 23 NULL LEAF_NODE 21 , ARGUMENT 21 key FIELD 22 key LEAF_NODE 23 key LEAF_NODE 21 , ARGUMENT 21 NULL FIELD 22 NULL LEAF_NODE 23 NULL LEAF_NODE 21 , ARGUMENT 21 - 1 UNARY_EXPR 22 - 1 UNARY_OPERATOR 23 - LEAF_NODE 24 - FIELD 23 1 LEAF_NODE 24 1 LEAF_NODE 21 ) LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_INTERNAL_ERROR ) ; EXPR 12 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 13 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_INTERNAL_ERROR ) CALLEE 14 SSLerr LEAF_NODE 15 SSLerr LEAF_NODE 14 ( ARGUMENT 14 SSL_F_TLS1_CHANGE_CIPHER_STATE FIELD 15 SSL_F_TLS1_CHANGE_CIPHER_STATE LEAF_NODE 16 SSL_F_TLS1_CHANGE_CIPHER_STATE LEAF_NODE 14 , ARGUMENT 14 ERR_R_INTERNAL_ERROR FIELD 15 ERR_R_INTERNAL_ERROR LEAF_NODE 16 ERR_R_INTERNAL_ERROR LEAF_NODE 14 ) LEAF_NODE 12 ; JUMP_STATEMENT 11 goto err2 ; KEYWORD 12 goto LEAF_NODE 13 goto DESTINATION 12 err2 LEAF_NODE 13 err2 LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! EVP_CipherInit_ex ( dd , c , NULL , key , iv , ( which & SSL3_CC_WRITE ) ) EXPR 8 ! EVP_CipherInit_ex ( dd , c , NULL , key , iv , ( which & SSL3_CC_WRITE ) ) UNARY_EXPR 9 ! EVP_CipherInit_ex ( dd , c , NULL , key , iv , ( which & SSL3_CC_WRITE ) ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 EVP_CipherInit_ex ( dd , c , NULL , key , iv , ( which & SSL3_CC_WRITE ) ) CALLEE 11 EVP_CipherInit_ex LEAF_NODE 12 EVP_CipherInit_ex LEAF_NODE 11 ( ARGUMENT 11 dd FIELD 12 dd LEAF_NODE 13 dd LEAF_NODE 11 , ARGUMENT 11 c FIELD 12 c LEAF_NODE 13 c LEAF_NODE 11 , ARGUMENT 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 11 , ARGUMENT 11 key FIELD 12 key LEAF_NODE 13 key LEAF_NODE 11 , ARGUMENT 11 iv FIELD 12 iv LEAF_NODE 13 iv LEAF_NODE 11 , ARGUMENT 11 ( which & SSL3_CC_WRITE ) LEAF_NODE 12 ( FIELD 12 which LEAF_NODE 13 which LEAF_NODE 12 & FIELD 12 SSL3_CC_WRITE LEAF_NODE 13 SSL3_CC_WRITE LEAF_NODE 12 ) LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_INTERNAL_ERROR ) ; EXPR 10 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 11 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_INTERNAL_ERROR ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_TLS1_CHANGE_CIPHER_STATE FIELD 13 SSL_F_TLS1_CHANGE_CIPHER_STATE LEAF_NODE 14 SSL_F_TLS1_CHANGE_CIPHER_STATE LEAF_NODE 12 , ARGUMENT 12 ERR_R_INTERNAL_ERROR FIELD 13 ERR_R_INTERNAL_ERROR LEAF_NODE 14 ERR_R_INTERNAL_ERROR LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto err2 ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 err2 LEAF_NODE 11 err2 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( EVP_CIPHER_flags ( c ) & EVP_CIPH_FLAG_AEAD_CIPHER ) && * mac_secret_size && ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_MAC_KEY , * mac_secret_size , mac_secret ) EXPR 5 ( EVP_CIPHER_flags ( c ) & EVP_CIPH_FLAG_AEAD_CIPHER ) && * mac_secret_size && ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_MAC_KEY , * mac_secret_size , mac_secret ) AND 6 ( EVP_CIPHER_flags ( c ) & EVP_CIPH_FLAG_AEAD_CIPHER ) && * mac_secret_size && ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_MAC_KEY , * mac_secret_size , mac_secret ) EXPR 7 ( EVP_CIPHER_flags ( c ) & EVP_CIPH_FLAG_AEAD_CIPHER ) LEAF_NODE 8 ( FUNCTION_CALL 8 EVP_CIPHER_flags ( c ) CALLEE 9 EVP_CIPHER_flags LEAF_NODE 10 EVP_CIPHER_flags LEAF_NODE 9 ( ARGUMENT 9 c FIELD 10 c LEAF_NODE 11 c LEAF_NODE 9 ) LEAF_NODE 8 & FIELD 8 EVP_CIPH_FLAG_AEAD_CIPHER LEAF_NODE 9 EVP_CIPH_FLAG_AEAD_CIPHER LEAF_NODE 8 ) LEAF_NODE 7 && EXPR 7 * mac_secret_size && ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_MAC_KEY , * mac_secret_size , mac_secret ) AND 8 * mac_secret_size && ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_MAC_KEY , * mac_secret_size , mac_secret ) EXPR 9 * mac_secret_size UNARY_EXPR 10 * mac_secret_size UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 mac_secret_size LEAF_NODE 12 mac_secret_size LEAF_NODE 9 && EXPR 9 ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_MAC_KEY , * mac_secret_size , mac_secret ) UNARY_EXPR 10 ! EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_MAC_KEY , * mac_secret_size , mac_secret ) UNARY_OPERATOR 11 ! LEAF_NODE 12 ! FUNCTION_CALL 11 EVP_CIPHER_CTX_ctrl ( dd , EVP_CTRL_AEAD_SET_MAC_KEY , * mac_secret_size , mac_secret ) CALLEE 12 EVP_CIPHER_CTX_ctrl LEAF_NODE 13 EVP_CIPHER_CTX_ctrl LEAF_NODE 12 ( ARGUMENT 12 dd FIELD 13 dd LEAF_NODE 14 dd LEAF_NODE 12 , ARGUMENT 12 EVP_CTRL_AEAD_SET_MAC_KEY FIELD 13 EVP_CTRL_AEAD_SET_MAC_KEY LEAF_NODE 14 EVP_CTRL_AEAD_SET_MAC_KEY LEAF_NODE 12 , ARGUMENT 12 * mac_secret_size UNARY_EXPR 13 * mac_secret_size UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 mac_secret_size LEAF_NODE 15 mac_secret_size LEAF_NODE 12 , ARGUMENT 12 mac_secret FIELD 13 mac_secret LEAF_NODE 14 mac_secret LEAF_NODE 12 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_INTERNAL_ERROR ) ; EXPR 7 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 8 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_INTERNAL_ERROR ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_TLS1_CHANGE_CIPHER_STATE FIELD 10 SSL_F_TLS1_CHANGE_CIPHER_STATE LEAF_NODE 11 SSL_F_TLS1_CHANGE_CIPHER_STATE LEAF_NODE 9 , ARGUMENT 9 ERR_R_INTERNAL_ERROR FIELD 10 ERR_R_INTERNAL_ERROR LEAF_NODE 11 ERR_R_INTERNAL_ERROR LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err2 ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err2 LEAF_NODE 8 err2 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> msg_callback EXPR 5 s -> msg_callback FIELD 6 s -> msg_callback LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 msg_callback LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int wh ; wh = which & SSL3_CC_WRITE ? TLS1_RT_CRYPTO_WRITE : 0 ; VAR_DECL 7 int wh ; wh = which & SSL3_CC_WRITE ? TLS1_RT_CRYPTO_WRITE : 0 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 wh LEAF_NODE 9 wh LEAF_NODE 8 ; INIT 8 wh = which & SSL3_CC_WRITE ? TLS1_RT_CRYPTO_WRITE : 0 ASSIGN 9 wh = which & SSL3_CC_WRITE ? TLS1_RT_CRYPTO_WRITE : 0 LVAL 10 wh NAME 11 wh LEAF_NODE 12 wh ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 which & SSL3_CC_WRITE ? TLS1_RT_CRYPTO_WRITE : 0 COND_EXPR 11 which & SSL3_CC_WRITE ? TLS1_RT_CRYPTO_WRITE : 0 CONDITION 12 which & SSL3_CC_WRITE FIELD 13 which LEAF_NODE 14 which LEAF_NODE 13 & FIELD 13 SSL3_CC_WRITE LEAF_NODE 14 SSL3_CC_WRITE LEAF_NODE 12 ? EXPR 12 TLS1_RT_CRYPTO_WRITE FIELD 13 TLS1_RT_CRYPTO_WRITE LEAF_NODE 14 TLS1_RT_CRYPTO_WRITE LEAF_NODE 12 : FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * mac_secret_size EXPR 8 * mac_secret_size UNARY_EXPR 9 * mac_secret_size UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 mac_secret_size LEAF_NODE 11 mac_secret_size LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 s -> msg_callback ( 2 , s -> version , wh | TLS1_RT_CRYPTO_MAC , mac_secret , * mac_secret_size , s , s -> msg_callback_arg ) ; EXPR 9 s -> msg_callback ( 2 , s -> version , wh | TLS1_RT_CRYPTO_MAC , mac_secret , * mac_secret_size , s , s -> msg_callback_arg ) FUNCTION_CALL 10 s -> msg_callback ( 2 , s -> version , wh | TLS1_RT_CRYPTO_MAC , mac_secret , * mac_secret_size , s , s -> msg_callback_arg ) CALLEE 11 s -> msg_callback LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 msg_callback LEAF_NODE 11 ( ARGUMENT 11 2 FIELD 12 2 LEAF_NODE 13 2 LEAF_NODE 11 , ARGUMENT 11 s -> version FIELD 12 s -> version LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 version LEAF_NODE 11 , ARGUMENT 11 wh | TLS1_RT_CRYPTO_MAC BIT_OR 12 wh | TLS1_RT_CRYPTO_MAC BIT_OR_ELEM 13 wh FIELD 14 wh LEAF_NODE 15 wh LEAF_NODE 13 | BIT_OR_ELEM 13 TLS1_RT_CRYPTO_MAC FIELD 14 TLS1_RT_CRYPTO_MAC LEAF_NODE 15 TLS1_RT_CRYPTO_MAC LEAF_NODE 11 , ARGUMENT 11 mac_secret FIELD 12 mac_secret LEAF_NODE 13 mac_secret LEAF_NODE 11 , ARGUMENT 11 * mac_secret_size UNARY_EXPR 12 * mac_secret_size UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 mac_secret_size LEAF_NODE 14 mac_secret_size LEAF_NODE 11 , ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 , ARGUMENT 11 s -> msg_callback_arg FIELD 12 s -> msg_callback_arg LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 msg_callback_arg LEAF_NODE 11 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 c -> key_len EXPR 8 c -> key_len FIELD 9 c -> key_len LEAF_NODE 10 c LEAF_NODE 10 -> LEAF_NODE 10 key_len LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 s -> msg_callback ( 2 , s -> version , wh | TLS1_RT_CRYPTO_KEY , key , c -> key_len , s , s -> msg_callback_arg ) ; EXPR 9 s -> msg_callback ( 2 , s -> version , wh | TLS1_RT_CRYPTO_KEY , key , c -> key_len , s , s -> msg_callback_arg ) FUNCTION_CALL 10 s -> msg_callback ( 2 , s -> version , wh | TLS1_RT_CRYPTO_KEY , key , c -> key_len , s , s -> msg_callback_arg ) CALLEE 11 s -> msg_callback LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 msg_callback LEAF_NODE 11 ( ARGUMENT 11 2 FIELD 12 2 LEAF_NODE 13 2 LEAF_NODE 11 , ARGUMENT 11 s -> version FIELD 12 s -> version LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 version LEAF_NODE 11 , ARGUMENT 11 wh | TLS1_RT_CRYPTO_KEY BIT_OR 12 wh | TLS1_RT_CRYPTO_KEY BIT_OR_ELEM 13 wh FIELD 14 wh LEAF_NODE 15 wh LEAF_NODE 13 | BIT_OR_ELEM 13 TLS1_RT_CRYPTO_KEY FIELD 14 TLS1_RT_CRYPTO_KEY LEAF_NODE 15 TLS1_RT_CRYPTO_KEY LEAF_NODE 11 , ARGUMENT 11 key FIELD 12 key LEAF_NODE 13 key LEAF_NODE 11 , ARGUMENT 11 c -> key_len FIELD 12 c -> key_len LEAF_NODE 13 c LEAF_NODE 13 -> LEAF_NODE 13 key_len LEAF_NODE 11 , ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 , ARGUMENT 11 s -> msg_callback_arg FIELD 12 s -> msg_callback_arg LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 msg_callback_arg LEAF_NODE 11 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 k EXPR 8 k FIELD 9 k LEAF_NODE 10 k LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 EVP_CIPHER_mode ( c ) == EVP_CIPH_GCM_MODE EXPR 11 EVP_CIPHER_mode ( c ) == EVP_CIPH_GCM_MODE FUNCTION_CALL 12 EVP_CIPHER_mode ( c ) CALLEE 13 EVP_CIPHER_mode LEAF_NODE 14 EVP_CIPHER_mode LEAF_NODE 13 ( ARGUMENT 13 c FIELD 14 c LEAF_NODE 15 c LEAF_NODE 13 ) EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 EVP_CIPH_GCM_MODE LEAF_NODE 13 EVP_CIPH_GCM_MODE LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 wh |= TLS1_RT_CRYPTO_FIXED_IV ; EXPR 12 wh |= TLS1_RT_CRYPTO_FIXED_IV ASSIGN 13 wh |= TLS1_RT_CRYPTO_FIXED_IV LVAL 14 wh FIELD 15 wh LEAF_NODE 16 wh ASSIGN_OP 14 |= LEAF_NODE 15 |= RVAL 14 TLS1_RT_CRYPTO_FIXED_IV FIELD 15 TLS1_RT_CRYPTO_FIXED_IV LEAF_NODE 16 TLS1_RT_CRYPTO_FIXED_IV LEAF_NODE 12 ; SELECTION 9 KEYWORD 10 else LEAF_NODE 11 else STATEMENTS 10 EXPR_STATEMENT 11 wh |= TLS1_RT_CRYPTO_IV ; EXPR 12 wh |= TLS1_RT_CRYPTO_IV ASSIGN 13 wh |= TLS1_RT_CRYPTO_IV LVAL 14 wh FIELD 15 wh LEAF_NODE 16 wh ASSIGN_OP 14 |= LEAF_NODE 15 |= RVAL 14 TLS1_RT_CRYPTO_IV FIELD 15 TLS1_RT_CRYPTO_IV LEAF_NODE 16 TLS1_RT_CRYPTO_IV LEAF_NODE 12 ; EXPR_STATEMENT 9 s -> msg_callback ( 2 , s -> version , wh , iv , k , s , s -> msg_callback_arg ) ; EXPR 10 s -> msg_callback ( 2 , s -> version , wh , iv , k , s , s -> msg_callback_arg ) FUNCTION_CALL 11 s -> msg_callback ( 2 , s -> version , wh , iv , k , s , s -> msg_callback_arg ) CALLEE 12 s -> msg_callback LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 msg_callback LEAF_NODE 12 ( ARGUMENT 12 2 FIELD 13 2 LEAF_NODE 14 2 LEAF_NODE 12 , ARGUMENT 12 s -> version FIELD 13 s -> version LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 version LEAF_NODE 12 , ARGUMENT 12 wh FIELD 13 wh LEAF_NODE 14 wh LEAF_NODE 12 , ARGUMENT 12 iv FIELD 13 iv LEAF_NODE 14 iv LEAF_NODE 12 , ARGUMENT 12 k FIELD 13 k LEAF_NODE 14 k LEAF_NODE 12 , ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 , ARGUMENT 12 s -> msg_callback_arg FIELD 13 s -> msg_callback_arg LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 msg_callback_arg LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 printf ( \"which = %04X\\nkey=\" , which ) ; EXPR 4 printf ( \"which = %04X\\nkey=\" , which ) FUNCTION_CALL 5 printf ( \"which = %04X\\nkey=\" , which ) CALLEE 6 printf LEAF_NODE 7 printf LEAF_NODE 6 ( ARGUMENT 6 \"which = %04X\\nkey=\" FIELD 7 \"which = %04X\\nkey=\" LEAF_NODE 8 \"which = %04X\\nkey=\" LEAF_NODE 6 , ARGUMENT 6 which FIELD 7 which LEAF_NODE 8 which LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int z ; VAR_DECL 5 int z TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 z LEAF_NODE 7 z LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 z = 0 ; EXPR 6 z = 0 ASSIGN 7 z = 0 LVAL 8 z FIELD 9 z LEAF_NODE 10 z ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 z < EVP_CIPHER_key_length ( c ) EXPR 6 z < EVP_CIPHER_key_length ( c ) FIELD 7 z LEAF_NODE 8 z REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 EVP_CIPHER_key_length ( c ) CALLEE 8 EVP_CIPHER_key_length LEAF_NODE 9 EVP_CIPHER_key_length LEAF_NODE 8 ( ARGUMENT 8 c FIELD 9 c LEAF_NODE 10 c LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 z ++ EXPR 6 z ++ FIELD 7 z ++ LEAF_NODE 8 z LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 EXPR_STATEMENT 6 printf ( \"%02X%c\" , key [ z ] , ( ( z + 1 ) % 16 ) ? ' ' : '\\n' ) ; EXPR 7 printf ( \"%02X%c\" , key [ z ] , ( ( z + 1 ) % 16 ) ? ' ' : '\\n' ) FUNCTION_CALL 8 printf ( \"%02X%c\" , key [ z ] , ( ( z + 1 ) % 16 ) ? ' ' : '\\n' ) CALLEE 9 printf LEAF_NODE 10 printf LEAF_NODE 9 ( ARGUMENT 9 \"%02X%c\" FIELD 10 \"%02X%c\" LEAF_NODE 11 \"%02X%c\" LEAF_NODE 9 , ARGUMENT 9 key [ z ] FIELD 10 key [ z ] LEAF_NODE 11 key LEAF_NODE 11 [ EXPR 11 z FIELD 12 z LEAF_NODE 13 z LEAF_NODE 11 ] LEAF_NODE 9 , ARGUMENT 9 ( ( z + 1 ) % 16 ) ? ' ' : '\\n' COND_EXPR 10 ( ( z + 1 ) % 16 ) ? ' ' : '\\n' CONDITION 11 ( ( z + 1 ) % 16 ) LEAF_NODE 12 ( LEAF_NODE 12 ( FIELD 12 z LEAF_NODE 13 z LEAF_NODE 12 + FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 12 ) LEAF_NODE 12 % FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 11 ? EXPR 11 ' ' FIELD 12 ' ' LEAF_NODE 13 ' ' LEAF_NODE 11 : FIELD 11 '\\n' LEAF_NODE 12 '\\n' LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 3 } EXPR_STATEMENT 3 printf ( \"\\niv=\" ) ; EXPR 4 printf ( \"\\niv=\" ) FUNCTION_CALL 5 printf ( \"\\niv=\" ) CALLEE 6 printf LEAF_NODE 7 printf LEAF_NODE 6 ( ARGUMENT 6 \"\\niv=\" FIELD 7 \"\\niv=\" LEAF_NODE 8 \"\\niv=\" LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int z ; VAR_DECL 5 int z TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 z LEAF_NODE 7 z LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 z = 0 ; EXPR 6 z = 0 ASSIGN 7 z = 0 LVAL 8 z FIELD 9 z LEAF_NODE 10 z ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 z < k EXPR 6 z < k FIELD 7 z LEAF_NODE 8 z REL_OPERATOR 7 < LEAF_NODE 8 < FIELD 7 k LEAF_NODE 8 k LEAF_NODE 5 ; FOR_EXPR 5 z ++ EXPR 6 z ++ FIELD 7 z ++ LEAF_NODE 8 z LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 EXPR_STATEMENT 6 printf ( \"%02X%c\" , iv [ z ] , ( ( z + 1 ) % 16 ) ? ' ' : '\\n' ) ; EXPR 7 printf ( \"%02X%c\" , iv [ z ] , ( ( z + 1 ) % 16 ) ? ' ' : '\\n' ) FUNCTION_CALL 8 printf ( \"%02X%c\" , iv [ z ] , ( ( z + 1 ) % 16 ) ? ' ' : '\\n' ) CALLEE 9 printf LEAF_NODE 10 printf LEAF_NODE 9 ( ARGUMENT 9 \"%02X%c\" FIELD 10 \"%02X%c\" LEAF_NODE 11 \"%02X%c\" LEAF_NODE 9 , ARGUMENT 9 iv [ z ] FIELD 10 iv [ z ] LEAF_NODE 11 iv LEAF_NODE 11 [ EXPR 11 z FIELD 12 z LEAF_NODE 13 z LEAF_NODE 11 ] LEAF_NODE 9 , ARGUMENT 9 ( ( z + 1 ) % 16 ) ? ' ' : '\\n' COND_EXPR 10 ( ( z + 1 ) % 16 ) ? ' ' : '\\n' CONDITION 11 ( ( z + 1 ) % 16 ) LEAF_NODE 12 ( LEAF_NODE 12 ( FIELD 12 z LEAF_NODE 13 z LEAF_NODE 12 + FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 12 ) LEAF_NODE 12 % FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 11 ? EXPR 11 ' ' FIELD 12 ' ' LEAF_NODE 13 ' ' LEAF_NODE 11 : FIELD 11 '\\n' LEAF_NODE 12 '\\n' LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 3 } EXPR_STATEMENT 3 printf ( \"\\n\" ) ; EXPR 4 printf ( \"\\n\" ) FUNCTION_CALL 5 printf ( \"\\n\" ) CALLEE 6 printf LEAF_NODE 7 printf LEAF_NODE 6 ( ARGUMENT 6 \"\\n\" FIELD 7 \"\\n\" LEAF_NODE 8 \"\\n\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 OPENSSL_cleanse ( tmp1 , sizeof ( tmp1 ) ) ; EXPR 4 OPENSSL_cleanse ( tmp1 , sizeof ( tmp1 ) ) FUNCTION_CALL 5 OPENSSL_cleanse ( tmp1 , sizeof ( tmp1 ) ) CALLEE 6 OPENSSL_cleanse LEAF_NODE 7 OPENSSL_cleanse LEAF_NODE 6 ( ARGUMENT 6 tmp1 FIELD 7 tmp1 LEAF_NODE 8 tmp1 LEAF_NODE 6 , ARGUMENT 6 sizeof ( tmp1 ) FUNCTION_CALL 7 sizeof ( tmp1 ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 tmp1 FIELD 9 tmp1 LEAF_NODE 10 tmp1 LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 OPENSSL_cleanse ( tmp2 , sizeof ( tmp1 ) ) ; EXPR 4 OPENSSL_cleanse ( tmp2 , sizeof ( tmp1 ) ) FUNCTION_CALL 5 OPENSSL_cleanse ( tmp2 , sizeof ( tmp1 ) ) CALLEE 6 OPENSSL_cleanse LEAF_NODE 7 OPENSSL_cleanse LEAF_NODE 6 ( ARGUMENT 6 tmp2 FIELD 7 tmp2 LEAF_NODE 8 tmp2 LEAF_NODE 6 , ARGUMENT 6 sizeof ( tmp1 ) FUNCTION_CALL 7 sizeof ( tmp1 ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 tmp1 FIELD 9 tmp1 LEAF_NODE 10 tmp1 LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 OPENSSL_cleanse ( iv1 , sizeof ( iv1 ) ) ; EXPR 4 OPENSSL_cleanse ( iv1 , sizeof ( iv1 ) ) FUNCTION_CALL 5 OPENSSL_cleanse ( iv1 , sizeof ( iv1 ) ) CALLEE 6 OPENSSL_cleanse LEAF_NODE 7 OPENSSL_cleanse LEAF_NODE 6 ( ARGUMENT 6 iv1 FIELD 7 iv1 LEAF_NODE 8 iv1 LEAF_NODE 6 , ARGUMENT 6 sizeof ( iv1 ) FUNCTION_CALL 7 sizeof ( iv1 ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 iv1 FIELD 9 iv1 LEAF_NODE 10 iv1 LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 OPENSSL_cleanse ( iv2 , sizeof ( iv2 ) ) ; EXPR 4 OPENSSL_cleanse ( iv2 , sizeof ( iv2 ) ) FUNCTION_CALL 5 OPENSSL_cleanse ( iv2 , sizeof ( iv2 ) ) CALLEE 6 OPENSSL_cleanse LEAF_NODE 7 OPENSSL_cleanse LEAF_NODE 6 ( ARGUMENT 6 iv2 FIELD 7 iv2 LEAF_NODE 8 iv2 LEAF_NODE 6 , ARGUMENT 6 sizeof ( iv2 ) FUNCTION_CALL 7 sizeof ( iv2 ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 iv2 FIELD 9 iv2 LEAF_NODE 10 iv2 LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return ( 1 ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ( 1 ) EXPR 5 ( 1 ) LEAF_NODE 6 ( FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 6 ) LEAF_NODE 4 ; LABEL 3 err : LEAF_NODE 4 err LEAF_NODE 4 : EXPR_STATEMENT 3 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_MALLOC_FAILURE ) ; EXPR 4 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 5 SSLerr ( SSL_F_TLS1_CHANGE_CIPHER_STATE , ERR_R_MALLOC_FAILURE ) CALLEE 6 SSLerr LEAF_NODE 7 SSLerr LEAF_NODE 6 ( ARGUMENT 6 SSL_F_TLS1_CHANGE_CIPHER_STATE FIELD 7 SSL_F_TLS1_CHANGE_CIPHER_STATE LEAF_NODE 8 SSL_F_TLS1_CHANGE_CIPHER_STATE LEAF_NODE 6 , ARGUMENT 6 ERR_R_MALLOC_FAILURE FIELD 7 ERR_R_MALLOC_FAILURE LEAF_NODE 8 ERR_R_MALLOC_FAILURE LEAF_NODE 6 ) LEAF_NODE 4 ; LABEL 3 err2 : LEAF_NODE 4 err2 LEAF_NODE 4 : EXPR_STATEMENT 3 OPENSSL_cleanse ( tmp1 , sizeof ( tmp1 ) ) ; EXPR 4 OPENSSL_cleanse ( tmp1 , sizeof ( tmp1 ) ) FUNCTION_CALL 5 OPENSSL_cleanse ( tmp1 , sizeof ( tmp1 ) ) CALLEE 6 OPENSSL_cleanse LEAF_NODE 7 OPENSSL_cleanse LEAF_NODE 6 ( ARGUMENT 6 tmp1 FIELD 7 tmp1 LEAF_NODE 8 tmp1 LEAF_NODE 6 , ARGUMENT 6 sizeof ( tmp1 ) FUNCTION_CALL 7 sizeof ( tmp1 ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 tmp1 FIELD 9 tmp1 LEAF_NODE 10 tmp1 LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 OPENSSL_cleanse ( tmp2 , sizeof ( tmp1 ) ) ; EXPR 4 OPENSSL_cleanse ( tmp2 , sizeof ( tmp1 ) ) FUNCTION_CALL 5 OPENSSL_cleanse ( tmp2 , sizeof ( tmp1 ) ) CALLEE 6 OPENSSL_cleanse LEAF_NODE 7 OPENSSL_cleanse LEAF_NODE 6 ( ARGUMENT 6 tmp2 FIELD 7 tmp2 LEAF_NODE 8 tmp2 LEAF_NODE 6 , ARGUMENT 6 sizeof ( tmp1 ) FUNCTION_CALL 7 sizeof ( tmp1 ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 tmp1 FIELD 9 tmp1 LEAF_NODE 10 tmp1 LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 OPENSSL_cleanse ( iv1 , sizeof ( iv1 ) ) ; EXPR 4 OPENSSL_cleanse ( iv1 , sizeof ( iv1 ) ) FUNCTION_CALL 5 OPENSSL_cleanse ( iv1 , sizeof ( iv1 ) ) CALLEE 6 OPENSSL_cleanse LEAF_NODE 7 OPENSSL_cleanse LEAF_NODE 6 ( ARGUMENT 6 iv1 FIELD 7 iv1 LEAF_NODE 8 iv1 LEAF_NODE 6 , ARGUMENT 6 sizeof ( iv1 ) FUNCTION_CALL 7 sizeof ( iv1 ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 iv1 FIELD 9 iv1 LEAF_NODE 10 iv1 LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 OPENSSL_cleanse ( iv2 , sizeof ( iv2 ) ) ; EXPR 4 OPENSSL_cleanse ( iv2 , sizeof ( iv2 ) ) FUNCTION_CALL 5 OPENSSL_cleanse ( iv2 , sizeof ( iv2 ) ) CALLEE 6 OPENSSL_cleanse LEAF_NODE 7 OPENSSL_cleanse LEAF_NODE 6 ( ARGUMENT 6 iv2 FIELD 7 iv2 LEAF_NODE 8 iv2 LEAF_NODE 6 , ARGUMENT 6 sizeof ( iv2 ) FUNCTION_CALL 7 sizeof ( iv2 ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 iv2 FIELD 9 iv2 LEAF_NODE 10 iv2 LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return ( 0 ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ( 0 ) EXPR 5 ( 0 ) LEAF_NODE 6 ( FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 21, "project": "openssl_ast_vul_function_test_1", "target": 1}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_standard_methods LEAF_NODE 3 test_standard_methods PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 const EVP_PKEY_ASN1_METHOD * tmp ; VAR_DECL 4 const EVP_PKEY_ASN1_METHOD * tmp TYPE 5 const EVP_PKEY_ASN1_METHOD * TYPE_NAME 6 const EVP_PKEY_ASN1_METHOD LEAF_NODE 7 const LEAF_NODE 7 EVP_PKEY_ASN1_METHOD POINTER 6 * LEAF_NODE 7 * NAME 5 tmp LEAF_NODE 6 tmp LEAF_NODE 4 ; SIMPLE_DECL 3 int last_pkey_id ; last_pkey_id = - 1 ; VAR_DECL 4 int last_pkey_id ; last_pkey_id = - 1 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 last_pkey_id LEAF_NODE 6 last_pkey_id LEAF_NODE 5 ; INIT 5 last_pkey_id = - 1 ASSIGN 6 last_pkey_id = - 1 LVAL 7 last_pkey_id NAME 8 last_pkey_id LEAF_NODE 9 last_pkey_id ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 4 ; SIMPLE_DECL 3 size_t i ; VAR_DECL 4 size_t i TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; SIMPLE_DECL 3 int ok ; ok = 1 ; VAR_DECL 4 int ok ; ok = 1 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 ok LEAF_NODE 6 ok LEAF_NODE 5 ; INIT 5 ok = 1 ASSIGN 6 ok = 1 LVAL 7 ok NAME 8 ok LEAF_NODE 9 ok ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 tmp = standard_methods , i = 0 ; EXPR 5 tmp = standard_methods , i = 0 ASSIGN 6 tmp = standard_methods LVAL 7 tmp FIELD 8 tmp LEAF_NODE 9 tmp ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 standard_methods FIELD 8 standard_methods LEAF_NODE 9 standard_methods LEAF_NODE 6 , ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < OSSL_NELEM ( standard_methods ) EXPR 5 i < OSSL_NELEM ( standard_methods ) FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FUNCTION_CALL 6 OSSL_NELEM ( standard_methods ) CALLEE 7 OSSL_NELEM LEAF_NODE 8 OSSL_NELEM LEAF_NODE 7 ( ARGUMENT 7 standard_methods FIELD 8 standard_methods LEAF_NODE 9 standard_methods LEAF_NODE 7 ) LEAF_NODE 4 ; FOR_EXPR 4 i ++ , tmp ++ EXPR 5 i ++ , tmp ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 6 , FIELD 6 tmp ++ LEAF_NODE 7 tmp LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( * tmp ) -> pkey_id < last_pkey_id EXPR 8 ( * tmp ) -> pkey_id < last_pkey_id LEAF_NODE 9 ( UNARY_EXPR 9 * tmp UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 tmp LEAF_NODE 11 tmp LEAF_NODE 9 ) LEAF_NODE 9 -> LEAF_NODE 9 pkey_id REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 last_pkey_id LEAF_NODE 10 last_pkey_id LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 last_pkey_id = 0 ; EXPR 10 last_pkey_id = 0 ASSIGN 11 last_pkey_id = 0 LVAL 12 last_pkey_id FIELD 13 last_pkey_id LEAF_NODE 14 last_pkey_id ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 last_pkey_id = ( * tmp ) -> pkey_id ; EXPR 7 last_pkey_id = ( * tmp ) -> pkey_id ASSIGN 8 last_pkey_id = ( * tmp ) -> pkey_id LVAL 9 last_pkey_id FIELD 10 last_pkey_id LEAF_NODE 11 last_pkey_id ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( * tmp ) -> pkey_id LEAF_NODE 10 ( UNARY_EXPR 10 * tmp UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 tmp LEAF_NODE 12 tmp LEAF_NODE 10 ) LEAF_NODE 10 -> LEAF_NODE 10 pkey_id LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! TEST_true ( ( ( * tmp ) -> pem_str == NULL && ( ( * tmp ) -> pkey_flags & ASN1_PKEY_ALIAS ) != 0 ) || ( ( * tmp ) -> pem_str != NULL && ( ( * tmp ) -> pkey_flags & ASN1_PKEY_ALIAS ) == 0 ) ) EXPR 8 ! TEST_true ( ( ( * tmp ) -> pem_str == NULL && ( ( * tmp ) -> pkey_flags & ASN1_PKEY_ALIAS ) != 0 ) || ( ( * tmp ) -> pem_str != NULL && ( ( * tmp ) -> pkey_flags & ASN1_PKEY_ALIAS ) == 0 ) ) UNARY_EXPR 9 ! TEST_true ( ( ( * tmp ) -> pem_str == NULL && ( ( * tmp ) -> pkey_flags & ASN1_PKEY_ALIAS ) != 0 ) || ( ( * tmp ) -> pem_str != NULL && ( ( * tmp ) -> pkey_flags & ASN1_PKEY_ALIAS ) == 0 ) ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 TEST_true ( ( ( * tmp ) -> pem_str == NULL && ( ( * tmp ) -> pkey_flags & ASN1_PKEY_ALIAS ) != 0 ) || ( ( * tmp ) -> pem_str != NULL && ( ( * tmp ) -> pkey_flags & ASN1_PKEY_ALIAS ) == 0 ) ) CALLEE 11 TEST_true LEAF_NODE 12 TEST_true LEAF_NODE 11 ( ARGUMENT 11 ( ( * tmp ) -> pem_str == NULL && ( ( * tmp ) -> pkey_flags & ASN1_PKEY_ALIAS ) != 0 ) || ( ( * tmp ) -> pem_str != NULL && ( ( * tmp ) -> pkey_flags & ASN1_PKEY_ALIAS ) == 0 ) OR 12 ( ( * tmp ) -> pem_str == NULL && ( ( * tmp ) -> pkey_flags & ASN1_PKEY_ALIAS ) != 0 ) || ( ( * tmp ) -> pem_str != NULL && ( ( * tmp ) -> pkey_flags & ASN1_PKEY_ALIAS ) == 0 ) EXPR 13 ( ( * tmp ) -> pem_str == NULL && ( ( * tmp ) -> pkey_flags & ASN1_PKEY_ALIAS ) != 0 ) LEAF_NODE 14 ( AND 14 ( * tmp ) -> pem_str == NULL && ( ( * tmp ) -> pkey_flags & ASN1_PKEY_ALIAS ) != 0 EXPR 15 ( * tmp ) -> pem_str == NULL LEAF_NODE 16 ( UNARY_EXPR 16 * tmp UNARY_OPERATOR 17 * LEAF_NODE 18 * FIELD 17 tmp LEAF_NODE 18 tmp LEAF_NODE 16 ) LEAF_NODE 16 -> LEAF_NODE 16 pem_str EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 && EXPR 15 ( ( * tmp ) -> pkey_flags & ASN1_PKEY_ALIAS ) != 0 LEAF_NODE 16 ( LEAF_NODE 16 ( UNARY_EXPR 16 * tmp UNARY_OPERATOR 17 * LEAF_NODE 18 * FIELD 17 tmp LEAF_NODE 18 tmp LEAF_NODE 16 ) LEAF_NODE 16 -> LEAF_NODE 16 pkey_flags LEAF_NODE 16 & FIELD 16 ASN1_PKEY_ALIAS LEAF_NODE 17 ASN1_PKEY_ALIAS LEAF_NODE 16 ) EQ_OPERATOR 16 != LEAF_NODE 17 != FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 14 ) LEAF_NODE 13 || EXPR 13 ( ( * tmp ) -> pem_str != NULL && ( ( * tmp ) -> pkey_flags & ASN1_PKEY_ALIAS ) == 0 ) LEAF_NODE 14 ( AND 14 ( * tmp ) -> pem_str != NULL && ( ( * tmp ) -> pkey_flags & ASN1_PKEY_ALIAS ) == 0 EXPR 15 ( * tmp ) -> pem_str != NULL LEAF_NODE 16 ( UNARY_EXPR 16 * tmp UNARY_OPERATOR 17 * LEAF_NODE 18 * FIELD 17 tmp LEAF_NODE 18 tmp LEAF_NODE 16 ) LEAF_NODE 16 -> LEAF_NODE 16 pem_str EQ_OPERATOR 16 != LEAF_NODE 17 != FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 && EXPR 15 ( ( * tmp ) -> pkey_flags & ASN1_PKEY_ALIAS ) == 0 LEAF_NODE 16 ( LEAF_NODE 16 ( UNARY_EXPR 16 * tmp UNARY_OPERATOR 17 * LEAF_NODE 18 * FIELD 17 tmp LEAF_NODE 18 tmp LEAF_NODE 16 ) LEAF_NODE 16 -> LEAF_NODE 16 pkey_flags LEAF_NODE 16 & FIELD 16 ASN1_PKEY_ALIAS LEAF_NODE 17 ASN1_PKEY_ALIAS LEAF_NODE 16 ) EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 14 ) LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 TEST_note ( \"asn1 standard methods: Index %zu, pkey ID %d, Name=%s\" , i , ( * tmp ) -> pkey_id , OBJ_nid2sn ( ( * tmp ) -> pkey_id ) ) ; EXPR 10 TEST_note ( \"asn1 standard methods: Index %zu, pkey ID %d, Name=%s\" , i , ( * tmp ) -> pkey_id , OBJ_nid2sn ( ( * tmp ) -> pkey_id ) ) FUNCTION_CALL 11 TEST_note ( \"asn1 standard methods: Index %zu, pkey ID %d, Name=%s\" , i , ( * tmp ) -> pkey_id , OBJ_nid2sn ( ( * tmp ) -> pkey_id ) ) CALLEE 12 TEST_note LEAF_NODE 13 TEST_note LEAF_NODE 12 ( ARGUMENT 12 \"asn1 standard methods: Index %zu, pkey ID %d, Name=%s\" FIELD 13 \"asn1 standard methods: Index %zu, pkey ID %d, Name=%s\" LEAF_NODE 14 \"asn1 standard methods: Index %zu, pkey ID %d, Name=%s\" LEAF_NODE 12 , ARGUMENT 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 12 , ARGUMENT 12 ( * tmp ) -> pkey_id LEAF_NODE 13 ( UNARY_EXPR 13 * tmp UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 tmp LEAF_NODE 15 tmp LEAF_NODE 13 ) LEAF_NODE 13 -> LEAF_NODE 13 pkey_id LEAF_NODE 12 , ARGUMENT 12 OBJ_nid2sn ( ( * tmp ) -> pkey_id ) FUNCTION_CALL 13 OBJ_nid2sn ( ( * tmp ) -> pkey_id ) CALLEE 14 OBJ_nid2sn LEAF_NODE 15 OBJ_nid2sn LEAF_NODE 14 ( ARGUMENT 14 ( * tmp ) -> pkey_id LEAF_NODE 15 ( UNARY_EXPR 15 * tmp UNARY_OPERATOR 16 * LEAF_NODE 17 * FIELD 16 tmp LEAF_NODE 17 tmp LEAF_NODE 15 ) LEAF_NODE 15 -> LEAF_NODE 15 pkey_id LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ok = 0 ; EXPR 10 ok = 0 ASSIGN 11 ok = 0 LVAL 12 ok FIELD 13 ok LEAF_NODE 14 ok ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 TEST_int_ne ( last_pkey_id , 0 ) EXPR 5 TEST_int_ne ( last_pkey_id , 0 ) FUNCTION_CALL 6 TEST_int_ne ( last_pkey_id , 0 ) CALLEE 7 TEST_int_ne LEAF_NODE 8 TEST_int_ne LEAF_NODE 7 ( ARGUMENT 7 last_pkey_id FIELD 8 last_pkey_id LEAF_NODE 9 last_pkey_id LEAF_NODE 7 , ARGUMENT 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 TEST_info ( \"asn1 standard methods: Table order OK\" ) ; EXPR 7 TEST_info ( \"asn1 standard methods: Table order OK\" ) FUNCTION_CALL 8 TEST_info ( \"asn1 standard methods: Table order OK\" ) CALLEE 9 TEST_info LEAF_NODE 10 TEST_info LEAF_NODE 9 ( ARGUMENT 9 \"asn1 standard methods: Table order OK\" FIELD 10 \"asn1 standard methods: Table order OK\" LEAF_NODE 11 \"asn1 standard methods: Table order OK\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return ok ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 ok EXPR 8 ok FIELD 9 ok LEAF_NODE 10 ok LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 TEST_note ( \"asn1 standard methods: out of order\" ) ; EXPR 4 TEST_note ( \"asn1 standard methods: out of order\" ) FUNCTION_CALL 5 TEST_note ( \"asn1 standard methods: out of order\" ) CALLEE 6 TEST_note LEAF_NODE 7 TEST_note LEAF_NODE 6 ( ARGUMENT 6 \"asn1 standard methods: out of order\" FIELD 7 \"asn1 standard methods: out of order\" LEAF_NODE 8 \"asn1 standard methods: out of order\" LEAF_NODE 6 ) LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 tmp = standard_methods , i = 0 ; EXPR 5 tmp = standard_methods , i = 0 ASSIGN 6 tmp = standard_methods LVAL 7 tmp FIELD 8 tmp LEAF_NODE 9 tmp ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 standard_methods FIELD 8 standard_methods LEAF_NODE 9 standard_methods LEAF_NODE 6 , ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < OSSL_NELEM ( standard_methods ) EXPR 5 i < OSSL_NELEM ( standard_methods ) FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FUNCTION_CALL 6 OSSL_NELEM ( standard_methods ) CALLEE 7 OSSL_NELEM LEAF_NODE 8 OSSL_NELEM LEAF_NODE 7 ( ARGUMENT 7 standard_methods FIELD 8 standard_methods LEAF_NODE 9 standard_methods LEAF_NODE 7 ) LEAF_NODE 4 ; FOR_EXPR 4 i ++ , tmp ++ EXPR 5 i ++ , tmp ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 6 , FIELD 6 tmp ++ LEAF_NODE 7 tmp LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 TEST_note ( \"asn1 standard methods: Index %zu, pkey ID %d, Name=%s\" , i , ( * tmp ) -> pkey_id , OBJ_nid2sn ( ( * tmp ) -> pkey_id ) ) ; EXPR 6 TEST_note ( \"asn1 standard methods: Index %zu, pkey ID %d, Name=%s\" , i , ( * tmp ) -> pkey_id , OBJ_nid2sn ( ( * tmp ) -> pkey_id ) ) FUNCTION_CALL 7 TEST_note ( \"asn1 standard methods: Index %zu, pkey ID %d, Name=%s\" , i , ( * tmp ) -> pkey_id , OBJ_nid2sn ( ( * tmp ) -> pkey_id ) ) CALLEE 8 TEST_note LEAF_NODE 9 TEST_note LEAF_NODE 8 ( ARGUMENT 8 \"asn1 standard methods: Index %zu, pkey ID %d, Name=%s\" FIELD 9 \"asn1 standard methods: Index %zu, pkey ID %d, Name=%s\" LEAF_NODE 10 \"asn1 standard methods: Index %zu, pkey ID %d, Name=%s\" LEAF_NODE 8 , ARGUMENT 8 i FIELD 9 i LEAF_NODE 10 i LEAF_NODE 8 , ARGUMENT 8 ( * tmp ) -> pkey_id LEAF_NODE 9 ( UNARY_EXPR 9 * tmp UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 tmp LEAF_NODE 11 tmp LEAF_NODE 9 ) LEAF_NODE 9 -> LEAF_NODE 9 pkey_id LEAF_NODE 8 , ARGUMENT 8 OBJ_nid2sn ( ( * tmp ) -> pkey_id ) FUNCTION_CALL 9 OBJ_nid2sn ( ( * tmp ) -> pkey_id ) CALLEE 10 OBJ_nid2sn LEAF_NODE 11 OBJ_nid2sn LEAF_NODE 10 ( ARGUMENT 10 ( * tmp ) -> pkey_id LEAF_NODE 11 ( UNARY_EXPR 11 * tmp UNARY_OPERATOR 12 * LEAF_NODE 13 * FIELD 12 tmp LEAF_NODE 13 tmp LEAF_NODE 11 ) LEAF_NODE 11 -> LEAF_NODE 11 pkey_id LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 22, "project": "openssl_ast_normal_function_test_36", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS ; VAR_DECL 2 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS TYPE 3 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } CLASS_DEF 4 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } LEAF_NODE 5 struct CLASS_NAME 5 args_st LEAF_NODE 6 args_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int size ; int argc ; char * argv ; SIMPLE_DECL 6 int size ; VAR_DECL 7 int size TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 size LEAF_NODE 9 size LEAF_NODE 7 ; SIMPLE_DECL 6 int argc ; VAR_DECL 7 int argc TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 argc LEAF_NODE 9 argc LEAF_NODE 7 ; SIMPLE_DECL 6 char * argv ; VAR_DECL 7 char * argv TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 argv LEAF_NODE 9 argv LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 ARGS LEAF_NODE 4 ARGS LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 set_ext_copy LEAF_NODE 3 set_ext_copy PARAMETER_LIST 2 ( int * copy_type , const char * arg ) LEAF_NODE 3 ( PARAMETER_DECL 3 int * copy_type TYPE 4 int * TYPE_NAME 5 int LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 copy_type LEAF_NODE 5 copy_type LEAF_NODE 3 , PARAMETER_DECL 3 const char * arg TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 arg LEAF_NODE 5 arg LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 strcasecmp ( arg , \"none\" ) == 0 EXPR 5 strcasecmp ( arg , \"none\" ) == 0 FUNCTION_CALL 6 strcasecmp ( arg , \"none\" ) CALLEE 7 strcasecmp LEAF_NODE 8 strcasecmp LEAF_NODE 7 ( ARGUMENT 7 arg FIELD 8 arg LEAF_NODE 9 arg LEAF_NODE 7 , ARGUMENT 7 \"none\" FIELD 8 \"none\" LEAF_NODE 9 \"none\" LEAF_NODE 7 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 * copy_type = EXT_COPY_NONE ; EXPR 6 * copy_type = EXT_COPY_NONE ASSIGN 7 * copy_type = EXT_COPY_NONE LVAL 8 * copy_type UNARY_EXPR 9 * copy_type UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 copy_type LEAF_NODE 11 copy_type ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 EXT_COPY_NONE FIELD 9 EXT_COPY_NONE LEAF_NODE 10 EXT_COPY_NONE LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 strcasecmp ( arg , \"copy\" ) == 0 EXPR 7 strcasecmp ( arg , \"copy\" ) == 0 FUNCTION_CALL 8 strcasecmp ( arg , \"copy\" ) CALLEE 9 strcasecmp LEAF_NODE 10 strcasecmp LEAF_NODE 9 ( ARGUMENT 9 arg FIELD 10 arg LEAF_NODE 11 arg LEAF_NODE 9 , ARGUMENT 9 \"copy\" FIELD 10 \"copy\" LEAF_NODE 11 \"copy\" LEAF_NODE 9 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ) STATEMENTS 6 EXPR_STATEMENT 7 * copy_type = EXT_COPY_ADD ; EXPR 8 * copy_type = EXT_COPY_ADD ASSIGN 9 * copy_type = EXT_COPY_ADD LVAL 10 * copy_type UNARY_EXPR 11 * copy_type UNARY_OPERATOR 12 * LEAF_NODE 13 * FIELD 12 copy_type LEAF_NODE 13 copy_type ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 EXT_COPY_ADD FIELD 11 EXT_COPY_ADD LEAF_NODE 12 EXT_COPY_ADD LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 strcasecmp ( arg , \"copyall\" ) == 0 EXPR 7 strcasecmp ( arg , \"copyall\" ) == 0 FUNCTION_CALL 8 strcasecmp ( arg , \"copyall\" ) CALLEE 9 strcasecmp LEAF_NODE 10 strcasecmp LEAF_NODE 9 ( ARGUMENT 9 arg FIELD 10 arg LEAF_NODE 11 arg LEAF_NODE 9 , ARGUMENT 9 \"copyall\" FIELD 10 \"copyall\" LEAF_NODE 11 \"copyall\" LEAF_NODE 9 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ) STATEMENTS 6 EXPR_STATEMENT 7 * copy_type = EXT_COPY_ALL ; EXPR 8 * copy_type = EXT_COPY_ALL ASSIGN 9 * copy_type = EXT_COPY_ALL LVAL 10 * copy_type UNARY_EXPR 11 * copy_type UNARY_OPERATOR 12 * LEAF_NODE 13 * FIELD 12 copy_type LEAF_NODE 13 copy_type ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 EXT_COPY_ALL FIELD 11 EXT_COPY_ALL LEAF_NODE 12 EXT_COPY_ALL LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 23, "project": "openssl_ast_normal_function_test_77", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ssl23_get_server_hello LEAF_NODE 3 ssl23_get_server_hello PARAMETER_LIST 2 ( SSL * s ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char [ 8 ] buf ; VAR_DECL 4 char [ 8 ] buf TYPE 5 char [ 8 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 8 ] LEAF_NODE 7 [ FIELD 7 8 LEAF_NODE 8 8 LEAF_NODE 7 ] NAME 5 buf LEAF_NODE 6 buf LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * p ; VAR_DECL 4 unsigned char * p TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 4 ; SIMPLE_DECL 3 int i ; VAR_DECL 4 int i TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; SIMPLE_DECL 3 int n ; VAR_DECL 4 int n TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 n LEAF_NODE 6 n LEAF_NODE 4 ; EXPR_STATEMENT 3 n = ssl23_read_bytes ( s , 7 ) ; EXPR 4 n = ssl23_read_bytes ( s , 7 ) ASSIGN 5 n = ssl23_read_bytes ( s , 7 ) LVAL 6 n FIELD 7 n LEAF_NODE 8 n ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ssl23_read_bytes ( s , 7 ) FUNCTION_CALL 7 ssl23_read_bytes ( s , 7 ) CALLEE 8 ssl23_read_bytes LEAF_NODE 9 ssl23_read_bytes LEAF_NODE 8 ( ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 , ARGUMENT 8 7 FIELD 9 7 LEAF_NODE 10 7 LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 n != 7 EXPR 5 n != 7 FIELD 6 n LEAF_NODE 7 n EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 7 LEAF_NODE 7 7 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 return LEAF_NODE 3 ( LEAF_NODE 3 n LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 p = s -> packet ; EXPR 4 p = s -> packet ASSIGN 5 p = s -> packet LVAL 6 p FIELD 7 p LEAF_NODE 8 p ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 s -> packet FIELD 7 s -> packet LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 packet LEAF_NODE 4 ; EXPR_STATEMENT 3 memcpy ( buf , p , n ) ; EXPR 4 memcpy ( buf , p , n ) FUNCTION_CALL 5 memcpy ( buf , p , n ) CALLEE 6 memcpy LEAF_NODE 7 memcpy LEAF_NODE 6 ( ARGUMENT 6 buf FIELD 7 buf LEAF_NODE 8 buf LEAF_NODE 6 , ARGUMENT 6 p FIELD 7 p LEAF_NODE 8 p LEAF_NODE 6 , ARGUMENT 6 n FIELD 7 n LEAF_NODE 8 n LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( p [ 0 ] & 0x80 ) && ( p [ 2 ] == SSL2_MT_SERVER_HELLO ) && ( p [ 5 ] == 0x00 ) && ( p [ 6 ] == 0x02 ) EXPR 5 ( p [ 0 ] & 0x80 ) && ( p [ 2 ] == SSL2_MT_SERVER_HELLO ) && ( p [ 5 ] == 0x00 ) && ( p [ 6 ] == 0x02 ) AND 6 ( p [ 0 ] & 0x80 ) && ( p [ 2 ] == SSL2_MT_SERVER_HELLO ) && ( p [ 5 ] == 0x00 ) && ( p [ 6 ] == 0x02 ) EXPR 7 ( p [ 0 ] & 0x80 ) LEAF_NODE 8 ( FIELD 8 p [ 0 ] LEAF_NODE 9 p LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] LEAF_NODE 8 & FIELD 8 0x80 LEAF_NODE 9 0x80 LEAF_NODE 8 ) LEAF_NODE 7 && EXPR 7 ( p [ 2 ] == SSL2_MT_SERVER_HELLO ) && ( p [ 5 ] == 0x00 ) && ( p [ 6 ] == 0x02 ) AND 8 ( p [ 2 ] == SSL2_MT_SERVER_HELLO ) && ( p [ 5 ] == 0x00 ) && ( p [ 6 ] == 0x02 ) EXPR 9 ( p [ 2 ] == SSL2_MT_SERVER_HELLO ) LEAF_NODE 10 ( FIELD 10 p [ 2 ] LEAF_NODE 11 p LEAF_NODE 11 [ EXPR 11 2 FIELD 12 2 LEAF_NODE 13 2 LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SSL2_MT_SERVER_HELLO LEAF_NODE 11 SSL2_MT_SERVER_HELLO LEAF_NODE 10 ) LEAF_NODE 9 && EXPR 9 ( p [ 5 ] == 0x00 ) && ( p [ 6 ] == 0x02 ) AND 10 ( p [ 5 ] == 0x00 ) && ( p [ 6 ] == 0x02 ) EXPR 11 ( p [ 5 ] == 0x00 ) LEAF_NODE 12 ( FIELD 12 p [ 5 ] LEAF_NODE 13 p LEAF_NODE 13 [ EXPR 13 5 FIELD 14 5 LEAF_NODE 15 5 LEAF_NODE 13 ] EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 0x00 LEAF_NODE 13 0x00 LEAF_NODE 12 ) LEAF_NODE 11 && EXPR 11 ( p [ 6 ] == 0x02 ) LEAF_NODE 12 ( FIELD 12 p [ 6 ] LEAF_NODE 13 p LEAF_NODE 13 [ EXPR 13 6 FIELD 14 6 LEAF_NODE 15 6 LEAF_NODE 13 ] EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 0x02 LEAF_NODE 13 0x02 LEAF_NODE 12 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , SSL_R_UNSUPPORTED_PROTOCOL ) ; EXPR 7 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , SSL_R_UNSUPPORTED_PROTOCOL ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , SSL_R_UNSUPPORTED_PROTOCOL ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL23_GET_SERVER_HELLO FIELD 10 SSL_F_SSL23_GET_SERVER_HELLO LEAF_NODE 11 SSL_F_SSL23_GET_SERVER_HELLO LEAF_NODE 9 , ARGUMENT 9 SSL_R_UNSUPPORTED_PROTOCOL FIELD 10 SSL_R_UNSUPPORTED_PROTOCOL LEAF_NODE 11 SSL_R_UNSUPPORTED_PROTOCOL LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; SIMPLE_DECL 6 int ch_len ; VAR_DECL 7 int ch_len TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 ch_len LEAF_NODE 9 ch_len LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> options & SSL_OP_NO_SSLv2 EXPR 8 s -> options & SSL_OP_NO_SSLv2 FIELD 9 s -> options LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 options LEAF_NODE 9 & FIELD 9 SSL_OP_NO_SSLv2 LEAF_NODE 10 SSL_OP_NO_SSLv2 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , SSL_R_UNSUPPORTED_PROTOCOL ) ; EXPR 10 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , SSL_R_UNSUPPORTED_PROTOCOL ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , SSL_R_UNSUPPORTED_PROTOCOL ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL23_GET_SERVER_HELLO FIELD 13 SSL_F_SSL23_GET_SERVER_HELLO LEAF_NODE 14 SSL_F_SSL23_GET_SERVER_HELLO LEAF_NODE 12 , ARGUMENT 12 SSL_R_UNSUPPORTED_PROTOCOL FIELD 13 SSL_R_UNSUPPORTED_PROTOCOL LEAF_NODE 14 SSL_R_UNSUPPORTED_PROTOCOL LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 err LEAF_NODE 11 err LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> s2 == NULL EXPR 8 s -> s2 == NULL FIELD 9 s -> s2 LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 s2 EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! ssl2_new ( s ) EXPR 11 ! ssl2_new ( s ) UNARY_EXPR 12 ! ssl2_new ( s ) UNARY_OPERATOR 13 ! LEAF_NODE 14 ! FUNCTION_CALL 13 ssl2_new ( s ) CALLEE 14 ssl2_new LEAF_NODE 15 ssl2_new LEAF_NODE 14 ( ARGUMENT 14 s FIELD 15 s LEAF_NODE 16 s LEAF_NODE 14 ) LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 goto err ; KEYWORD 12 goto LEAF_NODE 13 goto DESTINATION 12 err LEAF_NODE 13 err LEAF_NODE 12 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 EXPR_STATEMENT 8 ssl2_clear ( s ) ; EXPR 9 ssl2_clear ( s ) FUNCTION_CALL 10 ssl2_clear ( s ) CALLEE 11 ssl2_clear LEAF_NODE 12 ssl2_clear LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> options & SSL_OP_NETSCAPE_CHALLENGE_BUG EXPR 8 s -> options & SSL_OP_NETSCAPE_CHALLENGE_BUG FIELD 9 s -> options LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 options LEAF_NODE 9 & FIELD 9 SSL_OP_NETSCAPE_CHALLENGE_BUG LEAF_NODE 10 SSL_OP_NETSCAPE_CHALLENGE_BUG LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 ch_len = SSL2_CHALLENGE_LENGTH ; EXPR 9 ch_len = SSL2_CHALLENGE_LENGTH ASSIGN 10 ch_len = SSL2_CHALLENGE_LENGTH LVAL 11 ch_len FIELD 12 ch_len LEAF_NODE 13 ch_len ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 SSL2_CHALLENGE_LENGTH FIELD 12 SSL2_CHALLENGE_LENGTH LEAF_NODE 13 SSL2_CHALLENGE_LENGTH LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 EXPR_STATEMENT 8 ch_len = SSL2_MAX_CHALLENGE_LENGTH ; EXPR 9 ch_len = SSL2_MAX_CHALLENGE_LENGTH ASSIGN 10 ch_len = SSL2_MAX_CHALLENGE_LENGTH LVAL 11 ch_len FIELD 12 ch_len LEAF_NODE 13 ch_len ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 SSL2_MAX_CHALLENGE_LENGTH FIELD 12 SSL2_MAX_CHALLENGE_LENGTH LEAF_NODE 13 SSL2_MAX_CHALLENGE_LENGTH LEAF_NODE 9 ; EXPR_STATEMENT 6 i = ( SSL3_RANDOM_SIZE < ch_len ) ? SSL3_RANDOM_SIZE : ch_len ; EXPR 7 i = ( SSL3_RANDOM_SIZE < ch_len ) ? SSL3_RANDOM_SIZE : ch_len ASSIGN 8 i = ( SSL3_RANDOM_SIZE < ch_len ) ? SSL3_RANDOM_SIZE : ch_len LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( SSL3_RANDOM_SIZE < ch_len ) ? SSL3_RANDOM_SIZE : ch_len COND_EXPR 10 ( SSL3_RANDOM_SIZE < ch_len ) ? SSL3_RANDOM_SIZE : ch_len CONDITION 11 ( SSL3_RANDOM_SIZE < ch_len ) LEAF_NODE 12 ( FIELD 12 SSL3_RANDOM_SIZE LEAF_NODE 13 SSL3_RANDOM_SIZE REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 ch_len LEAF_NODE 13 ch_len LEAF_NODE 12 ) LEAF_NODE 11 ? EXPR 11 SSL3_RANDOM_SIZE FIELD 12 SSL3_RANDOM_SIZE LEAF_NODE 13 SSL3_RANDOM_SIZE LEAF_NODE 11 : FIELD 11 ch_len LEAF_NODE 12 ch_len LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> s2 -> challenge_length = i ; EXPR 7 s -> s2 -> challenge_length = i ASSIGN 8 s -> s2 -> challenge_length = i LVAL 9 s -> s2 -> challenge_length FIELD 10 s -> s2 -> challenge_length LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s2 LEAF_NODE 11 -> LEAF_NODE 11 challenge_length ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 7 ; EXPR_STATEMENT 6 memcpy ( s -> s2 -> challenge , & ( s -> s3 -> client_random [ SSL3_RANDOM_SIZE - i ] ) , i ) ; EXPR 7 memcpy ( s -> s2 -> challenge , & ( s -> s3 -> client_random [ SSL3_RANDOM_SIZE - i ] ) , i ) FUNCTION_CALL 8 memcpy ( s -> s2 -> challenge , & ( s -> s3 -> client_random [ SSL3_RANDOM_SIZE - i ] ) , i ) CALLEE 9 memcpy LEAF_NODE 10 memcpy LEAF_NODE 9 ( ARGUMENT 9 s -> s2 -> challenge FIELD 10 s -> s2 -> challenge LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s2 LEAF_NODE 11 -> LEAF_NODE 11 challenge LEAF_NODE 9 , ARGUMENT 9 & ( s -> s3 -> client_random [ SSL3_RANDOM_SIZE - i ] ) UNARY_EXPR 10 & ( s -> s3 -> client_random [ SSL3_RANDOM_SIZE - i ] ) UNARY_OPERATOR 11 & LEAF_NODE 12 & LEAF_NODE 11 ( FIELD 11 s -> s3 -> client_random [ SSL3_RANDOM_SIZE - i ] LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 s3 LEAF_NODE 12 -> LEAF_NODE 12 client_random LEAF_NODE 12 [ EXPR 12 SSL3_RANDOM_SIZE - i FIELD 13 SSL3_RANDOM_SIZE LEAF_NODE 14 SSL3_RANDOM_SIZE LEAF_NODE 13 - FIELD 13 i LEAF_NODE 14 i LEAF_NODE 12 ] LEAF_NODE 11 ) LEAF_NODE 9 , ARGUMENT 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> s3 != NULL EXPR 8 s -> s3 != NULL FIELD 9 s -> s3 LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 s3 EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 ssl3_free ( s ) ; EXPR 9 ssl3_free ( s ) FUNCTION_CALL 10 ssl3_free ( s ) CALLEE 11 ssl3_free LEAF_NODE 12 ssl3_free LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! BUF_MEM_grow_clean ( s -> init_buf , SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER ) EXPR 8 ! BUF_MEM_grow_clean ( s -> init_buf , SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER ) UNARY_EXPR 9 ! BUF_MEM_grow_clean ( s -> init_buf , SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 BUF_MEM_grow_clean ( s -> init_buf , SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER ) CALLEE 11 BUF_MEM_grow_clean LEAF_NODE 12 BUF_MEM_grow_clean LEAF_NODE 11 ( ARGUMENT 11 s -> init_buf FIELD 12 s -> init_buf LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 init_buf LEAF_NODE 11 , ARGUMENT 11 SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER FIELD 12 SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER LEAF_NODE 13 SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , ERR_R_BUF_LIB ) ; EXPR 10 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , ERR_R_BUF_LIB ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , ERR_R_BUF_LIB ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL23_GET_SERVER_HELLO FIELD 13 SSL_F_SSL23_GET_SERVER_HELLO LEAF_NODE 14 SSL_F_SSL23_GET_SERVER_HELLO LEAF_NODE 12 , ARGUMENT 12 ERR_R_BUF_LIB FIELD 13 ERR_R_BUF_LIB LEAF_NODE 14 ERR_R_BUF_LIB LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 err LEAF_NODE 11 err LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 s -> state = SSL2_ST_GET_SERVER_HELLO_A ; EXPR 7 s -> state = SSL2_ST_GET_SERVER_HELLO_A ASSIGN 8 s -> state = SSL2_ST_GET_SERVER_HELLO_A LVAL 9 s -> state FIELD 10 s -> state LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 state ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL2_ST_GET_SERVER_HELLO_A FIELD 10 SSL2_ST_GET_SERVER_HELLO_A LEAF_NODE 11 SSL2_ST_GET_SERVER_HELLO_A LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! ( s -> client_version == SSL2_VERSION ) EXPR 8 ! ( s -> client_version == SSL2_VERSION ) UNARY_EXPR 9 ! ( s -> client_version == SSL2_VERSION ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! LEAF_NODE 10 ( FIELD 10 s -> client_version LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 client_version EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SSL2_VERSION LEAF_NODE 11 SSL2_VERSION LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 s -> s2 -> ssl2_rollback = 1 ; EXPR 9 s -> s2 -> ssl2_rollback = 1 ASSIGN 10 s -> s2 -> ssl2_rollback = 1 LVAL 11 s -> s2 -> ssl2_rollback FIELD 12 s -> s2 -> ssl2_rollback LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 s2 LEAF_NODE 13 -> LEAF_NODE 13 ssl2_rollback ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; EXPR_STATEMENT 6 s -> rstate = SSL_ST_READ_HEADER ; EXPR 7 s -> rstate = SSL_ST_READ_HEADER ASSIGN 8 s -> rstate = SSL_ST_READ_HEADER LVAL 9 s -> rstate FIELD 10 s -> rstate LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 rstate ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL_ST_READ_HEADER FIELD 10 SSL_ST_READ_HEADER LEAF_NODE 11 SSL_ST_READ_HEADER LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> packet_length = n ; EXPR 7 s -> packet_length = n ASSIGN 8 s -> packet_length = n LVAL 9 s -> packet_length FIELD 10 s -> packet_length LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 packet_length ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 n FIELD 10 n LEAF_NODE 11 n LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> packet = & ( s -> s2 -> rbuf [ 0 ] ) ; EXPR 7 s -> packet = & ( s -> s2 -> rbuf [ 0 ] ) ASSIGN 8 s -> packet = & ( s -> s2 -> rbuf [ 0 ] ) LVAL 9 s -> packet FIELD 10 s -> packet LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 packet ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 & ( s -> s2 -> rbuf [ 0 ] ) UNARY_EXPR 10 & ( s -> s2 -> rbuf [ 0 ] ) UNARY_OPERATOR 11 & LEAF_NODE 12 & LEAF_NODE 11 ( FIELD 11 s -> s2 -> rbuf [ 0 ] LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 s2 LEAF_NODE 12 -> LEAF_NODE 12 rbuf LEAF_NODE 12 [ EXPR 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ] LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 memcpy ( s -> packet , buf , n ) ; EXPR 7 memcpy ( s -> packet , buf , n ) FUNCTION_CALL 8 memcpy ( s -> packet , buf , n ) CALLEE 9 memcpy LEAF_NODE 10 memcpy LEAF_NODE 9 ( ARGUMENT 9 s -> packet FIELD 10 s -> packet LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 packet LEAF_NODE 9 , ARGUMENT 9 buf FIELD 10 buf LEAF_NODE 11 buf LEAF_NODE 9 , ARGUMENT 9 n FIELD 10 n LEAF_NODE 11 n LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> s2 -> rbuf_left = n ; EXPR 7 s -> s2 -> rbuf_left = n ASSIGN 8 s -> s2 -> rbuf_left = n LVAL 9 s -> s2 -> rbuf_left FIELD 10 s -> s2 -> rbuf_left LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s2 LEAF_NODE 11 -> LEAF_NODE 11 rbuf_left ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 n FIELD 10 n LEAF_NODE 11 n LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> s2 -> rbuf_offs = 0 ; EXPR 7 s -> s2 -> rbuf_offs = 0 ASSIGN 8 s -> s2 -> rbuf_offs = 0 LVAL 9 s -> s2 -> rbuf_offs FIELD 10 s -> s2 -> rbuf_offs LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s2 LEAF_NODE 11 -> LEAF_NODE 11 rbuf_offs ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> s2 -> write_sequence = 1 ; EXPR 7 s -> s2 -> write_sequence = 1 ASSIGN 8 s -> s2 -> write_sequence = 1 LVAL 9 s -> s2 -> write_sequence FIELD 10 s -> s2 -> write_sequence LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s2 LEAF_NODE 11 -> LEAF_NODE 11 write_sequence ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> method = SSLv2_client_method ( ) ; EXPR 7 s -> method = SSLv2_client_method ( ) ASSIGN 8 s -> method = SSLv2_client_method ( ) LVAL 9 s -> method FIELD 10 s -> method LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 method ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSLv2_client_method ( ) FUNCTION_CALL 10 SSLv2_client_method ( ) CALLEE 11 SSLv2_client_method LEAF_NODE 12 SSLv2_client_method LEAF_NODE 11 ( LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> handshake_func = s -> method -> ssl_connect ; EXPR 7 s -> handshake_func = s -> method -> ssl_connect ASSIGN 8 s -> handshake_func = s -> method -> ssl_connect LVAL 9 s -> handshake_func FIELD 10 s -> handshake_func LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 handshake_func ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 s -> method -> ssl_connect FIELD 10 s -> method -> ssl_connect LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 method LEAF_NODE 11 -> LEAF_NODE 11 ssl_connect LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 p [ 1 ] == SSL3_VERSION_MAJOR && p [ 2 ] <= TLS1_2_VERSION_MINOR && ( ( p [ 0 ] == SSL3_RT_HANDSHAKE && p [ 5 ] == SSL3_MT_SERVER_HELLO ) || ( p [ 0 ] == SSL3_RT_ALERT && p [ 3 ] == 0 && p [ 4 ] == 2 ) ) EXPR 7 p [ 1 ] == SSL3_VERSION_MAJOR && p [ 2 ] <= TLS1_2_VERSION_MINOR && ( ( p [ 0 ] == SSL3_RT_HANDSHAKE && p [ 5 ] == SSL3_MT_SERVER_HELLO ) || ( p [ 0 ] == SSL3_RT_ALERT && p [ 3 ] == 0 && p [ 4 ] == 2 ) ) AND 8 p [ 1 ] == SSL3_VERSION_MAJOR && p [ 2 ] <= TLS1_2_VERSION_MINOR && ( ( p [ 0 ] == SSL3_RT_HANDSHAKE && p [ 5 ] == SSL3_MT_SERVER_HELLO ) || ( p [ 0 ] == SSL3_RT_ALERT && p [ 3 ] == 0 && p [ 4 ] == 2 ) ) EXPR 9 p [ 1 ] == SSL3_VERSION_MAJOR FIELD 10 p [ 1 ] LEAF_NODE 11 p LEAF_NODE 11 [ EXPR 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SSL3_VERSION_MAJOR LEAF_NODE 11 SSL3_VERSION_MAJOR LEAF_NODE 9 && EXPR 9 p [ 2 ] <= TLS1_2_VERSION_MINOR && ( ( p [ 0 ] == SSL3_RT_HANDSHAKE && p [ 5 ] == SSL3_MT_SERVER_HELLO ) || ( p [ 0 ] == SSL3_RT_ALERT && p [ 3 ] == 0 && p [ 4 ] == 2 ) ) AND 10 p [ 2 ] <= TLS1_2_VERSION_MINOR && ( ( p [ 0 ] == SSL3_RT_HANDSHAKE && p [ 5 ] == SSL3_MT_SERVER_HELLO ) || ( p [ 0 ] == SSL3_RT_ALERT && p [ 3 ] == 0 && p [ 4 ] == 2 ) ) EXPR 11 p [ 2 ] <= TLS1_2_VERSION_MINOR FIELD 12 p [ 2 ] LEAF_NODE 13 p LEAF_NODE 13 [ EXPR 13 2 FIELD 14 2 LEAF_NODE 15 2 LEAF_NODE 13 ] REL_OPERATOR 12 <= LEAF_NODE 13 <= FIELD 12 TLS1_2_VERSION_MINOR LEAF_NODE 13 TLS1_2_VERSION_MINOR LEAF_NODE 11 && EXPR 11 ( ( p [ 0 ] == SSL3_RT_HANDSHAKE && p [ 5 ] == SSL3_MT_SERVER_HELLO ) || ( p [ 0 ] == SSL3_RT_ALERT && p [ 3 ] == 0 && p [ 4 ] == 2 ) ) LEAF_NODE 12 ( OR 12 ( p [ 0 ] == SSL3_RT_HANDSHAKE && p [ 5 ] == SSL3_MT_SERVER_HELLO ) || ( p [ 0 ] == SSL3_RT_ALERT && p [ 3 ] == 0 && p [ 4 ] == 2 ) EXPR 13 ( p [ 0 ] == SSL3_RT_HANDSHAKE && p [ 5 ] == SSL3_MT_SERVER_HELLO ) LEAF_NODE 14 ( AND 14 p [ 0 ] == SSL3_RT_HANDSHAKE && p [ 5 ] == SSL3_MT_SERVER_HELLO EXPR 15 p [ 0 ] == SSL3_RT_HANDSHAKE FIELD 16 p [ 0 ] LEAF_NODE 17 p LEAF_NODE 17 [ EXPR 17 0 FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 17 ] EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 SSL3_RT_HANDSHAKE LEAF_NODE 17 SSL3_RT_HANDSHAKE LEAF_NODE 15 && EXPR 15 p [ 5 ] == SSL3_MT_SERVER_HELLO FIELD 16 p [ 5 ] LEAF_NODE 17 p LEAF_NODE 17 [ EXPR 17 5 FIELD 18 5 LEAF_NODE 19 5 LEAF_NODE 17 ] EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 SSL3_MT_SERVER_HELLO LEAF_NODE 17 SSL3_MT_SERVER_HELLO LEAF_NODE 14 ) LEAF_NODE 13 || EXPR 13 ( p [ 0 ] == SSL3_RT_ALERT && p [ 3 ] == 0 && p [ 4 ] == 2 ) LEAF_NODE 14 ( AND 14 p [ 0 ] == SSL3_RT_ALERT && p [ 3 ] == 0 && p [ 4 ] == 2 EXPR 15 p [ 0 ] == SSL3_RT_ALERT FIELD 16 p [ 0 ] LEAF_NODE 17 p LEAF_NODE 17 [ EXPR 17 0 FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 17 ] EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 SSL3_RT_ALERT LEAF_NODE 17 SSL3_RT_ALERT LEAF_NODE 15 && EXPR 15 p [ 3 ] == 0 && p [ 4 ] == 2 AND 16 p [ 3 ] == 0 && p [ 4 ] == 2 EXPR 17 p [ 3 ] == 0 FIELD 18 p [ 3 ] LEAF_NODE 19 p LEAF_NODE 19 [ EXPR 19 3 FIELD 20 3 LEAF_NODE 21 3 LEAF_NODE 19 ] EQ_OPERATOR 18 == LEAF_NODE 19 == FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 17 && EXPR 17 p [ 4 ] == 2 FIELD 18 p [ 4 ] LEAF_NODE 19 p LEAF_NODE 19 [ EXPR 19 4 FIELD 20 4 LEAF_NODE 21 4 LEAF_NODE 19 ] EQ_OPERATOR 18 == LEAF_NODE 19 == FIELD 18 2 LEAF_NODE 19 2 LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ( p [ 2 ] == SSL3_VERSION_MINOR ) && ! ( s -> options & SSL_OP_NO_SSLv3 ) EXPR 10 ( p [ 2 ] == SSL3_VERSION_MINOR ) && ! ( s -> options & SSL_OP_NO_SSLv3 ) AND 11 ( p [ 2 ] == SSL3_VERSION_MINOR ) && ! ( s -> options & SSL_OP_NO_SSLv3 ) EXPR 12 ( p [ 2 ] == SSL3_VERSION_MINOR ) LEAF_NODE 13 ( FIELD 13 p [ 2 ] LEAF_NODE 14 p LEAF_NODE 14 [ EXPR 14 2 FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SSL3_VERSION_MINOR LEAF_NODE 14 SSL3_VERSION_MINOR LEAF_NODE 13 ) LEAF_NODE 12 && EXPR 12 ! ( s -> options & SSL_OP_NO_SSLv3 ) UNARY_EXPR 13 ! ( s -> options & SSL_OP_NO_SSLv3 ) UNARY_OPERATOR 14 ! LEAF_NODE 15 ! LEAF_NODE 14 ( FIELD 14 s -> options LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 options LEAF_NODE 14 & FIELD 14 SSL_OP_NO_SSLv3 LEAF_NODE 15 SSL_OP_NO_SSLv3 LEAF_NODE 14 ) LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 FIPS_mode ( ) EXPR 13 FIPS_mode ( ) FUNCTION_CALL 14 FIPS_mode ( ) CALLEE 15 FIPS_mode LEAF_NODE 16 FIPS_mode LEAF_NODE 15 ( LEAF_NODE 15 ) LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE ) ; EXPR 15 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE ) FUNCTION_CALL 16 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE ) CALLEE 17 SSLerr LEAF_NODE 18 SSLerr LEAF_NODE 17 ( ARGUMENT 17 SSL_F_SSL23_GET_SERVER_HELLO FIELD 18 SSL_F_SSL23_GET_SERVER_HELLO LEAF_NODE 19 SSL_F_SSL23_GET_SERVER_HELLO LEAF_NODE 17 , ARGUMENT 17 SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE FIELD 18 SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE LEAF_NODE 19 SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 s -> version = SSL3_VERSION ; EXPR 12 s -> version = SSL3_VERSION ASSIGN 13 s -> version = SSL3_VERSION LVAL 14 s -> version FIELD 15 s -> version LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 version ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 SSL3_VERSION FIELD 15 SSL3_VERSION LEAF_NODE 16 SSL3_VERSION LEAF_NODE 12 ; EXPR_STATEMENT 11 s -> method = SSLv3_client_method ( ) ; EXPR 12 s -> method = SSLv3_client_method ( ) ASSIGN 13 s -> method = SSLv3_client_method ( ) LVAL 14 s -> method FIELD 15 s -> method LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 method ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 SSLv3_client_method ( ) FUNCTION_CALL 15 SSLv3_client_method ( ) CALLEE 16 SSLv3_client_method LEAF_NODE 17 SSLv3_client_method LEAF_NODE 16 ( LEAF_NODE 16 ) LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 8 KEYWORD 9 else LEAF_NODE 10 else STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 ( p [ 2 ] == TLS1_VERSION_MINOR ) && ! ( s -> options & SSL_OP_NO_TLSv1 ) EXPR 12 ( p [ 2 ] == TLS1_VERSION_MINOR ) && ! ( s -> options & SSL_OP_NO_TLSv1 ) AND 13 ( p [ 2 ] == TLS1_VERSION_MINOR ) && ! ( s -> options & SSL_OP_NO_TLSv1 ) EXPR 14 ( p [ 2 ] == TLS1_VERSION_MINOR ) LEAF_NODE 15 ( FIELD 15 p [ 2 ] LEAF_NODE 16 p LEAF_NODE 16 [ EXPR 16 2 FIELD 17 2 LEAF_NODE 18 2 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 TLS1_VERSION_MINOR LEAF_NODE 16 TLS1_VERSION_MINOR LEAF_NODE 15 ) LEAF_NODE 14 && EXPR 14 ! ( s -> options & SSL_OP_NO_TLSv1 ) UNARY_EXPR 15 ! ( s -> options & SSL_OP_NO_TLSv1 ) UNARY_OPERATOR 16 ! LEAF_NODE 17 ! LEAF_NODE 16 ( FIELD 16 s -> options LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 options LEAF_NODE 16 & FIELD 16 SSL_OP_NO_TLSv1 LEAF_NODE 17 SSL_OP_NO_TLSv1 LEAF_NODE 16 ) LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 s -> version = TLS1_VERSION ; EXPR 14 s -> version = TLS1_VERSION ASSIGN 15 s -> version = TLS1_VERSION LVAL 16 s -> version FIELD 17 s -> version LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 version ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 TLS1_VERSION FIELD 17 TLS1_VERSION LEAF_NODE 18 TLS1_VERSION LEAF_NODE 14 ; EXPR_STATEMENT 13 s -> method = TLSv1_client_method ( ) ; EXPR 14 s -> method = TLSv1_client_method ( ) ASSIGN 15 s -> method = TLSv1_client_method ( ) LVAL 16 s -> method FIELD 17 s -> method LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 method ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 TLSv1_client_method ( ) FUNCTION_CALL 17 TLSv1_client_method ( ) CALLEE 18 TLSv1_client_method LEAF_NODE 19 TLSv1_client_method LEAF_NODE 18 ( LEAF_NODE 18 ) LEAF_NODE 14 ; LEAF_NODE 12 } SELECTION 8 KEYWORD 9 else LEAF_NODE 10 else STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 ( p [ 2 ] == TLS1_1_VERSION_MINOR ) && ! ( s -> options & SSL_OP_NO_TLSv1_1 ) EXPR 12 ( p [ 2 ] == TLS1_1_VERSION_MINOR ) && ! ( s -> options & SSL_OP_NO_TLSv1_1 ) AND 13 ( p [ 2 ] == TLS1_1_VERSION_MINOR ) && ! ( s -> options & SSL_OP_NO_TLSv1_1 ) EXPR 14 ( p [ 2 ] == TLS1_1_VERSION_MINOR ) LEAF_NODE 15 ( FIELD 15 p [ 2 ] LEAF_NODE 16 p LEAF_NODE 16 [ EXPR 16 2 FIELD 17 2 LEAF_NODE 18 2 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 TLS1_1_VERSION_MINOR LEAF_NODE 16 TLS1_1_VERSION_MINOR LEAF_NODE 15 ) LEAF_NODE 14 && EXPR 14 ! ( s -> options & SSL_OP_NO_TLSv1_1 ) UNARY_EXPR 15 ! ( s -> options & SSL_OP_NO_TLSv1_1 ) UNARY_OPERATOR 16 ! LEAF_NODE 17 ! LEAF_NODE 16 ( FIELD 16 s -> options LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 options LEAF_NODE 16 & FIELD 16 SSL_OP_NO_TLSv1_1 LEAF_NODE 17 SSL_OP_NO_TLSv1_1 LEAF_NODE 16 ) LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 s -> version = TLS1_1_VERSION ; EXPR 14 s -> version = TLS1_1_VERSION ASSIGN 15 s -> version = TLS1_1_VERSION LVAL 16 s -> version FIELD 17 s -> version LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 version ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 TLS1_1_VERSION FIELD 17 TLS1_1_VERSION LEAF_NODE 18 TLS1_1_VERSION LEAF_NODE 14 ; EXPR_STATEMENT 13 s -> method = TLSv1_1_client_method ( ) ; EXPR 14 s -> method = TLSv1_1_client_method ( ) ASSIGN 15 s -> method = TLSv1_1_client_method ( ) LVAL 16 s -> method FIELD 17 s -> method LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 method ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 TLSv1_1_client_method ( ) FUNCTION_CALL 17 TLSv1_1_client_method ( ) CALLEE 18 TLSv1_1_client_method LEAF_NODE 19 TLSv1_1_client_method LEAF_NODE 18 ( LEAF_NODE 18 ) LEAF_NODE 14 ; LEAF_NODE 12 } SELECTION 8 KEYWORD 9 else LEAF_NODE 10 else STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 ( p [ 2 ] == TLS1_2_VERSION_MINOR ) && ! ( s -> options & SSL_OP_NO_TLSv1_2 ) EXPR 12 ( p [ 2 ] == TLS1_2_VERSION_MINOR ) && ! ( s -> options & SSL_OP_NO_TLSv1_2 ) AND 13 ( p [ 2 ] == TLS1_2_VERSION_MINOR ) && ! ( s -> options & SSL_OP_NO_TLSv1_2 ) EXPR 14 ( p [ 2 ] == TLS1_2_VERSION_MINOR ) LEAF_NODE 15 ( FIELD 15 p [ 2 ] LEAF_NODE 16 p LEAF_NODE 16 [ EXPR 16 2 FIELD 17 2 LEAF_NODE 18 2 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 TLS1_2_VERSION_MINOR LEAF_NODE 16 TLS1_2_VERSION_MINOR LEAF_NODE 15 ) LEAF_NODE 14 && EXPR 14 ! ( s -> options & SSL_OP_NO_TLSv1_2 ) UNARY_EXPR 15 ! ( s -> options & SSL_OP_NO_TLSv1_2 ) UNARY_OPERATOR 16 ! LEAF_NODE 17 ! LEAF_NODE 16 ( FIELD 16 s -> options LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 options LEAF_NODE 16 & FIELD 16 SSL_OP_NO_TLSv1_2 LEAF_NODE 17 SSL_OP_NO_TLSv1_2 LEAF_NODE 16 ) LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 s -> version = TLS1_2_VERSION ; EXPR 14 s -> version = TLS1_2_VERSION ASSIGN 15 s -> version = TLS1_2_VERSION LVAL 16 s -> version FIELD 17 s -> version LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 version ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 TLS1_2_VERSION FIELD 17 TLS1_2_VERSION LEAF_NODE 18 TLS1_2_VERSION LEAF_NODE 14 ; EXPR_STATEMENT 13 s -> method = TLSv1_2_client_method ( ) ; EXPR 14 s -> method = TLSv1_2_client_method ( ) ASSIGN 15 s -> method = TLSv1_2_client_method ( ) LVAL 16 s -> method FIELD 17 s -> method LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 method ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 TLSv1_2_client_method ( ) FUNCTION_CALL 17 TLSv1_2_client_method ( ) CALLEE 18 TLSv1_2_client_method LEAF_NODE 19 TLSv1_2_client_method LEAF_NODE 18 ( LEAF_NODE 18 ) LEAF_NODE 14 ; LEAF_NODE 12 } SELECTION 8 KEYWORD 9 else LEAF_NODE 10 else STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , SSL_R_UNSUPPORTED_PROTOCOL ) ; EXPR 12 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , SSL_R_UNSUPPORTED_PROTOCOL ) FUNCTION_CALL 13 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , SSL_R_UNSUPPORTED_PROTOCOL ) CALLEE 14 SSLerr LEAF_NODE 15 SSLerr LEAF_NODE 14 ( ARGUMENT 14 SSL_F_SSL23_GET_SERVER_HELLO FIELD 15 SSL_F_SSL23_GET_SERVER_HELLO LEAF_NODE 16 SSL_F_SSL23_GET_SERVER_HELLO LEAF_NODE 14 , ARGUMENT 14 SSL_R_UNSUPPORTED_PROTOCOL FIELD 15 SSL_R_UNSUPPORTED_PROTOCOL LEAF_NODE 16 SSL_R_UNSUPPORTED_PROTOCOL LEAF_NODE 14 ) LEAF_NODE 12 ; JUMP_STATEMENT 11 goto err ; KEYWORD 12 goto LEAF_NODE 13 goto DESTINATION 12 err LEAF_NODE 13 err LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 p [ 0 ] == SSL3_RT_ALERT && p [ 5 ] != SSL3_AL_WARNING EXPR 10 p [ 0 ] == SSL3_RT_ALERT && p [ 5 ] != SSL3_AL_WARNING AND 11 p [ 0 ] == SSL3_RT_ALERT && p [ 5 ] != SSL3_AL_WARNING EXPR 12 p [ 0 ] == SSL3_RT_ALERT FIELD 13 p [ 0 ] LEAF_NODE 14 p LEAF_NODE 14 [ EXPR 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SSL3_RT_ALERT LEAF_NODE 14 SSL3_RT_ALERT LEAF_NODE 12 && EXPR 12 p [ 5 ] != SSL3_AL_WARNING FIELD 13 p [ 5 ] LEAF_NODE 14 p LEAF_NODE 14 [ EXPR 14 5 FIELD 15 5 LEAF_NODE 16 5 LEAF_NODE 14 ] EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 SSL3_AL_WARNING LEAF_NODE 14 SSL3_AL_WARNING LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 void LEAF_NODE 11 ( LEAF_NODE 11 * LEAF_NODE 11 cb LEAF_NODE 11 ) LEAF_NODE 11 ( LEAF_NODE 11 const LEAF_NODE 11 SSL LEAF_NODE 11 * LEAF_NODE 11 ssl LEAF_NODE 11 , LEAF_NODE 11 int LEAF_NODE 11 type LEAF_NODE 11 , LEAF_NODE 11 int LEAF_NODE 11 val LEAF_NODE 11 ) LEAF_NODE 11 = EXPR_STATEMENT 11 NULL ; EXPR 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 ; SIMPLE_DECL 11 int j ; VAR_DECL 12 int j TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 j LEAF_NODE 14 j LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> info_callback != NULL EXPR 13 s -> info_callback != NULL FIELD 14 s -> info_callback LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 info_callback EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 cb = s -> info_callback ; EXPR 14 cb = s -> info_callback ASSIGN 15 cb = s -> info_callback LVAL 16 cb FIELD 17 cb LEAF_NODE 18 cb ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 s -> info_callback FIELD 17 s -> info_callback LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 info_callback LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 else LEAF_NODE 13 else STATEMENTS 12 SELECTION 13 KEYWORD 14 if LEAF_NODE 15 if LEAF_NODE 14 ( CONDITION 14 s -> ctx -> info_callback != NULL EXPR 15 s -> ctx -> info_callback != NULL FIELD 16 s -> ctx -> info_callback LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 ctx LEAF_NODE 17 -> LEAF_NODE 17 info_callback EQ_OPERATOR 16 != LEAF_NODE 17 != FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 14 ) STATEMENTS 14 EXPR_STATEMENT 15 cb = s -> ctx -> info_callback ; EXPR 16 cb = s -> ctx -> info_callback ASSIGN 17 cb = s -> ctx -> info_callback LVAL 18 cb FIELD 19 cb LEAF_NODE 20 cb ASSIGN_OP 18 = LEAF_NODE 19 = RVAL 18 s -> ctx -> info_callback FIELD 19 s -> ctx -> info_callback LEAF_NODE 20 s LEAF_NODE 20 -> LEAF_NODE 20 ctx LEAF_NODE 20 -> LEAF_NODE 20 info_callback LEAF_NODE 16 ; EXPR_STATEMENT 11 i = p [ 5 ] ; EXPR 12 i = p [ 5 ] ASSIGN 13 i = p [ 5 ] LVAL 14 i FIELD 15 i LEAF_NODE 16 i ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 p [ 5 ] FIELD 15 p [ 5 ] LEAF_NODE 16 p LEAF_NODE 16 [ EXPR 16 5 FIELD 17 5 LEAF_NODE 18 5 LEAF_NODE 16 ] LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 cb != NULL EXPR 13 cb != NULL FIELD 14 cb LEAF_NODE 15 cb EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 j = ( i << 8 ) | p [ 6 ] ; EXPR 15 j = ( i << 8 ) | p [ 6 ] ASSIGN 16 j = ( i << 8 ) | p [ 6 ] LVAL 17 j FIELD 18 j LEAF_NODE 19 j ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 ( i << 8 ) | p [ 6 ] BIT_OR 18 ( i << 8 ) | p [ 6 ] BIT_OR_ELEM 19 ( i << 8 ) LEAF_NODE 20 ( FIELD 20 i LEAF_NODE 21 i LEAF_NODE 20 << FIELD 20 8 LEAF_NODE 21 8 LEAF_NODE 20 ) LEAF_NODE 19 | BIT_OR_ELEM 19 p [ 6 ] FIELD 20 p [ 6 ] LEAF_NODE 21 p LEAF_NODE 21 [ EXPR 21 6 FIELD 22 6 LEAF_NODE 23 6 LEAF_NODE 21 ] LEAF_NODE 15 ; EXPR_STATEMENT 14 cb ( s , SSL_CB_READ_ALERT , j ) ; EXPR 15 cb ( s , SSL_CB_READ_ALERT , j ) FUNCTION_CALL 16 cb ( s , SSL_CB_READ_ALERT , j ) CALLEE 17 cb LEAF_NODE 18 cb LEAF_NODE 17 ( ARGUMENT 17 s FIELD 18 s LEAF_NODE 19 s LEAF_NODE 17 , ARGUMENT 17 SSL_CB_READ_ALERT FIELD 18 SSL_CB_READ_ALERT LEAF_NODE 19 SSL_CB_READ_ALERT LEAF_NODE 17 , ARGUMENT 17 j FIELD 18 j LEAF_NODE 19 j LEAF_NODE 17 ) LEAF_NODE 15 ; LEAF_NODE 13 } SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> msg_callback EXPR 13 s -> msg_callback FIELD 14 s -> msg_callback LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 msg_callback LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 s -> msg_callback ( 0 , s -> version , SSL3_RT_ALERT , p + 5 , 2 , s , s -> msg_callback_arg ) ; EXPR 14 s -> msg_callback ( 0 , s -> version , SSL3_RT_ALERT , p + 5 , 2 , s , s -> msg_callback_arg ) FUNCTION_CALL 15 s -> msg_callback ( 0 , s -> version , SSL3_RT_ALERT , p + 5 , 2 , s , s -> msg_callback_arg ) CALLEE 16 s -> msg_callback LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 msg_callback LEAF_NODE 16 ( ARGUMENT 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 16 , ARGUMENT 16 s -> version FIELD 17 s -> version LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 version LEAF_NODE 16 , ARGUMENT 16 SSL3_RT_ALERT FIELD 17 SSL3_RT_ALERT LEAF_NODE 18 SSL3_RT_ALERT LEAF_NODE 16 , ARGUMENT 16 p + 5 FIELD 17 p LEAF_NODE 18 p LEAF_NODE 17 + FIELD 17 5 LEAF_NODE 18 5 LEAF_NODE 16 , ARGUMENT 16 2 FIELD 17 2 LEAF_NODE 18 2 LEAF_NODE 16 , ARGUMENT 16 s FIELD 17 s LEAF_NODE 18 s LEAF_NODE 16 , ARGUMENT 16 s -> msg_callback_arg FIELD 17 s -> msg_callback_arg LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 msg_callback_arg LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 11 s -> rwstate = SSL_NOTHING ; EXPR 12 s -> rwstate = SSL_NOTHING ASSIGN 13 s -> rwstate = SSL_NOTHING LVAL 14 s -> rwstate FIELD 15 s -> rwstate LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 rwstate ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 SSL_NOTHING FIELD 15 SSL_NOTHING LEAF_NODE 16 SSL_NOTHING LEAF_NODE 12 ; EXPR_STATEMENT 11 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , SSL_AD_REASON_OFFSET + p [ 6 ] ) ; EXPR 12 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , SSL_AD_REASON_OFFSET + p [ 6 ] ) FUNCTION_CALL 13 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , SSL_AD_REASON_OFFSET + p [ 6 ] ) CALLEE 14 SSLerr LEAF_NODE 15 SSLerr LEAF_NODE 14 ( ARGUMENT 14 SSL_F_SSL23_GET_SERVER_HELLO FIELD 15 SSL_F_SSL23_GET_SERVER_HELLO LEAF_NODE 16 SSL_F_SSL23_GET_SERVER_HELLO LEAF_NODE 14 , ARGUMENT 14 SSL_AD_REASON_OFFSET + p [ 6 ] FIELD 15 SSL_AD_REASON_OFFSET LEAF_NODE 16 SSL_AD_REASON_OFFSET LEAF_NODE 15 + FIELD 15 p [ 6 ] LEAF_NODE 16 p LEAF_NODE 16 [ EXPR 16 6 FIELD 17 6 LEAF_NODE 18 6 LEAF_NODE 16 ] LEAF_NODE 14 ) LEAF_NODE 12 ; JUMP_STATEMENT 11 goto err ; KEYWORD 12 goto LEAF_NODE 13 goto DESTINATION 12 err LEAF_NODE 13 err LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ! ssl_init_wbio_buffer ( s , 1 ) EXPR 10 ! ssl_init_wbio_buffer ( s , 1 ) UNARY_EXPR 11 ! ssl_init_wbio_buffer ( s , 1 ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 ssl_init_wbio_buffer ( s , 1 ) CALLEE 13 ssl_init_wbio_buffer LEAF_NODE 14 ssl_init_wbio_buffer LEAF_NODE 13 ( ARGUMENT 13 s FIELD 14 s LEAF_NODE 15 s LEAF_NODE 13 , ARGUMENT 13 1 FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 13 ) LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 goto err ; KEYWORD 11 goto LEAF_NODE 12 goto DESTINATION 11 err LEAF_NODE 12 err LEAF_NODE 11 ; EXPR_STATEMENT 8 s -> state = SSL3_ST_CR_SRVR_HELLO_A ; EXPR 9 s -> state = SSL3_ST_CR_SRVR_HELLO_A ASSIGN 10 s -> state = SSL3_ST_CR_SRVR_HELLO_A LVAL 11 s -> state FIELD 12 s -> state LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 state ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 SSL3_ST_CR_SRVR_HELLO_A FIELD 12 SSL3_ST_CR_SRVR_HELLO_A LEAF_NODE 13 SSL3_ST_CR_SRVR_HELLO_A LEAF_NODE 9 ; EXPR_STATEMENT 8 s -> rstate = SSL_ST_READ_HEADER ; EXPR 9 s -> rstate = SSL_ST_READ_HEADER ASSIGN 10 s -> rstate = SSL_ST_READ_HEADER LVAL 11 s -> rstate FIELD 12 s -> rstate LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 rstate ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 SSL_ST_READ_HEADER FIELD 12 SSL_ST_READ_HEADER LEAF_NODE 13 SSL_ST_READ_HEADER LEAF_NODE 9 ; EXPR_STATEMENT 8 s -> packet_length = n ; EXPR 9 s -> packet_length = n ASSIGN 10 s -> packet_length = n LVAL 11 s -> packet_length FIELD 12 s -> packet_length LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 packet_length ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 n FIELD 12 n LEAF_NODE 13 n LEAF_NODE 9 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 s -> s3 -> rbuf . buf == NULL EXPR 10 s -> s3 -> rbuf . buf == NULL FIELD 11 s -> s3 -> rbuf . buf LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 s3 LEAF_NODE 12 -> LEAF_NODE 12 rbuf LEAF_NODE 12 . LEAF_NODE 12 buf EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 9 ) STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 ! ssl3_setup_read_buffer ( s ) EXPR 12 ! ssl3_setup_read_buffer ( s ) UNARY_EXPR 13 ! ssl3_setup_read_buffer ( s ) UNARY_OPERATOR 14 ! LEAF_NODE 15 ! FUNCTION_CALL 14 ssl3_setup_read_buffer ( s ) CALLEE 15 ssl3_setup_read_buffer LEAF_NODE 16 ssl3_setup_read_buffer LEAF_NODE 15 ( ARGUMENT 15 s FIELD 16 s LEAF_NODE 17 s LEAF_NODE 15 ) LEAF_NODE 11 ) STATEMENTS 11 JUMP_STATEMENT 12 goto err ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 err LEAF_NODE 14 err LEAF_NODE 13 ; EXPR_STATEMENT 8 s -> packet = & ( s -> s3 -> rbuf . buf [ 0 ] ) ; EXPR 9 s -> packet = & ( s -> s3 -> rbuf . buf [ 0 ] ) ASSIGN 10 s -> packet = & ( s -> s3 -> rbuf . buf [ 0 ] ) LVAL 11 s -> packet FIELD 12 s -> packet LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 packet ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 & ( s -> s3 -> rbuf . buf [ 0 ] ) UNARY_EXPR 12 & ( s -> s3 -> rbuf . buf [ 0 ] ) UNARY_OPERATOR 13 & LEAF_NODE 14 & LEAF_NODE 13 ( FIELD 13 s -> s3 -> rbuf . buf [ 0 ] LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 s3 LEAF_NODE 14 -> LEAF_NODE 14 rbuf LEAF_NODE 14 . LEAF_NODE 14 buf LEAF_NODE 14 [ EXPR 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ] LEAF_NODE 13 ) LEAF_NODE 9 ; EXPR_STATEMENT 8 memcpy ( s -> packet , buf , n ) ; EXPR 9 memcpy ( s -> packet , buf , n ) FUNCTION_CALL 10 memcpy ( s -> packet , buf , n ) CALLEE 11 memcpy LEAF_NODE 12 memcpy LEAF_NODE 11 ( ARGUMENT 11 s -> packet FIELD 12 s -> packet LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 packet LEAF_NODE 11 , ARGUMENT 11 buf FIELD 12 buf LEAF_NODE 13 buf LEAF_NODE 11 , ARGUMENT 11 n FIELD 12 n LEAF_NODE 13 n LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 8 s -> s3 -> rbuf . left = n ; EXPR 9 s -> s3 -> rbuf . left = n ASSIGN 10 s -> s3 -> rbuf . left = n LVAL 11 s -> s3 -> rbuf . left FIELD 12 s -> s3 -> rbuf . left LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 s3 LEAF_NODE 13 -> LEAF_NODE 13 rbuf LEAF_NODE 13 . LEAF_NODE 13 left ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 n FIELD 12 n LEAF_NODE 13 n LEAF_NODE 9 ; EXPR_STATEMENT 8 s -> s3 -> rbuf . offset = 0 ; EXPR 9 s -> s3 -> rbuf . offset = 0 ASSIGN 10 s -> s3 -> rbuf . offset = 0 LVAL 11 s -> s3 -> rbuf . offset FIELD 12 s -> s3 -> rbuf . offset LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 s3 LEAF_NODE 13 -> LEAF_NODE 13 rbuf LEAF_NODE 13 . LEAF_NODE 13 offset ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; EXPR_STATEMENT 8 s -> handshake_func = s -> method -> ssl_connect ; EXPR 9 s -> handshake_func = s -> method -> ssl_connect ASSIGN 10 s -> handshake_func = s -> method -> ssl_connect LVAL 11 s -> handshake_func FIELD 12 s -> handshake_func LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 handshake_func ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 s -> method -> ssl_connect FIELD 12 s -> method -> ssl_connect LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 method LEAF_NODE 13 -> LEAF_NODE 13 ssl_connect LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , SSL_R_UNKNOWN_PROTOCOL ) ; EXPR 7 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , SSL_R_UNKNOWN_PROTOCOL ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL23_GET_SERVER_HELLO , SSL_R_UNKNOWN_PROTOCOL ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL23_GET_SERVER_HELLO FIELD 10 SSL_F_SSL23_GET_SERVER_HELLO LEAF_NODE 11 SSL_F_SSL23_GET_SERVER_HELLO LEAF_NODE 9 , ARGUMENT 9 SSL_R_UNKNOWN_PROTOCOL FIELD 10 SSL_R_UNKNOWN_PROTOCOL LEAF_NODE 11 SSL_R_UNKNOWN_PROTOCOL LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 s -> init_num = 0 ; EXPR 4 s -> init_num = 0 ASSIGN 5 s -> init_num = 0 LVAL 6 s -> init_num FIELD 7 s -> init_num LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 init_num ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ssl_get_new_session ( s , 0 ) EXPR 5 ! ssl_get_new_session ( s , 0 ) UNARY_EXPR 6 ! ssl_get_new_session ( s , 0 ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 ssl_get_new_session ( s , 0 ) CALLEE 8 ssl_get_new_session LEAF_NODE 9 ssl_get_new_session LEAF_NODE 8 ( ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 , ARGUMENT 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto err ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 err LEAF_NODE 7 err LEAF_NODE 6 ; JUMP_STATEMENT 3 return ( SSL_connect ( s ) ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ( SSL_connect ( s ) ) EXPR 5 ( SSL_connect ( s ) ) LEAF_NODE 6 ( FUNCTION_CALL 6 SSL_connect ( s ) CALLEE 7 SSL_connect LEAF_NODE 8 SSL_connect LEAF_NODE 7 ( ARGUMENT 7 s FIELD 8 s LEAF_NODE 9 s LEAF_NODE 7 ) LEAF_NODE 6 ) LEAF_NODE 4 ; LABEL 3 err : LEAF_NODE 4 err LEAF_NODE 4 : JUMP_STATEMENT 3 return ( - 1 ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ( - 1 ) EXPR 5 ( - 1 ) LEAF_NODE 6 ( UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 24, "project": "openssl_ast_vul_function_test_3", "target": 1}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 struct pw_cb_data BASE_CLASSES { const void * password ; const char * prompt_info ; } PW_CB_DATA ; VAR_DECL 2 struct pw_cb_data BASE_CLASSES { const void * password ; const char * prompt_info ; } PW_CB_DATA TYPE 3 struct pw_cb_data BASE_CLASSES { const void * password ; const char * prompt_info ; } CLASS_DEF 4 struct pw_cb_data BASE_CLASSES { const void * password ; const char * prompt_info ; } LEAF_NODE 5 struct CLASS_NAME 5 pw_cb_data LEAF_NODE 6 pw_cb_data LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 const void * password ; const char * prompt_info ; SIMPLE_DECL 6 const void * password ; VAR_DECL 7 const void * password TYPE 8 const void * TYPE_NAME 9 const void LEAF_NODE 10 const LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 password LEAF_NODE 9 password LEAF_NODE 7 ; SIMPLE_DECL 6 const char * prompt_info ; VAR_DECL 7 const char * prompt_info TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 prompt_info LEAF_NODE 9 prompt_info LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 PW_CB_DATA LEAF_NODE 4 PW_CB_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 UI_METHOD * ui_method ; ui_method = NULL ; VAR_DECL 2 UI_METHOD * ui_method ; ui_method = NULL TYPE 3 UI_METHOD * TYPE_NAME 4 UI_METHOD LEAF_NODE 5 UI_METHOD POINTER 4 * LEAF_NODE 5 * NAME 3 ui_method LEAF_NODE 4 ui_method LEAF_NODE 3 ; INIT 3 ui_method = NULL ASSIGN 4 ui_method = NULL LVAL 5 ui_method NAME 6 ui_method LEAF_NODE 7 ui_method ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 password_callback LEAF_NODE 3 password_callback PARAMETER_LIST 2 ( char * buf , int bufsiz , int verify , PW_CB_DATA * cb_tmp ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * buf TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 buf LEAF_NODE 5 buf LEAF_NODE 3 , PARAMETER_DECL 3 int bufsiz TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 bufsiz LEAF_NODE 5 bufsiz LEAF_NODE 3 , PARAMETER_DECL 3 int verify TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 verify LEAF_NODE 5 verify LEAF_NODE 3 , PARAMETER_DECL 3 PW_CB_DATA * cb_tmp TYPE 4 PW_CB_DATA * TYPE_NAME 5 PW_CB_DATA LEAF_NODE 6 PW_CB_DATA POINTER 5 * LEAF_NODE 6 * NAME 4 cb_tmp LEAF_NODE 5 cb_tmp LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int res ; res = 0 ; VAR_DECL 4 int res ; res = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 res LEAF_NODE 6 res LEAF_NODE 5 ; INIT 5 res = 0 ASSIGN 6 res = 0 LVAL 7 res NAME 8 res LEAF_NODE 9 res ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 UI * ui ; ui = NULL ; VAR_DECL 4 UI * ui ; ui = NULL TYPE 5 UI * TYPE_NAME 6 UI LEAF_NODE 7 UI POINTER 6 * LEAF_NODE 7 * NAME 5 ui LEAF_NODE 6 ui LEAF_NODE 5 ; INIT 5 ui = NULL ASSIGN 6 ui = NULL LVAL 7 ui NAME 8 ui LEAF_NODE 9 ui ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 PW_CB_DATA * cb_data ; cb_data = ( PW_CB_DATA * ) cb_tmp ; VAR_DECL 4 PW_CB_DATA * cb_data ; cb_data = ( PW_CB_DATA * ) cb_tmp TYPE 5 PW_CB_DATA * TYPE_NAME 6 PW_CB_DATA LEAF_NODE 7 PW_CB_DATA POINTER 6 * LEAF_NODE 7 * NAME 5 cb_data LEAF_NODE 6 cb_data LEAF_NODE 5 ; INIT 5 cb_data = ( PW_CB_DATA * ) cb_tmp ASSIGN 6 cb_data = ( PW_CB_DATA * ) cb_tmp LVAL 7 cb_data NAME 8 cb_data LEAF_NODE 9 cb_data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( PW_CB_DATA * ) cb_tmp LEAF_NODE 8 ( TYPE_NAME 8 PW_CB_DATA LEAF_NODE 9 PW_CB_DATA LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 cb_tmp LEAF_NODE 9 cb_tmp LEAF_NODE 4 ; EXPR_STATEMENT 3 ui = UI_new_method ( ui_method ) ; EXPR 4 ui = UI_new_method ( ui_method ) ASSIGN 5 ui = UI_new_method ( ui_method ) LVAL 6 ui FIELD 7 ui LEAF_NODE 8 ui ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 UI_new_method ( ui_method ) FUNCTION_CALL 7 UI_new_method ( ui_method ) CALLEE 8 UI_new_method LEAF_NODE 9 UI_new_method LEAF_NODE 8 ( ARGUMENT 8 ui_method FIELD 9 ui_method LEAF_NODE 10 ui_method LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ui EXPR 5 ui FIELD 6 ui LEAF_NODE 7 ui LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int ok ; ok = 0 ; VAR_DECL 7 int ok ; ok = 0 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 ok LEAF_NODE 9 ok LEAF_NODE 8 ; INIT 8 ok = 0 ASSIGN 9 ok = 0 LVAL 10 ok NAME 11 ok LEAF_NODE 12 ok ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ; SIMPLE_DECL 6 char * buff ; buff = NULL ; VAR_DECL 7 char * buff ; buff = NULL TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 buff LEAF_NODE 9 buff LEAF_NODE 8 ; INIT 8 buff = NULL ASSIGN 9 buff = NULL LVAL 10 buff NAME 11 buff LEAF_NODE 12 buff ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 7 ; SIMPLE_DECL 6 int ui_flags ; ui_flags = 0 ; VAR_DECL 7 int ui_flags ; ui_flags = 0 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 ui_flags LEAF_NODE 9 ui_flags LEAF_NODE 8 ; INIT 8 ui_flags = 0 ASSIGN 9 ui_flags = 0 LVAL 10 ui_flags NAME 11 ui_flags LEAF_NODE 12 ui_flags ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ; SIMPLE_DECL 6 const char * prompt_info ; prompt_info = NULL ; VAR_DECL 7 const char * prompt_info ; prompt_info = NULL TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 prompt_info LEAF_NODE 9 prompt_info LEAF_NODE 8 ; INIT 8 prompt_info = NULL ASSIGN 9 prompt_info = NULL LVAL 10 prompt_info NAME 11 prompt_info LEAF_NODE 12 prompt_info ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 7 ; SIMPLE_DECL 6 char * prompt ; VAR_DECL 7 char * prompt TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 prompt LEAF_NODE 9 prompt LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 cb_data != NULL && cb_data -> prompt_info != NULL EXPR 8 cb_data != NULL && cb_data -> prompt_info != NULL AND 9 cb_data != NULL && cb_data -> prompt_info != NULL EXPR 10 cb_data != NULL FIELD 11 cb_data LEAF_NODE 12 cb_data EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 10 && EXPR 10 cb_data -> prompt_info != NULL FIELD 11 cb_data -> prompt_info LEAF_NODE 12 cb_data LEAF_NODE 12 -> LEAF_NODE 12 prompt_info EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 prompt_info = cb_data -> prompt_info ; EXPR 9 prompt_info = cb_data -> prompt_info ASSIGN 10 prompt_info = cb_data -> prompt_info LVAL 11 prompt_info FIELD 12 prompt_info LEAF_NODE 13 prompt_info ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 cb_data -> prompt_info FIELD 12 cb_data -> prompt_info LEAF_NODE 13 cb_data LEAF_NODE 13 -> LEAF_NODE 13 prompt_info LEAF_NODE 9 ; EXPR_STATEMENT 6 prompt = UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) ; EXPR 7 prompt = UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) ASSIGN 8 prompt = UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) LVAL 9 prompt FIELD 10 prompt LEAF_NODE 11 prompt ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) FUNCTION_CALL 10 UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) CALLEE 11 UI_construct_prompt LEAF_NODE 12 UI_construct_prompt LEAF_NODE 11 ( ARGUMENT 11 ui FIELD 12 ui LEAF_NODE 13 ui LEAF_NODE 11 , ARGUMENT 11 \"pass phrase\" FIELD 12 \"pass phrase\" LEAF_NODE 13 \"pass phrase\" LEAF_NODE 11 , ARGUMENT 11 prompt_info FIELD 12 prompt_info LEAF_NODE 13 prompt_info LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! prompt EXPR 8 ! prompt UNARY_EXPR 9 ! prompt UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FIELD 10 prompt LEAF_NODE 11 prompt LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_printf ( bio_err , \"Out of memory\\n\" ) ; EXPR 10 BIO_printf ( bio_err , \"Out of memory\\n\" ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"Out of memory\\n\" ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"Out of memory\\n\" FIELD 13 \"Out of memory\\n\" LEAF_NODE 14 \"Out of memory\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 UI_free ( ui ) ; EXPR 10 UI_free ( ui ) FUNCTION_CALL 11 UI_free ( ui ) CALLEE 12 UI_free LEAF_NODE 13 UI_free LEAF_NODE 12 ( ARGUMENT 12 ui FIELD 13 ui LEAF_NODE 14 ui LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return 0 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 0 EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 ui_flags |= UI_INPUT_FLAG_DEFAULT_PWD ; EXPR 7 ui_flags |= UI_INPUT_FLAG_DEFAULT_PWD ASSIGN 8 ui_flags |= UI_INPUT_FLAG_DEFAULT_PWD LVAL 9 ui_flags FIELD 10 ui_flags LEAF_NODE 11 ui_flags ASSIGN_OP 9 |= LEAF_NODE 10 |= RVAL 9 UI_INPUT_FLAG_DEFAULT_PWD FIELD 10 UI_INPUT_FLAG_DEFAULT_PWD LEAF_NODE 11 UI_INPUT_FLAG_DEFAULT_PWD LEAF_NODE 7 ; EXPR_STATEMENT 6 UI_ctrl ( ui , UI_CTRL_PRINT_ERRORS , 1 , 0 , 0 ) ; EXPR 7 UI_ctrl ( ui , UI_CTRL_PRINT_ERRORS , 1 , 0 , 0 ) FUNCTION_CALL 8 UI_ctrl ( ui , UI_CTRL_PRINT_ERRORS , 1 , 0 , 0 ) CALLEE 9 UI_ctrl LEAF_NODE 10 UI_ctrl LEAF_NODE 9 ( ARGUMENT 9 ui FIELD 10 ui LEAF_NODE 11 ui LEAF_NODE 9 , ARGUMENT 9 UI_CTRL_PRINT_ERRORS FIELD 10 UI_CTRL_PRINT_ERRORS LEAF_NODE 11 UI_CTRL_PRINT_ERRORS LEAF_NODE 9 , ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ( void ) UI_add_user_data ( ui , cb_data ) ; EXPR 7 ( void ) UI_add_user_data ( ui , cb_data ) LEAF_NODE 8 ( TYPE_NAME 8 void LEAF_NODE 9 void LEAF_NODE 8 ) FUNCTION_CALL 8 UI_add_user_data ( ui , cb_data ) CALLEE 9 UI_add_user_data LEAF_NODE 10 UI_add_user_data LEAF_NODE 9 ( ARGUMENT 9 ui FIELD 10 ui LEAF_NODE 11 ui LEAF_NODE 9 , ARGUMENT 9 cb_data FIELD 10 cb_data LEAF_NODE 11 cb_data LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ok = UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) ; EXPR 7 ok = UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) ASSIGN 8 ok = UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) LVAL 9 ok FIELD 10 ok LEAF_NODE 11 ok ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) FUNCTION_CALL 10 UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) CALLEE 11 UI_add_input_string LEAF_NODE 12 UI_add_input_string LEAF_NODE 11 ( ARGUMENT 11 ui FIELD 12 ui LEAF_NODE 13 ui LEAF_NODE 11 , ARGUMENT 11 prompt FIELD 12 prompt LEAF_NODE 13 prompt LEAF_NODE 11 , ARGUMENT 11 ui_flags FIELD 12 ui_flags LEAF_NODE 13 ui_flags LEAF_NODE 11 , ARGUMENT 11 buf FIELD 12 buf LEAF_NODE 13 buf LEAF_NODE 11 , ARGUMENT 11 PW_MIN_LENGTH FIELD 12 PW_MIN_LENGTH LEAF_NODE 13 PW_MIN_LENGTH LEAF_NODE 11 , ARGUMENT 11 bufsiz - 1 FIELD 12 bufsiz LEAF_NODE 13 bufsiz LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok >= 0 && verify EXPR 8 ok >= 0 && verify AND 9 ok >= 0 && verify EXPR 10 ok >= 0 FIELD 11 ok LEAF_NODE 12 ok REL_OPERATOR 11 >= LEAF_NODE 12 >= FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 && EXPR 10 verify FIELD 11 verify LEAF_NODE 12 verify LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 buff = app_malloc ( bufsiz , \"password buffer\" ) ; EXPR 10 buff = app_malloc ( bufsiz , \"password buffer\" ) ASSIGN 11 buff = app_malloc ( bufsiz , \"password buffer\" ) LVAL 12 buff FIELD 13 buff LEAF_NODE 14 buff ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 app_malloc ( bufsiz , \"password buffer\" ) FUNCTION_CALL 13 app_malloc ( bufsiz , \"password buffer\" ) CALLEE 14 app_malloc LEAF_NODE 15 app_malloc LEAF_NODE 14 ( ARGUMENT 14 bufsiz FIELD 15 bufsiz LEAF_NODE 16 bufsiz LEAF_NODE 14 , ARGUMENT 14 \"password buffer\" FIELD 15 \"password buffer\" LEAF_NODE 16 \"password buffer\" LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ok = UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) ; EXPR 10 ok = UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) ASSIGN 11 ok = UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) LVAL 12 ok FIELD 13 ok LEAF_NODE 14 ok ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) FUNCTION_CALL 13 UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) CALLEE 14 UI_add_verify_string LEAF_NODE 15 UI_add_verify_string LEAF_NODE 14 ( ARGUMENT 14 ui FIELD 15 ui LEAF_NODE 16 ui LEAF_NODE 14 , ARGUMENT 14 prompt FIELD 15 prompt LEAF_NODE 16 prompt LEAF_NODE 14 , ARGUMENT 14 ui_flags FIELD 15 ui_flags LEAF_NODE 16 ui_flags LEAF_NODE 14 , ARGUMENT 14 buff FIELD 15 buff LEAF_NODE 16 buff LEAF_NODE 14 , ARGUMENT 14 PW_MIN_LENGTH FIELD 15 PW_MIN_LENGTH LEAF_NODE 16 PW_MIN_LENGTH LEAF_NODE 14 , ARGUMENT 14 bufsiz - 1 FIELD 15 bufsiz LEAF_NODE 16 bufsiz LEAF_NODE 15 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 , ARGUMENT 14 buf FIELD 15 buf LEAF_NODE 16 buf LEAF_NODE 14 ) LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok >= 0 EXPR 8 ok >= 0 FIELD 9 ok LEAF_NODE 10 ok REL_OPERATOR 9 >= LEAF_NODE 10 >= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 ITERATION 8 KEYWORD 9 do LEAF_NODE 10 do LEAF_NODE 9 ( CONDITION 9 ok < 0 && UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) EXPR 10 ok < 0 && UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) AND 11 ok < 0 && UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) EXPR 12 ok < 0 FIELD 13 ok LEAF_NODE 14 ok REL_OPERATOR 13 < LEAF_NODE 14 < FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 && EXPR 12 UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) FUNCTION_CALL 13 UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) CALLEE 14 UI_ctrl LEAF_NODE 15 UI_ctrl LEAF_NODE 14 ( ARGUMENT 14 ui FIELD 15 ui LEAF_NODE 16 ui LEAF_NODE 14 , ARGUMENT 14 UI_CTRL_IS_REDOABLE FIELD 15 UI_CTRL_IS_REDOABLE LEAF_NODE 16 UI_CTRL_IS_REDOABLE LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ) LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 ok = UI_process ( ui ) ; EXPR 12 ok = UI_process ( ui ) ASSIGN 13 ok = UI_process ( ui ) LVAL 14 ok FIELD 15 ok LEAF_NODE 16 ok ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 UI_process ( ui ) FUNCTION_CALL 15 UI_process ( ui ) CALLEE 16 UI_process LEAF_NODE 17 UI_process LEAF_NODE 16 ( ARGUMENT 16 ui FIELD 17 ui LEAF_NODE 18 ui LEAF_NODE 16 ) LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 6 ; EXPR_STATEMENT 6 OPENSSL_clear_free ( buff , ( unsigned int ) bufsiz ) ; EXPR 7 OPENSSL_clear_free ( buff , ( unsigned int ) bufsiz ) FUNCTION_CALL 8 OPENSSL_clear_free ( buff , ( unsigned int ) bufsiz ) CALLEE 9 OPENSSL_clear_free LEAF_NODE 10 OPENSSL_clear_free LEAF_NODE 9 ( ARGUMENT 9 buff FIELD 10 buff LEAF_NODE 11 buff LEAF_NODE 9 , ARGUMENT 9 ( unsigned int ) bufsiz LEAF_NODE 10 ( TYPE_NAME 10 unsigned int LEAF_NODE 11 unsigned LEAF_NODE 11 int LEAF_NODE 10 ) FIELD 10 bufsiz LEAF_NODE 11 bufsiz LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok >= 0 EXPR 8 ok >= 0 FIELD 9 ok LEAF_NODE 10 ok REL_OPERATOR 9 >= LEAF_NODE 10 >= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 res = strlen ( buf ) ; EXPR 9 res = strlen ( buf ) ASSIGN 10 res = strlen ( buf ) LVAL 11 res FIELD 12 res LEAF_NODE 13 res ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 strlen ( buf ) FUNCTION_CALL 12 strlen ( buf ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 buf FIELD 14 buf LEAF_NODE 15 buf LEAF_NODE 13 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok == - 1 EXPR 8 ok == - 1 FIELD 9 ok LEAF_NODE 10 ok EQ_OPERATOR 9 == LEAF_NODE 10 == UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_printf ( bio_err , \"User interface error\\n\" ) ; EXPR 10 BIO_printf ( bio_err , \"User interface error\\n\" ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"User interface error\\n\" ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"User interface error\\n\" FIELD 13 \"User interface error\\n\" LEAF_NODE 14 \"User interface error\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ERR_print_errors ( bio_err ) ; EXPR 10 ERR_print_errors ( bio_err ) FUNCTION_CALL 11 ERR_print_errors ( bio_err ) CALLEE 12 ERR_print_errors LEAF_NODE 13 ERR_print_errors LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) ; EXPR 10 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) FUNCTION_CALL 11 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) CALLEE 12 OPENSSL_cleanse LEAF_NODE 13 OPENSSL_cleanse LEAF_NODE 12 ( ARGUMENT 12 buf FIELD 13 buf LEAF_NODE 14 buf LEAF_NODE 12 , ARGUMENT 12 ( unsigned int ) bufsiz LEAF_NODE 13 ( TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int LEAF_NODE 13 ) FIELD 13 bufsiz LEAF_NODE 14 bufsiz LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 res = 0 ; EXPR 10 res = 0 ASSIGN 11 res = 0 LVAL 12 res FIELD 13 res LEAF_NODE 14 res ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok == - 2 EXPR 8 ok == - 2 FIELD 9 ok LEAF_NODE 10 ok EQ_OPERATOR 9 == LEAF_NODE 10 == UNARY_EXPR 9 - 2 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_printf ( bio_err , \"aborted!\\n\" ) ; EXPR 10 BIO_printf ( bio_err , \"aborted!\\n\" ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"aborted!\\n\" ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"aborted!\\n\" FIELD 13 \"aborted!\\n\" LEAF_NODE 14 \"aborted!\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) ; EXPR 10 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) FUNCTION_CALL 11 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) CALLEE 12 OPENSSL_cleanse LEAF_NODE 13 OPENSSL_cleanse LEAF_NODE 12 ( ARGUMENT 12 buf FIELD 13 buf LEAF_NODE 14 buf LEAF_NODE 12 , ARGUMENT 12 ( unsigned int ) bufsiz LEAF_NODE 13 ( TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int LEAF_NODE 13 ) FIELD 13 bufsiz LEAF_NODE 14 bufsiz LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 res = 0 ; EXPR 10 res = 0 ASSIGN 11 res = 0 LVAL 12 res FIELD 13 res LEAF_NODE 14 res ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 UI_free ( ui ) ; EXPR 7 UI_free ( ui ) FUNCTION_CALL 8 UI_free ( ui ) CALLEE 9 UI_free LEAF_NODE 10 UI_free LEAF_NODE 9 ( ARGUMENT 9 ui FIELD 10 ui LEAF_NODE 11 ui LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_free ( prompt ) ; EXPR 7 OPENSSL_free ( prompt ) FUNCTION_CALL 8 OPENSSL_free ( prompt ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 prompt FIELD 10 prompt LEAF_NODE 11 prompt LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return res ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 res EXPR 5 res FIELD 6 res LEAF_NODE 7 res LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 X509_CRL * TYPE_NAME 3 X509_CRL LEAF_NODE 4 X509_CRL LEAF_NODE 3 * FUNCTION_NAME 2 load_crl LEAF_NODE 3 load_crl PARAMETER_LIST 2 ( const char * infile , int format ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * infile TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 infile LEAF_NODE 5 infile LEAF_NODE 3 , PARAMETER_DECL 3 int format TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 format LEAF_NODE 5 format LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 X509_CRL * x ; x = NULL ; VAR_DECL 4 X509_CRL * x ; x = NULL TYPE 5 X509_CRL * TYPE_NAME 6 X509_CRL LEAF_NODE 7 X509_CRL POINTER 6 * LEAF_NODE 7 * NAME 5 x LEAF_NODE 6 x LEAF_NODE 5 ; INIT 5 x = NULL ASSIGN 6 x = NULL LVAL 7 x NAME 8 x LEAF_NODE 9 x ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 BIO * in ; in = NULL ; VAR_DECL 4 BIO * in ; in = NULL TYPE 5 BIO * TYPE_NAME 6 BIO LEAF_NODE 7 BIO POINTER 6 * LEAF_NODE 7 * NAME 5 in LEAF_NODE 6 in LEAF_NODE 5 ; INIT 5 in = NULL ASSIGN 6 in = NULL LVAL 7 in NAME 8 in LEAF_NODE 9 in ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 format == FORMAT_HTTP EXPR 5 format == FORMAT_HTTP FIELD 6 format LEAF_NODE 7 format EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 FORMAT_HTTP LEAF_NODE 7 FORMAT_HTTP LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 load_cert_crl_http ( infile , NULL , & x ) ; EXPR 7 load_cert_crl_http ( infile , NULL , & x ) FUNCTION_CALL 8 load_cert_crl_http ( infile , NULL , & x ) CALLEE 9 load_cert_crl_http LEAF_NODE 10 load_cert_crl_http LEAF_NODE 9 ( ARGUMENT 9 infile FIELD 10 infile LEAF_NODE 11 infile LEAF_NODE 9 , ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 , ARGUMENT 9 & x UNARY_EXPR 10 & x UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 x LEAF_NODE 12 x LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return x ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 x EXPR 8 x FIELD 9 x LEAF_NODE 10 x LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 in = bio_open_default ( infile , 'r' , format ) ; EXPR 4 in = bio_open_default ( infile , 'r' , format ) ASSIGN 5 in = bio_open_default ( infile , 'r' , format ) LVAL 6 in FIELD 7 in LEAF_NODE 8 in ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 bio_open_default ( infile , 'r' , format ) FUNCTION_CALL 7 bio_open_default ( infile , 'r' , format ) CALLEE 8 bio_open_default LEAF_NODE 9 bio_open_default LEAF_NODE 8 ( ARGUMENT 8 infile FIELD 9 infile LEAF_NODE 10 infile LEAF_NODE 8 , ARGUMENT 8 'r' FIELD 9 'r' LEAF_NODE 10 'r' LEAF_NODE 8 , ARGUMENT 8 format FIELD 9 format LEAF_NODE 10 format LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 in == NULL EXPR 5 in == NULL FIELD 6 in LEAF_NODE 7 in EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto end ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 end LEAF_NODE 7 end LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 format == FORMAT_ASN1 EXPR 5 format == FORMAT_ASN1 FIELD 6 format LEAF_NODE 7 format EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 FORMAT_ASN1 LEAF_NODE 7 FORMAT_ASN1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 x = d2i_X509_CRL_bio ( in , NULL ) ; EXPR 7 x = d2i_X509_CRL_bio ( in , NULL ) ASSIGN 8 x = d2i_X509_CRL_bio ( in , NULL ) LVAL 9 x FIELD 10 x LEAF_NODE 11 x ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 d2i_X509_CRL_bio ( in , NULL ) FUNCTION_CALL 10 d2i_X509_CRL_bio ( in , NULL ) CALLEE 11 d2i_X509_CRL_bio LEAF_NODE 12 d2i_X509_CRL_bio LEAF_NODE 11 ( ARGUMENT 11 in FIELD 12 in LEAF_NODE 13 in LEAF_NODE 11 , ARGUMENT 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 format == FORMAT_PEM EXPR 7 format == FORMAT_PEM FIELD 8 format LEAF_NODE 9 format EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 FORMAT_PEM LEAF_NODE 9 FORMAT_PEM LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 x = PEM_read_bio_X509_CRL ( in , NULL , NULL , NULL ) ; EXPR 9 x = PEM_read_bio_X509_CRL ( in , NULL , NULL , NULL ) ASSIGN 10 x = PEM_read_bio_X509_CRL ( in , NULL , NULL , NULL ) LVAL 11 x FIELD 12 x LEAF_NODE 13 x ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 PEM_read_bio_X509_CRL ( in , NULL , NULL , NULL ) FUNCTION_CALL 12 PEM_read_bio_X509_CRL ( in , NULL , NULL , NULL ) CALLEE 13 PEM_read_bio_X509_CRL LEAF_NODE 14 PEM_read_bio_X509_CRL LEAF_NODE 13 ( ARGUMENT 13 in FIELD 14 in LEAF_NODE 15 in LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 ) LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 BIO_printf ( bio_err , \"bad input format specified for input crl\\n\" ) ; EXPR 7 BIO_printf ( bio_err , \"bad input format specified for input crl\\n\" ) FUNCTION_CALL 8 BIO_printf ( bio_err , \"bad input format specified for input crl\\n\" ) CALLEE 9 BIO_printf LEAF_NODE 10 BIO_printf LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 , ARGUMENT 9 \"bad input format specified for input crl\\n\" FIELD 10 \"bad input format specified for input crl\\n\" LEAF_NODE 11 \"bad input format specified for input crl\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto end ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 end LEAF_NODE 8 end LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 x == NULL EXPR 5 x == NULL FIELD 6 x LEAF_NODE 7 x EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 BIO_printf ( bio_err , \"unable to load CRL\\n\" ) ; EXPR 7 BIO_printf ( bio_err , \"unable to load CRL\\n\" ) FUNCTION_CALL 8 BIO_printf ( bio_err , \"unable to load CRL\\n\" ) CALLEE 9 BIO_printf LEAF_NODE 10 BIO_printf LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 , ARGUMENT 9 \"unable to load CRL\\n\" FIELD 10 \"unable to load CRL\\n\" LEAF_NODE 11 \"unable to load CRL\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ERR_print_errors ( bio_err ) ; EXPR 7 ERR_print_errors ( bio_err ) FUNCTION_CALL 8 ERR_print_errors ( bio_err ) CALLEE 9 ERR_print_errors LEAF_NODE 10 ERR_print_errors LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto end ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 end LEAF_NODE 8 end LEAF_NODE 7 ; LEAF_NODE 5 } LABEL 3 end : LEAF_NODE 4 end LEAF_NODE 4 : EXPR_STATEMENT 3 BIO_free ( in ) ; EXPR 4 BIO_free ( in ) FUNCTION_CALL 5 BIO_free ( in ) CALLEE 6 BIO_free LEAF_NODE 7 BIO_free LEAF_NODE 6 ( ARGUMENT 6 in FIELD 7 in LEAF_NODE 8 in LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return x ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 x EXPR 5 x FIELD 6 x LEAF_NODE 7 x LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 25, "project": "openssl_ast_normal_function_test_67", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_PRINTABLE_type LEAF_NODE 3 ASN1_PRINTABLE_type PARAMETER_LIST 2 ( const unsigned char * s , int len ) LEAF_NODE 3 ( PARAMETER_DECL 3 const unsigned char * s TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int c ; VAR_DECL 4 int c TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 c LEAF_NODE 6 c LEAF_NODE 4 ; SIMPLE_DECL 3 int ia5 ; ia5 = 0 ; VAR_DECL 4 int ia5 ; ia5 = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 ia5 LEAF_NODE 6 ia5 LEAF_NODE 5 ; INIT 5 ia5 = 0 ASSIGN 6 ia5 = 0 LVAL 7 ia5 NAME 8 ia5 LEAF_NODE 9 ia5 ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int t61 ; t61 = 0 ; VAR_DECL 4 int t61 ; t61 = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 t61 LEAF_NODE 6 t61 LEAF_NODE 5 ; INIT 5 t61 = 0 ASSIGN 6 t61 = 0 LVAL 7 t61 NAME 8 t61 LEAF_NODE 9 t61 ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 len <= 0 EXPR 5 len <= 0 FIELD 6 len LEAF_NODE 7 len REL_OPERATOR 6 <= LEAF_NODE 7 <= FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 len = - 1 ; EXPR 6 len = - 1 ASSIGN 7 len = - 1 LVAL 8 len FIELD 9 len LEAF_NODE 10 len ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s == NULL EXPR 5 s == NULL FIELD 6 s LEAF_NODE 7 s EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return V_ASN1_PRINTABLESTRING ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 V_ASN1_PRINTABLESTRING EXPR 7 V_ASN1_PRINTABLESTRING FIELD 8 V_ASN1_PRINTABLESTRING LEAF_NODE 9 V_ASN1_PRINTABLESTRING LEAF_NODE 6 ; ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 ( * s ) && ( len -- != 0 ) EXPR 5 ( * s ) && ( len -- != 0 ) AND 6 ( * s ) && ( len -- != 0 ) EXPR 7 ( * s ) LEAF_NODE 8 ( UNARY_EXPR 8 * s UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 ) LEAF_NODE 7 && EXPR 7 ( len -- != 0 ) LEAF_NODE 8 ( FIELD 8 len -- LEAF_NODE 9 len LEAF_NODE 9 -- EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 c = * ( s ++ ) ; EXPR 7 c = * ( s ++ ) ASSIGN 8 c = * ( s ++ ) LVAL 9 c FIELD 10 c LEAF_NODE 11 c ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 * ( s ++ ) UNARY_EXPR 10 * ( s ++ ) UNARY_OPERATOR 11 * LEAF_NODE 12 * LEAF_NODE 11 ( FIELD 11 s ++ LEAF_NODE 12 s LEAF_NODE 12 ++ LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! ossl_isasn1print ( c ) EXPR 8 ! ossl_isasn1print ( c ) UNARY_EXPR 9 ! ossl_isasn1print ( c ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 ossl_isasn1print ( c ) CALLEE 11 ossl_isasn1print LEAF_NODE 12 ossl_isasn1print LEAF_NODE 11 ( ARGUMENT 11 c FIELD 12 c LEAF_NODE 13 c LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 ia5 = 1 ; EXPR 9 ia5 = 1 ASSIGN 10 ia5 = 1 LVAL 11 ia5 FIELD 12 ia5 LEAF_NODE 13 ia5 ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! ossl_isascii ( c ) EXPR 8 ! ossl_isascii ( c ) UNARY_EXPR 9 ! ossl_isascii ( c ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 ossl_isascii ( c ) CALLEE 11 ossl_isascii LEAF_NODE 12 ossl_isascii LEAF_NODE 11 ( ARGUMENT 11 c FIELD 12 c LEAF_NODE 13 c LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 t61 = 1 ; EXPR 9 t61 = 1 ASSIGN 10 t61 = 1 LVAL 11 t61 FIELD 12 t61 LEAF_NODE 13 t61 ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 t61 EXPR 5 t61 FIELD 6 t61 LEAF_NODE 7 t61 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return V_ASN1_T61STRING ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 V_ASN1_T61STRING EXPR 7 V_ASN1_T61STRING FIELD 8 V_ASN1_T61STRING LEAF_NODE 9 V_ASN1_T61STRING LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ia5 EXPR 5 ia5 FIELD 6 ia5 LEAF_NODE 7 ia5 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return V_ASN1_IA5STRING ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 V_ASN1_IA5STRING EXPR 7 V_ASN1_IA5STRING FIELD 8 V_ASN1_IA5STRING LEAF_NODE 9 V_ASN1_IA5STRING LEAF_NODE 6 ; JUMP_STATEMENT 3 return V_ASN1_PRINTABLESTRING ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 V_ASN1_PRINTABLESTRING EXPR 5 V_ASN1_PRINTABLESTRING FIELD 6 V_ASN1_PRINTABLESTRING LEAF_NODE 7 V_ASN1_PRINTABLESTRING LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 26, "project": "openssl_ast_normal_function_test_90", "target": 0}
{"func": "SIMPLE_DECL 1 struct async_wait_ctx_st BASE_CLASSES { struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; ASYNC_callback_fn callback ; void * callback_arg ; int status ; } ; CLASS_DEF 2 struct async_wait_ctx_st BASE_CLASSES { struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; ASYNC_callback_fn callback ; void * callback_arg ; int status ; } CLASS_DEF 3 struct async_wait_ctx_st BASE_CLASSES { struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; ASYNC_callback_fn callback ; void * callback_arg ; int status ; } LEAF_NODE 4 struct CLASS_NAME 4 async_wait_ctx_st LEAF_NODE 5 async_wait_ctx_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; ASYNC_callback_fn callback ; void * callback_arg ; int status ; SIMPLE_DECL 5 struct fd_lookup_st * fds ; VAR_DECL 6 struct fd_lookup_st * fds TYPE 7 struct fd_lookup_st * TYPE_NAME 8 struct fd_lookup_st LEAF_NODE 9 struct LEAF_NODE 9 fd_lookup_st POINTER 8 * LEAF_NODE 9 * NAME 7 fds LEAF_NODE 8 fds LEAF_NODE 6 ; SIMPLE_DECL 5 size_t numadd ; VAR_DECL 6 size_t numadd TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 numadd LEAF_NODE 8 numadd LEAF_NODE 6 ; SIMPLE_DECL 5 size_t numdel ; VAR_DECL 6 size_t numdel TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 numdel LEAF_NODE 8 numdel LEAF_NODE 6 ; SIMPLE_DECL 5 ASYNC_callback_fn callback ; VAR_DECL 6 ASYNC_callback_fn callback TYPE 7 ASYNC_callback_fn TYPE_NAME 8 ASYNC_callback_fn LEAF_NODE 9 ASYNC_callback_fn NAME 7 callback LEAF_NODE 8 callback LEAF_NODE 6 ; SIMPLE_DECL 5 void * callback_arg ; VAR_DECL 6 void * callback_arg TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 callback_arg LEAF_NODE 8 callback_arg LEAF_NODE 6 ; SIMPLE_DECL 5 int status ; VAR_DECL 6 int status TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 status LEAF_NODE 8 status LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_wait_ctx_st ASYNC_WAIT_CTX ; VAR_DECL 2 struct async_wait_ctx_st ASYNC_WAIT_CTX TYPE 3 struct async_wait_ctx_st TYPE_NAME 4 struct async_wait_ctx_st LEAF_NODE 5 struct LEAF_NODE 5 async_wait_ctx_st NAME 3 ASYNC_WAIT_CTX LEAF_NODE 4 ASYNC_WAIT_CTX LEAF_NODE 2 ; SIMPLE_DECL 1 struct fd_lookup_st BASE_CLASSES { const void * key ; OSSL_ASYNC_FD fd ; void * custom_data ; void ( * cleanup ) ( ASYNC_WAIT_CTX * , const void * , OSSL_ASYNC_FD , void * ) ; int add ; int del ; struct fd_lookup_st * next ; } ; CLASS_DEF 2 struct fd_lookup_st BASE_CLASSES { const void * key ; OSSL_ASYNC_FD fd ; void * custom_data ; void ( * cleanup ) ( ASYNC_WAIT_CTX * , const void * , OSSL_ASYNC_FD , void * ) ; int add ; int del ; struct fd_lookup_st * next ; } CLASS_DEF 3 struct fd_lookup_st BASE_CLASSES { const void * key ; OSSL_ASYNC_FD fd ; void * custom_data ; void ( * cleanup ) ( ASYNC_WAIT_CTX * , const void * , OSSL_ASYNC_FD , void * ) ; int add ; int del ; struct fd_lookup_st * next ; } LEAF_NODE 4 struct CLASS_NAME 4 fd_lookup_st LEAF_NODE 5 fd_lookup_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 const void * key ; OSSL_ASYNC_FD fd ; void * custom_data ; void ( * cleanup ) ( ASYNC_WAIT_CTX * , const void * , OSSL_ASYNC_FD , void * ) ; int add ; int del ; struct fd_lookup_st * next ; SIMPLE_DECL 5 const void * key ; VAR_DECL 6 const void * key TYPE 7 const void * TYPE_NAME 8 const void LEAF_NODE 9 const LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 key LEAF_NODE 8 key LEAF_NODE 6 ; SIMPLE_DECL 5 OSSL_ASYNC_FD fd ; VAR_DECL 6 OSSL_ASYNC_FD fd TYPE 7 OSSL_ASYNC_FD TYPE_NAME 8 OSSL_ASYNC_FD LEAF_NODE 9 OSSL_ASYNC_FD NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 void * custom_data ; VAR_DECL 6 void * custom_data TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 custom_data LEAF_NODE 8 custom_data LEAF_NODE 6 ; LEAF_NODE 5 void LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 cleanup LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 ASYNC_WAIT_CTX LEAF_NODE 5 * LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 void LEAF_NODE 5 * LEAF_NODE 5 , LEAF_NODE 5 OSSL_ASYNC_FD LEAF_NODE 5 , LEAF_NODE 5 void LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 int add ; VAR_DECL 6 int add TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 add LEAF_NODE 8 add LEAF_NODE 6 ; SIMPLE_DECL 5 int del ; VAR_DECL 6 int del TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 del LEAF_NODE 8 del LEAF_NODE 6 ; SIMPLE_DECL 5 struct fd_lookup_st * next ; VAR_DECL 6 struct fd_lookup_st * next TYPE 7 struct fd_lookup_st * TYPE_NAME 8 struct fd_lookup_st LEAF_NODE 9 struct LEAF_NODE 9 fd_lookup_st POINTER 8 * LEAF_NODE 9 * NAME 7 next LEAF_NODE 8 next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_wait_ctx_st ASYNC_WAIT_CTX ; VAR_DECL 2 struct async_wait_ctx_st ASYNC_WAIT_CTX TYPE 3 struct async_wait_ctx_st TYPE_NAME 4 struct async_wait_ctx_st LEAF_NODE 5 struct LEAF_NODE 5 async_wait_ctx_st NAME 3 ASYNC_WAIT_CTX LEAF_NODE 4 ASYNC_WAIT_CTX LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_ctx_st async_ctx ; VAR_DECL 2 struct async_ctx_st async_ctx TYPE 3 struct async_ctx_st TYPE_NAME 4 struct async_ctx_st LEAF_NODE 5 struct LEAF_NODE 5 async_ctx_st NAME 3 async_ctx LEAF_NODE 4 async_ctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_ctx_st BASE_CLASSES { async_fibre dispatcher ; ASYNC_JOB * currjob ; unsigned int blocked ; } ; CLASS_DEF 2 struct async_ctx_st BASE_CLASSES { async_fibre dispatcher ; ASYNC_JOB * currjob ; unsigned int blocked ; } CLASS_DEF 3 struct async_ctx_st BASE_CLASSES { async_fibre dispatcher ; ASYNC_JOB * currjob ; unsigned int blocked ; } LEAF_NODE 4 struct CLASS_NAME 4 async_ctx_st LEAF_NODE 5 async_ctx_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 async_fibre dispatcher ; ASYNC_JOB * currjob ; unsigned int blocked ; SIMPLE_DECL 5 async_fibre dispatcher ; VAR_DECL 6 async_fibre dispatcher TYPE 7 async_fibre TYPE_NAME 8 async_fibre LEAF_NODE 9 async_fibre NAME 7 dispatcher LEAF_NODE 8 dispatcher LEAF_NODE 6 ; SIMPLE_DECL 5 ASYNC_JOB * currjob ; VAR_DECL 6 ASYNC_JOB * currjob TYPE 7 ASYNC_JOB * TYPE_NAME 8 ASYNC_JOB LEAF_NODE 9 ASYNC_JOB POINTER 8 * LEAF_NODE 9 * NAME 7 currjob LEAF_NODE 8 currjob LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int blocked ; VAR_DECL 6 unsigned int blocked TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 blocked LEAF_NODE 8 blocked LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 async_local_cleanup LEAF_NODE 3 async_local_cleanup PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 async_ctx * ctx ; ctx = async_get_ctx ( ) ; VAR_DECL 4 async_ctx * ctx ; ctx = async_get_ctx ( ) TYPE 5 async_ctx * TYPE_NAME 6 async_ctx LEAF_NODE 7 async_ctx POINTER 6 * LEAF_NODE 7 * NAME 5 ctx LEAF_NODE 6 ctx LEAF_NODE 5 ; INIT 5 ctx = async_get_ctx ( ) ASSIGN 6 ctx = async_get_ctx ( ) LVAL 7 ctx NAME 8 ctx LEAF_NODE 9 ctx ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 async_get_ctx ( ) FUNCTION_CALL 8 async_get_ctx ( ) CALLEE 9 async_get_ctx LEAF_NODE 10 async_get_ctx LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ctx != NULL EXPR 5 ctx != NULL FIELD 6 ctx LEAF_NODE 7 ctx EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 async_fibre * fibre ; fibre = & ctx -> dispatcher ; VAR_DECL 7 async_fibre * fibre ; fibre = & ctx -> dispatcher TYPE 8 async_fibre * TYPE_NAME 9 async_fibre LEAF_NODE 10 async_fibre POINTER 9 * LEAF_NODE 10 * NAME 8 fibre LEAF_NODE 9 fibre LEAF_NODE 8 ; INIT 8 fibre = & ctx -> dispatcher ASSIGN 9 fibre = & ctx -> dispatcher LVAL 10 fibre NAME 11 fibre LEAF_NODE 12 fibre ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 & ctx -> dispatcher UNARY_EXPR 11 & ctx -> dispatcher UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 ctx -> dispatcher LEAF_NODE 13 ctx LEAF_NODE 13 -> LEAF_NODE 13 dispatcher LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 fibre != NULL && fibre -> fibre != NULL && fibre -> converted EXPR 8 fibre != NULL && fibre -> fibre != NULL && fibre -> converted AND 9 fibre != NULL && fibre -> fibre != NULL && fibre -> converted EXPR 10 fibre != NULL FIELD 11 fibre LEAF_NODE 12 fibre EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 10 && EXPR 10 fibre -> fibre != NULL && fibre -> converted AND 11 fibre -> fibre != NULL && fibre -> converted EXPR 12 fibre -> fibre != NULL FIELD 13 fibre -> fibre LEAF_NODE 14 fibre LEAF_NODE 14 -> LEAF_NODE 14 fibre EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 && EXPR 12 fibre -> converted FIELD 13 fibre -> converted LEAF_NODE 14 fibre LEAF_NODE 14 -> LEAF_NODE 14 converted LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ConvertFiberToThread ( ) ; EXPR 10 ConvertFiberToThread ( ) FUNCTION_CALL 11 ConvertFiberToThread ( ) CALLEE 12 ConvertFiberToThread LEAF_NODE 13 ConvertFiberToThread LEAF_NODE 12 ( LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 fibre -> fibre = NULL ; EXPR 10 fibre -> fibre = NULL ASSIGN 11 fibre -> fibre = NULL LVAL 12 fibre -> fibre FIELD 13 fibre -> fibre LEAF_NODE 14 fibre LEAF_NODE 14 -> LEAF_NODE 14 fibre ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } LEAF_NODE 2 }", "idx": 27, "project": "openssl_ast_normal_function_test_165", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 ASN1_STRING_free LEAF_NODE 3 ASN1_STRING_free PARAMETER_LIST 2 ( ASN1_STRING * a ) LEAF_NODE 3 ( PARAMETER_DECL 3 ASN1_STRING * a TYPE 4 ASN1_STRING * TYPE_NAME 5 ASN1_STRING LEAF_NODE 6 ASN1_STRING POINTER 5 * LEAF_NODE 6 * NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 a == NULL EXPR 5 a == NULL FIELD 6 a LEAF_NODE 7 a EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return DESTINATION ; KEYWORD 6 return LEAF_NODE 7 return LEAF_NODE 6 DESTINATION LEAF_NODE 6 ; EXPR_STATEMENT 3 asn1_string_embed_free ( a , a -> flags & ASN1_STRING_FLAG_EMBED ) ; EXPR 4 asn1_string_embed_free ( a , a -> flags & ASN1_STRING_FLAG_EMBED ) FUNCTION_CALL 5 asn1_string_embed_free ( a , a -> flags & ASN1_STRING_FLAG_EMBED ) CALLEE 6 asn1_string_embed_free LEAF_NODE 7 asn1_string_embed_free LEAF_NODE 6 ( ARGUMENT 6 a FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 , ARGUMENT 6 a -> flags & ASN1_STRING_FLAG_EMBED FIELD 7 a -> flags LEAF_NODE 8 a LEAF_NODE 8 -> LEAF_NODE 8 flags LEAF_NODE 7 & FIELD 7 ASN1_STRING_FLAG_EMBED LEAF_NODE 8 ASN1_STRING_FLAG_EMBED LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 28, "project": "openssl_ast_normal_function_test_94", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 tls1_alert_code LEAF_NODE 3 tls1_alert_code PARAMETER_LIST 2 ( int code ) LEAF_NODE 3 ( PARAMETER_DECL 3 int code TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 code LEAF_NODE 5 code LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return code ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 code EXPR 5 code FIELD 6 code LEAF_NODE 7 code LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 29, "project": "openssl_ast_normal_function_test_114", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS ; VAR_DECL 2 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS TYPE 3 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } CLASS_DEF 4 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } LEAF_NODE 5 struct CLASS_NAME 5 args_st LEAF_NODE 6 args_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int size ; int argc ; char * argv ; SIMPLE_DECL 6 int size ; VAR_DECL 7 int size TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 size LEAF_NODE 9 size LEAF_NODE 7 ; SIMPLE_DECL 6 int argc ; VAR_DECL 7 int argc TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 argc LEAF_NODE 9 argc LEAF_NODE 7 ; SIMPLE_DECL 6 char * argv ; VAR_DECL 7 char * argv TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 argv LEAF_NODE 9 argv LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 ARGS LEAF_NODE 4 ARGS LEAF_NODE 2 ; SIMPLE_DECL 1 struct db_attr_st BASE_CLASSES { int unique_subject ; } DB_ATTR ; VAR_DECL 2 struct db_attr_st BASE_CLASSES { int unique_subject ; } DB_ATTR TYPE 3 struct db_attr_st BASE_CLASSES { int unique_subject ; } CLASS_DEF 4 struct db_attr_st BASE_CLASSES { int unique_subject ; } LEAF_NODE 5 struct CLASS_NAME 5 db_attr_st LEAF_NODE 6 db_attr_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int unique_subject ; SIMPLE_DECL 6 int unique_subject ; VAR_DECL 7 int unique_subject TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 unique_subject LEAF_NODE 9 unique_subject LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 DB_ATTR LEAF_NODE 4 DB_ATTR LEAF_NODE 2 ; SIMPLE_DECL 1 struct txt_db_st BASE_CLASSES { int num_fields ; STACK_OF ( OPENSSL_PSTRING ) * data ; LHASH_OF ( OPENSSL_STRING ) * * index ; int ( * * qual ) ( OPENSSL_STRING * ) ; long error ; long arg1 ; long arg2 ; OPENSSL_STRING * arg_row ; } TXT_DB ; VAR_DECL 2 struct txt_db_st BASE_CLASSES { int num_fields ; STACK_OF ( OPENSSL_PSTRING ) * data ; LHASH_OF ( OPENSSL_STRING ) * * index ; int ( * * qual ) ( OPENSSL_STRING * ) ; long error ; long arg1 ; long arg2 ; OPENSSL_STRING * arg_row ; } TXT_DB TYPE 3 struct txt_db_st BASE_CLASSES { int num_fields ; STACK_OF ( OPENSSL_PSTRING ) * data ; LHASH_OF ( OPENSSL_STRING ) * * index ; int ( * * qual ) ( OPENSSL_STRING * ) ; long error ; long arg1 ; long arg2 ; OPENSSL_STRING * arg_row ; } CLASS_DEF 4 struct txt_db_st BASE_CLASSES { int num_fields ; STACK_OF ( OPENSSL_PSTRING ) * data ; LHASH_OF ( OPENSSL_STRING ) * * index ; int ( * * qual ) ( OPENSSL_STRING * ) ; long error ; long arg1 ; long arg2 ; OPENSSL_STRING * arg_row ; } LEAF_NODE 5 struct CLASS_NAME 5 txt_db_st LEAF_NODE 6 txt_db_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int num_fields ; STACK_OF ( OPENSSL_PSTRING ) * data ; LHASH_OF ( OPENSSL_STRING ) * * index ; int ( * * qual ) ( OPENSSL_STRING * ) ; long error ; long arg1 ; long arg2 ; OPENSSL_STRING * arg_row ; SIMPLE_DECL 6 int num_fields ; VAR_DECL 7 int num_fields TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 num_fields LEAF_NODE 9 num_fields LEAF_NODE 7 ; LEAF_NODE 6 STACK_OF LEAF_NODE 6 ( LEAF_NODE 6 OPENSSL_PSTRING LEAF_NODE 6 ) LEAF_NODE 6 * LEAF_NODE 6 data LEAF_NODE 6 ; LEAF_NODE 6 LHASH_OF LEAF_NODE 6 ( LEAF_NODE 6 OPENSSL_STRING LEAF_NODE 6 ) LEAF_NODE 6 * LEAF_NODE 6 * LEAF_NODE 6 index LEAF_NODE 6 ; LEAF_NODE 6 int LEAF_NODE 6 ( LEAF_NODE 6 * LEAF_NODE 6 * LEAF_NODE 6 qual LEAF_NODE 6 ) LEAF_NODE 6 ( LEAF_NODE 6 OPENSSL_STRING LEAF_NODE 6 * LEAF_NODE 6 ) LEAF_NODE 6 ; SIMPLE_DECL 6 long error ; VAR_DECL 7 long error TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 error LEAF_NODE 9 error LEAF_NODE 7 ; SIMPLE_DECL 6 long arg1 ; VAR_DECL 7 long arg1 TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 arg1 LEAF_NODE 9 arg1 LEAF_NODE 7 ; SIMPLE_DECL 6 long arg2 ; VAR_DECL 7 long arg2 TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 arg2 LEAF_NODE 9 arg2 LEAF_NODE 7 ; SIMPLE_DECL 6 OPENSSL_STRING * arg_row ; VAR_DECL 7 OPENSSL_STRING * arg_row TYPE 8 OPENSSL_STRING * TYPE_NAME 9 OPENSSL_STRING LEAF_NODE 10 OPENSSL_STRING POINTER 9 * LEAF_NODE 10 * NAME 8 arg_row LEAF_NODE 9 arg_row LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TXT_DB LEAF_NODE 4 TXT_DB LEAF_NODE 2 ; SIMPLE_DECL 1 struct ca_db_st BASE_CLASSES { DB_ATTR attributes ; TXT_DB * db ; char * dbfname ; struct stat dbst ; } CA_DB ; VAR_DECL 2 struct ca_db_st BASE_CLASSES { DB_ATTR attributes ; TXT_DB * db ; char * dbfname ; struct stat dbst ; } CA_DB TYPE 3 struct ca_db_st BASE_CLASSES { DB_ATTR attributes ; TXT_DB * db ; char * dbfname ; struct stat dbst ; } CLASS_DEF 4 struct ca_db_st BASE_CLASSES { DB_ATTR attributes ; TXT_DB * db ; char * dbfname ; struct stat dbst ; } LEAF_NODE 5 struct CLASS_NAME 5 ca_db_st LEAF_NODE 6 ca_db_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 DB_ATTR attributes ; TXT_DB * db ; char * dbfname ; struct stat dbst ; SIMPLE_DECL 6 DB_ATTR attributes ; VAR_DECL 7 DB_ATTR attributes TYPE 8 DB_ATTR TYPE_NAME 9 DB_ATTR LEAF_NODE 10 DB_ATTR NAME 8 attributes LEAF_NODE 9 attributes LEAF_NODE 7 ; SIMPLE_DECL 6 TXT_DB * db ; VAR_DECL 7 TXT_DB * db TYPE 8 TXT_DB * TYPE_NAME 9 TXT_DB LEAF_NODE 10 TXT_DB POINTER 9 * LEAF_NODE 10 * NAME 8 db LEAF_NODE 9 db LEAF_NODE 7 ; SIMPLE_DECL 6 char * dbfname ; VAR_DECL 7 char * dbfname TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 dbfname LEAF_NODE 9 dbfname LEAF_NODE 7 ; SIMPLE_DECL 6 struct stat dbst ; VAR_DECL 7 struct stat dbst TYPE 8 struct stat TYPE_NAME 9 struct stat LEAF_NODE 10 struct LEAF_NODE 10 stat NAME 8 dbst LEAF_NODE 9 dbst LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 CA_DB LEAF_NODE 4 CA_DB LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 free_index LEAF_NODE 3 free_index PARAMETER_LIST 2 ( CA_DB * db ) LEAF_NODE 3 ( PARAMETER_DECL 3 CA_DB * db TYPE 4 CA_DB * TYPE_NAME 5 CA_DB LEAF_NODE 6 CA_DB POINTER 5 * LEAF_NODE 6 * NAME 4 db LEAF_NODE 5 db LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 db EXPR 5 db FIELD 6 db LEAF_NODE 7 db LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 TXT_DB_free ( db -> db ) ; EXPR 7 TXT_DB_free ( db -> db ) FUNCTION_CALL 8 TXT_DB_free ( db -> db ) CALLEE 9 TXT_DB_free LEAF_NODE 10 TXT_DB_free LEAF_NODE 9 ( ARGUMENT 9 db -> db FIELD 10 db -> db LEAF_NODE 11 db LEAF_NODE 11 -> LEAF_NODE 11 db LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_free ( db -> dbfname ) ; EXPR 7 OPENSSL_free ( db -> dbfname ) FUNCTION_CALL 8 OPENSSL_free ( db -> dbfname ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 db -> dbfname FIELD 10 db -> dbfname LEAF_NODE 11 db LEAF_NODE 11 -> LEAF_NODE 11 dbfname LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_free ( db ) ; EXPR 7 OPENSSL_free ( db ) FUNCTION_CALL 8 OPENSSL_free ( db ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 db FIELD 10 db LEAF_NODE 11 db LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 }", "idx": 30, "project": "openssl_ast_normal_function_test_110", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_STRING_set LEAF_NODE 3 ASN1_STRING_set PARAMETER_LIST 2 ( ASN1_STRING * str , const void * _data , int len ) LEAF_NODE 3 ( PARAMETER_DECL 3 ASN1_STRING * str TYPE 4 ASN1_STRING * TYPE_NAME 5 ASN1_STRING LEAF_NODE 6 ASN1_STRING POINTER 5 * LEAF_NODE 6 * NAME 4 str LEAF_NODE 5 str LEAF_NODE 3 , PARAMETER_DECL 3 const void * _data TYPE 4 const void * TYPE_NAME 5 const void LEAF_NODE 6 const LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 _data LEAF_NODE 5 _data LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned char * c ; VAR_DECL 4 unsigned char * c TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 c LEAF_NODE 6 c LEAF_NODE 4 ; SIMPLE_DECL 3 const char * data ; data = _data ; VAR_DECL 4 const char * data ; data = _data TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = _data ASSIGN 6 data = _data LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 _data FIELD 8 _data LEAF_NODE 9 _data LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 len < 0 EXPR 5 len < 0 FIELD 6 len LEAF_NODE 7 len REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 data == NULL EXPR 8 data == NULL FIELD 9 data LEAF_NODE 10 data EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return 0 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 0 EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 EXPR_STATEMENT 8 len = strlen ( data ) ; EXPR 9 len = strlen ( data ) ASSIGN 10 len = strlen ( data ) LVAL 11 len FIELD 12 len LEAF_NODE 13 len ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 strlen ( data ) FUNCTION_CALL 12 strlen ( data ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 data FIELD 14 data LEAF_NODE 15 data LEAF_NODE 13 ) LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( str -> length <= len ) || ( str -> data == NULL ) EXPR 5 ( str -> length <= len ) || ( str -> data == NULL ) OR 6 ( str -> length <= len ) || ( str -> data == NULL ) EXPR 7 ( str -> length <= len ) LEAF_NODE 8 ( FIELD 8 str -> length LEAF_NODE 9 str LEAF_NODE 9 -> LEAF_NODE 9 length REL_OPERATOR 8 <= LEAF_NODE 9 <= FIELD 8 len LEAF_NODE 9 len LEAF_NODE 8 ) LEAF_NODE 7 || EXPR 7 ( str -> data == NULL ) LEAF_NODE 8 ( FIELD 8 str -> data LEAF_NODE 9 str LEAF_NODE 9 -> LEAF_NODE 9 data EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 c = str -> data ; EXPR 7 c = str -> data ASSIGN 8 c = str -> data LVAL 9 c FIELD 10 c LEAF_NODE 11 c ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 str -> data FIELD 10 str -> data LEAF_NODE 11 str LEAF_NODE 11 -> LEAF_NODE 11 data LEAF_NODE 7 ; EXPR_STATEMENT 6 str -> data = OPENSSL_realloc ( c , len + 1 ) ; EXPR 7 str -> data = OPENSSL_realloc ( c , len + 1 ) ASSIGN 8 str -> data = OPENSSL_realloc ( c , len + 1 ) LVAL 9 str -> data FIELD 10 str -> data LEAF_NODE 11 str LEAF_NODE 11 -> LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 OPENSSL_realloc ( c , len + 1 ) FUNCTION_CALL 10 OPENSSL_realloc ( c , len + 1 ) CALLEE 11 OPENSSL_realloc LEAF_NODE 12 OPENSSL_realloc LEAF_NODE 11 ( ARGUMENT 11 c FIELD 12 c LEAF_NODE 13 c LEAF_NODE 11 , ARGUMENT 11 len + 1 FIELD 12 len LEAF_NODE 13 len LEAF_NODE 12 + FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 str -> data == NULL EXPR 8 str -> data == NULL FIELD 9 str -> data LEAF_NODE 10 str LEAF_NODE 10 -> LEAF_NODE 10 data EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ASN1err ( ASN1_F_ASN1_STRING_SET , ERR_R_MALLOC_FAILURE ) ; EXPR 10 ASN1err ( ASN1_F_ASN1_STRING_SET , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 11 ASN1err ( ASN1_F_ASN1_STRING_SET , ERR_R_MALLOC_FAILURE ) CALLEE 12 ASN1err LEAF_NODE 13 ASN1err LEAF_NODE 12 ( ARGUMENT 12 ASN1_F_ASN1_STRING_SET FIELD 13 ASN1_F_ASN1_STRING_SET LEAF_NODE 14 ASN1_F_ASN1_STRING_SET LEAF_NODE 12 , ARGUMENT 12 ERR_R_MALLOC_FAILURE FIELD 13 ERR_R_MALLOC_FAILURE LEAF_NODE 14 ERR_R_MALLOC_FAILURE LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 str -> data = c ; EXPR 10 str -> data = c ASSIGN 11 str -> data = c LVAL 12 str -> data FIELD 13 str -> data LEAF_NODE 14 str LEAF_NODE 14 -> LEAF_NODE 14 data ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 c FIELD 13 c LEAF_NODE 14 c LEAF_NODE 10 ; JUMP_STATEMENT 9 return 0 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 0 EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 str -> length = len ; EXPR 4 str -> length = len ASSIGN 5 str -> length = len LVAL 6 str -> length FIELD 7 str -> length LEAF_NODE 8 str LEAF_NODE 8 -> LEAF_NODE 8 length ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 len FIELD 7 len LEAF_NODE 8 len LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 data != NULL EXPR 5 data != NULL FIELD 6 data LEAF_NODE 7 data EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 memcpy ( str -> data , data , len ) ; EXPR 7 memcpy ( str -> data , data , len ) FUNCTION_CALL 8 memcpy ( str -> data , data , len ) CALLEE 9 memcpy LEAF_NODE 10 memcpy LEAF_NODE 9 ( ARGUMENT 9 str -> data FIELD 10 str -> data LEAF_NODE 11 str LEAF_NODE 11 -> LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 len FIELD 10 len LEAF_NODE 11 len LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 str -> data [ len ] = '\\0' ; EXPR 7 str -> data [ len ] = '\\0' ASSIGN 8 str -> data [ len ] = '\\0' LVAL 9 str -> data [ len ] FIELD 10 str -> data [ len ] LEAF_NODE 11 str LEAF_NODE 11 -> LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 len FIELD 12 len LEAF_NODE 13 len LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 31, "project": "openssl_ast_normal_function_test_140", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 rot19l LEAF_NODE 3 rot19l PARAMETER_LIST 2 ( ARIA_u128 * o , const ARIA_u128 * xor , const ARIA_u128 * z ) LEAF_NODE 3 ( PARAMETER_DECL 3 ARIA_u128 * o TYPE 4 ARIA_u128 * TYPE_NAME 5 ARIA_u128 LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 o LEAF_NODE 5 o LEAF_NODE 3 , PARAMETER_DECL 3 const ARIA_u128 * xor TYPE 4 const ARIA_u128 * TYPE_NAME 5 const ARIA_u128 LEAF_NODE 6 const LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 xor LEAF_NODE 5 xor LEAF_NODE 3 , PARAMETER_DECL 3 const ARIA_u128 * z TYPE 4 const ARIA_u128 * TYPE_NAME 5 const ARIA_u128 LEAF_NODE 6 const LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 z LEAF_NODE 5 z LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 rotnr ( 8 * ARIA_BLOCK_SIZE - 19 , o , xor , z ) ; EXPR 4 rotnr ( 8 * ARIA_BLOCK_SIZE - 19 , o , xor , z ) FUNCTION_CALL 5 rotnr ( 8 * ARIA_BLOCK_SIZE - 19 , o , xor , z ) CALLEE 6 rotnr LEAF_NODE 7 rotnr LEAF_NODE 6 ( ARGUMENT 6 8 * ARIA_BLOCK_SIZE - 19 FIELD 7 8 LEAF_NODE 8 8 LEAF_NODE 7 * FIELD 7 ARIA_BLOCK_SIZE LEAF_NODE 8 ARIA_BLOCK_SIZE LEAF_NODE 7 - FIELD 7 19 LEAF_NODE 8 19 LEAF_NODE 6 , ARGUMENT 6 o FIELD 7 o LEAF_NODE 8 o LEAF_NODE 6 , ARGUMENT 6 xor FIELD 7 xor LEAF_NODE 8 xor LEAF_NODE 6 , ARGUMENT 6 z FIELD 7 z LEAF_NODE 8 z LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 32, "project": "openssl_ast_normal_function_test_95", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_GENERALIZEDTIME_print LEAF_NODE 3 ASN1_GENERALIZEDTIME_print PARAMETER_LIST 2 ( BIO * bp , const ASN1_GENERALIZEDTIME * tm ) LEAF_NODE 3 ( PARAMETER_DECL 3 BIO * bp TYPE 4 BIO * TYPE_NAME 5 BIO LEAF_NODE 6 BIO POINTER 5 * LEAF_NODE 6 * NAME 4 bp LEAF_NODE 5 bp LEAF_NODE 3 , PARAMETER_DECL 3 const ASN1_GENERALIZEDTIME * tm TYPE 4 const ASN1_GENERALIZEDTIME * TYPE_NAME 5 const ASN1_GENERALIZEDTIME LEAF_NODE 6 const LEAF_NODE 6 ASN1_GENERALIZEDTIME POINTER 5 * LEAF_NODE 6 * NAME 4 tm LEAF_NODE 5 tm LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 tm -> type != V_ASN1_GENERALIZEDTIME EXPR 5 tm -> type != V_ASN1_GENERALIZEDTIME FIELD 6 tm -> type LEAF_NODE 7 tm LEAF_NODE 7 -> LEAF_NODE 7 type EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 V_ASN1_GENERALIZEDTIME LEAF_NODE 7 V_ASN1_GENERALIZEDTIME LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; JUMP_STATEMENT 3 return ASN1_TIME_print ( bp , tm ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ASN1_TIME_print ( bp , tm ) EXPR 5 ASN1_TIME_print ( bp , tm ) FUNCTION_CALL 6 ASN1_TIME_print ( bp , tm ) CALLEE 7 ASN1_TIME_print LEAF_NODE 8 ASN1_TIME_print LEAF_NODE 7 ( ARGUMENT 7 bp FIELD 8 bp LEAF_NODE 9 bp LEAF_NODE 7 , ARGUMENT 7 tm FIELD 8 tm LEAF_NODE 9 tm LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 33, "project": "openssl_ast_normal_function_test_127", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 append_exp LEAF_NODE 3 append_exp PARAMETER_LIST 2 ( tag_exp_arg * arg , int exp_tag , int exp_class , int exp_constructed , int exp_pad , int imp_ok ) LEAF_NODE 3 ( PARAMETER_DECL 3 tag_exp_arg * arg TYPE 4 tag_exp_arg * TYPE_NAME 5 tag_exp_arg LEAF_NODE 6 tag_exp_arg POINTER 5 * LEAF_NODE 6 * NAME 4 arg LEAF_NODE 5 arg LEAF_NODE 3 , PARAMETER_DECL 3 int exp_tag TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 exp_tag LEAF_NODE 5 exp_tag LEAF_NODE 3 , PARAMETER_DECL 3 int exp_class TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 exp_class LEAF_NODE 5 exp_class LEAF_NODE 3 , PARAMETER_DECL 3 int exp_constructed TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 exp_constructed LEAF_NODE 5 exp_constructed LEAF_NODE 3 , PARAMETER_DECL 3 int exp_pad TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 exp_pad LEAF_NODE 5 exp_pad LEAF_NODE 3 , PARAMETER_DECL 3 int imp_ok TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 imp_ok LEAF_NODE 5 imp_ok LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 tag_exp_type * exp_tmp ; VAR_DECL 4 tag_exp_type * exp_tmp TYPE 5 tag_exp_type * TYPE_NAME 6 tag_exp_type LEAF_NODE 7 tag_exp_type POINTER 6 * LEAF_NODE 7 * NAME 5 exp_tmp LEAF_NODE 6 exp_tmp LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( arg -> imp_tag != - 1 ) && ! imp_ok EXPR 5 ( arg -> imp_tag != - 1 ) && ! imp_ok AND 6 ( arg -> imp_tag != - 1 ) && ! imp_ok EXPR 7 ( arg -> imp_tag != - 1 ) LEAF_NODE 8 ( FIELD 8 arg -> imp_tag LEAF_NODE 9 arg LEAF_NODE 9 -> LEAF_NODE 9 imp_tag EQ_OPERATOR 8 != LEAF_NODE 9 != UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 7 && EXPR 7 ! imp_ok UNARY_EXPR 8 ! imp_ok UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 imp_ok LEAF_NODE 10 imp_ok LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASN1err ( ASN1_F_APPEND_EXP , ASN1_R_ILLEGAL_IMPLICIT_TAG ) ; EXPR 7 ASN1err ( ASN1_F_APPEND_EXP , ASN1_R_ILLEGAL_IMPLICIT_TAG ) FUNCTION_CALL 8 ASN1err ( ASN1_F_APPEND_EXP , ASN1_R_ILLEGAL_IMPLICIT_TAG ) CALLEE 9 ASN1err LEAF_NODE 10 ASN1err LEAF_NODE 9 ( ARGUMENT 9 ASN1_F_APPEND_EXP FIELD 10 ASN1_F_APPEND_EXP LEAF_NODE 11 ASN1_F_APPEND_EXP LEAF_NODE 9 , ARGUMENT 9 ASN1_R_ILLEGAL_IMPLICIT_TAG FIELD 10 ASN1_R_ILLEGAL_IMPLICIT_TAG LEAF_NODE 11 ASN1_R_ILLEGAL_IMPLICIT_TAG LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 arg -> exp_count == ASN1_FLAG_EXP_MAX EXPR 5 arg -> exp_count == ASN1_FLAG_EXP_MAX FIELD 6 arg -> exp_count LEAF_NODE 7 arg LEAF_NODE 7 -> LEAF_NODE 7 exp_count EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 ASN1_FLAG_EXP_MAX LEAF_NODE 7 ASN1_FLAG_EXP_MAX LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASN1err ( ASN1_F_APPEND_EXP , ASN1_R_DEPTH_EXCEEDED ) ; EXPR 7 ASN1err ( ASN1_F_APPEND_EXP , ASN1_R_DEPTH_EXCEEDED ) FUNCTION_CALL 8 ASN1err ( ASN1_F_APPEND_EXP , ASN1_R_DEPTH_EXCEEDED ) CALLEE 9 ASN1err LEAF_NODE 10 ASN1err LEAF_NODE 9 ( ARGUMENT 9 ASN1_F_APPEND_EXP FIELD 10 ASN1_F_APPEND_EXP LEAF_NODE 11 ASN1_F_APPEND_EXP LEAF_NODE 9 , ARGUMENT 9 ASN1_R_DEPTH_EXCEEDED FIELD 10 ASN1_R_DEPTH_EXCEEDED LEAF_NODE 11 ASN1_R_DEPTH_EXCEEDED LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 exp_tmp = & arg -> exp_list [ arg -> exp_count ++ ] ; EXPR 4 exp_tmp = & arg -> exp_list [ arg -> exp_count ++ ] ASSIGN 5 exp_tmp = & arg -> exp_list [ arg -> exp_count ++ ] LVAL 6 exp_tmp FIELD 7 exp_tmp LEAF_NODE 8 exp_tmp ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 & arg -> exp_list [ arg -> exp_count ++ ] UNARY_EXPR 7 & arg -> exp_list [ arg -> exp_count ++ ] UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 arg -> exp_list [ arg -> exp_count ++ ] LEAF_NODE 9 arg LEAF_NODE 9 -> LEAF_NODE 9 exp_list LEAF_NODE 9 [ EXPR 9 arg -> exp_count ++ FIELD 10 arg -> exp_count ++ LEAF_NODE 11 arg LEAF_NODE 11 -> LEAF_NODE 11 exp_count LEAF_NODE 11 ++ LEAF_NODE 9 ] LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 arg -> imp_tag != - 1 EXPR 5 arg -> imp_tag != - 1 FIELD 6 arg -> imp_tag LEAF_NODE 7 arg LEAF_NODE 7 -> LEAF_NODE 7 imp_tag EQ_OPERATOR 6 != LEAF_NODE 7 != UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 exp_tmp -> exp_tag = arg -> imp_tag ; EXPR 7 exp_tmp -> exp_tag = arg -> imp_tag ASSIGN 8 exp_tmp -> exp_tag = arg -> imp_tag LVAL 9 exp_tmp -> exp_tag FIELD 10 exp_tmp -> exp_tag LEAF_NODE 11 exp_tmp LEAF_NODE 11 -> LEAF_NODE 11 exp_tag ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 arg -> imp_tag FIELD 10 arg -> imp_tag LEAF_NODE 11 arg LEAF_NODE 11 -> LEAF_NODE 11 imp_tag LEAF_NODE 7 ; EXPR_STATEMENT 6 exp_tmp -> exp_class = arg -> imp_class ; EXPR 7 exp_tmp -> exp_class = arg -> imp_class ASSIGN 8 exp_tmp -> exp_class = arg -> imp_class LVAL 9 exp_tmp -> exp_class FIELD 10 exp_tmp -> exp_class LEAF_NODE 11 exp_tmp LEAF_NODE 11 -> LEAF_NODE 11 exp_class ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 arg -> imp_class FIELD 10 arg -> imp_class LEAF_NODE 11 arg LEAF_NODE 11 -> LEAF_NODE 11 imp_class LEAF_NODE 7 ; EXPR_STATEMENT 6 arg -> imp_tag = - 1 ; EXPR 7 arg -> imp_tag = - 1 ASSIGN 8 arg -> imp_tag = - 1 LVAL 9 arg -> imp_tag FIELD 10 arg -> imp_tag LEAF_NODE 11 arg LEAF_NODE 11 -> LEAF_NODE 11 imp_tag ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 - 1 UNARY_EXPR 10 - 1 UNARY_OPERATOR 11 - LEAF_NODE 12 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 7 ; EXPR_STATEMENT 6 arg -> imp_class = - 1 ; EXPR 7 arg -> imp_class = - 1 ASSIGN 8 arg -> imp_class = - 1 LVAL 9 arg -> imp_class FIELD 10 arg -> imp_class LEAF_NODE 11 arg LEAF_NODE 11 -> LEAF_NODE 11 imp_class ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 - 1 UNARY_EXPR 10 - 1 UNARY_OPERATOR 11 - LEAF_NODE 12 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 exp_tmp -> exp_tag = exp_tag ; EXPR 7 exp_tmp -> exp_tag = exp_tag ASSIGN 8 exp_tmp -> exp_tag = exp_tag LVAL 9 exp_tmp -> exp_tag FIELD 10 exp_tmp -> exp_tag LEAF_NODE 11 exp_tmp LEAF_NODE 11 -> LEAF_NODE 11 exp_tag ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 exp_tag FIELD 10 exp_tag LEAF_NODE 11 exp_tag LEAF_NODE 7 ; EXPR_STATEMENT 6 exp_tmp -> exp_class = exp_class ; EXPR 7 exp_tmp -> exp_class = exp_class ASSIGN 8 exp_tmp -> exp_class = exp_class LVAL 9 exp_tmp -> exp_class FIELD 10 exp_tmp -> exp_class LEAF_NODE 11 exp_tmp LEAF_NODE 11 -> LEAF_NODE 11 exp_class ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 exp_class FIELD 10 exp_class LEAF_NODE 11 exp_class LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 exp_tmp -> exp_constructed = exp_constructed ; EXPR 4 exp_tmp -> exp_constructed = exp_constructed ASSIGN 5 exp_tmp -> exp_constructed = exp_constructed LVAL 6 exp_tmp -> exp_constructed FIELD 7 exp_tmp -> exp_constructed LEAF_NODE 8 exp_tmp LEAF_NODE 8 -> LEAF_NODE 8 exp_constructed ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 exp_constructed FIELD 7 exp_constructed LEAF_NODE 8 exp_constructed LEAF_NODE 4 ; EXPR_STATEMENT 3 exp_tmp -> exp_pad = exp_pad ; EXPR 4 exp_tmp -> exp_pad = exp_pad ASSIGN 5 exp_tmp -> exp_pad = exp_pad LVAL 6 exp_tmp -> exp_pad FIELD 7 exp_tmp -> exp_pad LEAF_NODE 8 exp_tmp LEAF_NODE 8 -> LEAF_NODE 8 exp_pad ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 exp_pad FIELD 7 exp_pad LEAF_NODE 8 exp_pad LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 34, "project": "openssl_ast_normal_function_test_97", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 tls_decrypt_ticket LEAF_NODE 3 tls_decrypt_ticket PARAMETER_LIST 2 ( SSL * s , const unsigned char * etick , int eticklen , const unsigned char * sess_id , int sesslen , SSL_SESSION * * psess ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 const unsigned char * etick TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 etick LEAF_NODE 5 etick LEAF_NODE 3 , PARAMETER_DECL 3 int eticklen TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 eticklen LEAF_NODE 5 eticklen LEAF_NODE 3 , PARAMETER_DECL 3 const unsigned char * sess_id TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 sess_id LEAF_NODE 5 sess_id LEAF_NODE 3 , PARAMETER_DECL 3 int sesslen TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 sesslen LEAF_NODE 5 sesslen LEAF_NODE 3 , PARAMETER_DECL 3 SSL_SESSION * * psess TYPE 4 SSL_SESSION * * TYPE_NAME 5 SSL_SESSION LEAF_NODE 6 SSL_SESSION POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 psess LEAF_NODE 5 psess LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 SSL_SESSION * sess ; VAR_DECL 4 SSL_SESSION * sess TYPE 5 SSL_SESSION * TYPE_NAME 6 SSL_SESSION LEAF_NODE 7 SSL_SESSION POINTER 6 * LEAF_NODE 7 * NAME 5 sess LEAF_NODE 6 sess LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * sdec ; VAR_DECL 4 unsigned char * sdec TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 sdec LEAF_NODE 6 sdec LEAF_NODE 4 ; SIMPLE_DECL 3 const unsigned char * p ; VAR_DECL 4 const unsigned char * p TYPE 5 const unsigned char * TYPE_NAME 6 const unsigned char LEAF_NODE 7 const LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 4 ; SIMPLE_DECL 3 int slen , int mlen , int renew_ticket ; renew_ticket = 0 ; INIT_DECL_LIST 4 int slen , int mlen , int renew_ticket ; renew_ticket = 0 VAR_DECL 5 int slen TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 slen LEAF_NODE 7 slen LEAF_NODE 5 , INIT_DECL_LIST 5 int mlen , int renew_ticket ; renew_ticket = 0 VAR_DECL 6 int mlen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 mlen LEAF_NODE 8 mlen LEAF_NODE 6 , VAR_DECL 6 int renew_ticket ; renew_ticket = 0 TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 renew_ticket LEAF_NODE 8 renew_ticket LEAF_NODE 7 ; INIT 7 renew_ticket = 0 ASSIGN 8 renew_ticket = 0 LVAL 9 renew_ticket NAME 10 renew_ticket LEAF_NODE 11 renew_ticket ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char [ EVP_MAX_MD_SIZE ] tick_hmac ; VAR_DECL 4 unsigned char [ EVP_MAX_MD_SIZE ] tick_hmac TYPE 5 unsigned char [ EVP_MAX_MD_SIZE ] TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char TYPE_SUFFIX 6 [ EVP_MAX_MD_SIZE ] LEAF_NODE 7 [ FIELD 7 EVP_MAX_MD_SIZE LEAF_NODE 8 EVP_MAX_MD_SIZE LEAF_NODE 7 ] NAME 5 tick_hmac LEAF_NODE 6 tick_hmac LEAF_NODE 4 ; SIMPLE_DECL 3 HMAC_CTX hctx ; VAR_DECL 4 HMAC_CTX hctx TYPE 5 HMAC_CTX TYPE_NAME 6 HMAC_CTX LEAF_NODE 7 HMAC_CTX NAME 5 hctx LEAF_NODE 6 hctx LEAF_NODE 4 ; SIMPLE_DECL 3 EVP_CIPHER_CTX ctx ; VAR_DECL 4 EVP_CIPHER_CTX ctx TYPE 5 EVP_CIPHER_CTX TYPE_NAME 6 EVP_CIPHER_CTX LEAF_NODE 7 EVP_CIPHER_CTX NAME 5 ctx LEAF_NODE 6 ctx LEAF_NODE 4 ; SIMPLE_DECL 3 SSL_CTX * tctx ; tctx = s -> initial_ctx ; VAR_DECL 4 SSL_CTX * tctx ; tctx = s -> initial_ctx TYPE 5 SSL_CTX * TYPE_NAME 6 SSL_CTX LEAF_NODE 7 SSL_CTX POINTER 6 * LEAF_NODE 7 * NAME 5 tctx LEAF_NODE 6 tctx LEAF_NODE 5 ; INIT 5 tctx = s -> initial_ctx ASSIGN 6 tctx = s -> initial_ctx LVAL 7 tctx NAME 8 tctx LEAF_NODE 9 tctx ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 s -> initial_ctx FIELD 8 s -> initial_ctx LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 initial_ctx LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 eticklen < 48 EXPR 5 eticklen < 48 FIELD 6 eticklen LEAF_NODE 7 eticklen REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 48 LEAF_NODE 7 48 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 2 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 2 EXPR 7 2 FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 6 ; EXPR_STATEMENT 3 HMAC_CTX_init ( & hctx ) ; EXPR 4 HMAC_CTX_init ( & hctx ) FUNCTION_CALL 5 HMAC_CTX_init ( & hctx ) CALLEE 6 HMAC_CTX_init LEAF_NODE 7 HMAC_CTX_init LEAF_NODE 6 ( ARGUMENT 6 & hctx UNARY_EXPR 7 & hctx UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 hctx LEAF_NODE 9 hctx LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_CIPHER_CTX_init ( & ctx ) ; EXPR 4 EVP_CIPHER_CTX_init ( & ctx ) FUNCTION_CALL 5 EVP_CIPHER_CTX_init ( & ctx ) CALLEE 6 EVP_CIPHER_CTX_init LEAF_NODE 7 EVP_CIPHER_CTX_init LEAF_NODE 6 ( ARGUMENT 6 & ctx UNARY_EXPR 7 & ctx UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 ctx LEAF_NODE 9 ctx LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 tctx -> tlsext_ticket_key_cb EXPR 5 tctx -> tlsext_ticket_key_cb FIELD 6 tctx -> tlsext_ticket_key_cb LEAF_NODE 7 tctx LEAF_NODE 7 -> LEAF_NODE 7 tlsext_ticket_key_cb LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 unsigned char * nctick ; nctick = ( unsigned char * ) etick ; VAR_DECL 7 unsigned char * nctick ; nctick = ( unsigned char * ) etick TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 nctick LEAF_NODE 9 nctick LEAF_NODE 8 ; INIT 8 nctick = ( unsigned char * ) etick ASSIGN 9 nctick = ( unsigned char * ) etick LVAL 10 nctick NAME 11 nctick LEAF_NODE 12 nctick ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( unsigned char * ) etick LEAF_NODE 11 ( TYPE_NAME 11 unsigned char LEAF_NODE 12 unsigned LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FIELD 11 etick LEAF_NODE 12 etick LEAF_NODE 7 ; SIMPLE_DECL 6 int rv ; rv = tctx -> tlsext_ticket_key_cb ( s , nctick , nctick + 16 , & ctx , & hctx , 0 ) ; VAR_DECL 7 int rv ; rv = tctx -> tlsext_ticket_key_cb ( s , nctick , nctick + 16 , & ctx , & hctx , 0 ) TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 rv LEAF_NODE 9 rv LEAF_NODE 8 ; INIT 8 rv = tctx -> tlsext_ticket_key_cb ( s , nctick , nctick + 16 , & ctx , & hctx , 0 ) ASSIGN 9 rv = tctx -> tlsext_ticket_key_cb ( s , nctick , nctick + 16 , & ctx , & hctx , 0 ) LVAL 10 rv NAME 11 rv LEAF_NODE 12 rv ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 tctx -> tlsext_ticket_key_cb ( s , nctick , nctick + 16 , & ctx , & hctx , 0 ) FUNCTION_CALL 11 tctx -> tlsext_ticket_key_cb ( s , nctick , nctick + 16 , & ctx , & hctx , 0 ) CALLEE 12 tctx -> tlsext_ticket_key_cb LEAF_NODE 13 tctx LEAF_NODE 13 -> LEAF_NODE 13 tlsext_ticket_key_cb LEAF_NODE 12 ( ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 , ARGUMENT 12 nctick FIELD 13 nctick LEAF_NODE 14 nctick LEAF_NODE 12 , ARGUMENT 12 nctick + 16 FIELD 13 nctick LEAF_NODE 14 nctick LEAF_NODE 13 + FIELD 13 16 LEAF_NODE 14 16 LEAF_NODE 12 , ARGUMENT 12 & ctx UNARY_EXPR 13 & ctx UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 ctx LEAF_NODE 15 ctx LEAF_NODE 12 , ARGUMENT 12 & hctx UNARY_EXPR 13 & hctx UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 hctx LEAF_NODE 15 hctx LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 rv < 0 EXPR 8 rv < 0 FIELD 9 rv LEAF_NODE 10 rv REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return - 1 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 - 1 EXPR 10 - 1 UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 rv == 0 EXPR 8 rv == 0 FIELD 9 rv LEAF_NODE 10 rv EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return 2 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 2 EXPR 10 2 FIELD 11 2 LEAF_NODE 12 2 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 rv == 2 EXPR 8 rv == 2 FIELD 9 rv LEAF_NODE 10 rv EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 renew_ticket = 1 ; EXPR 9 renew_ticket = 1 ASSIGN 10 renew_ticket = 1 LVAL 11 renew_ticket FIELD 12 renew_ticket LEAF_NODE 13 renew_ticket ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 memcmp ( etick , tctx -> tlsext_tick_key_name , 16 ) EXPR 8 memcmp ( etick , tctx -> tlsext_tick_key_name , 16 ) FUNCTION_CALL 9 memcmp ( etick , tctx -> tlsext_tick_key_name , 16 ) CALLEE 10 memcmp LEAF_NODE 11 memcmp LEAF_NODE 10 ( ARGUMENT 10 etick FIELD 11 etick LEAF_NODE 12 etick LEAF_NODE 10 , ARGUMENT 10 tctx -> tlsext_tick_key_name FIELD 11 tctx -> tlsext_tick_key_name LEAF_NODE 12 tctx LEAF_NODE 12 -> LEAF_NODE 12 tlsext_tick_key_name LEAF_NODE 10 , ARGUMENT 10 16 FIELD 11 16 LEAF_NODE 12 16 LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return 2 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 2 EXPR 10 2 FIELD 11 2 LEAF_NODE 12 2 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 HMAC_Init_ex ( & hctx , tctx -> tlsext_tick_hmac_key , 16 , tlsext_tick_md ( ) , NULL ) <= 0 || EVP_DecryptInit_ex ( & ctx , EVP_aes_128_cbc ( ) , NULL , tctx -> tlsext_tick_aes_key , etick + 16 ) <= 0 EXPR 8 HMAC_Init_ex ( & hctx , tctx -> tlsext_tick_hmac_key , 16 , tlsext_tick_md ( ) , NULL ) <= 0 || EVP_DecryptInit_ex ( & ctx , EVP_aes_128_cbc ( ) , NULL , tctx -> tlsext_tick_aes_key , etick + 16 ) <= 0 OR 9 HMAC_Init_ex ( & hctx , tctx -> tlsext_tick_hmac_key , 16 , tlsext_tick_md ( ) , NULL ) <= 0 || EVP_DecryptInit_ex ( & ctx , EVP_aes_128_cbc ( ) , NULL , tctx -> tlsext_tick_aes_key , etick + 16 ) <= 0 EXPR 10 HMAC_Init_ex ( & hctx , tctx -> tlsext_tick_hmac_key , 16 , tlsext_tick_md ( ) , NULL ) <= 0 FUNCTION_CALL 11 HMAC_Init_ex ( & hctx , tctx -> tlsext_tick_hmac_key , 16 , tlsext_tick_md ( ) , NULL ) CALLEE 12 HMAC_Init_ex LEAF_NODE 13 HMAC_Init_ex LEAF_NODE 12 ( ARGUMENT 12 & hctx UNARY_EXPR 13 & hctx UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 hctx LEAF_NODE 15 hctx LEAF_NODE 12 , ARGUMENT 12 tctx -> tlsext_tick_hmac_key FIELD 13 tctx -> tlsext_tick_hmac_key LEAF_NODE 14 tctx LEAF_NODE 14 -> LEAF_NODE 14 tlsext_tick_hmac_key LEAF_NODE 12 , ARGUMENT 12 16 FIELD 13 16 LEAF_NODE 14 16 LEAF_NODE 12 , ARGUMENT 12 tlsext_tick_md ( ) FUNCTION_CALL 13 tlsext_tick_md ( ) CALLEE 14 tlsext_tick_md LEAF_NODE 15 tlsext_tick_md LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 ) REL_OPERATOR 11 <= LEAF_NODE 12 <= FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 || EXPR 10 EVP_DecryptInit_ex ( & ctx , EVP_aes_128_cbc ( ) , NULL , tctx -> tlsext_tick_aes_key , etick + 16 ) <= 0 FUNCTION_CALL 11 EVP_DecryptInit_ex ( & ctx , EVP_aes_128_cbc ( ) , NULL , tctx -> tlsext_tick_aes_key , etick + 16 ) CALLEE 12 EVP_DecryptInit_ex LEAF_NODE 13 EVP_DecryptInit_ex LEAF_NODE 12 ( ARGUMENT 12 & ctx UNARY_EXPR 13 & ctx UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 ctx LEAF_NODE 15 ctx LEAF_NODE 12 , ARGUMENT 12 EVP_aes_128_cbc ( ) FUNCTION_CALL 13 EVP_aes_128_cbc ( ) CALLEE 14 EVP_aes_128_cbc LEAF_NODE 15 EVP_aes_128_cbc LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 tctx -> tlsext_tick_aes_key FIELD 13 tctx -> tlsext_tick_aes_key LEAF_NODE 14 tctx LEAF_NODE 14 -> LEAF_NODE 14 tlsext_tick_aes_key LEAF_NODE 12 , ARGUMENT 12 etick + 16 FIELD 13 etick LEAF_NODE 14 etick LEAF_NODE 13 + FIELD 13 16 LEAF_NODE 14 16 LEAF_NODE 12 ) REL_OPERATOR 11 <= LEAF_NODE 12 <= FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 JUMP_STATEMENT 9 goto err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 err LEAF_NODE 11 err LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 mlen = HMAC_size ( & hctx ) ; EXPR 4 mlen = HMAC_size ( & hctx ) ASSIGN 5 mlen = HMAC_size ( & hctx ) LVAL 6 mlen FIELD 7 mlen LEAF_NODE 8 mlen ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 HMAC_size ( & hctx ) FUNCTION_CALL 7 HMAC_size ( & hctx ) CALLEE 8 HMAC_size LEAF_NODE 9 HMAC_size LEAF_NODE 8 ( ARGUMENT 8 & hctx UNARY_EXPR 9 & hctx UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 hctx LEAF_NODE 11 hctx LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 mlen < 0 EXPR 5 mlen < 0 FIELD 6 mlen LEAF_NODE 7 mlen REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 eticklen -= mlen ; EXPR 4 eticklen -= mlen ASSIGN 5 eticklen -= mlen LVAL 6 eticklen FIELD 7 eticklen LEAF_NODE 8 eticklen ASSIGN_OP 6 -= LEAF_NODE 7 -= RVAL 6 mlen FIELD 7 mlen LEAF_NODE 8 mlen LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 HMAC_Update ( & hctx , etick , eticklen ) <= 0 || HMAC_Final ( & hctx , tick_hmac , NULL ) <= 0 EXPR 5 HMAC_Update ( & hctx , etick , eticklen ) <= 0 || HMAC_Final ( & hctx , tick_hmac , NULL ) <= 0 OR 6 HMAC_Update ( & hctx , etick , eticklen ) <= 0 || HMAC_Final ( & hctx , tick_hmac , NULL ) <= 0 EXPR 7 HMAC_Update ( & hctx , etick , eticklen ) <= 0 FUNCTION_CALL 8 HMAC_Update ( & hctx , etick , eticklen ) CALLEE 9 HMAC_Update LEAF_NODE 10 HMAC_Update LEAF_NODE 9 ( ARGUMENT 9 & hctx UNARY_EXPR 10 & hctx UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 hctx LEAF_NODE 12 hctx LEAF_NODE 9 , ARGUMENT 9 etick FIELD 10 etick LEAF_NODE 11 etick LEAF_NODE 9 , ARGUMENT 9 eticklen FIELD 10 eticklen LEAF_NODE 11 eticklen LEAF_NODE 9 ) REL_OPERATOR 8 <= LEAF_NODE 9 <= FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 7 || EXPR 7 HMAC_Final ( & hctx , tick_hmac , NULL ) <= 0 FUNCTION_CALL 8 HMAC_Final ( & hctx , tick_hmac , NULL ) CALLEE 9 HMAC_Final LEAF_NODE 10 HMAC_Final LEAF_NODE 9 ( ARGUMENT 9 & hctx UNARY_EXPR 10 & hctx UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 hctx LEAF_NODE 12 hctx LEAF_NODE 9 , ARGUMENT 9 tick_hmac FIELD 10 tick_hmac LEAF_NODE 11 tick_hmac LEAF_NODE 9 , ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 ) REL_OPERATOR 8 <= LEAF_NODE 9 <= FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 HMAC_CTX_cleanup ( & hctx ) ; EXPR 4 HMAC_CTX_cleanup ( & hctx ) FUNCTION_CALL 5 HMAC_CTX_cleanup ( & hctx ) CALLEE 6 HMAC_CTX_cleanup LEAF_NODE 7 HMAC_CTX_cleanup LEAF_NODE 6 ( ARGUMENT 6 & hctx UNARY_EXPR 7 & hctx UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 hctx LEAF_NODE 9 hctx LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CRYPTO_memcmp ( tick_hmac , etick + eticklen , mlen ) EXPR 5 CRYPTO_memcmp ( tick_hmac , etick + eticklen , mlen ) FUNCTION_CALL 6 CRYPTO_memcmp ( tick_hmac , etick + eticklen , mlen ) CALLEE 7 CRYPTO_memcmp LEAF_NODE 8 CRYPTO_memcmp LEAF_NODE 7 ( ARGUMENT 7 tick_hmac FIELD 8 tick_hmac LEAF_NODE 9 tick_hmac LEAF_NODE 7 , ARGUMENT 7 etick + eticklen FIELD 8 etick LEAF_NODE 9 etick LEAF_NODE 8 + FIELD 8 eticklen LEAF_NODE 9 eticklen LEAF_NODE 7 , ARGUMENT 7 mlen FIELD 8 mlen LEAF_NODE 9 mlen LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 EVP_CIPHER_CTX_cleanup ( & ctx ) ; EXPR 7 EVP_CIPHER_CTX_cleanup ( & ctx ) FUNCTION_CALL 8 EVP_CIPHER_CTX_cleanup ( & ctx ) CALLEE 9 EVP_CIPHER_CTX_cleanup LEAF_NODE 10 EVP_CIPHER_CTX_cleanup LEAF_NODE 9 ( ARGUMENT 9 & ctx UNARY_EXPR 10 & ctx UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 ctx LEAF_NODE 12 ctx LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 2 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 2 EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 p = etick + 16 + EVP_CIPHER_CTX_iv_length ( & ctx ) ; EXPR 4 p = etick + 16 + EVP_CIPHER_CTX_iv_length ( & ctx ) ASSIGN 5 p = etick + 16 + EVP_CIPHER_CTX_iv_length ( & ctx ) LVAL 6 p FIELD 7 p LEAF_NODE 8 p ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 etick + 16 + EVP_CIPHER_CTX_iv_length ( & ctx ) FIELD 7 etick LEAF_NODE 8 etick LEAF_NODE 7 + FIELD 7 16 LEAF_NODE 8 16 LEAF_NODE 7 + FUNCTION_CALL 7 EVP_CIPHER_CTX_iv_length ( & ctx ) CALLEE 8 EVP_CIPHER_CTX_iv_length LEAF_NODE 9 EVP_CIPHER_CTX_iv_length LEAF_NODE 8 ( ARGUMENT 8 & ctx UNARY_EXPR 9 & ctx UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 ctx LEAF_NODE 11 ctx LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 eticklen -= 16 + EVP_CIPHER_CTX_iv_length ( & ctx ) ; EXPR 4 eticklen -= 16 + EVP_CIPHER_CTX_iv_length ( & ctx ) ASSIGN 5 eticklen -= 16 + EVP_CIPHER_CTX_iv_length ( & ctx ) LVAL 6 eticklen FIELD 7 eticklen LEAF_NODE 8 eticklen ASSIGN_OP 6 -= LEAF_NODE 7 -= RVAL 6 16 + EVP_CIPHER_CTX_iv_length ( & ctx ) FIELD 7 16 LEAF_NODE 8 16 LEAF_NODE 7 + FUNCTION_CALL 7 EVP_CIPHER_CTX_iv_length ( & ctx ) CALLEE 8 EVP_CIPHER_CTX_iv_length LEAF_NODE 9 EVP_CIPHER_CTX_iv_length LEAF_NODE 8 ( ARGUMENT 8 & ctx UNARY_EXPR 9 & ctx UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 ctx LEAF_NODE 11 ctx LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 sdec = OPENSSL_malloc ( eticklen ) ; EXPR 4 sdec = OPENSSL_malloc ( eticklen ) ASSIGN 5 sdec = OPENSSL_malloc ( eticklen ) LVAL 6 sdec FIELD 7 sdec LEAF_NODE 8 sdec ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 OPENSSL_malloc ( eticklen ) FUNCTION_CALL 7 OPENSSL_malloc ( eticklen ) CALLEE 8 OPENSSL_malloc LEAF_NODE 9 OPENSSL_malloc LEAF_NODE 8 ( ARGUMENT 8 eticklen FIELD 9 eticklen LEAF_NODE 10 eticklen LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 sdec == NULL || EVP_DecryptUpdate ( & ctx , sdec , & slen , p , eticklen ) <= 0 EXPR 5 sdec == NULL || EVP_DecryptUpdate ( & ctx , sdec , & slen , p , eticklen ) <= 0 OR 6 sdec == NULL || EVP_DecryptUpdate ( & ctx , sdec , & slen , p , eticklen ) <= 0 EXPR 7 sdec == NULL FIELD 8 sdec LEAF_NODE 9 sdec EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 7 || EXPR 7 EVP_DecryptUpdate ( & ctx , sdec , & slen , p , eticklen ) <= 0 FUNCTION_CALL 8 EVP_DecryptUpdate ( & ctx , sdec , & slen , p , eticklen ) CALLEE 9 EVP_DecryptUpdate LEAF_NODE 10 EVP_DecryptUpdate LEAF_NODE 9 ( ARGUMENT 9 & ctx UNARY_EXPR 10 & ctx UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 ctx LEAF_NODE 12 ctx LEAF_NODE 9 , ARGUMENT 9 sdec FIELD 10 sdec LEAF_NODE 11 sdec LEAF_NODE 9 , ARGUMENT 9 & slen UNARY_EXPR 10 & slen UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 slen LEAF_NODE 12 slen LEAF_NODE 9 , ARGUMENT 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 , ARGUMENT 9 eticklen FIELD 10 eticklen LEAF_NODE 11 eticklen LEAF_NODE 9 ) REL_OPERATOR 8 <= LEAF_NODE 9 <= FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 EVP_CIPHER_CTX_cleanup ( & ctx ) ; EXPR 7 EVP_CIPHER_CTX_cleanup ( & ctx ) FUNCTION_CALL 8 EVP_CIPHER_CTX_cleanup ( & ctx ) CALLEE 9 EVP_CIPHER_CTX_cleanup LEAF_NODE 10 EVP_CIPHER_CTX_cleanup LEAF_NODE 9 ( ARGUMENT 9 & ctx UNARY_EXPR 10 & ctx UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 ctx LEAF_NODE 12 ctx LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_free ( sdec ) ; EXPR 7 OPENSSL_free ( sdec ) FUNCTION_CALL 8 OPENSSL_free ( sdec ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 sdec FIELD 10 sdec LEAF_NODE 11 sdec LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 EVP_DecryptFinal ( & ctx , sdec + slen , & mlen ) <= 0 EXPR 5 EVP_DecryptFinal ( & ctx , sdec + slen , & mlen ) <= 0 FUNCTION_CALL 6 EVP_DecryptFinal ( & ctx , sdec + slen , & mlen ) CALLEE 7 EVP_DecryptFinal LEAF_NODE 8 EVP_DecryptFinal LEAF_NODE 7 ( ARGUMENT 7 & ctx UNARY_EXPR 8 & ctx UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 ctx LEAF_NODE 10 ctx LEAF_NODE 7 , ARGUMENT 7 sdec + slen FIELD 8 sdec LEAF_NODE 9 sdec LEAF_NODE 8 + FIELD 8 slen LEAF_NODE 9 slen LEAF_NODE 7 , ARGUMENT 7 & mlen UNARY_EXPR 8 & mlen UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 mlen LEAF_NODE 10 mlen LEAF_NODE 7 ) REL_OPERATOR 6 <= LEAF_NODE 7 <= FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 EVP_CIPHER_CTX_cleanup ( & ctx ) ; EXPR 7 EVP_CIPHER_CTX_cleanup ( & ctx ) FUNCTION_CALL 8 EVP_CIPHER_CTX_cleanup ( & ctx ) CALLEE 9 EVP_CIPHER_CTX_cleanup LEAF_NODE 10 EVP_CIPHER_CTX_cleanup LEAF_NODE 9 ( ARGUMENT 9 & ctx UNARY_EXPR 10 & ctx UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 ctx LEAF_NODE 12 ctx LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_free ( sdec ) ; EXPR 7 OPENSSL_free ( sdec ) FUNCTION_CALL 8 OPENSSL_free ( sdec ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 sdec FIELD 10 sdec LEAF_NODE 11 sdec LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 2 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 2 EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 slen += mlen ; EXPR 4 slen += mlen ASSIGN 5 slen += mlen LVAL 6 slen FIELD 7 slen LEAF_NODE 8 slen ASSIGN_OP 6 += LEAF_NODE 7 += RVAL 6 mlen FIELD 7 mlen LEAF_NODE 8 mlen LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_CIPHER_CTX_cleanup ( & ctx ) ; EXPR 4 EVP_CIPHER_CTX_cleanup ( & ctx ) FUNCTION_CALL 5 EVP_CIPHER_CTX_cleanup ( & ctx ) CALLEE 6 EVP_CIPHER_CTX_cleanup LEAF_NODE 7 EVP_CIPHER_CTX_cleanup LEAF_NODE 6 ( ARGUMENT 6 & ctx UNARY_EXPR 7 & ctx UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 ctx LEAF_NODE 9 ctx LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 p = sdec ; EXPR 4 p = sdec ASSIGN 5 p = sdec LVAL 6 p FIELD 7 p LEAF_NODE 8 p ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 sdec FIELD 7 sdec LEAF_NODE 8 sdec LEAF_NODE 4 ; EXPR_STATEMENT 3 sess = d2i_SSL_SESSION ( NULL , & p , slen ) ; EXPR 4 sess = d2i_SSL_SESSION ( NULL , & p , slen ) ASSIGN 5 sess = d2i_SSL_SESSION ( NULL , & p , slen ) LVAL 6 sess FIELD 7 sess LEAF_NODE 8 sess ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 d2i_SSL_SESSION ( NULL , & p , slen ) FUNCTION_CALL 7 d2i_SSL_SESSION ( NULL , & p , slen ) CALLEE 8 d2i_SSL_SESSION LEAF_NODE 9 d2i_SSL_SESSION LEAF_NODE 8 ( ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 , ARGUMENT 8 & p UNARY_EXPR 9 & p UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 p LEAF_NODE 11 p LEAF_NODE 8 , ARGUMENT 8 slen FIELD 9 slen LEAF_NODE 10 slen LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 OPENSSL_free ( sdec ) ; EXPR 4 OPENSSL_free ( sdec ) FUNCTION_CALL 5 OPENSSL_free ( sdec ) CALLEE 6 OPENSSL_free LEAF_NODE 7 OPENSSL_free LEAF_NODE 6 ( ARGUMENT 6 sdec FIELD 7 sdec LEAF_NODE 8 sdec LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 sess EXPR 5 sess FIELD 6 sess LEAF_NODE 7 sess LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 sesslen EXPR 8 sesslen FIELD 9 sesslen LEAF_NODE 10 sesslen LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 memcpy ( sess -> session_id , sess_id , sesslen ) ; EXPR 9 memcpy ( sess -> session_id , sess_id , sesslen ) FUNCTION_CALL 10 memcpy ( sess -> session_id , sess_id , sesslen ) CALLEE 11 memcpy LEAF_NODE 12 memcpy LEAF_NODE 11 ( ARGUMENT 11 sess -> session_id FIELD 12 sess -> session_id LEAF_NODE 13 sess LEAF_NODE 13 -> LEAF_NODE 13 session_id LEAF_NODE 11 , ARGUMENT 11 sess_id FIELD 12 sess_id LEAF_NODE 13 sess_id LEAF_NODE 11 , ARGUMENT 11 sesslen FIELD 12 sesslen LEAF_NODE 13 sesslen LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 6 sess -> session_id_length = sesslen ; EXPR 7 sess -> session_id_length = sesslen ASSIGN 8 sess -> session_id_length = sesslen LVAL 9 sess -> session_id_length FIELD 10 sess -> session_id_length LEAF_NODE 11 sess LEAF_NODE 11 -> LEAF_NODE 11 session_id_length ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 sesslen FIELD 10 sesslen LEAF_NODE 11 sesslen LEAF_NODE 7 ; EXPR_STATEMENT 6 * psess = sess ; EXPR 7 * psess = sess ASSIGN 8 * psess = sess LVAL 9 * psess UNARY_EXPR 10 * psess UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 psess LEAF_NODE 12 psess ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 sess FIELD 10 sess LEAF_NODE 11 sess LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 renew_ticket EXPR 8 renew_ticket FIELD 9 renew_ticket LEAF_NODE 10 renew_ticket LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return 4 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 4 EXPR 10 4 FIELD 11 4 LEAF_NODE 12 4 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 JUMP_STATEMENT 8 return 3 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 3 EXPR 10 3 FIELD 11 3 LEAF_NODE 12 3 LEAF_NODE 9 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ERR_clear_error ( ) ; EXPR 4 ERR_clear_error ( ) FUNCTION_CALL 5 ERR_clear_error ( ) CALLEE 6 ERR_clear_error LEAF_NODE 7 ERR_clear_error LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 2 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 2 EXPR 5 2 FIELD 6 2 LEAF_NODE 7 2 LEAF_NODE 4 ; LABEL 3 err : LEAF_NODE 4 err LEAF_NODE 4 : EXPR_STATEMENT 3 EVP_CIPHER_CTX_cleanup ( & ctx ) ; EXPR 4 EVP_CIPHER_CTX_cleanup ( & ctx ) FUNCTION_CALL 5 EVP_CIPHER_CTX_cleanup ( & ctx ) CALLEE 6 EVP_CIPHER_CTX_cleanup LEAF_NODE 7 EVP_CIPHER_CTX_cleanup LEAF_NODE 6 ( ARGUMENT 6 & ctx UNARY_EXPR 7 & ctx UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 ctx LEAF_NODE 9 ctx LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 HMAC_CTX_cleanup ( & hctx ) ; EXPR 4 HMAC_CTX_cleanup ( & hctx ) FUNCTION_CALL 5 HMAC_CTX_cleanup ( & hctx ) CALLEE 6 HMAC_CTX_cleanup LEAF_NODE 7 HMAC_CTX_cleanup LEAF_NODE 6 ( ARGUMENT 6 & hctx UNARY_EXPR 7 & hctx UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 hctx LEAF_NODE 9 hctx LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return - 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 - 1 EXPR 5 - 1 UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 35, "project": "openssl_ast_vul_function_test_26", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 once_do_run LEAF_NODE 3 once_do_run PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 once_run_count ++ ; EXPR 4 once_run_count ++ FIELD 5 once_run_count ++ LEAF_NODE 6 once_run_count LEAF_NODE 6 ++ LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 36, "project": "openssl_ast_normal_function_test_3", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS ; VAR_DECL 2 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS TYPE 3 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } CLASS_DEF 4 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } LEAF_NODE 5 struct CLASS_NAME 5 args_st LEAF_NODE 6 args_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int size ; int argc ; char * argv ; SIMPLE_DECL 6 int size ; VAR_DECL 7 int size TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 size LEAF_NODE 9 size LEAF_NODE 7 ; SIMPLE_DECL 6 int argc ; VAR_DECL 7 int argc TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 argc LEAF_NODE 9 argc LEAF_NODE 7 ; SIMPLE_DECL 6 char * argv ; VAR_DECL 7 char * argv TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 argv LEAF_NODE 9 argv LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 ARGS LEAF_NODE 4 ARGS LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 istext LEAF_NODE 3 istext PARAMETER_LIST 2 ( int format ) LEAF_NODE 3 ( PARAMETER_DECL 3 int format TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 format LEAF_NODE 5 format LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return ( format & B_FORMAT_TEXT ) == B_FORMAT_TEXT ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ( format & B_FORMAT_TEXT ) == B_FORMAT_TEXT EXPR 5 ( format & B_FORMAT_TEXT ) == B_FORMAT_TEXT LEAF_NODE 6 ( FIELD 6 format LEAF_NODE 7 format LEAF_NODE 6 & FIELD 6 B_FORMAT_TEXT LEAF_NODE 7 B_FORMAT_TEXT LEAF_NODE 6 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 B_FORMAT_TEXT LEAF_NODE 7 B_FORMAT_TEXT LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 37, "project": "openssl_ast_normal_function_test_170", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 tls1_process_ticket LEAF_NODE 3 tls1_process_ticket PARAMETER_LIST 2 ( SSL * s , unsigned char * session_id , int len , const unsigned char * limit , SSL_SESSION * * ret ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * session_id TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 session_id LEAF_NODE 5 session_id LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 , PARAMETER_DECL 3 const unsigned char * limit TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 limit LEAF_NODE 5 limit LEAF_NODE 3 , PARAMETER_DECL 3 SSL_SESSION * * ret TYPE 4 SSL_SESSION * * TYPE_NAME 5 SSL_SESSION LEAF_NODE 6 SSL_SESSION POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 ret LEAF_NODE 5 ret LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 const unsigned char * p ; p = session_id + len ; VAR_DECL 4 const unsigned char * p ; p = session_id + len TYPE 5 const unsigned char * TYPE_NAME 6 const unsigned char LEAF_NODE 7 const LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 5 ; INIT 5 p = session_id + len ASSIGN 6 p = session_id + len LVAL 7 p NAME 8 p LEAF_NODE 9 p ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 session_id + len FIELD 8 session_id LEAF_NODE 9 session_id LEAF_NODE 8 + FIELD 8 len LEAF_NODE 9 len LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned short i ; VAR_DECL 4 unsigned short i TYPE 5 unsigned short TYPE_NAME 6 unsigned short LEAF_NODE 7 unsigned LEAF_NODE 7 short NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; EXPR_STATEMENT 3 * ret = NULL ; EXPR 4 * ret = NULL ASSIGN 5 * ret = NULL LVAL 6 * ret UNARY_EXPR 7 * ret UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 ret LEAF_NODE 9 ret ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> tlsext_ticket_expected = 0 ; EXPR 4 s -> tlsext_ticket_expected = 0 ASSIGN 5 s -> tlsext_ticket_expected = 0 LVAL 6 s -> tlsext_ticket_expected FIELD 7 s -> tlsext_ticket_expected LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 tlsext_ticket_expected ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 SSL_get_options ( s ) & SSL_OP_NO_TICKET EXPR 5 SSL_get_options ( s ) & SSL_OP_NO_TICKET FUNCTION_CALL 6 SSL_get_options ( s ) CALLEE 7 SSL_get_options LEAF_NODE 8 SSL_get_options LEAF_NODE 7 ( ARGUMENT 7 s FIELD 8 s LEAF_NODE 9 s LEAF_NODE 7 ) LEAF_NODE 6 & FIELD 6 SSL_OP_NO_TICKET LEAF_NODE 7 SSL_OP_NO_TICKET LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( s -> version <= SSL3_VERSION ) || ! limit EXPR 5 ( s -> version <= SSL3_VERSION ) || ! limit OR 6 ( s -> version <= SSL3_VERSION ) || ! limit EXPR 7 ( s -> version <= SSL3_VERSION ) LEAF_NODE 8 ( FIELD 8 s -> version LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 version REL_OPERATOR 8 <= LEAF_NODE 9 <= FIELD 8 SSL3_VERSION LEAF_NODE 9 SSL3_VERSION LEAF_NODE 8 ) LEAF_NODE 7 || EXPR 7 ! limit UNARY_EXPR 8 ! limit UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 limit LEAF_NODE 10 limit LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 p >= limit EXPR 5 p >= limit FIELD 6 p LEAF_NODE 7 p REL_OPERATOR 6 >= LEAF_NODE 7 >= FIELD 6 limit LEAF_NODE 7 limit LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return - 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 - 1 EXPR 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 SSL_IS_DTLS ( s ) EXPR 5 SSL_IS_DTLS ( s ) FUNCTION_CALL 6 SSL_IS_DTLS ( s ) CALLEE 7 SSL_IS_DTLS LEAF_NODE 8 SSL_IS_DTLS LEAF_NODE 7 ( ARGUMENT 7 s FIELD 8 s LEAF_NODE 9 s LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 i = * ( p ++ ) ; EXPR 7 i = * ( p ++ ) ASSIGN 8 i = * ( p ++ ) LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 * ( p ++ ) UNARY_EXPR 10 * ( p ++ ) UNARY_OPERATOR 11 * LEAF_NODE 12 * LEAF_NODE 11 ( FIELD 11 p ++ LEAF_NODE 12 p LEAF_NODE 12 ++ LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 p += i ; EXPR 7 p += i ASSIGN 8 p += i LVAL 9 p FIELD 10 p LEAF_NODE 11 p ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 p >= limit EXPR 8 p >= limit FIELD 9 p LEAF_NODE 10 p REL_OPERATOR 9 >= LEAF_NODE 10 >= FIELD 9 limit LEAF_NODE 10 limit LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return - 1 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 - 1 EXPR 10 - 1 UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; LEAF_NODE 5 } EXPR_STATEMENT 3 n2s ( p , i ) ; EXPR 4 n2s ( p , i ) FUNCTION_CALL 5 n2s ( p , i ) CALLEE 6 n2s LEAF_NODE 7 n2s LEAF_NODE 6 ( ARGUMENT 6 p FIELD 7 p LEAF_NODE 8 p LEAF_NODE 6 , ARGUMENT 6 i FIELD 7 i LEAF_NODE 8 i LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 p += i ; EXPR 4 p += i ASSIGN 5 p += i LVAL 6 p FIELD 7 p LEAF_NODE 8 p ASSIGN_OP 6 += LEAF_NODE 7 += RVAL 6 i FIELD 7 i LEAF_NODE 8 i LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 p >= limit EXPR 5 p >= limit FIELD 6 p LEAF_NODE 7 p REL_OPERATOR 6 >= LEAF_NODE 7 >= FIELD 6 limit LEAF_NODE 7 limit LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return - 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 - 1 EXPR 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 6 ; EXPR_STATEMENT 3 i = * ( p ++ ) ; EXPR 4 i = * ( p ++ ) ASSIGN 5 i = * ( p ++ ) LVAL 6 i FIELD 7 i LEAF_NODE 8 i ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 * ( p ++ ) UNARY_EXPR 7 * ( p ++ ) UNARY_OPERATOR 8 * LEAF_NODE 9 * LEAF_NODE 8 ( FIELD 8 p ++ LEAF_NODE 9 p LEAF_NODE 9 ++ LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 p += i ; EXPR 4 p += i ASSIGN 5 p += i LVAL 6 p FIELD 7 p LEAF_NODE 8 p ASSIGN_OP 6 += LEAF_NODE 7 += RVAL 6 i FIELD 7 i LEAF_NODE 8 i LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 p > limit EXPR 5 p > limit FIELD 6 p LEAF_NODE 7 p REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 limit LEAF_NODE 7 limit LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return - 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 - 1 EXPR 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( p + 2 ) >= limit EXPR 5 ( p + 2 ) >= limit LEAF_NODE 6 ( FIELD 6 p LEAF_NODE 7 p LEAF_NODE 6 + FIELD 6 2 LEAF_NODE 7 2 LEAF_NODE 6 ) REL_OPERATOR 6 >= LEAF_NODE 7 >= FIELD 6 limit LEAF_NODE 7 limit LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; EXPR_STATEMENT 3 n2s ( p , i ) ; EXPR 4 n2s ( p , i ) FUNCTION_CALL 5 n2s ( p , i ) CALLEE 6 n2s LEAF_NODE 7 n2s LEAF_NODE 6 ( ARGUMENT 6 p FIELD 7 p LEAF_NODE 8 p LEAF_NODE 6 , ARGUMENT 6 i FIELD 7 i LEAF_NODE 8 i LEAF_NODE 6 ) LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 ( p + 4 ) <= limit EXPR 5 ( p + 4 ) <= limit LEAF_NODE 6 ( FIELD 6 p LEAF_NODE 7 p LEAF_NODE 6 + FIELD 6 4 LEAF_NODE 7 4 LEAF_NODE 6 ) REL_OPERATOR 6 <= LEAF_NODE 7 <= FIELD 6 limit LEAF_NODE 7 limit LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 unsigned short type , unsigned short size ; INIT_DECL_LIST 7 unsigned short type , unsigned short size VAR_DECL 8 unsigned short type TYPE 9 unsigned short TYPE_NAME 10 unsigned short LEAF_NODE 11 unsigned LEAF_NODE 11 short NAME 9 type LEAF_NODE 10 type LEAF_NODE 8 , VAR_DECL 8 unsigned short size TYPE 9 unsigned short TYPE_NAME 10 unsigned short LEAF_NODE 11 unsigned LEAF_NODE 11 short NAME 9 size LEAF_NODE 10 size LEAF_NODE 7 ; EXPR_STATEMENT 6 n2s ( p , type ) ; EXPR 7 n2s ( p , type ) FUNCTION_CALL 8 n2s ( p , type ) CALLEE 9 n2s LEAF_NODE 10 n2s LEAF_NODE 9 ( ARGUMENT 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 , ARGUMENT 9 type FIELD 10 type LEAF_NODE 11 type LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 n2s ( p , size ) ; EXPR 7 n2s ( p , size ) FUNCTION_CALL 8 n2s ( p , size ) CALLEE 9 n2s LEAF_NODE 10 n2s LEAF_NODE 9 ( ARGUMENT 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 , ARGUMENT 9 size FIELD 10 size LEAF_NODE 11 size LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 p + size > limit EXPR 8 p + size > limit FIELD 9 p LEAF_NODE 10 p LEAF_NODE 9 + FIELD 9 size LEAF_NODE 10 size REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 limit LEAF_NODE 10 limit LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return 0 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 0 EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 type == TLSEXT_TYPE_session_ticket EXPR 8 type == TLSEXT_TYPE_session_ticket FIELD 9 type LEAF_NODE 10 type EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 TLSEXT_TYPE_session_ticket LEAF_NODE 10 TLSEXT_TYPE_session_ticket LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SIMPLE_DECL 9 int r ; VAR_DECL 10 int r TYPE 11 int TYPE_NAME 12 int LEAF_NODE 13 int NAME 11 r LEAF_NODE 12 r LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 size == 0 EXPR 11 size == 0 FIELD 12 size LEAF_NODE 13 size EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 s -> tlsext_ticket_expected = 1 ; EXPR 13 s -> tlsext_ticket_expected = 1 ASSIGN 14 s -> tlsext_ticket_expected = 1 LVAL 15 s -> tlsext_ticket_expected FIELD 16 s -> tlsext_ticket_expected LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 tlsext_ticket_expected ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 1 FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 13 ; JUMP_STATEMENT 12 return 1 ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 1 EXPR 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 s -> tls_session_secret_cb EXPR 11 s -> tls_session_secret_cb FIELD 12 s -> tls_session_secret_cb LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 tls_session_secret_cb LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 JUMP_STATEMENT 12 return 2 ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 2 EXPR 14 2 FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 r = tls_decrypt_ticket ( s , p , size , session_id , len , ret ) ; EXPR 10 r = tls_decrypt_ticket ( s , p , size , session_id , len , ret ) ASSIGN 11 r = tls_decrypt_ticket ( s , p , size , session_id , len , ret ) LVAL 12 r FIELD 13 r LEAF_NODE 14 r ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 tls_decrypt_ticket ( s , p , size , session_id , len , ret ) FUNCTION_CALL 13 tls_decrypt_ticket ( s , p , size , session_id , len , ret ) CALLEE 14 tls_decrypt_ticket LEAF_NODE 15 tls_decrypt_ticket LEAF_NODE 14 ( ARGUMENT 14 s FIELD 15 s LEAF_NODE 16 s LEAF_NODE 14 , ARGUMENT 14 p FIELD 15 p LEAF_NODE 16 p LEAF_NODE 14 , ARGUMENT 14 size FIELD 15 size LEAF_NODE 16 size LEAF_NODE 14 , ARGUMENT 14 session_id FIELD 15 session_id LEAF_NODE 16 session_id LEAF_NODE 14 , ARGUMENT 14 len FIELD 15 len LEAF_NODE 16 len LEAF_NODE 14 , ARGUMENT 14 ret FIELD 15 ret LEAF_NODE 16 ret LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 switch LEAF_NODE 11 switch LEAF_NODE 10 ( CONDITION 10 r EXPR 11 r FIELD 12 r LEAF_NODE 13 r LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 LABEL 12 case 2 : LEAF_NODE 13 case LEAF_NODE 13 2 LEAF_NODE 13 : EXPR_STATEMENT 12 s -> tlsext_ticket_expected = 1 ; EXPR 13 s -> tlsext_ticket_expected = 1 ASSIGN 14 s -> tlsext_ticket_expected = 1 LVAL 15 s -> tlsext_ticket_expected FIELD 16 s -> tlsext_ticket_expected LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 tlsext_ticket_expected ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 1 FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 13 ; JUMP_STATEMENT 12 return 2 ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 2 EXPR 14 2 FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 13 ; LABEL 12 case 3 : LEAF_NODE 13 case LEAF_NODE 13 3 LEAF_NODE 13 : JUMP_STATEMENT 12 return r ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 r EXPR 14 r FIELD 15 r LEAF_NODE 16 r LEAF_NODE 13 ; LABEL 12 case 4 : LEAF_NODE 13 case LEAF_NODE 13 4 LEAF_NODE 13 : EXPR_STATEMENT 12 s -> tlsext_ticket_expected = 1 ; EXPR 13 s -> tlsext_ticket_expected = 1 ASSIGN 14 s -> tlsext_ticket_expected = 1 LVAL 15 s -> tlsext_ticket_expected FIELD 16 s -> tlsext_ticket_expected LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 tlsext_ticket_expected ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 1 FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 13 ; JUMP_STATEMENT 12 return 3 ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 3 EXPR 14 3 FIELD 15 3 LEAF_NODE 16 3 LEAF_NODE 13 ; LABEL 12 default : LEAF_NODE 13 default LEAF_NODE 13 : JUMP_STATEMENT 12 return - 1 ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 - 1 EXPR 14 - 1 UNARY_EXPR 15 - 1 UNARY_OPERATOR 16 - LEAF_NODE 17 - FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } EXPR_STATEMENT 6 p += size ; EXPR 7 p += size ASSIGN 8 p += size LVAL 9 p FIELD 10 p LEAF_NODE 11 p ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 size FIELD 10 size LEAF_NODE 11 size LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 38, "project": "openssl_ast_vul_function_test_16", "target": 1}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; SIMPLE_DECL 1 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } ; CLASS_DEF 2 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } CLASS_DEF 3 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } LEAF_NODE 4 struct CLASS_NAME 4 testdata LEAF_NODE 5 testdata LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; SIMPLE_DECL 5 char * data ; VAR_DECL 6 char * data TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 int type ; VAR_DECL 6 int type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 type LEAF_NODE 8 type LEAF_NODE 6 ; SIMPLE_DECL 5 int expected_type ; VAR_DECL 6 int expected_type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 expected_type LEAF_NODE 8 expected_type LEAF_NODE 6 ; SIMPLE_DECL 5 int check_result ; VAR_DECL 6 int check_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 check_result LEAF_NODE 8 check_result LEAF_NODE 6 ; SIMPLE_DECL 5 time_t t ; VAR_DECL 6 time_t t TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 t LEAF_NODE 8 t LEAF_NODE 6 ; SIMPLE_DECL 5 int cmp_result ; VAR_DECL 6 int cmp_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 cmp_result LEAF_NODE 8 cmp_result LEAF_NODE 6 ; SIMPLE_DECL 5 int convert_result ; VAR_DECL 6 int convert_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 convert_result LEAF_NODE 8 convert_result LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } ; CLASS_DEF 2 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } CLASS_DEF 3 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } LEAF_NODE 4 struct CLASS_NAME 4 compare_testdata LEAF_NODE 5 compare_testdata LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; SIMPLE_DECL 5 ASN1_TIME t1 ; VAR_DECL 6 ASN1_TIME t1 TYPE 7 ASN1_TIME TYPE_NAME 8 ASN1_TIME LEAF_NODE 9 ASN1_TIME NAME 7 t1 LEAF_NODE 8 t1 LEAF_NODE 6 ; SIMPLE_DECL 5 ASN1_TIME t2 ; VAR_DECL 6 ASN1_TIME t2 TYPE 7 ASN1_TIME TYPE_NAME 8 ASN1_TIME LEAF_NODE 9 ASN1_TIME NAME 7 t2 LEAF_NODE 8 t2 LEAF_NODE 6 ; SIMPLE_DECL 5 int result ; VAR_DECL 6 int result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 result LEAF_NODE 8 result LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TODAY_GEN_STR ; TODAY_GEN_STR = \"20170825000000Z\" ; VAR_DECL 2 unsigned char [ ] TODAY_GEN_STR ; TODAY_GEN_STR = \"20170825000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TODAY_GEN_STR LEAF_NODE 4 TODAY_GEN_STR LEAF_NODE 3 ; INIT 3 TODAY_GEN_STR = \"20170825000000Z\" ASSIGN 4 TODAY_GEN_STR = \"20170825000000Z\" LVAL 5 TODAY_GEN_STR NAME 6 TODAY_GEN_STR LEAF_NODE 7 TODAY_GEN_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"20170825000000Z\" FIELD 6 \"20170825000000Z\" LEAF_NODE 7 \"20170825000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TOMORROW_GEN_STR ; TOMORROW_GEN_STR = \"20170826000000Z\" ; VAR_DECL 2 unsigned char [ ] TOMORROW_GEN_STR ; TOMORROW_GEN_STR = \"20170826000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TOMORROW_GEN_STR LEAF_NODE 4 TOMORROW_GEN_STR LEAF_NODE 3 ; INIT 3 TOMORROW_GEN_STR = \"20170826000000Z\" ASSIGN 4 TOMORROW_GEN_STR = \"20170826000000Z\" LVAL 5 TOMORROW_GEN_STR NAME 6 TOMORROW_GEN_STR LEAF_NODE 7 TOMORROW_GEN_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"20170826000000Z\" FIELD 6 \"20170826000000Z\" LEAF_NODE 7 \"20170826000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TODAY_UTC_STR ; TODAY_UTC_STR = \"170825000000Z\" ; VAR_DECL 2 unsigned char [ ] TODAY_UTC_STR ; TODAY_UTC_STR = \"170825000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TODAY_UTC_STR LEAF_NODE 4 TODAY_UTC_STR LEAF_NODE 3 ; INIT 3 TODAY_UTC_STR = \"170825000000Z\" ASSIGN 4 TODAY_UTC_STR = \"170825000000Z\" LVAL 5 TODAY_UTC_STR NAME 6 TODAY_UTC_STR LEAF_NODE 7 TODAY_UTC_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"170825000000Z\" FIELD 6 \"170825000000Z\" LEAF_NODE 7 \"170825000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TOMORROW_UTC_STR ; TOMORROW_UTC_STR = \"170826000000Z\" ; VAR_DECL 2 unsigned char [ ] TOMORROW_UTC_STR ; TOMORROW_UTC_STR = \"170826000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TOMORROW_UTC_STR LEAF_NODE 4 TOMORROW_UTC_STR LEAF_NODE 3 ; INIT 3 TOMORROW_UTC_STR = \"170826000000Z\" ASSIGN 4 TOMORROW_UTC_STR = \"170826000000Z\" LVAL 5 TOMORROW_UTC_STR NAME 6 TOMORROW_UTC_STR LEAF_NODE 7 TOMORROW_UTC_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"170826000000Z\" FIELD 6 \"170826000000Z\" LEAF_NODE 7 \"170826000000Z\" LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_pos LEAF_NODE 3 test_table_pos PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_pos , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_pos , idx ) EXPR 5 test_table ( tbl_testdata_pos , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_pos , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_pos FIELD 8 tbl_testdata_pos LEAF_NODE 9 tbl_testdata_pos LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_neg LEAF_NODE 3 test_table_neg PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_neg , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_neg , idx ) EXPR 5 test_table ( tbl_testdata_neg , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_neg , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_neg FIELD 8 tbl_testdata_neg LEAF_NODE 9 tbl_testdata_neg LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_pos_64bit LEAF_NODE 3 test_table_pos_64bit PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_pos_64bit , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_pos_64bit , idx ) EXPR 5 test_table ( tbl_testdata_pos_64bit , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_pos_64bit , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_pos_64bit FIELD 8 tbl_testdata_pos_64bit LEAF_NODE 9 tbl_testdata_pos_64bit LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_neg_64bit LEAF_NODE 3 test_table_neg_64bit PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_neg_64bit , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_neg_64bit , idx ) EXPR 5 test_table ( tbl_testdata_neg_64bit , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_neg_64bit , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_neg_64bit FIELD 8 tbl_testdata_neg_64bit LEAF_NODE 9 tbl_testdata_neg_64bit LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_compare LEAF_NODE 3 test_table_compare PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct compare_testdata * td ; td = & tbl_compare_testdata [ idx ] ; VAR_DECL 4 struct compare_testdata * td ; td = & tbl_compare_testdata [ idx ] TYPE 5 struct compare_testdata * TYPE_NAME 6 struct compare_testdata LEAF_NODE 7 struct LEAF_NODE 7 compare_testdata POINTER 6 * LEAF_NODE 7 * NAME 5 td LEAF_NODE 6 td LEAF_NODE 5 ; INIT 5 td = & tbl_compare_testdata [ idx ] ASSIGN 6 td = & tbl_compare_testdata [ idx ] LVAL 7 td NAME 8 td LEAF_NODE 9 td ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & tbl_compare_testdata [ idx ] UNARY_EXPR 8 & tbl_compare_testdata [ idx ] UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 tbl_compare_testdata [ idx ] LEAF_NODE 10 tbl_compare_testdata LEAF_NODE 10 [ EXPR 10 idx FIELD 11 idx LEAF_NODE 12 idx LEAF_NODE 10 ] LEAF_NODE 4 ; JUMP_STATEMENT 3 return TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) EXPR 5 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) FUNCTION_CALL 6 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) CALLEE 7 TEST_int_eq LEAF_NODE 8 TEST_int_eq LEAF_NODE 7 ( ARGUMENT 7 ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) FUNCTION_CALL 8 ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) CALLEE 9 ASN1_TIME_compare LEAF_NODE 10 ASN1_TIME_compare LEAF_NODE 9 ( ARGUMENT 9 & td -> t1 UNARY_EXPR 10 & td -> t1 UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 td -> t1 LEAF_NODE 12 td LEAF_NODE 12 -> LEAF_NODE 12 t1 LEAF_NODE 9 , ARGUMENT 9 & td -> t2 UNARY_EXPR 10 & td -> t2 UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 td -> t2 LEAF_NODE 12 td LEAF_NODE 12 -> LEAF_NODE 12 t2 LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 td -> result FIELD 8 td -> result LEAF_NODE 9 td LEAF_NODE 9 -> LEAF_NODE 9 result LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } SIMPLE_DECL 1 DWORD CRYPTO_THREAD_LOCAL ; VAR_DECL 2 DWORD CRYPTO_THREAD_LOCAL TYPE 3 DWORD TYPE_NAME 4 DWORD LEAF_NODE 5 DWORD NAME 3 CRYPTO_THREAD_LOCAL LEAF_NODE 4 CRYPTO_THREAD_LOCAL LEAF_NODE 2 ; SIMPLE_DECL 1 CRYPTO_THREAD_LOCAL ctxkey ; VAR_DECL 2 CRYPTO_THREAD_LOCAL ctxkey TYPE 3 CRYPTO_THREAD_LOCAL TYPE_NAME 4 CRYPTO_THREAD_LOCAL LEAF_NODE 5 CRYPTO_THREAD_LOCAL NAME 3 ctxkey LEAF_NODE 4 ctxkey LEAF_NODE 2 ; SIMPLE_DECL 1 CRYPTO_THREAD_LOCAL poolkey ; VAR_DECL 2 CRYPTO_THREAD_LOCAL poolkey TYPE 3 CRYPTO_THREAD_LOCAL TYPE_NAME 4 CRYPTO_THREAD_LOCAL LEAF_NODE 5 CRYPTO_THREAD_LOCAL NAME 3 poolkey LEAF_NODE 4 poolkey LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_pool_st BASE_CLASSES { STACK_OF ( ASYNC_JOB ) * jobs ; size_t curr_size ; size_t max_size ; } ; CLASS_DEF 2 struct async_pool_st BASE_CLASSES { STACK_OF ( ASYNC_JOB ) * jobs ; size_t curr_size ; size_t max_size ; } CLASS_DEF 3 struct async_pool_st BASE_CLASSES { STACK_OF ( ASYNC_JOB ) * jobs ; size_t curr_size ; size_t max_size ; } LEAF_NODE 4 struct CLASS_NAME 4 async_pool_st LEAF_NODE 5 async_pool_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 STACK_OF ( ASYNC_JOB ) * jobs ; size_t curr_size ; size_t max_size ; LEAF_NODE 5 STACK_OF LEAF_NODE 5 ( LEAF_NODE 5 ASYNC_JOB LEAF_NODE 5 ) LEAF_NODE 5 * LEAF_NODE 5 jobs LEAF_NODE 5 ; SIMPLE_DECL 5 size_t curr_size ; VAR_DECL 6 size_t curr_size TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 curr_size LEAF_NODE 8 curr_size LEAF_NODE 6 ; SIMPLE_DECL 5 size_t max_size ; VAR_DECL 6 size_t max_size TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 max_size LEAF_NODE 8 max_size LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_pool_st async_pool ; VAR_DECL 2 struct async_pool_st async_pool TYPE 3 struct async_pool_st TYPE_NAME 4 struct async_pool_st LEAF_NODE 5 struct LEAF_NODE 5 async_pool_st NAME 3 async_pool LEAF_NODE 4 async_pool LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 async_delete_thread_state LEAF_NODE 3 async_delete_thread_state PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 async_pool * pool ; pool = ( async_pool * ) CRYPTO_THREAD_get_local ( & poolkey ) ; VAR_DECL 4 async_pool * pool ; pool = ( async_pool * ) CRYPTO_THREAD_get_local ( & poolkey ) TYPE 5 async_pool * TYPE_NAME 6 async_pool LEAF_NODE 7 async_pool POINTER 6 * LEAF_NODE 7 * NAME 5 pool LEAF_NODE 6 pool LEAF_NODE 5 ; INIT 5 pool = ( async_pool * ) CRYPTO_THREAD_get_local ( & poolkey ) ASSIGN 6 pool = ( async_pool * ) CRYPTO_THREAD_get_local ( & poolkey ) LVAL 7 pool NAME 8 pool LEAF_NODE 9 pool ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( async_pool * ) CRYPTO_THREAD_get_local ( & poolkey ) LEAF_NODE 8 ( TYPE_NAME 8 async_pool LEAF_NODE 9 async_pool LEAF_NODE 8 * LEAF_NODE 8 ) FUNCTION_CALL 8 CRYPTO_THREAD_get_local ( & poolkey ) CALLEE 9 CRYPTO_THREAD_get_local LEAF_NODE 10 CRYPTO_THREAD_get_local LEAF_NODE 9 ( ARGUMENT 9 & poolkey UNARY_EXPR 10 & poolkey UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 poolkey LEAF_NODE 12 poolkey LEAF_NODE 9 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 pool != NULL EXPR 5 pool != NULL FIELD 6 pool LEAF_NODE 7 pool EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 async_empty_pool ( pool ) ; EXPR 7 async_empty_pool ( pool ) FUNCTION_CALL 8 async_empty_pool ( pool ) CALLEE 9 async_empty_pool LEAF_NODE 10 async_empty_pool LEAF_NODE 9 ( ARGUMENT 9 pool FIELD 10 pool LEAF_NODE 11 pool LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 sk_ASYNC_JOB_free ( pool -> jobs ) ; EXPR 7 sk_ASYNC_JOB_free ( pool -> jobs ) FUNCTION_CALL 8 sk_ASYNC_JOB_free ( pool -> jobs ) CALLEE 9 sk_ASYNC_JOB_free LEAF_NODE 10 sk_ASYNC_JOB_free LEAF_NODE 9 ( ARGUMENT 9 pool -> jobs FIELD 10 pool -> jobs LEAF_NODE 11 pool LEAF_NODE 11 -> LEAF_NODE 11 jobs LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_free ( pool ) ; EXPR 7 OPENSSL_free ( pool ) FUNCTION_CALL 8 OPENSSL_free ( pool ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 pool FIELD 10 pool LEAF_NODE 11 pool LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 CRYPTO_THREAD_set_local ( & poolkey , NULL ) ; EXPR 7 CRYPTO_THREAD_set_local ( & poolkey , NULL ) FUNCTION_CALL 8 CRYPTO_THREAD_set_local ( & poolkey , NULL ) CALLEE 9 CRYPTO_THREAD_set_local LEAF_NODE 10 CRYPTO_THREAD_set_local LEAF_NODE 9 ( ARGUMENT 9 & poolkey UNARY_EXPR 10 & poolkey UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 poolkey LEAF_NODE 12 poolkey LEAF_NODE 9 , ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 async_local_cleanup ( ) ; EXPR 4 async_local_cleanup ( ) FUNCTION_CALL 5 async_local_cleanup ( ) CALLEE 6 async_local_cleanup LEAF_NODE 7 async_local_cleanup LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 async_ctx_free ( ) ; EXPR 4 async_ctx_free ( ) FUNCTION_CALL 5 async_ctx_free ( ) CALLEE 6 async_ctx_free LEAF_NODE 7 async_ctx_free LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 39, "project": "openssl_ast_normal_function_test_92", "target": 0}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } ; CLASS_DEF 2 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } CLASS_DEF 3 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } LEAF_NODE 4 struct CLASS_NAME 4 bio_addrinfo_st LEAF_NODE 5 bio_addrinfo_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; SIMPLE_DECL 5 int bai_family ; VAR_DECL 6 int bai_family TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_family LEAF_NODE 8 bai_family LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_socktype ; VAR_DECL 6 int bai_socktype TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_socktype LEAF_NODE 8 bai_socktype LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_protocol ; VAR_DECL 6 int bai_protocol TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_protocol LEAF_NODE 8 bai_protocol LEAF_NODE 6 ; SIMPLE_DECL 5 size_t bai_addrlen ; VAR_DECL 6 size_t bai_addrlen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 bai_addrlen LEAF_NODE 8 bai_addrlen LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr * bai_addr ; VAR_DECL 6 struct sockaddr * bai_addr TYPE 7 struct sockaddr * TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr POINTER 8 * LEAF_NODE 9 * NAME 7 bai_addr LEAF_NODE 8 bai_addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct bio_addrinfo_st * bai_next ; VAR_DECL 6 struct bio_addrinfo_st * bai_next TYPE 7 struct bio_addrinfo_st * TYPE_NAME 8 struct bio_addrinfo_st LEAF_NODE 9 struct LEAF_NODE 9 bio_addrinfo_st POINTER 8 * LEAF_NODE 9 * NAME 7 bai_next LEAF_NODE 8 bai_next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BIO_ADDRINFO ; VAR_DECL 2 struct bio_addrinfo_st BIO_ADDRINFO TYPE 3 struct bio_addrinfo_st TYPE_NAME 4 struct bio_addrinfo_st LEAF_NODE 5 struct LEAF_NODE 5 bio_addrinfo_st NAME 3 BIO_ADDRINFO LEAF_NODE 4 BIO_ADDRINFO LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t socklen_t ; VAR_DECL 2 uint32_t socklen_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 socklen_t LEAF_NODE 4 socklen_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } ; CLASS_DEF 2 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } CLASS_DEF 3 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } LEAF_NODE 4 enum CLASS_NAME 4 BIO_hostserv_priorities LEAF_NODE 5 BIO_hostserv_priorities LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV LEAF_NODE 5 BIO_PARSE_PRIO_HOST LEAF_NODE 5 , LEAF_NODE 5 BIO_PARSE_PRIO_SERV LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } ; CLASS_DEF 2 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } CLASS_DEF 3 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } LEAF_NODE 4 enum CLASS_NAME 4 BIO_lookup_type LEAF_NODE 5 BIO_lookup_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER LEAF_NODE 5 BIO_LOOKUP_CLIENT LEAF_NODE 5 , LEAF_NODE 5 BIO_LOOKUP_SERVER LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 32 ] session_id ; VAR_DECL 2 unsigned char [ 32 ] session_id TYPE 3 unsigned char [ 32 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 32 ] LEAF_NODE 5 [ FIELD 5 32 LEAF_NODE 6 32 LEAF_NODE 5 ] NAME 3 session_id LEAF_NODE 4 session_id LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 48 ] master_secret ; VAR_DECL 2 unsigned char [ 48 ] master_secret TYPE 3 unsigned char [ 48 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 48 ] LEAF_NODE 5 [ FIELD 5 48 LEAF_NODE 6 48 LEAF_NODE 5 ] NAME 3 master_secret LEAF_NODE 4 master_secret LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ SSL3_RANDOM_SIZE ] client_random ; VAR_DECL 2 unsigned char [ SSL3_RANDOM_SIZE ] client_random TYPE 3 unsigned char [ SSL3_RANDOM_SIZE ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ SSL3_RANDOM_SIZE ] LEAF_NODE 5 [ FIELD 5 SSL3_RANDOM_SIZE LEAF_NODE 6 SSL3_RANDOM_SIZE LEAF_NODE 5 ] NAME 3 client_random LEAF_NODE 4 client_random LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ SSL3_RANDOM_SIZE ] server_random ; VAR_DECL 2 unsigned char [ SSL3_RANDOM_SIZE ] server_random TYPE 3 unsigned char [ SSL3_RANDOM_SIZE ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ SSL3_RANDOM_SIZE ] LEAF_NODE 5 [ FIELD 5 SSL3_RANDOM_SIZE LEAF_NODE 6 SSL3_RANDOM_SIZE LEAF_NODE 5 ] NAME 3 server_random LEAF_NODE 4 server_random LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 104 ] key_block ; VAR_DECL 2 unsigned char [ 104 ] key_block TYPE 3 unsigned char [ 104 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 104 ] LEAF_NODE 5 [ FIELD 5 104 LEAF_NODE 6 104 LEAF_NODE 5 ] NAME 3 key_block LEAF_NODE 4 key_block LEAF_NODE 2 ; SIMPLE_DECL 1 EVP_MD_CTX * handshake_md ; VAR_DECL 2 EVP_MD_CTX * handshake_md TYPE 3 EVP_MD_CTX * TYPE_NAME 4 EVP_MD_CTX LEAF_NODE 5 EVP_MD_CTX POINTER 4 * LEAF_NODE 5 * NAME 3 handshake_md LEAF_NODE 4 handshake_md LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } PACKET ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } PACKET TYPE 3 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 const unsigned char * curr ; size_t remaining ; SIMPLE_DECL 6 const unsigned char * curr ; VAR_DECL 7 const unsigned char * curr TYPE 8 const unsigned char * TYPE_NAME 9 const unsigned char LEAF_NODE 10 const LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 curr LEAF_NODE 9 curr LEAF_NODE 7 ; SIMPLE_DECL 6 size_t remaining ; VAR_DECL 7 size_t remaining TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 remaining LEAF_NODE 9 remaining LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 PACKET LEAF_NODE 4 PACKET LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 validate_ccs LEAF_NODE 3 validate_ccs PARAMETER_LIST 2 ( BIO * wbio ) LEAF_NODE 3 ( PARAMETER_DECL 3 BIO * wbio TYPE 4 BIO * TYPE_NAME 5 BIO LEAF_NODE 6 BIO POINTER 5 * LEAF_NODE 6 * NAME 4 wbio LEAF_NODE 5 wbio LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 PACKET pkt ; VAR_DECL 4 PACKET pkt TYPE 5 PACKET TYPE_NAME 6 PACKET LEAF_NODE 7 PACKET NAME 5 pkt LEAF_NODE 6 pkt LEAF_NODE 4 ; SIMPLE_DECL 3 long len ; VAR_DECL 4 long len TYPE 5 long TYPE_NAME 6 long LEAF_NODE 7 long NAME 5 len LEAF_NODE 6 len LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * data ; VAR_DECL 4 unsigned char * data TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int u ; VAR_DECL 4 unsigned int u TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 u LEAF_NODE 6 u LEAF_NODE 4 ; EXPR_STATEMENT 3 len = BIO_get_mem_data ( wbio , ( char * * ) & data ) ; EXPR 4 len = BIO_get_mem_data ( wbio , ( char * * ) & data ) ASSIGN 5 len = BIO_get_mem_data ( wbio , ( char * * ) & data ) LVAL 6 len FIELD 7 len LEAF_NODE 8 len ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 BIO_get_mem_data ( wbio , ( char * * ) & data ) FUNCTION_CALL 7 BIO_get_mem_data ( wbio , ( char * * ) & data ) CALLEE 8 BIO_get_mem_data LEAF_NODE 9 BIO_get_mem_data LEAF_NODE 8 ( ARGUMENT 8 wbio FIELD 9 wbio LEAF_NODE 10 wbio LEAF_NODE 8 , ARGUMENT 8 ( char * * ) & data LEAF_NODE 9 ( TYPE_NAME 9 char LEAF_NODE 10 char LEAF_NODE 9 * LEAF_NODE 9 * LEAF_NODE 9 ) UNARY_EXPR 9 & data UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 data LEAF_NODE 11 data LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_buf_init ( & pkt , data , len ) EXPR 5 ! PACKET_buf_init ( & pkt , data , len ) UNARY_EXPR 6 ! PACKET_buf_init ( & pkt , data , len ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 PACKET_buf_init ( & pkt , data , len ) CALLEE 8 PACKET_buf_init LEAF_NODE 9 PACKET_buf_init LEAF_NODE 8 ( ARGUMENT 8 & pkt UNARY_EXPR 9 & pkt UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 pkt LEAF_NODE 11 pkt LEAF_NODE 8 , ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 len FIELD 9 len LEAF_NODE 10 len LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_get_1 ( & pkt , & u ) || u != SSL3_RT_CHANGE_CIPHER_SPEC EXPR 5 ! PACKET_get_1 ( & pkt , & u ) || u != SSL3_RT_CHANGE_CIPHER_SPEC OR 6 ! PACKET_get_1 ( & pkt , & u ) || u != SSL3_RT_CHANGE_CIPHER_SPEC EXPR 7 ! PACKET_get_1 ( & pkt , & u ) UNARY_EXPR 8 ! PACKET_get_1 ( & pkt , & u ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 PACKET_get_1 ( & pkt , & u ) CALLEE 10 PACKET_get_1 LEAF_NODE 11 PACKET_get_1 LEAF_NODE 10 ( ARGUMENT 10 & pkt UNARY_EXPR 11 & pkt UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt LEAF_NODE 13 pkt LEAF_NODE 10 , ARGUMENT 10 & u UNARY_EXPR 11 & u UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 u LEAF_NODE 13 u LEAF_NODE 10 ) LEAF_NODE 7 || EXPR 7 u != SSL3_RT_CHANGE_CIPHER_SPEC FIELD 8 u LEAF_NODE 9 u EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 SSL3_RT_CHANGE_CIPHER_SPEC LEAF_NODE 9 SSL3_RT_CHANGE_CIPHER_SPEC LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_get_net_2 ( & pkt , & u ) || u != DTLS1_BAD_VER EXPR 5 ! PACKET_get_net_2 ( & pkt , & u ) || u != DTLS1_BAD_VER OR 6 ! PACKET_get_net_2 ( & pkt , & u ) || u != DTLS1_BAD_VER EXPR 7 ! PACKET_get_net_2 ( & pkt , & u ) UNARY_EXPR 8 ! PACKET_get_net_2 ( & pkt , & u ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 PACKET_get_net_2 ( & pkt , & u ) CALLEE 10 PACKET_get_net_2 LEAF_NODE 11 PACKET_get_net_2 LEAF_NODE 10 ( ARGUMENT 10 & pkt UNARY_EXPR 11 & pkt UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt LEAF_NODE 13 pkt LEAF_NODE 10 , ARGUMENT 10 & u UNARY_EXPR 11 & u UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 u LEAF_NODE 13 u LEAF_NODE 10 ) LEAF_NODE 7 || EXPR 7 u != DTLS1_BAD_VER FIELD 8 u LEAF_NODE 9 u EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 DTLS1_BAD_VER LEAF_NODE 9 DTLS1_BAD_VER LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_forward ( & pkt , DTLS1_RT_HEADER_LENGTH - 3 ) EXPR 5 ! PACKET_forward ( & pkt , DTLS1_RT_HEADER_LENGTH - 3 ) UNARY_EXPR 6 ! PACKET_forward ( & pkt , DTLS1_RT_HEADER_LENGTH - 3 ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 PACKET_forward ( & pkt , DTLS1_RT_HEADER_LENGTH - 3 ) CALLEE 8 PACKET_forward LEAF_NODE 9 PACKET_forward LEAF_NODE 8 ( ARGUMENT 8 & pkt UNARY_EXPR 9 & pkt UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 pkt LEAF_NODE 11 pkt LEAF_NODE 8 , ARGUMENT 8 DTLS1_RT_HEADER_LENGTH - 3 FIELD 9 DTLS1_RT_HEADER_LENGTH LEAF_NODE 10 DTLS1_RT_HEADER_LENGTH LEAF_NODE 9 - FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_get_1 ( & pkt , & u ) || u != SSL3_MT_CCS EXPR 5 ! PACKET_get_1 ( & pkt , & u ) || u != SSL3_MT_CCS OR 6 ! PACKET_get_1 ( & pkt , & u ) || u != SSL3_MT_CCS EXPR 7 ! PACKET_get_1 ( & pkt , & u ) UNARY_EXPR 8 ! PACKET_get_1 ( & pkt , & u ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 PACKET_get_1 ( & pkt , & u ) CALLEE 10 PACKET_get_1 LEAF_NODE 11 PACKET_get_1 LEAF_NODE 10 ( ARGUMENT 10 & pkt UNARY_EXPR 11 & pkt UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt LEAF_NODE 13 pkt LEAF_NODE 10 , ARGUMENT 10 & u UNARY_EXPR 11 & u UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 u LEAF_NODE 13 u LEAF_NODE 10 ) LEAF_NODE 7 || EXPR 7 u != SSL3_MT_CCS FIELD 8 u LEAF_NODE 9 u EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 SSL3_MT_CCS LEAF_NODE 9 SSL3_MT_CCS LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_get_net_2 ( & pkt , & u ) || u != 0x0002 EXPR 5 ! PACKET_get_net_2 ( & pkt , & u ) || u != 0x0002 OR 6 ! PACKET_get_net_2 ( & pkt , & u ) || u != 0x0002 EXPR 7 ! PACKET_get_net_2 ( & pkt , & u ) UNARY_EXPR 8 ! PACKET_get_net_2 ( & pkt , & u ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 PACKET_get_net_2 ( & pkt , & u ) CALLEE 10 PACKET_get_net_2 LEAF_NODE 11 PACKET_get_net_2 LEAF_NODE 10 ( ARGUMENT 10 & pkt UNARY_EXPR 11 & pkt UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt LEAF_NODE 13 pkt LEAF_NODE 10 , ARGUMENT 10 & u UNARY_EXPR 11 & u UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 u LEAF_NODE 13 u LEAF_NODE 10 ) LEAF_NODE 7 || EXPR 7 u != 0x0002 FIELD 8 u LEAF_NODE 9 u EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 0x0002 LEAF_NODE 9 0x0002 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_get_1 ( & pkt , & u ) || u != SSL3_RT_HANDSHAKE EXPR 5 ! PACKET_get_1 ( & pkt , & u ) || u != SSL3_RT_HANDSHAKE OR 6 ! PACKET_get_1 ( & pkt , & u ) || u != SSL3_RT_HANDSHAKE EXPR 7 ! PACKET_get_1 ( & pkt , & u ) UNARY_EXPR 8 ! PACKET_get_1 ( & pkt , & u ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 PACKET_get_1 ( & pkt , & u ) CALLEE 10 PACKET_get_1 LEAF_NODE 11 PACKET_get_1 LEAF_NODE 10 ( ARGUMENT 10 & pkt UNARY_EXPR 11 & pkt UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt LEAF_NODE 13 pkt LEAF_NODE 10 , ARGUMENT 10 & u UNARY_EXPR 11 & u UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 u LEAF_NODE 13 u LEAF_NODE 10 ) LEAF_NODE 7 || EXPR 7 u != SSL3_RT_HANDSHAKE FIELD 8 u LEAF_NODE 9 u EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 SSL3_RT_HANDSHAKE LEAF_NODE 9 SSL3_RT_HANDSHAKE LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_get_net_2 ( & pkt , & u ) || u != DTLS1_BAD_VER EXPR 5 ! PACKET_get_net_2 ( & pkt , & u ) || u != DTLS1_BAD_VER OR 6 ! PACKET_get_net_2 ( & pkt , & u ) || u != DTLS1_BAD_VER EXPR 7 ! PACKET_get_net_2 ( & pkt , & u ) UNARY_EXPR 8 ! PACKET_get_net_2 ( & pkt , & u ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 PACKET_get_net_2 ( & pkt , & u ) CALLEE 10 PACKET_get_net_2 LEAF_NODE 11 PACKET_get_net_2 LEAF_NODE 10 ( ARGUMENT 10 & pkt UNARY_EXPR 11 & pkt UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt LEAF_NODE 13 pkt LEAF_NODE 10 , ARGUMENT 10 & u UNARY_EXPR 11 & u UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 u LEAF_NODE 13 u LEAF_NODE 10 ) LEAF_NODE 7 || EXPR 7 u != DTLS1_BAD_VER FIELD 8 u LEAF_NODE 9 u EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 DTLS1_BAD_VER LEAF_NODE 9 DTLS1_BAD_VER LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! PACKET_get_net_2 ( & pkt , & u ) || u != 0x0001 EXPR 5 ! PACKET_get_net_2 ( & pkt , & u ) || u != 0x0001 OR 6 ! PACKET_get_net_2 ( & pkt , & u ) || u != 0x0001 EXPR 7 ! PACKET_get_net_2 ( & pkt , & u ) UNARY_EXPR 8 ! PACKET_get_net_2 ( & pkt , & u ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 PACKET_get_net_2 ( & pkt , & u ) CALLEE 10 PACKET_get_net_2 LEAF_NODE 11 PACKET_get_net_2 LEAF_NODE 10 ( ARGUMENT 10 & pkt UNARY_EXPR 11 & pkt UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 pkt LEAF_NODE 13 pkt LEAF_NODE 10 , ARGUMENT 10 & u UNARY_EXPR 11 & u UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 u LEAF_NODE 13 u LEAF_NODE 10 ) LEAF_NODE 7 || EXPR 7 u != 0x0001 FIELD 8 u LEAF_NODE 9 u EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 0x0001 LEAF_NODE 9 0x0001 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 40, "project": "openssl_ast_normal_function_test_56", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 send_fp_chars LEAF_NODE 3 send_fp_chars PARAMETER_LIST 2 ( void * arg , const void * buf , int len ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * arg TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 arg LEAF_NODE 5 arg LEAF_NODE 3 , PARAMETER_DECL 3 const void * buf TYPE 4 const void * TYPE_NAME 5 const void LEAF_NODE 6 const LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 buf LEAF_NODE 5 buf LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! arg EXPR 5 ! arg UNARY_EXPR 6 ! arg UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 arg LEAF_NODE 8 arg LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 1 EXPR 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 fwrite ( buf , 1 , len , arg ) != ( unsigned int ) len EXPR 5 fwrite ( buf , 1 , len , arg ) != ( unsigned int ) len FUNCTION_CALL 6 fwrite ( buf , 1 , len , arg ) CALLEE 7 fwrite LEAF_NODE 8 fwrite LEAF_NODE 7 ( ARGUMENT 7 buf FIELD 8 buf LEAF_NODE 9 buf LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 len FIELD 8 len LEAF_NODE 9 len LEAF_NODE 7 , ARGUMENT 7 arg FIELD 8 arg LEAF_NODE 9 arg LEAF_NODE 7 ) EQ_OPERATOR 6 != LEAF_NODE 7 != LEAF_NODE 6 ( TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int LEAF_NODE 6 ) FIELD 6 len LEAF_NODE 7 len LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 X509_NAME_print_ex_fp LEAF_NODE 3 X509_NAME_print_ex_fp PARAMETER_LIST 2 ( FILE * fp , const X509_NAME * nm , int indent , unsigned long flags ) LEAF_NODE 3 ( PARAMETER_DECL 3 FILE * fp TYPE 4 FILE * TYPE_NAME 5 FILE LEAF_NODE 6 FILE POINTER 5 * LEAF_NODE 6 * NAME 4 fp LEAF_NODE 5 fp LEAF_NODE 3 , PARAMETER_DECL 3 const X509_NAME * nm TYPE 4 const X509_NAME * TYPE_NAME 5 const X509_NAME LEAF_NODE 6 const LEAF_NODE 6 X509_NAME POINTER 5 * LEAF_NODE 6 * NAME 4 nm LEAF_NODE 5 nm LEAF_NODE 3 , PARAMETER_DECL 3 int indent TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 indent LEAF_NODE 5 indent LEAF_NODE 3 , PARAMETER_DECL 3 unsigned long flags TYPE 4 unsigned long TYPE_NAME 5 unsigned long LEAF_NODE 6 unsigned LEAF_NODE 6 long NAME 4 flags LEAF_NODE 5 flags LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 flags == XN_FLAG_COMPAT EXPR 5 flags == XN_FLAG_COMPAT FIELD 6 flags LEAF_NODE 7 flags EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 XN_FLAG_COMPAT LEAF_NODE 7 XN_FLAG_COMPAT LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 BIO * btmp ; VAR_DECL 7 BIO * btmp TYPE 8 BIO * TYPE_NAME 9 BIO LEAF_NODE 10 BIO POINTER 9 * LEAF_NODE 10 * NAME 8 btmp LEAF_NODE 9 btmp LEAF_NODE 7 ; SIMPLE_DECL 6 int ret ; VAR_DECL 7 int ret TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 ret LEAF_NODE 9 ret LEAF_NODE 7 ; EXPR_STATEMENT 6 btmp = BIO_new_fp ( fp , BIO_NOCLOSE ) ; EXPR 7 btmp = BIO_new_fp ( fp , BIO_NOCLOSE ) ASSIGN 8 btmp = BIO_new_fp ( fp , BIO_NOCLOSE ) LVAL 9 btmp FIELD 10 btmp LEAF_NODE 11 btmp ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 BIO_new_fp ( fp , BIO_NOCLOSE ) FUNCTION_CALL 10 BIO_new_fp ( fp , BIO_NOCLOSE ) CALLEE 11 BIO_new_fp LEAF_NODE 12 BIO_new_fp LEAF_NODE 11 ( ARGUMENT 11 fp FIELD 12 fp LEAF_NODE 13 fp LEAF_NODE 11 , ARGUMENT 11 BIO_NOCLOSE FIELD 12 BIO_NOCLOSE LEAF_NODE 13 BIO_NOCLOSE LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! btmp EXPR 8 ! btmp UNARY_EXPR 9 ! btmp UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FIELD 10 btmp LEAF_NODE 11 btmp LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return - 1 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 - 1 EXPR 10 - 1 UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; EXPR_STATEMENT 6 ret = X509_NAME_print ( btmp , nm , indent ) ; EXPR 7 ret = X509_NAME_print ( btmp , nm , indent ) ASSIGN 8 ret = X509_NAME_print ( btmp , nm , indent ) LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 X509_NAME_print ( btmp , nm , indent ) FUNCTION_CALL 10 X509_NAME_print ( btmp , nm , indent ) CALLEE 11 X509_NAME_print LEAF_NODE 12 X509_NAME_print LEAF_NODE 11 ( ARGUMENT 11 btmp FIELD 12 btmp LEAF_NODE 13 btmp LEAF_NODE 11 , ARGUMENT 11 nm FIELD 12 nm LEAF_NODE 13 nm LEAF_NODE 11 , ARGUMENT 11 indent FIELD 12 indent LEAF_NODE 13 indent LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 BIO_free ( btmp ) ; EXPR 7 BIO_free ( btmp ) FUNCTION_CALL 8 BIO_free ( btmp ) CALLEE 9 BIO_free LEAF_NODE 10 BIO_free LEAF_NODE 9 ( ARGUMENT 9 btmp FIELD 10 btmp LEAF_NODE 11 btmp LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return ret ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 ret EXPR 8 ret FIELD 9 ret LEAF_NODE 10 ret LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return do_name_ex ( send_fp_chars , fp , nm , indent , flags ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 do_name_ex ( send_fp_chars , fp , nm , indent , flags ) EXPR 5 do_name_ex ( send_fp_chars , fp , nm , indent , flags ) FUNCTION_CALL 6 do_name_ex ( send_fp_chars , fp , nm , indent , flags ) CALLEE 7 do_name_ex LEAF_NODE 8 do_name_ex LEAF_NODE 7 ( ARGUMENT 7 send_fp_chars FIELD 8 send_fp_chars LEAF_NODE 9 send_fp_chars LEAF_NODE 7 , ARGUMENT 7 fp FIELD 8 fp LEAF_NODE 9 fp LEAF_NODE 7 , ARGUMENT 7 nm FIELD 8 nm LEAF_NODE 9 nm LEAF_NODE 7 , ARGUMENT 7 indent FIELD 8 indent LEAF_NODE 9 indent LEAF_NODE 7 , ARGUMENT 7 flags FIELD 8 flags LEAF_NODE 9 flags LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 41, "project": "openssl_ast_normal_function_test_34", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 char * save_rand_file ; VAR_DECL 2 char * save_rand_file TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 save_rand_file LEAF_NODE 4 save_rand_file LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 app_ferror LEAF_NODE 3 app_ferror PARAMETER_LIST 2 ( FILE * fp ) LEAF_NODE 3 ( PARAMETER_DECL 3 FILE * fp TYPE 4 FILE * TYPE_NAME 5 FILE LEAF_NODE 6 FILE POINTER 5 * LEAF_NODE 6 * NAME 4 fp LEAF_NODE 5 fp LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return ferror ( fp ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ferror ( fp ) EXPR 5 ferror ( fp ) FUNCTION_CALL 6 ferror ( fp ) CALLEE 7 ferror LEAF_NODE 8 ferror LEAF_NODE 7 ( ARGUMENT 7 fp FIELD 8 fp LEAF_NODE 9 fp LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 42, "project": "openssl_ast_normal_function_test_131", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 FILE * fp ; fp = NULL ; VAR_DECL 2 FILE * fp ; fp = NULL TYPE 3 FILE * TYPE_NAME 4 FILE LEAF_NODE 5 FILE POINTER 4 * LEAF_NODE 5 * NAME 3 fp LEAF_NODE 4 fp LEAF_NODE 3 ; INIT 3 fp = NULL ASSIGN 4 fp = NULL LVAL 5 fp NAME 6 fp LEAF_NODE 7 fp ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * b ; b = NULL ; VAR_DECL 2 BIO * b ; b = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 b LEAF_NODE 4 b LEAF_NODE 3 ; INIT 3 b = NULL ASSIGN 4 b = NULL LVAL 5 b NAME 6 b LEAF_NODE 7 b ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 int fd ; fd = - 1 , int bflags , int mode , int textmode ; INIT_DECL_LIST 2 int fd ; fd = - 1 , int bflags , int mode , int textmode VAR_DECL 3 int fd ; fd = - 1 TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 fd LEAF_NODE 5 fd LEAF_NODE 4 ; INIT 4 fd = - 1 ASSIGN 5 fd = - 1 LVAL 6 fd NAME 7 fd LEAF_NODE 8 fd ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 - 1 UNARY_EXPR 7 - 1 UNARY_OPERATOR 8 - LEAF_NODE 9 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 3 , INIT_DECL_LIST 3 int bflags , int mode , int textmode VAR_DECL 4 int bflags TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 bflags LEAF_NODE 6 bflags LEAF_NODE 4 , INIT_DECL_LIST 4 int mode , int textmode VAR_DECL 5 int mode TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 mode LEAF_NODE 7 mode LEAF_NODE 5 , VAR_DECL 5 int textmode TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 textmode LEAF_NODE 7 textmode LEAF_NODE 2 ;", "idx": 43, "project": "openssl_ast_normal_function_test_128", "target": 0}
{"func": "SIMPLE_DECL 1 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } ; CLASS_DEF 2 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } CLASS_DEF 3 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } LEAF_NODE 4 struct CLASS_NAME 4 async_ctrs LEAF_NODE 5 async_ctrs LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned int rctr ; unsigned int wctr ; SIMPLE_DECL 5 unsigned int rctr ; VAR_DECL 6 unsigned int rctr TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rctr LEAF_NODE 8 rctr LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int wctr ; VAR_DECL 6 unsigned int wctr TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 wctr LEAF_NODE 8 wctr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } PACKET ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } PACKET TYPE 3 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 const unsigned char * curr ; size_t remaining ; SIMPLE_DECL 6 const unsigned char * curr ; VAR_DECL 7 const unsigned char * curr TYPE 8 const unsigned char * TYPE_NAME 9 const unsigned char LEAF_NODE 10 const LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 curr LEAF_NODE 9 curr LEAF_NODE 7 ; SIMPLE_DECL 6 size_t remaining ; VAR_DECL 7 size_t remaining TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 remaining LEAF_NODE 9 remaining LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 PACKET LEAF_NODE 4 PACKET LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 async_write LEAF_NODE 3 async_write PARAMETER_LIST 2 ( BIO * bio , const char * in , int inl ) LEAF_NODE 3 ( PARAMETER_DECL 3 BIO * bio TYPE 4 BIO * TYPE_NAME 5 BIO LEAF_NODE 6 BIO POINTER 5 * LEAF_NODE 6 * NAME 4 bio LEAF_NODE 5 bio LEAF_NODE 3 , PARAMETER_DECL 3 const char * in TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 in LEAF_NODE 5 in LEAF_NODE 3 , PARAMETER_DECL 3 int inl TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 inl LEAF_NODE 5 inl LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct async_ctrs * ctrs ; VAR_DECL 4 struct async_ctrs * ctrs TYPE 5 struct async_ctrs * TYPE_NAME 6 struct async_ctrs LEAF_NODE 7 struct LEAF_NODE 7 async_ctrs POINTER 6 * LEAF_NODE 7 * NAME 5 ctrs LEAF_NODE 6 ctrs LEAF_NODE 4 ; SIMPLE_DECL 3 int ret ; ret = 0 ; VAR_DECL 4 int ret ; ret = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 5 ; INIT 5 ret = 0 ASSIGN 6 ret = 0 LVAL 7 ret NAME 8 ret LEAF_NODE 9 ret ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 size_t written ; written = 0 ; VAR_DECL 4 size_t written ; written = 0 TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 written LEAF_NODE 6 written LEAF_NODE 5 ; INIT 5 written = 0 ASSIGN 6 written = 0 LVAL 7 written NAME 8 written LEAF_NODE 9 written ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 BIO * next ; next = BIO_next ( bio ) ; VAR_DECL 4 BIO * next ; next = BIO_next ( bio ) TYPE 5 BIO * TYPE_NAME 6 BIO LEAF_NODE 7 BIO POINTER 6 * LEAF_NODE 7 * NAME 5 next LEAF_NODE 6 next LEAF_NODE 5 ; INIT 5 next = BIO_next ( bio ) ASSIGN 6 next = BIO_next ( bio ) LVAL 7 next NAME 8 next LEAF_NODE 9 next ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 BIO_next ( bio ) FUNCTION_CALL 8 BIO_next ( bio ) CALLEE 9 BIO_next LEAF_NODE 10 BIO_next LEAF_NODE 9 ( ARGUMENT 9 bio FIELD 10 bio LEAF_NODE 11 bio LEAF_NODE 9 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 inl <= 0 EXPR 5 inl <= 0 FIELD 6 inl LEAF_NODE 7 inl REL_OPERATOR 6 <= LEAF_NODE 7 <= FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 next == NULL EXPR 5 next == NULL FIELD 6 next LEAF_NODE 7 next EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; EXPR_STATEMENT 3 ctrs = BIO_get_data ( bio ) ; EXPR 4 ctrs = BIO_get_data ( bio ) ASSIGN 5 ctrs = BIO_get_data ( bio ) LVAL 6 ctrs FIELD 7 ctrs LEAF_NODE 8 ctrs ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 BIO_get_data ( bio ) FUNCTION_CALL 7 BIO_get_data ( bio ) CALLEE 8 BIO_get_data LEAF_NODE 9 BIO_get_data LEAF_NODE 8 ( ARGUMENT 8 bio FIELD 9 bio LEAF_NODE 10 bio LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 BIO_clear_retry_flags ( bio ) ; EXPR 4 BIO_clear_retry_flags ( bio ) FUNCTION_CALL 5 BIO_clear_retry_flags ( bio ) CALLEE 6 BIO_clear_retry_flags LEAF_NODE 7 BIO_clear_retry_flags LEAF_NODE 6 ( ARGUMENT 6 bio FIELD 7 bio LEAF_NODE 8 bio LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ctrs -> wctr > 0 EXPR 5 ctrs -> wctr > 0 FIELD 6 ctrs -> wctr LEAF_NODE 7 ctrs LEAF_NODE 7 -> LEAF_NODE 7 wctr REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ctrs -> wctr = 0 ; EXPR 7 ctrs -> wctr = 0 ASSIGN 8 ctrs -> wctr = 0 LVAL 9 ctrs -> wctr FIELD 10 ctrs -> wctr LEAF_NODE 11 ctrs LEAF_NODE 11 -> LEAF_NODE 11 wctr ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 fragment EXPR 8 fragment FIELD 9 fragment LEAF_NODE 10 fragment LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SIMPLE_DECL 9 PACKET pkt ; VAR_DECL 10 PACKET pkt TYPE 11 PACKET TYPE_NAME 12 PACKET LEAF_NODE 13 PACKET NAME 11 pkt LEAF_NODE 12 pkt LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! PACKET_buf_init ( & pkt , ( const unsigned char * ) in , inl ) EXPR 11 ! PACKET_buf_init ( & pkt , ( const unsigned char * ) in , inl ) UNARY_EXPR 12 ! PACKET_buf_init ( & pkt , ( const unsigned char * ) in , inl ) UNARY_OPERATOR 13 ! LEAF_NODE 14 ! FUNCTION_CALL 13 PACKET_buf_init ( & pkt , ( const unsigned char * ) in , inl ) CALLEE 14 PACKET_buf_init LEAF_NODE 15 PACKET_buf_init LEAF_NODE 14 ( ARGUMENT 14 & pkt UNARY_EXPR 15 & pkt UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 pkt LEAF_NODE 17 pkt LEAF_NODE 14 , ARGUMENT 14 ( const unsigned char * ) in LEAF_NODE 15 ( TYPE_NAME 15 const unsigned char LEAF_NODE 16 const LEAF_NODE 16 unsigned LEAF_NODE 16 char LEAF_NODE 15 * LEAF_NODE 15 ) FIELD 15 in LEAF_NODE 16 in LEAF_NODE 14 , ARGUMENT 14 inl FIELD 15 inl LEAF_NODE 16 inl LEAF_NODE 14 ) LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 return - 1 ; KEYWORD 12 return LEAF_NODE 13 return DESTINATION 12 - 1 EXPR 13 - 1 UNARY_EXPR 14 - 1 UNARY_OPERATOR 15 - LEAF_NODE 16 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 12 ; ITERATION 9 KEYWORD 10 while LEAF_NODE 11 while LEAF_NODE 10 ( CONDITION 10 PACKET_remaining ( & pkt ) > 0 EXPR 11 PACKET_remaining ( & pkt ) > 0 FUNCTION_CALL 12 PACKET_remaining ( & pkt ) CALLEE 13 PACKET_remaining LEAF_NODE 14 PACKET_remaining LEAF_NODE 13 ( ARGUMENT 13 & pkt UNARY_EXPR 14 & pkt UNARY_OPERATOR 15 & LEAF_NODE 16 & FIELD 15 pkt LEAF_NODE 16 pkt LEAF_NODE 13 ) REL_OPERATOR 12 > LEAF_NODE 13 > FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 SIMPLE_DECL 12 PACKET payload , PACKET wholebody , PACKET sessionid , PACKET extensions ; INIT_DECL_LIST 13 PACKET payload , PACKET wholebody , PACKET sessionid , PACKET extensions VAR_DECL 14 PACKET payload TYPE 15 PACKET TYPE_NAME 16 PACKET LEAF_NODE 17 PACKET NAME 15 payload LEAF_NODE 16 payload LEAF_NODE 14 , INIT_DECL_LIST 14 PACKET wholebody , PACKET sessionid , PACKET extensions VAR_DECL 15 PACKET wholebody TYPE 16 PACKET TYPE_NAME 17 PACKET LEAF_NODE 18 PACKET NAME 16 wholebody LEAF_NODE 17 wholebody LEAF_NODE 15 , INIT_DECL_LIST 15 PACKET sessionid , PACKET extensions VAR_DECL 16 PACKET sessionid TYPE 17 PACKET TYPE_NAME 18 PACKET LEAF_NODE 19 PACKET NAME 17 sessionid LEAF_NODE 18 sessionid LEAF_NODE 16 , VAR_DECL 16 PACKET extensions TYPE 17 PACKET TYPE_NAME 18 PACKET LEAF_NODE 19 PACKET NAME 17 extensions LEAF_NODE 18 extensions LEAF_NODE 13 ; SIMPLE_DECL 12 unsigned int contenttype , unsigned int versionhi , unsigned int versionlo , unsigned int data ; INIT_DECL_LIST 13 unsigned int contenttype , unsigned int versionhi , unsigned int versionlo , unsigned int data VAR_DECL 14 unsigned int contenttype TYPE 15 unsigned int TYPE_NAME 16 unsigned int LEAF_NODE 17 unsigned LEAF_NODE 17 int NAME 15 contenttype LEAF_NODE 16 contenttype LEAF_NODE 14 , INIT_DECL_LIST 14 unsigned int versionhi , unsigned int versionlo , unsigned int data VAR_DECL 15 unsigned int versionhi TYPE 16 unsigned int TYPE_NAME 17 unsigned int LEAF_NODE 18 unsigned LEAF_NODE 18 int NAME 16 versionhi LEAF_NODE 17 versionhi LEAF_NODE 15 , INIT_DECL_LIST 15 unsigned int versionlo , unsigned int data VAR_DECL 16 unsigned int versionlo TYPE 17 unsigned int TYPE_NAME 18 unsigned int LEAF_NODE 19 unsigned LEAF_NODE 19 int NAME 17 versionlo LEAF_NODE 18 versionlo LEAF_NODE 16 , VAR_DECL 16 unsigned int data TYPE 17 unsigned int TYPE_NAME 18 unsigned int LEAF_NODE 19 unsigned LEAF_NODE 19 int NAME 17 data LEAF_NODE 18 data LEAF_NODE 13 ; SIMPLE_DECL 12 unsigned int msgtype ; msgtype = 0 , unsigned int negversion ; negversion = 0 ; INIT_DECL_LIST 13 unsigned int msgtype ; msgtype = 0 , unsigned int negversion ; negversion = 0 VAR_DECL 14 unsigned int msgtype ; msgtype = 0 TYPE 15 unsigned int TYPE_NAME 16 unsigned int LEAF_NODE 17 unsigned LEAF_NODE 17 int NAME 15 msgtype LEAF_NODE 16 msgtype LEAF_NODE 15 ; INIT 15 msgtype = 0 ASSIGN 16 msgtype = 0 LVAL 17 msgtype NAME 18 msgtype LEAF_NODE 19 msgtype ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 0 FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 14 , VAR_DECL 14 unsigned int negversion ; negversion = 0 TYPE 15 unsigned int TYPE_NAME 16 unsigned int LEAF_NODE 17 unsigned LEAF_NODE 17 int NAME 15 negversion LEAF_NODE 16 negversion LEAF_NODE 15 ; INIT 15 negversion = 0 ASSIGN 16 negversion = 0 LVAL 17 negversion NAME 18 negversion LEAF_NODE 19 negversion ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 0 FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 ! PACKET_get_1 ( & pkt , & contenttype ) || ! PACKET_get_1 ( & pkt , & versionhi ) || ! PACKET_get_1 ( & pkt , & versionlo ) || ! PACKET_get_length_prefixed_2 ( & pkt , & payload ) EXPR 14 ! PACKET_get_1 ( & pkt , & contenttype ) || ! PACKET_get_1 ( & pkt , & versionhi ) || ! PACKET_get_1 ( & pkt , & versionlo ) || ! PACKET_get_length_prefixed_2 ( & pkt , & payload ) OR 15 ! PACKET_get_1 ( & pkt , & contenttype ) || ! PACKET_get_1 ( & pkt , & versionhi ) || ! PACKET_get_1 ( & pkt , & versionlo ) || ! PACKET_get_length_prefixed_2 ( & pkt , & payload ) EXPR 16 ! PACKET_get_1 ( & pkt , & contenttype ) UNARY_EXPR 17 ! PACKET_get_1 ( & pkt , & contenttype ) UNARY_OPERATOR 18 ! LEAF_NODE 19 ! FUNCTION_CALL 18 PACKET_get_1 ( & pkt , & contenttype ) CALLEE 19 PACKET_get_1 LEAF_NODE 20 PACKET_get_1 LEAF_NODE 19 ( ARGUMENT 19 & pkt UNARY_EXPR 20 & pkt UNARY_OPERATOR 21 & LEAF_NODE 22 & FIELD 21 pkt LEAF_NODE 22 pkt LEAF_NODE 19 , ARGUMENT 19 & contenttype UNARY_EXPR 20 & contenttype UNARY_OPERATOR 21 & LEAF_NODE 22 & FIELD 21 contenttype LEAF_NODE 22 contenttype LEAF_NODE 19 ) LEAF_NODE 16 || EXPR 16 ! PACKET_get_1 ( & pkt , & versionhi ) || ! PACKET_get_1 ( & pkt , & versionlo ) || ! PACKET_get_length_prefixed_2 ( & pkt , & payload ) OR 17 ! PACKET_get_1 ( & pkt , & versionhi ) || ! PACKET_get_1 ( & pkt , & versionlo ) || ! PACKET_get_length_prefixed_2 ( & pkt , & payload ) EXPR 18 ! PACKET_get_1 ( & pkt , & versionhi ) UNARY_EXPR 19 ! PACKET_get_1 ( & pkt , & versionhi ) UNARY_OPERATOR 20 ! LEAF_NODE 21 ! FUNCTION_CALL 20 PACKET_get_1 ( & pkt , & versionhi ) CALLEE 21 PACKET_get_1 LEAF_NODE 22 PACKET_get_1 LEAF_NODE 21 ( ARGUMENT 21 & pkt UNARY_EXPR 22 & pkt UNARY_OPERATOR 23 & LEAF_NODE 24 & FIELD 23 pkt LEAF_NODE 24 pkt LEAF_NODE 21 , ARGUMENT 21 & versionhi UNARY_EXPR 22 & versionhi UNARY_OPERATOR 23 & LEAF_NODE 24 & FIELD 23 versionhi LEAF_NODE 24 versionhi LEAF_NODE 21 ) LEAF_NODE 18 || EXPR 18 ! PACKET_get_1 ( & pkt , & versionlo ) || ! PACKET_get_length_prefixed_2 ( & pkt , & payload ) OR 19 ! PACKET_get_1 ( & pkt , & versionlo ) || ! PACKET_get_length_prefixed_2 ( & pkt , & payload ) EXPR 20 ! PACKET_get_1 ( & pkt , & versionlo ) UNARY_EXPR 21 ! PACKET_get_1 ( & pkt , & versionlo ) UNARY_OPERATOR 22 ! LEAF_NODE 23 ! FUNCTION_CALL 22 PACKET_get_1 ( & pkt , & versionlo ) CALLEE 23 PACKET_get_1 LEAF_NODE 24 PACKET_get_1 LEAF_NODE 23 ( ARGUMENT 23 & pkt UNARY_EXPR 24 & pkt UNARY_OPERATOR 25 & LEAF_NODE 26 & FIELD 25 pkt LEAF_NODE 26 pkt LEAF_NODE 23 , ARGUMENT 23 & versionlo UNARY_EXPR 24 & versionlo UNARY_OPERATOR 25 & LEAF_NODE 26 & FIELD 25 versionlo LEAF_NODE 26 versionlo LEAF_NODE 23 ) LEAF_NODE 20 || EXPR 20 ! PACKET_get_length_prefixed_2 ( & pkt , & payload ) UNARY_EXPR 21 ! PACKET_get_length_prefixed_2 ( & pkt , & payload ) UNARY_OPERATOR 22 ! LEAF_NODE 23 ! FUNCTION_CALL 22 PACKET_get_length_prefixed_2 ( & pkt , & payload ) CALLEE 23 PACKET_get_length_prefixed_2 LEAF_NODE 24 PACKET_get_length_prefixed_2 LEAF_NODE 23 ( ARGUMENT 23 & pkt UNARY_EXPR 24 & pkt UNARY_OPERATOR 25 & LEAF_NODE 26 & FIELD 25 pkt LEAF_NODE 26 pkt LEAF_NODE 23 , ARGUMENT 23 & payload UNARY_EXPR 24 & payload UNARY_OPERATOR 25 & LEAF_NODE 26 & FIELD 25 payload LEAF_NODE 26 payload LEAF_NODE 23 ) LEAF_NODE 13 ) STATEMENTS 13 JUMP_STATEMENT 14 return - 1 ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 - 1 EXPR 16 - 1 UNARY_EXPR 17 - 1 UNARY_OPERATOR 18 - LEAF_NODE 19 - FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 15 ; EXPR_STATEMENT 12 written += SSL3_RT_HEADER_LENGTH ; EXPR 13 written += SSL3_RT_HEADER_LENGTH ASSIGN 14 written += SSL3_RT_HEADER_LENGTH LVAL 15 written FIELD 16 written LEAF_NODE 17 written ASSIGN_OP 15 += LEAF_NODE 16 += RVAL 15 SSL3_RT_HEADER_LENGTH FIELD 16 SSL3_RT_HEADER_LENGTH LEAF_NODE 17 SSL3_RT_HEADER_LENGTH LEAF_NODE 13 ; EXPR_STATEMENT 12 wholebody = payload ; EXPR 13 wholebody = payload ASSIGN 14 wholebody = payload LVAL 15 wholebody FIELD 16 wholebody LEAF_NODE 17 wholebody ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 payload FIELD 16 payload LEAF_NODE 17 payload LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 contenttype == SSL3_RT_HANDSHAKE && ! PACKET_get_1 ( & wholebody , & msgtype ) EXPR 14 contenttype == SSL3_RT_HANDSHAKE && ! PACKET_get_1 ( & wholebody , & msgtype ) AND 15 contenttype == SSL3_RT_HANDSHAKE && ! PACKET_get_1 ( & wholebody , & msgtype ) EXPR 16 contenttype == SSL3_RT_HANDSHAKE FIELD 17 contenttype LEAF_NODE 18 contenttype EQ_OPERATOR 17 == LEAF_NODE 18 == FIELD 17 SSL3_RT_HANDSHAKE LEAF_NODE 18 SSL3_RT_HANDSHAKE LEAF_NODE 16 && EXPR 16 ! PACKET_get_1 ( & wholebody , & msgtype ) UNARY_EXPR 17 ! PACKET_get_1 ( & wholebody , & msgtype ) UNARY_OPERATOR 18 ! LEAF_NODE 19 ! FUNCTION_CALL 18 PACKET_get_1 ( & wholebody , & msgtype ) CALLEE 19 PACKET_get_1 LEAF_NODE 20 PACKET_get_1 LEAF_NODE 19 ( ARGUMENT 19 & wholebody UNARY_EXPR 20 & wholebody UNARY_OPERATOR 21 & LEAF_NODE 22 & FIELD 21 wholebody LEAF_NODE 22 wholebody LEAF_NODE 19 , ARGUMENT 19 & msgtype UNARY_EXPR 20 & msgtype UNARY_OPERATOR 21 & LEAF_NODE 22 & FIELD 21 msgtype LEAF_NODE 22 msgtype LEAF_NODE 19 ) LEAF_NODE 13 ) STATEMENTS 13 JUMP_STATEMENT 14 return - 1 ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 - 1 EXPR 16 - 1 UNARY_EXPR 17 - 1 UNARY_OPERATOR 18 - LEAF_NODE 19 - FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 15 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 msgtype == SSL3_MT_SERVER_HELLO EXPR 14 msgtype == SSL3_MT_SERVER_HELLO FIELD 15 msgtype LEAF_NODE 16 msgtype EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 SSL3_MT_SERVER_HELLO LEAF_NODE 16 SSL3_MT_SERVER_HELLO LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 SELECTION 15 KEYWORD 16 if LEAF_NODE 17 if LEAF_NODE 16 ( CONDITION 16 ! PACKET_forward ( & wholebody , SSL3_HM_HEADER_LENGTH - 1 ) || ! PACKET_get_net_2 ( & wholebody , & negversion ) || ! PACKET_forward ( & wholebody , 32 ) || ! PACKET_get_length_prefixed_1 ( & wholebody , & sessionid ) || ! PACKET_forward ( & wholebody , 2 + 1 ) || ! PACKET_get_length_prefixed_2 ( & wholebody , & extensions ) EXPR 17 ! PACKET_forward ( & wholebody , SSL3_HM_HEADER_LENGTH - 1 ) || ! PACKET_get_net_2 ( & wholebody , & negversion ) || ! PACKET_forward ( & wholebody , 32 ) || ! PACKET_get_length_prefixed_1 ( & wholebody , & sessionid ) || ! PACKET_forward ( & wholebody , 2 + 1 ) || ! PACKET_get_length_prefixed_2 ( & wholebody , & extensions ) OR 18 ! PACKET_forward ( & wholebody , SSL3_HM_HEADER_LENGTH - 1 ) || ! PACKET_get_net_2 ( & wholebody , & negversion ) || ! PACKET_forward ( & wholebody , 32 ) || ! PACKET_get_length_prefixed_1 ( & wholebody , & sessionid ) || ! PACKET_forward ( & wholebody , 2 + 1 ) || ! PACKET_get_length_prefixed_2 ( & wholebody , & extensions ) EXPR 19 ! PACKET_forward ( & wholebody , SSL3_HM_HEADER_LENGTH - 1 ) UNARY_EXPR 20 ! PACKET_forward ( & wholebody , SSL3_HM_HEADER_LENGTH - 1 ) UNARY_OPERATOR 21 ! LEAF_NODE 22 ! FUNCTION_CALL 21 PACKET_forward ( & wholebody , SSL3_HM_HEADER_LENGTH - 1 ) CALLEE 22 PACKET_forward LEAF_NODE 23 PACKET_forward LEAF_NODE 22 ( ARGUMENT 22 & wholebody UNARY_EXPR 23 & wholebody UNARY_OPERATOR 24 & LEAF_NODE 25 & FIELD 24 wholebody LEAF_NODE 25 wholebody LEAF_NODE 22 , ARGUMENT 22 SSL3_HM_HEADER_LENGTH - 1 FIELD 23 SSL3_HM_HEADER_LENGTH LEAF_NODE 24 SSL3_HM_HEADER_LENGTH LEAF_NODE 23 - FIELD 23 1 LEAF_NODE 24 1 LEAF_NODE 22 ) LEAF_NODE 19 || EXPR 19 ! PACKET_get_net_2 ( & wholebody , & negversion ) || ! PACKET_forward ( & wholebody , 32 ) || ! PACKET_get_length_prefixed_1 ( & wholebody , & sessionid ) || ! PACKET_forward ( & wholebody , 2 + 1 ) || ! PACKET_get_length_prefixed_2 ( & wholebody , & extensions ) OR 20 ! PACKET_get_net_2 ( & wholebody , & negversion ) || ! PACKET_forward ( & wholebody , 32 ) || ! PACKET_get_length_prefixed_1 ( & wholebody , & sessionid ) || ! PACKET_forward ( & wholebody , 2 + 1 ) || ! PACKET_get_length_prefixed_2 ( & wholebody , & extensions ) EXPR 21 ! PACKET_get_net_2 ( & wholebody , & negversion ) UNARY_EXPR 22 ! PACKET_get_net_2 ( & wholebody , & negversion ) UNARY_OPERATOR 23 ! LEAF_NODE 24 ! FUNCTION_CALL 23 PACKET_get_net_2 ( & wholebody , & negversion ) CALLEE 24 PACKET_get_net_2 LEAF_NODE 25 PACKET_get_net_2 LEAF_NODE 24 ( ARGUMENT 24 & wholebody UNARY_EXPR 25 & wholebody UNARY_OPERATOR 26 & LEAF_NODE 27 & FIELD 26 wholebody LEAF_NODE 27 wholebody LEAF_NODE 24 , ARGUMENT 24 & negversion UNARY_EXPR 25 & negversion UNARY_OPERATOR 26 & LEAF_NODE 27 & FIELD 26 negversion LEAF_NODE 27 negversion LEAF_NODE 24 ) LEAF_NODE 21 || EXPR 21 ! PACKET_forward ( & wholebody , 32 ) || ! PACKET_get_length_prefixed_1 ( & wholebody , & sessionid ) || ! PACKET_forward ( & wholebody , 2 + 1 ) || ! PACKET_get_length_prefixed_2 ( & wholebody , & extensions ) OR 22 ! PACKET_forward ( & wholebody , 32 ) || ! PACKET_get_length_prefixed_1 ( & wholebody , & sessionid ) || ! PACKET_forward ( & wholebody , 2 + 1 ) || ! PACKET_get_length_prefixed_2 ( & wholebody , & extensions ) EXPR 23 ! PACKET_forward ( & wholebody , 32 ) UNARY_EXPR 24 ! PACKET_forward ( & wholebody , 32 ) UNARY_OPERATOR 25 ! LEAF_NODE 26 ! FUNCTION_CALL 25 PACKET_forward ( & wholebody , 32 ) CALLEE 26 PACKET_forward LEAF_NODE 27 PACKET_forward LEAF_NODE 26 ( ARGUMENT 26 & wholebody UNARY_EXPR 27 & wholebody UNARY_OPERATOR 28 & LEAF_NODE 29 & FIELD 28 wholebody LEAF_NODE 29 wholebody LEAF_NODE 26 , ARGUMENT 26 32 FIELD 27 32 LEAF_NODE 28 32 LEAF_NODE 26 ) LEAF_NODE 23 || EXPR 23 ! PACKET_get_length_prefixed_1 ( & wholebody , & sessionid ) || ! PACKET_forward ( & wholebody , 2 + 1 ) || ! PACKET_get_length_prefixed_2 ( & wholebody , & extensions ) OR 24 ! PACKET_get_length_prefixed_1 ( & wholebody , & sessionid ) || ! PACKET_forward ( & wholebody , 2 + 1 ) || ! PACKET_get_length_prefixed_2 ( & wholebody , & extensions ) EXPR 25 ! PACKET_get_length_prefixed_1 ( & wholebody , & sessionid ) UNARY_EXPR 26 ! PACKET_get_length_prefixed_1 ( & wholebody , & sessionid ) UNARY_OPERATOR 27 ! LEAF_NODE 28 ! FUNCTION_CALL 27 PACKET_get_length_prefixed_1 ( & wholebody , & sessionid ) CALLEE 28 PACKET_get_length_prefixed_1 LEAF_NODE 29 PACKET_get_length_prefixed_1 LEAF_NODE 28 ( ARGUMENT 28 & wholebody UNARY_EXPR 29 & wholebody UNARY_OPERATOR 30 & LEAF_NODE 31 & FIELD 30 wholebody LEAF_NODE 31 wholebody LEAF_NODE 28 , ARGUMENT 28 & sessionid UNARY_EXPR 29 & sessionid UNARY_OPERATOR 30 & LEAF_NODE 31 & FIELD 30 sessionid LEAF_NODE 31 sessionid LEAF_NODE 28 ) LEAF_NODE 25 || EXPR 25 ! PACKET_forward ( & wholebody , 2 + 1 ) || ! PACKET_get_length_prefixed_2 ( & wholebody , & extensions ) OR 26 ! PACKET_forward ( & wholebody , 2 + 1 ) || ! PACKET_get_length_prefixed_2 ( & wholebody , & extensions ) EXPR 27 ! PACKET_forward ( & wholebody , 2 + 1 ) UNARY_EXPR 28 ! PACKET_forward ( & wholebody , 2 + 1 ) UNARY_OPERATOR 29 ! LEAF_NODE 30 ! FUNCTION_CALL 29 PACKET_forward ( & wholebody , 2 + 1 ) CALLEE 30 PACKET_forward LEAF_NODE 31 PACKET_forward LEAF_NODE 30 ( ARGUMENT 30 & wholebody UNARY_EXPR 31 & wholebody UNARY_OPERATOR 32 & LEAF_NODE 33 & FIELD 32 wholebody LEAF_NODE 33 wholebody LEAF_NODE 30 , ARGUMENT 30 2 + 1 FIELD 31 2 LEAF_NODE 32 2 LEAF_NODE 31 + FIELD 31 1 LEAF_NODE 32 1 LEAF_NODE 30 ) LEAF_NODE 27 || EXPR 27 ! PACKET_get_length_prefixed_2 ( & wholebody , & extensions ) UNARY_EXPR 28 ! PACKET_get_length_prefixed_2 ( & wholebody , & extensions ) UNARY_OPERATOR 29 ! LEAF_NODE 30 ! FUNCTION_CALL 29 PACKET_get_length_prefixed_2 ( & wholebody , & extensions ) CALLEE 30 PACKET_get_length_prefixed_2 LEAF_NODE 31 PACKET_get_length_prefixed_2 LEAF_NODE 30 ( ARGUMENT 30 & wholebody UNARY_EXPR 31 & wholebody UNARY_OPERATOR 32 & LEAF_NODE 33 & FIELD 32 wholebody LEAF_NODE 33 wholebody LEAF_NODE 30 , ARGUMENT 30 & extensions UNARY_EXPR 31 & extensions UNARY_OPERATOR 32 & LEAF_NODE 33 & FIELD 32 extensions LEAF_NODE 33 extensions LEAF_NODE 30 ) LEAF_NODE 16 ) STATEMENTS 16 JUMP_STATEMENT 17 return - 1 ; KEYWORD 18 return LEAF_NODE 19 return DESTINATION 18 - 1 EXPR 19 - 1 UNARY_EXPR 20 - 1 UNARY_OPERATOR 21 - LEAF_NODE 22 - FIELD 21 1 LEAF_NODE 22 1 LEAF_NODE 18 ; ITERATION 15 KEYWORD 16 while LEAF_NODE 17 while LEAF_NODE 16 ( CONDITION 16 PACKET_remaining ( & extensions ) EXPR 17 PACKET_remaining ( & extensions ) FUNCTION_CALL 18 PACKET_remaining ( & extensions ) CALLEE 19 PACKET_remaining LEAF_NODE 20 PACKET_remaining LEAF_NODE 19 ( ARGUMENT 19 & extensions UNARY_EXPR 20 & extensions UNARY_OPERATOR 21 & LEAF_NODE 22 & FIELD 21 extensions LEAF_NODE 22 extensions LEAF_NODE 19 ) LEAF_NODE 16 ) STATEMENTS 16 LEAF_NODE 17 { STATEMENTS 17 SIMPLE_DECL 18 unsigned int type ; VAR_DECL 19 unsigned int type TYPE 20 unsigned int TYPE_NAME 21 unsigned int LEAF_NODE 22 unsigned LEAF_NODE 22 int NAME 20 type LEAF_NODE 21 type LEAF_NODE 19 ; SIMPLE_DECL 18 PACKET extbody ; VAR_DECL 19 PACKET extbody TYPE 20 PACKET TYPE_NAME 21 PACKET LEAF_NODE 22 PACKET NAME 20 extbody LEAF_NODE 21 extbody LEAF_NODE 19 ; SELECTION 18 KEYWORD 19 if LEAF_NODE 20 if LEAF_NODE 19 ( CONDITION 19 ! PACKET_get_net_2 ( & extensions , & type ) || ! PACKET_get_length_prefixed_2 ( & extensions , & extbody ) EXPR 20 ! PACKET_get_net_2 ( & extensions , & type ) || ! PACKET_get_length_prefixed_2 ( & extensions , & extbody ) OR 21 ! PACKET_get_net_2 ( & extensions , & type ) || ! PACKET_get_length_prefixed_2 ( & extensions , & extbody ) EXPR 22 ! PACKET_get_net_2 ( & extensions , & type ) UNARY_EXPR 23 ! PACKET_get_net_2 ( & extensions , & type ) UNARY_OPERATOR 24 ! LEAF_NODE 25 ! FUNCTION_CALL 24 PACKET_get_net_2 ( & extensions , & type ) CALLEE 25 PACKET_get_net_2 LEAF_NODE 26 PACKET_get_net_2 LEAF_NODE 25 ( ARGUMENT 25 & extensions UNARY_EXPR 26 & extensions UNARY_OPERATOR 27 & LEAF_NODE 28 & FIELD 27 extensions LEAF_NODE 28 extensions LEAF_NODE 25 , ARGUMENT 25 & type UNARY_EXPR 26 & type UNARY_OPERATOR 27 & LEAF_NODE 28 & FIELD 27 type LEAF_NODE 28 type LEAF_NODE 25 ) LEAF_NODE 22 || EXPR 22 ! PACKET_get_length_prefixed_2 ( & extensions , & extbody ) UNARY_EXPR 23 ! PACKET_get_length_prefixed_2 ( & extensions , & extbody ) UNARY_OPERATOR 24 ! LEAF_NODE 25 ! FUNCTION_CALL 24 PACKET_get_length_prefixed_2 ( & extensions , & extbody ) CALLEE 25 PACKET_get_length_prefixed_2 LEAF_NODE 26 PACKET_get_length_prefixed_2 LEAF_NODE 25 ( ARGUMENT 25 & extensions UNARY_EXPR 26 & extensions UNARY_OPERATOR 27 & LEAF_NODE 28 & FIELD 27 extensions LEAF_NODE 28 extensions LEAF_NODE 25 , ARGUMENT 25 & extbody UNARY_EXPR 26 & extbody UNARY_OPERATOR 27 & LEAF_NODE 28 & FIELD 27 extbody LEAF_NODE 28 extbody LEAF_NODE 25 ) LEAF_NODE 19 ) STATEMENTS 19 JUMP_STATEMENT 20 return - 1 ; KEYWORD 21 return LEAF_NODE 22 return DESTINATION 21 - 1 EXPR 22 - 1 UNARY_EXPR 23 - 1 UNARY_OPERATOR 24 - LEAF_NODE 25 - FIELD 24 1 LEAF_NODE 25 1 LEAF_NODE 21 ; SELECTION 18 KEYWORD 19 if LEAF_NODE 20 if LEAF_NODE 19 ( CONDITION 19 type == TLSEXT_TYPE_supported_versions && ( ! PACKET_get_net_2 ( & extbody , & negversion ) || PACKET_remaining ( & extbody ) != 0 ) EXPR 20 type == TLSEXT_TYPE_supported_versions && ( ! PACKET_get_net_2 ( & extbody , & negversion ) || PACKET_remaining ( & extbody ) != 0 ) AND 21 type == TLSEXT_TYPE_supported_versions && ( ! PACKET_get_net_2 ( & extbody , & negversion ) || PACKET_remaining ( & extbody ) != 0 ) EXPR 22 type == TLSEXT_TYPE_supported_versions FIELD 23 type LEAF_NODE 24 type EQ_OPERATOR 23 == LEAF_NODE 24 == FIELD 23 TLSEXT_TYPE_supported_versions LEAF_NODE 24 TLSEXT_TYPE_supported_versions LEAF_NODE 22 && EXPR 22 ( ! PACKET_get_net_2 ( & extbody , & negversion ) || PACKET_remaining ( & extbody ) != 0 ) LEAF_NODE 23 ( OR 23 ! PACKET_get_net_2 ( & extbody , & negversion ) || PACKET_remaining ( & extbody ) != 0 EXPR 24 ! PACKET_get_net_2 ( & extbody , & negversion ) UNARY_EXPR 25 ! PACKET_get_net_2 ( & extbody , & negversion ) UNARY_OPERATOR 26 ! LEAF_NODE 27 ! FUNCTION_CALL 26 PACKET_get_net_2 ( & extbody , & negversion ) CALLEE 27 PACKET_get_net_2 LEAF_NODE 28 PACKET_get_net_2 LEAF_NODE 27 ( ARGUMENT 27 & extbody UNARY_EXPR 28 & extbody UNARY_OPERATOR 29 & LEAF_NODE 30 & FIELD 29 extbody LEAF_NODE 30 extbody LEAF_NODE 27 , ARGUMENT 27 & negversion UNARY_EXPR 28 & negversion UNARY_OPERATOR 29 & LEAF_NODE 30 & FIELD 29 negversion LEAF_NODE 30 negversion LEAF_NODE 27 ) LEAF_NODE 24 || EXPR 24 PACKET_remaining ( & extbody ) != 0 FUNCTION_CALL 25 PACKET_remaining ( & extbody ) CALLEE 26 PACKET_remaining LEAF_NODE 27 PACKET_remaining LEAF_NODE 26 ( ARGUMENT 26 & extbody UNARY_EXPR 27 & extbody UNARY_OPERATOR 28 & LEAF_NODE 29 & FIELD 28 extbody LEAF_NODE 29 extbody LEAF_NODE 26 ) EQ_OPERATOR 25 != LEAF_NODE 26 != FIELD 25 0 LEAF_NODE 26 0 LEAF_NODE 23 ) LEAF_NODE 19 ) STATEMENTS 19 JUMP_STATEMENT 20 return - 1 ; KEYWORD 21 return LEAF_NODE 22 return DESTINATION 21 - 1 EXPR 22 - 1 UNARY_EXPR 23 - 1 UNARY_OPERATOR 24 - LEAF_NODE 25 - FIELD 24 1 LEAF_NODE 25 1 LEAF_NODE 21 ; LEAF_NODE 17 } LEAF_NODE 14 } ITERATION 12 KEYWORD 13 while LEAF_NODE 14 while LEAF_NODE 13 ( CONDITION 13 PACKET_get_1 ( & payload , & data ) EXPR 14 PACKET_get_1 ( & payload , & data ) FUNCTION_CALL 15 PACKET_get_1 ( & payload , & data ) CALLEE 16 PACKET_get_1 LEAF_NODE 17 PACKET_get_1 LEAF_NODE 16 ( ARGUMENT 16 & payload UNARY_EXPR 17 & payload UNARY_OPERATOR 18 & LEAF_NODE 19 & FIELD 18 payload LEAF_NODE 19 payload LEAF_NODE 16 , ARGUMENT 16 & data UNARY_EXPR 17 & data UNARY_OPERATOR 18 & LEAF_NODE 19 & FIELD 18 data LEAF_NODE 19 data LEAF_NODE 16 ) LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 LEAF_NODE 15 char LEAF_NODE 15 smallrec LEAF_NODE 15 [ LEAF_NODE 15 MIN_RECORD_LEN LEAF_NODE 15 ] LEAF_NODE 15 = LEAF_NODE 15 { STATEMENTS 15 LEAF_NODE 16 0 LEAF_NODE 16 , LEAF_NODE 16 0 LEAF_NODE 16 , LEAF_NODE 16 0 LEAF_NODE 16 , LEAF_NODE 16 0 LEAF_NODE 16 , LEAF_NODE 16 1 LEAF_NODE 16 , LEAF_NODE 16 0 LEAF_NODE 15 } LEAF_NODE 15 ; EXPR_STATEMENT 15 smallrec [ CONTENTTYPEPOS ] = contenttype ; EXPR 16 smallrec [ CONTENTTYPEPOS ] = contenttype ASSIGN 17 smallrec [ CONTENTTYPEPOS ] = contenttype LVAL 18 smallrec [ CONTENTTYPEPOS ] FIELD 19 smallrec [ CONTENTTYPEPOS ] LEAF_NODE 20 smallrec LEAF_NODE 20 [ EXPR 20 CONTENTTYPEPOS FIELD 21 CONTENTTYPEPOS LEAF_NODE 22 CONTENTTYPEPOS LEAF_NODE 20 ] ASSIGN_OP 18 = LEAF_NODE 19 = RVAL 18 contenttype FIELD 19 contenttype LEAF_NODE 20 contenttype LEAF_NODE 16 ; EXPR_STATEMENT 15 smallrec [ VERSIONHIPOS ] = versionhi ; EXPR 16 smallrec [ VERSIONHIPOS ] = versionhi ASSIGN 17 smallrec [ VERSIONHIPOS ] = versionhi LVAL 18 smallrec [ VERSIONHIPOS ] FIELD 19 smallrec [ VERSIONHIPOS ] LEAF_NODE 20 smallrec LEAF_NODE 20 [ EXPR 20 VERSIONHIPOS FIELD 21 VERSIONHIPOS LEAF_NODE 22 VERSIONHIPOS LEAF_NODE 20 ] ASSIGN_OP 18 = LEAF_NODE 19 = RVAL 18 versionhi FIELD 19 versionhi LEAF_NODE 20 versionhi LEAF_NODE 16 ; EXPR_STATEMENT 15 smallrec [ VERSIONLOPOS ] = versionlo ; EXPR 16 smallrec [ VERSIONLOPOS ] = versionlo ASSIGN 17 smallrec [ VERSIONLOPOS ] = versionlo LVAL 18 smallrec [ VERSIONLOPOS ] FIELD 19 smallrec [ VERSIONLOPOS ] LEAF_NODE 20 smallrec LEAF_NODE 20 [ EXPR 20 VERSIONLOPOS FIELD 21 VERSIONLOPOS LEAF_NODE 22 VERSIONLOPOS LEAF_NODE 20 ] ASSIGN_OP 18 = LEAF_NODE 19 = RVAL 18 versionlo FIELD 19 versionlo LEAF_NODE 20 versionlo LEAF_NODE 16 ; EXPR_STATEMENT 15 smallrec [ DATAPOS ] = data ; EXPR 16 smallrec [ DATAPOS ] = data ASSIGN 17 smallrec [ DATAPOS ] = data LVAL 18 smallrec [ DATAPOS ] FIELD 19 smallrec [ DATAPOS ] LEAF_NODE 20 smallrec LEAF_NODE 20 [ EXPR 20 DATAPOS FIELD 21 DATAPOS LEAF_NODE 22 DATAPOS LEAF_NODE 20 ] ASSIGN_OP 18 = LEAF_NODE 19 = RVAL 18 data FIELD 19 data LEAF_NODE 20 data LEAF_NODE 16 ; EXPR_STATEMENT 15 ret = BIO_write ( next , smallrec , MIN_RECORD_LEN ) ; EXPR 16 ret = BIO_write ( next , smallrec , MIN_RECORD_LEN ) ASSIGN 17 ret = BIO_write ( next , smallrec , MIN_RECORD_LEN ) LVAL 18 ret FIELD 19 ret LEAF_NODE 20 ret ASSIGN_OP 18 = LEAF_NODE 19 = RVAL 18 BIO_write ( next , smallrec , MIN_RECORD_LEN ) FUNCTION_CALL 19 BIO_write ( next , smallrec , MIN_RECORD_LEN ) CALLEE 20 BIO_write LEAF_NODE 21 BIO_write LEAF_NODE 20 ( ARGUMENT 20 next FIELD 21 next LEAF_NODE 22 next LEAF_NODE 20 , ARGUMENT 20 smallrec FIELD 21 smallrec LEAF_NODE 22 smallrec LEAF_NODE 20 , ARGUMENT 20 MIN_RECORD_LEN FIELD 21 MIN_RECORD_LEN LEAF_NODE 22 MIN_RECORD_LEN LEAF_NODE 20 ) LEAF_NODE 16 ; SELECTION 15 KEYWORD 16 if LEAF_NODE 17 if LEAF_NODE 16 ( CONDITION 16 ret <= 0 EXPR 17 ret <= 0 FIELD 18 ret LEAF_NODE 19 ret REL_OPERATOR 18 <= LEAF_NODE 19 <= FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 16 ) STATEMENTS 16 JUMP_STATEMENT 17 return - 1 ; KEYWORD 18 return LEAF_NODE 19 return DESTINATION 18 - 1 EXPR 19 - 1 UNARY_EXPR 20 - 1 UNARY_OPERATOR 21 - LEAF_NODE 22 - FIELD 21 1 LEAF_NODE 22 1 LEAF_NODE 18 ; EXPR_STATEMENT 15 written ++ ; EXPR 16 written ++ FIELD 17 written ++ LEAF_NODE 18 written LEAF_NODE 18 ++ LEAF_NODE 16 ; LEAF_NODE 14 } SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 contenttype == SSL3_RT_CHANGE_CIPHER_SPEC || ( negversion == TLS1_3_VERSION && msgtype == SSL3_MT_SERVER_HELLO ) EXPR 14 contenttype == SSL3_RT_CHANGE_CIPHER_SPEC || ( negversion == TLS1_3_VERSION && msgtype == SSL3_MT_SERVER_HELLO ) OR 15 contenttype == SSL3_RT_CHANGE_CIPHER_SPEC || ( negversion == TLS1_3_VERSION && msgtype == SSL3_MT_SERVER_HELLO ) EXPR 16 contenttype == SSL3_RT_CHANGE_CIPHER_SPEC FIELD 17 contenttype LEAF_NODE 18 contenttype EQ_OPERATOR 17 == LEAF_NODE 18 == FIELD 17 SSL3_RT_CHANGE_CIPHER_SPEC LEAF_NODE 18 SSL3_RT_CHANGE_CIPHER_SPEC LEAF_NODE 16 || EXPR 16 ( negversion == TLS1_3_VERSION && msgtype == SSL3_MT_SERVER_HELLO ) LEAF_NODE 17 ( AND 17 negversion == TLS1_3_VERSION && msgtype == SSL3_MT_SERVER_HELLO EXPR 18 negversion == TLS1_3_VERSION FIELD 19 negversion LEAF_NODE 20 negversion EQ_OPERATOR 19 == LEAF_NODE 20 == FIELD 19 TLS1_3_VERSION LEAF_NODE 20 TLS1_3_VERSION LEAF_NODE 18 && EXPR 18 msgtype == SSL3_MT_SERVER_HELLO FIELD 19 msgtype LEAF_NODE 20 msgtype EQ_OPERATOR 19 == LEAF_NODE 20 == FIELD 19 SSL3_MT_SERVER_HELLO LEAF_NODE 20 SSL3_MT_SERVER_HELLO LEAF_NODE 17 ) LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 EXPR_STATEMENT 15 fragment = 0 ; EXPR 16 fragment = 0 ASSIGN 17 fragment = 0 LVAL 18 fragment FIELD 19 fragment LEAF_NODE 20 fragment ASSIGN_OP 18 = LEAF_NODE 19 = RVAL 18 0 FIELD 19 0 LEAF_NODE 20 0 LEAF_NODE 16 ; JUMP_STATEMENT 15 break DESTINATION ; KEYWORD 16 break LEAF_NODE 17 break LEAF_NODE 16 DESTINATION LEAF_NODE 16 ; LEAF_NODE 14 } LEAF_NODE 11 } LEAF_NODE 8 } EXPR_STATEMENT 6 ret = 0 ; EXPR 7 ret = 0 ASSIGN 8 ret = 0 LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( int ) written < inl EXPR 8 ( int ) written < inl LEAF_NODE 9 ( TYPE_NAME 9 int LEAF_NODE 10 int LEAF_NODE 9 ) FIELD 9 written LEAF_NODE 10 written REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 inl LEAF_NODE 10 inl LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ret = BIO_write ( next , in + written , inl - written ) ; EXPR 10 ret = BIO_write ( next , in + written , inl - written ) ASSIGN 11 ret = BIO_write ( next , in + written , inl - written ) LVAL 12 ret FIELD 13 ret LEAF_NODE 14 ret ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 BIO_write ( next , in + written , inl - written ) FUNCTION_CALL 13 BIO_write ( next , in + written , inl - written ) CALLEE 14 BIO_write LEAF_NODE 15 BIO_write LEAF_NODE 14 ( ARGUMENT 14 next FIELD 15 next LEAF_NODE 16 next LEAF_NODE 14 , ARGUMENT 14 in + written FIELD 15 in LEAF_NODE 16 in LEAF_NODE 15 + FIELD 15 written LEAF_NODE 16 written LEAF_NODE 14 , ARGUMENT 14 inl - written FIELD 15 inl LEAF_NODE 16 inl LEAF_NODE 15 - FIELD 15 written LEAF_NODE 16 written LEAF_NODE 14 ) LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ret <= 0 && BIO_should_write ( next ) EXPR 8 ret <= 0 && BIO_should_write ( next ) AND 9 ret <= 0 && BIO_should_write ( next ) EXPR 10 ret <= 0 FIELD 11 ret LEAF_NODE 12 ret REL_OPERATOR 11 <= LEAF_NODE 12 <= FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 && EXPR 10 BIO_should_write ( next ) FUNCTION_CALL 11 BIO_should_write ( next ) CALLEE 12 BIO_should_write LEAF_NODE 13 BIO_should_write LEAF_NODE 12 ( ARGUMENT 12 next FIELD 13 next LEAF_NODE 14 next LEAF_NODE 12 ) LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 BIO_set_retry_write ( bio ) ; EXPR 9 BIO_set_retry_write ( bio ) FUNCTION_CALL 10 BIO_set_retry_write ( bio ) CALLEE 11 BIO_set_retry_write LEAF_NODE 12 BIO_set_retry_write LEAF_NODE 11 ( ARGUMENT 11 bio FIELD 12 bio LEAF_NODE 13 bio LEAF_NODE 11 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 EXPR_STATEMENT 8 ret += written ; EXPR 9 ret += written ASSIGN 10 ret += written LVAL 11 ret FIELD 12 ret LEAF_NODE 13 ret ASSIGN_OP 11 += LEAF_NODE 12 += RVAL 11 written FIELD 12 written LEAF_NODE 13 written LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ctrs -> wctr ++ ; EXPR 7 ctrs -> wctr ++ FIELD 8 ctrs -> wctr ++ LEAF_NODE 9 ctrs LEAF_NODE 9 -> LEAF_NODE 9 wctr LEAF_NODE 9 ++ LEAF_NODE 7 ; EXPR_STATEMENT 6 BIO_set_retry_write ( bio ) ; EXPR 7 BIO_set_retry_write ( bio ) FUNCTION_CALL 8 BIO_set_retry_write ( bio ) CALLEE 9 BIO_set_retry_write LEAF_NODE 10 BIO_set_retry_write LEAF_NODE 9 ( ARGUMENT 9 bio FIELD 10 bio LEAF_NODE 11 bio LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return ret ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ret EXPR 5 ret FIELD 6 ret LEAF_NODE 7 ret LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 44, "project": "openssl_ast_normal_function_test_21", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS ; VAR_DECL 2 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS TYPE 3 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } CLASS_DEF 4 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } LEAF_NODE 5 struct CLASS_NAME 5 args_st LEAF_NODE 6 args_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int size ; int argc ; char * argv ; SIMPLE_DECL 6 int size ; VAR_DECL 7 int size TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 size LEAF_NODE 9 size LEAF_NODE 7 ; SIMPLE_DECL 6 int argc ; VAR_DECL 7 int argc TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 argc LEAF_NODE 9 argc LEAF_NODE 7 ; SIMPLE_DECL 6 char * argv ; VAR_DECL 7 char * argv TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 argv LEAF_NODE 9 argv LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 ARGS LEAF_NODE 4 ARGS LEAF_NODE 2 ; SIMPLE_DECL 1 UI_METHOD * ui_method ; ui_method = NULL ; VAR_DECL 2 UI_METHOD * ui_method ; ui_method = NULL TYPE 3 UI_METHOD * TYPE_NAME 4 UI_METHOD LEAF_NODE 5 UI_METHOD POINTER 4 * LEAF_NODE 5 * NAME 3 ui_method LEAF_NODE 4 ui_method LEAF_NODE 3 ; INIT 3 ui_method = NULL ASSIGN 4 ui_method = NULL LVAL 5 ui_method NAME 6 ui_method LEAF_NODE 7 ui_method ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 const UI_METHOD * TYPE_NAME 3 const UI_METHOD LEAF_NODE 4 const LEAF_NODE 4 UI_METHOD LEAF_NODE 3 * FUNCTION_NAME 2 get_ui_method LEAF_NODE 3 get_ui_method PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return ui_method ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ui_method EXPR 5 ui_method FIELD 6 ui_method LEAF_NODE 7 ui_method LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 45, "project": "openssl_ast_normal_function_test_38", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 struct pw_cb_data BASE_CLASSES { const void * password ; const char * prompt_info ; } PW_CB_DATA ; VAR_DECL 2 struct pw_cb_data BASE_CLASSES { const void * password ; const char * prompt_info ; } PW_CB_DATA TYPE 3 struct pw_cb_data BASE_CLASSES { const void * password ; const char * prompt_info ; } CLASS_DEF 4 struct pw_cb_data BASE_CLASSES { const void * password ; const char * prompt_info ; } LEAF_NODE 5 struct CLASS_NAME 5 pw_cb_data LEAF_NODE 6 pw_cb_data LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 const void * password ; const char * prompt_info ; SIMPLE_DECL 6 const void * password ; VAR_DECL 7 const void * password TYPE 8 const void * TYPE_NAME 9 const void LEAF_NODE 10 const LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 password LEAF_NODE 9 password LEAF_NODE 7 ; SIMPLE_DECL 6 const char * prompt_info ; VAR_DECL 7 const char * prompt_info TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 prompt_info LEAF_NODE 9 prompt_info LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 PW_CB_DATA LEAF_NODE 4 PW_CB_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 UI_METHOD * ui_method ; ui_method = NULL ; VAR_DECL 2 UI_METHOD * ui_method ; ui_method = NULL TYPE 3 UI_METHOD * TYPE_NAME 4 UI_METHOD LEAF_NODE 5 UI_METHOD POINTER 4 * LEAF_NODE 5 * NAME 3 ui_method LEAF_NODE 4 ui_method LEAF_NODE 3 ; INIT 3 ui_method = NULL ASSIGN 4 ui_method = NULL LVAL 5 ui_method NAME 6 ui_method LEAF_NODE 7 ui_method ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 password_callback LEAF_NODE 3 password_callback PARAMETER_LIST 2 ( char * buf , int bufsiz , int verify , PW_CB_DATA * cb_tmp ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * buf TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 buf LEAF_NODE 5 buf LEAF_NODE 3 , PARAMETER_DECL 3 int bufsiz TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 bufsiz LEAF_NODE 5 bufsiz LEAF_NODE 3 , PARAMETER_DECL 3 int verify TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 verify LEAF_NODE 5 verify LEAF_NODE 3 , PARAMETER_DECL 3 PW_CB_DATA * cb_tmp TYPE 4 PW_CB_DATA * TYPE_NAME 5 PW_CB_DATA LEAF_NODE 6 PW_CB_DATA POINTER 5 * LEAF_NODE 6 * NAME 4 cb_tmp LEAF_NODE 5 cb_tmp LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int res ; res = 0 ; VAR_DECL 4 int res ; res = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 res LEAF_NODE 6 res LEAF_NODE 5 ; INIT 5 res = 0 ASSIGN 6 res = 0 LVAL 7 res NAME 8 res LEAF_NODE 9 res ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 UI * ui ; ui = NULL ; VAR_DECL 4 UI * ui ; ui = NULL TYPE 5 UI * TYPE_NAME 6 UI LEAF_NODE 7 UI POINTER 6 * LEAF_NODE 7 * NAME 5 ui LEAF_NODE 6 ui LEAF_NODE 5 ; INIT 5 ui = NULL ASSIGN 6 ui = NULL LVAL 7 ui NAME 8 ui LEAF_NODE 9 ui ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 PW_CB_DATA * cb_data ; cb_data = ( PW_CB_DATA * ) cb_tmp ; VAR_DECL 4 PW_CB_DATA * cb_data ; cb_data = ( PW_CB_DATA * ) cb_tmp TYPE 5 PW_CB_DATA * TYPE_NAME 6 PW_CB_DATA LEAF_NODE 7 PW_CB_DATA POINTER 6 * LEAF_NODE 7 * NAME 5 cb_data LEAF_NODE 6 cb_data LEAF_NODE 5 ; INIT 5 cb_data = ( PW_CB_DATA * ) cb_tmp ASSIGN 6 cb_data = ( PW_CB_DATA * ) cb_tmp LVAL 7 cb_data NAME 8 cb_data LEAF_NODE 9 cb_data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( PW_CB_DATA * ) cb_tmp LEAF_NODE 8 ( TYPE_NAME 8 PW_CB_DATA LEAF_NODE 9 PW_CB_DATA LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 cb_tmp LEAF_NODE 9 cb_tmp LEAF_NODE 4 ; EXPR_STATEMENT 3 ui = UI_new_method ( ui_method ) ; EXPR 4 ui = UI_new_method ( ui_method ) ASSIGN 5 ui = UI_new_method ( ui_method ) LVAL 6 ui FIELD 7 ui LEAF_NODE 8 ui ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 UI_new_method ( ui_method ) FUNCTION_CALL 7 UI_new_method ( ui_method ) CALLEE 8 UI_new_method LEAF_NODE 9 UI_new_method LEAF_NODE 8 ( ARGUMENT 8 ui_method FIELD 9 ui_method LEAF_NODE 10 ui_method LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ui EXPR 5 ui FIELD 6 ui LEAF_NODE 7 ui LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int ok ; ok = 0 ; VAR_DECL 7 int ok ; ok = 0 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 ok LEAF_NODE 9 ok LEAF_NODE 8 ; INIT 8 ok = 0 ASSIGN 9 ok = 0 LVAL 10 ok NAME 11 ok LEAF_NODE 12 ok ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ; SIMPLE_DECL 6 char * buff ; buff = NULL ; VAR_DECL 7 char * buff ; buff = NULL TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 buff LEAF_NODE 9 buff LEAF_NODE 8 ; INIT 8 buff = NULL ASSIGN 9 buff = NULL LVAL 10 buff NAME 11 buff LEAF_NODE 12 buff ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 7 ; SIMPLE_DECL 6 int ui_flags ; ui_flags = 0 ; VAR_DECL 7 int ui_flags ; ui_flags = 0 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 ui_flags LEAF_NODE 9 ui_flags LEAF_NODE 8 ; INIT 8 ui_flags = 0 ASSIGN 9 ui_flags = 0 LVAL 10 ui_flags NAME 11 ui_flags LEAF_NODE 12 ui_flags ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ; SIMPLE_DECL 6 const char * prompt_info ; prompt_info = NULL ; VAR_DECL 7 const char * prompt_info ; prompt_info = NULL TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 prompt_info LEAF_NODE 9 prompt_info LEAF_NODE 8 ; INIT 8 prompt_info = NULL ASSIGN 9 prompt_info = NULL LVAL 10 prompt_info NAME 11 prompt_info LEAF_NODE 12 prompt_info ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 7 ; SIMPLE_DECL 6 char * prompt ; VAR_DECL 7 char * prompt TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 prompt LEAF_NODE 9 prompt LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 cb_data != NULL && cb_data -> prompt_info != NULL EXPR 8 cb_data != NULL && cb_data -> prompt_info != NULL AND 9 cb_data != NULL && cb_data -> prompt_info != NULL EXPR 10 cb_data != NULL FIELD 11 cb_data LEAF_NODE 12 cb_data EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 10 && EXPR 10 cb_data -> prompt_info != NULL FIELD 11 cb_data -> prompt_info LEAF_NODE 12 cb_data LEAF_NODE 12 -> LEAF_NODE 12 prompt_info EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 prompt_info = cb_data -> prompt_info ; EXPR 9 prompt_info = cb_data -> prompt_info ASSIGN 10 prompt_info = cb_data -> prompt_info LVAL 11 prompt_info FIELD 12 prompt_info LEAF_NODE 13 prompt_info ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 cb_data -> prompt_info FIELD 12 cb_data -> prompt_info LEAF_NODE 13 cb_data LEAF_NODE 13 -> LEAF_NODE 13 prompt_info LEAF_NODE 9 ; EXPR_STATEMENT 6 prompt = UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) ; EXPR 7 prompt = UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) ASSIGN 8 prompt = UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) LVAL 9 prompt FIELD 10 prompt LEAF_NODE 11 prompt ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) FUNCTION_CALL 10 UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) CALLEE 11 UI_construct_prompt LEAF_NODE 12 UI_construct_prompt LEAF_NODE 11 ( ARGUMENT 11 ui FIELD 12 ui LEAF_NODE 13 ui LEAF_NODE 11 , ARGUMENT 11 \"pass phrase\" FIELD 12 \"pass phrase\" LEAF_NODE 13 \"pass phrase\" LEAF_NODE 11 , ARGUMENT 11 prompt_info FIELD 12 prompt_info LEAF_NODE 13 prompt_info LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! prompt EXPR 8 ! prompt UNARY_EXPR 9 ! prompt UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FIELD 10 prompt LEAF_NODE 11 prompt LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_printf ( bio_err , \"Out of memory\\n\" ) ; EXPR 10 BIO_printf ( bio_err , \"Out of memory\\n\" ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"Out of memory\\n\" ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"Out of memory\\n\" FIELD 13 \"Out of memory\\n\" LEAF_NODE 14 \"Out of memory\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 UI_free ( ui ) ; EXPR 10 UI_free ( ui ) FUNCTION_CALL 11 UI_free ( ui ) CALLEE 12 UI_free LEAF_NODE 13 UI_free LEAF_NODE 12 ( ARGUMENT 12 ui FIELD 13 ui LEAF_NODE 14 ui LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return 0 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 0 EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 ui_flags |= UI_INPUT_FLAG_DEFAULT_PWD ; EXPR 7 ui_flags |= UI_INPUT_FLAG_DEFAULT_PWD ASSIGN 8 ui_flags |= UI_INPUT_FLAG_DEFAULT_PWD LVAL 9 ui_flags FIELD 10 ui_flags LEAF_NODE 11 ui_flags ASSIGN_OP 9 |= LEAF_NODE 10 |= RVAL 9 UI_INPUT_FLAG_DEFAULT_PWD FIELD 10 UI_INPUT_FLAG_DEFAULT_PWD LEAF_NODE 11 UI_INPUT_FLAG_DEFAULT_PWD LEAF_NODE 7 ; EXPR_STATEMENT 6 UI_ctrl ( ui , UI_CTRL_PRINT_ERRORS , 1 , 0 , 0 ) ; EXPR 7 UI_ctrl ( ui , UI_CTRL_PRINT_ERRORS , 1 , 0 , 0 ) FUNCTION_CALL 8 UI_ctrl ( ui , UI_CTRL_PRINT_ERRORS , 1 , 0 , 0 ) CALLEE 9 UI_ctrl LEAF_NODE 10 UI_ctrl LEAF_NODE 9 ( ARGUMENT 9 ui FIELD 10 ui LEAF_NODE 11 ui LEAF_NODE 9 , ARGUMENT 9 UI_CTRL_PRINT_ERRORS FIELD 10 UI_CTRL_PRINT_ERRORS LEAF_NODE 11 UI_CTRL_PRINT_ERRORS LEAF_NODE 9 , ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ( void ) UI_add_user_data ( ui , cb_data ) ; EXPR 7 ( void ) UI_add_user_data ( ui , cb_data ) LEAF_NODE 8 ( TYPE_NAME 8 void LEAF_NODE 9 void LEAF_NODE 8 ) FUNCTION_CALL 8 UI_add_user_data ( ui , cb_data ) CALLEE 9 UI_add_user_data LEAF_NODE 10 UI_add_user_data LEAF_NODE 9 ( ARGUMENT 9 ui FIELD 10 ui LEAF_NODE 11 ui LEAF_NODE 9 , ARGUMENT 9 cb_data FIELD 10 cb_data LEAF_NODE 11 cb_data LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ok = UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) ; EXPR 7 ok = UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) ASSIGN 8 ok = UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) LVAL 9 ok FIELD 10 ok LEAF_NODE 11 ok ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) FUNCTION_CALL 10 UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) CALLEE 11 UI_add_input_string LEAF_NODE 12 UI_add_input_string LEAF_NODE 11 ( ARGUMENT 11 ui FIELD 12 ui LEAF_NODE 13 ui LEAF_NODE 11 , ARGUMENT 11 prompt FIELD 12 prompt LEAF_NODE 13 prompt LEAF_NODE 11 , ARGUMENT 11 ui_flags FIELD 12 ui_flags LEAF_NODE 13 ui_flags LEAF_NODE 11 , ARGUMENT 11 buf FIELD 12 buf LEAF_NODE 13 buf LEAF_NODE 11 , ARGUMENT 11 PW_MIN_LENGTH FIELD 12 PW_MIN_LENGTH LEAF_NODE 13 PW_MIN_LENGTH LEAF_NODE 11 , ARGUMENT 11 bufsiz - 1 FIELD 12 bufsiz LEAF_NODE 13 bufsiz LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok >= 0 && verify EXPR 8 ok >= 0 && verify AND 9 ok >= 0 && verify EXPR 10 ok >= 0 FIELD 11 ok LEAF_NODE 12 ok REL_OPERATOR 11 >= LEAF_NODE 12 >= FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 && EXPR 10 verify FIELD 11 verify LEAF_NODE 12 verify LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 buff = app_malloc ( bufsiz , \"password buffer\" ) ; EXPR 10 buff = app_malloc ( bufsiz , \"password buffer\" ) ASSIGN 11 buff = app_malloc ( bufsiz , \"password buffer\" ) LVAL 12 buff FIELD 13 buff LEAF_NODE 14 buff ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 app_malloc ( bufsiz , \"password buffer\" ) FUNCTION_CALL 13 app_malloc ( bufsiz , \"password buffer\" ) CALLEE 14 app_malloc LEAF_NODE 15 app_malloc LEAF_NODE 14 ( ARGUMENT 14 bufsiz FIELD 15 bufsiz LEAF_NODE 16 bufsiz LEAF_NODE 14 , ARGUMENT 14 \"password buffer\" FIELD 15 \"password buffer\" LEAF_NODE 16 \"password buffer\" LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ok = UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) ; EXPR 10 ok = UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) ASSIGN 11 ok = UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) LVAL 12 ok FIELD 13 ok LEAF_NODE 14 ok ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) FUNCTION_CALL 13 UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) CALLEE 14 UI_add_verify_string LEAF_NODE 15 UI_add_verify_string LEAF_NODE 14 ( ARGUMENT 14 ui FIELD 15 ui LEAF_NODE 16 ui LEAF_NODE 14 , ARGUMENT 14 prompt FIELD 15 prompt LEAF_NODE 16 prompt LEAF_NODE 14 , ARGUMENT 14 ui_flags FIELD 15 ui_flags LEAF_NODE 16 ui_flags LEAF_NODE 14 , ARGUMENT 14 buff FIELD 15 buff LEAF_NODE 16 buff LEAF_NODE 14 , ARGUMENT 14 PW_MIN_LENGTH FIELD 15 PW_MIN_LENGTH LEAF_NODE 16 PW_MIN_LENGTH LEAF_NODE 14 , ARGUMENT 14 bufsiz - 1 FIELD 15 bufsiz LEAF_NODE 16 bufsiz LEAF_NODE 15 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 , ARGUMENT 14 buf FIELD 15 buf LEAF_NODE 16 buf LEAF_NODE 14 ) LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok >= 0 EXPR 8 ok >= 0 FIELD 9 ok LEAF_NODE 10 ok REL_OPERATOR 9 >= LEAF_NODE 10 >= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 ITERATION 8 KEYWORD 9 do LEAF_NODE 10 do LEAF_NODE 9 ( CONDITION 9 ok < 0 && UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) EXPR 10 ok < 0 && UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) AND 11 ok < 0 && UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) EXPR 12 ok < 0 FIELD 13 ok LEAF_NODE 14 ok REL_OPERATOR 13 < LEAF_NODE 14 < FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 && EXPR 12 UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) FUNCTION_CALL 13 UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) CALLEE 14 UI_ctrl LEAF_NODE 15 UI_ctrl LEAF_NODE 14 ( ARGUMENT 14 ui FIELD 15 ui LEAF_NODE 16 ui LEAF_NODE 14 , ARGUMENT 14 UI_CTRL_IS_REDOABLE FIELD 15 UI_CTRL_IS_REDOABLE LEAF_NODE 16 UI_CTRL_IS_REDOABLE LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ) LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 ok = UI_process ( ui ) ; EXPR 12 ok = UI_process ( ui ) ASSIGN 13 ok = UI_process ( ui ) LVAL 14 ok FIELD 15 ok LEAF_NODE 16 ok ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 UI_process ( ui ) FUNCTION_CALL 15 UI_process ( ui ) CALLEE 16 UI_process LEAF_NODE 17 UI_process LEAF_NODE 16 ( ARGUMENT 16 ui FIELD 17 ui LEAF_NODE 18 ui LEAF_NODE 16 ) LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 6 ; EXPR_STATEMENT 6 OPENSSL_clear_free ( buff , ( unsigned int ) bufsiz ) ; EXPR 7 OPENSSL_clear_free ( buff , ( unsigned int ) bufsiz ) FUNCTION_CALL 8 OPENSSL_clear_free ( buff , ( unsigned int ) bufsiz ) CALLEE 9 OPENSSL_clear_free LEAF_NODE 10 OPENSSL_clear_free LEAF_NODE 9 ( ARGUMENT 9 buff FIELD 10 buff LEAF_NODE 11 buff LEAF_NODE 9 , ARGUMENT 9 ( unsigned int ) bufsiz LEAF_NODE 10 ( TYPE_NAME 10 unsigned int LEAF_NODE 11 unsigned LEAF_NODE 11 int LEAF_NODE 10 ) FIELD 10 bufsiz LEAF_NODE 11 bufsiz LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok >= 0 EXPR 8 ok >= 0 FIELD 9 ok LEAF_NODE 10 ok REL_OPERATOR 9 >= LEAF_NODE 10 >= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 res = strlen ( buf ) ; EXPR 9 res = strlen ( buf ) ASSIGN 10 res = strlen ( buf ) LVAL 11 res FIELD 12 res LEAF_NODE 13 res ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 strlen ( buf ) FUNCTION_CALL 12 strlen ( buf ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 buf FIELD 14 buf LEAF_NODE 15 buf LEAF_NODE 13 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok == - 1 EXPR 8 ok == - 1 FIELD 9 ok LEAF_NODE 10 ok EQ_OPERATOR 9 == LEAF_NODE 10 == UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_printf ( bio_err , \"User interface error\\n\" ) ; EXPR 10 BIO_printf ( bio_err , \"User interface error\\n\" ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"User interface error\\n\" ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"User interface error\\n\" FIELD 13 \"User interface error\\n\" LEAF_NODE 14 \"User interface error\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ERR_print_errors ( bio_err ) ; EXPR 10 ERR_print_errors ( bio_err ) FUNCTION_CALL 11 ERR_print_errors ( bio_err ) CALLEE 12 ERR_print_errors LEAF_NODE 13 ERR_print_errors LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) ; EXPR 10 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) FUNCTION_CALL 11 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) CALLEE 12 OPENSSL_cleanse LEAF_NODE 13 OPENSSL_cleanse LEAF_NODE 12 ( ARGUMENT 12 buf FIELD 13 buf LEAF_NODE 14 buf LEAF_NODE 12 , ARGUMENT 12 ( unsigned int ) bufsiz LEAF_NODE 13 ( TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int LEAF_NODE 13 ) FIELD 13 bufsiz LEAF_NODE 14 bufsiz LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 res = 0 ; EXPR 10 res = 0 ASSIGN 11 res = 0 LVAL 12 res FIELD 13 res LEAF_NODE 14 res ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok == - 2 EXPR 8 ok == - 2 FIELD 9 ok LEAF_NODE 10 ok EQ_OPERATOR 9 == LEAF_NODE 10 == UNARY_EXPR 9 - 2 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_printf ( bio_err , \"aborted!\\n\" ) ; EXPR 10 BIO_printf ( bio_err , \"aborted!\\n\" ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"aborted!\\n\" ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"aborted!\\n\" FIELD 13 \"aborted!\\n\" LEAF_NODE 14 \"aborted!\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) ; EXPR 10 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) FUNCTION_CALL 11 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) CALLEE 12 OPENSSL_cleanse LEAF_NODE 13 OPENSSL_cleanse LEAF_NODE 12 ( ARGUMENT 12 buf FIELD 13 buf LEAF_NODE 14 buf LEAF_NODE 12 , ARGUMENT 12 ( unsigned int ) bufsiz LEAF_NODE 13 ( TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int LEAF_NODE 13 ) FIELD 13 bufsiz LEAF_NODE 14 bufsiz LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 res = 0 ; EXPR 10 res = 0 ASSIGN 11 res = 0 LVAL 12 res FIELD 13 res LEAF_NODE 14 res ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 UI_free ( ui ) ; EXPR 7 UI_free ( ui ) FUNCTION_CALL 8 UI_free ( ui ) CALLEE 9 UI_free LEAF_NODE 10 UI_free LEAF_NODE 9 ( ARGUMENT 9 ui FIELD 10 ui LEAF_NODE 11 ui LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_free ( prompt ) ; EXPR 7 OPENSSL_free ( prompt ) FUNCTION_CALL 8 OPENSSL_free ( prompt ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 prompt FIELD 10 prompt LEAF_NODE 11 prompt LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return res ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 res EXPR 5 res FIELD 6 res LEAF_NODE 7 res LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 EVP_PKEY * TYPE_NAME 3 EVP_PKEY LEAF_NODE 4 EVP_PKEY LEAF_NODE 3 * FUNCTION_NAME 2 load_key LEAF_NODE 3 load_key PARAMETER_LIST 2 ( const char * file , int format , int maybe_stdin , const char * pass , ENGINE * e , const char * key_descrip ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * file TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 file LEAF_NODE 5 file LEAF_NODE 3 , PARAMETER_DECL 3 int format TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 format LEAF_NODE 5 format LEAF_NODE 3 , PARAMETER_DECL 3 int maybe_stdin TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 maybe_stdin LEAF_NODE 5 maybe_stdin LEAF_NODE 3 , PARAMETER_DECL 3 const char * pass TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 pass LEAF_NODE 5 pass LEAF_NODE 3 , PARAMETER_DECL 3 ENGINE * e TYPE 4 ENGINE * TYPE_NAME 5 ENGINE LEAF_NODE 6 ENGINE POINTER 5 * LEAF_NODE 6 * NAME 4 e LEAF_NODE 5 e LEAF_NODE 3 , PARAMETER_DECL 3 const char * key_descrip TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 key_descrip LEAF_NODE 5 key_descrip LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 BIO * key ; key = NULL ; VAR_DECL 4 BIO * key ; key = NULL TYPE 5 BIO * TYPE_NAME 6 BIO LEAF_NODE 7 BIO POINTER 6 * LEAF_NODE 7 * NAME 5 key LEAF_NODE 6 key LEAF_NODE 5 ; INIT 5 key = NULL ASSIGN 6 key = NULL LVAL 7 key NAME 8 key LEAF_NODE 9 key ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 EVP_PKEY * pkey ; pkey = NULL ; VAR_DECL 4 EVP_PKEY * pkey ; pkey = NULL TYPE 5 EVP_PKEY * TYPE_NAME 6 EVP_PKEY LEAF_NODE 7 EVP_PKEY POINTER 6 * LEAF_NODE 7 * NAME 5 pkey LEAF_NODE 6 pkey LEAF_NODE 5 ; INIT 5 pkey = NULL ASSIGN 6 pkey = NULL LVAL 7 pkey NAME 8 pkey LEAF_NODE 9 pkey ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 PW_CB_DATA cb_data ; VAR_DECL 4 PW_CB_DATA cb_data TYPE 5 PW_CB_DATA TYPE_NAME 6 PW_CB_DATA LEAF_NODE 7 PW_CB_DATA NAME 5 cb_data LEAF_NODE 6 cb_data LEAF_NODE 4 ; EXPR_STATEMENT 3 cb_data . password = pass ; EXPR 4 cb_data . password = pass ASSIGN 5 cb_data . password = pass LVAL 6 cb_data . password FIELD 7 cb_data . password LEAF_NODE 8 cb_data LEAF_NODE 8 . LEAF_NODE 8 password ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 pass FIELD 7 pass LEAF_NODE 8 pass LEAF_NODE 4 ; EXPR_STATEMENT 3 cb_data . prompt_info = file ; EXPR 4 cb_data . prompt_info = file ASSIGN 5 cb_data . prompt_info = file LVAL 6 cb_data . prompt_info FIELD 7 cb_data . prompt_info LEAF_NODE 8 cb_data LEAF_NODE 8 . LEAF_NODE 8 prompt_info ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 file FIELD 7 file LEAF_NODE 8 file LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 file == NULL && ( ! maybe_stdin || format == FORMAT_ENGINE ) EXPR 5 file == NULL && ( ! maybe_stdin || format == FORMAT_ENGINE ) AND 6 file == NULL && ( ! maybe_stdin || format == FORMAT_ENGINE ) EXPR 7 file == NULL FIELD 8 file LEAF_NODE 9 file EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 7 && EXPR 7 ( ! maybe_stdin || format == FORMAT_ENGINE ) LEAF_NODE 8 ( OR 8 ! maybe_stdin || format == FORMAT_ENGINE EXPR 9 ! maybe_stdin UNARY_EXPR 10 ! maybe_stdin UNARY_OPERATOR 11 ! LEAF_NODE 12 ! FIELD 11 maybe_stdin LEAF_NODE 12 maybe_stdin LEAF_NODE 9 || EXPR 9 format == FORMAT_ENGINE FIELD 10 format LEAF_NODE 11 format EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 FORMAT_ENGINE LEAF_NODE 11 FORMAT_ENGINE LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 BIO_printf ( bio_err , \"no keyfile specified\\n\" ) ; EXPR 7 BIO_printf ( bio_err , \"no keyfile specified\\n\" ) FUNCTION_CALL 8 BIO_printf ( bio_err , \"no keyfile specified\\n\" ) CALLEE 9 BIO_printf LEAF_NODE 10 BIO_printf LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 , ARGUMENT 9 \"no keyfile specified\\n\" FIELD 10 \"no keyfile specified\\n\" LEAF_NODE 11 \"no keyfile specified\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto end ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 end LEAF_NODE 8 end LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 format == FORMAT_ENGINE EXPR 5 format == FORMAT_ENGINE FIELD 6 format LEAF_NODE 7 format EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 FORMAT_ENGINE LEAF_NODE 7 FORMAT_ENGINE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 e == NULL EXPR 8 e == NULL FIELD 9 e LEAF_NODE 10 e EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_printf ( bio_err , \"no engine specified\\n\" ) ; EXPR 10 BIO_printf ( bio_err , \"no engine specified\\n\" ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"no engine specified\\n\" ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"no engine specified\\n\" FIELD 13 \"no engine specified\\n\" LEAF_NODE 14 \"no engine specified\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ENGINE_init ( e ) EXPR 11 ENGINE_init ( e ) FUNCTION_CALL 12 ENGINE_init ( e ) CALLEE 13 ENGINE_init LEAF_NODE 14 ENGINE_init LEAF_NODE 13 ( ARGUMENT 13 e FIELD 14 e LEAF_NODE 15 e LEAF_NODE 13 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 pkey = ENGINE_load_private_key ( e , file , ui_method , & cb_data ) ; EXPR 13 pkey = ENGINE_load_private_key ( e , file , ui_method , & cb_data ) ASSIGN 14 pkey = ENGINE_load_private_key ( e , file , ui_method , & cb_data ) LVAL 15 pkey FIELD 16 pkey LEAF_NODE 17 pkey ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ENGINE_load_private_key ( e , file , ui_method , & cb_data ) FUNCTION_CALL 16 ENGINE_load_private_key ( e , file , ui_method , & cb_data ) CALLEE 17 ENGINE_load_private_key LEAF_NODE 18 ENGINE_load_private_key LEAF_NODE 17 ( ARGUMENT 17 e FIELD 18 e LEAF_NODE 19 e LEAF_NODE 17 , ARGUMENT 17 file FIELD 18 file LEAF_NODE 19 file LEAF_NODE 17 , ARGUMENT 17 ui_method FIELD 18 ui_method LEAF_NODE 19 ui_method LEAF_NODE 17 , ARGUMENT 17 & cb_data UNARY_EXPR 18 & cb_data UNARY_OPERATOR 19 & LEAF_NODE 20 & FIELD 19 cb_data LEAF_NODE 20 cb_data LEAF_NODE 17 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 ENGINE_finish ( e ) ; EXPR 13 ENGINE_finish ( e ) FUNCTION_CALL 14 ENGINE_finish ( e ) CALLEE 15 ENGINE_finish LEAF_NODE 16 ENGINE_finish LEAF_NODE 15 ( ARGUMENT 15 e FIELD 16 e LEAF_NODE 17 e LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 pkey == NULL EXPR 11 pkey == NULL FIELD 12 pkey LEAF_NODE 13 pkey EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 BIO_printf ( bio_err , \"cannot load %s from engine\\n\" , key_descrip ) ; EXPR 13 BIO_printf ( bio_err , \"cannot load %s from engine\\n\" , key_descrip ) FUNCTION_CALL 14 BIO_printf ( bio_err , \"cannot load %s from engine\\n\" , key_descrip ) CALLEE 15 BIO_printf LEAF_NODE 16 BIO_printf LEAF_NODE 15 ( ARGUMENT 15 bio_err FIELD 16 bio_err LEAF_NODE 17 bio_err LEAF_NODE 15 , ARGUMENT 15 \"cannot load %s from engine\\n\" FIELD 16 \"cannot load %s from engine\\n\" LEAF_NODE 17 \"cannot load %s from engine\\n\" LEAF_NODE 15 , ARGUMENT 15 key_descrip FIELD 16 key_descrip LEAF_NODE 17 key_descrip LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 ERR_print_errors ( bio_err ) ; EXPR 13 ERR_print_errors ( bio_err ) FUNCTION_CALL 14 ERR_print_errors ( bio_err ) CALLEE 15 ERR_print_errors LEAF_NODE 16 ERR_print_errors LEAF_NODE 15 ( ARGUMENT 15 bio_err FIELD 16 bio_err LEAF_NODE 17 bio_err LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 BIO_printf ( bio_err , \"engines not supported\\n\" ) ; EXPR 10 BIO_printf ( bio_err , \"engines not supported\\n\" ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"engines not supported\\n\" ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"engines not supported\\n\" FIELD 13 \"engines not supported\\n\" LEAF_NODE 14 \"engines not supported\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } JUMP_STATEMENT 6 goto end ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 end LEAF_NODE 8 end LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 file == NULL && maybe_stdin EXPR 5 file == NULL && maybe_stdin AND 6 file == NULL && maybe_stdin EXPR 7 file == NULL FIELD 8 file LEAF_NODE 9 file EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 7 && EXPR 7 maybe_stdin FIELD 8 maybe_stdin LEAF_NODE 9 maybe_stdin LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 unbuffer ( stdin ) ; EXPR 7 unbuffer ( stdin ) FUNCTION_CALL 8 unbuffer ( stdin ) CALLEE 9 unbuffer LEAF_NODE 10 unbuffer LEAF_NODE 9 ( ARGUMENT 9 stdin FIELD 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 key = dup_bio_in ( format ) ; EXPR 7 key = dup_bio_in ( format ) ASSIGN 8 key = dup_bio_in ( format ) LVAL 9 key FIELD 10 key LEAF_NODE 11 key ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dup_bio_in ( format ) FUNCTION_CALL 10 dup_bio_in ( format ) CALLEE 11 dup_bio_in LEAF_NODE 12 dup_bio_in LEAF_NODE 11 ( ARGUMENT 11 format FIELD 12 format LEAF_NODE 13 format LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 key = bio_open_default ( file , 'r' , format ) ; EXPR 7 key = bio_open_default ( file , 'r' , format ) ASSIGN 8 key = bio_open_default ( file , 'r' , format ) LVAL 9 key FIELD 10 key LEAF_NODE 11 key ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 bio_open_default ( file , 'r' , format ) FUNCTION_CALL 10 bio_open_default ( file , 'r' , format ) CALLEE 11 bio_open_default LEAF_NODE 12 bio_open_default LEAF_NODE 11 ( ARGUMENT 11 file FIELD 12 file LEAF_NODE 13 file LEAF_NODE 11 , ARGUMENT 11 'r' FIELD 12 'r' LEAF_NODE 13 'r' LEAF_NODE 11 , ARGUMENT 11 format FIELD 12 format LEAF_NODE 13 format LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 key == NULL EXPR 5 key == NULL FIELD 6 key LEAF_NODE 7 key EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto end ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 end LEAF_NODE 7 end LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 format == FORMAT_ASN1 EXPR 5 format == FORMAT_ASN1 FIELD 6 format LEAF_NODE 7 format EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 FORMAT_ASN1 LEAF_NODE 7 FORMAT_ASN1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 pkey = d2i_PrivateKey_bio ( key , NULL ) ; EXPR 7 pkey = d2i_PrivateKey_bio ( key , NULL ) ASSIGN 8 pkey = d2i_PrivateKey_bio ( key , NULL ) LVAL 9 pkey FIELD 10 pkey LEAF_NODE 11 pkey ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 d2i_PrivateKey_bio ( key , NULL ) FUNCTION_CALL 10 d2i_PrivateKey_bio ( key , NULL ) CALLEE 11 d2i_PrivateKey_bio LEAF_NODE 12 d2i_PrivateKey_bio LEAF_NODE 11 ( ARGUMENT 11 key FIELD 12 key LEAF_NODE 13 key LEAF_NODE 11 , ARGUMENT 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 format == FORMAT_PEM EXPR 7 format == FORMAT_PEM FIELD 8 format LEAF_NODE 9 format EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 FORMAT_PEM LEAF_NODE 9 FORMAT_PEM LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 pkey = PEM_read_bio_PrivateKey ( key , NULL , ( pem_password_cb * ) password_callback , & cb_data ) ; EXPR 9 pkey = PEM_read_bio_PrivateKey ( key , NULL , ( pem_password_cb * ) password_callback , & cb_data ) ASSIGN 10 pkey = PEM_read_bio_PrivateKey ( key , NULL , ( pem_password_cb * ) password_callback , & cb_data ) LVAL 11 pkey FIELD 12 pkey LEAF_NODE 13 pkey ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 PEM_read_bio_PrivateKey ( key , NULL , ( pem_password_cb * ) password_callback , & cb_data ) FUNCTION_CALL 12 PEM_read_bio_PrivateKey ( key , NULL , ( pem_password_cb * ) password_callback , & cb_data ) CALLEE 13 PEM_read_bio_PrivateKey LEAF_NODE 14 PEM_read_bio_PrivateKey LEAF_NODE 13 ( ARGUMENT 13 key FIELD 14 key LEAF_NODE 15 key LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 , ARGUMENT 13 ( pem_password_cb * ) password_callback LEAF_NODE 14 ( TYPE_NAME 14 pem_password_cb LEAF_NODE 15 pem_password_cb LEAF_NODE 14 * LEAF_NODE 14 ) FIELD 14 password_callback LEAF_NODE 15 password_callback LEAF_NODE 13 , ARGUMENT 13 & cb_data UNARY_EXPR 14 & cb_data UNARY_OPERATOR 15 & LEAF_NODE 16 & FIELD 15 cb_data LEAF_NODE 16 cb_data LEAF_NODE 13 ) LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 format == FORMAT_PKCS12 EXPR 7 format == FORMAT_PKCS12 FIELD 8 format LEAF_NODE 9 format EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 FORMAT_PKCS12 LEAF_NODE 9 FORMAT_PKCS12 LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ! load_pkcs12 ( key , key_descrip , ( pem_password_cb * ) password_callback , & cb_data , & pkey , NULL , NULL ) EXPR 10 ! load_pkcs12 ( key , key_descrip , ( pem_password_cb * ) password_callback , & cb_data , & pkey , NULL , NULL ) UNARY_EXPR 11 ! load_pkcs12 ( key , key_descrip , ( pem_password_cb * ) password_callback , & cb_data , & pkey , NULL , NULL ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 load_pkcs12 ( key , key_descrip , ( pem_password_cb * ) password_callback , & cb_data , & pkey , NULL , NULL ) CALLEE 13 load_pkcs12 LEAF_NODE 14 load_pkcs12 LEAF_NODE 13 ( ARGUMENT 13 key FIELD 14 key LEAF_NODE 15 key LEAF_NODE 13 , ARGUMENT 13 key_descrip FIELD 14 key_descrip LEAF_NODE 15 key_descrip LEAF_NODE 13 , ARGUMENT 13 ( pem_password_cb * ) password_callback LEAF_NODE 14 ( TYPE_NAME 14 pem_password_cb LEAF_NODE 15 pem_password_cb LEAF_NODE 14 * LEAF_NODE 14 ) FIELD 14 password_callback LEAF_NODE 15 password_callback LEAF_NODE 13 , ARGUMENT 13 & cb_data UNARY_EXPR 14 & cb_data UNARY_OPERATOR 15 & LEAF_NODE 16 & FIELD 15 cb_data LEAF_NODE 16 cb_data LEAF_NODE 13 , ARGUMENT 13 & pkey UNARY_EXPR 14 & pkey UNARY_OPERATOR 15 & LEAF_NODE 16 & FIELD 15 pkey LEAF_NODE 16 pkey LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 ) LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 goto end ; KEYWORD 11 goto LEAF_NODE 12 goto DESTINATION 11 end LEAF_NODE 12 end LEAF_NODE 11 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 format == FORMAT_MSBLOB EXPR 7 format == FORMAT_MSBLOB FIELD 8 format LEAF_NODE 9 format EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 FORMAT_MSBLOB LEAF_NODE 9 FORMAT_MSBLOB LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 pkey = b2i_PrivateKey_bio ( key ) ; EXPR 9 pkey = b2i_PrivateKey_bio ( key ) ASSIGN 10 pkey = b2i_PrivateKey_bio ( key ) LVAL 11 pkey FIELD 12 pkey LEAF_NODE 13 pkey ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 b2i_PrivateKey_bio ( key ) FUNCTION_CALL 12 b2i_PrivateKey_bio ( key ) CALLEE 13 b2i_PrivateKey_bio LEAF_NODE 14 b2i_PrivateKey_bio LEAF_NODE 13 ( ARGUMENT 13 key FIELD 14 key LEAF_NODE 15 key LEAF_NODE 13 ) LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 format == FORMAT_PVK EXPR 7 format == FORMAT_PVK FIELD 8 format LEAF_NODE 9 format EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 FORMAT_PVK LEAF_NODE 9 FORMAT_PVK LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 pkey = b2i_PVK_bio ( key , ( pem_password_cb * ) password_callback , & cb_data ) ; EXPR 9 pkey = b2i_PVK_bio ( key , ( pem_password_cb * ) password_callback , & cb_data ) ASSIGN 10 pkey = b2i_PVK_bio ( key , ( pem_password_cb * ) password_callback , & cb_data ) LVAL 11 pkey FIELD 12 pkey LEAF_NODE 13 pkey ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 b2i_PVK_bio ( key , ( pem_password_cb * ) password_callback , & cb_data ) FUNCTION_CALL 12 b2i_PVK_bio ( key , ( pem_password_cb * ) password_callback , & cb_data ) CALLEE 13 b2i_PVK_bio LEAF_NODE 14 b2i_PVK_bio LEAF_NODE 13 ( ARGUMENT 13 key FIELD 14 key LEAF_NODE 15 key LEAF_NODE 13 , ARGUMENT 13 ( pem_password_cb * ) password_callback LEAF_NODE 14 ( TYPE_NAME 14 pem_password_cb LEAF_NODE 15 pem_password_cb LEAF_NODE 14 * LEAF_NODE 14 ) FIELD 14 password_callback LEAF_NODE 15 password_callback LEAF_NODE 13 , ARGUMENT 13 & cb_data UNARY_EXPR 14 & cb_data UNARY_OPERATOR 15 & LEAF_NODE 16 & FIELD 15 cb_data LEAF_NODE 16 cb_data LEAF_NODE 13 ) LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 BIO_printf ( bio_err , \"bad input format specified for key file\\n\" ) ; EXPR 7 BIO_printf ( bio_err , \"bad input format specified for key file\\n\" ) FUNCTION_CALL 8 BIO_printf ( bio_err , \"bad input format specified for key file\\n\" ) CALLEE 9 BIO_printf LEAF_NODE 10 BIO_printf LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 , ARGUMENT 9 \"bad input format specified for key file\\n\" FIELD 10 \"bad input format specified for key file\\n\" LEAF_NODE 11 \"bad input format specified for key file\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto end ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 end LEAF_NODE 8 end LEAF_NODE 7 ; LEAF_NODE 5 } LABEL 3 end : LEAF_NODE 4 end LEAF_NODE 4 : EXPR_STATEMENT 3 BIO_free ( key ) ; EXPR 4 BIO_free ( key ) FUNCTION_CALL 5 BIO_free ( key ) CALLEE 6 BIO_free LEAF_NODE 7 BIO_free LEAF_NODE 6 ( ARGUMENT 6 key FIELD 7 key LEAF_NODE 8 key LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 pkey == NULL EXPR 5 pkey == NULL FIELD 6 pkey LEAF_NODE 7 pkey EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 BIO_printf ( bio_err , \"unable to load %s\\n\" , key_descrip ) ; EXPR 7 BIO_printf ( bio_err , \"unable to load %s\\n\" , key_descrip ) FUNCTION_CALL 8 BIO_printf ( bio_err , \"unable to load %s\\n\" , key_descrip ) CALLEE 9 BIO_printf LEAF_NODE 10 BIO_printf LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 , ARGUMENT 9 \"unable to load %s\\n\" FIELD 10 \"unable to load %s\\n\" LEAF_NODE 11 \"unable to load %s\\n\" LEAF_NODE 9 , ARGUMENT 9 key_descrip FIELD 10 key_descrip LEAF_NODE 11 key_descrip LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ERR_print_errors ( bio_err ) ; EXPR 7 ERR_print_errors ( bio_err ) FUNCTION_CALL 8 ERR_print_errors ( bio_err ) CALLEE 9 ERR_print_errors LEAF_NODE 10 ERR_print_errors LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return pkey ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 pkey EXPR 5 pkey FIELD 6 pkey LEAF_NODE 7 pkey LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 46, "project": "openssl_ast_normal_function_test_7", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 rot31l LEAF_NODE 3 rot31l PARAMETER_LIST 2 ( ARIA_u128 * o , const ARIA_u128 * xor , const ARIA_u128 * z ) LEAF_NODE 3 ( PARAMETER_DECL 3 ARIA_u128 * o TYPE 4 ARIA_u128 * TYPE_NAME 5 ARIA_u128 LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 o LEAF_NODE 5 o LEAF_NODE 3 , PARAMETER_DECL 3 const ARIA_u128 * xor TYPE 4 const ARIA_u128 * TYPE_NAME 5 const ARIA_u128 LEAF_NODE 6 const LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 xor LEAF_NODE 5 xor LEAF_NODE 3 , PARAMETER_DECL 3 const ARIA_u128 * z TYPE 4 const ARIA_u128 * TYPE_NAME 5 const ARIA_u128 LEAF_NODE 6 const LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 z LEAF_NODE 5 z LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 rotnr ( 8 * ARIA_BLOCK_SIZE - 31 , o , xor , z ) ; EXPR 4 rotnr ( 8 * ARIA_BLOCK_SIZE - 31 , o , xor , z ) FUNCTION_CALL 5 rotnr ( 8 * ARIA_BLOCK_SIZE - 31 , o , xor , z ) CALLEE 6 rotnr LEAF_NODE 7 rotnr LEAF_NODE 6 ( ARGUMENT 6 8 * ARIA_BLOCK_SIZE - 31 FIELD 7 8 LEAF_NODE 8 8 LEAF_NODE 7 * FIELD 7 ARIA_BLOCK_SIZE LEAF_NODE 8 ARIA_BLOCK_SIZE LEAF_NODE 7 - FIELD 7 31 LEAF_NODE 8 31 LEAF_NODE 6 , ARGUMENT 6 o FIELD 7 o LEAF_NODE 8 o LEAF_NODE 6 , ARGUMENT 6 xor FIELD 7 xor LEAF_NODE 8 xor LEAF_NODE 6 , ARGUMENT 6 z FIELD 7 z LEAF_NODE 8 z LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 47, "project": "openssl_ast_normal_function_test_73", "target": 0}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } ; CLASS_DEF 2 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } CLASS_DEF 3 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } LEAF_NODE 4 struct CLASS_NAME 4 bio_addrinfo_st LEAF_NODE 5 bio_addrinfo_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; SIMPLE_DECL 5 int bai_family ; VAR_DECL 6 int bai_family TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_family LEAF_NODE 8 bai_family LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_socktype ; VAR_DECL 6 int bai_socktype TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_socktype LEAF_NODE 8 bai_socktype LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_protocol ; VAR_DECL 6 int bai_protocol TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_protocol LEAF_NODE 8 bai_protocol LEAF_NODE 6 ; SIMPLE_DECL 5 size_t bai_addrlen ; VAR_DECL 6 size_t bai_addrlen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 bai_addrlen LEAF_NODE 8 bai_addrlen LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr * bai_addr ; VAR_DECL 6 struct sockaddr * bai_addr TYPE 7 struct sockaddr * TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr POINTER 8 * LEAF_NODE 9 * NAME 7 bai_addr LEAF_NODE 8 bai_addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct bio_addrinfo_st * bai_next ; VAR_DECL 6 struct bio_addrinfo_st * bai_next TYPE 7 struct bio_addrinfo_st * TYPE_NAME 8 struct bio_addrinfo_st LEAF_NODE 9 struct LEAF_NODE 9 bio_addrinfo_st POINTER 8 * LEAF_NODE 9 * NAME 7 bai_next LEAF_NODE 8 bai_next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BIO_ADDRINFO ; VAR_DECL 2 struct bio_addrinfo_st BIO_ADDRINFO TYPE 3 struct bio_addrinfo_st TYPE_NAME 4 struct bio_addrinfo_st LEAF_NODE 5 struct LEAF_NODE 5 bio_addrinfo_st NAME 3 BIO_ADDRINFO LEAF_NODE 4 BIO_ADDRINFO LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t socklen_t ; VAR_DECL 2 uint32_t socklen_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 socklen_t LEAF_NODE 4 socklen_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } ; CLASS_DEF 2 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } CLASS_DEF 3 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } LEAF_NODE 4 enum CLASS_NAME 4 BIO_hostserv_priorities LEAF_NODE 5 BIO_hostserv_priorities LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV LEAF_NODE 5 BIO_PARSE_PRIO_HOST LEAF_NODE 5 , LEAF_NODE 5 BIO_PARSE_PRIO_SERV LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } ; CLASS_DEF 2 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } CLASS_DEF 3 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } LEAF_NODE 4 enum CLASS_NAME 4 BIO_lookup_type LEAF_NODE 5 BIO_lookup_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER LEAF_NODE 5 BIO_LOOKUP_CLIENT LEAF_NODE 5 , LEAF_NODE 5 BIO_LOOKUP_SERVER LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 BIO_connect LEAF_NODE 3 BIO_connect PARAMETER_LIST 2 ( int sock , const BIO_ADDR * addr , int options ) LEAF_NODE 3 ( PARAMETER_DECL 3 int sock TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 sock LEAF_NODE 5 sock LEAF_NODE 3 , PARAMETER_DECL 3 const BIO_ADDR * addr TYPE 4 const BIO_ADDR * TYPE_NAME 5 const BIO_ADDR LEAF_NODE 6 const LEAF_NODE 6 BIO_ADDR POINTER 5 * LEAF_NODE 6 * NAME 4 addr LEAF_NODE 5 addr LEAF_NODE 3 , PARAMETER_DECL 3 int options TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 options LEAF_NODE 5 options LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 const int on ; on = 1 ; VAR_DECL 4 const int on ; on = 1 TYPE 5 const int TYPE_NAME 6 const int LEAF_NODE 7 const LEAF_NODE 7 int NAME 5 on LEAF_NODE 6 on LEAF_NODE 5 ; INIT 5 on = 1 ASSIGN 6 on = 1 LVAL 7 on NAME 8 on LEAF_NODE 9 on ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 sock == - 1 EXPR 5 sock == - 1 FIELD 6 sock LEAF_NODE 7 sock EQ_OPERATOR 6 == LEAF_NODE 7 == UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 BIOerr ( BIO_F_BIO_CONNECT , BIO_R_INVALID_SOCKET ) ; EXPR 7 BIOerr ( BIO_F_BIO_CONNECT , BIO_R_INVALID_SOCKET ) FUNCTION_CALL 8 BIOerr ( BIO_F_BIO_CONNECT , BIO_R_INVALID_SOCKET ) CALLEE 9 BIOerr LEAF_NODE 10 BIOerr LEAF_NODE 9 ( ARGUMENT 9 BIO_F_BIO_CONNECT FIELD 10 BIO_F_BIO_CONNECT LEAF_NODE 11 BIO_F_BIO_CONNECT LEAF_NODE 9 , ARGUMENT 9 BIO_R_INVALID_SOCKET FIELD 10 BIO_R_INVALID_SOCKET LEAF_NODE 11 BIO_R_INVALID_SOCKET LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! BIO_socket_nbio ( sock , ( options & BIO_SOCK_NONBLOCK ) != 0 ) EXPR 5 ! BIO_socket_nbio ( sock , ( options & BIO_SOCK_NONBLOCK ) != 0 ) UNARY_EXPR 6 ! BIO_socket_nbio ( sock , ( options & BIO_SOCK_NONBLOCK ) != 0 ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 BIO_socket_nbio ( sock , ( options & BIO_SOCK_NONBLOCK ) != 0 ) CALLEE 8 BIO_socket_nbio LEAF_NODE 9 BIO_socket_nbio LEAF_NODE 8 ( ARGUMENT 8 sock FIELD 9 sock LEAF_NODE 10 sock LEAF_NODE 8 , ARGUMENT 8 ( options & BIO_SOCK_NONBLOCK ) != 0 LEAF_NODE 9 ( FIELD 9 options LEAF_NODE 10 options LEAF_NODE 9 & FIELD 9 BIO_SOCK_NONBLOCK LEAF_NODE 10 BIO_SOCK_NONBLOCK LEAF_NODE 9 ) EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 options & BIO_SOCK_KEEPALIVE EXPR 5 options & BIO_SOCK_KEEPALIVE FIELD 6 options LEAF_NODE 7 options LEAF_NODE 6 & FIELD 6 BIO_SOCK_KEEPALIVE LEAF_NODE 7 BIO_SOCK_KEEPALIVE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 setsockopt ( sock , SOL_SOCKET , SO_KEEPALIVE , ( const void * ) & on , sizeof ( on ) ) != 0 EXPR 8 setsockopt ( sock , SOL_SOCKET , SO_KEEPALIVE , ( const void * ) & on , sizeof ( on ) ) != 0 FUNCTION_CALL 9 setsockopt ( sock , SOL_SOCKET , SO_KEEPALIVE , ( const void * ) & on , sizeof ( on ) ) CALLEE 10 setsockopt LEAF_NODE 11 setsockopt LEAF_NODE 10 ( ARGUMENT 10 sock FIELD 11 sock LEAF_NODE 12 sock LEAF_NODE 10 , ARGUMENT 10 SOL_SOCKET FIELD 11 SOL_SOCKET LEAF_NODE 12 SOL_SOCKET LEAF_NODE 10 , ARGUMENT 10 SO_KEEPALIVE FIELD 11 SO_KEEPALIVE LEAF_NODE 12 SO_KEEPALIVE LEAF_NODE 10 , ARGUMENT 10 ( const void * ) & on LEAF_NODE 11 ( TYPE_NAME 11 const void LEAF_NODE 12 const LEAF_NODE 12 void LEAF_NODE 11 * LEAF_NODE 11 ) UNARY_EXPR 11 & on UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 on LEAF_NODE 13 on LEAF_NODE 10 , ARGUMENT 10 sizeof ( on ) FUNCTION_CALL 11 sizeof ( on ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 on FIELD 13 on LEAF_NODE 14 on LEAF_NODE 12 ) LEAF_NODE 10 ) EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SYSerr ( SYS_F_SETSOCKOPT , get_last_socket_error ( ) ) ; EXPR 10 SYSerr ( SYS_F_SETSOCKOPT , get_last_socket_error ( ) ) FUNCTION_CALL 11 SYSerr ( SYS_F_SETSOCKOPT , get_last_socket_error ( ) ) CALLEE 12 SYSerr LEAF_NODE 13 SYSerr LEAF_NODE 12 ( ARGUMENT 12 SYS_F_SETSOCKOPT FIELD 13 SYS_F_SETSOCKOPT LEAF_NODE 14 SYS_F_SETSOCKOPT LEAF_NODE 12 , ARGUMENT 12 get_last_socket_error ( ) FUNCTION_CALL 13 get_last_socket_error ( ) CALLEE 14 get_last_socket_error LEAF_NODE 15 get_last_socket_error LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 BIOerr ( BIO_F_BIO_CONNECT , BIO_R_UNABLE_TO_KEEPALIVE ) ; EXPR 10 BIOerr ( BIO_F_BIO_CONNECT , BIO_R_UNABLE_TO_KEEPALIVE ) FUNCTION_CALL 11 BIOerr ( BIO_F_BIO_CONNECT , BIO_R_UNABLE_TO_KEEPALIVE ) CALLEE 12 BIOerr LEAF_NODE 13 BIOerr LEAF_NODE 12 ( ARGUMENT 12 BIO_F_BIO_CONNECT FIELD 13 BIO_F_BIO_CONNECT LEAF_NODE 14 BIO_F_BIO_CONNECT LEAF_NODE 12 , ARGUMENT 12 BIO_R_UNABLE_TO_KEEPALIVE FIELD 13 BIO_R_UNABLE_TO_KEEPALIVE LEAF_NODE 14 BIO_R_UNABLE_TO_KEEPALIVE LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return 0 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 0 EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 options & BIO_SOCK_NODELAY EXPR 5 options & BIO_SOCK_NODELAY FIELD 6 options LEAF_NODE 7 options LEAF_NODE 6 & FIELD 6 BIO_SOCK_NODELAY LEAF_NODE 7 BIO_SOCK_NODELAY LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 setsockopt ( sock , IPPROTO_TCP , TCP_NODELAY , ( const void * ) & on , sizeof ( on ) ) != 0 EXPR 8 setsockopt ( sock , IPPROTO_TCP , TCP_NODELAY , ( const void * ) & on , sizeof ( on ) ) != 0 FUNCTION_CALL 9 setsockopt ( sock , IPPROTO_TCP , TCP_NODELAY , ( const void * ) & on , sizeof ( on ) ) CALLEE 10 setsockopt LEAF_NODE 11 setsockopt LEAF_NODE 10 ( ARGUMENT 10 sock FIELD 11 sock LEAF_NODE 12 sock LEAF_NODE 10 , ARGUMENT 10 IPPROTO_TCP FIELD 11 IPPROTO_TCP LEAF_NODE 12 IPPROTO_TCP LEAF_NODE 10 , ARGUMENT 10 TCP_NODELAY FIELD 11 TCP_NODELAY LEAF_NODE 12 TCP_NODELAY LEAF_NODE 10 , ARGUMENT 10 ( const void * ) & on LEAF_NODE 11 ( TYPE_NAME 11 const void LEAF_NODE 12 const LEAF_NODE 12 void LEAF_NODE 11 * LEAF_NODE 11 ) UNARY_EXPR 11 & on UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 on LEAF_NODE 13 on LEAF_NODE 10 , ARGUMENT 10 sizeof ( on ) FUNCTION_CALL 11 sizeof ( on ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 on FIELD 13 on LEAF_NODE 14 on LEAF_NODE 12 ) LEAF_NODE 10 ) EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SYSerr ( SYS_F_SETSOCKOPT , get_last_socket_error ( ) ) ; EXPR 10 SYSerr ( SYS_F_SETSOCKOPT , get_last_socket_error ( ) ) FUNCTION_CALL 11 SYSerr ( SYS_F_SETSOCKOPT , get_last_socket_error ( ) ) CALLEE 12 SYSerr LEAF_NODE 13 SYSerr LEAF_NODE 12 ( ARGUMENT 12 SYS_F_SETSOCKOPT FIELD 13 SYS_F_SETSOCKOPT LEAF_NODE 14 SYS_F_SETSOCKOPT LEAF_NODE 12 , ARGUMENT 12 get_last_socket_error ( ) FUNCTION_CALL 13 get_last_socket_error ( ) CALLEE 14 get_last_socket_error LEAF_NODE 15 get_last_socket_error LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 BIOerr ( BIO_F_BIO_CONNECT , BIO_R_UNABLE_TO_NODELAY ) ; EXPR 10 BIOerr ( BIO_F_BIO_CONNECT , BIO_R_UNABLE_TO_NODELAY ) FUNCTION_CALL 11 BIOerr ( BIO_F_BIO_CONNECT , BIO_R_UNABLE_TO_NODELAY ) CALLEE 12 BIOerr LEAF_NODE 13 BIOerr LEAF_NODE 12 ( ARGUMENT 12 BIO_F_BIO_CONNECT FIELD 13 BIO_F_BIO_CONNECT LEAF_NODE 14 BIO_F_BIO_CONNECT LEAF_NODE 12 , ARGUMENT 12 BIO_R_UNABLE_TO_NODELAY FIELD 13 BIO_R_UNABLE_TO_NODELAY LEAF_NODE 14 BIO_R_UNABLE_TO_NODELAY LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return 0 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 0 EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 connect ( sock , BIO_ADDR_sockaddr ( addr ) , BIO_ADDR_sockaddr_size ( addr ) ) == - 1 EXPR 5 connect ( sock , BIO_ADDR_sockaddr ( addr ) , BIO_ADDR_sockaddr_size ( addr ) ) == - 1 FUNCTION_CALL 6 connect ( sock , BIO_ADDR_sockaddr ( addr ) , BIO_ADDR_sockaddr_size ( addr ) ) CALLEE 7 connect LEAF_NODE 8 connect LEAF_NODE 7 ( ARGUMENT 7 sock FIELD 8 sock LEAF_NODE 9 sock LEAF_NODE 7 , ARGUMENT 7 BIO_ADDR_sockaddr ( addr ) FUNCTION_CALL 8 BIO_ADDR_sockaddr ( addr ) CALLEE 9 BIO_ADDR_sockaddr LEAF_NODE 10 BIO_ADDR_sockaddr LEAF_NODE 9 ( ARGUMENT 9 addr FIELD 10 addr LEAF_NODE 11 addr LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 BIO_ADDR_sockaddr_size ( addr ) FUNCTION_CALL 8 BIO_ADDR_sockaddr_size ( addr ) CALLEE 9 BIO_ADDR_sockaddr_size LEAF_NODE 10 BIO_ADDR_sockaddr_size LEAF_NODE 9 ( ARGUMENT 9 addr FIELD 10 addr LEAF_NODE 11 addr LEAF_NODE 9 ) LEAF_NODE 7 ) EQ_OPERATOR 6 == LEAF_NODE 7 == UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! BIO_sock_should_retry ( - 1 ) EXPR 8 ! BIO_sock_should_retry ( - 1 ) UNARY_EXPR 9 ! BIO_sock_should_retry ( - 1 ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 BIO_sock_should_retry ( - 1 ) CALLEE 11 BIO_sock_should_retry LEAF_NODE 12 BIO_sock_should_retry LEAF_NODE 11 ( ARGUMENT 11 - 1 UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SYSerr ( SYS_F_CONNECT , get_last_socket_error ( ) ) ; EXPR 10 SYSerr ( SYS_F_CONNECT , get_last_socket_error ( ) ) FUNCTION_CALL 11 SYSerr ( SYS_F_CONNECT , get_last_socket_error ( ) ) CALLEE 12 SYSerr LEAF_NODE 13 SYSerr LEAF_NODE 12 ( ARGUMENT 12 SYS_F_CONNECT FIELD 13 SYS_F_CONNECT LEAF_NODE 14 SYS_F_CONNECT LEAF_NODE 12 , ARGUMENT 12 get_last_socket_error ( ) FUNCTION_CALL 13 get_last_socket_error ( ) CALLEE 14 get_last_socket_error LEAF_NODE 15 get_last_socket_error LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 BIOerr ( BIO_F_BIO_CONNECT , BIO_R_CONNECT_ERROR ) ; EXPR 10 BIOerr ( BIO_F_BIO_CONNECT , BIO_R_CONNECT_ERROR ) FUNCTION_CALL 11 BIOerr ( BIO_F_BIO_CONNECT , BIO_R_CONNECT_ERROR ) CALLEE 12 BIOerr LEAF_NODE 13 BIOerr LEAF_NODE 12 ( ARGUMENT 12 BIO_F_BIO_CONNECT FIELD 13 BIO_F_BIO_CONNECT LEAF_NODE 14 BIO_F_BIO_CONNECT LEAF_NODE 12 , ARGUMENT 12 BIO_R_CONNECT_ERROR FIELD 13 BIO_R_CONNECT_ERROR LEAF_NODE 14 BIO_R_CONNECT_ERROR LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 48, "project": "openssl_ast_normal_function_test_158", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ssl3_read_n LEAF_NODE 3 ssl3_read_n PARAMETER_LIST 2 ( SSL * s , int n , int max , int extend ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 int n TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 n LEAF_NODE 5 n LEAF_NODE 3 , PARAMETER_DECL 3 int max TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 max LEAF_NODE 5 max LEAF_NODE 3 , PARAMETER_DECL 3 int extend TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 extend LEAF_NODE 5 extend LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int i , int len , int left ; INIT_DECL_LIST 4 int i , int len , int left VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 , INIT_DECL_LIST 5 int len , int left VAR_DECL 6 int len TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 len LEAF_NODE 8 len LEAF_NODE 6 , VAR_DECL 6 int left TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 left LEAF_NODE 8 left LEAF_NODE 4 ; SIMPLE_DECL 3 long align ; align = 0 ; VAR_DECL 4 long align ; align = 0 TYPE 5 long TYPE_NAME 6 long LEAF_NODE 7 long NAME 5 align LEAF_NODE 6 align LEAF_NODE 5 ; INIT 5 align = 0 ASSIGN 6 align = 0 LVAL 7 align NAME 8 align LEAF_NODE 9 align ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * pkt ; VAR_DECL 4 unsigned char * pkt TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 pkt LEAF_NODE 6 pkt LEAF_NODE 4 ; SIMPLE_DECL 3 SSL3_BUFFER * rb ; VAR_DECL 4 SSL3_BUFFER * rb TYPE 5 SSL3_BUFFER * TYPE_NAME 6 SSL3_BUFFER LEAF_NODE 7 SSL3_BUFFER POINTER 6 * LEAF_NODE 7 * NAME 5 rb LEAF_NODE 6 rb LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 n <= 0 EXPR 5 n <= 0 FIELD 6 n LEAF_NODE 7 n REL_OPERATOR 6 <= LEAF_NODE 7 <= FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return n ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 n EXPR 7 n FIELD 8 n LEAF_NODE 9 n LEAF_NODE 6 ; EXPR_STATEMENT 3 rb = & ( s -> s3 -> rbuf ) ; EXPR 4 rb = & ( s -> s3 -> rbuf ) ASSIGN 5 rb = & ( s -> s3 -> rbuf ) LVAL 6 rb FIELD 7 rb LEAF_NODE 8 rb ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 & ( s -> s3 -> rbuf ) UNARY_EXPR 7 & ( s -> s3 -> rbuf ) UNARY_OPERATOR 8 & LEAF_NODE 9 & LEAF_NODE 8 ( FIELD 8 s -> s3 -> rbuf LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 s3 LEAF_NODE 9 -> LEAF_NODE 9 rbuf LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 rb -> buf == NULL EXPR 5 rb -> buf == NULL FIELD 6 rb -> buf LEAF_NODE 7 rb LEAF_NODE 7 -> LEAF_NODE 7 buf EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ! ssl3_setup_read_buffer ( s ) EXPR 7 ! ssl3_setup_read_buffer ( s ) UNARY_EXPR 8 ! ssl3_setup_read_buffer ( s ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 ssl3_setup_read_buffer ( s ) CALLEE 10 ssl3_setup_read_buffer LEAF_NODE 11 ssl3_setup_read_buffer LEAF_NODE 10 ( ARGUMENT 10 s FIELD 11 s LEAF_NODE 12 s LEAF_NODE 10 ) LEAF_NODE 6 ) STATEMENTS 6 JUMP_STATEMENT 7 return - 1 ; KEYWORD 8 return LEAF_NODE 9 return DESTINATION 8 - 1 EXPR 9 - 1 UNARY_EXPR 10 - 1 UNARY_OPERATOR 11 - LEAF_NODE 12 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 8 ; EXPR_STATEMENT 3 left = rb -> left ; EXPR 4 left = rb -> left ASSIGN 5 left = rb -> left LVAL 6 left FIELD 7 left LEAF_NODE 8 left ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 rb -> left FIELD 7 rb -> left LEAF_NODE 8 rb LEAF_NODE 8 -> LEAF_NODE 8 left LEAF_NODE 4 ; EXPR_STATEMENT 3 align = ( long ) rb -> buf + SSL3_RT_HEADER_LENGTH ; EXPR 4 align = ( long ) rb -> buf + SSL3_RT_HEADER_LENGTH ASSIGN 5 align = ( long ) rb -> buf + SSL3_RT_HEADER_LENGTH LVAL 6 align FIELD 7 align LEAF_NODE 8 align ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( long ) rb -> buf + SSL3_RT_HEADER_LENGTH LEAF_NODE 7 ( TYPE_NAME 7 long LEAF_NODE 8 long LEAF_NODE 7 ) FIELD 7 rb -> buf LEAF_NODE 8 rb LEAF_NODE 8 -> LEAF_NODE 8 buf LEAF_NODE 7 + FIELD 7 SSL3_RT_HEADER_LENGTH LEAF_NODE 8 SSL3_RT_HEADER_LENGTH LEAF_NODE 4 ; EXPR_STATEMENT 3 align = ( - align ) & ( SSL3_ALIGN_PAYLOAD - 1 ) ; EXPR 4 align = ( - align ) & ( SSL3_ALIGN_PAYLOAD - 1 ) ASSIGN 5 align = ( - align ) & ( SSL3_ALIGN_PAYLOAD - 1 ) LVAL 6 align FIELD 7 align LEAF_NODE 8 align ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( - align ) & ( SSL3_ALIGN_PAYLOAD - 1 ) LEAF_NODE 7 ( UNARY_EXPR 7 - align UNARY_OPERATOR 8 - LEAF_NODE 9 - FIELD 8 align LEAF_NODE 9 align LEAF_NODE 7 ) LEAF_NODE 7 & LEAF_NODE 7 ( FIELD 7 SSL3_ALIGN_PAYLOAD LEAF_NODE 8 SSL3_ALIGN_PAYLOAD LEAF_NODE 7 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 7 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! extend EXPR 5 ! extend UNARY_EXPR 6 ! extend UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 extend LEAF_NODE 8 extend LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 left == 0 EXPR 8 left == 0 FIELD 9 left LEAF_NODE 10 left EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 rb -> offset = align ; EXPR 9 rb -> offset = align ASSIGN 10 rb -> offset = align LVAL 11 rb -> offset FIELD 12 rb -> offset LEAF_NODE 13 rb LEAF_NODE 13 -> LEAF_NODE 13 offset ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 align FIELD 12 align LEAF_NODE 13 align LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 align != 0 && left >= SSL3_RT_HEADER_LENGTH EXPR 10 align != 0 && left >= SSL3_RT_HEADER_LENGTH AND 11 align != 0 && left >= SSL3_RT_HEADER_LENGTH EXPR 12 align != 0 FIELD 13 align LEAF_NODE 14 align EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 && EXPR 12 left >= SSL3_RT_HEADER_LENGTH FIELD 13 left LEAF_NODE 14 left REL_OPERATOR 13 >= LEAF_NODE 14 >= FIELD 13 SSL3_RT_HEADER_LENGTH LEAF_NODE 14 SSL3_RT_HEADER_LENGTH LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 pkt = rb -> buf + rb -> offset ; EXPR 12 pkt = rb -> buf + rb -> offset ASSIGN 13 pkt = rb -> buf + rb -> offset LVAL 14 pkt FIELD 15 pkt LEAF_NODE 16 pkt ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 rb -> buf + rb -> offset FIELD 15 rb -> buf LEAF_NODE 16 rb LEAF_NODE 16 -> LEAF_NODE 16 buf LEAF_NODE 15 + FIELD 15 rb -> offset LEAF_NODE 16 rb LEAF_NODE 16 -> LEAF_NODE 16 offset LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 pkt [ 0 ] == SSL3_RT_APPLICATION_DATA && ( pkt [ 3 ] << 8 | pkt [ 4 ] ) >= 128 EXPR 13 pkt [ 0 ] == SSL3_RT_APPLICATION_DATA && ( pkt [ 3 ] << 8 | pkt [ 4 ] ) >= 128 AND 14 pkt [ 0 ] == SSL3_RT_APPLICATION_DATA && ( pkt [ 3 ] << 8 | pkt [ 4 ] ) >= 128 EXPR 15 pkt [ 0 ] == SSL3_RT_APPLICATION_DATA FIELD 16 pkt [ 0 ] LEAF_NODE 17 pkt LEAF_NODE 17 [ EXPR 17 0 FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 17 ] EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 SSL3_RT_APPLICATION_DATA LEAF_NODE 17 SSL3_RT_APPLICATION_DATA LEAF_NODE 15 && EXPR 15 ( pkt [ 3 ] << 8 | pkt [ 4 ] ) >= 128 LEAF_NODE 16 ( BIT_OR 16 pkt [ 3 ] << 8 | pkt [ 4 ] BIT_OR_ELEM 17 pkt [ 3 ] << 8 FIELD 18 pkt [ 3 ] LEAF_NODE 19 pkt LEAF_NODE 19 [ EXPR 19 3 FIELD 20 3 LEAF_NODE 21 3 LEAF_NODE 19 ] LEAF_NODE 18 << FIELD 18 8 LEAF_NODE 19 8 LEAF_NODE 17 | BIT_OR_ELEM 17 pkt [ 4 ] FIELD 18 pkt [ 4 ] LEAF_NODE 19 pkt LEAF_NODE 19 [ EXPR 19 4 FIELD 20 4 LEAF_NODE 21 4 LEAF_NODE 19 ] LEAF_NODE 16 ) REL_OPERATOR 16 >= LEAF_NODE 17 >= FIELD 16 128 LEAF_NODE 17 128 LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 memmove ( rb -> buf + align , pkt , left ) ; EXPR 15 memmove ( rb -> buf + align , pkt , left ) FUNCTION_CALL 16 memmove ( rb -> buf + align , pkt , left ) CALLEE 17 memmove LEAF_NODE 18 memmove LEAF_NODE 17 ( ARGUMENT 17 rb -> buf + align FIELD 18 rb -> buf LEAF_NODE 19 rb LEAF_NODE 19 -> LEAF_NODE 19 buf LEAF_NODE 18 + FIELD 18 align LEAF_NODE 19 align LEAF_NODE 17 , ARGUMENT 17 pkt FIELD 18 pkt LEAF_NODE 19 pkt LEAF_NODE 17 , ARGUMENT 17 left FIELD 18 left LEAF_NODE 19 left LEAF_NODE 17 ) LEAF_NODE 15 ; EXPR_STATEMENT 14 rb -> offset = align ; EXPR 15 rb -> offset = align ASSIGN 16 rb -> offset = align LVAL 17 rb -> offset FIELD 18 rb -> offset LEAF_NODE 19 rb LEAF_NODE 19 -> LEAF_NODE 19 offset ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 align FIELD 18 align LEAF_NODE 19 align LEAF_NODE 15 ; LEAF_NODE 13 } LEAF_NODE 10 } EXPR_STATEMENT 6 s -> packet = rb -> buf + rb -> offset ; EXPR 7 s -> packet = rb -> buf + rb -> offset ASSIGN 8 s -> packet = rb -> buf + rb -> offset LVAL 9 s -> packet FIELD 10 s -> packet LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 packet ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 rb -> buf + rb -> offset FIELD 10 rb -> buf LEAF_NODE 11 rb LEAF_NODE 11 -> LEAF_NODE 11 buf LEAF_NODE 10 + FIELD 10 rb -> offset LEAF_NODE 11 rb LEAF_NODE 11 -> LEAF_NODE 11 offset LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> packet_length = 0 ; EXPR 7 s -> packet_length = 0 ASSIGN 8 s -> packet_length = 0 LVAL 9 s -> packet_length FIELD 10 s -> packet_length LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 packet_length ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 SSL_version ( s ) == DTLS1_VERSION || SSL_version ( s ) == DTLS1_BAD_VER EXPR 5 SSL_version ( s ) == DTLS1_VERSION || SSL_version ( s ) == DTLS1_BAD_VER OR 6 SSL_version ( s ) == DTLS1_VERSION || SSL_version ( s ) == DTLS1_BAD_VER EXPR 7 SSL_version ( s ) == DTLS1_VERSION FUNCTION_CALL 8 SSL_version ( s ) CALLEE 9 SSL_version LEAF_NODE 10 SSL_version LEAF_NODE 9 ( ARGUMENT 9 s FIELD 10 s LEAF_NODE 11 s LEAF_NODE 9 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 DTLS1_VERSION LEAF_NODE 9 DTLS1_VERSION LEAF_NODE 7 || EXPR 7 SSL_version ( s ) == DTLS1_BAD_VER FUNCTION_CALL 8 SSL_version ( s ) CALLEE 9 SSL_version LEAF_NODE 10 SSL_version LEAF_NODE 9 ( ARGUMENT 9 s FIELD 10 s LEAF_NODE 11 s LEAF_NODE 9 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 DTLS1_BAD_VER LEAF_NODE 9 DTLS1_BAD_VER LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 left > 0 && n > left EXPR 8 left > 0 && n > left AND 9 left > 0 && n > left EXPR 10 left > 0 FIELD 11 left LEAF_NODE 12 left REL_OPERATOR 11 > LEAF_NODE 12 > FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 && EXPR 10 n > left FIELD 11 n LEAF_NODE 12 n REL_OPERATOR 11 > LEAF_NODE 12 > FIELD 11 left LEAF_NODE 12 left LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 n = left ; EXPR 9 n = left ASSIGN 10 n = left LVAL 11 n FIELD 12 n LEAF_NODE 13 n ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 left FIELD 12 left LEAF_NODE 13 left LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 left >= n EXPR 5 left >= n FIELD 6 left LEAF_NODE 7 left REL_OPERATOR 6 >= LEAF_NODE 7 >= FIELD 6 n LEAF_NODE 7 n LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 s -> packet_length += n ; EXPR 7 s -> packet_length += n ASSIGN 8 s -> packet_length += n LVAL 9 s -> packet_length FIELD 10 s -> packet_length LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 packet_length ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 n FIELD 10 n LEAF_NODE 11 n LEAF_NODE 7 ; EXPR_STATEMENT 6 rb -> left = left - n ; EXPR 7 rb -> left = left - n ASSIGN 8 rb -> left = left - n LVAL 9 rb -> left FIELD 10 rb -> left LEAF_NODE 11 rb LEAF_NODE 11 -> LEAF_NODE 11 left ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 left - n FIELD 10 left LEAF_NODE 11 left LEAF_NODE 10 - FIELD 10 n LEAF_NODE 11 n LEAF_NODE 7 ; EXPR_STATEMENT 6 rb -> offset += n ; EXPR 7 rb -> offset += n ASSIGN 8 rb -> offset += n LVAL 9 rb -> offset FIELD 10 rb -> offset LEAF_NODE 11 rb LEAF_NODE 11 -> LEAF_NODE 11 offset ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 n FIELD 10 n LEAF_NODE 11 n LEAF_NODE 7 ; LEAF_NODE 6 return LEAF_NODE 6 ( LEAF_NODE 6 n LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 5 } EXPR_STATEMENT 3 len = s -> packet_length ; EXPR 4 len = s -> packet_length ASSIGN 5 len = s -> packet_length LVAL 6 len FIELD 7 len LEAF_NODE 8 len ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 s -> packet_length FIELD 7 s -> packet_length LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 packet_length LEAF_NODE 4 ; EXPR_STATEMENT 3 pkt = rb -> buf + align ; EXPR 4 pkt = rb -> buf + align ASSIGN 5 pkt = rb -> buf + align LVAL 6 pkt FIELD 7 pkt LEAF_NODE 8 pkt ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 rb -> buf + align FIELD 7 rb -> buf LEAF_NODE 8 rb LEAF_NODE 8 -> LEAF_NODE 8 buf LEAF_NODE 7 + FIELD 7 align LEAF_NODE 8 align LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> packet != pkt EXPR 5 s -> packet != pkt FIELD 6 s -> packet LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 packet EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 pkt LEAF_NODE 7 pkt LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 memmove ( pkt , s -> packet , len + left ) ; EXPR 7 memmove ( pkt , s -> packet , len + left ) FUNCTION_CALL 8 memmove ( pkt , s -> packet , len + left ) CALLEE 9 memmove LEAF_NODE 10 memmove LEAF_NODE 9 ( ARGUMENT 9 pkt FIELD 10 pkt LEAF_NODE 11 pkt LEAF_NODE 9 , ARGUMENT 9 s -> packet FIELD 10 s -> packet LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 packet LEAF_NODE 9 , ARGUMENT 9 len + left FIELD 10 len LEAF_NODE 11 len LEAF_NODE 10 + FIELD 10 left LEAF_NODE 11 left LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> packet = pkt ; EXPR 7 s -> packet = pkt ASSIGN 8 s -> packet = pkt LVAL 9 s -> packet FIELD 10 s -> packet LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 packet ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 pkt FIELD 10 pkt LEAF_NODE 11 pkt LEAF_NODE 7 ; EXPR_STATEMENT 6 rb -> offset = len + align ; EXPR 7 rb -> offset = len + align ASSIGN 8 rb -> offset = len + align LVAL 9 rb -> offset FIELD 10 rb -> offset LEAF_NODE 11 rb LEAF_NODE 11 -> LEAF_NODE 11 offset ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 len + align FIELD 10 len LEAF_NODE 11 len LEAF_NODE 10 + FIELD 10 align LEAF_NODE 11 align LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 n > ( int ) ( rb -> len - rb -> offset ) EXPR 5 n > ( int ) ( rb -> len - rb -> offset ) FIELD 6 n LEAF_NODE 7 n REL_OPERATOR 6 > LEAF_NODE 7 > LEAF_NODE 6 ( TYPE_NAME 6 int LEAF_NODE 7 int LEAF_NODE 6 ) LEAF_NODE 6 ( FIELD 6 rb -> len LEAF_NODE 7 rb LEAF_NODE 7 -> LEAF_NODE 7 len LEAF_NODE 6 - FIELD 6 rb -> offset LEAF_NODE 7 rb LEAF_NODE 7 -> LEAF_NODE 7 offset LEAF_NODE 6 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL3_READ_N , ERR_R_INTERNAL_ERROR ) ; EXPR 7 SSLerr ( SSL_F_SSL3_READ_N , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL3_READ_N , ERR_R_INTERNAL_ERROR ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL3_READ_N FIELD 10 SSL_F_SSL3_READ_N LEAF_NODE 11 SSL_F_SSL3_READ_N LEAF_NODE 9 , ARGUMENT 9 ERR_R_INTERNAL_ERROR FIELD 10 ERR_R_INTERNAL_ERROR LEAF_NODE 11 ERR_R_INTERNAL_ERROR LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! s -> read_ahead EXPR 5 ! s -> read_ahead UNARY_EXPR 6 ! s -> read_ahead UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 s -> read_ahead LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 read_ahead LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 max = n ; EXPR 6 max = n ASSIGN 7 max = n LVAL 8 max FIELD 9 max LEAF_NODE 10 max ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 n FIELD 9 n LEAF_NODE 10 n LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 max < n EXPR 8 max < n FIELD 9 max LEAF_NODE 10 max REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 n LEAF_NODE 10 n LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 max = n ; EXPR 9 max = n ASSIGN 10 max = n LVAL 11 max FIELD 12 max LEAF_NODE 13 max ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 n FIELD 12 n LEAF_NODE 13 n LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 max > ( int ) ( rb -> len - rb -> offset ) EXPR 8 max > ( int ) ( rb -> len - rb -> offset ) FIELD 9 max LEAF_NODE 10 max REL_OPERATOR 9 > LEAF_NODE 10 > LEAF_NODE 9 ( TYPE_NAME 9 int LEAF_NODE 10 int LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 rb -> len LEAF_NODE 10 rb LEAF_NODE 10 -> LEAF_NODE 10 len LEAF_NODE 9 - FIELD 9 rb -> offset LEAF_NODE 10 rb LEAF_NODE 10 -> LEAF_NODE 10 offset LEAF_NODE 9 ) LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 max = rb -> len - rb -> offset ; EXPR 9 max = rb -> len - rb -> offset ASSIGN 10 max = rb -> len - rb -> offset LVAL 11 max FIELD 12 max LEAF_NODE 13 max ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 rb -> len - rb -> offset FIELD 12 rb -> len LEAF_NODE 13 rb LEAF_NODE 13 -> LEAF_NODE 13 len LEAF_NODE 12 - FIELD 12 rb -> offset LEAF_NODE 13 rb LEAF_NODE 13 -> LEAF_NODE 13 offset LEAF_NODE 9 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 left < n EXPR 5 left < n FIELD 6 left LEAF_NODE 7 left REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 n LEAF_NODE 7 n LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 clear_sys_error ( ) ; EXPR 7 clear_sys_error ( ) FUNCTION_CALL 8 clear_sys_error ( ) CALLEE 9 clear_sys_error LEAF_NODE 10 clear_sys_error LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> rbio != NULL EXPR 8 s -> rbio != NULL FIELD 9 s -> rbio LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 rbio EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 s -> rwstate = SSL_READING ; EXPR 10 s -> rwstate = SSL_READING ASSIGN 11 s -> rwstate = SSL_READING LVAL 12 s -> rwstate FIELD 13 s -> rwstate LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 rwstate ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 SSL_READING FIELD 13 SSL_READING LEAF_NODE 14 SSL_READING LEAF_NODE 10 ; EXPR_STATEMENT 9 i = BIO_read ( s -> rbio , pkt + len + left , max - left ) ; EXPR 10 i = BIO_read ( s -> rbio , pkt + len + left , max - left ) ASSIGN 11 i = BIO_read ( s -> rbio , pkt + len + left , max - left ) LVAL 12 i FIELD 13 i LEAF_NODE 14 i ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 BIO_read ( s -> rbio , pkt + len + left , max - left ) FUNCTION_CALL 13 BIO_read ( s -> rbio , pkt + len + left , max - left ) CALLEE 14 BIO_read LEAF_NODE 15 BIO_read LEAF_NODE 14 ( ARGUMENT 14 s -> rbio FIELD 15 s -> rbio LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 rbio LEAF_NODE 14 , ARGUMENT 14 pkt + len + left FIELD 15 pkt LEAF_NODE 16 pkt LEAF_NODE 15 + FIELD 15 len LEAF_NODE 16 len LEAF_NODE 15 + FIELD 15 left LEAF_NODE 16 left LEAF_NODE 14 , ARGUMENT 14 max - left FIELD 15 max LEAF_NODE 16 max LEAF_NODE 15 - FIELD 15 left LEAF_NODE 16 left LEAF_NODE 14 ) LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL3_READ_N , SSL_R_READ_BIO_NOT_SET ) ; EXPR 10 SSLerr ( SSL_F_SSL3_READ_N , SSL_R_READ_BIO_NOT_SET ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL3_READ_N , SSL_R_READ_BIO_NOT_SET ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL3_READ_N FIELD 13 SSL_F_SSL3_READ_N LEAF_NODE 14 SSL_F_SSL3_READ_N LEAF_NODE 12 , ARGUMENT 12 SSL_R_READ_BIO_NOT_SET FIELD 13 SSL_R_READ_BIO_NOT_SET LEAF_NODE 14 SSL_R_READ_BIO_NOT_SET LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 i = - 1 ; EXPR 10 i = - 1 ASSIGN 11 i = - 1 LVAL 12 i FIELD 13 i LEAF_NODE 14 i ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 - 1 UNARY_EXPR 13 - 1 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 i <= 0 EXPR 8 i <= 0 FIELD 9 i LEAF_NODE 10 i REL_OPERATOR 9 <= LEAF_NODE 10 <= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 rb -> left = left ; EXPR 10 rb -> left = left ASSIGN 11 rb -> left = left LVAL 12 rb -> left FIELD 13 rb -> left LEAF_NODE 14 rb LEAF_NODE 14 -> LEAF_NODE 14 left ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 left FIELD 13 left LEAF_NODE 14 left LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 s -> mode & SSL_MODE_RELEASE_BUFFERS && SSL_version ( s ) != DTLS1_VERSION && SSL_version ( s ) != DTLS1_BAD_VER EXPR 11 s -> mode & SSL_MODE_RELEASE_BUFFERS && SSL_version ( s ) != DTLS1_VERSION && SSL_version ( s ) != DTLS1_BAD_VER AND 12 s -> mode & SSL_MODE_RELEASE_BUFFERS && SSL_version ( s ) != DTLS1_VERSION && SSL_version ( s ) != DTLS1_BAD_VER EXPR 13 s -> mode & SSL_MODE_RELEASE_BUFFERS FIELD 14 s -> mode LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 mode LEAF_NODE 14 & FIELD 14 SSL_MODE_RELEASE_BUFFERS LEAF_NODE 15 SSL_MODE_RELEASE_BUFFERS LEAF_NODE 13 && EXPR 13 SSL_version ( s ) != DTLS1_VERSION && SSL_version ( s ) != DTLS1_BAD_VER AND 14 SSL_version ( s ) != DTLS1_VERSION && SSL_version ( s ) != DTLS1_BAD_VER EXPR 15 SSL_version ( s ) != DTLS1_VERSION FUNCTION_CALL 16 SSL_version ( s ) CALLEE 17 SSL_version LEAF_NODE 18 SSL_version LEAF_NODE 17 ( ARGUMENT 17 s FIELD 18 s LEAF_NODE 19 s LEAF_NODE 17 ) EQ_OPERATOR 16 != LEAF_NODE 17 != FIELD 16 DTLS1_VERSION LEAF_NODE 17 DTLS1_VERSION LEAF_NODE 15 && EXPR 15 SSL_version ( s ) != DTLS1_BAD_VER FUNCTION_CALL 16 SSL_version ( s ) CALLEE 17 SSL_version LEAF_NODE 18 SSL_version LEAF_NODE 17 ( ARGUMENT 17 s FIELD 18 s LEAF_NODE 19 s LEAF_NODE 17 ) EQ_OPERATOR 16 != LEAF_NODE 17 != FIELD 16 DTLS1_BAD_VER LEAF_NODE 17 DTLS1_BAD_VER LEAF_NODE 10 ) STATEMENTS 10 SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 len + left == 0 EXPR 13 len + left == 0 FIELD 14 len LEAF_NODE 15 len LEAF_NODE 14 + FIELD 14 left LEAF_NODE 15 left EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 ssl3_release_read_buffer ( s ) ; EXPR 14 ssl3_release_read_buffer ( s ) FUNCTION_CALL 15 ssl3_release_read_buffer ( s ) CALLEE 16 ssl3_release_read_buffer LEAF_NODE 17 ssl3_release_read_buffer LEAF_NODE 16 ( ARGUMENT 16 s FIELD 17 s LEAF_NODE 18 s LEAF_NODE 16 ) LEAF_NODE 14 ; LEAF_NODE 9 return LEAF_NODE 9 ( LEAF_NODE 9 i LEAF_NODE 9 ) LEAF_NODE 9 ; LEAF_NODE 8 } EXPR_STATEMENT 6 left += i ; EXPR 7 left += i ASSIGN 8 left += i LVAL 9 left FIELD 10 left LEAF_NODE 11 left ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 SSL_version ( s ) == DTLS1_VERSION || SSL_version ( s ) == DTLS1_BAD_VER EXPR 8 SSL_version ( s ) == DTLS1_VERSION || SSL_version ( s ) == DTLS1_BAD_VER OR 9 SSL_version ( s ) == DTLS1_VERSION || SSL_version ( s ) == DTLS1_BAD_VER EXPR 10 SSL_version ( s ) == DTLS1_VERSION FUNCTION_CALL 11 SSL_version ( s ) CALLEE 12 SSL_version LEAF_NODE 13 SSL_version LEAF_NODE 12 ( ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 ) EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 DTLS1_VERSION LEAF_NODE 12 DTLS1_VERSION LEAF_NODE 10 || EXPR 10 SSL_version ( s ) == DTLS1_BAD_VER FUNCTION_CALL 11 SSL_version ( s ) CALLEE 12 SSL_version LEAF_NODE 13 SSL_version LEAF_NODE 12 ( ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 ) EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 DTLS1_BAD_VER LEAF_NODE 12 DTLS1_BAD_VER LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 n > left EXPR 11 n > left FIELD 12 n LEAF_NODE 13 n REL_OPERATOR 12 > LEAF_NODE 13 > FIELD 12 left LEAF_NODE 13 left LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 n = left ; EXPR 12 n = left ASSIGN 13 n = left LVAL 14 n FIELD 15 n LEAF_NODE 16 n ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 left FIELD 15 left LEAF_NODE 16 left LEAF_NODE 12 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 rb -> offset += n ; EXPR 4 rb -> offset += n ASSIGN 5 rb -> offset += n LVAL 6 rb -> offset FIELD 7 rb -> offset LEAF_NODE 8 rb LEAF_NODE 8 -> LEAF_NODE 8 offset ASSIGN_OP 6 += LEAF_NODE 7 += RVAL 6 n FIELD 7 n LEAF_NODE 8 n LEAF_NODE 4 ; EXPR_STATEMENT 3 rb -> left = left - n ; EXPR 4 rb -> left = left - n ASSIGN 5 rb -> left = left - n LVAL 6 rb -> left FIELD 7 rb -> left LEAF_NODE 8 rb LEAF_NODE 8 -> LEAF_NODE 8 left ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 left - n FIELD 7 left LEAF_NODE 8 left LEAF_NODE 7 - FIELD 7 n LEAF_NODE 8 n LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> packet_length += n ; EXPR 4 s -> packet_length += n ASSIGN 5 s -> packet_length += n LVAL 6 s -> packet_length FIELD 7 s -> packet_length LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 packet_length ASSIGN_OP 6 += LEAF_NODE 7 += RVAL 6 n FIELD 7 n LEAF_NODE 8 n LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> rwstate = SSL_NOTHING ; EXPR 4 s -> rwstate = SSL_NOTHING ASSIGN 5 s -> rwstate = SSL_NOTHING LVAL 6 s -> rwstate FIELD 7 s -> rwstate LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 rwstate ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 SSL_NOTHING FIELD 7 SSL_NOTHING LEAF_NODE 8 SSL_NOTHING LEAF_NODE 4 ; LEAF_NODE 3 return LEAF_NODE 3 ( LEAF_NODE 3 n LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 2 }", "idx": 49, "project": "openssl_ast_vul_function_test_0", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 X509_REQ * TYPE_NAME 3 X509_REQ LEAF_NODE 4 X509_REQ LEAF_NODE 3 * FUNCTION_NAME 2 X509_to_X509_REQ LEAF_NODE 3 X509_to_X509_REQ PARAMETER_LIST 2 ( X509 * x , EVP_PKEY * pkey , const EVP_MD * md ) LEAF_NODE 3 ( PARAMETER_DECL 3 X509 * x TYPE 4 X509 * TYPE_NAME 5 X509 LEAF_NODE 6 X509 POINTER 5 * LEAF_NODE 6 * NAME 4 x LEAF_NODE 5 x LEAF_NODE 3 , PARAMETER_DECL 3 EVP_PKEY * pkey TYPE 4 EVP_PKEY * TYPE_NAME 5 EVP_PKEY LEAF_NODE 6 EVP_PKEY POINTER 5 * LEAF_NODE 6 * NAME 4 pkey LEAF_NODE 5 pkey LEAF_NODE 3 , PARAMETER_DECL 3 const EVP_MD * md TYPE 4 const EVP_MD * TYPE_NAME 5 const EVP_MD LEAF_NODE 6 const LEAF_NODE 6 EVP_MD POINTER 5 * LEAF_NODE 6 * NAME 4 md LEAF_NODE 5 md LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 X509_REQ * ret ; VAR_DECL 4 X509_REQ * ret TYPE 5 X509_REQ * TYPE_NAME 6 X509_REQ LEAF_NODE 7 X509_REQ POINTER 6 * LEAF_NODE 7 * NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 4 ; SIMPLE_DECL 3 X509_REQ_INFO * ri ; VAR_DECL 4 X509_REQ_INFO * ri TYPE 5 X509_REQ_INFO * TYPE_NAME 6 X509_REQ_INFO LEAF_NODE 7 X509_REQ_INFO POINTER 6 * LEAF_NODE 7 * NAME 5 ri LEAF_NODE 6 ri LEAF_NODE 4 ; SIMPLE_DECL 3 int i ; VAR_DECL 4 int i TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; SIMPLE_DECL 3 EVP_PKEY * pktmp ; VAR_DECL 4 EVP_PKEY * pktmp TYPE 5 EVP_PKEY * TYPE_NAME 6 EVP_PKEY LEAF_NODE 7 EVP_PKEY POINTER 6 * LEAF_NODE 7 * NAME 5 pktmp LEAF_NODE 6 pktmp LEAF_NODE 4 ; EXPR_STATEMENT 3 ret = X509_REQ_new ( ) ; EXPR 4 ret = X509_REQ_new ( ) ASSIGN 5 ret = X509_REQ_new ( ) LVAL 6 ret FIELD 7 ret LEAF_NODE 8 ret ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 X509_REQ_new ( ) FUNCTION_CALL 7 X509_REQ_new ( ) CALLEE 8 X509_REQ_new LEAF_NODE 9 X509_REQ_new LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ret == NULL EXPR 5 ret == NULL FIELD 6 ret LEAF_NODE 7 ret EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 X509err ( X509_F_X509_TO_X509_REQ , ERR_R_MALLOC_FAILURE ) ; EXPR 7 X509err ( X509_F_X509_TO_X509_REQ , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 8 X509err ( X509_F_X509_TO_X509_REQ , ERR_R_MALLOC_FAILURE ) CALLEE 9 X509err LEAF_NODE 10 X509err LEAF_NODE 9 ( ARGUMENT 9 X509_F_X509_TO_X509_REQ FIELD 10 X509_F_X509_TO_X509_REQ LEAF_NODE 11 X509_F_X509_TO_X509_REQ LEAF_NODE 9 , ARGUMENT 9 ERR_R_MALLOC_FAILURE FIELD 10 ERR_R_MALLOC_FAILURE LEAF_NODE 11 ERR_R_MALLOC_FAILURE LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ri = ret -> req_info ; EXPR 4 ri = ret -> req_info ASSIGN 5 ri = ret -> req_info LVAL 6 ri FIELD 7 ri LEAF_NODE 8 ri ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ret -> req_info FIELD 7 ret -> req_info LEAF_NODE 8 ret LEAF_NODE 8 -> LEAF_NODE 8 req_info LEAF_NODE 4 ; EXPR_STATEMENT 3 ri -> version -> length = 1 ; EXPR 4 ri -> version -> length = 1 ASSIGN 5 ri -> version -> length = 1 LVAL 6 ri -> version -> length FIELD 7 ri -> version -> length LEAF_NODE 8 ri LEAF_NODE 8 -> LEAF_NODE 8 version LEAF_NODE 8 -> LEAF_NODE 8 length ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 ri -> version -> data = ( unsigned char * ) OPENSSL_malloc ( 1 ) ; EXPR 4 ri -> version -> data = ( unsigned char * ) OPENSSL_malloc ( 1 ) ASSIGN 5 ri -> version -> data = ( unsigned char * ) OPENSSL_malloc ( 1 ) LVAL 6 ri -> version -> data FIELD 7 ri -> version -> data LEAF_NODE 8 ri LEAF_NODE 8 -> LEAF_NODE 8 version LEAF_NODE 8 -> LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( unsigned char * ) OPENSSL_malloc ( 1 ) LEAF_NODE 7 ( TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 OPENSSL_malloc ( 1 ) CALLEE 8 OPENSSL_malloc LEAF_NODE 9 OPENSSL_malloc LEAF_NODE 8 ( ARGUMENT 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ri -> version -> data == NULL EXPR 5 ri -> version -> data == NULL FIELD 6 ri -> version -> data LEAF_NODE 7 ri LEAF_NODE 7 -> LEAF_NODE 7 version LEAF_NODE 7 -> LEAF_NODE 7 data EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto err ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 err LEAF_NODE 7 err LEAF_NODE 6 ; EXPR_STATEMENT 3 ri -> version -> data [ 0 ] = 0 ; EXPR 4 ri -> version -> data [ 0 ] = 0 ASSIGN 5 ri -> version -> data [ 0 ] = 0 LVAL 6 ri -> version -> data [ 0 ] FIELD 7 ri -> version -> data [ 0 ] LEAF_NODE 8 ri LEAF_NODE 8 -> LEAF_NODE 8 version LEAF_NODE 8 -> LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! X509_REQ_set_subject_name ( ret , X509_get_subject_name ( x ) ) EXPR 5 ! X509_REQ_set_subject_name ( ret , X509_get_subject_name ( x ) ) UNARY_EXPR 6 ! X509_REQ_set_subject_name ( ret , X509_get_subject_name ( x ) ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 X509_REQ_set_subject_name ( ret , X509_get_subject_name ( x ) ) CALLEE 8 X509_REQ_set_subject_name LEAF_NODE 9 X509_REQ_set_subject_name LEAF_NODE 8 ( ARGUMENT 8 ret FIELD 9 ret LEAF_NODE 10 ret LEAF_NODE 8 , ARGUMENT 8 X509_get_subject_name ( x ) FUNCTION_CALL 9 X509_get_subject_name ( x ) CALLEE 10 X509_get_subject_name LEAF_NODE 11 X509_get_subject_name LEAF_NODE 10 ( ARGUMENT 10 x FIELD 11 x LEAF_NODE 12 x LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto err ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 err LEAF_NODE 7 err LEAF_NODE 6 ; EXPR_STATEMENT 3 pktmp = X509_get_pubkey ( x ) ; EXPR 4 pktmp = X509_get_pubkey ( x ) ASSIGN 5 pktmp = X509_get_pubkey ( x ) LVAL 6 pktmp FIELD 7 pktmp LEAF_NODE 8 pktmp ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 X509_get_pubkey ( x ) FUNCTION_CALL 7 X509_get_pubkey ( x ) CALLEE 8 X509_get_pubkey LEAF_NODE 9 X509_get_pubkey LEAF_NODE 8 ( ARGUMENT 8 x FIELD 9 x LEAF_NODE 10 x LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 i = X509_REQ_set_pubkey ( ret , pktmp ) ; EXPR 4 i = X509_REQ_set_pubkey ( ret , pktmp ) ASSIGN 5 i = X509_REQ_set_pubkey ( ret , pktmp ) LVAL 6 i FIELD 7 i LEAF_NODE 8 i ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 X509_REQ_set_pubkey ( ret , pktmp ) FUNCTION_CALL 7 X509_REQ_set_pubkey ( ret , pktmp ) CALLEE 8 X509_REQ_set_pubkey LEAF_NODE 9 X509_REQ_set_pubkey LEAF_NODE 8 ( ARGUMENT 8 ret FIELD 9 ret LEAF_NODE 10 ret LEAF_NODE 8 , ARGUMENT 8 pktmp FIELD 9 pktmp LEAF_NODE 10 pktmp LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_PKEY_free ( pktmp ) ; EXPR 4 EVP_PKEY_free ( pktmp ) FUNCTION_CALL 5 EVP_PKEY_free ( pktmp ) CALLEE 6 EVP_PKEY_free LEAF_NODE 7 EVP_PKEY_free LEAF_NODE 6 ( ARGUMENT 6 pktmp FIELD 7 pktmp LEAF_NODE 8 pktmp LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! i EXPR 5 ! i UNARY_EXPR 6 ! i UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 i LEAF_NODE 8 i LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto err ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 err LEAF_NODE 7 err LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 pkey != NULL EXPR 5 pkey != NULL FIELD 6 pkey LEAF_NODE 7 pkey EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! X509_REQ_sign ( ret , pkey , md ) EXPR 8 ! X509_REQ_sign ( ret , pkey , md ) UNARY_EXPR 9 ! X509_REQ_sign ( ret , pkey , md ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 X509_REQ_sign ( ret , pkey , md ) CALLEE 11 X509_REQ_sign LEAF_NODE 12 X509_REQ_sign LEAF_NODE 11 ( ARGUMENT 11 ret FIELD 12 ret LEAF_NODE 13 ret LEAF_NODE 11 , ARGUMENT 11 pkey FIELD 12 pkey LEAF_NODE 13 pkey LEAF_NODE 11 , ARGUMENT 11 md FIELD 12 md LEAF_NODE 13 md LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 goto err ; KEYWORD 9 goto LEAF_NODE 10 goto DESTINATION 9 err LEAF_NODE 10 err LEAF_NODE 9 ; LEAF_NODE 5 } LEAF_NODE 3 return LEAF_NODE 3 ( LEAF_NODE 3 ret LEAF_NODE 3 ) LEAF_NODE 3 ; LABEL 3 err : LEAF_NODE 4 err LEAF_NODE 4 : EXPR_STATEMENT 3 X509_REQ_free ( ret ) ; EXPR 4 X509_REQ_free ( ret ) FUNCTION_CALL 5 X509_REQ_free ( ret ) CALLEE 6 X509_REQ_free LEAF_NODE 7 X509_REQ_free LEAF_NODE 6 ( ARGUMENT 6 ret FIELD 7 ret LEAF_NODE 8 ret LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 3 return LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 2 }", "idx": 50, "project": "openssl_ast_vul_function_test_24", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 UTF8_putc LEAF_NODE 3 UTF8_putc PARAMETER_LIST 2 ( unsigned char * str , int len , unsigned long value ) LEAF_NODE 3 ( PARAMETER_DECL 3 unsigned char * str TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 str LEAF_NODE 5 str LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 , PARAMETER_DECL 3 unsigned long value TYPE 4 unsigned long TYPE_NAME 5 unsigned long LEAF_NODE 6 unsigned LEAF_NODE 6 long NAME 4 value LEAF_NODE 5 value LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! str EXPR 5 ! str UNARY_EXPR 6 ! str UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 str LEAF_NODE 8 str LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 len = 6 ; EXPR 6 len = 6 ASSIGN 7 len = 6 LVAL 8 len FIELD 9 len LEAF_NODE 10 len ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 6 FIELD 9 6 LEAF_NODE 10 6 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 len <= 0 EXPR 7 len <= 0 FIELD 8 len LEAF_NODE 9 len REL_OPERATOR 8 <= LEAF_NODE 9 <= FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ) STATEMENTS 6 JUMP_STATEMENT 7 return - 1 ; KEYWORD 8 return LEAF_NODE 9 return DESTINATION 8 - 1 EXPR 9 - 1 UNARY_EXPR 10 - 1 UNARY_OPERATOR 11 - LEAF_NODE 12 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 value < 0x80 EXPR 5 value < 0x80 FIELD 6 value LEAF_NODE 7 value REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 0x80 LEAF_NODE 7 0x80 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 str EXPR 8 str FIELD 9 str LEAF_NODE 10 str LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 * str = ( unsigned char ) value ; EXPR 9 * str = ( unsigned char ) value ASSIGN 10 * str = ( unsigned char ) value LVAL 11 * str UNARY_EXPR 12 * str UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 str LEAF_NODE 14 str ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ( unsigned char ) value LEAF_NODE 12 ( TYPE_NAME 12 unsigned char LEAF_NODE 13 unsigned LEAF_NODE 13 char LEAF_NODE 12 ) FIELD 12 value LEAF_NODE 13 value LEAF_NODE 9 ; JUMP_STATEMENT 6 return 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 1 EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 value < 0x800 EXPR 5 value < 0x800 FIELD 6 value LEAF_NODE 7 value REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 0x800 LEAF_NODE 7 0x800 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 len < 2 EXPR 8 len < 2 FIELD 9 len LEAF_NODE 10 len REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return - 1 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 - 1 EXPR 10 - 1 UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 str EXPR 8 str FIELD 9 str LEAF_NODE 10 str LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 * str ++ = ( unsigned char ) ( ( ( value >> 6 ) & 0x1f ) | 0xc0 ) ; EXPR 10 * str ++ = ( unsigned char ) ( ( ( value >> 6 ) & 0x1f ) | 0xc0 ) ASSIGN 11 * str ++ = ( unsigned char ) ( ( ( value >> 6 ) & 0x1f ) | 0xc0 ) LVAL 12 * str ++ UNARY_EXPR 13 * str ++ UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 str ++ LEAF_NODE 15 str LEAF_NODE 15 ++ ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( unsigned char ) ( ( ( value >> 6 ) & 0x1f ) | 0xc0 ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 13 ) LEAF_NODE 13 ( BIT_OR 13 ( ( value >> 6 ) & 0x1f ) | 0xc0 BIT_OR_ELEM 14 ( ( value >> 6 ) & 0x1f ) LEAF_NODE 15 ( LEAF_NODE 15 ( FIELD 15 value LEAF_NODE 16 value LEAF_NODE 15 >> FIELD 15 6 LEAF_NODE 16 6 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0x1f LEAF_NODE 16 0x1f LEAF_NODE 15 ) LEAF_NODE 14 | BIT_OR_ELEM 14 0xc0 FIELD 15 0xc0 LEAF_NODE 16 0xc0 LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 * str = ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) ; EXPR 10 * str = ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) ASSIGN 11 * str = ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) LVAL 12 * str UNARY_EXPR 13 * str UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 str LEAF_NODE 15 str ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 13 ) LEAF_NODE 13 ( BIT_OR 13 ( value & 0x3f ) | 0x80 BIT_OR_ELEM 14 ( value & 0x3f ) LEAF_NODE 15 ( FIELD 15 value LEAF_NODE 16 value LEAF_NODE 15 & FIELD 15 0x3f LEAF_NODE 16 0x3f LEAF_NODE 15 ) LEAF_NODE 14 | BIT_OR_ELEM 14 0x80 FIELD 15 0x80 LEAF_NODE 16 0x80 LEAF_NODE 13 ) LEAF_NODE 10 ; LEAF_NODE 8 } JUMP_STATEMENT 6 return 2 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 2 EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 value < 0x10000 EXPR 5 value < 0x10000 FIELD 6 value LEAF_NODE 7 value REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 0x10000 LEAF_NODE 7 0x10000 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 len < 3 EXPR 8 len < 3 FIELD 9 len LEAF_NODE 10 len REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return - 1 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 - 1 EXPR 10 - 1 UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 str EXPR 8 str FIELD 9 str LEAF_NODE 10 str LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 * str ++ = ( unsigned char ) ( ( ( value >> 12 ) & 0xf ) | 0xe0 ) ; EXPR 10 * str ++ = ( unsigned char ) ( ( ( value >> 12 ) & 0xf ) | 0xe0 ) ASSIGN 11 * str ++ = ( unsigned char ) ( ( ( value >> 12 ) & 0xf ) | 0xe0 ) LVAL 12 * str ++ UNARY_EXPR 13 * str ++ UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 str ++ LEAF_NODE 15 str LEAF_NODE 15 ++ ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( unsigned char ) ( ( ( value >> 12 ) & 0xf ) | 0xe0 ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 13 ) LEAF_NODE 13 ( BIT_OR 13 ( ( value >> 12 ) & 0xf ) | 0xe0 BIT_OR_ELEM 14 ( ( value >> 12 ) & 0xf ) LEAF_NODE 15 ( LEAF_NODE 15 ( FIELD 15 value LEAF_NODE 16 value LEAF_NODE 15 >> FIELD 15 12 LEAF_NODE 16 12 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0xf LEAF_NODE 16 0xf LEAF_NODE 15 ) LEAF_NODE 14 | BIT_OR_ELEM 14 0xe0 FIELD 15 0xe0 LEAF_NODE 16 0xe0 LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 * str ++ = ( unsigned char ) ( ( ( value >> 6 ) & 0x3f ) | 0x80 ) ; EXPR 10 * str ++ = ( unsigned char ) ( ( ( value >> 6 ) & 0x3f ) | 0x80 ) ASSIGN 11 * str ++ = ( unsigned char ) ( ( ( value >> 6 ) & 0x3f ) | 0x80 ) LVAL 12 * str ++ UNARY_EXPR 13 * str ++ UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 str ++ LEAF_NODE 15 str LEAF_NODE 15 ++ ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( unsigned char ) ( ( ( value >> 6 ) & 0x3f ) | 0x80 ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 13 ) LEAF_NODE 13 ( BIT_OR 13 ( ( value >> 6 ) & 0x3f ) | 0x80 BIT_OR_ELEM 14 ( ( value >> 6 ) & 0x3f ) LEAF_NODE 15 ( LEAF_NODE 15 ( FIELD 15 value LEAF_NODE 16 value LEAF_NODE 15 >> FIELD 15 6 LEAF_NODE 16 6 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0x3f LEAF_NODE 16 0x3f LEAF_NODE 15 ) LEAF_NODE 14 | BIT_OR_ELEM 14 0x80 FIELD 15 0x80 LEAF_NODE 16 0x80 LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 * str = ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) ; EXPR 10 * str = ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) ASSIGN 11 * str = ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) LVAL 12 * str UNARY_EXPR 13 * str UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 str LEAF_NODE 15 str ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 13 ) LEAF_NODE 13 ( BIT_OR 13 ( value & 0x3f ) | 0x80 BIT_OR_ELEM 14 ( value & 0x3f ) LEAF_NODE 15 ( FIELD 15 value LEAF_NODE 16 value LEAF_NODE 15 & FIELD 15 0x3f LEAF_NODE 16 0x3f LEAF_NODE 15 ) LEAF_NODE 14 | BIT_OR_ELEM 14 0x80 FIELD 15 0x80 LEAF_NODE 16 0x80 LEAF_NODE 13 ) LEAF_NODE 10 ; LEAF_NODE 8 } JUMP_STATEMENT 6 return 3 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 3 EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 value < 0x200000 EXPR 5 value < 0x200000 FIELD 6 value LEAF_NODE 7 value REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 0x200000 LEAF_NODE 7 0x200000 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 len < 4 EXPR 8 len < 4 FIELD 9 len LEAF_NODE 10 len REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return - 1 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 - 1 EXPR 10 - 1 UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 str EXPR 8 str FIELD 9 str LEAF_NODE 10 str LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 * str ++ = ( unsigned char ) ( ( ( value >> 18 ) & 0x7 ) | 0xf0 ) ; EXPR 10 * str ++ = ( unsigned char ) ( ( ( value >> 18 ) & 0x7 ) | 0xf0 ) ASSIGN 11 * str ++ = ( unsigned char ) ( ( ( value >> 18 ) & 0x7 ) | 0xf0 ) LVAL 12 * str ++ UNARY_EXPR 13 * str ++ UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 str ++ LEAF_NODE 15 str LEAF_NODE 15 ++ ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( unsigned char ) ( ( ( value >> 18 ) & 0x7 ) | 0xf0 ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 13 ) LEAF_NODE 13 ( BIT_OR 13 ( ( value >> 18 ) & 0x7 ) | 0xf0 BIT_OR_ELEM 14 ( ( value >> 18 ) & 0x7 ) LEAF_NODE 15 ( LEAF_NODE 15 ( FIELD 15 value LEAF_NODE 16 value LEAF_NODE 15 >> FIELD 15 18 LEAF_NODE 16 18 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0x7 LEAF_NODE 16 0x7 LEAF_NODE 15 ) LEAF_NODE 14 | BIT_OR_ELEM 14 0xf0 FIELD 15 0xf0 LEAF_NODE 16 0xf0 LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 * str ++ = ( unsigned char ) ( ( ( value >> 12 ) & 0x3f ) | 0x80 ) ; EXPR 10 * str ++ = ( unsigned char ) ( ( ( value >> 12 ) & 0x3f ) | 0x80 ) ASSIGN 11 * str ++ = ( unsigned char ) ( ( ( value >> 12 ) & 0x3f ) | 0x80 ) LVAL 12 * str ++ UNARY_EXPR 13 * str ++ UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 str ++ LEAF_NODE 15 str LEAF_NODE 15 ++ ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( unsigned char ) ( ( ( value >> 12 ) & 0x3f ) | 0x80 ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 13 ) LEAF_NODE 13 ( BIT_OR 13 ( ( value >> 12 ) & 0x3f ) | 0x80 BIT_OR_ELEM 14 ( ( value >> 12 ) & 0x3f ) LEAF_NODE 15 ( LEAF_NODE 15 ( FIELD 15 value LEAF_NODE 16 value LEAF_NODE 15 >> FIELD 15 12 LEAF_NODE 16 12 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0x3f LEAF_NODE 16 0x3f LEAF_NODE 15 ) LEAF_NODE 14 | BIT_OR_ELEM 14 0x80 FIELD 15 0x80 LEAF_NODE 16 0x80 LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 * str ++ = ( unsigned char ) ( ( ( value >> 6 ) & 0x3f ) | 0x80 ) ; EXPR 10 * str ++ = ( unsigned char ) ( ( ( value >> 6 ) & 0x3f ) | 0x80 ) ASSIGN 11 * str ++ = ( unsigned char ) ( ( ( value >> 6 ) & 0x3f ) | 0x80 ) LVAL 12 * str ++ UNARY_EXPR 13 * str ++ UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 str ++ LEAF_NODE 15 str LEAF_NODE 15 ++ ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( unsigned char ) ( ( ( value >> 6 ) & 0x3f ) | 0x80 ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 13 ) LEAF_NODE 13 ( BIT_OR 13 ( ( value >> 6 ) & 0x3f ) | 0x80 BIT_OR_ELEM 14 ( ( value >> 6 ) & 0x3f ) LEAF_NODE 15 ( LEAF_NODE 15 ( FIELD 15 value LEAF_NODE 16 value LEAF_NODE 15 >> FIELD 15 6 LEAF_NODE 16 6 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0x3f LEAF_NODE 16 0x3f LEAF_NODE 15 ) LEAF_NODE 14 | BIT_OR_ELEM 14 0x80 FIELD 15 0x80 LEAF_NODE 16 0x80 LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 * str = ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) ; EXPR 10 * str = ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) ASSIGN 11 * str = ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) LVAL 12 * str UNARY_EXPR 13 * str UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 str LEAF_NODE 15 str ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 13 ) LEAF_NODE 13 ( BIT_OR 13 ( value & 0x3f ) | 0x80 BIT_OR_ELEM 14 ( value & 0x3f ) LEAF_NODE 15 ( FIELD 15 value LEAF_NODE 16 value LEAF_NODE 15 & FIELD 15 0x3f LEAF_NODE 16 0x3f LEAF_NODE 15 ) LEAF_NODE 14 | BIT_OR_ELEM 14 0x80 FIELD 15 0x80 LEAF_NODE 16 0x80 LEAF_NODE 13 ) LEAF_NODE 10 ; LEAF_NODE 8 } JUMP_STATEMENT 6 return 4 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 4 EXPR 8 4 FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 value < 0x4000000 EXPR 5 value < 0x4000000 FIELD 6 value LEAF_NODE 7 value REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 0x4000000 LEAF_NODE 7 0x4000000 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 len < 5 EXPR 8 len < 5 FIELD 9 len LEAF_NODE 10 len REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return - 1 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 - 1 EXPR 10 - 1 UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 str EXPR 8 str FIELD 9 str LEAF_NODE 10 str LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 * str ++ = ( unsigned char ) ( ( ( value >> 24 ) & 0x3 ) | 0xf8 ) ; EXPR 10 * str ++ = ( unsigned char ) ( ( ( value >> 24 ) & 0x3 ) | 0xf8 ) ASSIGN 11 * str ++ = ( unsigned char ) ( ( ( value >> 24 ) & 0x3 ) | 0xf8 ) LVAL 12 * str ++ UNARY_EXPR 13 * str ++ UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 str ++ LEAF_NODE 15 str LEAF_NODE 15 ++ ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( unsigned char ) ( ( ( value >> 24 ) & 0x3 ) | 0xf8 ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 13 ) LEAF_NODE 13 ( BIT_OR 13 ( ( value >> 24 ) & 0x3 ) | 0xf8 BIT_OR_ELEM 14 ( ( value >> 24 ) & 0x3 ) LEAF_NODE 15 ( LEAF_NODE 15 ( FIELD 15 value LEAF_NODE 16 value LEAF_NODE 15 >> FIELD 15 24 LEAF_NODE 16 24 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0x3 LEAF_NODE 16 0x3 LEAF_NODE 15 ) LEAF_NODE 14 | BIT_OR_ELEM 14 0xf8 FIELD 15 0xf8 LEAF_NODE 16 0xf8 LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 * str ++ = ( unsigned char ) ( ( ( value >> 18 ) & 0x3f ) | 0x80 ) ; EXPR 10 * str ++ = ( unsigned char ) ( ( ( value >> 18 ) & 0x3f ) | 0x80 ) ASSIGN 11 * str ++ = ( unsigned char ) ( ( ( value >> 18 ) & 0x3f ) | 0x80 ) LVAL 12 * str ++ UNARY_EXPR 13 * str ++ UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 str ++ LEAF_NODE 15 str LEAF_NODE 15 ++ ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( unsigned char ) ( ( ( value >> 18 ) & 0x3f ) | 0x80 ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 13 ) LEAF_NODE 13 ( BIT_OR 13 ( ( value >> 18 ) & 0x3f ) | 0x80 BIT_OR_ELEM 14 ( ( value >> 18 ) & 0x3f ) LEAF_NODE 15 ( LEAF_NODE 15 ( FIELD 15 value LEAF_NODE 16 value LEAF_NODE 15 >> FIELD 15 18 LEAF_NODE 16 18 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0x3f LEAF_NODE 16 0x3f LEAF_NODE 15 ) LEAF_NODE 14 | BIT_OR_ELEM 14 0x80 FIELD 15 0x80 LEAF_NODE 16 0x80 LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 * str ++ = ( unsigned char ) ( ( ( value >> 12 ) & 0x3f ) | 0x80 ) ; EXPR 10 * str ++ = ( unsigned char ) ( ( ( value >> 12 ) & 0x3f ) | 0x80 ) ASSIGN 11 * str ++ = ( unsigned char ) ( ( ( value >> 12 ) & 0x3f ) | 0x80 ) LVAL 12 * str ++ UNARY_EXPR 13 * str ++ UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 str ++ LEAF_NODE 15 str LEAF_NODE 15 ++ ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( unsigned char ) ( ( ( value >> 12 ) & 0x3f ) | 0x80 ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 13 ) LEAF_NODE 13 ( BIT_OR 13 ( ( value >> 12 ) & 0x3f ) | 0x80 BIT_OR_ELEM 14 ( ( value >> 12 ) & 0x3f ) LEAF_NODE 15 ( LEAF_NODE 15 ( FIELD 15 value LEAF_NODE 16 value LEAF_NODE 15 >> FIELD 15 12 LEAF_NODE 16 12 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0x3f LEAF_NODE 16 0x3f LEAF_NODE 15 ) LEAF_NODE 14 | BIT_OR_ELEM 14 0x80 FIELD 15 0x80 LEAF_NODE 16 0x80 LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 * str ++ = ( unsigned char ) ( ( ( value >> 6 ) & 0x3f ) | 0x80 ) ; EXPR 10 * str ++ = ( unsigned char ) ( ( ( value >> 6 ) & 0x3f ) | 0x80 ) ASSIGN 11 * str ++ = ( unsigned char ) ( ( ( value >> 6 ) & 0x3f ) | 0x80 ) LVAL 12 * str ++ UNARY_EXPR 13 * str ++ UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 str ++ LEAF_NODE 15 str LEAF_NODE 15 ++ ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( unsigned char ) ( ( ( value >> 6 ) & 0x3f ) | 0x80 ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 13 ) LEAF_NODE 13 ( BIT_OR 13 ( ( value >> 6 ) & 0x3f ) | 0x80 BIT_OR_ELEM 14 ( ( value >> 6 ) & 0x3f ) LEAF_NODE 15 ( LEAF_NODE 15 ( FIELD 15 value LEAF_NODE 16 value LEAF_NODE 15 >> FIELD 15 6 LEAF_NODE 16 6 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0x3f LEAF_NODE 16 0x3f LEAF_NODE 15 ) LEAF_NODE 14 | BIT_OR_ELEM 14 0x80 FIELD 15 0x80 LEAF_NODE 16 0x80 LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 * str = ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) ; EXPR 10 * str = ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) ASSIGN 11 * str = ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) LVAL 12 * str UNARY_EXPR 13 * str UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 str LEAF_NODE 15 str ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 13 ) LEAF_NODE 13 ( BIT_OR 13 ( value & 0x3f ) | 0x80 BIT_OR_ELEM 14 ( value & 0x3f ) LEAF_NODE 15 ( FIELD 15 value LEAF_NODE 16 value LEAF_NODE 15 & FIELD 15 0x3f LEAF_NODE 16 0x3f LEAF_NODE 15 ) LEAF_NODE 14 | BIT_OR_ELEM 14 0x80 FIELD 15 0x80 LEAF_NODE 16 0x80 LEAF_NODE 13 ) LEAF_NODE 10 ; LEAF_NODE 8 } JUMP_STATEMENT 6 return 5 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 5 EXPR 8 5 FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 len < 6 EXPR 5 len < 6 FIELD 6 len LEAF_NODE 7 len REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 6 LEAF_NODE 7 6 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return - 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 - 1 EXPR 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 str EXPR 5 str FIELD 6 str LEAF_NODE 7 str LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 * str ++ = ( unsigned char ) ( ( ( value >> 30 ) & 0x1 ) | 0xfc ) ; EXPR 7 * str ++ = ( unsigned char ) ( ( ( value >> 30 ) & 0x1 ) | 0xfc ) ASSIGN 8 * str ++ = ( unsigned char ) ( ( ( value >> 30 ) & 0x1 ) | 0xfc ) LVAL 9 * str ++ UNARY_EXPR 10 * str ++ UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 str ++ LEAF_NODE 12 str LEAF_NODE 12 ++ ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( unsigned char ) ( ( ( value >> 30 ) & 0x1 ) | 0xfc ) LEAF_NODE 10 ( TYPE_NAME 10 unsigned char LEAF_NODE 11 unsigned LEAF_NODE 11 char LEAF_NODE 10 ) LEAF_NODE 10 ( BIT_OR 10 ( ( value >> 30 ) & 0x1 ) | 0xfc BIT_OR_ELEM 11 ( ( value >> 30 ) & 0x1 ) LEAF_NODE 12 ( LEAF_NODE 12 ( FIELD 12 value LEAF_NODE 13 value LEAF_NODE 12 >> FIELD 12 30 LEAF_NODE 13 30 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0x1 LEAF_NODE 13 0x1 LEAF_NODE 12 ) LEAF_NODE 11 | BIT_OR_ELEM 11 0xfc FIELD 12 0xfc LEAF_NODE 13 0xfc LEAF_NODE 10 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 * str ++ = ( unsigned char ) ( ( ( value >> 24 ) & 0x3f ) | 0x80 ) ; EXPR 7 * str ++ = ( unsigned char ) ( ( ( value >> 24 ) & 0x3f ) | 0x80 ) ASSIGN 8 * str ++ = ( unsigned char ) ( ( ( value >> 24 ) & 0x3f ) | 0x80 ) LVAL 9 * str ++ UNARY_EXPR 10 * str ++ UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 str ++ LEAF_NODE 12 str LEAF_NODE 12 ++ ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( unsigned char ) ( ( ( value >> 24 ) & 0x3f ) | 0x80 ) LEAF_NODE 10 ( TYPE_NAME 10 unsigned char LEAF_NODE 11 unsigned LEAF_NODE 11 char LEAF_NODE 10 ) LEAF_NODE 10 ( BIT_OR 10 ( ( value >> 24 ) & 0x3f ) | 0x80 BIT_OR_ELEM 11 ( ( value >> 24 ) & 0x3f ) LEAF_NODE 12 ( LEAF_NODE 12 ( FIELD 12 value LEAF_NODE 13 value LEAF_NODE 12 >> FIELD 12 24 LEAF_NODE 13 24 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 12 ) LEAF_NODE 11 | BIT_OR_ELEM 11 0x80 FIELD 12 0x80 LEAF_NODE 13 0x80 LEAF_NODE 10 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 * str ++ = ( unsigned char ) ( ( ( value >> 18 ) & 0x3f ) | 0x80 ) ; EXPR 7 * str ++ = ( unsigned char ) ( ( ( value >> 18 ) & 0x3f ) | 0x80 ) ASSIGN 8 * str ++ = ( unsigned char ) ( ( ( value >> 18 ) & 0x3f ) | 0x80 ) LVAL 9 * str ++ UNARY_EXPR 10 * str ++ UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 str ++ LEAF_NODE 12 str LEAF_NODE 12 ++ ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( unsigned char ) ( ( ( value >> 18 ) & 0x3f ) | 0x80 ) LEAF_NODE 10 ( TYPE_NAME 10 unsigned char LEAF_NODE 11 unsigned LEAF_NODE 11 char LEAF_NODE 10 ) LEAF_NODE 10 ( BIT_OR 10 ( ( value >> 18 ) & 0x3f ) | 0x80 BIT_OR_ELEM 11 ( ( value >> 18 ) & 0x3f ) LEAF_NODE 12 ( LEAF_NODE 12 ( FIELD 12 value LEAF_NODE 13 value LEAF_NODE 12 >> FIELD 12 18 LEAF_NODE 13 18 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 12 ) LEAF_NODE 11 | BIT_OR_ELEM 11 0x80 FIELD 12 0x80 LEAF_NODE 13 0x80 LEAF_NODE 10 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 * str ++ = ( unsigned char ) ( ( ( value >> 12 ) & 0x3f ) | 0x80 ) ; EXPR 7 * str ++ = ( unsigned char ) ( ( ( value >> 12 ) & 0x3f ) | 0x80 ) ASSIGN 8 * str ++ = ( unsigned char ) ( ( ( value >> 12 ) & 0x3f ) | 0x80 ) LVAL 9 * str ++ UNARY_EXPR 10 * str ++ UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 str ++ LEAF_NODE 12 str LEAF_NODE 12 ++ ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( unsigned char ) ( ( ( value >> 12 ) & 0x3f ) | 0x80 ) LEAF_NODE 10 ( TYPE_NAME 10 unsigned char LEAF_NODE 11 unsigned LEAF_NODE 11 char LEAF_NODE 10 ) LEAF_NODE 10 ( BIT_OR 10 ( ( value >> 12 ) & 0x3f ) | 0x80 BIT_OR_ELEM 11 ( ( value >> 12 ) & 0x3f ) LEAF_NODE 12 ( LEAF_NODE 12 ( FIELD 12 value LEAF_NODE 13 value LEAF_NODE 12 >> FIELD 12 12 LEAF_NODE 13 12 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 12 ) LEAF_NODE 11 | BIT_OR_ELEM 11 0x80 FIELD 12 0x80 LEAF_NODE 13 0x80 LEAF_NODE 10 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 * str ++ = ( unsigned char ) ( ( ( value >> 6 ) & 0x3f ) | 0x80 ) ; EXPR 7 * str ++ = ( unsigned char ) ( ( ( value >> 6 ) & 0x3f ) | 0x80 ) ASSIGN 8 * str ++ = ( unsigned char ) ( ( ( value >> 6 ) & 0x3f ) | 0x80 ) LVAL 9 * str ++ UNARY_EXPR 10 * str ++ UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 str ++ LEAF_NODE 12 str LEAF_NODE 12 ++ ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( unsigned char ) ( ( ( value >> 6 ) & 0x3f ) | 0x80 ) LEAF_NODE 10 ( TYPE_NAME 10 unsigned char LEAF_NODE 11 unsigned LEAF_NODE 11 char LEAF_NODE 10 ) LEAF_NODE 10 ( BIT_OR 10 ( ( value >> 6 ) & 0x3f ) | 0x80 BIT_OR_ELEM 11 ( ( value >> 6 ) & 0x3f ) LEAF_NODE 12 ( LEAF_NODE 12 ( FIELD 12 value LEAF_NODE 13 value LEAF_NODE 12 >> FIELD 12 6 LEAF_NODE 13 6 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 12 ) LEAF_NODE 11 | BIT_OR_ELEM 11 0x80 FIELD 12 0x80 LEAF_NODE 13 0x80 LEAF_NODE 10 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 * str = ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) ; EXPR 7 * str = ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) ASSIGN 8 * str = ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) LVAL 9 * str UNARY_EXPR 10 * str UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 str LEAF_NODE 12 str ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( unsigned char ) ( ( value & 0x3f ) | 0x80 ) LEAF_NODE 10 ( TYPE_NAME 10 unsigned char LEAF_NODE 11 unsigned LEAF_NODE 11 char LEAF_NODE 10 ) LEAF_NODE 10 ( BIT_OR 10 ( value & 0x3f ) | 0x80 BIT_OR_ELEM 11 ( value & 0x3f ) LEAF_NODE 12 ( FIELD 12 value LEAF_NODE 13 value LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 12 ) LEAF_NODE 11 | BIT_OR_ELEM 11 0x80 FIELD 12 0x80 LEAF_NODE 13 0x80 LEAF_NODE 10 ) LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 6 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 6 EXPR 5 6 FIELD 6 6 LEAF_NODE 7 6 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 51, "project": "openssl_ast_normal_function_test_91", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 size_t TYPE_NAME 3 size_t LEAF_NODE 4 size_t FUNCTION_NAME 2 OPENSSL_strnlen LEAF_NODE 3 OPENSSL_strnlen PARAMETER_LIST 2 ( const char * str , size_t maxlen ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * str TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 str LEAF_NODE 5 str LEAF_NODE 3 , PARAMETER_DECL 3 size_t maxlen TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 maxlen LEAF_NODE 5 maxlen LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 const char * p ; VAR_DECL 4 const char * p TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 p = str ; EXPR 5 p = str ASSIGN 6 p = str LVAL 7 p FIELD 8 p LEAF_NODE 9 p ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 str FIELD 8 str LEAF_NODE 9 str LEAF_NODE 5 ; CONDITION 4 maxlen -- != 0 && * p != '\\0' EXPR 5 maxlen -- != 0 && * p != '\\0' AND 6 maxlen -- != 0 && * p != '\\0' EXPR 7 maxlen -- != 0 FIELD 8 maxlen -- LEAF_NODE 9 maxlen LEAF_NODE 9 -- EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 7 && EXPR 7 * p != '\\0' UNARY_EXPR 8 * p UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 p LEAF_NODE 10 p EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 4 ; FOR_EXPR 4 ++ p EXPR 5 ++ p LEAF_NODE 6 ++ FIELD 6 p LEAF_NODE 7 p LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 ; JUMP_STATEMENT 3 return p - str ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 p - str EXPR 5 p - str FIELD 6 p LEAF_NODE 7 p LEAF_NODE 6 - FIELD 6 str LEAF_NODE 7 str LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 52, "project": "openssl_ast_normal_function_test_139", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_long_32bit LEAF_NODE 3 test_long_32bit PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_intern ( & long_test_package_32bit ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_intern ( & long_test_package_32bit ) EXPR 5 test_intern ( & long_test_package_32bit ) FUNCTION_CALL 6 test_intern ( & long_test_package_32bit ) CALLEE 7 test_intern LEAF_NODE 8 test_intern LEAF_NODE 7 ( ARGUMENT 7 & long_test_package_32bit UNARY_EXPR 8 & long_test_package_32bit UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 long_test_package_32bit LEAF_NODE 10 long_test_package_32bit LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_long_64bit LEAF_NODE 3 test_long_64bit PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_intern ( & long_test_package_64bit ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_intern ( & long_test_package_64bit ) EXPR 5 test_intern ( & long_test_package_64bit ) FUNCTION_CALL 6 test_intern ( & long_test_package_64bit ) CALLEE 7 test_intern LEAF_NODE 8 test_intern LEAF_NODE 7 ( ARGUMENT 7 & long_test_package_64bit UNARY_EXPR 8 & long_test_package_64bit UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 long_test_package_64bit LEAF_NODE 10 long_test_package_64bit LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_int32 LEAF_NODE 3 test_int32 PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_intern ( & int32_test_package ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_intern ( & int32_test_package ) EXPR 5 test_intern ( & int32_test_package ) FUNCTION_CALL 6 test_intern ( & int32_test_package ) CALLEE 7 test_intern LEAF_NODE 8 test_intern LEAF_NODE 7 ( ARGUMENT 7 & int32_test_package UNARY_EXPR 8 & int32_test_package UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 int32_test_package LEAF_NODE 10 int32_test_package LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_uint32 LEAF_NODE 3 test_uint32 PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_intern ( & uint32_test_package ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_intern ( & uint32_test_package ) EXPR 5 test_intern ( & uint32_test_package ) FUNCTION_CALL 6 test_intern ( & uint32_test_package ) CALLEE 7 test_intern LEAF_NODE 8 test_intern LEAF_NODE 7 ( ARGUMENT 7 & uint32_test_package UNARY_EXPR 8 & uint32_test_package UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 uint32_test_package LEAF_NODE 10 uint32_test_package LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_int64 LEAF_NODE 3 test_int64 PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_intern ( & int64_test_package ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_intern ( & int64_test_package ) EXPR 5 test_intern ( & int64_test_package ) FUNCTION_CALL 6 test_intern ( & int64_test_package ) CALLEE 7 test_intern LEAF_NODE 8 test_intern LEAF_NODE 7 ( ARGUMENT 7 & int64_test_package UNARY_EXPR 8 & int64_test_package UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 int64_test_package LEAF_NODE 10 int64_test_package LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_uint64 LEAF_NODE 3 test_uint64 PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_intern ( & uint64_test_package ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_intern ( & uint64_test_package ) EXPR 5 test_intern ( & uint64_test_package ) FUNCTION_CALL 6 test_intern ( & uint64_test_package ) CALLEE 7 test_intern LEAF_NODE 8 test_intern LEAF_NODE 7 ( ARGUMENT 7 & uint64_test_package UNARY_EXPR 8 & uint64_test_package UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 uint64_test_package LEAF_NODE 10 uint64_test_package LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 setup_tests LEAF_NODE 3 setup_tests PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 ADD_TEST ( test_long_32bit ) ; EXPR 4 ADD_TEST ( test_long_32bit ) FUNCTION_CALL 5 ADD_TEST ( test_long_32bit ) CALLEE 6 ADD_TEST LEAF_NODE 7 ADD_TEST LEAF_NODE 6 ( ARGUMENT 6 test_long_32bit FIELD 7 test_long_32bit LEAF_NODE 8 test_long_32bit LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ADD_TEST ( test_long_64bit ) ; EXPR 4 ADD_TEST ( test_long_64bit ) FUNCTION_CALL 5 ADD_TEST ( test_long_64bit ) CALLEE 6 ADD_TEST LEAF_NODE 7 ADD_TEST LEAF_NODE 6 ( ARGUMENT 6 test_long_64bit FIELD 7 test_long_64bit LEAF_NODE 8 test_long_64bit LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ADD_TEST ( test_int32 ) ; EXPR 4 ADD_TEST ( test_int32 ) FUNCTION_CALL 5 ADD_TEST ( test_int32 ) CALLEE 6 ADD_TEST LEAF_NODE 7 ADD_TEST LEAF_NODE 6 ( ARGUMENT 6 test_int32 FIELD 7 test_int32 LEAF_NODE 8 test_int32 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ADD_TEST ( test_uint32 ) ; EXPR 4 ADD_TEST ( test_uint32 ) FUNCTION_CALL 5 ADD_TEST ( test_uint32 ) CALLEE 6 ADD_TEST LEAF_NODE 7 ADD_TEST LEAF_NODE 6 ( ARGUMENT 6 test_uint32 FIELD 7 test_uint32 LEAF_NODE 8 test_uint32 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ADD_TEST ( test_int64 ) ; EXPR 4 ADD_TEST ( test_int64 ) FUNCTION_CALL 5 ADD_TEST ( test_int64 ) CALLEE 6 ADD_TEST LEAF_NODE 7 ADD_TEST LEAF_NODE 6 ( ARGUMENT 6 test_int64 FIELD 7 test_int64 LEAF_NODE 8 test_int64 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ADD_TEST ( test_uint64 ) ; EXPR 4 ADD_TEST ( test_uint64 ) FUNCTION_CALL 5 ADD_TEST ( test_uint64 ) CALLEE 6 ADD_TEST LEAF_NODE 7 ADD_TEST LEAF_NODE 6 ( ARGUMENT 6 test_uint64 FIELD 7 test_uint64 LEAF_NODE 8 test_uint64 LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 53, "project": "openssl_ast_normal_function_test_109", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 send_bio_chars LEAF_NODE 3 send_bio_chars PARAMETER_LIST 2 ( void * arg , const void * buf , int len ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * arg TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 arg LEAF_NODE 5 arg LEAF_NODE 3 , PARAMETER_DECL 3 const void * buf TYPE 4 const void * TYPE_NAME 5 const void LEAF_NODE 6 const LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 buf LEAF_NODE 5 buf LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! arg EXPR 5 ! arg UNARY_EXPR 6 ! arg UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 arg LEAF_NODE 8 arg LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 1 EXPR 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 BIO_write ( arg , buf , len ) != len EXPR 5 BIO_write ( arg , buf , len ) != len FUNCTION_CALL 6 BIO_write ( arg , buf , len ) CALLEE 7 BIO_write LEAF_NODE 8 BIO_write LEAF_NODE 7 ( ARGUMENT 7 arg FIELD 8 arg LEAF_NODE 9 arg LEAF_NODE 7 , ARGUMENT 7 buf FIELD 8 buf LEAF_NODE 9 buf LEAF_NODE 7 , ARGUMENT 7 len FIELD 8 len LEAF_NODE 9 len LEAF_NODE 7 ) EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 len LEAF_NODE 7 len LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 X509_NAME_print_ex LEAF_NODE 3 X509_NAME_print_ex PARAMETER_LIST 2 ( BIO * out , const X509_NAME * nm , int indent , unsigned long flags ) LEAF_NODE 3 ( PARAMETER_DECL 3 BIO * out TYPE 4 BIO * TYPE_NAME 5 BIO LEAF_NODE 6 BIO POINTER 5 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 const X509_NAME * nm TYPE 4 const X509_NAME * TYPE_NAME 5 const X509_NAME LEAF_NODE 6 const LEAF_NODE 6 X509_NAME POINTER 5 * LEAF_NODE 6 * NAME 4 nm LEAF_NODE 5 nm LEAF_NODE 3 , PARAMETER_DECL 3 int indent TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 indent LEAF_NODE 5 indent LEAF_NODE 3 , PARAMETER_DECL 3 unsigned long flags TYPE 4 unsigned long TYPE_NAME 5 unsigned long LEAF_NODE 6 unsigned LEAF_NODE 6 long NAME 4 flags LEAF_NODE 5 flags LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 flags == XN_FLAG_COMPAT EXPR 5 flags == XN_FLAG_COMPAT FIELD 6 flags LEAF_NODE 7 flags EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 XN_FLAG_COMPAT LEAF_NODE 7 XN_FLAG_COMPAT LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return X509_NAME_print ( out , nm , indent ) ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 X509_NAME_print ( out , nm , indent ) EXPR 7 X509_NAME_print ( out , nm , indent ) FUNCTION_CALL 8 X509_NAME_print ( out , nm , indent ) CALLEE 9 X509_NAME_print LEAF_NODE 10 X509_NAME_print LEAF_NODE 9 ( ARGUMENT 9 out FIELD 10 out LEAF_NODE 11 out LEAF_NODE 9 , ARGUMENT 9 nm FIELD 10 nm LEAF_NODE 11 nm LEAF_NODE 9 , ARGUMENT 9 indent FIELD 10 indent LEAF_NODE 11 indent LEAF_NODE 9 ) LEAF_NODE 6 ; JUMP_STATEMENT 3 return do_name_ex ( send_bio_chars , out , nm , indent , flags ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 do_name_ex ( send_bio_chars , out , nm , indent , flags ) EXPR 5 do_name_ex ( send_bio_chars , out , nm , indent , flags ) FUNCTION_CALL 6 do_name_ex ( send_bio_chars , out , nm , indent , flags ) CALLEE 7 do_name_ex LEAF_NODE 8 do_name_ex LEAF_NODE 7 ( ARGUMENT 7 send_bio_chars FIELD 8 send_bio_chars LEAF_NODE 9 send_bio_chars LEAF_NODE 7 , ARGUMENT 7 out FIELD 8 out LEAF_NODE 9 out LEAF_NODE 7 , ARGUMENT 7 nm FIELD 8 nm LEAF_NODE 9 nm LEAF_NODE 7 , ARGUMENT 7 indent FIELD 8 indent LEAF_NODE 9 indent LEAF_NODE 7 , ARGUMENT 7 flags FIELD 8 flags LEAF_NODE 9 flags LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 54, "project": "openssl_ast_normal_function_test_145", "target": 0}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } ; CLASS_DEF 2 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } CLASS_DEF 3 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } LEAF_NODE 4 struct CLASS_NAME 4 bio_addrinfo_st LEAF_NODE 5 bio_addrinfo_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; SIMPLE_DECL 5 int bai_family ; VAR_DECL 6 int bai_family TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_family LEAF_NODE 8 bai_family LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_socktype ; VAR_DECL 6 int bai_socktype TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_socktype LEAF_NODE 8 bai_socktype LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_protocol ; VAR_DECL 6 int bai_protocol TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_protocol LEAF_NODE 8 bai_protocol LEAF_NODE 6 ; SIMPLE_DECL 5 size_t bai_addrlen ; VAR_DECL 6 size_t bai_addrlen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 bai_addrlen LEAF_NODE 8 bai_addrlen LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr * bai_addr ; VAR_DECL 6 struct sockaddr * bai_addr TYPE 7 struct sockaddr * TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr POINTER 8 * LEAF_NODE 9 * NAME 7 bai_addr LEAF_NODE 8 bai_addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct bio_addrinfo_st * bai_next ; VAR_DECL 6 struct bio_addrinfo_st * bai_next TYPE 7 struct bio_addrinfo_st * TYPE_NAME 8 struct bio_addrinfo_st LEAF_NODE 9 struct LEAF_NODE 9 bio_addrinfo_st POINTER 8 * LEAF_NODE 9 * NAME 7 bai_next LEAF_NODE 8 bai_next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BIO_ADDRINFO ; VAR_DECL 2 struct bio_addrinfo_st BIO_ADDRINFO TYPE 3 struct bio_addrinfo_st TYPE_NAME 4 struct bio_addrinfo_st LEAF_NODE 5 struct LEAF_NODE 5 bio_addrinfo_st NAME 3 BIO_ADDRINFO LEAF_NODE 4 BIO_ADDRINFO LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t socklen_t ; VAR_DECL 2 uint32_t socklen_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 socklen_t LEAF_NODE 4 socklen_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } ; CLASS_DEF 2 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } CLASS_DEF 3 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } LEAF_NODE 4 enum CLASS_NAME 4 BIO_hostserv_priorities LEAF_NODE 5 BIO_hostserv_priorities LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV LEAF_NODE 5 BIO_PARSE_PRIO_HOST LEAF_NODE 5 , LEAF_NODE 5 BIO_PARSE_PRIO_SERV LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } ; CLASS_DEF 2 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } CLASS_DEF 3 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } LEAF_NODE 4 enum CLASS_NAME 4 BIO_lookup_type LEAF_NODE 5 BIO_lookup_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER LEAF_NODE 5 BIO_LOOKUP_CLIENT LEAF_NODE 5 , LEAF_NODE 5 BIO_LOOKUP_SERVER LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 BIO_get_host_ip LEAF_NODE 3 BIO_get_host_ip PARAMETER_LIST 2 ( const char * str , unsigned char * ip ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * str TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 str LEAF_NODE 5 str LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * ip TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 ip LEAF_NODE 5 ip LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 BIO_ADDRINFO * res ; res = NULL ; VAR_DECL 4 BIO_ADDRINFO * res ; res = NULL TYPE 5 BIO_ADDRINFO * TYPE_NAME 6 BIO_ADDRINFO LEAF_NODE 7 BIO_ADDRINFO POINTER 6 * LEAF_NODE 7 * NAME 5 res LEAF_NODE 6 res LEAF_NODE 5 ; INIT 5 res = NULL ASSIGN 6 res = NULL LVAL 7 res NAME 8 res LEAF_NODE 9 res ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int ret ; ret = 0 ; VAR_DECL 4 int ret ; ret = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 5 ; INIT 5 ret = 0 ASSIGN 6 ret = 0 LVAL 7 ret NAME 8 ret LEAF_NODE 9 ret ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 BIO_sock_init ( ) != 1 EXPR 5 BIO_sock_init ( ) != 1 FUNCTION_CALL 6 BIO_sock_init ( ) CALLEE 7 BIO_sock_init LEAF_NODE 8 BIO_sock_init LEAF_NODE 7 ( LEAF_NODE 7 ) EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 BIO_lookup ( str , NULL , BIO_LOOKUP_CLIENT , AF_INET , SOCK_STREAM , & res ) EXPR 5 BIO_lookup ( str , NULL , BIO_LOOKUP_CLIENT , AF_INET , SOCK_STREAM , & res ) FUNCTION_CALL 6 BIO_lookup ( str , NULL , BIO_LOOKUP_CLIENT , AF_INET , SOCK_STREAM , & res ) CALLEE 7 BIO_lookup LEAF_NODE 8 BIO_lookup LEAF_NODE 7 ( ARGUMENT 7 str FIELD 8 str LEAF_NODE 9 str LEAF_NODE 7 , ARGUMENT 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 7 , ARGUMENT 7 BIO_LOOKUP_CLIENT FIELD 8 BIO_LOOKUP_CLIENT LEAF_NODE 9 BIO_LOOKUP_CLIENT LEAF_NODE 7 , ARGUMENT 7 AF_INET FIELD 8 AF_INET LEAF_NODE 9 AF_INET LEAF_NODE 7 , ARGUMENT 7 SOCK_STREAM FIELD 8 SOCK_STREAM LEAF_NODE 9 SOCK_STREAM LEAF_NODE 7 , ARGUMENT 7 & res UNARY_EXPR 8 & res UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 res LEAF_NODE 10 res LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 size_t l ; VAR_DECL 7 size_t l TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 l LEAF_NODE 9 l LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 BIO_ADDRINFO_family ( res ) != AF_INET EXPR 8 BIO_ADDRINFO_family ( res ) != AF_INET FUNCTION_CALL 9 BIO_ADDRINFO_family ( res ) CALLEE 10 BIO_ADDRINFO_family LEAF_NODE 11 BIO_ADDRINFO_family LEAF_NODE 10 ( ARGUMENT 10 res FIELD 11 res LEAF_NODE 12 res LEAF_NODE 10 ) EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 AF_INET LEAF_NODE 10 AF_INET LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIOerr ( BIO_F_BIO_GET_HOST_IP , BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET ) ; EXPR 10 BIOerr ( BIO_F_BIO_GET_HOST_IP , BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET ) FUNCTION_CALL 11 BIOerr ( BIO_F_BIO_GET_HOST_IP , BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET ) CALLEE 12 BIOerr LEAF_NODE 13 BIOerr LEAF_NODE 12 ( ARGUMENT 12 BIO_F_BIO_GET_HOST_IP FIELD 13 BIO_F_BIO_GET_HOST_IP LEAF_NODE 14 BIO_F_BIO_GET_HOST_IP LEAF_NODE 12 , ARGUMENT 12 BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET FIELD 13 BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET LEAF_NODE 14 BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 BIO_ADDR_rawaddress ( BIO_ADDRINFO_address ( res ) , NULL , & l ) EXPR 10 BIO_ADDR_rawaddress ( BIO_ADDRINFO_address ( res ) , NULL , & l ) FUNCTION_CALL 11 BIO_ADDR_rawaddress ( BIO_ADDRINFO_address ( res ) , NULL , & l ) CALLEE 12 BIO_ADDR_rawaddress LEAF_NODE 13 BIO_ADDR_rawaddress LEAF_NODE 12 ( ARGUMENT 12 BIO_ADDRINFO_address ( res ) FUNCTION_CALL 13 BIO_ADDRINFO_address ( res ) CALLEE 14 BIO_ADDRINFO_address LEAF_NODE 15 BIO_ADDRINFO_address LEAF_NODE 14 ( ARGUMENT 14 res FIELD 15 res LEAF_NODE 16 res LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 & l UNARY_EXPR 13 & l UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 l LEAF_NODE 15 l LEAF_NODE 12 ) LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ossl_assert ( l == 4 ) EXPR 13 ossl_assert ( l == 4 ) FUNCTION_CALL 14 ossl_assert ( l == 4 ) CALLEE 15 ossl_assert LEAF_NODE 16 ossl_assert LEAF_NODE 15 ( ARGUMENT 15 l == 4 FIELD 16 l LEAF_NODE 17 l EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 4 LEAF_NODE 17 4 LEAF_NODE 15 ) LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 ret = BIO_ADDR_rawaddress ( BIO_ADDRINFO_address ( res ) , ip , & l ) ; EXPR 14 ret = BIO_ADDR_rawaddress ( BIO_ADDRINFO_address ( res ) , ip , & l ) ASSIGN 15 ret = BIO_ADDR_rawaddress ( BIO_ADDRINFO_address ( res ) , ip , & l ) LVAL 16 ret FIELD 17 ret LEAF_NODE 18 ret ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 BIO_ADDR_rawaddress ( BIO_ADDRINFO_address ( res ) , ip , & l ) FUNCTION_CALL 17 BIO_ADDR_rawaddress ( BIO_ADDRINFO_address ( res ) , ip , & l ) CALLEE 18 BIO_ADDR_rawaddress LEAF_NODE 19 BIO_ADDR_rawaddress LEAF_NODE 18 ( ARGUMENT 18 BIO_ADDRINFO_address ( res ) FUNCTION_CALL 19 BIO_ADDRINFO_address ( res ) CALLEE 20 BIO_ADDRINFO_address LEAF_NODE 21 BIO_ADDRINFO_address LEAF_NODE 20 ( ARGUMENT 20 res FIELD 21 res LEAF_NODE 22 res LEAF_NODE 20 ) LEAF_NODE 18 , ARGUMENT 18 ip FIELD 19 ip LEAF_NODE 20 ip LEAF_NODE 18 , ARGUMENT 18 & l UNARY_EXPR 19 & l UNARY_OPERATOR 20 & LEAF_NODE 21 & FIELD 20 l LEAF_NODE 21 l LEAF_NODE 18 ) LEAF_NODE 14 ; LEAF_NODE 10 } EXPR_STATEMENT 6 BIO_ADDRINFO_free ( res ) ; EXPR 7 BIO_ADDRINFO_free ( res ) FUNCTION_CALL 8 BIO_ADDRINFO_free ( res ) CALLEE 9 BIO_ADDRINFO_free LEAF_NODE 10 BIO_ADDRINFO_free LEAF_NODE 9 ( ARGUMENT 9 res FIELD 10 res LEAF_NODE 11 res LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ERR_add_error_data ( 2 , \"host=\" , str ) ; EXPR 7 ERR_add_error_data ( 2 , \"host=\" , str ) FUNCTION_CALL 8 ERR_add_error_data ( 2 , \"host=\" , str ) CALLEE 9 ERR_add_error_data LEAF_NODE 10 ERR_add_error_data LEAF_NODE 9 ( ARGUMENT 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 , ARGUMENT 9 \"host=\" FIELD 10 \"host=\" LEAF_NODE 11 \"host=\" LEAF_NODE 9 , ARGUMENT 9 str FIELD 10 str LEAF_NODE 11 str LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return ret ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ret EXPR 5 ret FIELD 6 ret LEAF_NODE 7 ret LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 55, "project": "openssl_ast_normal_function_test_151", "target": 0}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } ; CLASS_DEF 2 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } CLASS_DEF 3 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } LEAF_NODE 4 struct CLASS_NAME 4 bio_addrinfo_st LEAF_NODE 5 bio_addrinfo_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; SIMPLE_DECL 5 int bai_family ; VAR_DECL 6 int bai_family TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_family LEAF_NODE 8 bai_family LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_socktype ; VAR_DECL 6 int bai_socktype TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_socktype LEAF_NODE 8 bai_socktype LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_protocol ; VAR_DECL 6 int bai_protocol TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_protocol LEAF_NODE 8 bai_protocol LEAF_NODE 6 ; SIMPLE_DECL 5 size_t bai_addrlen ; VAR_DECL 6 size_t bai_addrlen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 bai_addrlen LEAF_NODE 8 bai_addrlen LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr * bai_addr ; VAR_DECL 6 struct sockaddr * bai_addr TYPE 7 struct sockaddr * TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr POINTER 8 * LEAF_NODE 9 * NAME 7 bai_addr LEAF_NODE 8 bai_addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct bio_addrinfo_st * bai_next ; VAR_DECL 6 struct bio_addrinfo_st * bai_next TYPE 7 struct bio_addrinfo_st * TYPE_NAME 8 struct bio_addrinfo_st LEAF_NODE 9 struct LEAF_NODE 9 bio_addrinfo_st POINTER 8 * LEAF_NODE 9 * NAME 7 bai_next LEAF_NODE 8 bai_next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BIO_ADDRINFO ; VAR_DECL 2 struct bio_addrinfo_st BIO_ADDRINFO TYPE 3 struct bio_addrinfo_st TYPE_NAME 4 struct bio_addrinfo_st LEAF_NODE 5 struct LEAF_NODE 5 bio_addrinfo_st NAME 3 BIO_ADDRINFO LEAF_NODE 4 BIO_ADDRINFO LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 BIO_ADDRINFO_protocol LEAF_NODE 3 BIO_ADDRINFO_protocol PARAMETER_LIST 2 ( const BIO_ADDRINFO * bai ) LEAF_NODE 3 ( PARAMETER_DECL 3 const BIO_ADDRINFO * bai TYPE 4 const BIO_ADDRINFO * TYPE_NAME 5 const BIO_ADDRINFO LEAF_NODE 6 const LEAF_NODE 6 BIO_ADDRINFO POINTER 5 * LEAF_NODE 6 * NAME 4 bai LEAF_NODE 5 bai LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 bai != NULL EXPR 5 bai != NULL FIELD 6 bai LEAF_NODE 7 bai EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 bai -> bai_protocol != 0 EXPR 8 bai -> bai_protocol != 0 FIELD 9 bai -> bai_protocol LEAF_NODE 10 bai LEAF_NODE 10 -> LEAF_NODE 10 bai_protocol EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return bai -> bai_protocol ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 bai -> bai_protocol EXPR 10 bai -> bai_protocol FIELD 11 bai -> bai_protocol LEAF_NODE 12 bai LEAF_NODE 12 -> LEAF_NODE 12 bai_protocol LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 bai -> bai_family == AF_UNIX EXPR 8 bai -> bai_family == AF_UNIX FIELD 9 bai -> bai_family LEAF_NODE 10 bai LEAF_NODE 10 -> LEAF_NODE 10 bai_family EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 AF_UNIX LEAF_NODE 10 AF_UNIX LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return 0 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 0 EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 switch LEAF_NODE 8 switch LEAF_NODE 7 ( CONDITION 7 bai -> bai_socktype EXPR 8 bai -> bai_socktype FIELD 9 bai -> bai_socktype LEAF_NODE 10 bai LEAF_NODE 10 -> LEAF_NODE 10 bai_socktype LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 LABEL 9 case SOCK_STREAM : LEAF_NODE 10 case LEAF_NODE 10 SOCK_STREAM LEAF_NODE 10 : JUMP_STATEMENT 9 return IPPROTO_TCP ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 IPPROTO_TCP EXPR 11 IPPROTO_TCP FIELD 12 IPPROTO_TCP LEAF_NODE 13 IPPROTO_TCP LEAF_NODE 10 ; LABEL 9 case SOCK_DGRAM : LEAF_NODE 10 case LEAF_NODE 10 SOCK_DGRAM LEAF_NODE 10 : JUMP_STATEMENT 9 return IPPROTO_UDP ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 IPPROTO_UDP EXPR 11 IPPROTO_UDP FIELD 12 IPPROTO_UDP LEAF_NODE 13 IPPROTO_UDP LEAF_NODE 10 ; LABEL 9 default : LEAF_NODE 10 default LEAF_NODE 10 : JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 56, "project": "openssl_ast_normal_function_test_29", "target": 0}
{"func": "SIMPLE_DECL 1 struct ec_privatekey_st BASE_CLASSES { long version ; ASN1_OCTET_STRING * privateKey ; ECPKPARAMETERS * parameters ; ASN1_BIT_STRING * publicKey ; } ; CLASS_DEF 2 struct ec_privatekey_st BASE_CLASSES { long version ; ASN1_OCTET_STRING * privateKey ; ECPKPARAMETERS * parameters ; ASN1_BIT_STRING * publicKey ; } CLASS_DEF 3 struct ec_privatekey_st BASE_CLASSES { long version ; ASN1_OCTET_STRING * privateKey ; ECPKPARAMETERS * parameters ; ASN1_BIT_STRING * publicKey ; } LEAF_NODE 4 struct CLASS_NAME 4 ec_privatekey_st LEAF_NODE 5 ec_privatekey_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 long version ; ASN1_OCTET_STRING * privateKey ; ECPKPARAMETERS * parameters ; ASN1_BIT_STRING * publicKey ; SIMPLE_DECL 5 long version ; VAR_DECL 6 long version TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 version LEAF_NODE 8 version LEAF_NODE 6 ; SIMPLE_DECL 5 ASN1_OCTET_STRING * privateKey ; VAR_DECL 6 ASN1_OCTET_STRING * privateKey TYPE 7 ASN1_OCTET_STRING * TYPE_NAME 8 ASN1_OCTET_STRING LEAF_NODE 9 ASN1_OCTET_STRING POINTER 8 * LEAF_NODE 9 * NAME 7 privateKey LEAF_NODE 8 privateKey LEAF_NODE 6 ; SIMPLE_DECL 5 ECPKPARAMETERS * parameters ; VAR_DECL 6 ECPKPARAMETERS * parameters TYPE 7 ECPKPARAMETERS * TYPE_NAME 8 ECPKPARAMETERS LEAF_NODE 9 ECPKPARAMETERS POINTER 8 * LEAF_NODE 9 * NAME 7 parameters LEAF_NODE 8 parameters LEAF_NODE 6 ; SIMPLE_DECL 5 ASN1_BIT_STRING * publicKey ; VAR_DECL 6 ASN1_BIT_STRING * publicKey TYPE 7 ASN1_BIT_STRING * TYPE_NAME 8 ASN1_BIT_STRING LEAF_NODE 9 ASN1_BIT_STRING POINTER 8 * LEAF_NODE 9 * NAME 7 publicKey LEAF_NODE 8 publicKey LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ec_privatekey_st EC_PRIVATEKEY ; VAR_DECL 2 struct ec_privatekey_st EC_PRIVATEKEY TYPE 3 struct ec_privatekey_st TYPE_NAME 4 struct ec_privatekey_st LEAF_NODE 5 struct LEAF_NODE 5 ec_privatekey_st NAME 3 EC_PRIVATEKEY LEAF_NODE 4 EC_PRIVATEKEY LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 EC_KEY * TYPE_NAME 3 EC_KEY LEAF_NODE 4 EC_KEY LEAF_NODE 3 * FUNCTION_NAME 2 d2i_ECPrivateKey LEAF_NODE 3 d2i_ECPrivateKey PARAMETER_LIST 2 ( EC_KEY * * a , const unsigned char * * in , long len ) LEAF_NODE 3 ( PARAMETER_DECL 3 EC_KEY * * a TYPE 4 EC_KEY * * TYPE_NAME 5 EC_KEY LEAF_NODE 6 EC_KEY POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 const unsigned char * * in TYPE 4 const unsigned char * * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 in LEAF_NODE 5 in LEAF_NODE 3 , PARAMETER_DECL 3 long len TYPE 4 long TYPE_NAME 5 long LEAF_NODE 6 long NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int ok ; ok = 0 ; VAR_DECL 4 int ok ; ok = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 ok LEAF_NODE 6 ok LEAF_NODE 5 ; INIT 5 ok = 0 ASSIGN 6 ok = 0 LVAL 7 ok NAME 8 ok LEAF_NODE 9 ok ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 EC_KEY * ret ; ret = NULL ; VAR_DECL 4 EC_KEY * ret ; ret = NULL TYPE 5 EC_KEY * TYPE_NAME 6 EC_KEY LEAF_NODE 7 EC_KEY POINTER 6 * LEAF_NODE 7 * NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 5 ; INIT 5 ret = NULL ASSIGN 6 ret = NULL LVAL 7 ret NAME 8 ret LEAF_NODE 9 ret ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 EC_PRIVATEKEY * priv_key ; priv_key = NULL ; VAR_DECL 4 EC_PRIVATEKEY * priv_key ; priv_key = NULL TYPE 5 EC_PRIVATEKEY * TYPE_NAME 6 EC_PRIVATEKEY LEAF_NODE 7 EC_PRIVATEKEY POINTER 6 * LEAF_NODE 7 * NAME 5 priv_key LEAF_NODE 6 priv_key LEAF_NODE 5 ; INIT 5 priv_key = NULL ASSIGN 6 priv_key = NULL LVAL 7 priv_key NAME 8 priv_key LEAF_NODE 9 priv_key ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( priv_key = EC_PRIVATEKEY_new ( ) ) == NULL EXPR 5 ( priv_key = EC_PRIVATEKEY_new ( ) ) == NULL LEAF_NODE 6 ( ASSIGN 6 priv_key = EC_PRIVATEKEY_new ( ) LVAL 7 priv_key FIELD 8 priv_key LEAF_NODE 9 priv_key ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 EC_PRIVATEKEY_new ( ) FUNCTION_CALL 8 EC_PRIVATEKEY_new ( ) CALLEE 9 EC_PRIVATEKEY_new LEAF_NODE 10 EC_PRIVATEKEY_new LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 6 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_MALLOC_FAILURE ) ; EXPR 7 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 8 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_MALLOC_FAILURE ) CALLEE 9 ECerr LEAF_NODE 10 ECerr LEAF_NODE 9 ( ARGUMENT 9 EC_F_D2I_ECPRIVATEKEY FIELD 10 EC_F_D2I_ECPRIVATEKEY LEAF_NODE 11 EC_F_D2I_ECPRIVATEKEY LEAF_NODE 9 , ARGUMENT 9 ERR_R_MALLOC_FAILURE FIELD 10 ERR_R_MALLOC_FAILURE LEAF_NODE 11 ERR_R_MALLOC_FAILURE LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return NULL ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 NULL EXPR 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( priv_key = d2i_EC_PRIVATEKEY ( & priv_key , in , len ) ) == NULL EXPR 5 ( priv_key = d2i_EC_PRIVATEKEY ( & priv_key , in , len ) ) == NULL LEAF_NODE 6 ( ASSIGN 6 priv_key = d2i_EC_PRIVATEKEY ( & priv_key , in , len ) LVAL 7 priv_key FIELD 8 priv_key LEAF_NODE 9 priv_key ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 d2i_EC_PRIVATEKEY ( & priv_key , in , len ) FUNCTION_CALL 8 d2i_EC_PRIVATEKEY ( & priv_key , in , len ) CALLEE 9 d2i_EC_PRIVATEKEY LEAF_NODE 10 d2i_EC_PRIVATEKEY LEAF_NODE 9 ( ARGUMENT 9 & priv_key UNARY_EXPR 10 & priv_key UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 priv_key LEAF_NODE 12 priv_key LEAF_NODE 9 , ARGUMENT 9 in FIELD 10 in LEAF_NODE 11 in LEAF_NODE 9 , ARGUMENT 9 len FIELD 10 len LEAF_NODE 11 len LEAF_NODE 9 ) LEAF_NODE 6 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_EC_LIB ) ; EXPR 7 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_EC_LIB ) FUNCTION_CALL 8 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_EC_LIB ) CALLEE 9 ECerr LEAF_NODE 10 ECerr LEAF_NODE 9 ( ARGUMENT 9 EC_F_D2I_ECPRIVATEKEY FIELD 10 EC_F_D2I_ECPRIVATEKEY LEAF_NODE 11 EC_F_D2I_ECPRIVATEKEY LEAF_NODE 9 , ARGUMENT 9 ERR_R_EC_LIB FIELD 10 ERR_R_EC_LIB LEAF_NODE 11 ERR_R_EC_LIB LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 EC_PRIVATEKEY_free ( priv_key ) ; EXPR 7 EC_PRIVATEKEY_free ( priv_key ) FUNCTION_CALL 8 EC_PRIVATEKEY_free ( priv_key ) CALLEE 9 EC_PRIVATEKEY_free LEAF_NODE 10 EC_PRIVATEKEY_free LEAF_NODE 9 ( ARGUMENT 9 priv_key FIELD 10 priv_key LEAF_NODE 11 priv_key LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return NULL ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 NULL EXPR 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 a == NULL || * a == NULL EXPR 5 a == NULL || * a == NULL OR 6 a == NULL || * a == NULL EXPR 7 a == NULL FIELD 8 a LEAF_NODE 9 a EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 7 || EXPR 7 * a == NULL UNARY_EXPR 8 * a UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 a LEAF_NODE 10 a EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( ret = EC_KEY_new ( ) ) == NULL EXPR 8 ( ret = EC_KEY_new ( ) ) == NULL LEAF_NODE 9 ( ASSIGN 9 ret = EC_KEY_new ( ) LVAL 10 ret FIELD 11 ret LEAF_NODE 12 ret ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 EC_KEY_new ( ) FUNCTION_CALL 11 EC_KEY_new ( ) CALLEE 12 EC_KEY_new LEAF_NODE 13 EC_KEY_new LEAF_NODE 12 ( LEAF_NODE 12 ) LEAF_NODE 9 ) EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_MALLOC_FAILURE ) ; EXPR 10 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 11 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_MALLOC_FAILURE ) CALLEE 12 ECerr LEAF_NODE 13 ECerr LEAF_NODE 12 ( ARGUMENT 12 EC_F_D2I_ECPRIVATEKEY FIELD 13 EC_F_D2I_ECPRIVATEKEY LEAF_NODE 14 EC_F_D2I_ECPRIVATEKEY LEAF_NODE 12 , ARGUMENT 12 ERR_R_MALLOC_FAILURE FIELD 13 ERR_R_MALLOC_FAILURE LEAF_NODE 14 ERR_R_MALLOC_FAILURE LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 err LEAF_NODE 11 err LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 a EXPR 8 a FIELD 9 a LEAF_NODE 10 a LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 * a = ret ; EXPR 9 * a = ret ASSIGN 10 * a = ret LVAL 11 * a UNARY_EXPR 12 * a UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 a LEAF_NODE 14 a ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ret FIELD 12 ret LEAF_NODE 13 ret LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 EXPR_STATEMENT 5 ret = * a ; EXPR 6 ret = * a ASSIGN 7 ret = * a LVAL 8 ret FIELD 9 ret LEAF_NODE 10 ret ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 * a UNARY_EXPR 9 * a UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 a LEAF_NODE 11 a LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 priv_key -> parameters EXPR 5 priv_key -> parameters FIELD 6 priv_key -> parameters LEAF_NODE 7 priv_key LEAF_NODE 7 -> LEAF_NODE 7 parameters LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ret -> group EXPR 8 ret -> group FIELD 9 ret -> group LEAF_NODE 10 ret LEAF_NODE 10 -> LEAF_NODE 10 group LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 EC_GROUP_clear_free ( ret -> group ) ; EXPR 9 EC_GROUP_clear_free ( ret -> group ) FUNCTION_CALL 10 EC_GROUP_clear_free ( ret -> group ) CALLEE 11 EC_GROUP_clear_free LEAF_NODE 12 EC_GROUP_clear_free LEAF_NODE 11 ( ARGUMENT 11 ret -> group FIELD 12 ret -> group LEAF_NODE 13 ret LEAF_NODE 13 -> LEAF_NODE 13 group LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 6 ret -> group = ec_asn1_pkparameters2group ( priv_key -> parameters ) ; EXPR 7 ret -> group = ec_asn1_pkparameters2group ( priv_key -> parameters ) ASSIGN 8 ret -> group = ec_asn1_pkparameters2group ( priv_key -> parameters ) LVAL 9 ret -> group FIELD 10 ret -> group LEAF_NODE 11 ret LEAF_NODE 11 -> LEAF_NODE 11 group ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ec_asn1_pkparameters2group ( priv_key -> parameters ) FUNCTION_CALL 10 ec_asn1_pkparameters2group ( priv_key -> parameters ) CALLEE 11 ec_asn1_pkparameters2group LEAF_NODE 12 ec_asn1_pkparameters2group LEAF_NODE 11 ( ARGUMENT 11 priv_key -> parameters FIELD 12 priv_key -> parameters LEAF_NODE 13 priv_key LEAF_NODE 13 -> LEAF_NODE 13 parameters LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ret -> group == NULL EXPR 5 ret -> group == NULL FIELD 6 ret -> group LEAF_NODE 7 ret LEAF_NODE 7 -> LEAF_NODE 7 group EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_EC_LIB ) ; EXPR 7 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_EC_LIB ) FUNCTION_CALL 8 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_EC_LIB ) CALLEE 9 ECerr LEAF_NODE 10 ECerr LEAF_NODE 9 ( ARGUMENT 9 EC_F_D2I_ECPRIVATEKEY FIELD 10 EC_F_D2I_ECPRIVATEKEY LEAF_NODE 11 EC_F_D2I_ECPRIVATEKEY LEAF_NODE 9 , ARGUMENT 9 ERR_R_EC_LIB FIELD 10 ERR_R_EC_LIB LEAF_NODE 11 ERR_R_EC_LIB LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ret -> version = priv_key -> version ; EXPR 4 ret -> version = priv_key -> version ASSIGN 5 ret -> version = priv_key -> version LVAL 6 ret -> version FIELD 7 ret -> version LEAF_NODE 8 ret LEAF_NODE 8 -> LEAF_NODE 8 version ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 priv_key -> version FIELD 7 priv_key -> version LEAF_NODE 8 priv_key LEAF_NODE 8 -> LEAF_NODE 8 version LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 priv_key -> privateKey EXPR 5 priv_key -> privateKey FIELD 6 priv_key -> privateKey LEAF_NODE 7 priv_key LEAF_NODE 7 -> LEAF_NODE 7 privateKey LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ret -> priv_key = BN_bin2bn ( M_ASN1_STRING_data ( priv_key -> privateKey ) , M_ASN1_STRING_length ( priv_key -> privateKey ) , ret -> priv_key ) ; EXPR 7 ret -> priv_key = BN_bin2bn ( M_ASN1_STRING_data ( priv_key -> privateKey ) , M_ASN1_STRING_length ( priv_key -> privateKey ) , ret -> priv_key ) ASSIGN 8 ret -> priv_key = BN_bin2bn ( M_ASN1_STRING_data ( priv_key -> privateKey ) , M_ASN1_STRING_length ( priv_key -> privateKey ) , ret -> priv_key ) LVAL 9 ret -> priv_key FIELD 10 ret -> priv_key LEAF_NODE 11 ret LEAF_NODE 11 -> LEAF_NODE 11 priv_key ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 BN_bin2bn ( M_ASN1_STRING_data ( priv_key -> privateKey ) , M_ASN1_STRING_length ( priv_key -> privateKey ) , ret -> priv_key ) FUNCTION_CALL 10 BN_bin2bn ( M_ASN1_STRING_data ( priv_key -> privateKey ) , M_ASN1_STRING_length ( priv_key -> privateKey ) , ret -> priv_key ) CALLEE 11 BN_bin2bn LEAF_NODE 12 BN_bin2bn LEAF_NODE 11 ( ARGUMENT 11 M_ASN1_STRING_data ( priv_key -> privateKey ) FUNCTION_CALL 12 M_ASN1_STRING_data ( priv_key -> privateKey ) CALLEE 13 M_ASN1_STRING_data LEAF_NODE 14 M_ASN1_STRING_data LEAF_NODE 13 ( ARGUMENT 13 priv_key -> privateKey FIELD 14 priv_key -> privateKey LEAF_NODE 15 priv_key LEAF_NODE 15 -> LEAF_NODE 15 privateKey LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 M_ASN1_STRING_length ( priv_key -> privateKey ) FUNCTION_CALL 12 M_ASN1_STRING_length ( priv_key -> privateKey ) CALLEE 13 M_ASN1_STRING_length LEAF_NODE 14 M_ASN1_STRING_length LEAF_NODE 13 ( ARGUMENT 13 priv_key -> privateKey FIELD 14 priv_key -> privateKey LEAF_NODE 15 priv_key LEAF_NODE 15 -> LEAF_NODE 15 privateKey LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 ret -> priv_key FIELD 12 ret -> priv_key LEAF_NODE 13 ret LEAF_NODE 13 -> LEAF_NODE 13 priv_key LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ret -> priv_key == NULL EXPR 8 ret -> priv_key == NULL FIELD 9 ret -> priv_key LEAF_NODE 10 ret LEAF_NODE 10 -> LEAF_NODE 10 priv_key EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_BN_LIB ) ; EXPR 10 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_BN_LIB ) FUNCTION_CALL 11 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_BN_LIB ) CALLEE 12 ECerr LEAF_NODE 13 ECerr LEAF_NODE 12 ( ARGUMENT 12 EC_F_D2I_ECPRIVATEKEY FIELD 13 EC_F_D2I_ECPRIVATEKEY LEAF_NODE 14 EC_F_D2I_ECPRIVATEKEY LEAF_NODE 12 , ARGUMENT 12 ERR_R_BN_LIB FIELD 13 ERR_R_BN_LIB LEAF_NODE 14 ERR_R_BN_LIB LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 err LEAF_NODE 11 err LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ECerr ( EC_F_D2I_ECPRIVATEKEY , EC_R_MISSING_PRIVATE_KEY ) ; EXPR 7 ECerr ( EC_F_D2I_ECPRIVATEKEY , EC_R_MISSING_PRIVATE_KEY ) FUNCTION_CALL 8 ECerr ( EC_F_D2I_ECPRIVATEKEY , EC_R_MISSING_PRIVATE_KEY ) CALLEE 9 ECerr LEAF_NODE 10 ECerr LEAF_NODE 9 ( ARGUMENT 9 EC_F_D2I_ECPRIVATEKEY FIELD 10 EC_F_D2I_ECPRIVATEKEY LEAF_NODE 11 EC_F_D2I_ECPRIVATEKEY LEAF_NODE 9 , ARGUMENT 9 EC_R_MISSING_PRIVATE_KEY FIELD 10 EC_R_MISSING_PRIVATE_KEY LEAF_NODE 11 EC_R_MISSING_PRIVATE_KEY LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 priv_key -> publicKey EXPR 5 priv_key -> publicKey FIELD 6 priv_key -> publicKey LEAF_NODE 7 priv_key LEAF_NODE 7 -> LEAF_NODE 7 publicKey LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 const unsigned char * pub_oct ; VAR_DECL 7 const unsigned char * pub_oct TYPE 8 const unsigned char * TYPE_NAME 9 const unsigned char LEAF_NODE 10 const LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 pub_oct LEAF_NODE 9 pub_oct LEAF_NODE 7 ; SIMPLE_DECL 6 size_t pub_oct_len ; VAR_DECL 7 size_t pub_oct_len TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 pub_oct_len LEAF_NODE 9 pub_oct_len LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ret -> pub_key EXPR 8 ret -> pub_key FIELD 9 ret -> pub_key LEAF_NODE 10 ret LEAF_NODE 10 -> LEAF_NODE 10 pub_key LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 EC_POINT_clear_free ( ret -> pub_key ) ; EXPR 9 EC_POINT_clear_free ( ret -> pub_key ) FUNCTION_CALL 10 EC_POINT_clear_free ( ret -> pub_key ) CALLEE 11 EC_POINT_clear_free LEAF_NODE 12 EC_POINT_clear_free LEAF_NODE 11 ( ARGUMENT 11 ret -> pub_key FIELD 12 ret -> pub_key LEAF_NODE 13 ret LEAF_NODE 13 -> LEAF_NODE 13 pub_key LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 6 ret -> pub_key = EC_POINT_new ( ret -> group ) ; EXPR 7 ret -> pub_key = EC_POINT_new ( ret -> group ) ASSIGN 8 ret -> pub_key = EC_POINT_new ( ret -> group ) LVAL 9 ret -> pub_key FIELD 10 ret -> pub_key LEAF_NODE 11 ret LEAF_NODE 11 -> LEAF_NODE 11 pub_key ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 EC_POINT_new ( ret -> group ) FUNCTION_CALL 10 EC_POINT_new ( ret -> group ) CALLEE 11 EC_POINT_new LEAF_NODE 12 EC_POINT_new LEAF_NODE 11 ( ARGUMENT 11 ret -> group FIELD 12 ret -> group LEAF_NODE 13 ret LEAF_NODE 13 -> LEAF_NODE 13 group LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ret -> pub_key == NULL EXPR 8 ret -> pub_key == NULL FIELD 9 ret -> pub_key LEAF_NODE 10 ret LEAF_NODE 10 -> LEAF_NODE 10 pub_key EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_EC_LIB ) ; EXPR 10 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_EC_LIB ) FUNCTION_CALL 11 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_EC_LIB ) CALLEE 12 ECerr LEAF_NODE 13 ECerr LEAF_NODE 12 ( ARGUMENT 12 EC_F_D2I_ECPRIVATEKEY FIELD 13 EC_F_D2I_ECPRIVATEKEY LEAF_NODE 14 EC_F_D2I_ECPRIVATEKEY LEAF_NODE 12 , ARGUMENT 12 ERR_R_EC_LIB FIELD 13 ERR_R_EC_LIB LEAF_NODE 14 ERR_R_EC_LIB LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 err LEAF_NODE 11 err LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 pub_oct = M_ASN1_STRING_data ( priv_key -> publicKey ) ; EXPR 7 pub_oct = M_ASN1_STRING_data ( priv_key -> publicKey ) ASSIGN 8 pub_oct = M_ASN1_STRING_data ( priv_key -> publicKey ) LVAL 9 pub_oct FIELD 10 pub_oct LEAF_NODE 11 pub_oct ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 M_ASN1_STRING_data ( priv_key -> publicKey ) FUNCTION_CALL 10 M_ASN1_STRING_data ( priv_key -> publicKey ) CALLEE 11 M_ASN1_STRING_data LEAF_NODE 12 M_ASN1_STRING_data LEAF_NODE 11 ( ARGUMENT 11 priv_key -> publicKey FIELD 12 priv_key -> publicKey LEAF_NODE 13 priv_key LEAF_NODE 13 -> LEAF_NODE 13 publicKey LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 pub_oct_len = M_ASN1_STRING_length ( priv_key -> publicKey ) ; EXPR 7 pub_oct_len = M_ASN1_STRING_length ( priv_key -> publicKey ) ASSIGN 8 pub_oct_len = M_ASN1_STRING_length ( priv_key -> publicKey ) LVAL 9 pub_oct_len FIELD 10 pub_oct_len LEAF_NODE 11 pub_oct_len ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 M_ASN1_STRING_length ( priv_key -> publicKey ) FUNCTION_CALL 10 M_ASN1_STRING_length ( priv_key -> publicKey ) CALLEE 11 M_ASN1_STRING_length LEAF_NODE 12 M_ASN1_STRING_length LEAF_NODE 11 ( ARGUMENT 11 priv_key -> publicKey FIELD 12 priv_key -> publicKey LEAF_NODE 13 priv_key LEAF_NODE 13 -> LEAF_NODE 13 publicKey LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ret -> conv_form = ( point_conversion_form_t ) ( pub_oct [ 0 ] & ~0x01 ) ; EXPR 7 ret -> conv_form = ( point_conversion_form_t ) ( pub_oct [ 0 ] & ~0x01 ) ASSIGN 8 ret -> conv_form = ( point_conversion_form_t ) ( pub_oct [ 0 ] & ~0x01 ) LVAL 9 ret -> conv_form FIELD 10 ret -> conv_form LEAF_NODE 11 ret LEAF_NODE 11 -> LEAF_NODE 11 conv_form ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( point_conversion_form_t ) ( pub_oct [ 0 ] & ~0x01 ) LEAF_NODE 10 ( TYPE_NAME 10 point_conversion_form_t LEAF_NODE 11 point_conversion_form_t LEAF_NODE 10 ) LEAF_NODE 10 ( FIELD 10 pub_oct [ 0 ] LEAF_NODE 11 pub_oct LEAF_NODE 11 [ EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ] LEAF_NODE 10 & FIELD 10 ~0x01 LEAF_NODE 11 ~0x01 LEAF_NODE 10 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! EC_POINT_oct2point ( ret -> group , ret -> pub_key , pub_oct , pub_oct_len , NULL ) EXPR 8 ! EC_POINT_oct2point ( ret -> group , ret -> pub_key , pub_oct , pub_oct_len , NULL ) UNARY_EXPR 9 ! EC_POINT_oct2point ( ret -> group , ret -> pub_key , pub_oct , pub_oct_len , NULL ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 EC_POINT_oct2point ( ret -> group , ret -> pub_key , pub_oct , pub_oct_len , NULL ) CALLEE 11 EC_POINT_oct2point LEAF_NODE 12 EC_POINT_oct2point LEAF_NODE 11 ( ARGUMENT 11 ret -> group FIELD 12 ret -> group LEAF_NODE 13 ret LEAF_NODE 13 -> LEAF_NODE 13 group LEAF_NODE 11 , ARGUMENT 11 ret -> pub_key FIELD 12 ret -> pub_key LEAF_NODE 13 ret LEAF_NODE 13 -> LEAF_NODE 13 pub_key LEAF_NODE 11 , ARGUMENT 11 pub_oct FIELD 12 pub_oct LEAF_NODE 13 pub_oct LEAF_NODE 11 , ARGUMENT 11 pub_oct_len FIELD 12 pub_oct_len LEAF_NODE 13 pub_oct_len LEAF_NODE 11 , ARGUMENT 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_EC_LIB ) ; EXPR 10 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_EC_LIB ) FUNCTION_CALL 11 ECerr ( EC_F_D2I_ECPRIVATEKEY , ERR_R_EC_LIB ) CALLEE 12 ECerr LEAF_NODE 13 ECerr LEAF_NODE 12 ( ARGUMENT 12 EC_F_D2I_ECPRIVATEKEY FIELD 13 EC_F_D2I_ECPRIVATEKEY LEAF_NODE 14 EC_F_D2I_ECPRIVATEKEY LEAF_NODE 12 , ARGUMENT 12 ERR_R_EC_LIB FIELD 13 ERR_R_EC_LIB LEAF_NODE 14 ERR_R_EC_LIB LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 err LEAF_NODE 11 err LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 ok = 1 ; EXPR 4 ok = 1 ASSIGN 5 ok = 1 LVAL 6 ok FIELD 7 ok LEAF_NODE 8 ok ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; LABEL 3 err : LEAF_NODE 4 err LEAF_NODE 4 : SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ok EXPR 5 ! ok UNARY_EXPR 6 ! ok UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 ok LEAF_NODE 8 ok LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ret EXPR 8 ret FIELD 9 ret LEAF_NODE 10 ret LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 EC_KEY_free ( ret ) ; EXPR 9 EC_KEY_free ( ret ) FUNCTION_CALL 10 EC_KEY_free ( ret ) CALLEE 11 EC_KEY_free LEAF_NODE 12 EC_KEY_free LEAF_NODE 11 ( ARGUMENT 11 ret FIELD 12 ret LEAF_NODE 13 ret LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 6 ret = NULL ; EXPR 7 ret = NULL ASSIGN 8 ret = NULL LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 priv_key EXPR 5 priv_key FIELD 6 priv_key LEAF_NODE 7 priv_key LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 EC_PRIVATEKEY_free ( priv_key ) ; EXPR 6 EC_PRIVATEKEY_free ( priv_key ) FUNCTION_CALL 7 EC_PRIVATEKEY_free ( priv_key ) CALLEE 8 EC_PRIVATEKEY_free LEAF_NODE 9 EC_PRIVATEKEY_free LEAF_NODE 8 ( ARGUMENT 8 priv_key FIELD 9 priv_key LEAF_NODE 10 priv_key LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 3 return LEAF_NODE 3 ( LEAF_NODE 3 ret LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 2 }", "idx": 57, "project": "openssl_ast_vul_function_test_18", "target": 1}
{"func": "SIMPLE_DECL 1 int ret ; ret = 0 ; VAR_DECL 2 int ret ; ret = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 ret LEAF_NODE 4 ret LEAF_NODE 3 ; INIT 3 ret = 0 ASSIGN 4 ret = 0 LVAL 5 ret NAME 6 ret LEAF_NODE 7 ret ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; SIMPLE_DECL 1 char [ 288 + 1 ] buf ; VAR_DECL 2 char [ 288 + 1 ] buf TYPE 3 char [ 288 + 1 ] TYPE_NAME 4 char LEAF_NODE 5 char TYPE_SUFFIX 4 [ 288 + 1 ] LEAF_NODE 5 [ FIELD 5 288 LEAF_NODE 6 288 LEAF_NODE 5 + FIELD 5 1 LEAF_NODE 6 1 LEAF_NODE 5 ] NAME 3 buf LEAF_NODE 4 buf LEAF_NODE 2 ; SIMPLE_DECL 1 int i , int j , int rows , int n ; INIT_DECL_LIST 2 int i , int j , int rows , int n VAR_DECL 3 int i TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 i LEAF_NODE 5 i LEAF_NODE 3 , INIT_DECL_LIST 3 int j , int rows , int n VAR_DECL 4 int j TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 j LEAF_NODE 6 j LEAF_NODE 4 , INIT_DECL_LIST 4 int rows , int n VAR_DECL 5 int rows TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 rows LEAF_NODE 7 rows LEAF_NODE 5 , VAR_DECL 5 int n TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 n LEAF_NODE 7 n LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char ch ; VAR_DECL 2 unsigned char ch TYPE 3 unsigned char TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char NAME 3 ch LEAF_NODE 4 ch LEAF_NODE 2 ; SIMPLE_DECL 1 int dump_width ; VAR_DECL 2 int dump_width TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 dump_width LEAF_NODE 4 dump_width LEAF_NODE 2 ;", "idx": 58, "project": "openssl_ast_normal_function_test_40", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 longswap LEAF_NODE 3 longswap PARAMETER_LIST 2 ( void * _ptr , size_t len ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * _ptr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 _ptr LEAF_NODE 5 _ptr LEAF_NODE 3 , PARAMETER_DECL 3 size_t len TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 const LEAF_NODE 3 union LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 long one ; VAR_DECL 5 long one TYPE 6 long TYPE_NAME 7 long LEAF_NODE 8 long NAME 6 one LEAF_NODE 7 one LEAF_NODE 5 ; SIMPLE_DECL 4 char little ; VAR_DECL 5 char little TYPE 6 char TYPE_NAME 7 char LEAF_NODE 8 char NAME 6 little LEAF_NODE 7 little LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 3 is_endian LEAF_NODE 3 = LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 1 LEAF_NODE 3 } LEAF_NODE 3 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 is_endian . little EXPR 5 is_endian . little FIELD 6 is_endian . little LEAF_NODE 7 is_endian LEAF_NODE 7 . LEAF_NODE 7 little LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 size_t i ; VAR_DECL 7 size_t i TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 i LEAF_NODE 9 i LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * p ; p = _ptr , unsigned char c ; INIT_DECL_LIST 7 unsigned char * p ; p = _ptr , unsigned char c VAR_DECL 8 unsigned char * p ; p = _ptr TYPE 9 unsigned char * TYPE_NAME 10 unsigned char LEAF_NODE 11 unsigned LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 p LEAF_NODE 10 p LEAF_NODE 9 ; INIT 9 p = _ptr ASSIGN 10 p = _ptr LVAL 11 p NAME 12 p LEAF_NODE 13 p ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 _ptr FIELD 12 _ptr LEAF_NODE 13 _ptr LEAF_NODE 8 , VAR_DECL 8 unsigned char c TYPE 9 unsigned char TYPE_NAME 10 unsigned char LEAF_NODE 11 unsigned LEAF_NODE 11 char NAME 9 c LEAF_NODE 10 c LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 i = 0 ; EXPR 8 i = 0 ASSIGN 9 i = 0 LVAL 10 i FIELD 11 i LEAF_NODE 12 i ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 8 ; CONDITION 7 i < len EXPR 8 i < len FIELD 9 i LEAF_NODE 10 i REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 len LEAF_NODE 10 len LEAF_NODE 7 ; FOR_EXPR 7 i += 4 EXPR 8 i += 4 ASSIGN 9 i += 4 LVAL 10 i FIELD 11 i LEAF_NODE 12 i ASSIGN_OP 10 += LEAF_NODE 11 += RVAL 10 4 FIELD 11 4 LEAF_NODE 12 4 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 LEAF_NODE 9 c LEAF_NODE 9 = LEAF_NODE 9 p LEAF_NODE 9 [ LEAF_NODE 9 0 LEAF_NODE 9 ] LEAF_NODE 9 , EXPR_STATEMENT 9 p [ 0 ] = p [ 3 ] , p [ 3 ] = c ; EXPR 10 p [ 0 ] = p [ 3 ] , p [ 3 ] = c ASSIGN 11 p [ 0 ] = p [ 3 ] LVAL 12 p [ 0 ] FIELD 13 p [ 0 ] LEAF_NODE 14 p LEAF_NODE 14 [ EXPR 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 p [ 3 ] FIELD 13 p [ 3 ] LEAF_NODE 14 p LEAF_NODE 14 [ EXPR 14 3 FIELD 15 3 LEAF_NODE 16 3 LEAF_NODE 14 ] LEAF_NODE 11 , ASSIGN 11 p [ 3 ] = c LVAL 12 p [ 3 ] FIELD 13 p [ 3 ] LEAF_NODE 14 p LEAF_NODE 14 [ EXPR 14 3 FIELD 15 3 LEAF_NODE 16 3 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 c FIELD 13 c LEAF_NODE 14 c LEAF_NODE 10 ; LEAF_NODE 9 c LEAF_NODE 9 = LEAF_NODE 9 p LEAF_NODE 9 [ LEAF_NODE 9 1 LEAF_NODE 9 ] LEAF_NODE 9 , EXPR_STATEMENT 9 p [ 1 ] = p [ 2 ] , p [ 2 ] = c ; EXPR 10 p [ 1 ] = p [ 2 ] , p [ 2 ] = c ASSIGN 11 p [ 1 ] = p [ 2 ] LVAL 12 p [ 1 ] FIELD 13 p [ 1 ] LEAF_NODE 14 p LEAF_NODE 14 [ EXPR 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 p [ 2 ] FIELD 13 p [ 2 ] LEAF_NODE 14 p LEAF_NODE 14 [ EXPR 14 2 FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 14 ] LEAF_NODE 11 , ASSIGN 11 p [ 2 ] = c LVAL 12 p [ 2 ] FIELD 13 p [ 2 ] LEAF_NODE 14 p LEAF_NODE 14 [ EXPR 14 2 FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 c FIELD 13 c LEAF_NODE 14 c LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } LEAF_NODE 2 }", "idx": 59, "project": "openssl_ast_normal_function_test_138", "target": 0}
{"func": "SIMPLE_DECL 1 char * cert ; cert = NULL ; VAR_DECL 2 char * cert ; cert = NULL TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 cert LEAF_NODE 4 cert LEAF_NODE 3 ; INIT 3 cert = NULL ASSIGN 4 cert = NULL LVAL 5 cert NAME 6 cert LEAF_NODE 7 cert ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } ; CLASS_DEF 2 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } CLASS_DEF 3 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } LEAF_NODE 4 struct CLASS_NAME 4 async_ctrs LEAF_NODE 5 async_ctrs LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned int rctr ; unsigned int wctr ; SIMPLE_DECL 5 unsigned int rctr ; VAR_DECL 6 unsigned int rctr TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rctr LEAF_NODE 8 rctr LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int wctr ; VAR_DECL 6 unsigned int wctr TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 wctr LEAF_NODE 8 wctr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 char * privkey ; privkey = NULL ; VAR_DECL 2 char * privkey ; privkey = NULL TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 privkey LEAF_NODE 4 privkey LEAF_NODE 3 ; INIT 3 privkey = NULL ASSIGN 4 privkey = NULL LVAL 5 privkey NAME 6 privkey LEAF_NODE 7 privkey ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 setup_tests LEAF_NODE 3 setup_tests PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! TEST_ptr ( cert = test_get_argument ( 0 ) ) || ! TEST_ptr ( privkey = test_get_argument ( 1 ) ) EXPR 5 ! TEST_ptr ( cert = test_get_argument ( 0 ) ) || ! TEST_ptr ( privkey = test_get_argument ( 1 ) ) OR 6 ! TEST_ptr ( cert = test_get_argument ( 0 ) ) || ! TEST_ptr ( privkey = test_get_argument ( 1 ) ) EXPR 7 ! TEST_ptr ( cert = test_get_argument ( 0 ) ) UNARY_EXPR 8 ! TEST_ptr ( cert = test_get_argument ( 0 ) ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 TEST_ptr ( cert = test_get_argument ( 0 ) ) CALLEE 10 TEST_ptr LEAF_NODE 11 TEST_ptr LEAF_NODE 10 ( ARGUMENT 10 cert = test_get_argument ( 0 ) ASSIGN 11 cert = test_get_argument ( 0 ) LVAL 12 cert FIELD 13 cert LEAF_NODE 14 cert ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 test_get_argument ( 0 ) FUNCTION_CALL 13 test_get_argument ( 0 ) CALLEE 14 test_get_argument LEAF_NODE 15 test_get_argument LEAF_NODE 14 ( ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ) LEAF_NODE 10 ) LEAF_NODE 7 || EXPR 7 ! TEST_ptr ( privkey = test_get_argument ( 1 ) ) UNARY_EXPR 8 ! TEST_ptr ( privkey = test_get_argument ( 1 ) ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 TEST_ptr ( privkey = test_get_argument ( 1 ) ) CALLEE 10 TEST_ptr LEAF_NODE 11 TEST_ptr LEAF_NODE 10 ( ARGUMENT 10 privkey = test_get_argument ( 1 ) ASSIGN 11 privkey = test_get_argument ( 1 ) LVAL 12 privkey FIELD 13 privkey LEAF_NODE 14 privkey ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 test_get_argument ( 1 ) FUNCTION_CALL 13 test_get_argument ( 1 ) CALLEE 14 test_get_argument LEAF_NODE 15 test_get_argument LEAF_NODE 14 ( ARGUMENT 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 ) LEAF_NODE 10 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; EXPR_STATEMENT 3 ADD_ALL_TESTS ( test_asyncio , 2 ) ; EXPR 4 ADD_ALL_TESTS ( test_asyncio , 2 ) FUNCTION_CALL 5 ADD_ALL_TESTS ( test_asyncio , 2 ) CALLEE 6 ADD_ALL_TESTS LEAF_NODE 7 ADD_ALL_TESTS LEAF_NODE 6 ( ARGUMENT 6 test_asyncio FIELD 7 test_asyncio LEAF_NODE 8 test_asyncio LEAF_NODE 6 , ARGUMENT 6 2 FIELD 7 2 LEAF_NODE 8 2 LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 60, "project": "openssl_ast_normal_function_test_173", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 comp_zlib_cleanup_int LEAF_NODE 3 comp_zlib_cleanup_int PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 DSO_free ( zlib_dso ) ; EXPR 4 DSO_free ( zlib_dso ) FUNCTION_CALL 5 DSO_free ( zlib_dso ) CALLEE 6 DSO_free LEAF_NODE 7 DSO_free LEAF_NODE 6 ( ARGUMENT 6 zlib_dso FIELD 7 zlib_dso LEAF_NODE 8 zlib_dso LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 zlib_dso = NULL ; EXPR 4 zlib_dso = NULL ASSIGN 5 zlib_dso = NULL LVAL 6 zlib_dso FIELD 7 zlib_dso LEAF_NODE 8 zlib_dso ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 61, "project": "openssl_ast_normal_function_test_11", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ERR_load_ASN1_strings LEAF_NODE 3 ERR_load_ASN1_strings PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ERR_func_error_string ( ASN1_str_functs [ 0 ] . error ) == NULL EXPR 5 ERR_func_error_string ( ASN1_str_functs [ 0 ] . error ) == NULL FUNCTION_CALL 6 ERR_func_error_string ( ASN1_str_functs [ 0 ] . error ) CALLEE 7 ERR_func_error_string LEAF_NODE 8 ERR_func_error_string LEAF_NODE 7 ( ARGUMENT 7 ASN1_str_functs [ 0 ] . error FIELD 8 ASN1_str_functs [ 0 ] . error LEAF_NODE 9 ASN1_str_functs LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] LEAF_NODE 9 . LEAF_NODE 9 error LEAF_NODE 7 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ERR_load_strings_const ( ASN1_str_functs ) ; EXPR 7 ERR_load_strings_const ( ASN1_str_functs ) FUNCTION_CALL 8 ERR_load_strings_const ( ASN1_str_functs ) CALLEE 9 ERR_load_strings_const LEAF_NODE 10 ERR_load_strings_const LEAF_NODE 9 ( ARGUMENT 9 ASN1_str_functs FIELD 10 ASN1_str_functs LEAF_NODE 11 ASN1_str_functs LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ERR_load_strings_const ( ASN1_str_reasons ) ; EXPR 7 ERR_load_strings_const ( ASN1_str_reasons ) FUNCTION_CALL 8 ERR_load_strings_const ( ASN1_str_reasons ) CALLEE 9 ERR_load_strings_const LEAF_NODE 10 ERR_load_strings_const LEAF_NODE 9 ( ARGUMENT 9 ASN1_str_reasons FIELD 10 ASN1_str_reasons LEAF_NODE 11 ASN1_str_reasons LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 62, "project": "openssl_ast_normal_function_test_166", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 dtls1_process_buffered_records LEAF_NODE 3 dtls1_process_buffered_records PARAMETER_LIST 2 ( SSL * s ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 pitem * item ; VAR_DECL 4 pitem * item TYPE 5 pitem * TYPE_NAME 6 pitem LEAF_NODE 7 pitem POINTER 6 * LEAF_NODE 7 * NAME 5 item LEAF_NODE 6 item LEAF_NODE 4 ; SIMPLE_DECL 3 SSL3_BUFFER * rb ; VAR_DECL 4 SSL3_BUFFER * rb TYPE 5 SSL3_BUFFER * TYPE_NAME 6 SSL3_BUFFER LEAF_NODE 7 SSL3_BUFFER POINTER 6 * LEAF_NODE 7 * NAME 5 rb LEAF_NODE 6 rb LEAF_NODE 4 ; SIMPLE_DECL 3 SSL3_RECORD * rr ; VAR_DECL 4 SSL3_RECORD * rr TYPE 5 SSL3_RECORD * TYPE_NAME 6 SSL3_RECORD LEAF_NODE 7 SSL3_RECORD POINTER 6 * LEAF_NODE 7 * NAME 5 rr LEAF_NODE 6 rr LEAF_NODE 4 ; SIMPLE_DECL 3 DTLS1_BITMAP * bitmap ; VAR_DECL 4 DTLS1_BITMAP * bitmap TYPE 5 DTLS1_BITMAP * TYPE_NAME 6 DTLS1_BITMAP LEAF_NODE 7 DTLS1_BITMAP POINTER 6 * LEAF_NODE 7 * NAME 5 bitmap LEAF_NODE 6 bitmap LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int is_next_epoch ; VAR_DECL 4 unsigned int is_next_epoch TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 is_next_epoch LEAF_NODE 6 is_next_epoch LEAF_NODE 4 ; SIMPLE_DECL 3 int replayok ; replayok = 1 ; VAR_DECL 4 int replayok ; replayok = 1 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 replayok LEAF_NODE 6 replayok LEAF_NODE 5 ; INIT 5 replayok = 1 ASSIGN 6 replayok = 1 LVAL 7 replayok NAME 8 replayok LEAF_NODE 9 replayok ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 item = pqueue_peek ( s -> rlayer . d -> unprocessed_rcds . q ) ; EXPR 4 item = pqueue_peek ( s -> rlayer . d -> unprocessed_rcds . q ) ASSIGN 5 item = pqueue_peek ( s -> rlayer . d -> unprocessed_rcds . q ) LVAL 6 item FIELD 7 item LEAF_NODE 8 item ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 pqueue_peek ( s -> rlayer . d -> unprocessed_rcds . q ) FUNCTION_CALL 7 pqueue_peek ( s -> rlayer . d -> unprocessed_rcds . q ) CALLEE 8 pqueue_peek LEAF_NODE 9 pqueue_peek LEAF_NODE 8 ( ARGUMENT 8 s -> rlayer . d -> unprocessed_rcds . q FIELD 9 s -> rlayer . d -> unprocessed_rcds . q LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 rlayer LEAF_NODE 10 . LEAF_NODE 10 d LEAF_NODE 10 -> LEAF_NODE 10 unprocessed_rcds LEAF_NODE 10 . LEAF_NODE 10 q LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 item EXPR 5 item FIELD 6 item LEAF_NODE 7 item LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> rlayer . d -> unprocessed_rcds . epoch != s -> rlayer . d -> r_epoch EXPR 8 s -> rlayer . d -> unprocessed_rcds . epoch != s -> rlayer . d -> r_epoch FIELD 9 s -> rlayer . d -> unprocessed_rcds . epoch LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 rlayer LEAF_NODE 10 . LEAF_NODE 10 d LEAF_NODE 10 -> LEAF_NODE 10 unprocessed_rcds LEAF_NODE 10 . LEAF_NODE 10 epoch EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 s -> rlayer . d -> r_epoch LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 rlayer LEAF_NODE 10 . LEAF_NODE 10 d LEAF_NODE 10 -> LEAF_NODE 10 r_epoch LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return 1 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 1 EXPR 10 1 FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 9 ; EXPR_STATEMENT 6 rr = RECORD_LAYER_get_rrec ( & s -> rlayer ) ; EXPR 7 rr = RECORD_LAYER_get_rrec ( & s -> rlayer ) ASSIGN 8 rr = RECORD_LAYER_get_rrec ( & s -> rlayer ) LVAL 9 rr FIELD 10 rr LEAF_NODE 11 rr ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 RECORD_LAYER_get_rrec ( & s -> rlayer ) FUNCTION_CALL 10 RECORD_LAYER_get_rrec ( & s -> rlayer ) CALLEE 11 RECORD_LAYER_get_rrec LEAF_NODE 12 RECORD_LAYER_get_rrec LEAF_NODE 11 ( ARGUMENT 11 & s -> rlayer UNARY_EXPR 12 & s -> rlayer UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 s -> rlayer LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 rlayer LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 rb = RECORD_LAYER_get_rbuf ( & s -> rlayer ) ; EXPR 7 rb = RECORD_LAYER_get_rbuf ( & s -> rlayer ) ASSIGN 8 rb = RECORD_LAYER_get_rbuf ( & s -> rlayer ) LVAL 9 rb FIELD 10 rb LEAF_NODE 11 rb ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 RECORD_LAYER_get_rbuf ( & s -> rlayer ) FUNCTION_CALL 10 RECORD_LAYER_get_rbuf ( & s -> rlayer ) CALLEE 11 RECORD_LAYER_get_rbuf LEAF_NODE 12 RECORD_LAYER_get_rbuf LEAF_NODE 11 ( ARGUMENT 11 & s -> rlayer UNARY_EXPR 12 & s -> rlayer UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 s -> rlayer LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 rlayer LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 SSL3_BUFFER_get_left ( rb ) > 0 EXPR 8 SSL3_BUFFER_get_left ( rb ) > 0 FUNCTION_CALL 9 SSL3_BUFFER_get_left ( rb ) CALLEE 10 SSL3_BUFFER_get_left LEAF_NODE 11 SSL3_BUFFER_get_left LEAF_NODE 10 ( ARGUMENT 10 rb FIELD 11 rb LEAF_NODE 12 rb LEAF_NODE 10 ) REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 JUMP_STATEMENT 9 return 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 1 EXPR 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 10 ; LEAF_NODE 8 } ITERATION 6 KEYWORD 7 while LEAF_NODE 8 while LEAF_NODE 7 ( CONDITION 7 pqueue_peek ( s -> rlayer . d -> unprocessed_rcds . q ) EXPR 8 pqueue_peek ( s -> rlayer . d -> unprocessed_rcds . q ) FUNCTION_CALL 9 pqueue_peek ( s -> rlayer . d -> unprocessed_rcds . q ) CALLEE 10 pqueue_peek LEAF_NODE 11 pqueue_peek LEAF_NODE 10 ( ARGUMENT 10 s -> rlayer . d -> unprocessed_rcds . q FIELD 11 s -> rlayer . d -> unprocessed_rcds . q LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 rlayer LEAF_NODE 12 . LEAF_NODE 12 d LEAF_NODE 12 -> LEAF_NODE 12 unprocessed_rcds LEAF_NODE 12 . LEAF_NODE 12 q LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 dtls1_get_unprocessed_record ( s ) ; EXPR 10 dtls1_get_unprocessed_record ( s ) FUNCTION_CALL 11 dtls1_get_unprocessed_record ( s ) CALLEE 12 dtls1_get_unprocessed_record LEAF_NODE 13 dtls1_get_unprocessed_record LEAF_NODE 12 ( ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 bitmap = dtls1_get_bitmap ( s , rr , & is_next_epoch ) ; EXPR 10 bitmap = dtls1_get_bitmap ( s , rr , & is_next_epoch ) ASSIGN 11 bitmap = dtls1_get_bitmap ( s , rr , & is_next_epoch ) LVAL 12 bitmap FIELD 13 bitmap LEAF_NODE 14 bitmap ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 dtls1_get_bitmap ( s , rr , & is_next_epoch ) FUNCTION_CALL 13 dtls1_get_bitmap ( s , rr , & is_next_epoch ) CALLEE 14 dtls1_get_bitmap LEAF_NODE 15 dtls1_get_bitmap LEAF_NODE 14 ( ARGUMENT 14 s FIELD 15 s LEAF_NODE 16 s LEAF_NODE 14 , ARGUMENT 14 rr FIELD 15 rr LEAF_NODE 16 rr LEAF_NODE 14 , ARGUMENT 14 & is_next_epoch UNARY_EXPR 15 & is_next_epoch UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 is_next_epoch LEAF_NODE 17 is_next_epoch LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 bitmap == NULL EXPR 11 bitmap == NULL FIELD 12 bitmap LEAF_NODE 13 bitmap EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 SSLerr ( SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS , ERR_R_INTERNAL_ERROR ) ; EXPR 13 SSLerr ( SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 14 SSLerr ( SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS , ERR_R_INTERNAL_ERROR ) CALLEE 15 SSLerr LEAF_NODE 16 SSLerr LEAF_NODE 15 ( ARGUMENT 15 SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS FIELD 16 SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS LEAF_NODE 17 SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS LEAF_NODE 15 , ARGUMENT 15 ERR_R_INTERNAL_ERROR FIELD 16 ERR_R_INTERNAL_ERROR LEAF_NODE 17 ERR_R_INTERNAL_ERROR LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 return 0 ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 0 EXPR 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! BIO_dgram_is_sctp ( SSL_get_rbio ( s ) ) EXPR 11 ! BIO_dgram_is_sctp ( SSL_get_rbio ( s ) ) UNARY_EXPR 12 ! BIO_dgram_is_sctp ( SSL_get_rbio ( s ) ) UNARY_OPERATOR 13 ! LEAF_NODE 14 ! FUNCTION_CALL 13 BIO_dgram_is_sctp ( SSL_get_rbio ( s ) ) CALLEE 14 BIO_dgram_is_sctp LEAF_NODE 15 BIO_dgram_is_sctp LEAF_NODE 14 ( ARGUMENT 14 SSL_get_rbio ( s ) FUNCTION_CALL 15 SSL_get_rbio ( s ) CALLEE 16 SSL_get_rbio LEAF_NODE 17 SSL_get_rbio LEAF_NODE 16 ( ARGUMENT 16 s FIELD 17 s LEAF_NODE 18 s LEAF_NODE 16 ) LEAF_NODE 14 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 replayok = dtls1_record_replay_check ( s , bitmap ) ; EXPR 13 replayok = dtls1_record_replay_check ( s , bitmap ) ASSIGN 14 replayok = dtls1_record_replay_check ( s , bitmap ) LVAL 15 replayok FIELD 16 replayok LEAF_NODE 17 replayok ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 dtls1_record_replay_check ( s , bitmap ) FUNCTION_CALL 16 dtls1_record_replay_check ( s , bitmap ) CALLEE 17 dtls1_record_replay_check LEAF_NODE 18 dtls1_record_replay_check LEAF_NODE 17 ( ARGUMENT 17 s FIELD 18 s LEAF_NODE 19 s LEAF_NODE 17 , ARGUMENT 17 bitmap FIELD 18 bitmap LEAF_NODE 19 bitmap LEAF_NODE 17 ) LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! replayok || ! dtls1_process_record ( s , bitmap ) EXPR 11 ! replayok || ! dtls1_process_record ( s , bitmap ) OR 12 ! replayok || ! dtls1_process_record ( s , bitmap ) EXPR 13 ! replayok UNARY_EXPR 14 ! replayok UNARY_OPERATOR 15 ! LEAF_NODE 16 ! FIELD 15 replayok LEAF_NODE 16 replayok LEAF_NODE 13 || EXPR 13 ! dtls1_process_record ( s , bitmap ) UNARY_EXPR 14 ! dtls1_process_record ( s , bitmap ) UNARY_OPERATOR 15 ! LEAF_NODE 16 ! FUNCTION_CALL 15 dtls1_process_record ( s , bitmap ) CALLEE 16 dtls1_process_record LEAF_NODE 17 dtls1_process_record LEAF_NODE 16 ( ARGUMENT 16 s FIELD 17 s LEAF_NODE 18 s LEAF_NODE 16 , ARGUMENT 16 bitmap FIELD 17 bitmap LEAF_NODE 18 bitmap LEAF_NODE 16 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 rr -> length = 0 ; EXPR 13 rr -> length = 0 ASSIGN 14 rr -> length = 0 LVAL 15 rr -> length FIELD 16 rr -> length LEAF_NODE 17 rr LEAF_NODE 17 -> LEAF_NODE 17 length ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 13 ; EXPR_STATEMENT 12 RECORD_LAYER_reset_packet_length ( & s -> rlayer ) ; EXPR 13 RECORD_LAYER_reset_packet_length ( & s -> rlayer ) FUNCTION_CALL 14 RECORD_LAYER_reset_packet_length ( & s -> rlayer ) CALLEE 15 RECORD_LAYER_reset_packet_length LEAF_NODE 16 RECORD_LAYER_reset_packet_length LEAF_NODE 15 ( ARGUMENT 15 & s -> rlayer UNARY_EXPR 16 & s -> rlayer UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 s -> rlayer LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 rlayer LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 continue DESTINATION ; KEYWORD 13 continue LEAF_NODE 14 continue LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 dtls1_buffer_record ( s , & ( s -> rlayer . d -> processed_rcds ) , SSL3_RECORD_get_seq_num ( s -> rlayer . rrec ) ) < 0 EXPR 11 dtls1_buffer_record ( s , & ( s -> rlayer . d -> processed_rcds ) , SSL3_RECORD_get_seq_num ( s -> rlayer . rrec ) ) < 0 FUNCTION_CALL 12 dtls1_buffer_record ( s , & ( s -> rlayer . d -> processed_rcds ) , SSL3_RECORD_get_seq_num ( s -> rlayer . rrec ) ) CALLEE 13 dtls1_buffer_record LEAF_NODE 14 dtls1_buffer_record LEAF_NODE 13 ( ARGUMENT 13 s FIELD 14 s LEAF_NODE 15 s LEAF_NODE 13 , ARGUMENT 13 & ( s -> rlayer . d -> processed_rcds ) UNARY_EXPR 14 & ( s -> rlayer . d -> processed_rcds ) UNARY_OPERATOR 15 & LEAF_NODE 16 & LEAF_NODE 15 ( FIELD 15 s -> rlayer . d -> processed_rcds LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 rlayer LEAF_NODE 16 . LEAF_NODE 16 d LEAF_NODE 16 -> LEAF_NODE 16 processed_rcds LEAF_NODE 15 ) LEAF_NODE 13 , ARGUMENT 13 SSL3_RECORD_get_seq_num ( s -> rlayer . rrec ) FUNCTION_CALL 14 SSL3_RECORD_get_seq_num ( s -> rlayer . rrec ) CALLEE 15 SSL3_RECORD_get_seq_num LEAF_NODE 16 SSL3_RECORD_get_seq_num LEAF_NODE 15 ( ARGUMENT 15 s -> rlayer . rrec FIELD 16 s -> rlayer . rrec LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 rlayer LEAF_NODE 17 . LEAF_NODE 17 rrec LEAF_NODE 15 ) LEAF_NODE 13 ) REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 return 0 ; KEYWORD 12 return LEAF_NODE 13 return DESTINATION 12 0 EXPR 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 s -> rlayer . d -> processed_rcds . epoch = s -> rlayer . d -> r_epoch ; EXPR 4 s -> rlayer . d -> processed_rcds . epoch = s -> rlayer . d -> r_epoch ASSIGN 5 s -> rlayer . d -> processed_rcds . epoch = s -> rlayer . d -> r_epoch LVAL 6 s -> rlayer . d -> processed_rcds . epoch FIELD 7 s -> rlayer . d -> processed_rcds . epoch LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 rlayer LEAF_NODE 8 . LEAF_NODE 8 d LEAF_NODE 8 -> LEAF_NODE 8 processed_rcds LEAF_NODE 8 . LEAF_NODE 8 epoch ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 s -> rlayer . d -> r_epoch FIELD 7 s -> rlayer . d -> r_epoch LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 rlayer LEAF_NODE 8 . LEAF_NODE 8 d LEAF_NODE 8 -> LEAF_NODE 8 r_epoch LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> rlayer . d -> unprocessed_rcds . epoch = s -> rlayer . d -> r_epoch + 1 ; EXPR 4 s -> rlayer . d -> unprocessed_rcds . epoch = s -> rlayer . d -> r_epoch + 1 ASSIGN 5 s -> rlayer . d -> unprocessed_rcds . epoch = s -> rlayer . d -> r_epoch + 1 LVAL 6 s -> rlayer . d -> unprocessed_rcds . epoch FIELD 7 s -> rlayer . d -> unprocessed_rcds . epoch LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 rlayer LEAF_NODE 8 . LEAF_NODE 8 d LEAF_NODE 8 -> LEAF_NODE 8 unprocessed_rcds LEAF_NODE 8 . LEAF_NODE 8 epoch ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 s -> rlayer . d -> r_epoch + 1 FIELD 7 s -> rlayer . d -> r_epoch LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 rlayer LEAF_NODE 8 . LEAF_NODE 8 d LEAF_NODE 8 -> LEAF_NODE 8 r_epoch LEAF_NODE 7 + FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 63, "project": "openssl_ast_vul_function_test_6", "target": 1}
{"func": "SIMPLE_DECL 1 ENGINE * e ; VAR_DECL 2 ENGINE * e TYPE 3 ENGINE * TYPE_NAME 4 ENGINE LEAF_NODE 5 ENGINE POINTER 4 * LEAF_NODE 5 * NAME 3 e LEAF_NODE 4 e LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 cleanup_tests LEAF_NODE 3 cleanup_tests PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 ENGINE_free ( e ) ; EXPR 4 ENGINE_free ( e ) FUNCTION_CALL 5 ENGINE_free ( e ) CALLEE 6 ENGINE_free LEAF_NODE 7 ENGINE_free LEAF_NODE 6 ( ARGUMENT 6 e FIELD 7 e LEAF_NODE 8 e LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 64, "project": "openssl_ast_normal_function_test_129", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 mask_cb LEAF_NODE 3 mask_cb PARAMETER_LIST 2 ( const char * elem , int len , void * arg ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * elem TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 elem LEAF_NODE 5 elem LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 , PARAMETER_DECL 3 void * arg TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 arg LEAF_NODE 5 arg LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned long * pmask ; pmask = arg , unsigned long tmpmask ; INIT_DECL_LIST 4 unsigned long * pmask ; pmask = arg , unsigned long tmpmask VAR_DECL 5 unsigned long * pmask ; pmask = arg TYPE 6 unsigned long * TYPE_NAME 7 unsigned long LEAF_NODE 8 unsigned LEAF_NODE 8 long POINTER 7 * LEAF_NODE 8 * NAME 6 pmask LEAF_NODE 7 pmask LEAF_NODE 6 ; INIT 6 pmask = arg ASSIGN 7 pmask = arg LVAL 8 pmask NAME 9 pmask LEAF_NODE 10 pmask ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 arg FIELD 9 arg LEAF_NODE 10 arg LEAF_NODE 5 , VAR_DECL 5 unsigned long tmpmask TYPE 6 unsigned long TYPE_NAME 7 unsigned long LEAF_NODE 8 unsigned LEAF_NODE 8 long NAME 6 tmpmask LEAF_NODE 7 tmpmask LEAF_NODE 4 ; SIMPLE_DECL 3 int tag ; VAR_DECL 4 int tag TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 tag LEAF_NODE 6 tag LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 elem == NULL EXPR 5 elem == NULL FIELD 6 elem LEAF_NODE 7 elem EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 len == 3 && HAS_PREFIX ( elem , \"DIR\" ) EXPR 5 len == 3 && HAS_PREFIX ( elem , \"DIR\" ) AND 6 len == 3 && HAS_PREFIX ( elem , \"DIR\" ) EXPR 7 len == 3 FIELD 8 len LEAF_NODE 9 len EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 3 LEAF_NODE 9 3 LEAF_NODE 7 && EXPR 7 HAS_PREFIX ( elem , \"DIR\" ) FUNCTION_CALL 8 HAS_PREFIX ( elem , \"DIR\" ) CALLEE 9 HAS_PREFIX LEAF_NODE 10 HAS_PREFIX LEAF_NODE 9 ( ARGUMENT 9 elem FIELD 10 elem LEAF_NODE 11 elem LEAF_NODE 9 , ARGUMENT 9 \"DIR\" FIELD 10 \"DIR\" LEAF_NODE 11 \"DIR\" LEAF_NODE 9 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 * pmask |= B_ASN1_DIRECTORYSTRING ; EXPR 7 * pmask |= B_ASN1_DIRECTORYSTRING ASSIGN 8 * pmask |= B_ASN1_DIRECTORYSTRING LVAL 9 * pmask UNARY_EXPR 10 * pmask UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 pmask LEAF_NODE 12 pmask ASSIGN_OP 9 |= LEAF_NODE 10 |= RVAL 9 B_ASN1_DIRECTORYSTRING FIELD 10 B_ASN1_DIRECTORYSTRING LEAF_NODE 11 B_ASN1_DIRECTORYSTRING LEAF_NODE 7 ; JUMP_STATEMENT 6 return 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 1 EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 tag = asn1_str2tag ( elem , len ) ; EXPR 4 tag = asn1_str2tag ( elem , len ) ASSIGN 5 tag = asn1_str2tag ( elem , len ) LVAL 6 tag FIELD 7 tag LEAF_NODE 8 tag ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 asn1_str2tag ( elem , len ) FUNCTION_CALL 7 asn1_str2tag ( elem , len ) CALLEE 8 asn1_str2tag LEAF_NODE 9 asn1_str2tag LEAF_NODE 8 ( ARGUMENT 8 elem FIELD 9 elem LEAF_NODE 10 elem LEAF_NODE 8 , ARGUMENT 8 len FIELD 9 len LEAF_NODE 10 len LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! tag || ( tag & ASN1_GEN_FLAG ) EXPR 5 ! tag || ( tag & ASN1_GEN_FLAG ) OR 6 ! tag || ( tag & ASN1_GEN_FLAG ) EXPR 7 ! tag UNARY_EXPR 8 ! tag UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 tag LEAF_NODE 10 tag LEAF_NODE 7 || EXPR 7 ( tag & ASN1_GEN_FLAG ) LEAF_NODE 8 ( FIELD 8 tag LEAF_NODE 9 tag LEAF_NODE 8 & FIELD 8 ASN1_GEN_FLAG LEAF_NODE 9 ASN1_GEN_FLAG LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; EXPR_STATEMENT 3 tmpmask = ASN1_tag2bit ( tag ) ; EXPR 4 tmpmask = ASN1_tag2bit ( tag ) ASSIGN 5 tmpmask = ASN1_tag2bit ( tag ) LVAL 6 tmpmask FIELD 7 tmpmask LEAF_NODE 8 tmpmask ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ASN1_tag2bit ( tag ) FUNCTION_CALL 7 ASN1_tag2bit ( tag ) CALLEE 8 ASN1_tag2bit LEAF_NODE 9 ASN1_tag2bit LEAF_NODE 8 ( ARGUMENT 8 tag FIELD 9 tag LEAF_NODE 10 tag LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! tmpmask EXPR 5 ! tmpmask UNARY_EXPR 6 ! tmpmask UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 tmpmask LEAF_NODE 8 tmpmask LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; EXPR_STATEMENT 3 * pmask |= tmpmask ; EXPR 4 * pmask |= tmpmask ASSIGN 5 * pmask |= tmpmask LVAL 6 * pmask UNARY_EXPR 7 * pmask UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 pmask LEAF_NODE 9 pmask ASSIGN_OP 6 |= LEAF_NODE 7 |= RVAL 6 tmpmask FIELD 7 tmpmask LEAF_NODE 8 tmpmask LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_str2mask LEAF_NODE 3 ASN1_str2mask PARAMETER_LIST 2 ( const char * str , unsigned long * pmask ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * str TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 str LEAF_NODE 5 str LEAF_NODE 3 , PARAMETER_DECL 3 unsigned long * pmask TYPE 4 unsigned long * TYPE_NAME 5 unsigned long LEAF_NODE 6 unsigned LEAF_NODE 6 long POINTER 5 * LEAF_NODE 6 * NAME 4 pmask LEAF_NODE 5 pmask LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 * pmask = 0 ; EXPR 4 * pmask = 0 ASSIGN 5 * pmask = 0 LVAL 6 * pmask UNARY_EXPR 7 * pmask UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 pmask LEAF_NODE 9 pmask ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; JUMP_STATEMENT 3 return CONF_parse_list ( str , '|' , 1 , mask_cb , pmask ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 CONF_parse_list ( str , '|' , 1 , mask_cb , pmask ) EXPR 5 CONF_parse_list ( str , '|' , 1 , mask_cb , pmask ) FUNCTION_CALL 6 CONF_parse_list ( str , '|' , 1 , mask_cb , pmask ) CALLEE 7 CONF_parse_list LEAF_NODE 8 CONF_parse_list LEAF_NODE 7 ( ARGUMENT 7 str FIELD 8 str LEAF_NODE 9 str LEAF_NODE 7 , ARGUMENT 7 '|' FIELD 8 '|' LEAF_NODE 9 '|' LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 mask_cb FIELD 8 mask_cb LEAF_NODE 9 mask_cb LEAF_NODE 7 , ARGUMENT 7 pmask FIELD 8 pmask LEAF_NODE 9 pmask LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 65, "project": "openssl_ast_normal_function_test_64", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ssl3_send_client_key_exchange LEAF_NODE 3 ssl3_send_client_key_exchange PARAMETER_LIST 2 ( SSL * s ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned char * p , unsigned char * d ; INIT_DECL_LIST 4 unsigned char * p , unsigned char * d VAR_DECL 5 unsigned char * p TYPE 6 unsigned char * TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 p LEAF_NODE 7 p LEAF_NODE 5 , VAR_DECL 5 unsigned char * d TYPE 6 unsigned char * TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 d LEAF_NODE 7 d LEAF_NODE 4 ; SIMPLE_DECL 3 int n ; VAR_DECL 4 int n TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 n LEAF_NODE 6 n LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned long alg_k ; VAR_DECL 4 unsigned long alg_k TYPE 5 unsigned long TYPE_NAME 6 unsigned long LEAF_NODE 7 unsigned LEAF_NODE 7 long NAME 5 alg_k LEAF_NODE 6 alg_k LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * q ; VAR_DECL 4 unsigned char * q TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 q LEAF_NODE 6 q LEAF_NODE 4 ; SIMPLE_DECL 3 EVP_PKEY * pkey ; pkey = NULL ; VAR_DECL 4 EVP_PKEY * pkey ; pkey = NULL TYPE 5 EVP_PKEY * TYPE_NAME 6 EVP_PKEY LEAF_NODE 7 EVP_PKEY POINTER 6 * LEAF_NODE 7 * NAME 5 pkey LEAF_NODE 6 pkey LEAF_NODE 5 ; INIT 5 pkey = NULL ASSIGN 6 pkey = NULL LVAL 7 pkey NAME 8 pkey LEAF_NODE 9 pkey ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 KSSL_ERR kssl_err ; VAR_DECL 4 KSSL_ERR kssl_err TYPE 5 KSSL_ERR TYPE_NAME 6 KSSL_ERR LEAF_NODE 7 KSSL_ERR NAME 5 kssl_err LEAF_NODE 6 kssl_err LEAF_NODE 4 ; SIMPLE_DECL 3 EC_KEY * clnt_ecdh ; clnt_ecdh = NULL ; VAR_DECL 4 EC_KEY * clnt_ecdh ; clnt_ecdh = NULL TYPE 5 EC_KEY * TYPE_NAME 6 EC_KEY LEAF_NODE 7 EC_KEY POINTER 6 * LEAF_NODE 7 * NAME 5 clnt_ecdh LEAF_NODE 6 clnt_ecdh LEAF_NODE 5 ; INIT 5 clnt_ecdh = NULL ASSIGN 6 clnt_ecdh = NULL LVAL 7 clnt_ecdh NAME 8 clnt_ecdh LEAF_NODE 9 clnt_ecdh ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 const EC_POINT * srvr_ecpoint ; srvr_ecpoint = NULL ; VAR_DECL 4 const EC_POINT * srvr_ecpoint ; srvr_ecpoint = NULL TYPE 5 const EC_POINT * TYPE_NAME 6 const EC_POINT LEAF_NODE 7 const LEAF_NODE 7 EC_POINT POINTER 6 * LEAF_NODE 7 * NAME 5 srvr_ecpoint LEAF_NODE 6 srvr_ecpoint LEAF_NODE 5 ; INIT 5 srvr_ecpoint = NULL ASSIGN 6 srvr_ecpoint = NULL LVAL 7 srvr_ecpoint NAME 8 srvr_ecpoint LEAF_NODE 9 srvr_ecpoint ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 EVP_PKEY * srvr_pub_pkey ; srvr_pub_pkey = NULL ; VAR_DECL 4 EVP_PKEY * srvr_pub_pkey ; srvr_pub_pkey = NULL TYPE 5 EVP_PKEY * TYPE_NAME 6 EVP_PKEY LEAF_NODE 7 EVP_PKEY POINTER 6 * LEAF_NODE 7 * NAME 5 srvr_pub_pkey LEAF_NODE 6 srvr_pub_pkey LEAF_NODE 5 ; INIT 5 srvr_pub_pkey = NULL ASSIGN 6 srvr_pub_pkey = NULL LVAL 7 srvr_pub_pkey NAME 8 srvr_pub_pkey LEAF_NODE 9 srvr_pub_pkey ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * encodedPoint ; encodedPoint = NULL ; VAR_DECL 4 unsigned char * encodedPoint ; encodedPoint = NULL TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 encodedPoint LEAF_NODE 6 encodedPoint LEAF_NODE 5 ; INIT 5 encodedPoint = NULL ASSIGN 6 encodedPoint = NULL LVAL 7 encodedPoint NAME 8 encodedPoint LEAF_NODE 9 encodedPoint ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int encoded_pt_len ; encoded_pt_len = 0 ; VAR_DECL 4 int encoded_pt_len ; encoded_pt_len = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 encoded_pt_len LEAF_NODE 6 encoded_pt_len LEAF_NODE 5 ; INIT 5 encoded_pt_len = 0 ASSIGN 6 encoded_pt_len = 0 LVAL 7 encoded_pt_len NAME 8 encoded_pt_len LEAF_NODE 9 encoded_pt_len ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 BN_CTX * bn_ctx ; bn_ctx = NULL ; VAR_DECL 4 BN_CTX * bn_ctx ; bn_ctx = NULL TYPE 5 BN_CTX * TYPE_NAME 6 BN_CTX LEAF_NODE 7 BN_CTX POINTER 6 * LEAF_NODE 7 * NAME 5 bn_ctx LEAF_NODE 6 bn_ctx LEAF_NODE 5 ; INIT 5 bn_ctx = NULL ASSIGN 6 bn_ctx = NULL LVAL 7 bn_ctx NAME 8 bn_ctx LEAF_NODE 9 bn_ctx ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> state == SSL3_ST_CW_KEY_EXCH_A EXPR 5 s -> state == SSL3_ST_CW_KEY_EXCH_A FIELD 6 s -> state LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 state EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 SSL3_ST_CW_KEY_EXCH_A LEAF_NODE 7 SSL3_ST_CW_KEY_EXCH_A LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 d = ( unsigned char * ) s -> init_buf -> data ; EXPR 7 d = ( unsigned char * ) s -> init_buf -> data ASSIGN 8 d = ( unsigned char * ) s -> init_buf -> data LVAL 9 d FIELD 10 d LEAF_NODE 11 d ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( unsigned char * ) s -> init_buf -> data LEAF_NODE 10 ( TYPE_NAME 10 unsigned char LEAF_NODE 11 unsigned LEAF_NODE 11 char LEAF_NODE 10 * LEAF_NODE 10 ) FIELD 10 s -> init_buf -> data LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 init_buf LEAF_NODE 11 -> LEAF_NODE 11 data LEAF_NODE 7 ; EXPR_STATEMENT 6 p = & ( d [ 4 ] ) ; EXPR 7 p = & ( d [ 4 ] ) ASSIGN 8 p = & ( d [ 4 ] ) LVAL 9 p FIELD 10 p LEAF_NODE 11 p ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 & ( d [ 4 ] ) UNARY_EXPR 10 & ( d [ 4 ] ) UNARY_OPERATOR 11 & LEAF_NODE 12 & LEAF_NODE 11 ( FIELD 11 d [ 4 ] LEAF_NODE 12 d LEAF_NODE 12 [ EXPR 12 4 FIELD 13 4 LEAF_NODE 14 4 LEAF_NODE 12 ] LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 alg_k = s -> s3 -> tmp . new_cipher -> algorithm_mkey ; EXPR 7 alg_k = s -> s3 -> tmp . new_cipher -> algorithm_mkey ASSIGN 8 alg_k = s -> s3 -> tmp . new_cipher -> algorithm_mkey LVAL 9 alg_k FIELD 10 alg_k LEAF_NODE 11 alg_k ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 s -> s3 -> tmp . new_cipher -> algorithm_mkey FIELD 10 s -> s3 -> tmp . new_cipher -> algorithm_mkey LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s3 LEAF_NODE 11 -> LEAF_NODE 11 tmp LEAF_NODE 11 . LEAF_NODE 11 new_cipher LEAF_NODE 11 -> LEAF_NODE 11 algorithm_mkey LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { LEAF_NODE 8 STATEMENTS LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 alg_k & SSL_kRSA EXPR 10 alg_k & SSL_kRSA FIELD 11 alg_k LEAF_NODE 12 alg_k LEAF_NODE 11 & FIELD 11 SSL_kRSA LEAF_NODE 12 SSL_kRSA LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SIMPLE_DECL 11 RSA * rsa ; VAR_DECL 12 RSA * rsa TYPE 13 RSA * TYPE_NAME 14 RSA LEAF_NODE 15 RSA POINTER 14 * LEAF_NODE 15 * NAME 13 rsa LEAF_NODE 14 rsa LEAF_NODE 12 ; SIMPLE_DECL 11 unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] tmp_buf ; VAR_DECL 12 unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] tmp_buf TYPE 13 unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] TYPE_NAME 14 unsigned char LEAF_NODE 15 unsigned LEAF_NODE 15 char TYPE_SUFFIX 14 [ SSL_MAX_MASTER_KEY_LENGTH ] LEAF_NODE 15 [ FIELD 15 SSL_MAX_MASTER_KEY_LENGTH LEAF_NODE 16 SSL_MAX_MASTER_KEY_LENGTH LEAF_NODE 15 ] NAME 13 tmp_buf LEAF_NODE 14 tmp_buf LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> session -> sess_cert -> peer_rsa_tmp != NULL EXPR 13 s -> session -> sess_cert -> peer_rsa_tmp != NULL FIELD 14 s -> session -> sess_cert -> peer_rsa_tmp LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 session LEAF_NODE 15 -> LEAF_NODE 15 sess_cert LEAF_NODE 15 -> LEAF_NODE 15 peer_rsa_tmp EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 rsa = s -> session -> sess_cert -> peer_rsa_tmp ; EXPR 14 rsa = s -> session -> sess_cert -> peer_rsa_tmp ASSIGN 15 rsa = s -> session -> sess_cert -> peer_rsa_tmp LVAL 16 rsa FIELD 17 rsa LEAF_NODE 18 rsa ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 s -> session -> sess_cert -> peer_rsa_tmp FIELD 17 s -> session -> sess_cert -> peer_rsa_tmp LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 session LEAF_NODE 18 -> LEAF_NODE 18 sess_cert LEAF_NODE 18 -> LEAF_NODE 18 peer_rsa_tmp LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 else LEAF_NODE 13 else STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 pkey = X509_get_pubkey ( s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_RSA_ENC ] . x509 ) ; EXPR 15 pkey = X509_get_pubkey ( s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_RSA_ENC ] . x509 ) ASSIGN 16 pkey = X509_get_pubkey ( s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_RSA_ENC ] . x509 ) LVAL 17 pkey FIELD 18 pkey LEAF_NODE 19 pkey ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 X509_get_pubkey ( s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_RSA_ENC ] . x509 ) FUNCTION_CALL 18 X509_get_pubkey ( s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_RSA_ENC ] . x509 ) CALLEE 19 X509_get_pubkey LEAF_NODE 20 X509_get_pubkey LEAF_NODE 19 ( ARGUMENT 19 s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_RSA_ENC ] . x509 FIELD 20 s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_RSA_ENC ] . x509 LEAF_NODE 21 s LEAF_NODE 21 -> LEAF_NODE 21 session LEAF_NODE 21 -> LEAF_NODE 21 sess_cert LEAF_NODE 21 -> LEAF_NODE 21 peer_pkeys LEAF_NODE 21 [ EXPR 21 SSL_PKEY_RSA_ENC FIELD 22 SSL_PKEY_RSA_ENC LEAF_NODE 23 SSL_PKEY_RSA_ENC LEAF_NODE 21 ] LEAF_NODE 21 . LEAF_NODE 21 x509 LEAF_NODE 19 ) LEAF_NODE 15 ; SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 ( pkey == NULL ) || ( pkey -> type != EVP_PKEY_RSA ) || ( pkey -> pkey . rsa == NULL ) EXPR 16 ( pkey == NULL ) || ( pkey -> type != EVP_PKEY_RSA ) || ( pkey -> pkey . rsa == NULL ) OR 17 ( pkey == NULL ) || ( pkey -> type != EVP_PKEY_RSA ) || ( pkey -> pkey . rsa == NULL ) EXPR 18 ( pkey == NULL ) LEAF_NODE 19 ( FIELD 19 pkey LEAF_NODE 20 pkey EQ_OPERATOR 19 == LEAF_NODE 20 == FIELD 19 NULL LEAF_NODE 20 NULL LEAF_NODE 19 ) LEAF_NODE 18 || EXPR 18 ( pkey -> type != EVP_PKEY_RSA ) || ( pkey -> pkey . rsa == NULL ) OR 19 ( pkey -> type != EVP_PKEY_RSA ) || ( pkey -> pkey . rsa == NULL ) EXPR 20 ( pkey -> type != EVP_PKEY_RSA ) LEAF_NODE 21 ( FIELD 21 pkey -> type LEAF_NODE 22 pkey LEAF_NODE 22 -> LEAF_NODE 22 type EQ_OPERATOR 21 != LEAF_NODE 22 != FIELD 21 EVP_PKEY_RSA LEAF_NODE 22 EVP_PKEY_RSA LEAF_NODE 21 ) LEAF_NODE 20 || EXPR 20 ( pkey -> pkey . rsa == NULL ) LEAF_NODE 21 ( FIELD 21 pkey -> pkey . rsa LEAF_NODE 22 pkey LEAF_NODE 22 -> LEAF_NODE 22 pkey LEAF_NODE 22 . LEAF_NODE 22 rsa EQ_OPERATOR 21 == LEAF_NODE 22 == FIELD 21 NULL LEAF_NODE 22 NULL LEAF_NODE 21 ) LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 EXPR_STATEMENT 17 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) ; EXPR 18 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 19 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) CALLEE 20 SSLerr LEAF_NODE 21 SSLerr LEAF_NODE 20 ( ARGUMENT 20 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 21 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 22 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 20 , ARGUMENT 20 ERR_R_INTERNAL_ERROR FIELD 21 ERR_R_INTERNAL_ERROR LEAF_NODE 22 ERR_R_INTERNAL_ERROR LEAF_NODE 20 ) LEAF_NODE 18 ; JUMP_STATEMENT 17 goto err ; KEYWORD 18 goto LEAF_NODE 19 goto DESTINATION 18 err LEAF_NODE 19 err LEAF_NODE 18 ; LEAF_NODE 16 } EXPR_STATEMENT 14 rsa = pkey -> pkey . rsa ; EXPR 15 rsa = pkey -> pkey . rsa ASSIGN 16 rsa = pkey -> pkey . rsa LVAL 17 rsa FIELD 18 rsa LEAF_NODE 19 rsa ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 pkey -> pkey . rsa FIELD 18 pkey -> pkey . rsa LEAF_NODE 19 pkey LEAF_NODE 19 -> LEAF_NODE 19 pkey LEAF_NODE 19 . LEAF_NODE 19 rsa LEAF_NODE 15 ; EXPR_STATEMENT 14 EVP_PKEY_free ( pkey ) ; EXPR 15 EVP_PKEY_free ( pkey ) FUNCTION_CALL 16 EVP_PKEY_free ( pkey ) CALLEE 17 EVP_PKEY_free LEAF_NODE 18 EVP_PKEY_free LEAF_NODE 17 ( ARGUMENT 17 pkey FIELD 18 pkey LEAF_NODE 19 pkey LEAF_NODE 17 ) LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 tmp_buf [ 0 ] = s -> client_version >> 8 ; EXPR 12 tmp_buf [ 0 ] = s -> client_version >> 8 ASSIGN 13 tmp_buf [ 0 ] = s -> client_version >> 8 LVAL 14 tmp_buf [ 0 ] FIELD 15 tmp_buf [ 0 ] LEAF_NODE 16 tmp_buf LEAF_NODE 16 [ EXPR 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 16 ] ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 s -> client_version >> 8 FIELD 15 s -> client_version LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 client_version LEAF_NODE 15 >> FIELD 15 8 LEAF_NODE 16 8 LEAF_NODE 12 ; EXPR_STATEMENT 11 tmp_buf [ 1 ] = s -> client_version & 0xff ; EXPR 12 tmp_buf [ 1 ] = s -> client_version & 0xff ASSIGN 13 tmp_buf [ 1 ] = s -> client_version & 0xff LVAL 14 tmp_buf [ 1 ] FIELD 15 tmp_buf [ 1 ] LEAF_NODE 16 tmp_buf LEAF_NODE 16 [ EXPR 16 1 FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 s -> client_version & 0xff FIELD 15 s -> client_version LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 client_version LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 12 ; LEAF_NODE 11 if LEAF_NODE 11 ( LEAF_NODE 11 RAND_bytes LEAF_NODE 11 ( LEAF_NODE 11 & LEAF_NODE 11 ( LEAF_NODE 11 tmp_buf LEAF_NODE 11 [ LEAF_NODE 11 2 LEAF_NODE 11 ] LEAF_NODE 11 ) LEAF_NODE 11 , LEAF_NODE 11 sizeof LEAF_NODE 11 tmp_buf LEAF_NODE 11 - LEAF_NODE 11 2 LEAF_NODE 11 ) LEAF_NODE 11 <= LEAF_NODE 11 0 LEAF_NODE 11 ) JUMP_STATEMENT 11 goto err ; KEYWORD 12 goto LEAF_NODE 13 goto DESTINATION 12 err LEAF_NODE 13 err LEAF_NODE 12 ; LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 session LEAF_NODE 11 -> LEAF_NODE 11 master_key_length LEAF_NODE 11 = SIMPLE_DECL 11 sizeof tmp_buf ; VAR_DECL 12 sizeof tmp_buf TYPE 13 sizeof TYPE_NAME 14 sizeof LEAF_NODE 15 sizeof NAME 13 tmp_buf LEAF_NODE 14 tmp_buf LEAF_NODE 12 ; EXPR_STATEMENT 11 q = p ; EXPR 12 q = p ASSIGN 13 q = p LVAL 14 q FIELD 15 q LEAF_NODE 16 q ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 p FIELD 15 p LEAF_NODE 16 p LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> version > SSL3_VERSION EXPR 13 s -> version > SSL3_VERSION FIELD 14 s -> version LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 version REL_OPERATOR 14 > LEAF_NODE 15 > FIELD 14 SSL3_VERSION LEAF_NODE 15 SSL3_VERSION LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 p += 2 ; EXPR 14 p += 2 ASSIGN 15 p += 2 LVAL 16 p FIELD 17 p LEAF_NODE 18 p ASSIGN_OP 16 += LEAF_NODE 17 += RVAL 16 2 FIELD 17 2 LEAF_NODE 18 2 LEAF_NODE 14 ; LEAF_NODE 11 n LEAF_NODE 11 = LEAF_NODE 11 RSA_public_encrypt LEAF_NODE 11 ( LEAF_NODE 11 sizeof LEAF_NODE 11 tmp_buf LEAF_NODE 11 , LEAF_NODE 11 tmp_buf LEAF_NODE 11 , LEAF_NODE 11 p LEAF_NODE 11 , LEAF_NODE 11 rsa LEAF_NODE 11 , LEAF_NODE 11 RSA_PKCS1_PADDING LEAF_NODE 11 ) LEAF_NODE 11 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> options & SSL_OP_PKCS1_CHECK_1 EXPR 13 s -> options & SSL_OP_PKCS1_CHECK_1 FIELD 14 s -> options LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 options LEAF_NODE 14 & FIELD 14 SSL_OP_PKCS1_CHECK_1 LEAF_NODE 15 SSL_OP_PKCS1_CHECK_1 LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 p [ 1 ] ++ ; EXPR 14 p [ 1 ] ++ FIELD 15 p [ 1 ] ++ LEAF_NODE 16 p LEAF_NODE 16 [ EXPR 16 1 FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] LEAF_NODE 16 ++ LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> options & SSL_OP_PKCS1_CHECK_2 EXPR 13 s -> options & SSL_OP_PKCS1_CHECK_2 FIELD 14 s -> options LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 options LEAF_NODE 14 & FIELD 14 SSL_OP_PKCS1_CHECK_2 LEAF_NODE 15 SSL_OP_PKCS1_CHECK_2 LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 tmp_buf [ 0 ] = 0x70 ; EXPR 14 tmp_buf [ 0 ] = 0x70 ASSIGN 15 tmp_buf [ 0 ] = 0x70 LVAL 16 tmp_buf [ 0 ] FIELD 17 tmp_buf [ 0 ] LEAF_NODE 18 tmp_buf LEAF_NODE 18 [ EXPR 18 0 FIELD 19 0 LEAF_NODE 20 0 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 0x70 FIELD 17 0x70 LEAF_NODE 18 0x70 LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 n <= 0 EXPR 13 n <= 0 FIELD 14 n LEAF_NODE 15 n REL_OPERATOR 14 <= LEAF_NODE 15 <= FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_BAD_RSA_ENCRYPT ) ; EXPR 15 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_BAD_RSA_ENCRYPT ) FUNCTION_CALL 16 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_BAD_RSA_ENCRYPT ) CALLEE 17 SSLerr LEAF_NODE 18 SSLerr LEAF_NODE 17 ( ARGUMENT 17 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 18 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 19 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 17 , ARGUMENT 17 SSL_R_BAD_RSA_ENCRYPT FIELD 18 SSL_R_BAD_RSA_ENCRYPT LEAF_NODE 19 SSL_R_BAD_RSA_ENCRYPT LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 13 } SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> version > SSL3_VERSION EXPR 13 s -> version > SSL3_VERSION FIELD 14 s -> version LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 version REL_OPERATOR 14 > LEAF_NODE 15 > FIELD 14 SSL3_VERSION LEAF_NODE 15 SSL3_VERSION LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 s2n ( n , q ) ; EXPR 15 s2n ( n , q ) FUNCTION_CALL 16 s2n ( n , q ) CALLEE 17 s2n LEAF_NODE 18 s2n LEAF_NODE 17 ( ARGUMENT 17 n FIELD 18 n LEAF_NODE 19 n LEAF_NODE 17 , ARGUMENT 17 q FIELD 18 q LEAF_NODE 19 q LEAF_NODE 17 ) LEAF_NODE 15 ; EXPR_STATEMENT 14 n += 2 ; EXPR 15 n += 2 ASSIGN 16 n += 2 LVAL 17 n FIELD 18 n LEAF_NODE 19 n ASSIGN_OP 17 += LEAF_NODE 18 += RVAL 17 2 FIELD 18 2 LEAF_NODE 19 2 LEAF_NODE 15 ; LEAF_NODE 13 } LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 session LEAF_NODE 11 -> LEAF_NODE 11 master_key_length LEAF_NODE 11 = LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 method LEAF_NODE 11 -> LEAF_NODE 11 ssl3_enc LEAF_NODE 11 -> LEAF_NODE 11 generate_master_secret LEAF_NODE 11 ( LEAF_NODE 11 s LEAF_NODE 11 , LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 session LEAF_NODE 11 -> LEAF_NODE 11 master_key LEAF_NODE 11 , LEAF_NODE 11 tmp_buf LEAF_NODE 11 , LEAF_NODE 11 sizeof LEAF_NODE 11 tmp_buf LEAF_NODE 11 ) LEAF_NODE 11 ; LEAF_NODE 11 OPENSSL_cleanse LEAF_NODE 11 ( LEAF_NODE 11 tmp_buf LEAF_NODE 11 , LEAF_NODE 11 sizeof LEAF_NODE 11 tmp_buf LEAF_NODE 11 ) LEAF_NODE 11 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 alg_k & SSL_kKRB5 EXPR 10 alg_k & SSL_kKRB5 FIELD 11 alg_k LEAF_NODE 12 alg_k LEAF_NODE 11 & FIELD 11 SSL_kKRB5 LEAF_NODE 12 SSL_kKRB5 LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SIMPLE_DECL 11 krb5_error_code krb5rc ; VAR_DECL 12 krb5_error_code krb5rc TYPE 13 krb5_error_code TYPE_NAME 14 krb5_error_code LEAF_NODE 15 krb5_error_code NAME 13 krb5rc LEAF_NODE 14 krb5rc LEAF_NODE 12 ; SIMPLE_DECL 11 KSSL_CTX * kssl_ctx ; kssl_ctx = s -> kssl_ctx ; VAR_DECL 12 KSSL_CTX * kssl_ctx ; kssl_ctx = s -> kssl_ctx TYPE 13 KSSL_CTX * TYPE_NAME 14 KSSL_CTX LEAF_NODE 15 KSSL_CTX POINTER 14 * LEAF_NODE 15 * NAME 13 kssl_ctx LEAF_NODE 14 kssl_ctx LEAF_NODE 13 ; INIT 13 kssl_ctx = s -> kssl_ctx ASSIGN 14 kssl_ctx = s -> kssl_ctx LVAL 15 kssl_ctx NAME 16 kssl_ctx LEAF_NODE 17 kssl_ctx ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 s -> kssl_ctx FIELD 16 s -> kssl_ctx LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 kssl_ctx LEAF_NODE 12 ; SIMPLE_DECL 11 krb5_data * enc_ticket ; VAR_DECL 12 krb5_data * enc_ticket TYPE 13 krb5_data * TYPE_NAME 14 krb5_data LEAF_NODE 15 krb5_data POINTER 14 * LEAF_NODE 15 * NAME 13 enc_ticket LEAF_NODE 14 enc_ticket LEAF_NODE 12 ; SIMPLE_DECL 11 krb5_data authenticator , krb5_data * authp ; authp = NULL ; INIT_DECL_LIST 12 krb5_data authenticator , krb5_data * authp ; authp = NULL VAR_DECL 13 krb5_data authenticator TYPE 14 krb5_data TYPE_NAME 15 krb5_data LEAF_NODE 16 krb5_data NAME 14 authenticator LEAF_NODE 15 authenticator LEAF_NODE 13 , VAR_DECL 13 krb5_data * authp ; authp = NULL TYPE 14 krb5_data * TYPE_NAME 15 krb5_data LEAF_NODE 16 krb5_data POINTER 15 * LEAF_NODE 16 * NAME 14 authp LEAF_NODE 15 authp LEAF_NODE 14 ; INIT 14 authp = NULL ASSIGN 15 authp = NULL LVAL 16 authp NAME 17 authp LEAF_NODE 18 authp ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 NULL FIELD 17 NULL LEAF_NODE 18 NULL LEAF_NODE 12 ; SIMPLE_DECL 11 EVP_CIPHER_CTX ciph_ctx ; VAR_DECL 12 EVP_CIPHER_CTX ciph_ctx TYPE 13 EVP_CIPHER_CTX TYPE_NAME 14 EVP_CIPHER_CTX LEAF_NODE 15 EVP_CIPHER_CTX NAME 13 ciph_ctx LEAF_NODE 14 ciph_ctx LEAF_NODE 12 ; SIMPLE_DECL 11 EVP_CIPHER * enc ; enc = NULL ; VAR_DECL 12 EVP_CIPHER * enc ; enc = NULL TYPE 13 EVP_CIPHER * TYPE_NAME 14 EVP_CIPHER LEAF_NODE 15 EVP_CIPHER POINTER 14 * LEAF_NODE 15 * NAME 13 enc LEAF_NODE 14 enc LEAF_NODE 13 ; INIT 13 enc = NULL ASSIGN 14 enc = NULL LVAL 15 enc NAME 16 enc LEAF_NODE 17 enc ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 12 ; SIMPLE_DECL 11 unsigned char [ EVP_MAX_IV_LENGTH ] iv ; VAR_DECL 12 unsigned char [ EVP_MAX_IV_LENGTH ] iv TYPE 13 unsigned char [ EVP_MAX_IV_LENGTH ] TYPE_NAME 14 unsigned char LEAF_NODE 15 unsigned LEAF_NODE 15 char TYPE_SUFFIX 14 [ EVP_MAX_IV_LENGTH ] LEAF_NODE 15 [ FIELD 15 EVP_MAX_IV_LENGTH LEAF_NODE 16 EVP_MAX_IV_LENGTH LEAF_NODE 15 ] NAME 13 iv LEAF_NODE 14 iv LEAF_NODE 12 ; SIMPLE_DECL 11 unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] tmp_buf ; VAR_DECL 12 unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] tmp_buf TYPE 13 unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] TYPE_NAME 14 unsigned char LEAF_NODE 15 unsigned LEAF_NODE 15 char TYPE_SUFFIX 14 [ SSL_MAX_MASTER_KEY_LENGTH ] LEAF_NODE 15 [ FIELD 15 SSL_MAX_MASTER_KEY_LENGTH LEAF_NODE 16 SSL_MAX_MASTER_KEY_LENGTH LEAF_NODE 15 ] NAME 13 tmp_buf LEAF_NODE 14 tmp_buf LEAF_NODE 12 ; SIMPLE_DECL 11 unsigned char [ SSL_MAX_MASTER_KEY_LENGTH + EVP_MAX_IV_LENGTH ] epms ; VAR_DECL 12 unsigned char [ SSL_MAX_MASTER_KEY_LENGTH + EVP_MAX_IV_LENGTH ] epms TYPE 13 unsigned char [ SSL_MAX_MASTER_KEY_LENGTH + EVP_MAX_IV_LENGTH ] TYPE_NAME 14 unsigned char LEAF_NODE 15 unsigned LEAF_NODE 15 char TYPE_SUFFIX 14 [ SSL_MAX_MASTER_KEY_LENGTH + EVP_MAX_IV_LENGTH ] LEAF_NODE 15 [ FIELD 15 SSL_MAX_MASTER_KEY_LENGTH LEAF_NODE 16 SSL_MAX_MASTER_KEY_LENGTH LEAF_NODE 15 + FIELD 15 EVP_MAX_IV_LENGTH LEAF_NODE 16 EVP_MAX_IV_LENGTH LEAF_NODE 15 ] NAME 13 epms LEAF_NODE 14 epms LEAF_NODE 12 ; SIMPLE_DECL 11 int padl , int outl ; outl = sizeof ( epms ) ; INIT_DECL_LIST 12 int padl , int outl ; outl = sizeof ( epms ) VAR_DECL 13 int padl TYPE 14 int TYPE_NAME 15 int LEAF_NODE 16 int NAME 14 padl LEAF_NODE 15 padl LEAF_NODE 13 , VAR_DECL 13 int outl ; outl = sizeof ( epms ) TYPE 14 int TYPE_NAME 15 int LEAF_NODE 16 int NAME 14 outl LEAF_NODE 15 outl LEAF_NODE 14 ; INIT 14 outl = sizeof ( epms ) ASSIGN 15 outl = sizeof ( epms ) LVAL 16 outl NAME 17 outl LEAF_NODE 18 outl ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 sizeof ( epms ) FUNCTION_CALL 17 sizeof ( epms ) CALLEE 18 sizeof LEAF_NODE 19 sizeof LEAF_NODE 18 ( ARGUMENT 18 epms FIELD 19 epms LEAF_NODE 20 epms LEAF_NODE 18 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 EVP_CIPHER_CTX_init ( & ciph_ctx ) ; EXPR 12 EVP_CIPHER_CTX_init ( & ciph_ctx ) FUNCTION_CALL 13 EVP_CIPHER_CTX_init ( & ciph_ctx ) CALLEE 14 EVP_CIPHER_CTX_init LEAF_NODE 15 EVP_CIPHER_CTX_init LEAF_NODE 14 ( ARGUMENT 14 & ciph_ctx UNARY_EXPR 15 & ciph_ctx UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 ciph_ctx LEAF_NODE 17 ciph_ctx LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 printf ( \"ssl3_send_client_key_exchange(%lx & %lx)\\n\" , alg_k , SSL_kKRB5 ) ; EXPR 12 printf ( \"ssl3_send_client_key_exchange(%lx & %lx)\\n\" , alg_k , SSL_kKRB5 ) FUNCTION_CALL 13 printf ( \"ssl3_send_client_key_exchange(%lx & %lx)\\n\" , alg_k , SSL_kKRB5 ) CALLEE 14 printf LEAF_NODE 15 printf LEAF_NODE 14 ( ARGUMENT 14 \"ssl3_send_client_key_exchange(%lx & %lx)\\n\" FIELD 15 \"ssl3_send_client_key_exchange(%lx & %lx)\\n\" LEAF_NODE 16 \"ssl3_send_client_key_exchange(%lx & %lx)\\n\" LEAF_NODE 14 , ARGUMENT 14 alg_k FIELD 15 alg_k LEAF_NODE 16 alg_k LEAF_NODE 14 , ARGUMENT 14 SSL_kKRB5 FIELD 15 SSL_kKRB5 LEAF_NODE 16 SSL_kKRB5 LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 authp = NULL ; EXPR 12 authp = NULL ASSIGN 13 authp = NULL LVAL 14 authp FIELD 15 authp LEAF_NODE 16 authp ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 NULL FIELD 15 NULL LEAF_NODE 16 NULL LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 KRB5SENDAUTH EXPR 13 KRB5SENDAUTH FIELD 14 KRB5SENDAUTH LEAF_NODE 15 KRB5SENDAUTH LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 authp = & authenticator ; EXPR 14 authp = & authenticator ASSIGN 15 authp = & authenticator LVAL 16 authp FIELD 17 authp LEAF_NODE 18 authp ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 & authenticator UNARY_EXPR 17 & authenticator UNARY_OPERATOR 18 & LEAF_NODE 19 & FIELD 18 authenticator LEAF_NODE 19 authenticator LEAF_NODE 14 ; EXPR_STATEMENT 11 krb5rc = kssl_cget_tkt ( kssl_ctx , & enc_ticket , authp , & kssl_err ) ; EXPR 12 krb5rc = kssl_cget_tkt ( kssl_ctx , & enc_ticket , authp , & kssl_err ) ASSIGN 13 krb5rc = kssl_cget_tkt ( kssl_ctx , & enc_ticket , authp , & kssl_err ) LVAL 14 krb5rc FIELD 15 krb5rc LEAF_NODE 16 krb5rc ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 kssl_cget_tkt ( kssl_ctx , & enc_ticket , authp , & kssl_err ) FUNCTION_CALL 15 kssl_cget_tkt ( kssl_ctx , & enc_ticket , authp , & kssl_err ) CALLEE 16 kssl_cget_tkt LEAF_NODE 17 kssl_cget_tkt LEAF_NODE 16 ( ARGUMENT 16 kssl_ctx FIELD 17 kssl_ctx LEAF_NODE 18 kssl_ctx LEAF_NODE 16 , ARGUMENT 16 & enc_ticket UNARY_EXPR 17 & enc_ticket UNARY_OPERATOR 18 & LEAF_NODE 19 & FIELD 18 enc_ticket LEAF_NODE 19 enc_ticket LEAF_NODE 16 , ARGUMENT 16 authp FIELD 17 authp LEAF_NODE 18 authp LEAF_NODE 16 , ARGUMENT 16 & kssl_err UNARY_EXPR 17 & kssl_err UNARY_OPERATOR 18 & LEAF_NODE 19 & FIELD 18 kssl_err LEAF_NODE 19 kssl_err LEAF_NODE 16 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 enc = kssl_map_enc ( kssl_ctx -> enctype ) ; EXPR 12 enc = kssl_map_enc ( kssl_ctx -> enctype ) ASSIGN 13 enc = kssl_map_enc ( kssl_ctx -> enctype ) LVAL 14 enc FIELD 15 enc LEAF_NODE 16 enc ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 kssl_map_enc ( kssl_ctx -> enctype ) FUNCTION_CALL 15 kssl_map_enc ( kssl_ctx -> enctype ) CALLEE 16 kssl_map_enc LEAF_NODE 17 kssl_map_enc LEAF_NODE 16 ( ARGUMENT 16 kssl_ctx -> enctype FIELD 17 kssl_ctx -> enctype LEAF_NODE 18 kssl_ctx LEAF_NODE 18 -> LEAF_NODE 18 enctype LEAF_NODE 16 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 enc == NULL EXPR 13 enc == NULL FIELD 14 enc LEAF_NODE 15 enc EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 JUMP_STATEMENT 13 goto err ; KEYWORD 14 goto LEAF_NODE 15 goto DESTINATION 14 err LEAF_NODE 15 err LEAF_NODE 14 ; LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 printf ( \"kssl_cget_tkt rtn %d\\n\" , krb5rc ) ; EXPR 13 printf ( \"kssl_cget_tkt rtn %d\\n\" , krb5rc ) FUNCTION_CALL 14 printf ( \"kssl_cget_tkt rtn %d\\n\" , krb5rc ) CALLEE 15 printf LEAF_NODE 16 printf LEAF_NODE 15 ( ARGUMENT 15 \"kssl_cget_tkt rtn %d\\n\" FIELD 16 \"kssl_cget_tkt rtn %d\\n\" LEAF_NODE 17 \"kssl_cget_tkt rtn %d\\n\" LEAF_NODE 15 , ARGUMENT 15 krb5rc FIELD 16 krb5rc LEAF_NODE 17 krb5rc LEAF_NODE 15 ) LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 krb5rc && kssl_err . text EXPR 14 krb5rc && kssl_err . text AND 15 krb5rc && kssl_err . text EXPR 16 krb5rc FIELD 17 krb5rc LEAF_NODE 18 krb5rc LEAF_NODE 16 && EXPR 16 kssl_err . text FIELD 17 kssl_err . text LEAF_NODE 18 kssl_err LEAF_NODE 18 . LEAF_NODE 18 text LEAF_NODE 13 ) STATEMENTS 13 EXPR_STATEMENT 14 printf ( \"kssl_cget_tkt kssl_err=%s\\n\" , kssl_err . text ) ; EXPR 15 printf ( \"kssl_cget_tkt kssl_err=%s\\n\" , kssl_err . text ) FUNCTION_CALL 16 printf ( \"kssl_cget_tkt kssl_err=%s\\n\" , kssl_err . text ) CALLEE 17 printf LEAF_NODE 18 printf LEAF_NODE 17 ( ARGUMENT 17 \"kssl_cget_tkt kssl_err=%s\\n\" FIELD 18 \"kssl_cget_tkt kssl_err=%s\\n\" LEAF_NODE 19 \"kssl_cget_tkt kssl_err=%s\\n\" LEAF_NODE 17 , ARGUMENT 17 kssl_err . text FIELD 18 kssl_err . text LEAF_NODE 19 kssl_err LEAF_NODE 19 . LEAF_NODE 19 text LEAF_NODE 17 ) LEAF_NODE 15 ; LEAF_NODE 11 } SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 krb5rc EXPR 13 krb5rc FIELD 14 krb5rc LEAF_NODE 15 krb5rc LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_HANDSHAKE_FAILURE ) ; EXPR 15 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_HANDSHAKE_FAILURE ) FUNCTION_CALL 16 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_HANDSHAKE_FAILURE ) CALLEE 17 ssl3_send_alert LEAF_NODE 18 ssl3_send_alert LEAF_NODE 17 ( ARGUMENT 17 s FIELD 18 s LEAF_NODE 19 s LEAF_NODE 17 , ARGUMENT 17 SSL3_AL_FATAL FIELD 18 SSL3_AL_FATAL LEAF_NODE 19 SSL3_AL_FATAL LEAF_NODE 17 , ARGUMENT 17 SSL_AD_HANDSHAKE_FAILURE FIELD 18 SSL_AD_HANDSHAKE_FAILURE LEAF_NODE 19 SSL_AD_HANDSHAKE_FAILURE LEAF_NODE 17 ) LEAF_NODE 15 ; EXPR_STATEMENT 14 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , kssl_err . reason ) ; EXPR 15 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , kssl_err . reason ) FUNCTION_CALL 16 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , kssl_err . reason ) CALLEE 17 SSLerr LEAF_NODE 18 SSLerr LEAF_NODE 17 ( ARGUMENT 17 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 18 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 19 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 17 , ARGUMENT 17 kssl_err . reason FIELD 18 kssl_err . reason LEAF_NODE 19 kssl_err LEAF_NODE 19 . LEAF_NODE 19 reason LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 s2n ( enc_ticket -> length , p ) ; EXPR 12 s2n ( enc_ticket -> length , p ) FUNCTION_CALL 13 s2n ( enc_ticket -> length , p ) CALLEE 14 s2n LEAF_NODE 15 s2n LEAF_NODE 14 ( ARGUMENT 14 enc_ticket -> length FIELD 15 enc_ticket -> length LEAF_NODE 16 enc_ticket LEAF_NODE 16 -> LEAF_NODE 16 length LEAF_NODE 14 , ARGUMENT 14 p FIELD 15 p LEAF_NODE 16 p LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 memcpy ( p , enc_ticket -> data , enc_ticket -> length ) ; EXPR 12 memcpy ( p , enc_ticket -> data , enc_ticket -> length ) FUNCTION_CALL 13 memcpy ( p , enc_ticket -> data , enc_ticket -> length ) CALLEE 14 memcpy LEAF_NODE 15 memcpy LEAF_NODE 14 ( ARGUMENT 14 p FIELD 15 p LEAF_NODE 16 p LEAF_NODE 14 , ARGUMENT 14 enc_ticket -> data FIELD 15 enc_ticket -> data LEAF_NODE 16 enc_ticket LEAF_NODE 16 -> LEAF_NODE 16 data LEAF_NODE 14 , ARGUMENT 14 enc_ticket -> length FIELD 15 enc_ticket -> length LEAF_NODE 16 enc_ticket LEAF_NODE 16 -> LEAF_NODE 16 length LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 p += enc_ticket -> length ; EXPR 12 p += enc_ticket -> length ASSIGN 13 p += enc_ticket -> length LVAL 14 p FIELD 15 p LEAF_NODE 16 p ASSIGN_OP 14 += LEAF_NODE 15 += RVAL 14 enc_ticket -> length FIELD 15 enc_ticket -> length LEAF_NODE 16 enc_ticket LEAF_NODE 16 -> LEAF_NODE 16 length LEAF_NODE 12 ; EXPR_STATEMENT 11 n = enc_ticket -> length + 2 ; EXPR 12 n = enc_ticket -> length + 2 ASSIGN 13 n = enc_ticket -> length + 2 LVAL 14 n FIELD 15 n LEAF_NODE 16 n ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 enc_ticket -> length + 2 FIELD 15 enc_ticket -> length LEAF_NODE 16 enc_ticket LEAF_NODE 16 -> LEAF_NODE 16 length LEAF_NODE 15 + FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 authp && authp -> length EXPR 13 authp && authp -> length AND 14 authp && authp -> length EXPR 15 authp FIELD 16 authp LEAF_NODE 17 authp LEAF_NODE 15 && EXPR 15 authp -> length FIELD 16 authp -> length LEAF_NODE 17 authp LEAF_NODE 17 -> LEAF_NODE 17 length LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 s2n ( authp -> length , p ) ; EXPR 15 s2n ( authp -> length , p ) FUNCTION_CALL 16 s2n ( authp -> length , p ) CALLEE 17 s2n LEAF_NODE 18 s2n LEAF_NODE 17 ( ARGUMENT 17 authp -> length FIELD 18 authp -> length LEAF_NODE 19 authp LEAF_NODE 19 -> LEAF_NODE 19 length LEAF_NODE 17 , ARGUMENT 17 p FIELD 18 p LEAF_NODE 19 p LEAF_NODE 17 ) LEAF_NODE 15 ; EXPR_STATEMENT 14 memcpy ( p , authp -> data , authp -> length ) ; EXPR 15 memcpy ( p , authp -> data , authp -> length ) FUNCTION_CALL 16 memcpy ( p , authp -> data , authp -> length ) CALLEE 17 memcpy LEAF_NODE 18 memcpy LEAF_NODE 17 ( ARGUMENT 17 p FIELD 18 p LEAF_NODE 19 p LEAF_NODE 17 , ARGUMENT 17 authp -> data FIELD 18 authp -> data LEAF_NODE 19 authp LEAF_NODE 19 -> LEAF_NODE 19 data LEAF_NODE 17 , ARGUMENT 17 authp -> length FIELD 18 authp -> length LEAF_NODE 19 authp LEAF_NODE 19 -> LEAF_NODE 19 length LEAF_NODE 17 ) LEAF_NODE 15 ; EXPR_STATEMENT 14 p += authp -> length ; EXPR 15 p += authp -> length ASSIGN 16 p += authp -> length LVAL 17 p FIELD 18 p LEAF_NODE 19 p ASSIGN_OP 17 += LEAF_NODE 18 += RVAL 17 authp -> length FIELD 18 authp -> length LEAF_NODE 19 authp LEAF_NODE 19 -> LEAF_NODE 19 length LEAF_NODE 15 ; EXPR_STATEMENT 14 n += authp -> length + 2 ; EXPR 15 n += authp -> length + 2 ASSIGN 16 n += authp -> length + 2 LVAL 17 n FIELD 18 n LEAF_NODE 19 n ASSIGN_OP 17 += LEAF_NODE 18 += RVAL 17 authp -> length + 2 FIELD 18 authp -> length LEAF_NODE 19 authp LEAF_NODE 19 -> LEAF_NODE 19 length LEAF_NODE 18 + FIELD 18 2 LEAF_NODE 19 2 LEAF_NODE 15 ; EXPR_STATEMENT 14 free ( authp -> data ) ; EXPR 15 free ( authp -> data ) FUNCTION_CALL 16 free ( authp -> data ) CALLEE 17 free LEAF_NODE 18 free LEAF_NODE 17 ( ARGUMENT 17 authp -> data FIELD 18 authp -> data LEAF_NODE 19 authp LEAF_NODE 19 -> LEAF_NODE 19 data LEAF_NODE 17 ) LEAF_NODE 15 ; EXPR_STATEMENT 14 authp -> data = NULL ; EXPR 15 authp -> data = NULL ASSIGN 16 authp -> data = NULL LVAL 17 authp -> data FIELD 18 authp -> data LEAF_NODE 19 authp LEAF_NODE 19 -> LEAF_NODE 19 data ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 NULL FIELD 18 NULL LEAF_NODE 19 NULL LEAF_NODE 15 ; EXPR_STATEMENT 14 authp -> length = 0 ; EXPR 15 authp -> length = 0 ASSIGN 16 authp -> length = 0 LVAL 17 authp -> length FIELD 18 authp -> length LEAF_NODE 19 authp LEAF_NODE 19 -> LEAF_NODE 19 length ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 0 FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 15 ; LEAF_NODE 13 } SELECTION 11 KEYWORD 12 else LEAF_NODE 13 else STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 s2n ( 0 , p ) ; EXPR 15 s2n ( 0 , p ) FUNCTION_CALL 16 s2n ( 0 , p ) CALLEE 17 s2n LEAF_NODE 18 s2n LEAF_NODE 17 ( ARGUMENT 17 0 FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 17 , ARGUMENT 17 p FIELD 18 p LEAF_NODE 19 p LEAF_NODE 17 ) LEAF_NODE 15 ; EXPR_STATEMENT 14 n += 2 ; EXPR 15 n += 2 ASSIGN 16 n += 2 LVAL 17 n FIELD 18 n LEAF_NODE 19 n ASSIGN_OP 17 += LEAF_NODE 18 += RVAL 17 2 FIELD 18 2 LEAF_NODE 19 2 LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 tmp_buf [ 0 ] = s -> client_version >> 8 ; EXPR 12 tmp_buf [ 0 ] = s -> client_version >> 8 ASSIGN 13 tmp_buf [ 0 ] = s -> client_version >> 8 LVAL 14 tmp_buf [ 0 ] FIELD 15 tmp_buf [ 0 ] LEAF_NODE 16 tmp_buf LEAF_NODE 16 [ EXPR 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 16 ] ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 s -> client_version >> 8 FIELD 15 s -> client_version LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 client_version LEAF_NODE 15 >> FIELD 15 8 LEAF_NODE 16 8 LEAF_NODE 12 ; EXPR_STATEMENT 11 tmp_buf [ 1 ] = s -> client_version & 0xff ; EXPR 12 tmp_buf [ 1 ] = s -> client_version & 0xff ASSIGN 13 tmp_buf [ 1 ] = s -> client_version & 0xff LVAL 14 tmp_buf [ 1 ] FIELD 15 tmp_buf [ 1 ] LEAF_NODE 16 tmp_buf LEAF_NODE 16 [ EXPR 16 1 FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 s -> client_version & 0xff FIELD 15 s -> client_version LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 client_version LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 12 ; LEAF_NODE 11 if LEAF_NODE 11 ( LEAF_NODE 11 RAND_bytes LEAF_NODE 11 ( LEAF_NODE 11 & LEAF_NODE 11 ( LEAF_NODE 11 tmp_buf LEAF_NODE 11 [ LEAF_NODE 11 2 LEAF_NODE 11 ] LEAF_NODE 11 ) LEAF_NODE 11 , LEAF_NODE 11 sizeof LEAF_NODE 11 tmp_buf LEAF_NODE 11 - LEAF_NODE 11 2 LEAF_NODE 11 ) LEAF_NODE 11 <= LEAF_NODE 11 0 LEAF_NODE 11 ) JUMP_STATEMENT 11 goto err ; KEYWORD 12 goto LEAF_NODE 13 goto DESTINATION 12 err LEAF_NODE 13 err LEAF_NODE 12 ; LEAF_NODE 11 memset LEAF_NODE 11 ( LEAF_NODE 11 iv LEAF_NODE 11 , LEAF_NODE 11 0 LEAF_NODE 11 , LEAF_NODE 11 sizeof LEAF_NODE 11 iv LEAF_NODE 11 ) LEAF_NODE 11 ; EXPR_STATEMENT 11 EVP_EncryptInit_ex ( & ciph_ctx , enc , NULL , kssl_ctx -> key , iv ) ; EXPR 12 EVP_EncryptInit_ex ( & ciph_ctx , enc , NULL , kssl_ctx -> key , iv ) FUNCTION_CALL 13 EVP_EncryptInit_ex ( & ciph_ctx , enc , NULL , kssl_ctx -> key , iv ) CALLEE 14 EVP_EncryptInit_ex LEAF_NODE 15 EVP_EncryptInit_ex LEAF_NODE 14 ( ARGUMENT 14 & ciph_ctx UNARY_EXPR 15 & ciph_ctx UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 ciph_ctx LEAF_NODE 17 ciph_ctx LEAF_NODE 14 , ARGUMENT 14 enc FIELD 15 enc LEAF_NODE 16 enc LEAF_NODE 14 , ARGUMENT 14 NULL FIELD 15 NULL LEAF_NODE 16 NULL LEAF_NODE 14 , ARGUMENT 14 kssl_ctx -> key FIELD 15 kssl_ctx -> key LEAF_NODE 16 kssl_ctx LEAF_NODE 16 -> LEAF_NODE 16 key LEAF_NODE 14 , ARGUMENT 14 iv FIELD 15 iv LEAF_NODE 16 iv LEAF_NODE 14 ) LEAF_NODE 12 ; LEAF_NODE 11 EVP_EncryptUpdate LEAF_NODE 11 ( LEAF_NODE 11 & LEAF_NODE 11 ciph_ctx LEAF_NODE 11 , LEAF_NODE 11 epms LEAF_NODE 11 , LEAF_NODE 11 & LEAF_NODE 11 outl LEAF_NODE 11 , LEAF_NODE 11 tmp_buf LEAF_NODE 11 , LEAF_NODE 11 sizeof LEAF_NODE 11 tmp_buf LEAF_NODE 11 ) LEAF_NODE 11 ; EXPR_STATEMENT 11 EVP_EncryptFinal_ex ( & ciph_ctx , & ( epms [ outl ] ) , & padl ) ; EXPR 12 EVP_EncryptFinal_ex ( & ciph_ctx , & ( epms [ outl ] ) , & padl ) FUNCTION_CALL 13 EVP_EncryptFinal_ex ( & ciph_ctx , & ( epms [ outl ] ) , & padl ) CALLEE 14 EVP_EncryptFinal_ex LEAF_NODE 15 EVP_EncryptFinal_ex LEAF_NODE 14 ( ARGUMENT 14 & ciph_ctx UNARY_EXPR 15 & ciph_ctx UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 ciph_ctx LEAF_NODE 17 ciph_ctx LEAF_NODE 14 , ARGUMENT 14 & ( epms [ outl ] ) UNARY_EXPR 15 & ( epms [ outl ] ) UNARY_OPERATOR 16 & LEAF_NODE 17 & LEAF_NODE 16 ( FIELD 16 epms [ outl ] LEAF_NODE 17 epms LEAF_NODE 17 [ EXPR 17 outl FIELD 18 outl LEAF_NODE 19 outl LEAF_NODE 17 ] LEAF_NODE 16 ) LEAF_NODE 14 , ARGUMENT 14 & padl UNARY_EXPR 15 & padl UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 padl LEAF_NODE 17 padl LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 outl += padl ; EXPR 12 outl += padl ASSIGN 13 outl += padl LVAL 14 outl FIELD 15 outl LEAF_NODE 16 outl ASSIGN_OP 14 += LEAF_NODE 15 += RVAL 14 padl FIELD 15 padl LEAF_NODE 16 padl LEAF_NODE 12 ; LEAF_NODE 11 if LEAF_NODE 11 ( LEAF_NODE 11 outl LEAF_NODE 11 > LEAF_NODE 11 sizeof LEAF_NODE 11 epms LEAF_NODE 11 ) LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) ; EXPR 13 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 14 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) CALLEE 15 SSLerr LEAF_NODE 16 SSLerr LEAF_NODE 15 ( ARGUMENT 15 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 16 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 17 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 15 , ARGUMENT 15 ERR_R_INTERNAL_ERROR FIELD 16 ERR_R_INTERNAL_ERROR LEAF_NODE 17 ERR_R_INTERNAL_ERROR LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 goto err ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 err LEAF_NODE 14 err LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 11 EVP_CIPHER_CTX_cleanup ( & ciph_ctx ) ; EXPR 12 EVP_CIPHER_CTX_cleanup ( & ciph_ctx ) FUNCTION_CALL 13 EVP_CIPHER_CTX_cleanup ( & ciph_ctx ) CALLEE 14 EVP_CIPHER_CTX_cleanup LEAF_NODE 15 EVP_CIPHER_CTX_cleanup LEAF_NODE 14 ( ARGUMENT 14 & ciph_ctx UNARY_EXPR 15 & ciph_ctx UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 ciph_ctx LEAF_NODE 17 ciph_ctx LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 s2n ( outl , p ) ; EXPR 12 s2n ( outl , p ) FUNCTION_CALL 13 s2n ( outl , p ) CALLEE 14 s2n LEAF_NODE 15 s2n LEAF_NODE 14 ( ARGUMENT 14 outl FIELD 15 outl LEAF_NODE 16 outl LEAF_NODE 14 , ARGUMENT 14 p FIELD 15 p LEAF_NODE 16 p LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 memcpy ( p , epms , outl ) ; EXPR 12 memcpy ( p , epms , outl ) FUNCTION_CALL 13 memcpy ( p , epms , outl ) CALLEE 14 memcpy LEAF_NODE 15 memcpy LEAF_NODE 14 ( ARGUMENT 14 p FIELD 15 p LEAF_NODE 16 p LEAF_NODE 14 , ARGUMENT 14 epms FIELD 15 epms LEAF_NODE 16 epms LEAF_NODE 14 , ARGUMENT 14 outl FIELD 15 outl LEAF_NODE 16 outl LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 p += outl ; EXPR 12 p += outl ASSIGN 13 p += outl LVAL 14 p FIELD 15 p LEAF_NODE 16 p ASSIGN_OP 14 += LEAF_NODE 15 += RVAL 14 outl FIELD 15 outl LEAF_NODE 16 outl LEAF_NODE 12 ; EXPR_STATEMENT 11 n += outl + 2 ; EXPR 12 n += outl + 2 ASSIGN 13 n += outl + 2 LVAL 14 n FIELD 15 n LEAF_NODE 16 n ASSIGN_OP 14 += LEAF_NODE 15 += RVAL 14 outl + 2 FIELD 15 outl LEAF_NODE 16 outl LEAF_NODE 15 + FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 12 ; LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 session LEAF_NODE 11 -> LEAF_NODE 11 master_key_length LEAF_NODE 11 = LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 method LEAF_NODE 11 -> LEAF_NODE 11 ssl3_enc LEAF_NODE 11 -> LEAF_NODE 11 generate_master_secret LEAF_NODE 11 ( LEAF_NODE 11 s LEAF_NODE 11 , LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 session LEAF_NODE 11 -> LEAF_NODE 11 master_key LEAF_NODE 11 , LEAF_NODE 11 tmp_buf LEAF_NODE 11 , LEAF_NODE 11 sizeof LEAF_NODE 11 tmp_buf LEAF_NODE 11 ) LEAF_NODE 11 ; LEAF_NODE 11 OPENSSL_cleanse LEAF_NODE 11 ( LEAF_NODE 11 tmp_buf LEAF_NODE 11 , LEAF_NODE 11 sizeof LEAF_NODE 11 tmp_buf LEAF_NODE 11 ) LEAF_NODE 11 ; EXPR_STATEMENT 11 OPENSSL_cleanse ( epms , outl ) ; EXPR 12 OPENSSL_cleanse ( epms , outl ) FUNCTION_CALL 13 OPENSSL_cleanse ( epms , outl ) CALLEE 14 OPENSSL_cleanse LEAF_NODE 15 OPENSSL_cleanse LEAF_NODE 14 ( ARGUMENT 14 epms FIELD 15 epms LEAF_NODE 16 epms LEAF_NODE 14 , ARGUMENT 14 outl FIELD 15 outl LEAF_NODE 16 outl LEAF_NODE 14 ) LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 alg_k & ( SSL_kEDH | SSL_kDHr | SSL_kDHd ) EXPR 10 alg_k & ( SSL_kEDH | SSL_kDHr | SSL_kDHd ) FIELD 11 alg_k LEAF_NODE 12 alg_k LEAF_NODE 11 & LEAF_NODE 11 ( BIT_OR 11 SSL_kEDH | SSL_kDHr | SSL_kDHd BIT_OR_ELEM 12 SSL_kEDH FIELD 13 SSL_kEDH LEAF_NODE 14 SSL_kEDH LEAF_NODE 12 | BIT_OR_ELEM 12 SSL_kDHr | SSL_kDHd BIT_OR 13 SSL_kDHr | SSL_kDHd BIT_OR_ELEM 14 SSL_kDHr FIELD 15 SSL_kDHr LEAF_NODE 16 SSL_kDHr LEAF_NODE 14 | BIT_OR_ELEM 14 SSL_kDHd FIELD 15 SSL_kDHd LEAF_NODE 16 SSL_kDHd LEAF_NODE 11 ) LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SIMPLE_DECL 11 DH * dh_srvr , DH * dh_clnt ; INIT_DECL_LIST 12 DH * dh_srvr , DH * dh_clnt VAR_DECL 13 DH * dh_srvr TYPE 14 DH * TYPE_NAME 15 DH LEAF_NODE 16 DH POINTER 15 * LEAF_NODE 16 * NAME 14 dh_srvr LEAF_NODE 15 dh_srvr LEAF_NODE 13 , VAR_DECL 13 DH * dh_clnt TYPE 14 DH * TYPE_NAME 15 DH LEAF_NODE 16 DH POINTER 15 * LEAF_NODE 16 * NAME 14 dh_clnt LEAF_NODE 15 dh_clnt LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> session -> sess_cert -> peer_dh_tmp != NULL EXPR 13 s -> session -> sess_cert -> peer_dh_tmp != NULL FIELD 14 s -> session -> sess_cert -> peer_dh_tmp LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 session LEAF_NODE 15 -> LEAF_NODE 15 sess_cert LEAF_NODE 15 -> LEAF_NODE 15 peer_dh_tmp EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 dh_srvr = s -> session -> sess_cert -> peer_dh_tmp ; EXPR 14 dh_srvr = s -> session -> sess_cert -> peer_dh_tmp ASSIGN 15 dh_srvr = s -> session -> sess_cert -> peer_dh_tmp LVAL 16 dh_srvr FIELD 17 dh_srvr LEAF_NODE 18 dh_srvr ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 s -> session -> sess_cert -> peer_dh_tmp FIELD 17 s -> session -> sess_cert -> peer_dh_tmp LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 session LEAF_NODE 18 -> LEAF_NODE 18 sess_cert LEAF_NODE 18 -> LEAF_NODE 18 peer_dh_tmp LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 else LEAF_NODE 13 else STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_HANDSHAKE_FAILURE ) ; EXPR 15 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_HANDSHAKE_FAILURE ) FUNCTION_CALL 16 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_HANDSHAKE_FAILURE ) CALLEE 17 ssl3_send_alert LEAF_NODE 18 ssl3_send_alert LEAF_NODE 17 ( ARGUMENT 17 s FIELD 18 s LEAF_NODE 19 s LEAF_NODE 17 , ARGUMENT 17 SSL3_AL_FATAL FIELD 18 SSL3_AL_FATAL LEAF_NODE 19 SSL3_AL_FATAL LEAF_NODE 17 , ARGUMENT 17 SSL_AD_HANDSHAKE_FAILURE FIELD 18 SSL_AD_HANDSHAKE_FAILURE LEAF_NODE 19 SSL_AD_HANDSHAKE_FAILURE LEAF_NODE 17 ) LEAF_NODE 15 ; EXPR_STATEMENT 14 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_UNABLE_TO_FIND_DH_PARAMETERS ) ; EXPR 15 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_UNABLE_TO_FIND_DH_PARAMETERS ) FUNCTION_CALL 16 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_UNABLE_TO_FIND_DH_PARAMETERS ) CALLEE 17 SSLerr LEAF_NODE 18 SSLerr LEAF_NODE 17 ( ARGUMENT 17 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 18 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 19 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 17 , ARGUMENT 17 SSL_R_UNABLE_TO_FIND_DH_PARAMETERS FIELD 18 SSL_R_UNABLE_TO_FIND_DH_PARAMETERS LEAF_NODE 19 SSL_R_UNABLE_TO_FIND_DH_PARAMETERS LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 13 } SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ( dh_clnt = DHparams_dup ( dh_srvr ) ) == NULL EXPR 13 ( dh_clnt = DHparams_dup ( dh_srvr ) ) == NULL LEAF_NODE 14 ( ASSIGN 14 dh_clnt = DHparams_dup ( dh_srvr ) LVAL 15 dh_clnt FIELD 16 dh_clnt LEAF_NODE 17 dh_clnt ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 DHparams_dup ( dh_srvr ) FUNCTION_CALL 16 DHparams_dup ( dh_srvr ) CALLEE 17 DHparams_dup LEAF_NODE 18 DHparams_dup LEAF_NODE 17 ( ARGUMENT 17 dh_srvr FIELD 18 dh_srvr LEAF_NODE 19 dh_srvr LEAF_NODE 17 ) LEAF_NODE 14 ) EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_DH_LIB ) ; EXPR 15 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_DH_LIB ) FUNCTION_CALL 16 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_DH_LIB ) CALLEE 17 SSLerr LEAF_NODE 18 SSLerr LEAF_NODE 17 ( ARGUMENT 17 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 18 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 19 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 17 , ARGUMENT 17 ERR_R_DH_LIB FIELD 18 ERR_R_DH_LIB LEAF_NODE 19 ERR_R_DH_LIB LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 13 } SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ! DH_generate_key ( dh_clnt ) EXPR 13 ! DH_generate_key ( dh_clnt ) UNARY_EXPR 14 ! DH_generate_key ( dh_clnt ) UNARY_OPERATOR 15 ! LEAF_NODE 16 ! FUNCTION_CALL 15 DH_generate_key ( dh_clnt ) CALLEE 16 DH_generate_key LEAF_NODE 17 DH_generate_key LEAF_NODE 16 ( ARGUMENT 16 dh_clnt FIELD 17 dh_clnt LEAF_NODE 18 dh_clnt LEAF_NODE 16 ) LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_DH_LIB ) ; EXPR 15 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_DH_LIB ) FUNCTION_CALL 16 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_DH_LIB ) CALLEE 17 SSLerr LEAF_NODE 18 SSLerr LEAF_NODE 17 ( ARGUMENT 17 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 18 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 19 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 17 , ARGUMENT 17 ERR_R_DH_LIB FIELD 18 ERR_R_DH_LIB LEAF_NODE 19 ERR_R_DH_LIB LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 n = DH_compute_key ( p , dh_srvr -> pub_key , dh_clnt ) ; EXPR 12 n = DH_compute_key ( p , dh_srvr -> pub_key , dh_clnt ) ASSIGN 13 n = DH_compute_key ( p , dh_srvr -> pub_key , dh_clnt ) LVAL 14 n FIELD 15 n LEAF_NODE 16 n ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 DH_compute_key ( p , dh_srvr -> pub_key , dh_clnt ) FUNCTION_CALL 15 DH_compute_key ( p , dh_srvr -> pub_key , dh_clnt ) CALLEE 16 DH_compute_key LEAF_NODE 17 DH_compute_key LEAF_NODE 16 ( ARGUMENT 16 p FIELD 17 p LEAF_NODE 18 p LEAF_NODE 16 , ARGUMENT 16 dh_srvr -> pub_key FIELD 17 dh_srvr -> pub_key LEAF_NODE 18 dh_srvr LEAF_NODE 18 -> LEAF_NODE 18 pub_key LEAF_NODE 16 , ARGUMENT 16 dh_clnt FIELD 17 dh_clnt LEAF_NODE 18 dh_clnt LEAF_NODE 16 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 n <= 0 EXPR 13 n <= 0 FIELD 14 n LEAF_NODE 15 n REL_OPERATOR 14 <= LEAF_NODE 15 <= FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_DH_LIB ) ; EXPR 15 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_DH_LIB ) FUNCTION_CALL 16 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_DH_LIB ) CALLEE 17 SSLerr LEAF_NODE 18 SSLerr LEAF_NODE 17 ( ARGUMENT 17 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 18 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 19 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 17 , ARGUMENT 17 ERR_R_DH_LIB FIELD 18 ERR_R_DH_LIB LEAF_NODE 19 ERR_R_DH_LIB LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 s -> session -> master_key_length = s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , p , n ) ; EXPR 12 s -> session -> master_key_length = s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , p , n ) ASSIGN 13 s -> session -> master_key_length = s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , p , n ) LVAL 14 s -> session -> master_key_length FIELD 15 s -> session -> master_key_length LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 master_key_length ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , p , n ) FUNCTION_CALL 15 s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , p , n ) CALLEE 16 s -> method -> ssl3_enc -> generate_master_secret LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 method LEAF_NODE 17 -> LEAF_NODE 17 ssl3_enc LEAF_NODE 17 -> LEAF_NODE 17 generate_master_secret LEAF_NODE 16 ( ARGUMENT 16 s FIELD 17 s LEAF_NODE 18 s LEAF_NODE 16 , ARGUMENT 16 s -> session -> master_key FIELD 17 s -> session -> master_key LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 session LEAF_NODE 18 -> LEAF_NODE 18 master_key LEAF_NODE 16 , ARGUMENT 16 p FIELD 17 p LEAF_NODE 18 p LEAF_NODE 16 , ARGUMENT 16 n FIELD 17 n LEAF_NODE 18 n LEAF_NODE 16 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 memset ( p , 0 , n ) ; EXPR 12 memset ( p , 0 , n ) FUNCTION_CALL 13 memset ( p , 0 , n ) CALLEE 14 memset LEAF_NODE 15 memset LEAF_NODE 14 ( ARGUMENT 14 p FIELD 15 p LEAF_NODE 16 p LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 , ARGUMENT 14 n FIELD 15 n LEAF_NODE 16 n LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 n = BN_num_bytes ( dh_clnt -> pub_key ) ; EXPR 12 n = BN_num_bytes ( dh_clnt -> pub_key ) ASSIGN 13 n = BN_num_bytes ( dh_clnt -> pub_key ) LVAL 14 n FIELD 15 n LEAF_NODE 16 n ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 BN_num_bytes ( dh_clnt -> pub_key ) FUNCTION_CALL 15 BN_num_bytes ( dh_clnt -> pub_key ) CALLEE 16 BN_num_bytes LEAF_NODE 17 BN_num_bytes LEAF_NODE 16 ( ARGUMENT 16 dh_clnt -> pub_key FIELD 17 dh_clnt -> pub_key LEAF_NODE 18 dh_clnt LEAF_NODE 18 -> LEAF_NODE 18 pub_key LEAF_NODE 16 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 s2n ( n , p ) ; EXPR 12 s2n ( n , p ) FUNCTION_CALL 13 s2n ( n , p ) CALLEE 14 s2n LEAF_NODE 15 s2n LEAF_NODE 14 ( ARGUMENT 14 n FIELD 15 n LEAF_NODE 16 n LEAF_NODE 14 , ARGUMENT 14 p FIELD 15 p LEAF_NODE 16 p LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 BN_bn2bin ( dh_clnt -> pub_key , p ) ; EXPR 12 BN_bn2bin ( dh_clnt -> pub_key , p ) FUNCTION_CALL 13 BN_bn2bin ( dh_clnt -> pub_key , p ) CALLEE 14 BN_bn2bin LEAF_NODE 15 BN_bn2bin LEAF_NODE 14 ( ARGUMENT 14 dh_clnt -> pub_key FIELD 15 dh_clnt -> pub_key LEAF_NODE 16 dh_clnt LEAF_NODE 16 -> LEAF_NODE 16 pub_key LEAF_NODE 14 , ARGUMENT 14 p FIELD 15 p LEAF_NODE 16 p LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 n += 2 ; EXPR 12 n += 2 ASSIGN 13 n += 2 LVAL 14 n FIELD 15 n LEAF_NODE 16 n ASSIGN_OP 14 += LEAF_NODE 15 += RVAL 14 2 FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 12 ; EXPR_STATEMENT 11 DH_free ( dh_clnt ) ; EXPR 12 DH_free ( dh_clnt ) FUNCTION_CALL 13 DH_free ( dh_clnt ) CALLEE 14 DH_free LEAF_NODE 15 DH_free LEAF_NODE 14 ( ARGUMENT 14 dh_clnt FIELD 15 dh_clnt LEAF_NODE 16 dh_clnt LEAF_NODE 14 ) LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 alg_k & ( SSL_kEECDH | SSL_kECDHr | SSL_kECDHe ) EXPR 10 alg_k & ( SSL_kEECDH | SSL_kECDHr | SSL_kECDHe ) FIELD 11 alg_k LEAF_NODE 12 alg_k LEAF_NODE 11 & LEAF_NODE 11 ( BIT_OR 11 SSL_kEECDH | SSL_kECDHr | SSL_kECDHe BIT_OR_ELEM 12 SSL_kEECDH FIELD 13 SSL_kEECDH LEAF_NODE 14 SSL_kEECDH LEAF_NODE 12 | BIT_OR_ELEM 12 SSL_kECDHr | SSL_kECDHe BIT_OR 13 SSL_kECDHr | SSL_kECDHe BIT_OR_ELEM 14 SSL_kECDHr FIELD 15 SSL_kECDHr LEAF_NODE 16 SSL_kECDHr LEAF_NODE 14 | BIT_OR_ELEM 14 SSL_kECDHe FIELD 15 SSL_kECDHe LEAF_NODE 16 SSL_kECDHe LEAF_NODE 11 ) LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SIMPLE_DECL 11 const EC_GROUP * srvr_group ; srvr_group = NULL ; VAR_DECL 12 const EC_GROUP * srvr_group ; srvr_group = NULL TYPE 13 const EC_GROUP * TYPE_NAME 14 const EC_GROUP LEAF_NODE 15 const LEAF_NODE 15 EC_GROUP POINTER 14 * LEAF_NODE 15 * NAME 13 srvr_group LEAF_NODE 14 srvr_group LEAF_NODE 13 ; INIT 13 srvr_group = NULL ASSIGN 14 srvr_group = NULL LVAL 15 srvr_group NAME 16 srvr_group LEAF_NODE 17 srvr_group ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 12 ; SIMPLE_DECL 11 EC_KEY * tkey ; VAR_DECL 12 EC_KEY * tkey TYPE 13 EC_KEY * TYPE_NAME 14 EC_KEY LEAF_NODE 15 EC_KEY POINTER 14 * LEAF_NODE 15 * NAME 13 tkey LEAF_NODE 14 tkey LEAF_NODE 12 ; SIMPLE_DECL 11 int ecdh_clnt_cert ; ecdh_clnt_cert = 0 ; VAR_DECL 12 int ecdh_clnt_cert ; ecdh_clnt_cert = 0 TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 ecdh_clnt_cert LEAF_NODE 14 ecdh_clnt_cert LEAF_NODE 13 ; INIT 13 ecdh_clnt_cert = 0 ASSIGN 14 ecdh_clnt_cert = 0 LVAL 15 ecdh_clnt_cert NAME 16 ecdh_clnt_cert LEAF_NODE 17 ecdh_clnt_cert ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 12 ; SIMPLE_DECL 11 int field_size ; field_size = 0 ; VAR_DECL 12 int field_size ; field_size = 0 TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 field_size LEAF_NODE 14 field_size LEAF_NODE 13 ; INIT 13 field_size = 0 ASSIGN 14 field_size = 0 LVAL 15 field_size NAME 16 field_size LEAF_NODE 17 field_size ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ( alg_k & ( SSL_kECDHr | SSL_kECDHe ) ) && ( s -> cert != NULL ) EXPR 13 ( alg_k & ( SSL_kECDHr | SSL_kECDHe ) ) && ( s -> cert != NULL ) AND 14 ( alg_k & ( SSL_kECDHr | SSL_kECDHe ) ) && ( s -> cert != NULL ) EXPR 15 ( alg_k & ( SSL_kECDHr | SSL_kECDHe ) ) LEAF_NODE 16 ( FIELD 16 alg_k LEAF_NODE 17 alg_k LEAF_NODE 16 & LEAF_NODE 16 ( BIT_OR 16 SSL_kECDHr | SSL_kECDHe BIT_OR_ELEM 17 SSL_kECDHr FIELD 18 SSL_kECDHr LEAF_NODE 19 SSL_kECDHr LEAF_NODE 17 | BIT_OR_ELEM 17 SSL_kECDHe FIELD 18 SSL_kECDHe LEAF_NODE 19 SSL_kECDHe LEAF_NODE 16 ) LEAF_NODE 16 ) LEAF_NODE 15 && EXPR 15 ( s -> cert != NULL ) LEAF_NODE 16 ( FIELD 16 s -> cert LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 cert EQ_OPERATOR 16 != LEAF_NODE 17 != FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 16 ) LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { LEAF_NODE 13 STATEMENTS LEAF_NODE 13 } SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> session -> sess_cert -> peer_ecdh_tmp != NULL EXPR 13 s -> session -> sess_cert -> peer_ecdh_tmp != NULL FIELD 14 s -> session -> sess_cert -> peer_ecdh_tmp LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 session LEAF_NODE 15 -> LEAF_NODE 15 sess_cert LEAF_NODE 15 -> LEAF_NODE 15 peer_ecdh_tmp EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 tkey = s -> session -> sess_cert -> peer_ecdh_tmp ; EXPR 15 tkey = s -> session -> sess_cert -> peer_ecdh_tmp ASSIGN 16 tkey = s -> session -> sess_cert -> peer_ecdh_tmp LVAL 17 tkey FIELD 18 tkey LEAF_NODE 19 tkey ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 s -> session -> sess_cert -> peer_ecdh_tmp FIELD 18 s -> session -> sess_cert -> peer_ecdh_tmp LEAF_NODE 19 s LEAF_NODE 19 -> LEAF_NODE 19 session LEAF_NODE 19 -> LEAF_NODE 19 sess_cert LEAF_NODE 19 -> LEAF_NODE 19 peer_ecdh_tmp LEAF_NODE 15 ; LEAF_NODE 13 } SELECTION 11 KEYWORD 12 else LEAF_NODE 13 else STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 srvr_pub_pkey = X509_get_pubkey ( s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_ECC ] . x509 ) ; EXPR 15 srvr_pub_pkey = X509_get_pubkey ( s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_ECC ] . x509 ) ASSIGN 16 srvr_pub_pkey = X509_get_pubkey ( s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_ECC ] . x509 ) LVAL 17 srvr_pub_pkey FIELD 18 srvr_pub_pkey LEAF_NODE 19 srvr_pub_pkey ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 X509_get_pubkey ( s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_ECC ] . x509 ) FUNCTION_CALL 18 X509_get_pubkey ( s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_ECC ] . x509 ) CALLEE 19 X509_get_pubkey LEAF_NODE 20 X509_get_pubkey LEAF_NODE 19 ( ARGUMENT 19 s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_ECC ] . x509 FIELD 20 s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_ECC ] . x509 LEAF_NODE 21 s LEAF_NODE 21 -> LEAF_NODE 21 session LEAF_NODE 21 -> LEAF_NODE 21 sess_cert LEAF_NODE 21 -> LEAF_NODE 21 peer_pkeys LEAF_NODE 21 [ EXPR 21 SSL_PKEY_ECC FIELD 22 SSL_PKEY_ECC LEAF_NODE 23 SSL_PKEY_ECC LEAF_NODE 21 ] LEAF_NODE 21 . LEAF_NODE 21 x509 LEAF_NODE 19 ) LEAF_NODE 15 ; SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 ( srvr_pub_pkey == NULL ) || ( srvr_pub_pkey -> type != EVP_PKEY_EC ) || ( srvr_pub_pkey -> pkey . ec == NULL ) EXPR 16 ( srvr_pub_pkey == NULL ) || ( srvr_pub_pkey -> type != EVP_PKEY_EC ) || ( srvr_pub_pkey -> pkey . ec == NULL ) OR 17 ( srvr_pub_pkey == NULL ) || ( srvr_pub_pkey -> type != EVP_PKEY_EC ) || ( srvr_pub_pkey -> pkey . ec == NULL ) EXPR 18 ( srvr_pub_pkey == NULL ) LEAF_NODE 19 ( FIELD 19 srvr_pub_pkey LEAF_NODE 20 srvr_pub_pkey EQ_OPERATOR 19 == LEAF_NODE 20 == FIELD 19 NULL LEAF_NODE 20 NULL LEAF_NODE 19 ) LEAF_NODE 18 || EXPR 18 ( srvr_pub_pkey -> type != EVP_PKEY_EC ) || ( srvr_pub_pkey -> pkey . ec == NULL ) OR 19 ( srvr_pub_pkey -> type != EVP_PKEY_EC ) || ( srvr_pub_pkey -> pkey . ec == NULL ) EXPR 20 ( srvr_pub_pkey -> type != EVP_PKEY_EC ) LEAF_NODE 21 ( FIELD 21 srvr_pub_pkey -> type LEAF_NODE 22 srvr_pub_pkey LEAF_NODE 22 -> LEAF_NODE 22 type EQ_OPERATOR 21 != LEAF_NODE 22 != FIELD 21 EVP_PKEY_EC LEAF_NODE 22 EVP_PKEY_EC LEAF_NODE 21 ) LEAF_NODE 20 || EXPR 20 ( srvr_pub_pkey -> pkey . ec == NULL ) LEAF_NODE 21 ( FIELD 21 srvr_pub_pkey -> pkey . ec LEAF_NODE 22 srvr_pub_pkey LEAF_NODE 22 -> LEAF_NODE 22 pkey LEAF_NODE 22 . LEAF_NODE 22 ec EQ_OPERATOR 21 == LEAF_NODE 22 == FIELD 21 NULL LEAF_NODE 22 NULL LEAF_NODE 21 ) LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 EXPR_STATEMENT 17 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) ; EXPR 18 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 19 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) CALLEE 20 SSLerr LEAF_NODE 21 SSLerr LEAF_NODE 20 ( ARGUMENT 20 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 21 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 22 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 20 , ARGUMENT 20 ERR_R_INTERNAL_ERROR FIELD 21 ERR_R_INTERNAL_ERROR LEAF_NODE 22 ERR_R_INTERNAL_ERROR LEAF_NODE 20 ) LEAF_NODE 18 ; JUMP_STATEMENT 17 goto err ; KEYWORD 18 goto LEAF_NODE 19 goto DESTINATION 18 err LEAF_NODE 19 err LEAF_NODE 18 ; LEAF_NODE 16 } EXPR_STATEMENT 14 tkey = srvr_pub_pkey -> pkey . ec ; EXPR 15 tkey = srvr_pub_pkey -> pkey . ec ASSIGN 16 tkey = srvr_pub_pkey -> pkey . ec LVAL 17 tkey FIELD 18 tkey LEAF_NODE 19 tkey ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 srvr_pub_pkey -> pkey . ec FIELD 18 srvr_pub_pkey -> pkey . ec LEAF_NODE 19 srvr_pub_pkey LEAF_NODE 19 -> LEAF_NODE 19 pkey LEAF_NODE 19 . LEAF_NODE 19 ec LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 srvr_group = EC_KEY_get0_group ( tkey ) ; EXPR 12 srvr_group = EC_KEY_get0_group ( tkey ) ASSIGN 13 srvr_group = EC_KEY_get0_group ( tkey ) LVAL 14 srvr_group FIELD 15 srvr_group LEAF_NODE 16 srvr_group ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 EC_KEY_get0_group ( tkey ) FUNCTION_CALL 15 EC_KEY_get0_group ( tkey ) CALLEE 16 EC_KEY_get0_group LEAF_NODE 17 EC_KEY_get0_group LEAF_NODE 16 ( ARGUMENT 16 tkey FIELD 17 tkey LEAF_NODE 18 tkey LEAF_NODE 16 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 srvr_ecpoint = EC_KEY_get0_public_key ( tkey ) ; EXPR 12 srvr_ecpoint = EC_KEY_get0_public_key ( tkey ) ASSIGN 13 srvr_ecpoint = EC_KEY_get0_public_key ( tkey ) LVAL 14 srvr_ecpoint FIELD 15 srvr_ecpoint LEAF_NODE 16 srvr_ecpoint ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 EC_KEY_get0_public_key ( tkey ) FUNCTION_CALL 15 EC_KEY_get0_public_key ( tkey ) CALLEE 16 EC_KEY_get0_public_key LEAF_NODE 17 EC_KEY_get0_public_key LEAF_NODE 16 ( ARGUMENT 16 tkey FIELD 17 tkey LEAF_NODE 18 tkey LEAF_NODE 16 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ( srvr_group == NULL ) || ( srvr_ecpoint == NULL ) EXPR 13 ( srvr_group == NULL ) || ( srvr_ecpoint == NULL ) OR 14 ( srvr_group == NULL ) || ( srvr_ecpoint == NULL ) EXPR 15 ( srvr_group == NULL ) LEAF_NODE 16 ( FIELD 16 srvr_group LEAF_NODE 17 srvr_group EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 16 ) LEAF_NODE 15 || EXPR 15 ( srvr_ecpoint == NULL ) LEAF_NODE 16 ( FIELD 16 srvr_ecpoint LEAF_NODE 17 srvr_ecpoint EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 16 ) LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) ; EXPR 15 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 16 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) CALLEE 17 SSLerr LEAF_NODE 18 SSLerr LEAF_NODE 17 ( ARGUMENT 17 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 18 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 19 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 17 , ARGUMENT 17 ERR_R_INTERNAL_ERROR FIELD 18 ERR_R_INTERNAL_ERROR LEAF_NODE 19 ERR_R_INTERNAL_ERROR LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 13 } SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ( clnt_ecdh = EC_KEY_new ( ) ) == NULL EXPR 13 ( clnt_ecdh = EC_KEY_new ( ) ) == NULL LEAF_NODE 14 ( ASSIGN 14 clnt_ecdh = EC_KEY_new ( ) LVAL 15 clnt_ecdh FIELD 16 clnt_ecdh LEAF_NODE 17 clnt_ecdh ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 EC_KEY_new ( ) FUNCTION_CALL 16 EC_KEY_new ( ) CALLEE 17 EC_KEY_new LEAF_NODE 18 EC_KEY_new LEAF_NODE 17 ( LEAF_NODE 17 ) LEAF_NODE 14 ) EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_MALLOC_FAILURE ) ; EXPR 15 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 16 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_MALLOC_FAILURE ) CALLEE 17 SSLerr LEAF_NODE 18 SSLerr LEAF_NODE 17 ( ARGUMENT 17 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 18 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 19 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 17 , ARGUMENT 17 ERR_R_MALLOC_FAILURE FIELD 18 ERR_R_MALLOC_FAILURE LEAF_NODE 19 ERR_R_MALLOC_FAILURE LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 13 } SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ! EC_KEY_set_group ( clnt_ecdh , srvr_group ) EXPR 13 ! EC_KEY_set_group ( clnt_ecdh , srvr_group ) UNARY_EXPR 14 ! EC_KEY_set_group ( clnt_ecdh , srvr_group ) UNARY_OPERATOR 15 ! LEAF_NODE 16 ! FUNCTION_CALL 15 EC_KEY_set_group ( clnt_ecdh , srvr_group ) CALLEE 16 EC_KEY_set_group LEAF_NODE 17 EC_KEY_set_group LEAF_NODE 16 ( ARGUMENT 16 clnt_ecdh FIELD 17 clnt_ecdh LEAF_NODE 18 clnt_ecdh LEAF_NODE 16 , ARGUMENT 16 srvr_group FIELD 17 srvr_group LEAF_NODE 18 srvr_group LEAF_NODE 16 ) LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_EC_LIB ) ; EXPR 15 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_EC_LIB ) FUNCTION_CALL 16 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_EC_LIB ) CALLEE 17 SSLerr LEAF_NODE 18 SSLerr LEAF_NODE 17 ( ARGUMENT 17 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 18 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 19 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 17 , ARGUMENT 17 ERR_R_EC_LIB FIELD 18 ERR_R_EC_LIB LEAF_NODE 19 ERR_R_EC_LIB LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 13 } SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ecdh_clnt_cert EXPR 13 ecdh_clnt_cert FIELD 14 ecdh_clnt_cert LEAF_NODE 15 ecdh_clnt_cert LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 SIMPLE_DECL 14 const BIGNUM * priv_key ; VAR_DECL 15 const BIGNUM * priv_key TYPE 16 const BIGNUM * TYPE_NAME 17 const BIGNUM LEAF_NODE 18 const LEAF_NODE 18 BIGNUM POINTER 17 * LEAF_NODE 18 * NAME 16 priv_key LEAF_NODE 17 priv_key LEAF_NODE 15 ; EXPR_STATEMENT 14 tkey = s -> cert -> key -> privatekey -> pkey . ec ; EXPR 15 tkey = s -> cert -> key -> privatekey -> pkey . ec ASSIGN 16 tkey = s -> cert -> key -> privatekey -> pkey . ec LVAL 17 tkey FIELD 18 tkey LEAF_NODE 19 tkey ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 s -> cert -> key -> privatekey -> pkey . ec FIELD 18 s -> cert -> key -> privatekey -> pkey . ec LEAF_NODE 19 s LEAF_NODE 19 -> LEAF_NODE 19 cert LEAF_NODE 19 -> LEAF_NODE 19 key LEAF_NODE 19 -> LEAF_NODE 19 privatekey LEAF_NODE 19 -> LEAF_NODE 19 pkey LEAF_NODE 19 . LEAF_NODE 19 ec LEAF_NODE 15 ; EXPR_STATEMENT 14 priv_key = EC_KEY_get0_private_key ( tkey ) ; EXPR 15 priv_key = EC_KEY_get0_private_key ( tkey ) ASSIGN 16 priv_key = EC_KEY_get0_private_key ( tkey ) LVAL 17 priv_key FIELD 18 priv_key LEAF_NODE 19 priv_key ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 EC_KEY_get0_private_key ( tkey ) FUNCTION_CALL 18 EC_KEY_get0_private_key ( tkey ) CALLEE 19 EC_KEY_get0_private_key LEAF_NODE 20 EC_KEY_get0_private_key LEAF_NODE 19 ( ARGUMENT 19 tkey FIELD 20 tkey LEAF_NODE 21 tkey LEAF_NODE 19 ) LEAF_NODE 15 ; SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 priv_key == NULL EXPR 16 priv_key == NULL FIELD 17 priv_key LEAF_NODE 18 priv_key EQ_OPERATOR 17 == LEAF_NODE 18 == FIELD 17 NULL LEAF_NODE 18 NULL LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 EXPR_STATEMENT 17 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_MALLOC_FAILURE ) ; EXPR 18 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 19 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_MALLOC_FAILURE ) CALLEE 20 SSLerr LEAF_NODE 21 SSLerr LEAF_NODE 20 ( ARGUMENT 20 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 21 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 22 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 20 , ARGUMENT 20 ERR_R_MALLOC_FAILURE FIELD 21 ERR_R_MALLOC_FAILURE LEAF_NODE 22 ERR_R_MALLOC_FAILURE LEAF_NODE 20 ) LEAF_NODE 18 ; JUMP_STATEMENT 17 goto err ; KEYWORD 18 goto LEAF_NODE 19 goto DESTINATION 18 err LEAF_NODE 19 err LEAF_NODE 18 ; LEAF_NODE 16 } SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 ! EC_KEY_set_private_key ( clnt_ecdh , priv_key ) EXPR 16 ! EC_KEY_set_private_key ( clnt_ecdh , priv_key ) UNARY_EXPR 17 ! EC_KEY_set_private_key ( clnt_ecdh , priv_key ) UNARY_OPERATOR 18 ! LEAF_NODE 19 ! FUNCTION_CALL 18 EC_KEY_set_private_key ( clnt_ecdh , priv_key ) CALLEE 19 EC_KEY_set_private_key LEAF_NODE 20 EC_KEY_set_private_key LEAF_NODE 19 ( ARGUMENT 19 clnt_ecdh FIELD 20 clnt_ecdh LEAF_NODE 21 clnt_ecdh LEAF_NODE 19 , ARGUMENT 19 priv_key FIELD 20 priv_key LEAF_NODE 21 priv_key LEAF_NODE 19 ) LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 EXPR_STATEMENT 17 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_EC_LIB ) ; EXPR 18 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_EC_LIB ) FUNCTION_CALL 19 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_EC_LIB ) CALLEE 20 SSLerr LEAF_NODE 21 SSLerr LEAF_NODE 20 ( ARGUMENT 20 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 21 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 22 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 20 , ARGUMENT 20 ERR_R_EC_LIB FIELD 21 ERR_R_EC_LIB LEAF_NODE 22 ERR_R_EC_LIB LEAF_NODE 20 ) LEAF_NODE 18 ; JUMP_STATEMENT 17 goto err ; KEYWORD 18 goto LEAF_NODE 19 goto DESTINATION 18 err LEAF_NODE 19 err LEAF_NODE 18 ; LEAF_NODE 16 } LEAF_NODE 13 } SELECTION 11 KEYWORD 12 else LEAF_NODE 13 else STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 ! ( EC_KEY_generate_key ( clnt_ecdh ) ) EXPR 16 ! ( EC_KEY_generate_key ( clnt_ecdh ) ) UNARY_EXPR 17 ! ( EC_KEY_generate_key ( clnt_ecdh ) ) UNARY_OPERATOR 18 ! LEAF_NODE 19 ! LEAF_NODE 18 ( FUNCTION_CALL 18 EC_KEY_generate_key ( clnt_ecdh ) CALLEE 19 EC_KEY_generate_key LEAF_NODE 20 EC_KEY_generate_key LEAF_NODE 19 ( ARGUMENT 19 clnt_ecdh FIELD 20 clnt_ecdh LEAF_NODE 21 clnt_ecdh LEAF_NODE 19 ) LEAF_NODE 18 ) LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 EXPR_STATEMENT 17 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_ECDH_LIB ) ; EXPR 18 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_ECDH_LIB ) FUNCTION_CALL 19 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_ECDH_LIB ) CALLEE 20 SSLerr LEAF_NODE 21 SSLerr LEAF_NODE 20 ( ARGUMENT 20 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 21 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 22 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 20 , ARGUMENT 20 ERR_R_ECDH_LIB FIELD 21 ERR_R_ECDH_LIB LEAF_NODE 22 ERR_R_ECDH_LIB LEAF_NODE 20 ) LEAF_NODE 18 ; JUMP_STATEMENT 17 goto err ; KEYWORD 18 goto LEAF_NODE 19 goto DESTINATION 18 err LEAF_NODE 19 err LEAF_NODE 18 ; LEAF_NODE 16 } LEAF_NODE 13 } EXPR_STATEMENT 11 field_size = EC_GROUP_get_degree ( srvr_group ) ; EXPR 12 field_size = EC_GROUP_get_degree ( srvr_group ) ASSIGN 13 field_size = EC_GROUP_get_degree ( srvr_group ) LVAL 14 field_size FIELD 15 field_size LEAF_NODE 16 field_size ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 EC_GROUP_get_degree ( srvr_group ) FUNCTION_CALL 15 EC_GROUP_get_degree ( srvr_group ) CALLEE 16 EC_GROUP_get_degree LEAF_NODE 17 EC_GROUP_get_degree LEAF_NODE 16 ( ARGUMENT 16 srvr_group FIELD 17 srvr_group LEAF_NODE 18 srvr_group LEAF_NODE 16 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 field_size <= 0 EXPR 13 field_size <= 0 FIELD 14 field_size LEAF_NODE 15 field_size REL_OPERATOR 14 <= LEAF_NODE 15 <= FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_ECDH_LIB ) ; EXPR 15 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_ECDH_LIB ) FUNCTION_CALL 16 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_ECDH_LIB ) CALLEE 17 SSLerr LEAF_NODE 18 SSLerr LEAF_NODE 17 ( ARGUMENT 17 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 18 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 19 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 17 , ARGUMENT 17 ERR_R_ECDH_LIB FIELD 18 ERR_R_ECDH_LIB LEAF_NODE 19 ERR_R_ECDH_LIB LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 n = ECDH_compute_key ( p , ( field_size + 7 ) / 8 , srvr_ecpoint , clnt_ecdh , NULL ) ; EXPR 12 n = ECDH_compute_key ( p , ( field_size + 7 ) / 8 , srvr_ecpoint , clnt_ecdh , NULL ) ASSIGN 13 n = ECDH_compute_key ( p , ( field_size + 7 ) / 8 , srvr_ecpoint , clnt_ecdh , NULL ) LVAL 14 n FIELD 15 n LEAF_NODE 16 n ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 ECDH_compute_key ( p , ( field_size + 7 ) / 8 , srvr_ecpoint , clnt_ecdh , NULL ) FUNCTION_CALL 15 ECDH_compute_key ( p , ( field_size + 7 ) / 8 , srvr_ecpoint , clnt_ecdh , NULL ) CALLEE 16 ECDH_compute_key LEAF_NODE 17 ECDH_compute_key LEAF_NODE 16 ( ARGUMENT 16 p FIELD 17 p LEAF_NODE 18 p LEAF_NODE 16 , ARGUMENT 16 ( field_size + 7 ) / 8 LEAF_NODE 17 ( FIELD 17 field_size LEAF_NODE 18 field_size LEAF_NODE 17 + FIELD 17 7 LEAF_NODE 18 7 LEAF_NODE 17 ) LEAF_NODE 17 / FIELD 17 8 LEAF_NODE 18 8 LEAF_NODE 16 , ARGUMENT 16 srvr_ecpoint FIELD 17 srvr_ecpoint LEAF_NODE 18 srvr_ecpoint LEAF_NODE 16 , ARGUMENT 16 clnt_ecdh FIELD 17 clnt_ecdh LEAF_NODE 18 clnt_ecdh LEAF_NODE 16 , ARGUMENT 16 NULL FIELD 17 NULL LEAF_NODE 18 NULL LEAF_NODE 16 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 n <= 0 EXPR 13 n <= 0 FIELD 14 n LEAF_NODE 15 n REL_OPERATOR 14 <= LEAF_NODE 15 <= FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_ECDH_LIB ) ; EXPR 15 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_ECDH_LIB ) FUNCTION_CALL 16 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_ECDH_LIB ) CALLEE 17 SSLerr LEAF_NODE 18 SSLerr LEAF_NODE 17 ( ARGUMENT 17 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 18 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 19 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 17 , ARGUMENT 17 ERR_R_ECDH_LIB FIELD 18 ERR_R_ECDH_LIB LEAF_NODE 19 ERR_R_ECDH_LIB LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 s -> session -> master_key_length = s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , p , n ) ; EXPR 12 s -> session -> master_key_length = s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , p , n ) ASSIGN 13 s -> session -> master_key_length = s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , p , n ) LVAL 14 s -> session -> master_key_length FIELD 15 s -> session -> master_key_length LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 master_key_length ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , p , n ) FUNCTION_CALL 15 s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , p , n ) CALLEE 16 s -> method -> ssl3_enc -> generate_master_secret LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 method LEAF_NODE 17 -> LEAF_NODE 17 ssl3_enc LEAF_NODE 17 -> LEAF_NODE 17 generate_master_secret LEAF_NODE 16 ( ARGUMENT 16 s FIELD 17 s LEAF_NODE 18 s LEAF_NODE 16 , ARGUMENT 16 s -> session -> master_key FIELD 17 s -> session -> master_key LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 session LEAF_NODE 18 -> LEAF_NODE 18 master_key LEAF_NODE 16 , ARGUMENT 16 p FIELD 17 p LEAF_NODE 18 p LEAF_NODE 16 , ARGUMENT 16 n FIELD 17 n LEAF_NODE 18 n LEAF_NODE 16 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 memset ( p , 0 , n ) ; EXPR 12 memset ( p , 0 , n ) FUNCTION_CALL 13 memset ( p , 0 , n ) CALLEE 14 memset LEAF_NODE 15 memset LEAF_NODE 14 ( ARGUMENT 14 p FIELD 15 p LEAF_NODE 16 p LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 , ARGUMENT 14 n FIELD 15 n LEAF_NODE 16 n LEAF_NODE 14 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ecdh_clnt_cert EXPR 13 ecdh_clnt_cert FIELD 14 ecdh_clnt_cert LEAF_NODE 15 ecdh_clnt_cert LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 n = 0 ; EXPR 15 n = 0 ASSIGN 16 n = 0 LVAL 17 n FIELD 18 n LEAF_NODE 19 n ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 0 FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 15 ; LEAF_NODE 13 } SELECTION 11 KEYWORD 12 else LEAF_NODE 13 else STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 encoded_pt_len = EC_POINT_point2oct ( srvr_group , EC_KEY_get0_public_key ( clnt_ecdh ) , POINT_CONVERSION_UNCOMPRESSED , NULL , 0 , NULL ) ; EXPR 15 encoded_pt_len = EC_POINT_point2oct ( srvr_group , EC_KEY_get0_public_key ( clnt_ecdh ) , POINT_CONVERSION_UNCOMPRESSED , NULL , 0 , NULL ) ASSIGN 16 encoded_pt_len = EC_POINT_point2oct ( srvr_group , EC_KEY_get0_public_key ( clnt_ecdh ) , POINT_CONVERSION_UNCOMPRESSED , NULL , 0 , NULL ) LVAL 17 encoded_pt_len FIELD 18 encoded_pt_len LEAF_NODE 19 encoded_pt_len ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 EC_POINT_point2oct ( srvr_group , EC_KEY_get0_public_key ( clnt_ecdh ) , POINT_CONVERSION_UNCOMPRESSED , NULL , 0 , NULL ) FUNCTION_CALL 18 EC_POINT_point2oct ( srvr_group , EC_KEY_get0_public_key ( clnt_ecdh ) , POINT_CONVERSION_UNCOMPRESSED , NULL , 0 , NULL ) CALLEE 19 EC_POINT_point2oct LEAF_NODE 20 EC_POINT_point2oct LEAF_NODE 19 ( ARGUMENT 19 srvr_group FIELD 20 srvr_group LEAF_NODE 21 srvr_group LEAF_NODE 19 , ARGUMENT 19 EC_KEY_get0_public_key ( clnt_ecdh ) FUNCTION_CALL 20 EC_KEY_get0_public_key ( clnt_ecdh ) CALLEE 21 EC_KEY_get0_public_key LEAF_NODE 22 EC_KEY_get0_public_key LEAF_NODE 21 ( ARGUMENT 21 clnt_ecdh FIELD 22 clnt_ecdh LEAF_NODE 23 clnt_ecdh LEAF_NODE 21 ) LEAF_NODE 19 , ARGUMENT 19 POINT_CONVERSION_UNCOMPRESSED FIELD 20 POINT_CONVERSION_UNCOMPRESSED LEAF_NODE 21 POINT_CONVERSION_UNCOMPRESSED LEAF_NODE 19 , ARGUMENT 19 NULL FIELD 20 NULL LEAF_NODE 21 NULL LEAF_NODE 19 , ARGUMENT 19 0 FIELD 20 0 LEAF_NODE 21 0 LEAF_NODE 19 , ARGUMENT 19 NULL FIELD 20 NULL LEAF_NODE 21 NULL LEAF_NODE 19 ) LEAF_NODE 15 ; LEAF_NODE 14 encodedPoint LEAF_NODE 14 = LEAF_NODE 14 ( LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 14 * LEAF_NODE 14 ) LEAF_NODE 14 OPENSSL_malloc LEAF_NODE 14 ( LEAF_NODE 14 encoded_pt_len LEAF_NODE 14 * LEAF_NODE 14 sizeof LEAF_NODE 14 ( LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 14 ) LEAF_NODE 14 ) LEAF_NODE 14 ; EXPR_STATEMENT 14 bn_ctx = BN_CTX_new ( ) ; EXPR 15 bn_ctx = BN_CTX_new ( ) ASSIGN 16 bn_ctx = BN_CTX_new ( ) LVAL 17 bn_ctx FIELD 18 bn_ctx LEAF_NODE 19 bn_ctx ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 BN_CTX_new ( ) FUNCTION_CALL 18 BN_CTX_new ( ) CALLEE 19 BN_CTX_new LEAF_NODE 20 BN_CTX_new LEAF_NODE 19 ( LEAF_NODE 19 ) LEAF_NODE 15 ; SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 ( encodedPoint == NULL ) || ( bn_ctx == NULL ) EXPR 16 ( encodedPoint == NULL ) || ( bn_ctx == NULL ) OR 17 ( encodedPoint == NULL ) || ( bn_ctx == NULL ) EXPR 18 ( encodedPoint == NULL ) LEAF_NODE 19 ( FIELD 19 encodedPoint LEAF_NODE 20 encodedPoint EQ_OPERATOR 19 == LEAF_NODE 20 == FIELD 19 NULL LEAF_NODE 20 NULL LEAF_NODE 19 ) LEAF_NODE 18 || EXPR 18 ( bn_ctx == NULL ) LEAF_NODE 19 ( FIELD 19 bn_ctx LEAF_NODE 20 bn_ctx EQ_OPERATOR 19 == LEAF_NODE 20 == FIELD 19 NULL LEAF_NODE 20 NULL LEAF_NODE 19 ) LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 EXPR_STATEMENT 17 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_MALLOC_FAILURE ) ; EXPR 18 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 19 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_MALLOC_FAILURE ) CALLEE 20 SSLerr LEAF_NODE 21 SSLerr LEAF_NODE 20 ( ARGUMENT 20 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 21 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 22 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 20 , ARGUMENT 20 ERR_R_MALLOC_FAILURE FIELD 21 ERR_R_MALLOC_FAILURE LEAF_NODE 22 ERR_R_MALLOC_FAILURE LEAF_NODE 20 ) LEAF_NODE 18 ; JUMP_STATEMENT 17 goto err ; KEYWORD 18 goto LEAF_NODE 19 goto DESTINATION 18 err LEAF_NODE 19 err LEAF_NODE 18 ; LEAF_NODE 16 } EXPR_STATEMENT 14 n = EC_POINT_point2oct ( srvr_group , EC_KEY_get0_public_key ( clnt_ecdh ) , POINT_CONVERSION_UNCOMPRESSED , encodedPoint , encoded_pt_len , bn_ctx ) ; EXPR 15 n = EC_POINT_point2oct ( srvr_group , EC_KEY_get0_public_key ( clnt_ecdh ) , POINT_CONVERSION_UNCOMPRESSED , encodedPoint , encoded_pt_len , bn_ctx ) ASSIGN 16 n = EC_POINT_point2oct ( srvr_group , EC_KEY_get0_public_key ( clnt_ecdh ) , POINT_CONVERSION_UNCOMPRESSED , encodedPoint , encoded_pt_len , bn_ctx ) LVAL 17 n FIELD 18 n LEAF_NODE 19 n ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 EC_POINT_point2oct ( srvr_group , EC_KEY_get0_public_key ( clnt_ecdh ) , POINT_CONVERSION_UNCOMPRESSED , encodedPoint , encoded_pt_len , bn_ctx ) FUNCTION_CALL 18 EC_POINT_point2oct ( srvr_group , EC_KEY_get0_public_key ( clnt_ecdh ) , POINT_CONVERSION_UNCOMPRESSED , encodedPoint , encoded_pt_len , bn_ctx ) CALLEE 19 EC_POINT_point2oct LEAF_NODE 20 EC_POINT_point2oct LEAF_NODE 19 ( ARGUMENT 19 srvr_group FIELD 20 srvr_group LEAF_NODE 21 srvr_group LEAF_NODE 19 , ARGUMENT 19 EC_KEY_get0_public_key ( clnt_ecdh ) FUNCTION_CALL 20 EC_KEY_get0_public_key ( clnt_ecdh ) CALLEE 21 EC_KEY_get0_public_key LEAF_NODE 22 EC_KEY_get0_public_key LEAF_NODE 21 ( ARGUMENT 21 clnt_ecdh FIELD 22 clnt_ecdh LEAF_NODE 23 clnt_ecdh LEAF_NODE 21 ) LEAF_NODE 19 , ARGUMENT 19 POINT_CONVERSION_UNCOMPRESSED FIELD 20 POINT_CONVERSION_UNCOMPRESSED LEAF_NODE 21 POINT_CONVERSION_UNCOMPRESSED LEAF_NODE 19 , ARGUMENT 19 encodedPoint FIELD 20 encodedPoint LEAF_NODE 21 encodedPoint LEAF_NODE 19 , ARGUMENT 19 encoded_pt_len FIELD 20 encoded_pt_len LEAF_NODE 21 encoded_pt_len LEAF_NODE 19 , ARGUMENT 19 bn_ctx FIELD 20 bn_ctx LEAF_NODE 21 bn_ctx LEAF_NODE 19 ) LEAF_NODE 15 ; EXPR_STATEMENT 14 * p = n ; EXPR 15 * p = n ASSIGN 16 * p = n LVAL 17 * p UNARY_EXPR 18 * p UNARY_OPERATOR 19 * LEAF_NODE 20 * FIELD 19 p LEAF_NODE 20 p ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 n FIELD 18 n LEAF_NODE 19 n LEAF_NODE 15 ; EXPR_STATEMENT 14 p += 1 ; EXPR 15 p += 1 ASSIGN 16 p += 1 LVAL 17 p FIELD 18 p LEAF_NODE 19 p ASSIGN_OP 17 += LEAF_NODE 18 += RVAL 17 1 FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 15 ; EXPR_STATEMENT 14 memcpy ( ( unsigned char * ) p , encodedPoint , n ) ; EXPR 15 memcpy ( ( unsigned char * ) p , encodedPoint , n ) FUNCTION_CALL 16 memcpy ( ( unsigned char * ) p , encodedPoint , n ) CALLEE 17 memcpy LEAF_NODE 18 memcpy LEAF_NODE 17 ( ARGUMENT 17 ( unsigned char * ) p LEAF_NODE 18 ( TYPE_NAME 18 unsigned char LEAF_NODE 19 unsigned LEAF_NODE 19 char LEAF_NODE 18 * LEAF_NODE 18 ) FIELD 18 p LEAF_NODE 19 p LEAF_NODE 17 , ARGUMENT 17 encodedPoint FIELD 18 encodedPoint LEAF_NODE 19 encodedPoint LEAF_NODE 17 , ARGUMENT 17 n FIELD 18 n LEAF_NODE 19 n LEAF_NODE 17 ) LEAF_NODE 15 ; EXPR_STATEMENT 14 n += 1 ; EXPR 15 n += 1 ASSIGN 16 n += 1 LVAL 17 n FIELD 18 n LEAF_NODE 19 n ASSIGN_OP 17 += LEAF_NODE 18 += RVAL 17 1 FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 BN_CTX_free ( bn_ctx ) ; EXPR 12 BN_CTX_free ( bn_ctx ) FUNCTION_CALL 13 BN_CTX_free ( bn_ctx ) CALLEE 14 BN_CTX_free LEAF_NODE 15 BN_CTX_free LEAF_NODE 14 ( ARGUMENT 14 bn_ctx FIELD 15 bn_ctx LEAF_NODE 16 bn_ctx LEAF_NODE 14 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 encodedPoint != NULL EXPR 13 encodedPoint != NULL FIELD 14 encodedPoint LEAF_NODE 15 encodedPoint EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 OPENSSL_free ( encodedPoint ) ; EXPR 14 OPENSSL_free ( encodedPoint ) FUNCTION_CALL 15 OPENSSL_free ( encodedPoint ) CALLEE 16 OPENSSL_free LEAF_NODE 17 OPENSSL_free LEAF_NODE 16 ( ARGUMENT 16 encodedPoint FIELD 17 encodedPoint LEAF_NODE 18 encodedPoint LEAF_NODE 16 ) LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 clnt_ecdh != NULL EXPR 13 clnt_ecdh != NULL FIELD 14 clnt_ecdh LEAF_NODE 15 clnt_ecdh EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 EC_KEY_free ( clnt_ecdh ) ; EXPR 14 EC_KEY_free ( clnt_ecdh ) FUNCTION_CALL 15 EC_KEY_free ( clnt_ecdh ) CALLEE 16 EC_KEY_free LEAF_NODE 17 EC_KEY_free LEAF_NODE 16 ( ARGUMENT 16 clnt_ecdh FIELD 17 clnt_ecdh LEAF_NODE 18 clnt_ecdh LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 11 EVP_PKEY_free ( srvr_pub_pkey ) ; EXPR 12 EVP_PKEY_free ( srvr_pub_pkey ) FUNCTION_CALL 13 EVP_PKEY_free ( srvr_pub_pkey ) CALLEE 14 EVP_PKEY_free LEAF_NODE 15 EVP_PKEY_free LEAF_NODE 14 ( ARGUMENT 14 srvr_pub_pkey FIELD 15 srvr_pub_pkey LEAF_NODE 16 srvr_pub_pkey LEAF_NODE 14 ) LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 alg_k & SSL_kGOST EXPR 10 alg_k & SSL_kGOST FIELD 11 alg_k LEAF_NODE 12 alg_k LEAF_NODE 11 & FIELD 11 SSL_kGOST LEAF_NODE 12 SSL_kGOST LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SIMPLE_DECL 11 EVP_PKEY_CTX * pkey_ctx ; VAR_DECL 12 EVP_PKEY_CTX * pkey_ctx TYPE 13 EVP_PKEY_CTX * TYPE_NAME 14 EVP_PKEY_CTX LEAF_NODE 15 EVP_PKEY_CTX POINTER 14 * LEAF_NODE 15 * NAME 13 pkey_ctx LEAF_NODE 14 pkey_ctx LEAF_NODE 12 ; SIMPLE_DECL 11 X509 * peer_cert ; VAR_DECL 12 X509 * peer_cert TYPE 13 X509 * TYPE_NAME 14 X509 LEAF_NODE 15 X509 POINTER 14 * LEAF_NODE 15 * NAME 13 peer_cert LEAF_NODE 14 peer_cert LEAF_NODE 12 ; SIMPLE_DECL 11 size_t msglen ; VAR_DECL 12 size_t msglen TYPE 13 size_t TYPE_NAME 14 size_t LEAF_NODE 15 size_t NAME 13 msglen LEAF_NODE 14 msglen LEAF_NODE 12 ; SIMPLE_DECL 11 unsigned int md_len ; VAR_DECL 12 unsigned int md_len TYPE 13 unsigned int TYPE_NAME 14 unsigned int LEAF_NODE 15 unsigned LEAF_NODE 15 int NAME 13 md_len LEAF_NODE 14 md_len LEAF_NODE 12 ; SIMPLE_DECL 11 int keytype ; VAR_DECL 12 int keytype TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 keytype LEAF_NODE 14 keytype LEAF_NODE 12 ; SIMPLE_DECL 11 unsigned char [ 32 ] premaster_secret , unsigned char [ 32 ] shared_ukm ; INIT_DECL_LIST 12 unsigned char [ 32 ] premaster_secret , unsigned char [ 32 ] shared_ukm VAR_DECL 13 unsigned char [ 32 ] premaster_secret TYPE 14 unsigned char [ 32 ] TYPE_NAME 15 unsigned char LEAF_NODE 16 unsigned LEAF_NODE 16 char TYPE_SUFFIX 15 [ 32 ] LEAF_NODE 16 [ FIELD 16 32 LEAF_NODE 17 32 LEAF_NODE 16 ] NAME 14 premaster_secret LEAF_NODE 15 premaster_secret LEAF_NODE 13 , VAR_DECL 13 unsigned char [ 32 ] shared_ukm TYPE 14 unsigned char [ 32 ] TYPE_NAME 15 unsigned char LEAF_NODE 16 unsigned LEAF_NODE 16 char TYPE_SUFFIX 15 [ 32 ] LEAF_NODE 16 [ FIELD 16 32 LEAF_NODE 17 32 LEAF_NODE 16 ] NAME 14 shared_ukm LEAF_NODE 15 shared_ukm LEAF_NODE 12 ; SIMPLE_DECL 11 EVP_MD_CTX * ukm_hash ; VAR_DECL 12 EVP_MD_CTX * ukm_hash TYPE 13 EVP_MD_CTX * TYPE_NAME 14 EVP_MD_CTX LEAF_NODE 15 EVP_MD_CTX POINTER 14 * LEAF_NODE 15 * NAME 13 ukm_hash LEAF_NODE 14 ukm_hash LEAF_NODE 12 ; SIMPLE_DECL 11 EVP_PKEY * pub_key ; VAR_DECL 12 EVP_PKEY * pub_key TYPE 13 EVP_PKEY * TYPE_NAME 14 EVP_PKEY LEAF_NODE 15 EVP_PKEY POINTER 14 * LEAF_NODE 15 * NAME 13 pub_key LEAF_NODE 14 pub_key LEAF_NODE 12 ; EXPR_STATEMENT 11 peer_cert = s -> session -> sess_cert -> peer_pkeys [ ( keytype = SSL_PKEY_GOST01 ) ] . x509 ; EXPR 12 peer_cert = s -> session -> sess_cert -> peer_pkeys [ ( keytype = SSL_PKEY_GOST01 ) ] . x509 ASSIGN 13 peer_cert = s -> session -> sess_cert -> peer_pkeys [ ( keytype = SSL_PKEY_GOST01 ) ] . x509 LVAL 14 peer_cert FIELD 15 peer_cert LEAF_NODE 16 peer_cert ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 s -> session -> sess_cert -> peer_pkeys [ ( keytype = SSL_PKEY_GOST01 ) ] . x509 FIELD 15 s -> session -> sess_cert -> peer_pkeys [ ( keytype = SSL_PKEY_GOST01 ) ] . x509 LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 sess_cert LEAF_NODE 16 -> LEAF_NODE 16 peer_pkeys LEAF_NODE 16 [ EXPR 16 ( keytype = SSL_PKEY_GOST01 ) LEAF_NODE 17 ( ASSIGN 17 keytype = SSL_PKEY_GOST01 LVAL 18 keytype FIELD 19 keytype LEAF_NODE 20 keytype ASSIGN_OP 18 = LEAF_NODE 19 = RVAL 18 SSL_PKEY_GOST01 FIELD 19 SSL_PKEY_GOST01 LEAF_NODE 20 SSL_PKEY_GOST01 LEAF_NODE 17 ) LEAF_NODE 16 ] LEAF_NODE 16 . LEAF_NODE 16 x509 LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ! peer_cert EXPR 13 ! peer_cert UNARY_EXPR 14 ! peer_cert UNARY_OPERATOR 15 ! LEAF_NODE 16 ! FIELD 15 peer_cert LEAF_NODE 16 peer_cert LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 peer_cert = s -> session -> sess_cert -> peer_pkeys [ ( keytype = SSL_PKEY_GOST94 ) ] . x509 ; EXPR 14 peer_cert = s -> session -> sess_cert -> peer_pkeys [ ( keytype = SSL_PKEY_GOST94 ) ] . x509 ASSIGN 15 peer_cert = s -> session -> sess_cert -> peer_pkeys [ ( keytype = SSL_PKEY_GOST94 ) ] . x509 LVAL 16 peer_cert FIELD 17 peer_cert LEAF_NODE 18 peer_cert ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 s -> session -> sess_cert -> peer_pkeys [ ( keytype = SSL_PKEY_GOST94 ) ] . x509 FIELD 17 s -> session -> sess_cert -> peer_pkeys [ ( keytype = SSL_PKEY_GOST94 ) ] . x509 LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 session LEAF_NODE 18 -> LEAF_NODE 18 sess_cert LEAF_NODE 18 -> LEAF_NODE 18 peer_pkeys LEAF_NODE 18 [ EXPR 18 ( keytype = SSL_PKEY_GOST94 ) LEAF_NODE 19 ( ASSIGN 19 keytype = SSL_PKEY_GOST94 LVAL 20 keytype FIELD 21 keytype LEAF_NODE 22 keytype ASSIGN_OP 20 = LEAF_NODE 21 = RVAL 20 SSL_PKEY_GOST94 FIELD 21 SSL_PKEY_GOST94 LEAF_NODE 22 SSL_PKEY_GOST94 LEAF_NODE 19 ) LEAF_NODE 18 ] LEAF_NODE 18 . LEAF_NODE 18 x509 LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ! peer_cert EXPR 13 ! peer_cert UNARY_EXPR 14 ! peer_cert UNARY_OPERATOR 15 ! LEAF_NODE 16 ! FIELD 15 peer_cert LEAF_NODE 16 peer_cert LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER ) ; EXPR 15 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER ) FUNCTION_CALL 16 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER ) CALLEE 17 SSLerr LEAF_NODE 18 SSLerr LEAF_NODE 17 ( ARGUMENT 17 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 18 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 19 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 17 , ARGUMENT 17 SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER FIELD 18 SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER LEAF_NODE 19 SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 pkey_ctx = EVP_PKEY_CTX_new ( pub_key = X509_get_pubkey ( peer_cert ) , NULL ) ; EXPR 12 pkey_ctx = EVP_PKEY_CTX_new ( pub_key = X509_get_pubkey ( peer_cert ) , NULL ) ASSIGN 13 pkey_ctx = EVP_PKEY_CTX_new ( pub_key = X509_get_pubkey ( peer_cert ) , NULL ) LVAL 14 pkey_ctx FIELD 15 pkey_ctx LEAF_NODE 16 pkey_ctx ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 EVP_PKEY_CTX_new ( pub_key = X509_get_pubkey ( peer_cert ) , NULL ) FUNCTION_CALL 15 EVP_PKEY_CTX_new ( pub_key = X509_get_pubkey ( peer_cert ) , NULL ) CALLEE 16 EVP_PKEY_CTX_new LEAF_NODE 17 EVP_PKEY_CTX_new LEAF_NODE 16 ( ARGUMENT 16 pub_key = X509_get_pubkey ( peer_cert ) ASSIGN 17 pub_key = X509_get_pubkey ( peer_cert ) LVAL 18 pub_key FIELD 19 pub_key LEAF_NODE 20 pub_key ASSIGN_OP 18 = LEAF_NODE 19 = RVAL 18 X509_get_pubkey ( peer_cert ) FUNCTION_CALL 19 X509_get_pubkey ( peer_cert ) CALLEE 20 X509_get_pubkey LEAF_NODE 21 X509_get_pubkey LEAF_NODE 20 ( ARGUMENT 20 peer_cert FIELD 21 peer_cert LEAF_NODE 22 peer_cert LEAF_NODE 20 ) LEAF_NODE 16 , ARGUMENT 16 NULL FIELD 17 NULL LEAF_NODE 18 NULL LEAF_NODE 16 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 EVP_PKEY_encrypt_init ( pkey_ctx ) ; EXPR 12 EVP_PKEY_encrypt_init ( pkey_ctx ) FUNCTION_CALL 13 EVP_PKEY_encrypt_init ( pkey_ctx ) CALLEE 14 EVP_PKEY_encrypt_init LEAF_NODE 15 EVP_PKEY_encrypt_init LEAF_NODE 14 ( ARGUMENT 14 pkey_ctx FIELD 15 pkey_ctx LEAF_NODE 16 pkey_ctx LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 RAND_bytes ( premaster_secret , 32 ) ; EXPR 12 RAND_bytes ( premaster_secret , 32 ) FUNCTION_CALL 13 RAND_bytes ( premaster_secret , 32 ) CALLEE 14 RAND_bytes LEAF_NODE 15 RAND_bytes LEAF_NODE 14 ( ARGUMENT 14 premaster_secret FIELD 15 premaster_secret LEAF_NODE 16 premaster_secret LEAF_NODE 14 , ARGUMENT 14 32 FIELD 15 32 LEAF_NODE 16 32 LEAF_NODE 14 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> cert -> key -> privatekey EXPR 13 s -> cert -> key -> privatekey FIELD 14 s -> cert -> key -> privatekey LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 cert LEAF_NODE 15 -> LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 privatekey LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 EVP_PKEY_derive_set_peer ( pkey_ctx , s -> cert -> key -> privatekey ) < 0 EXPR 16 EVP_PKEY_derive_set_peer ( pkey_ctx , s -> cert -> key -> privatekey ) < 0 FUNCTION_CALL 17 EVP_PKEY_derive_set_peer ( pkey_ctx , s -> cert -> key -> privatekey ) CALLEE 18 EVP_PKEY_derive_set_peer LEAF_NODE 19 EVP_PKEY_derive_set_peer LEAF_NODE 18 ( ARGUMENT 18 pkey_ctx FIELD 19 pkey_ctx LEAF_NODE 20 pkey_ctx LEAF_NODE 18 , ARGUMENT 18 s -> cert -> key -> privatekey FIELD 19 s -> cert -> key -> privatekey LEAF_NODE 20 s LEAF_NODE 20 -> LEAF_NODE 20 cert LEAF_NODE 20 -> LEAF_NODE 20 key LEAF_NODE 20 -> LEAF_NODE 20 privatekey LEAF_NODE 18 ) REL_OPERATOR 17 < LEAF_NODE 18 < FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 EXPR_STATEMENT 17 ERR_clear_error ( ) ; EXPR 18 ERR_clear_error ( ) FUNCTION_CALL 19 ERR_clear_error ( ) CALLEE 20 ERR_clear_error LEAF_NODE 21 ERR_clear_error LEAF_NODE 20 ( LEAF_NODE 20 ) LEAF_NODE 18 ; LEAF_NODE 16 } SELECTION 14 KEYWORD 15 else LEAF_NODE 16 else STATEMENTS 15 LEAF_NODE 16 { LEAF_NODE 16 STATEMENTS LEAF_NODE 16 } LEAF_NODE 13 } EXPR_STATEMENT 11 ukm_hash = EVP_MD_CTX_create ( ) ; EXPR 12 ukm_hash = EVP_MD_CTX_create ( ) ASSIGN 13 ukm_hash = EVP_MD_CTX_create ( ) LVAL 14 ukm_hash FIELD 15 ukm_hash LEAF_NODE 16 ukm_hash ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 EVP_MD_CTX_create ( ) FUNCTION_CALL 15 EVP_MD_CTX_create ( ) CALLEE 16 EVP_MD_CTX_create LEAF_NODE 17 EVP_MD_CTX_create LEAF_NODE 16 ( LEAF_NODE 16 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 EVP_DigestInit ( ukm_hash , EVP_get_digestbynid ( NID_id_GostR3411_94 ) ) ; EXPR 12 EVP_DigestInit ( ukm_hash , EVP_get_digestbynid ( NID_id_GostR3411_94 ) ) FUNCTION_CALL 13 EVP_DigestInit ( ukm_hash , EVP_get_digestbynid ( NID_id_GostR3411_94 ) ) CALLEE 14 EVP_DigestInit LEAF_NODE 15 EVP_DigestInit LEAF_NODE 14 ( ARGUMENT 14 ukm_hash FIELD 15 ukm_hash LEAF_NODE 16 ukm_hash LEAF_NODE 14 , ARGUMENT 14 EVP_get_digestbynid ( NID_id_GostR3411_94 ) FUNCTION_CALL 15 EVP_get_digestbynid ( NID_id_GostR3411_94 ) CALLEE 16 EVP_get_digestbynid LEAF_NODE 17 EVP_get_digestbynid LEAF_NODE 16 ( ARGUMENT 16 NID_id_GostR3411_94 FIELD 17 NID_id_GostR3411_94 LEAF_NODE 18 NID_id_GostR3411_94 LEAF_NODE 16 ) LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 EVP_DigestUpdate ( ukm_hash , s -> s3 -> client_random , SSL3_RANDOM_SIZE ) ; EXPR 12 EVP_DigestUpdate ( ukm_hash , s -> s3 -> client_random , SSL3_RANDOM_SIZE ) FUNCTION_CALL 13 EVP_DigestUpdate ( ukm_hash , s -> s3 -> client_random , SSL3_RANDOM_SIZE ) CALLEE 14 EVP_DigestUpdate LEAF_NODE 15 EVP_DigestUpdate LEAF_NODE 14 ( ARGUMENT 14 ukm_hash FIELD 15 ukm_hash LEAF_NODE 16 ukm_hash LEAF_NODE 14 , ARGUMENT 14 s -> s3 -> client_random FIELD 15 s -> s3 -> client_random LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 s3 LEAF_NODE 16 -> LEAF_NODE 16 client_random LEAF_NODE 14 , ARGUMENT 14 SSL3_RANDOM_SIZE FIELD 15 SSL3_RANDOM_SIZE LEAF_NODE 16 SSL3_RANDOM_SIZE LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 EVP_DigestUpdate ( ukm_hash , s -> s3 -> server_random , SSL3_RANDOM_SIZE ) ; EXPR 12 EVP_DigestUpdate ( ukm_hash , s -> s3 -> server_random , SSL3_RANDOM_SIZE ) FUNCTION_CALL 13 EVP_DigestUpdate ( ukm_hash , s -> s3 -> server_random , SSL3_RANDOM_SIZE ) CALLEE 14 EVP_DigestUpdate LEAF_NODE 15 EVP_DigestUpdate LEAF_NODE 14 ( ARGUMENT 14 ukm_hash FIELD 15 ukm_hash LEAF_NODE 16 ukm_hash LEAF_NODE 14 , ARGUMENT 14 s -> s3 -> server_random FIELD 15 s -> s3 -> server_random LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 s3 LEAF_NODE 16 -> LEAF_NODE 16 server_random LEAF_NODE 14 , ARGUMENT 14 SSL3_RANDOM_SIZE FIELD 15 SSL3_RANDOM_SIZE LEAF_NODE 16 SSL3_RANDOM_SIZE LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 EVP_DigestFinal_ex ( ukm_hash , shared_ukm , & md_len ) ; EXPR 12 EVP_DigestFinal_ex ( ukm_hash , shared_ukm , & md_len ) FUNCTION_CALL 13 EVP_DigestFinal_ex ( ukm_hash , shared_ukm , & md_len ) CALLEE 14 EVP_DigestFinal_ex LEAF_NODE 15 EVP_DigestFinal_ex LEAF_NODE 14 ( ARGUMENT 14 ukm_hash FIELD 15 ukm_hash LEAF_NODE 16 ukm_hash LEAF_NODE 14 , ARGUMENT 14 shared_ukm FIELD 15 shared_ukm LEAF_NODE 16 shared_ukm LEAF_NODE 14 , ARGUMENT 14 & md_len UNARY_EXPR 15 & md_len UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 md_len LEAF_NODE 17 md_len LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 EVP_MD_CTX_destroy ( ukm_hash ) ; EXPR 12 EVP_MD_CTX_destroy ( ukm_hash ) FUNCTION_CALL 13 EVP_MD_CTX_destroy ( ukm_hash ) CALLEE 14 EVP_MD_CTX_destroy LEAF_NODE 15 EVP_MD_CTX_destroy LEAF_NODE 14 ( ARGUMENT 14 ukm_hash FIELD 15 ukm_hash LEAF_NODE 16 ukm_hash LEAF_NODE 14 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 EVP_PKEY_CTX_ctrl ( pkey_ctx , - 1 , EVP_PKEY_OP_ENCRYPT , EVP_PKEY_CTRL_SET_IV , 8 , shared_ukm ) < 0 EXPR 13 EVP_PKEY_CTX_ctrl ( pkey_ctx , - 1 , EVP_PKEY_OP_ENCRYPT , EVP_PKEY_CTRL_SET_IV , 8 , shared_ukm ) < 0 FUNCTION_CALL 14 EVP_PKEY_CTX_ctrl ( pkey_ctx , - 1 , EVP_PKEY_OP_ENCRYPT , EVP_PKEY_CTRL_SET_IV , 8 , shared_ukm ) CALLEE 15 EVP_PKEY_CTX_ctrl LEAF_NODE 16 EVP_PKEY_CTX_ctrl LEAF_NODE 15 ( ARGUMENT 15 pkey_ctx FIELD 16 pkey_ctx LEAF_NODE 17 pkey_ctx LEAF_NODE 15 , ARGUMENT 15 - 1 UNARY_EXPR 16 - 1 UNARY_OPERATOR 17 - LEAF_NODE 18 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 15 , ARGUMENT 15 EVP_PKEY_OP_ENCRYPT FIELD 16 EVP_PKEY_OP_ENCRYPT LEAF_NODE 17 EVP_PKEY_OP_ENCRYPT LEAF_NODE 15 , ARGUMENT 15 EVP_PKEY_CTRL_SET_IV FIELD 16 EVP_PKEY_CTRL_SET_IV LEAF_NODE 17 EVP_PKEY_CTRL_SET_IV LEAF_NODE 15 , ARGUMENT 15 8 FIELD 16 8 LEAF_NODE 17 8 LEAF_NODE 15 , ARGUMENT 15 shared_ukm FIELD 16 shared_ukm LEAF_NODE 17 shared_ukm LEAF_NODE 15 ) REL_OPERATOR 14 < LEAF_NODE 15 < FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_LIBRARY_BUG ) ; EXPR 15 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_LIBRARY_BUG ) FUNCTION_CALL 16 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_LIBRARY_BUG ) CALLEE 17 SSLerr LEAF_NODE 18 SSLerr LEAF_NODE 17 ( ARGUMENT 17 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 18 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 19 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 17 , ARGUMENT 17 SSL_R_LIBRARY_BUG FIELD 18 SSL_R_LIBRARY_BUG LEAF_NODE 19 SSL_R_LIBRARY_BUG LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 * ( p ++ ) = V_ASN1_SEQUENCE | V_ASN1_CONSTRUCTED ; EXPR 12 * ( p ++ ) = V_ASN1_SEQUENCE | V_ASN1_CONSTRUCTED ASSIGN 13 * ( p ++ ) = V_ASN1_SEQUENCE | V_ASN1_CONSTRUCTED LVAL 14 * ( p ++ ) UNARY_EXPR 15 * ( p ++ ) UNARY_OPERATOR 16 * LEAF_NODE 17 * LEAF_NODE 16 ( FIELD 16 p ++ LEAF_NODE 17 p LEAF_NODE 17 ++ LEAF_NODE 16 ) ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 V_ASN1_SEQUENCE | V_ASN1_CONSTRUCTED BIT_OR 15 V_ASN1_SEQUENCE | V_ASN1_CONSTRUCTED BIT_OR_ELEM 16 V_ASN1_SEQUENCE FIELD 17 V_ASN1_SEQUENCE LEAF_NODE 18 V_ASN1_SEQUENCE LEAF_NODE 16 | BIT_OR_ELEM 16 V_ASN1_CONSTRUCTED FIELD 17 V_ASN1_CONSTRUCTED LEAF_NODE 18 V_ASN1_CONSTRUCTED LEAF_NODE 12 ; EXPR_STATEMENT 11 * ( p ++ ) = 0x81 ; EXPR 12 * ( p ++ ) = 0x81 ASSIGN 13 * ( p ++ ) = 0x81 LVAL 14 * ( p ++ ) UNARY_EXPR 15 * ( p ++ ) UNARY_OPERATOR 16 * LEAF_NODE 17 * LEAF_NODE 16 ( FIELD 16 p ++ LEAF_NODE 17 p LEAF_NODE 17 ++ LEAF_NODE 16 ) ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 0x81 FIELD 15 0x81 LEAF_NODE 16 0x81 LEAF_NODE 12 ; EXPR_STATEMENT 11 msglen = 256 ; EXPR 12 msglen = 256 ASSIGN 13 msglen = 256 LVAL 14 msglen FIELD 15 msglen LEAF_NODE 16 msglen ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 256 FIELD 15 256 LEAF_NODE 16 256 LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 EVP_PKEY_encrypt ( pkey_ctx , ( unsigned char * ) p + 1 , & msglen , premaster_secret , 32 ) < 0 EXPR 13 EVP_PKEY_encrypt ( pkey_ctx , ( unsigned char * ) p + 1 , & msglen , premaster_secret , 32 ) < 0 FUNCTION_CALL 14 EVP_PKEY_encrypt ( pkey_ctx , ( unsigned char * ) p + 1 , & msglen , premaster_secret , 32 ) CALLEE 15 EVP_PKEY_encrypt LEAF_NODE 16 EVP_PKEY_encrypt LEAF_NODE 15 ( ARGUMENT 15 pkey_ctx FIELD 16 pkey_ctx LEAF_NODE 17 pkey_ctx LEAF_NODE 15 , ARGUMENT 15 ( unsigned char * ) p + 1 LEAF_NODE 16 ( TYPE_NAME 16 unsigned char LEAF_NODE 17 unsigned LEAF_NODE 17 char LEAF_NODE 16 * LEAF_NODE 16 ) FIELD 16 p LEAF_NODE 17 p LEAF_NODE 16 + FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 15 , ARGUMENT 15 & msglen UNARY_EXPR 16 & msglen UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 msglen LEAF_NODE 18 msglen LEAF_NODE 15 , ARGUMENT 15 premaster_secret FIELD 16 premaster_secret LEAF_NODE 17 premaster_secret LEAF_NODE 15 , ARGUMENT 15 32 FIELD 16 32 LEAF_NODE 17 32 LEAF_NODE 15 ) REL_OPERATOR 14 < LEAF_NODE 15 < FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_LIBRARY_BUG ) ; EXPR 15 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_LIBRARY_BUG ) FUNCTION_CALL 16 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_LIBRARY_BUG ) CALLEE 17 SSLerr LEAF_NODE 18 SSLerr LEAF_NODE 17 ( ARGUMENT 17 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 18 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 19 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 17 , ARGUMENT 17 SSL_R_LIBRARY_BUG FIELD 18 SSL_R_LIBRARY_BUG LEAF_NODE 19 SSL_R_LIBRARY_BUG LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 * ( p ++ ) = msglen & 0xff ; EXPR 12 * ( p ++ ) = msglen & 0xff ASSIGN 13 * ( p ++ ) = msglen & 0xff LVAL 14 * ( p ++ ) UNARY_EXPR 15 * ( p ++ ) UNARY_OPERATOR 16 * LEAF_NODE 17 * LEAF_NODE 16 ( FIELD 16 p ++ LEAF_NODE 17 p LEAF_NODE 17 ++ LEAF_NODE 16 ) ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 msglen & 0xff FIELD 15 msglen LEAF_NODE 16 msglen LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 12 ; EXPR_STATEMENT 11 n = msglen + 3 ; EXPR 12 n = msglen + 3 ASSIGN 13 n = msglen + 3 LVAL 14 n FIELD 15 n LEAF_NODE 16 n ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 msglen + 3 FIELD 15 msglen LEAF_NODE 16 msglen LEAF_NODE 15 + FIELD 15 3 LEAF_NODE 16 3 LEAF_NODE 12 ; EXPR_STATEMENT 11 EVP_PKEY_CTX_free ( pkey_ctx ) ; EXPR 12 EVP_PKEY_CTX_free ( pkey_ctx ) FUNCTION_CALL 13 EVP_PKEY_CTX_free ( pkey_ctx ) CALLEE 14 EVP_PKEY_CTX_free LEAF_NODE 15 EVP_PKEY_CTX_free LEAF_NODE 14 ( ARGUMENT 14 pkey_ctx FIELD 15 pkey_ctx LEAF_NODE 16 pkey_ctx LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 s -> session -> master_key_length = s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , premaster_secret , 32 ) ; EXPR 12 s -> session -> master_key_length = s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , premaster_secret , 32 ) ASSIGN 13 s -> session -> master_key_length = s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , premaster_secret , 32 ) LVAL 14 s -> session -> master_key_length FIELD 15 s -> session -> master_key_length LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 master_key_length ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , premaster_secret , 32 ) FUNCTION_CALL 15 s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , premaster_secret , 32 ) CALLEE 16 s -> method -> ssl3_enc -> generate_master_secret LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 method LEAF_NODE 17 -> LEAF_NODE 17 ssl3_enc LEAF_NODE 17 -> LEAF_NODE 17 generate_master_secret LEAF_NODE 16 ( ARGUMENT 16 s FIELD 17 s LEAF_NODE 18 s LEAF_NODE 16 , ARGUMENT 16 s -> session -> master_key FIELD 17 s -> session -> master_key LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 session LEAF_NODE 18 -> LEAF_NODE 18 master_key LEAF_NODE 16 , ARGUMENT 16 premaster_secret FIELD 17 premaster_secret LEAF_NODE 18 premaster_secret LEAF_NODE 16 , ARGUMENT 16 32 FIELD 17 32 LEAF_NODE 18 32 LEAF_NODE 16 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 EVP_PKEY_free ( pub_key ) ; EXPR 12 EVP_PKEY_free ( pub_key ) FUNCTION_CALL 13 EVP_PKEY_free ( pub_key ) CALLEE 14 EVP_PKEY_free LEAF_NODE 15 EVP_PKEY_free LEAF_NODE 14 ( ARGUMENT 14 pub_key FIELD 15 pub_key LEAF_NODE 16 pub_key LEAF_NODE 14 ) LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 alg_k & SSL_kPSK EXPR 10 alg_k & SSL_kPSK FIELD 11 alg_k LEAF_NODE 12 alg_k LEAF_NODE 11 & FIELD 11 SSL_kPSK LEAF_NODE 12 SSL_kPSK LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SIMPLE_DECL 11 char [ PSK_MAX_IDENTITY_LEN ] identity ; VAR_DECL 12 char [ PSK_MAX_IDENTITY_LEN ] identity TYPE 13 char [ PSK_MAX_IDENTITY_LEN ] TYPE_NAME 14 char LEAF_NODE 15 char TYPE_SUFFIX 14 [ PSK_MAX_IDENTITY_LEN ] LEAF_NODE 15 [ FIELD 15 PSK_MAX_IDENTITY_LEN LEAF_NODE 16 PSK_MAX_IDENTITY_LEN LEAF_NODE 15 ] NAME 13 identity LEAF_NODE 14 identity LEAF_NODE 12 ; SIMPLE_DECL 11 unsigned char * t ; t = NULL ; VAR_DECL 12 unsigned char * t ; t = NULL TYPE 13 unsigned char * TYPE_NAME 14 unsigned char LEAF_NODE 15 unsigned LEAF_NODE 15 char POINTER 14 * LEAF_NODE 15 * NAME 13 t LEAF_NODE 14 t LEAF_NODE 13 ; INIT 13 t = NULL ASSIGN 14 t = NULL LVAL 15 t NAME 16 t LEAF_NODE 17 t ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 12 ; SIMPLE_DECL 11 unsigned char [ PSK_MAX_PSK_LEN * 2 + 4 ] psk_or_pre_ms ; VAR_DECL 12 unsigned char [ PSK_MAX_PSK_LEN * 2 + 4 ] psk_or_pre_ms TYPE 13 unsigned char [ PSK_MAX_PSK_LEN * 2 + 4 ] TYPE_NAME 14 unsigned char LEAF_NODE 15 unsigned LEAF_NODE 15 char TYPE_SUFFIX 14 [ PSK_MAX_PSK_LEN * 2 + 4 ] LEAF_NODE 15 [ FIELD 15 PSK_MAX_PSK_LEN LEAF_NODE 16 PSK_MAX_PSK_LEN LEAF_NODE 15 * FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 15 + FIELD 15 4 LEAF_NODE 16 4 LEAF_NODE 15 ] NAME 13 psk_or_pre_ms LEAF_NODE 14 psk_or_pre_ms LEAF_NODE 12 ; SIMPLE_DECL 11 unsigned int pre_ms_len ; pre_ms_len = 0 , unsigned int psk_len ; psk_len = 0 ; INIT_DECL_LIST 12 unsigned int pre_ms_len ; pre_ms_len = 0 , unsigned int psk_len ; psk_len = 0 VAR_DECL 13 unsigned int pre_ms_len ; pre_ms_len = 0 TYPE 14 unsigned int TYPE_NAME 15 unsigned int LEAF_NODE 16 unsigned LEAF_NODE 16 int NAME 14 pre_ms_len LEAF_NODE 15 pre_ms_len LEAF_NODE 14 ; INIT 14 pre_ms_len = 0 ASSIGN 15 pre_ms_len = 0 LVAL 16 pre_ms_len NAME 17 pre_ms_len LEAF_NODE 18 pre_ms_len ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 13 , VAR_DECL 13 unsigned int psk_len ; psk_len = 0 TYPE 14 unsigned int TYPE_NAME 15 unsigned int LEAF_NODE 16 unsigned LEAF_NODE 16 int NAME 14 psk_len LEAF_NODE 15 psk_len LEAF_NODE 14 ; INIT 14 psk_len = 0 ASSIGN 15 psk_len = 0 LVAL 16 psk_len NAME 17 psk_len LEAF_NODE 18 psk_len ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 12 ; SIMPLE_DECL 11 int psk_err ; psk_err = 1 ; VAR_DECL 12 int psk_err ; psk_err = 1 TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 psk_err LEAF_NODE 14 psk_err LEAF_NODE 13 ; INIT 13 psk_err = 1 ASSIGN 14 psk_err = 1 LVAL 15 psk_err NAME 16 psk_err LEAF_NODE 17 psk_err ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 1 FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 12 ; EXPR_STATEMENT 11 n = 0 ; EXPR 12 n = 0 ASSIGN 13 n = 0 LVAL 14 n FIELD 15 n LEAF_NODE 16 n ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> psk_client_callback == NULL EXPR 13 s -> psk_client_callback == NULL FIELD 14 s -> psk_client_callback LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 psk_client_callback EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_PSK_NO_CLIENT_CB ) ; EXPR 15 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_PSK_NO_CLIENT_CB ) FUNCTION_CALL 16 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_PSK_NO_CLIENT_CB ) CALLEE 17 SSLerr LEAF_NODE 18 SSLerr LEAF_NODE 17 ( ARGUMENT 17 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 18 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 19 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 17 , ARGUMENT 17 SSL_R_PSK_NO_CLIENT_CB FIELD 18 SSL_R_PSK_NO_CLIENT_CB LEAF_NODE 19 SSL_R_PSK_NO_CLIENT_CB LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 psk_len = s -> psk_client_callback ( s , s -> ctx -> psk_identity_hint , identity , PSK_MAX_IDENTITY_LEN , psk_or_pre_ms , sizeof ( psk_or_pre_ms ) ) ; EXPR 12 psk_len = s -> psk_client_callback ( s , s -> ctx -> psk_identity_hint , identity , PSK_MAX_IDENTITY_LEN , psk_or_pre_ms , sizeof ( psk_or_pre_ms ) ) ASSIGN 13 psk_len = s -> psk_client_callback ( s , s -> ctx -> psk_identity_hint , identity , PSK_MAX_IDENTITY_LEN , psk_or_pre_ms , sizeof ( psk_or_pre_ms ) ) LVAL 14 psk_len FIELD 15 psk_len LEAF_NODE 16 psk_len ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 s -> psk_client_callback ( s , s -> ctx -> psk_identity_hint , identity , PSK_MAX_IDENTITY_LEN , psk_or_pre_ms , sizeof ( psk_or_pre_ms ) ) FUNCTION_CALL 15 s -> psk_client_callback ( s , s -> ctx -> psk_identity_hint , identity , PSK_MAX_IDENTITY_LEN , psk_or_pre_ms , sizeof ( psk_or_pre_ms ) ) CALLEE 16 s -> psk_client_callback LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 psk_client_callback LEAF_NODE 16 ( ARGUMENT 16 s FIELD 17 s LEAF_NODE 18 s LEAF_NODE 16 , ARGUMENT 16 s -> ctx -> psk_identity_hint FIELD 17 s -> ctx -> psk_identity_hint LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 ctx LEAF_NODE 18 -> LEAF_NODE 18 psk_identity_hint LEAF_NODE 16 , ARGUMENT 16 identity FIELD 17 identity LEAF_NODE 18 identity LEAF_NODE 16 , ARGUMENT 16 PSK_MAX_IDENTITY_LEN FIELD 17 PSK_MAX_IDENTITY_LEN LEAF_NODE 18 PSK_MAX_IDENTITY_LEN LEAF_NODE 16 , ARGUMENT 16 psk_or_pre_ms FIELD 17 psk_or_pre_ms LEAF_NODE 18 psk_or_pre_ms LEAF_NODE 16 , ARGUMENT 16 sizeof ( psk_or_pre_ms ) FUNCTION_CALL 17 sizeof ( psk_or_pre_ms ) CALLEE 18 sizeof LEAF_NODE 19 sizeof LEAF_NODE 18 ( ARGUMENT 18 psk_or_pre_ms FIELD 19 psk_or_pre_ms LEAF_NODE 20 psk_or_pre_ms LEAF_NODE 18 ) LEAF_NODE 16 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 psk_len > PSK_MAX_PSK_LEN EXPR 13 psk_len > PSK_MAX_PSK_LEN FIELD 14 psk_len LEAF_NODE 15 psk_len REL_OPERATOR 14 > LEAF_NODE 15 > FIELD 14 PSK_MAX_PSK_LEN LEAF_NODE 15 PSK_MAX_PSK_LEN LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) ; EXPR 15 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 16 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) CALLEE 17 SSLerr LEAF_NODE 18 SSLerr LEAF_NODE 17 ( ARGUMENT 17 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 18 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 19 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 17 , ARGUMENT 17 ERR_R_INTERNAL_ERROR FIELD 18 ERR_R_INTERNAL_ERROR LEAF_NODE 19 ERR_R_INTERNAL_ERROR LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto psk_err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 psk_err LEAF_NODE 16 psk_err LEAF_NODE 15 ; LEAF_NODE 13 } SELECTION 11 KEYWORD 12 else LEAF_NODE 13 else STATEMENTS 12 SELECTION 13 KEYWORD 14 if LEAF_NODE 15 if LEAF_NODE 14 ( CONDITION 14 psk_len == 0 EXPR 15 psk_len == 0 FIELD 16 psk_len LEAF_NODE 17 psk_len EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 14 ) STATEMENTS 14 LEAF_NODE 15 { STATEMENTS 15 EXPR_STATEMENT 16 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_PSK_IDENTITY_NOT_FOUND ) ; EXPR 17 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_PSK_IDENTITY_NOT_FOUND ) FUNCTION_CALL 18 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , SSL_R_PSK_IDENTITY_NOT_FOUND ) CALLEE 19 SSLerr LEAF_NODE 20 SSLerr LEAF_NODE 19 ( ARGUMENT 19 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 20 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 21 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 19 , ARGUMENT 19 SSL_R_PSK_IDENTITY_NOT_FOUND FIELD 20 SSL_R_PSK_IDENTITY_NOT_FOUND LEAF_NODE 21 SSL_R_PSK_IDENTITY_NOT_FOUND LEAF_NODE 19 ) LEAF_NODE 17 ; JUMP_STATEMENT 16 goto psk_err ; KEYWORD 17 goto LEAF_NODE 18 goto DESTINATION 17 psk_err LEAF_NODE 18 psk_err LEAF_NODE 17 ; LEAF_NODE 15 } EXPR_STATEMENT 11 pre_ms_len = 2 + psk_len + 2 + psk_len ; EXPR 12 pre_ms_len = 2 + psk_len + 2 + psk_len ASSIGN 13 pre_ms_len = 2 + psk_len + 2 + psk_len LVAL 14 pre_ms_len FIELD 15 pre_ms_len LEAF_NODE 16 pre_ms_len ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 2 + psk_len + 2 + psk_len FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 15 + FIELD 15 psk_len LEAF_NODE 16 psk_len LEAF_NODE 15 + FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 15 + FIELD 15 psk_len LEAF_NODE 16 psk_len LEAF_NODE 12 ; EXPR_STATEMENT 11 t = psk_or_pre_ms ; EXPR 12 t = psk_or_pre_ms ASSIGN 13 t = psk_or_pre_ms LVAL 14 t FIELD 15 t LEAF_NODE 16 t ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 psk_or_pre_ms FIELD 15 psk_or_pre_ms LEAF_NODE 16 psk_or_pre_ms LEAF_NODE 12 ; EXPR_STATEMENT 11 memmove ( psk_or_pre_ms + psk_len + 4 , psk_or_pre_ms , psk_len ) ; EXPR 12 memmove ( psk_or_pre_ms + psk_len + 4 , psk_or_pre_ms , psk_len ) FUNCTION_CALL 13 memmove ( psk_or_pre_ms + psk_len + 4 , psk_or_pre_ms , psk_len ) CALLEE 14 memmove LEAF_NODE 15 memmove LEAF_NODE 14 ( ARGUMENT 14 psk_or_pre_ms + psk_len + 4 FIELD 15 psk_or_pre_ms LEAF_NODE 16 psk_or_pre_ms LEAF_NODE 15 + FIELD 15 psk_len LEAF_NODE 16 psk_len LEAF_NODE 15 + FIELD 15 4 LEAF_NODE 16 4 LEAF_NODE 14 , ARGUMENT 14 psk_or_pre_ms FIELD 15 psk_or_pre_ms LEAF_NODE 16 psk_or_pre_ms LEAF_NODE 14 , ARGUMENT 14 psk_len FIELD 15 psk_len LEAF_NODE 16 psk_len LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 s2n ( psk_len , t ) ; EXPR 12 s2n ( psk_len , t ) FUNCTION_CALL 13 s2n ( psk_len , t ) CALLEE 14 s2n LEAF_NODE 15 s2n LEAF_NODE 14 ( ARGUMENT 14 psk_len FIELD 15 psk_len LEAF_NODE 16 psk_len LEAF_NODE 14 , ARGUMENT 14 t FIELD 15 t LEAF_NODE 16 t LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 memset ( t , 0 , psk_len ) ; EXPR 12 memset ( t , 0 , psk_len ) FUNCTION_CALL 13 memset ( t , 0 , psk_len ) CALLEE 14 memset LEAF_NODE 15 memset LEAF_NODE 14 ( ARGUMENT 14 t FIELD 15 t LEAF_NODE 16 t LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 , ARGUMENT 14 psk_len FIELD 15 psk_len LEAF_NODE 16 psk_len LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 t += psk_len ; EXPR 12 t += psk_len ASSIGN 13 t += psk_len LVAL 14 t FIELD 15 t LEAF_NODE 16 t ASSIGN_OP 14 += LEAF_NODE 15 += RVAL 14 psk_len FIELD 15 psk_len LEAF_NODE 16 psk_len LEAF_NODE 12 ; EXPR_STATEMENT 11 s2n ( psk_len , t ) ; EXPR 12 s2n ( psk_len , t ) FUNCTION_CALL 13 s2n ( psk_len , t ) CALLEE 14 s2n LEAF_NODE 15 s2n LEAF_NODE 14 ( ARGUMENT 14 psk_len FIELD 15 psk_len LEAF_NODE 16 psk_len LEAF_NODE 14 , ARGUMENT 14 t FIELD 15 t LEAF_NODE 16 t LEAF_NODE 14 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> session -> psk_identity_hint != NULL EXPR 13 s -> session -> psk_identity_hint != NULL FIELD 14 s -> session -> psk_identity_hint LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 session LEAF_NODE 15 -> LEAF_NODE 15 psk_identity_hint EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 OPENSSL_free ( s -> session -> psk_identity_hint ) ; EXPR 14 OPENSSL_free ( s -> session -> psk_identity_hint ) FUNCTION_CALL 15 OPENSSL_free ( s -> session -> psk_identity_hint ) CALLEE 16 OPENSSL_free LEAF_NODE 17 OPENSSL_free LEAF_NODE 16 ( ARGUMENT 16 s -> session -> psk_identity_hint FIELD 17 s -> session -> psk_identity_hint LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 session LEAF_NODE 18 -> LEAF_NODE 18 psk_identity_hint LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 11 s -> session -> psk_identity_hint = BUF_strdup ( s -> ctx -> psk_identity_hint ) ; EXPR 12 s -> session -> psk_identity_hint = BUF_strdup ( s -> ctx -> psk_identity_hint ) ASSIGN 13 s -> session -> psk_identity_hint = BUF_strdup ( s -> ctx -> psk_identity_hint ) LVAL 14 s -> session -> psk_identity_hint FIELD 15 s -> session -> psk_identity_hint LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 psk_identity_hint ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 BUF_strdup ( s -> ctx -> psk_identity_hint ) FUNCTION_CALL 15 BUF_strdup ( s -> ctx -> psk_identity_hint ) CALLEE 16 BUF_strdup LEAF_NODE 17 BUF_strdup LEAF_NODE 16 ( ARGUMENT 16 s -> ctx -> psk_identity_hint FIELD 17 s -> ctx -> psk_identity_hint LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 ctx LEAF_NODE 18 -> LEAF_NODE 18 psk_identity_hint LEAF_NODE 16 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> ctx -> psk_identity_hint != NULL && s -> session -> psk_identity_hint == NULL EXPR 13 s -> ctx -> psk_identity_hint != NULL && s -> session -> psk_identity_hint == NULL AND 14 s -> ctx -> psk_identity_hint != NULL && s -> session -> psk_identity_hint == NULL EXPR 15 s -> ctx -> psk_identity_hint != NULL FIELD 16 s -> ctx -> psk_identity_hint LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 ctx LEAF_NODE 17 -> LEAF_NODE 17 psk_identity_hint EQ_OPERATOR 16 != LEAF_NODE 17 != FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 && EXPR 15 s -> session -> psk_identity_hint == NULL FIELD 16 s -> session -> psk_identity_hint LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 session LEAF_NODE 17 -> LEAF_NODE 17 psk_identity_hint EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_MALLOC_FAILURE ) ; EXPR 15 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 16 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_MALLOC_FAILURE ) CALLEE 17 SSLerr LEAF_NODE 18 SSLerr LEAF_NODE 17 ( ARGUMENT 17 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 18 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 19 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 17 , ARGUMENT 17 ERR_R_MALLOC_FAILURE FIELD 18 ERR_R_MALLOC_FAILURE LEAF_NODE 19 ERR_R_MALLOC_FAILURE LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto psk_err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 psk_err LEAF_NODE 16 psk_err LEAF_NODE 15 ; LEAF_NODE 13 } SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> session -> psk_identity != NULL EXPR 13 s -> session -> psk_identity != NULL FIELD 14 s -> session -> psk_identity LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 session LEAF_NODE 15 -> LEAF_NODE 15 psk_identity EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 OPENSSL_free ( s -> session -> psk_identity ) ; EXPR 14 OPENSSL_free ( s -> session -> psk_identity ) FUNCTION_CALL 15 OPENSSL_free ( s -> session -> psk_identity ) CALLEE 16 OPENSSL_free LEAF_NODE 17 OPENSSL_free LEAF_NODE 16 ( ARGUMENT 16 s -> session -> psk_identity FIELD 17 s -> session -> psk_identity LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 session LEAF_NODE 18 -> LEAF_NODE 18 psk_identity LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 11 s -> session -> psk_identity = BUF_strdup ( identity ) ; EXPR 12 s -> session -> psk_identity = BUF_strdup ( identity ) ASSIGN 13 s -> session -> psk_identity = BUF_strdup ( identity ) LVAL 14 s -> session -> psk_identity FIELD 15 s -> session -> psk_identity LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 psk_identity ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 BUF_strdup ( identity ) FUNCTION_CALL 15 BUF_strdup ( identity ) CALLEE 16 BUF_strdup LEAF_NODE 17 BUF_strdup LEAF_NODE 16 ( ARGUMENT 16 identity FIELD 17 identity LEAF_NODE 18 identity LEAF_NODE 16 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> session -> psk_identity == NULL EXPR 13 s -> session -> psk_identity == NULL FIELD 14 s -> session -> psk_identity LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 session LEAF_NODE 15 -> LEAF_NODE 15 psk_identity EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_MALLOC_FAILURE ) ; EXPR 15 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 16 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_MALLOC_FAILURE ) CALLEE 17 SSLerr LEAF_NODE 18 SSLerr LEAF_NODE 17 ( ARGUMENT 17 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 18 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 19 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 17 , ARGUMENT 17 ERR_R_MALLOC_FAILURE FIELD 18 ERR_R_MALLOC_FAILURE LEAF_NODE 19 ERR_R_MALLOC_FAILURE LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto psk_err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 psk_err LEAF_NODE 16 psk_err LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 s -> session -> master_key_length = s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , psk_or_pre_ms , pre_ms_len ) ; EXPR 12 s -> session -> master_key_length = s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , psk_or_pre_ms , pre_ms_len ) ASSIGN 13 s -> session -> master_key_length = s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , psk_or_pre_ms , pre_ms_len ) LVAL 14 s -> session -> master_key_length FIELD 15 s -> session -> master_key_length LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 master_key_length ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , psk_or_pre_ms , pre_ms_len ) FUNCTION_CALL 15 s -> method -> ssl3_enc -> generate_master_secret ( s , s -> session -> master_key , psk_or_pre_ms , pre_ms_len ) CALLEE 16 s -> method -> ssl3_enc -> generate_master_secret LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 method LEAF_NODE 17 -> LEAF_NODE 17 ssl3_enc LEAF_NODE 17 -> LEAF_NODE 17 generate_master_secret LEAF_NODE 16 ( ARGUMENT 16 s FIELD 17 s LEAF_NODE 18 s LEAF_NODE 16 , ARGUMENT 16 s -> session -> master_key FIELD 17 s -> session -> master_key LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 session LEAF_NODE 18 -> LEAF_NODE 18 master_key LEAF_NODE 16 , ARGUMENT 16 psk_or_pre_ms FIELD 17 psk_or_pre_ms LEAF_NODE 18 psk_or_pre_ms LEAF_NODE 16 , ARGUMENT 16 pre_ms_len FIELD 17 pre_ms_len LEAF_NODE 18 pre_ms_len LEAF_NODE 16 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 n = strlen ( identity ) ; EXPR 12 n = strlen ( identity ) ASSIGN 13 n = strlen ( identity ) LVAL 14 n FIELD 15 n LEAF_NODE 16 n ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 strlen ( identity ) FUNCTION_CALL 15 strlen ( identity ) CALLEE 16 strlen LEAF_NODE 17 strlen LEAF_NODE 16 ( ARGUMENT 16 identity FIELD 17 identity LEAF_NODE 18 identity LEAF_NODE 16 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 s2n ( n , p ) ; EXPR 12 s2n ( n , p ) FUNCTION_CALL 13 s2n ( n , p ) CALLEE 14 s2n LEAF_NODE 15 s2n LEAF_NODE 14 ( ARGUMENT 14 n FIELD 15 n LEAF_NODE 16 n LEAF_NODE 14 , ARGUMENT 14 p FIELD 15 p LEAF_NODE 16 p LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 memcpy ( p , identity , n ) ; EXPR 12 memcpy ( p , identity , n ) FUNCTION_CALL 13 memcpy ( p , identity , n ) CALLEE 14 memcpy LEAF_NODE 15 memcpy LEAF_NODE 14 ( ARGUMENT 14 p FIELD 15 p LEAF_NODE 16 p LEAF_NODE 14 , ARGUMENT 14 identity FIELD 15 identity LEAF_NODE 16 identity LEAF_NODE 14 , ARGUMENT 14 n FIELD 15 n LEAF_NODE 16 n LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 n += 2 ; EXPR 12 n += 2 ASSIGN 13 n += 2 LVAL 14 n FIELD 15 n LEAF_NODE 16 n ASSIGN_OP 14 += LEAF_NODE 15 += RVAL 14 2 FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 12 ; EXPR_STATEMENT 11 psk_err = 0 ; EXPR 12 psk_err = 0 ASSIGN 13 psk_err = 0 LVAL 14 psk_err FIELD 15 psk_err LEAF_NODE 16 psk_err ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 12 ; LABEL 11 psk_err : LEAF_NODE 12 psk_err LEAF_NODE 12 : EXPR_STATEMENT 11 OPENSSL_cleanse ( identity , PSK_MAX_IDENTITY_LEN ) ; EXPR 12 OPENSSL_cleanse ( identity , PSK_MAX_IDENTITY_LEN ) FUNCTION_CALL 13 OPENSSL_cleanse ( identity , PSK_MAX_IDENTITY_LEN ) CALLEE 14 OPENSSL_cleanse LEAF_NODE 15 OPENSSL_cleanse LEAF_NODE 14 ( ARGUMENT 14 identity FIELD 15 identity LEAF_NODE 16 identity LEAF_NODE 14 , ARGUMENT 14 PSK_MAX_IDENTITY_LEN FIELD 15 PSK_MAX_IDENTITY_LEN LEAF_NODE 16 PSK_MAX_IDENTITY_LEN LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 OPENSSL_cleanse ( psk_or_pre_ms , sizeof ( psk_or_pre_ms ) ) ; EXPR 12 OPENSSL_cleanse ( psk_or_pre_ms , sizeof ( psk_or_pre_ms ) ) FUNCTION_CALL 13 OPENSSL_cleanse ( psk_or_pre_ms , sizeof ( psk_or_pre_ms ) ) CALLEE 14 OPENSSL_cleanse LEAF_NODE 15 OPENSSL_cleanse LEAF_NODE 14 ( ARGUMENT 14 psk_or_pre_ms FIELD 15 psk_or_pre_ms LEAF_NODE 16 psk_or_pre_ms LEAF_NODE 14 , ARGUMENT 14 sizeof ( psk_or_pre_ms ) FUNCTION_CALL 15 sizeof ( psk_or_pre_ms ) CALLEE 16 sizeof LEAF_NODE 17 sizeof LEAF_NODE 16 ( ARGUMENT 16 psk_or_pre_ms FIELD 17 psk_or_pre_ms LEAF_NODE 18 psk_or_pre_ms LEAF_NODE 16 ) LEAF_NODE 14 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 psk_err != 0 EXPR 13 psk_err != 0 FIELD 14 psk_err LEAF_NODE 15 psk_err EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_HANDSHAKE_FAILURE ) ; EXPR 15 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_HANDSHAKE_FAILURE ) FUNCTION_CALL 16 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_HANDSHAKE_FAILURE ) CALLEE 17 ssl3_send_alert LEAF_NODE 18 ssl3_send_alert LEAF_NODE 17 ( ARGUMENT 17 s FIELD 18 s LEAF_NODE 19 s LEAF_NODE 17 , ARGUMENT 17 SSL3_AL_FATAL FIELD 18 SSL3_AL_FATAL LEAF_NODE 19 SSL3_AL_FATAL LEAF_NODE 17 , ARGUMENT 17 SSL_AD_HANDSHAKE_FAILURE FIELD 18 SSL_AD_HANDSHAKE_FAILURE LEAF_NODE 19 SSL_AD_HANDSHAKE_FAILURE LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 goto err ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 err LEAF_NODE 16 err LEAF_NODE 15 ; LEAF_NODE 13 } LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_HANDSHAKE_FAILURE ) ; EXPR 10 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_HANDSHAKE_FAILURE ) FUNCTION_CALL 11 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_HANDSHAKE_FAILURE ) CALLEE 12 ssl3_send_alert LEAF_NODE 13 ssl3_send_alert LEAF_NODE 12 ( ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 , ARGUMENT 12 SSL3_AL_FATAL FIELD 13 SSL3_AL_FATAL LEAF_NODE 14 SSL3_AL_FATAL LEAF_NODE 12 , ARGUMENT 12 SSL_AD_HANDSHAKE_FAILURE FIELD 13 SSL_AD_HANDSHAKE_FAILURE LEAF_NODE 14 SSL_AD_HANDSHAKE_FAILURE LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) ; EXPR 10 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE FIELD 13 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 14 SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE LEAF_NODE 12 , ARGUMENT 12 ERR_R_INTERNAL_ERROR FIELD 13 ERR_R_INTERNAL_ERROR LEAF_NODE 14 ERR_R_INTERNAL_ERROR LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 err LEAF_NODE 11 err LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 * ( d ++ ) = SSL3_MT_CLIENT_KEY_EXCHANGE ; EXPR 7 * ( d ++ ) = SSL3_MT_CLIENT_KEY_EXCHANGE ASSIGN 8 * ( d ++ ) = SSL3_MT_CLIENT_KEY_EXCHANGE LVAL 9 * ( d ++ ) UNARY_EXPR 10 * ( d ++ ) UNARY_OPERATOR 11 * LEAF_NODE 12 * LEAF_NODE 11 ( FIELD 11 d ++ LEAF_NODE 12 d LEAF_NODE 12 ++ LEAF_NODE 11 ) ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL3_MT_CLIENT_KEY_EXCHANGE FIELD 10 SSL3_MT_CLIENT_KEY_EXCHANGE LEAF_NODE 11 SSL3_MT_CLIENT_KEY_EXCHANGE LEAF_NODE 7 ; EXPR_STATEMENT 6 l2n3 ( n , d ) ; EXPR 7 l2n3 ( n , d ) FUNCTION_CALL 8 l2n3 ( n , d ) CALLEE 9 l2n3 LEAF_NODE 10 l2n3 LEAF_NODE 9 ( ARGUMENT 9 n FIELD 10 n LEAF_NODE 11 n LEAF_NODE 9 , ARGUMENT 9 d FIELD 10 d LEAF_NODE 11 d LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> state = SSL3_ST_CW_KEY_EXCH_B ; EXPR 7 s -> state = SSL3_ST_CW_KEY_EXCH_B ASSIGN 8 s -> state = SSL3_ST_CW_KEY_EXCH_B LVAL 9 s -> state FIELD 10 s -> state LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 state ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL3_ST_CW_KEY_EXCH_B FIELD 10 SSL3_ST_CW_KEY_EXCH_B LEAF_NODE 11 SSL3_ST_CW_KEY_EXCH_B LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> init_num = n + 4 ; EXPR 7 s -> init_num = n + 4 ASSIGN 8 s -> init_num = n + 4 LVAL 9 s -> init_num FIELD 10 s -> init_num LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 init_num ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 n + 4 FIELD 10 n LEAF_NODE 11 n LEAF_NODE 10 + FIELD 10 4 LEAF_NODE 11 4 LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> init_off = 0 ; EXPR 7 s -> init_off = 0 ASSIGN 8 s -> init_off = 0 LVAL 9 s -> init_off FIELD 10 s -> init_off LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 init_off ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return ( ssl3_do_write ( s , SSL3_RT_HANDSHAKE ) ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ( ssl3_do_write ( s , SSL3_RT_HANDSHAKE ) ) EXPR 5 ( ssl3_do_write ( s , SSL3_RT_HANDSHAKE ) ) LEAF_NODE 6 ( FUNCTION_CALL 6 ssl3_do_write ( s , SSL3_RT_HANDSHAKE ) CALLEE 7 ssl3_do_write LEAF_NODE 8 ssl3_do_write LEAF_NODE 7 ( ARGUMENT 7 s FIELD 8 s LEAF_NODE 9 s LEAF_NODE 7 , ARGUMENT 7 SSL3_RT_HANDSHAKE FIELD 8 SSL3_RT_HANDSHAKE LEAF_NODE 9 SSL3_RT_HANDSHAKE LEAF_NODE 7 ) LEAF_NODE 6 ) LEAF_NODE 4 ; LABEL 3 err : LEAF_NODE 4 err LEAF_NODE 4 : EXPR_STATEMENT 3 BN_CTX_free ( bn_ctx ) ; EXPR 4 BN_CTX_free ( bn_ctx ) FUNCTION_CALL 5 BN_CTX_free ( bn_ctx ) CALLEE 6 BN_CTX_free LEAF_NODE 7 BN_CTX_free LEAF_NODE 6 ( ARGUMENT 6 bn_ctx FIELD 7 bn_ctx LEAF_NODE 8 bn_ctx LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 encodedPoint != NULL EXPR 5 encodedPoint != NULL FIELD 6 encodedPoint LEAF_NODE 7 encodedPoint EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 OPENSSL_free ( encodedPoint ) ; EXPR 6 OPENSSL_free ( encodedPoint ) FUNCTION_CALL 7 OPENSSL_free ( encodedPoint ) CALLEE 8 OPENSSL_free LEAF_NODE 9 OPENSSL_free LEAF_NODE 8 ( ARGUMENT 8 encodedPoint FIELD 9 encodedPoint LEAF_NODE 10 encodedPoint LEAF_NODE 8 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 clnt_ecdh != NULL EXPR 5 clnt_ecdh != NULL FIELD 6 clnt_ecdh LEAF_NODE 7 clnt_ecdh EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 EC_KEY_free ( clnt_ecdh ) ; EXPR 6 EC_KEY_free ( clnt_ecdh ) FUNCTION_CALL 7 EC_KEY_free ( clnt_ecdh ) CALLEE 8 EC_KEY_free LEAF_NODE 9 EC_KEY_free LEAF_NODE 8 ( ARGUMENT 8 clnt_ecdh FIELD 9 clnt_ecdh LEAF_NODE 10 clnt_ecdh LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 3 EVP_PKEY_free ( srvr_pub_pkey ) ; EXPR 4 EVP_PKEY_free ( srvr_pub_pkey ) FUNCTION_CALL 5 EVP_PKEY_free ( srvr_pub_pkey ) CALLEE 6 EVP_PKEY_free LEAF_NODE 7 EVP_PKEY_free LEAF_NODE 6 ( ARGUMENT 6 srvr_pub_pkey FIELD 7 srvr_pub_pkey LEAF_NODE 8 srvr_pub_pkey LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return ( - 1 ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ( - 1 ) EXPR 5 ( - 1 ) LEAF_NODE 6 ( UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 66, "project": "openssl_ast_vul_function_test_32", "target": 1}
{"func": "SIMPLE_DECL 1 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } ; CLASS_DEF 2 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } CLASS_DEF 3 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } LEAF_NODE 4 struct CLASS_NAME 4 async_ctrs LEAF_NODE 5 async_ctrs LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned int rctr ; unsigned int wctr ; SIMPLE_DECL 5 unsigned int rctr ; VAR_DECL 6 unsigned int rctr TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rctr LEAF_NODE 8 rctr LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int wctr ; VAR_DECL 6 unsigned int wctr TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 wctr LEAF_NODE 8 wctr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_job_st ASYNC_JOB ; VAR_DECL 2 struct async_job_st ASYNC_JOB TYPE 3 struct async_job_st TYPE_NAME 4 struct async_job_st LEAF_NODE 5 struct LEAF_NODE 5 async_job_st NAME 3 ASYNC_JOB LEAF_NODE 4 ASYNC_JOB LEAF_NODE 2 ; SIMPLE_DECL 1 ASYNC_JOB * currjob ; currjob = NULL ; VAR_DECL 2 ASYNC_JOB * currjob ; currjob = NULL TYPE 3 ASYNC_JOB * TYPE_NAME 4 ASYNC_JOB LEAF_NODE 5 ASYNC_JOB POINTER 4 * LEAF_NODE 5 * NAME 3 currjob LEAF_NODE 4 currjob LEAF_NODE 3 ; INIT 3 currjob = NULL ASSIGN 4 currjob = NULL LVAL 5 currjob NAME 6 currjob LEAF_NODE 7 currjob ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_wait_ctx_st BASE_CLASSES { struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; } ; CLASS_DEF 2 struct async_wait_ctx_st BASE_CLASSES { struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; } CLASS_DEF 3 struct async_wait_ctx_st BASE_CLASSES { struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; } LEAF_NODE 4 struct CLASS_NAME 4 async_wait_ctx_st LEAF_NODE 5 async_wait_ctx_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; SIMPLE_DECL 5 struct fd_lookup_st * fds ; VAR_DECL 6 struct fd_lookup_st * fds TYPE 7 struct fd_lookup_st * TYPE_NAME 8 struct fd_lookup_st LEAF_NODE 9 struct LEAF_NODE 9 fd_lookup_st POINTER 8 * LEAF_NODE 9 * NAME 7 fds LEAF_NODE 8 fds LEAF_NODE 6 ; SIMPLE_DECL 5 size_t numadd ; VAR_DECL 6 size_t numadd TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 numadd LEAF_NODE 8 numadd LEAF_NODE 6 ; SIMPLE_DECL 5 size_t numdel ; VAR_DECL 6 size_t numdel TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 numdel LEAF_NODE 8 numdel LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 save_current LEAF_NODE 3 save_current PARAMETER_LIST 2 ( void * args ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * args TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 args LEAF_NODE 5 args LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 currjob = ASYNC_get_current_job ( ) ; EXPR 4 currjob = ASYNC_get_current_job ( ) ASSIGN 5 currjob = ASYNC_get_current_job ( ) LVAL 6 currjob FIELD 7 currjob LEAF_NODE 8 currjob ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ASYNC_get_current_job ( ) FUNCTION_CALL 7 ASYNC_get_current_job ( ) CALLEE 8 ASYNC_get_current_job LEAF_NODE 9 ASYNC_get_current_job LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ASYNC_pause_job ( ) ; EXPR 4 ASYNC_pause_job ( ) FUNCTION_CALL 5 ASYNC_pause_job ( ) CALLEE 6 ASYNC_pause_job LEAF_NODE 7 ASYNC_pause_job LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 } SIMPLE_DECL 1 struct async_wait_ctx_st ASYNC_WAIT_CTX ; VAR_DECL 2 struct async_wait_ctx_st ASYNC_WAIT_CTX TYPE 3 struct async_wait_ctx_st TYPE_NAME 4 struct async_wait_ctx_st LEAF_NODE 5 struct LEAF_NODE 5 async_wait_ctx_st NAME 3 ASYNC_WAIT_CTX LEAF_NODE 4 ASYNC_WAIT_CTX LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_ASYNC_get_current_job LEAF_NODE 3 test_ASYNC_get_current_job PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 ASYNC_JOB * job ; job = NULL ; VAR_DECL 4 ASYNC_JOB * job ; job = NULL TYPE 5 ASYNC_JOB * TYPE_NAME 6 ASYNC_JOB LEAF_NODE 7 ASYNC_JOB POINTER 6 * LEAF_NODE 7 * NAME 5 job LEAF_NODE 6 job LEAF_NODE 5 ; INIT 5 job = NULL ASSIGN 6 job = NULL LVAL 7 job NAME 8 job LEAF_NODE 9 job ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int funcret ; VAR_DECL 4 int funcret TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 funcret LEAF_NODE 6 funcret LEAF_NODE 4 ; SIMPLE_DECL 3 ASYNC_WAIT_CTX * waitctx ; waitctx = NULL ; VAR_DECL 4 ASYNC_WAIT_CTX * waitctx ; waitctx = NULL TYPE 5 ASYNC_WAIT_CTX * TYPE_NAME 6 ASYNC_WAIT_CTX LEAF_NODE 7 ASYNC_WAIT_CTX POINTER 6 * LEAF_NODE 7 * NAME 5 waitctx LEAF_NODE 6 waitctx LEAF_NODE 5 ; INIT 5 waitctx = NULL ASSIGN 6 waitctx = NULL LVAL 7 waitctx NAME 8 waitctx LEAF_NODE 9 waitctx ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 currjob = NULL ; EXPR 4 currjob = NULL ASSIGN 5 currjob = NULL LVAL 6 currjob FIELD 7 currjob LEAF_NODE 8 currjob ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ASYNC_init_thread ( 1 , 0 ) || ( waitctx = ASYNC_WAIT_CTX_new ( ) ) == NULL || ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_PAUSE || currjob != job || ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_FINISH || funcret != 1 EXPR 5 ! ASYNC_init_thread ( 1 , 0 ) || ( waitctx = ASYNC_WAIT_CTX_new ( ) ) == NULL || ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_PAUSE || currjob != job || ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_FINISH || funcret != 1 OR 6 ! ASYNC_init_thread ( 1 , 0 ) || ( waitctx = ASYNC_WAIT_CTX_new ( ) ) == NULL || ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_PAUSE || currjob != job || ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_FINISH || funcret != 1 EXPR 7 ! ASYNC_init_thread ( 1 , 0 ) UNARY_EXPR 8 ! ASYNC_init_thread ( 1 , 0 ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 ASYNC_init_thread ( 1 , 0 ) CALLEE 10 ASYNC_init_thread LEAF_NODE 11 ASYNC_init_thread LEAF_NODE 10 ( ARGUMENT 10 1 FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 , ARGUMENT 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ) LEAF_NODE 7 || EXPR 7 ( waitctx = ASYNC_WAIT_CTX_new ( ) ) == NULL || ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_PAUSE || currjob != job || ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_FINISH || funcret != 1 OR 8 ( waitctx = ASYNC_WAIT_CTX_new ( ) ) == NULL || ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_PAUSE || currjob != job || ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_FINISH || funcret != 1 EXPR 9 ( waitctx = ASYNC_WAIT_CTX_new ( ) ) == NULL LEAF_NODE 10 ( ASSIGN 10 waitctx = ASYNC_WAIT_CTX_new ( ) LVAL 11 waitctx FIELD 12 waitctx LEAF_NODE 13 waitctx ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ASYNC_WAIT_CTX_new ( ) FUNCTION_CALL 12 ASYNC_WAIT_CTX_new ( ) CALLEE 13 ASYNC_WAIT_CTX_new LEAF_NODE 14 ASYNC_WAIT_CTX_new LEAF_NODE 13 ( LEAF_NODE 13 ) LEAF_NODE 10 ) EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 || EXPR 9 ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_PAUSE || currjob != job || ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_FINISH || funcret != 1 OR 10 ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_PAUSE || currjob != job || ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_FINISH || funcret != 1 EXPR 11 ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_PAUSE FUNCTION_CALL 12 ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) CALLEE 13 ASYNC_start_job LEAF_NODE 14 ASYNC_start_job LEAF_NODE 13 ( ARGUMENT 13 & job UNARY_EXPR 14 & job UNARY_OPERATOR 15 & LEAF_NODE 16 & FIELD 15 job LEAF_NODE 16 job LEAF_NODE 13 , ARGUMENT 13 waitctx FIELD 14 waitctx LEAF_NODE 15 waitctx LEAF_NODE 13 , ARGUMENT 13 & funcret UNARY_EXPR 14 & funcret UNARY_OPERATOR 15 & LEAF_NODE 16 & FIELD 15 funcret LEAF_NODE 16 funcret LEAF_NODE 13 , ARGUMENT 13 save_current FIELD 14 save_current LEAF_NODE 15 save_current LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 , ARGUMENT 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 13 ) EQ_OPERATOR 12 != LEAF_NODE 13 != FIELD 12 ASYNC_PAUSE LEAF_NODE 13 ASYNC_PAUSE LEAF_NODE 11 || EXPR 11 currjob != job || ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_FINISH || funcret != 1 OR 12 currjob != job || ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_FINISH || funcret != 1 EXPR 13 currjob != job FIELD 14 currjob LEAF_NODE 15 currjob EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 job LEAF_NODE 15 job LEAF_NODE 13 || EXPR 13 ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_FINISH || funcret != 1 OR 14 ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_FINISH || funcret != 1 EXPR 15 ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) != ASYNC_FINISH FUNCTION_CALL 16 ASYNC_start_job ( & job , waitctx , & funcret , save_current , NULL , 0 ) CALLEE 17 ASYNC_start_job LEAF_NODE 18 ASYNC_start_job LEAF_NODE 17 ( ARGUMENT 17 & job UNARY_EXPR 18 & job UNARY_OPERATOR 19 & LEAF_NODE 20 & FIELD 19 job LEAF_NODE 20 job LEAF_NODE 17 , ARGUMENT 17 waitctx FIELD 18 waitctx LEAF_NODE 19 waitctx LEAF_NODE 17 , ARGUMENT 17 & funcret UNARY_EXPR 18 & funcret UNARY_OPERATOR 19 & LEAF_NODE 20 & FIELD 19 funcret LEAF_NODE 20 funcret LEAF_NODE 17 , ARGUMENT 17 save_current FIELD 18 save_current LEAF_NODE 19 save_current LEAF_NODE 17 , ARGUMENT 17 NULL FIELD 18 NULL LEAF_NODE 19 NULL LEAF_NODE 17 , ARGUMENT 17 0 FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 17 ) EQ_OPERATOR 16 != LEAF_NODE 17 != FIELD 16 ASYNC_FINISH LEAF_NODE 17 ASYNC_FINISH LEAF_NODE 15 || EXPR 15 funcret != 1 FIELD 16 funcret LEAF_NODE 17 funcret EQ_OPERATOR 16 != LEAF_NODE 17 != FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 fprintf ( stderr , \"test_ASYNC_get_current_job() failed\\n\" ) ; EXPR 7 fprintf ( stderr , \"test_ASYNC_get_current_job() failed\\n\" ) FUNCTION_CALL 8 fprintf ( stderr , \"test_ASYNC_get_current_job() failed\\n\" ) CALLEE 9 fprintf LEAF_NODE 10 fprintf LEAF_NODE 9 ( ARGUMENT 9 stderr FIELD 10 stderr LEAF_NODE 11 stderr LEAF_NODE 9 , ARGUMENT 9 \"test_ASYNC_get_current_job() failed\\n\" FIELD 10 \"test_ASYNC_get_current_job() failed\\n\" LEAF_NODE 11 \"test_ASYNC_get_current_job() failed\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ASYNC_WAIT_CTX_free ( waitctx ) ; EXPR 7 ASYNC_WAIT_CTX_free ( waitctx ) FUNCTION_CALL 8 ASYNC_WAIT_CTX_free ( waitctx ) CALLEE 9 ASYNC_WAIT_CTX_free LEAF_NODE 10 ASYNC_WAIT_CTX_free LEAF_NODE 9 ( ARGUMENT 9 waitctx FIELD 10 waitctx LEAF_NODE 11 waitctx LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ASYNC_cleanup_thread ( ) ; EXPR 7 ASYNC_cleanup_thread ( ) FUNCTION_CALL 8 ASYNC_cleanup_thread ( ) CALLEE 9 ASYNC_cleanup_thread LEAF_NODE 10 ASYNC_cleanup_thread LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ASYNC_WAIT_CTX_free ( waitctx ) ; EXPR 4 ASYNC_WAIT_CTX_free ( waitctx ) FUNCTION_CALL 5 ASYNC_WAIT_CTX_free ( waitctx ) CALLEE 6 ASYNC_WAIT_CTX_free LEAF_NODE 7 ASYNC_WAIT_CTX_free LEAF_NODE 6 ( ARGUMENT 6 waitctx FIELD 7 waitctx LEAF_NODE 8 waitctx LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ASYNC_cleanup_thread ( ) ; EXPR 4 ASYNC_cleanup_thread ( ) FUNCTION_CALL 5 ASYNC_cleanup_thread ( ) CALLEE 6 ASYNC_cleanup_thread LEAF_NODE 7 ASYNC_cleanup_thread LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 67, "project": "openssl_ast_normal_function_test_116", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 prefetch256 LEAF_NODE 3 prefetch256 PARAMETER_LIST 2 ( const void * table ) LEAF_NODE 3 ( PARAMETER_DECL 3 const void * table TYPE 4 const void * TYPE_NAME 5 const void LEAF_NODE 6 const LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 table LEAF_NODE 5 table LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 volatile unsigned long * t ; t = ( void * ) table , volatile unsigned long ret ; INIT_DECL_LIST 4 volatile unsigned long * t ; t = ( void * ) table , volatile unsigned long ret VAR_DECL 5 volatile unsigned long * t ; t = ( void * ) table TYPE 6 volatile unsigned long * TYPE_NAME 7 volatile unsigned long LEAF_NODE 8 volatile LEAF_NODE 8 unsigned LEAF_NODE 8 long POINTER 7 * LEAF_NODE 8 * NAME 6 t LEAF_NODE 7 t LEAF_NODE 6 ; INIT 6 t = ( void * ) table ASSIGN 7 t = ( void * ) table LVAL 8 t NAME 9 t LEAF_NODE 10 t ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( void * ) table LEAF_NODE 9 ( TYPE_NAME 9 void LEAF_NODE 10 void LEAF_NODE 9 * LEAF_NODE 9 ) FIELD 9 table LEAF_NODE 10 table LEAF_NODE 5 , VAR_DECL 5 volatile unsigned long ret TYPE 6 volatile unsigned long TYPE_NAME 7 volatile unsigned long LEAF_NODE 8 volatile LEAF_NODE 8 unsigned LEAF_NODE 8 long NAME 6 ret LEAF_NODE 7 ret LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned long sum ; VAR_DECL 4 unsigned long sum TYPE 5 unsigned long TYPE_NAME 6 unsigned long LEAF_NODE 7 unsigned LEAF_NODE 7 long NAME 5 sum LEAF_NODE 6 sum LEAF_NODE 4 ; SIMPLE_DECL 3 int i ; VAR_DECL 4 int i TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 sum = 0 , i = 0 ; EXPR 5 sum = 0 , i = 0 ASSIGN 6 sum = 0 LVAL 7 sum FIELD 8 sum LEAF_NODE 9 sum ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 , ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < 256 / sizeof ( t [ 0 ] ) EXPR 5 i < 256 / sizeof ( t [ 0 ] ) FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 256 LEAF_NODE 7 256 LEAF_NODE 6 / FUNCTION_CALL 6 sizeof ( t [ 0 ] ) CALLEE 7 sizeof LEAF_NODE 8 sizeof LEAF_NODE 7 ( ARGUMENT 7 t [ 0 ] FIELD 8 t [ 0 ] LEAF_NODE 9 t LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] LEAF_NODE 7 ) LEAF_NODE 4 ; FOR_EXPR 4 i += 32 / sizeof ( t [ 0 ] ) EXPR 5 i += 32 / sizeof ( t [ 0 ] ) ASSIGN 6 i += 32 / sizeof ( t [ 0 ] ) LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 += LEAF_NODE 8 += RVAL 7 32 / sizeof ( t [ 0 ] ) FIELD 8 32 LEAF_NODE 9 32 LEAF_NODE 8 / FUNCTION_CALL 8 sizeof ( t [ 0 ] ) CALLEE 9 sizeof LEAF_NODE 10 sizeof LEAF_NODE 9 ( ARGUMENT 9 t [ 0 ] FIELD 10 t [ 0 ] LEAF_NODE 11 t LEAF_NODE 11 [ EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ] LEAF_NODE 9 ) LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 sum ^= t [ i ] ; EXPR 6 sum ^= t [ i ] ASSIGN 7 sum ^= t [ i ] LVAL 8 sum FIELD 9 sum LEAF_NODE 10 sum ASSIGN_OP 8 ^= LEAF_NODE 9 ^= RVAL 8 t [ i ] FIELD 9 t [ i ] LEAF_NODE 10 t LEAF_NODE 10 [ EXPR 10 i FIELD 11 i LEAF_NODE 12 i LEAF_NODE 10 ] LEAF_NODE 6 ; EXPR_STATEMENT 3 ret = sum ; EXPR 4 ret = sum ASSIGN 5 ret = sum LVAL 6 ret FIELD 7 ret LEAF_NODE 8 ret ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 sum FIELD 7 sum LEAF_NODE 8 sum LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 68, "project": "openssl_ast_normal_function_test_86", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 asn1_d2i_read_bio LEAF_NODE 3 asn1_d2i_read_bio PARAMETER_LIST 2 ( BIO * in , BUF_MEM * * pb ) LEAF_NODE 3 ( PARAMETER_DECL 3 BIO * in TYPE 4 BIO * TYPE_NAME 5 BIO LEAF_NODE 6 BIO POINTER 5 * LEAF_NODE 6 * NAME 4 in LEAF_NODE 5 in LEAF_NODE 3 , PARAMETER_DECL 3 BUF_MEM * * pb TYPE 4 BUF_MEM * * TYPE_NAME 5 BUF_MEM LEAF_NODE 6 BUF_MEM POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 pb LEAF_NODE 5 pb LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 BUF_MEM * b ; VAR_DECL 4 BUF_MEM * b TYPE 5 BUF_MEM * TYPE_NAME 6 BUF_MEM LEAF_NODE 7 BUF_MEM POINTER 6 * LEAF_NODE 7 * NAME 5 b LEAF_NODE 6 b LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * p ; VAR_DECL 4 unsigned char * p TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 4 ; SIMPLE_DECL 3 int i ; VAR_DECL 4 int i TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; SIMPLE_DECL 3 ASN1_const_CTX c ; VAR_DECL 4 ASN1_const_CTX c TYPE 5 ASN1_const_CTX TYPE_NAME 6 ASN1_const_CTX LEAF_NODE 7 ASN1_const_CTX NAME 5 c LEAF_NODE 6 c LEAF_NODE 4 ; SIMPLE_DECL 3 size_t want ; want = HEADER_SIZE ; VAR_DECL 4 size_t want ; want = HEADER_SIZE TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 want LEAF_NODE 6 want LEAF_NODE 5 ; INIT 5 want = HEADER_SIZE ASSIGN 6 want = HEADER_SIZE LVAL 7 want NAME 8 want LEAF_NODE 9 want ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 HEADER_SIZE FIELD 8 HEADER_SIZE LEAF_NODE 9 HEADER_SIZE LEAF_NODE 4 ; SIMPLE_DECL 3 int eos ; eos = 0 ; VAR_DECL 4 int eos ; eos = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 eos LEAF_NODE 6 eos LEAF_NODE 5 ; INIT 5 eos = 0 ASSIGN 6 eos = 0 LVAL 7 eos NAME 8 eos LEAF_NODE 9 eos ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 size_t off ; off = 0 ; VAR_DECL 4 size_t off ; off = 0 TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 off LEAF_NODE 6 off LEAF_NODE 5 ; INIT 5 off = 0 ASSIGN 6 off = 0 LVAL 7 off NAME 8 off LEAF_NODE 9 off ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 size_t len ; len = 0 ; VAR_DECL 4 size_t len ; len = 0 TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 len LEAF_NODE 6 len LEAF_NODE 5 ; INIT 5 len = 0 ASSIGN 6 len = 0 LVAL 7 len NAME 8 len LEAF_NODE 9 len ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 b = BUF_MEM_new ( ) ; EXPR 4 b = BUF_MEM_new ( ) ASSIGN 5 b = BUF_MEM_new ( ) LVAL 6 b FIELD 7 b LEAF_NODE 8 b ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 BUF_MEM_new ( ) FUNCTION_CALL 7 BUF_MEM_new ( ) CALLEE 8 BUF_MEM_new LEAF_NODE 9 BUF_MEM_new LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 b == NULL EXPR 5 b == NULL FIELD 6 b LEAF_NODE 7 b EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ERR_R_MALLOC_FAILURE ) ; EXPR 7 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 8 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ERR_R_MALLOC_FAILURE ) CALLEE 9 ASN1err LEAF_NODE 10 ASN1err LEAF_NODE 9 ( ARGUMENT 9 ASN1_F_ASN1_D2I_READ_BIO FIELD 10 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 11 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 9 , ARGUMENT 9 ERR_R_MALLOC_FAILURE FIELD 10 ERR_R_MALLOC_FAILURE LEAF_NODE 11 ERR_R_MALLOC_FAILURE LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ERR_clear_error ( ) ; EXPR 4 ERR_clear_error ( ) FUNCTION_CALL 5 ERR_clear_error ( ) CALLEE 6 ERR_clear_error LEAF_NODE 7 ERR_clear_error LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; LEAF_NODE 4 CONDITION LEAF_NODE 4 ; LEAF_NODE 4 FOR_EXPR LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 want >= ( len - off ) EXPR 8 want >= ( len - off ) FIELD 9 want LEAF_NODE 10 want REL_OPERATOR 9 >= LEAF_NODE 10 >= LEAF_NODE 9 ( FIELD 9 len LEAF_NODE 10 len LEAF_NODE 9 - FIELD 9 off LEAF_NODE 10 off LEAF_NODE 9 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 want -= ( len - off ) ; EXPR 10 want -= ( len - off ) ASSIGN 11 want -= ( len - off ) LVAL 12 want FIELD 13 want LEAF_NODE 14 want ASSIGN_OP 12 -= LEAF_NODE 13 -= RVAL 12 ( len - off ) LEAF_NODE 13 ( FIELD 13 len LEAF_NODE 14 len LEAF_NODE 13 - FIELD 13 off LEAF_NODE 14 off LEAF_NODE 13 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 len + want < len || ! BUF_MEM_grow_clean ( b , len + want ) EXPR 11 len + want < len || ! BUF_MEM_grow_clean ( b , len + want ) OR 12 len + want < len || ! BUF_MEM_grow_clean ( b , len + want ) EXPR 13 len + want < len FIELD 14 len LEAF_NODE 15 len LEAF_NODE 14 + FIELD 14 want LEAF_NODE 15 want REL_OPERATOR 14 < LEAF_NODE 15 < FIELD 14 len LEAF_NODE 15 len LEAF_NODE 13 || EXPR 13 ! BUF_MEM_grow_clean ( b , len + want ) UNARY_EXPR 14 ! BUF_MEM_grow_clean ( b , len + want ) UNARY_OPERATOR 15 ! LEAF_NODE 16 ! FUNCTION_CALL 15 BUF_MEM_grow_clean ( b , len + want ) CALLEE 16 BUF_MEM_grow_clean LEAF_NODE 17 BUF_MEM_grow_clean LEAF_NODE 16 ( ARGUMENT 16 b FIELD 17 b LEAF_NODE 18 b LEAF_NODE 16 , ARGUMENT 16 len + want FIELD 17 len LEAF_NODE 18 len LEAF_NODE 17 + FIELD 17 want LEAF_NODE 18 want LEAF_NODE 16 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ERR_R_MALLOC_FAILURE ) ; EXPR 13 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 14 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ERR_R_MALLOC_FAILURE ) CALLEE 15 ASN1err LEAF_NODE 16 ASN1err LEAF_NODE 15 ( ARGUMENT 15 ASN1_F_ASN1_D2I_READ_BIO FIELD 16 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 17 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 15 , ARGUMENT 15 ERR_R_MALLOC_FAILURE FIELD 16 ERR_R_MALLOC_FAILURE LEAF_NODE 17 ERR_R_MALLOC_FAILURE LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 goto err ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 err LEAF_NODE 14 err LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 i = BIO_read ( in , & ( b -> data [ len ] ) , want ) ; EXPR 10 i = BIO_read ( in , & ( b -> data [ len ] ) , want ) ASSIGN 11 i = BIO_read ( in , & ( b -> data [ len ] ) , want ) LVAL 12 i FIELD 13 i LEAF_NODE 14 i ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 BIO_read ( in , & ( b -> data [ len ] ) , want ) FUNCTION_CALL 13 BIO_read ( in , & ( b -> data [ len ] ) , want ) CALLEE 14 BIO_read LEAF_NODE 15 BIO_read LEAF_NODE 14 ( ARGUMENT 14 in FIELD 15 in LEAF_NODE 16 in LEAF_NODE 14 , ARGUMENT 14 & ( b -> data [ len ] ) UNARY_EXPR 15 & ( b -> data [ len ] ) UNARY_OPERATOR 16 & LEAF_NODE 17 & LEAF_NODE 16 ( FIELD 16 b -> data [ len ] LEAF_NODE 17 b LEAF_NODE 17 -> LEAF_NODE 17 data LEAF_NODE 17 [ EXPR 17 len FIELD 18 len LEAF_NODE 19 len LEAF_NODE 17 ] LEAF_NODE 16 ) LEAF_NODE 14 , ARGUMENT 14 want FIELD 15 want LEAF_NODE 16 want LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ( i < 0 ) && ( ( len - off ) == 0 ) EXPR 11 ( i < 0 ) && ( ( len - off ) == 0 ) AND 12 ( i < 0 ) && ( ( len - off ) == 0 ) EXPR 13 ( i < 0 ) LEAF_NODE 14 ( FIELD 14 i LEAF_NODE 15 i REL_OPERATOR 14 < LEAF_NODE 15 < FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 14 ) LEAF_NODE 13 && EXPR 13 ( ( len - off ) == 0 ) LEAF_NODE 14 ( LEAF_NODE 14 ( FIELD 14 len LEAF_NODE 15 len LEAF_NODE 14 - FIELD 14 off LEAF_NODE 15 off LEAF_NODE 14 ) EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 14 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_NOT_ENOUGH_DATA ) ; EXPR 13 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_NOT_ENOUGH_DATA ) FUNCTION_CALL 14 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_NOT_ENOUGH_DATA ) CALLEE 15 ASN1err LEAF_NODE 16 ASN1err LEAF_NODE 15 ( ARGUMENT 15 ASN1_F_ASN1_D2I_READ_BIO FIELD 16 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 17 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 15 , ARGUMENT 15 ASN1_R_NOT_ENOUGH_DATA FIELD 16 ASN1_R_NOT_ENOUGH_DATA LEAF_NODE 17 ASN1_R_NOT_ENOUGH_DATA LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 goto err ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 err LEAF_NODE 14 err LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 i > 0 EXPR 11 i > 0 FIELD 12 i LEAF_NODE 13 i REL_OPERATOR 12 > LEAF_NODE 13 > FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 len + i < len EXPR 14 len + i < len FIELD 15 len LEAF_NODE 16 len LEAF_NODE 15 + FIELD 15 i LEAF_NODE 16 i REL_OPERATOR 15 < LEAF_NODE 16 < FIELD 15 len LEAF_NODE 16 len LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 EXPR_STATEMENT 15 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_TOO_LONG ) ; EXPR 16 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_TOO_LONG ) FUNCTION_CALL 17 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_TOO_LONG ) CALLEE 18 ASN1err LEAF_NODE 19 ASN1err LEAF_NODE 18 ( ARGUMENT 18 ASN1_F_ASN1_D2I_READ_BIO FIELD 19 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 20 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 18 , ARGUMENT 18 ASN1_R_TOO_LONG FIELD 19 ASN1_R_TOO_LONG LEAF_NODE 20 ASN1_R_TOO_LONG LEAF_NODE 18 ) LEAF_NODE 16 ; JUMP_STATEMENT 15 goto err ; KEYWORD 16 goto LEAF_NODE 17 goto DESTINATION 16 err LEAF_NODE 17 err LEAF_NODE 16 ; LEAF_NODE 14 } EXPR_STATEMENT 12 len += i ; EXPR 13 len += i ASSIGN 14 len += i LVAL 15 len FIELD 16 len LEAF_NODE 17 len ASSIGN_OP 15 += LEAF_NODE 16 += RVAL 15 i FIELD 16 i LEAF_NODE 17 i LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } EXPR_STATEMENT 6 p = ( unsigned char * ) & ( b -> data [ off ] ) ; EXPR 7 p = ( unsigned char * ) & ( b -> data [ off ] ) ASSIGN 8 p = ( unsigned char * ) & ( b -> data [ off ] ) LVAL 9 p FIELD 10 p LEAF_NODE 11 p ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( unsigned char * ) & ( b -> data [ off ] ) LEAF_NODE 10 ( TYPE_NAME 10 unsigned char LEAF_NODE 11 unsigned LEAF_NODE 11 char LEAF_NODE 10 * LEAF_NODE 10 ) UNARY_EXPR 10 & ( b -> data [ off ] ) UNARY_OPERATOR 11 & LEAF_NODE 12 & LEAF_NODE 11 ( FIELD 11 b -> data [ off ] LEAF_NODE 12 b LEAF_NODE 12 -> LEAF_NODE 12 data LEAF_NODE 12 [ EXPR 12 off FIELD 13 off LEAF_NODE 14 off LEAF_NODE 12 ] LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 c . p = p ; EXPR 7 c . p = p ASSIGN 8 c . p = p LVAL 9 c . p FIELD 10 c . p LEAF_NODE 11 c LEAF_NODE 11 . LEAF_NODE 11 p ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 7 ; EXPR_STATEMENT 6 c . inf = ASN1_get_object ( & ( c . p ) , & ( c . slen ) , & ( c . tag ) , & ( c . xclass ) , len - off ) ; EXPR 7 c . inf = ASN1_get_object ( & ( c . p ) , & ( c . slen ) , & ( c . tag ) , & ( c . xclass ) , len - off ) ASSIGN 8 c . inf = ASN1_get_object ( & ( c . p ) , & ( c . slen ) , & ( c . tag ) , & ( c . xclass ) , len - off ) LVAL 9 c . inf FIELD 10 c . inf LEAF_NODE 11 c LEAF_NODE 11 . LEAF_NODE 11 inf ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ASN1_get_object ( & ( c . p ) , & ( c . slen ) , & ( c . tag ) , & ( c . xclass ) , len - off ) FUNCTION_CALL 10 ASN1_get_object ( & ( c . p ) , & ( c . slen ) , & ( c . tag ) , & ( c . xclass ) , len - off ) CALLEE 11 ASN1_get_object LEAF_NODE 12 ASN1_get_object LEAF_NODE 11 ( ARGUMENT 11 & ( c . p ) UNARY_EXPR 12 & ( c . p ) UNARY_OPERATOR 13 & LEAF_NODE 14 & LEAF_NODE 13 ( FIELD 13 c . p LEAF_NODE 14 c LEAF_NODE 14 . LEAF_NODE 14 p LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 & ( c . slen ) UNARY_EXPR 12 & ( c . slen ) UNARY_OPERATOR 13 & LEAF_NODE 14 & LEAF_NODE 13 ( FIELD 13 c . slen LEAF_NODE 14 c LEAF_NODE 14 . LEAF_NODE 14 slen LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 & ( c . tag ) UNARY_EXPR 12 & ( c . tag ) UNARY_OPERATOR 13 & LEAF_NODE 14 & LEAF_NODE 13 ( FIELD 13 c . tag LEAF_NODE 14 c LEAF_NODE 14 . LEAF_NODE 14 tag LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 & ( c . xclass ) UNARY_EXPR 12 & ( c . xclass ) UNARY_OPERATOR 13 & LEAF_NODE 14 & LEAF_NODE 13 ( FIELD 13 c . xclass LEAF_NODE 14 c LEAF_NODE 14 . LEAF_NODE 14 xclass LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 len - off FIELD 12 len LEAF_NODE 13 len LEAF_NODE 12 - FIELD 12 off LEAF_NODE 13 off LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 c . inf & 0x80 EXPR 8 c . inf & 0x80 FIELD 9 c . inf LEAF_NODE 10 c LEAF_NODE 10 . LEAF_NODE 10 inf LEAF_NODE 9 & FIELD 9 0x80 LEAF_NODE 10 0x80 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SIMPLE_DECL 9 unsigned long e ; VAR_DECL 10 unsigned long e TYPE 11 unsigned long TYPE_NAME 12 unsigned long LEAF_NODE 13 unsigned LEAF_NODE 13 long NAME 11 e LEAF_NODE 12 e LEAF_NODE 10 ; EXPR_STATEMENT 9 e = ERR_GET_REASON ( ERR_peek_error ( ) ) ; EXPR 10 e = ERR_GET_REASON ( ERR_peek_error ( ) ) ASSIGN 11 e = ERR_GET_REASON ( ERR_peek_error ( ) ) LVAL 12 e FIELD 13 e LEAF_NODE 14 e ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ERR_GET_REASON ( ERR_peek_error ( ) ) FUNCTION_CALL 13 ERR_GET_REASON ( ERR_peek_error ( ) ) CALLEE 14 ERR_GET_REASON LEAF_NODE 15 ERR_GET_REASON LEAF_NODE 14 ( ARGUMENT 14 ERR_peek_error ( ) FUNCTION_CALL 15 ERR_peek_error ( ) CALLEE 16 ERR_peek_error LEAF_NODE 17 ERR_peek_error LEAF_NODE 16 ( LEAF_NODE 16 ) LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 e != ASN1_R_TOO_LONG EXPR 11 e != ASN1_R_TOO_LONG FIELD 12 e LEAF_NODE 13 e EQ_OPERATOR 12 != LEAF_NODE 13 != FIELD 12 ASN1_R_TOO_LONG LEAF_NODE 13 ASN1_R_TOO_LONG LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 goto err ; KEYWORD 12 goto LEAF_NODE 13 goto DESTINATION 12 err LEAF_NODE 13 err LEAF_NODE 12 ; SELECTION 9 KEYWORD 10 else LEAF_NODE 11 else STATEMENTS 10 EXPR_STATEMENT 11 ERR_clear_error ( ) ; EXPR 12 ERR_clear_error ( ) FUNCTION_CALL 13 ERR_clear_error ( ) CALLEE 14 ERR_clear_error LEAF_NODE 15 ERR_clear_error LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 12 ; LEAF_NODE 8 } EXPR_STATEMENT 6 i = c . p - p ; EXPR 7 i = c . p - p ASSIGN 8 i = c . p - p LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 c . p - p FIELD 10 c . p LEAF_NODE 11 c LEAF_NODE 11 . LEAF_NODE 11 p LEAF_NODE 10 - FIELD 10 p LEAF_NODE 11 p LEAF_NODE 7 ; EXPR_STATEMENT 6 off += i ; EXPR 7 off += i ASSIGN 8 off += i LVAL 9 off FIELD 10 off LEAF_NODE 11 off ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 c . inf & 1 EXPR 8 c . inf & 1 FIELD 9 c . inf LEAF_NODE 10 c LEAF_NODE 10 . LEAF_NODE 10 inf LEAF_NODE 9 & FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 eos ++ ; EXPR 10 eos ++ FIELD 11 eos ++ LEAF_NODE 12 eos LEAF_NODE 12 ++ LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 eos < 0 EXPR 11 eos < 0 FIELD 12 eos LEAF_NODE 13 eos REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_HEADER_TOO_LONG ) ; EXPR 13 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_HEADER_TOO_LONG ) FUNCTION_CALL 14 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_HEADER_TOO_LONG ) CALLEE 15 ASN1err LEAF_NODE 16 ASN1err LEAF_NODE 15 ( ARGUMENT 15 ASN1_F_ASN1_D2I_READ_BIO FIELD 16 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 17 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 15 , ARGUMENT 15 ASN1_R_HEADER_TOO_LONG FIELD 16 ASN1_R_HEADER_TOO_LONG LEAF_NODE 17 ASN1_R_HEADER_TOO_LONG LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 goto err ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 err LEAF_NODE 14 err LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 want = HEADER_SIZE ; EXPR 10 want = HEADER_SIZE ASSIGN 11 want = HEADER_SIZE LVAL 12 want FIELD 13 want LEAF_NODE 14 want ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 HEADER_SIZE FIELD 13 HEADER_SIZE LEAF_NODE 14 HEADER_SIZE LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 eos && ( c . slen == 0 ) && ( c . tag == V_ASN1_EOC ) EXPR 10 eos && ( c . slen == 0 ) && ( c . tag == V_ASN1_EOC ) AND 11 eos && ( c . slen == 0 ) && ( c . tag == V_ASN1_EOC ) EXPR 12 eos FIELD 13 eos LEAF_NODE 14 eos LEAF_NODE 12 && EXPR 12 ( c . slen == 0 ) && ( c . tag == V_ASN1_EOC ) AND 13 ( c . slen == 0 ) && ( c . tag == V_ASN1_EOC ) EXPR 14 ( c . slen == 0 ) LEAF_NODE 15 ( FIELD 15 c . slen LEAF_NODE 16 c LEAF_NODE 16 . LEAF_NODE 16 slen EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 15 ) LEAF_NODE 14 && EXPR 14 ( c . tag == V_ASN1_EOC ) LEAF_NODE 15 ( FIELD 15 c . tag LEAF_NODE 16 c LEAF_NODE 16 . LEAF_NODE 16 tag EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 V_ASN1_EOC LEAF_NODE 16 V_ASN1_EOC LEAF_NODE 15 ) LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 eos -- ; EXPR 12 eos -- FIELD 13 eos -- LEAF_NODE 14 eos LEAF_NODE 14 -- LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 eos <= 0 EXPR 13 eos <= 0 FIELD 14 eos LEAF_NODE 15 eos REL_OPERATOR 14 <= LEAF_NODE 15 <= FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 ) STATEMENTS 12 JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 else LEAF_NODE 13 else STATEMENTS 12 EXPR_STATEMENT 13 want = HEADER_SIZE ; EXPR 14 want = HEADER_SIZE ASSIGN 15 want = HEADER_SIZE LVAL 16 want FIELD 17 want LEAF_NODE 18 want ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 HEADER_SIZE FIELD 17 HEADER_SIZE LEAF_NODE 18 HEADER_SIZE LEAF_NODE 14 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 want = c . slen ; EXPR 10 want = c . slen ASSIGN 11 want = c . slen LVAL 12 want FIELD 13 want LEAF_NODE 14 want ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 c . slen FIELD 13 c . slen LEAF_NODE 14 c LEAF_NODE 14 . LEAF_NODE 14 slen LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 want > ( len - off ) EXPR 11 want > ( len - off ) FIELD 12 want LEAF_NODE 13 want REL_OPERATOR 12 > LEAF_NODE 13 > LEAF_NODE 12 ( FIELD 12 len LEAF_NODE 13 len LEAF_NODE 12 - FIELD 12 off LEAF_NODE 13 off LEAF_NODE 12 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 want -= ( len - off ) ; EXPR 13 want -= ( len - off ) ASSIGN 14 want -= ( len - off ) LVAL 15 want FIELD 16 want LEAF_NODE 17 want ASSIGN_OP 15 -= LEAF_NODE 16 -= RVAL 15 ( len - off ) LEAF_NODE 16 ( FIELD 16 len LEAF_NODE 17 len LEAF_NODE 16 - FIELD 16 off LEAF_NODE 17 off LEAF_NODE 16 ) LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 want > INT_MAX || len + want < len EXPR 14 want > INT_MAX || len + want < len OR 15 want > INT_MAX || len + want < len EXPR 16 want > INT_MAX FIELD 17 want LEAF_NODE 18 want REL_OPERATOR 17 > LEAF_NODE 18 > FIELD 17 INT_MAX LEAF_NODE 18 INT_MAX LEAF_NODE 16 || EXPR 16 len + want < len FIELD 17 len LEAF_NODE 18 len LEAF_NODE 17 + FIELD 17 want LEAF_NODE 18 want REL_OPERATOR 17 < LEAF_NODE 18 < FIELD 17 len LEAF_NODE 18 len LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 EXPR_STATEMENT 15 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_TOO_LONG ) ; EXPR 16 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_TOO_LONG ) FUNCTION_CALL 17 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_TOO_LONG ) CALLEE 18 ASN1err LEAF_NODE 19 ASN1err LEAF_NODE 18 ( ARGUMENT 18 ASN1_F_ASN1_D2I_READ_BIO FIELD 19 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 20 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 18 , ARGUMENT 18 ASN1_R_TOO_LONG FIELD 19 ASN1_R_TOO_LONG LEAF_NODE 20 ASN1_R_TOO_LONG LEAF_NODE 18 ) LEAF_NODE 16 ; JUMP_STATEMENT 15 goto err ; KEYWORD 16 goto LEAF_NODE 17 goto DESTINATION 16 err LEAF_NODE 17 err LEAF_NODE 16 ; LEAF_NODE 14 } SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 ! BUF_MEM_grow_clean ( b , len + want ) EXPR 14 ! BUF_MEM_grow_clean ( b , len + want ) UNARY_EXPR 15 ! BUF_MEM_grow_clean ( b , len + want ) UNARY_OPERATOR 16 ! LEAF_NODE 17 ! FUNCTION_CALL 16 BUF_MEM_grow_clean ( b , len + want ) CALLEE 17 BUF_MEM_grow_clean LEAF_NODE 18 BUF_MEM_grow_clean LEAF_NODE 17 ( ARGUMENT 17 b FIELD 18 b LEAF_NODE 19 b LEAF_NODE 17 , ARGUMENT 17 len + want FIELD 18 len LEAF_NODE 19 len LEAF_NODE 18 + FIELD 18 want LEAF_NODE 19 want LEAF_NODE 17 ) LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 EXPR_STATEMENT 15 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ERR_R_MALLOC_FAILURE ) ; EXPR 16 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 17 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ERR_R_MALLOC_FAILURE ) CALLEE 18 ASN1err LEAF_NODE 19 ASN1err LEAF_NODE 18 ( ARGUMENT 18 ASN1_F_ASN1_D2I_READ_BIO FIELD 19 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 20 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 18 , ARGUMENT 18 ERR_R_MALLOC_FAILURE FIELD 19 ERR_R_MALLOC_FAILURE LEAF_NODE 20 ERR_R_MALLOC_FAILURE LEAF_NODE 18 ) LEAF_NODE 16 ; JUMP_STATEMENT 15 goto err ; KEYWORD 16 goto LEAF_NODE 17 goto DESTINATION 16 err LEAF_NODE 17 err LEAF_NODE 16 ; LEAF_NODE 14 } ITERATION 12 KEYWORD 13 while LEAF_NODE 14 while LEAF_NODE 13 ( CONDITION 13 want > 0 EXPR 14 want > 0 FIELD 15 want LEAF_NODE 16 want REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 EXPR_STATEMENT 15 i = BIO_read ( in , & ( b -> data [ len ] ) , want ) ; EXPR 16 i = BIO_read ( in , & ( b -> data [ len ] ) , want ) ASSIGN 17 i = BIO_read ( in , & ( b -> data [ len ] ) , want ) LVAL 18 i FIELD 19 i LEAF_NODE 20 i ASSIGN_OP 18 = LEAF_NODE 19 = RVAL 18 BIO_read ( in , & ( b -> data [ len ] ) , want ) FUNCTION_CALL 19 BIO_read ( in , & ( b -> data [ len ] ) , want ) CALLEE 20 BIO_read LEAF_NODE 21 BIO_read LEAF_NODE 20 ( ARGUMENT 20 in FIELD 21 in LEAF_NODE 22 in LEAF_NODE 20 , ARGUMENT 20 & ( b -> data [ len ] ) UNARY_EXPR 21 & ( b -> data [ len ] ) UNARY_OPERATOR 22 & LEAF_NODE 23 & LEAF_NODE 22 ( FIELD 22 b -> data [ len ] LEAF_NODE 23 b LEAF_NODE 23 -> LEAF_NODE 23 data LEAF_NODE 23 [ EXPR 23 len FIELD 24 len LEAF_NODE 25 len LEAF_NODE 23 ] LEAF_NODE 22 ) LEAF_NODE 20 , ARGUMENT 20 want FIELD 21 want LEAF_NODE 22 want LEAF_NODE 20 ) LEAF_NODE 16 ; SELECTION 15 KEYWORD 16 if LEAF_NODE 17 if LEAF_NODE 16 ( CONDITION 16 i <= 0 EXPR 17 i <= 0 FIELD 18 i LEAF_NODE 19 i REL_OPERATOR 18 <= LEAF_NODE 19 <= FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 16 ) STATEMENTS 16 LEAF_NODE 17 { STATEMENTS 17 EXPR_STATEMENT 18 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_NOT_ENOUGH_DATA ) ; EXPR 19 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_NOT_ENOUGH_DATA ) FUNCTION_CALL 20 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_NOT_ENOUGH_DATA ) CALLEE 21 ASN1err LEAF_NODE 22 ASN1err LEAF_NODE 21 ( ARGUMENT 21 ASN1_F_ASN1_D2I_READ_BIO FIELD 22 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 23 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 21 , ARGUMENT 21 ASN1_R_NOT_ENOUGH_DATA FIELD 22 ASN1_R_NOT_ENOUGH_DATA LEAF_NODE 23 ASN1_R_NOT_ENOUGH_DATA LEAF_NODE 21 ) LEAF_NODE 19 ; JUMP_STATEMENT 18 goto err ; KEYWORD 19 goto LEAF_NODE 20 goto DESTINATION 19 err LEAF_NODE 20 err LEAF_NODE 19 ; LEAF_NODE 17 } EXPR_STATEMENT 15 len += i ; EXPR 16 len += i ASSIGN 17 len += i LVAL 18 len FIELD 19 len LEAF_NODE 20 len ASSIGN_OP 18 += LEAF_NODE 19 += RVAL 18 i FIELD 19 i LEAF_NODE 20 i LEAF_NODE 16 ; EXPR_STATEMENT 15 want -= i ; EXPR 16 want -= i ASSIGN 17 want -= i LVAL 18 want FIELD 19 want LEAF_NODE 20 want ASSIGN_OP 18 -= LEAF_NODE 19 -= RVAL 18 i FIELD 19 i LEAF_NODE 20 i LEAF_NODE 16 ; LEAF_NODE 14 } LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 off + c . slen < off EXPR 11 off + c . slen < off FIELD 12 off LEAF_NODE 13 off LEAF_NODE 12 + FIELD 12 c . slen LEAF_NODE 13 c LEAF_NODE 13 . LEAF_NODE 13 slen REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 off LEAF_NODE 13 off LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_TOO_LONG ) ; EXPR 13 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_TOO_LONG ) FUNCTION_CALL 14 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_TOO_LONG ) CALLEE 15 ASN1err LEAF_NODE 16 ASN1err LEAF_NODE 15 ( ARGUMENT 15 ASN1_F_ASN1_D2I_READ_BIO FIELD 16 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 17 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 15 , ARGUMENT 15 ASN1_R_TOO_LONG FIELD 16 ASN1_R_TOO_LONG LEAF_NODE 17 ASN1_R_TOO_LONG LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 goto err ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 err LEAF_NODE 14 err LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 off += c . slen ; EXPR 10 off += c . slen ASSIGN 11 off += c . slen LVAL 12 off FIELD 13 off LEAF_NODE 14 off ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 c . slen FIELD 13 c . slen LEAF_NODE 14 c LEAF_NODE 14 . LEAF_NODE 14 slen LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 eos <= 0 EXPR 11 eos <= 0 FIELD 12 eos LEAF_NODE 13 eos REL_OPERATOR 12 <= LEAF_NODE 13 <= FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 else LEAF_NODE 11 else STATEMENTS 10 EXPR_STATEMENT 11 want = HEADER_SIZE ; EXPR 12 want = HEADER_SIZE ASSIGN 13 want = HEADER_SIZE LVAL 14 want FIELD 15 want LEAF_NODE 16 want ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 HEADER_SIZE FIELD 15 HEADER_SIZE LEAF_NODE 16 HEADER_SIZE LEAF_NODE 12 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 off > INT_MAX EXPR 5 off > INT_MAX FIELD 6 off LEAF_NODE 7 off REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 INT_MAX LEAF_NODE 7 INT_MAX LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_TOO_LONG ) ; EXPR 7 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_TOO_LONG ) FUNCTION_CALL 8 ASN1err ( ASN1_F_ASN1_D2I_READ_BIO , ASN1_R_TOO_LONG ) CALLEE 9 ASN1err LEAF_NODE 10 ASN1err LEAF_NODE 9 ( ARGUMENT 9 ASN1_F_ASN1_D2I_READ_BIO FIELD 10 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 11 ASN1_F_ASN1_D2I_READ_BIO LEAF_NODE 9 , ARGUMENT 9 ASN1_R_TOO_LONG FIELD 10 ASN1_R_TOO_LONG LEAF_NODE 11 ASN1_R_TOO_LONG LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 * pb = b ; EXPR 4 * pb = b ASSIGN 5 * pb = b LVAL 6 * pb UNARY_EXPR 7 * pb UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 pb LEAF_NODE 9 pb ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 b FIELD 7 b LEAF_NODE 8 b LEAF_NODE 4 ; JUMP_STATEMENT 3 return off ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 off EXPR 5 off FIELD 6 off LEAF_NODE 7 off LEAF_NODE 4 ; LABEL 3 err : LEAF_NODE 4 err LEAF_NODE 4 : SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 b != NULL EXPR 5 b != NULL FIELD 6 b LEAF_NODE 7 b EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 BUF_MEM_free ( b ) ; EXPR 6 BUF_MEM_free ( b ) FUNCTION_CALL 7 BUF_MEM_free ( b ) CALLEE 8 BUF_MEM_free LEAF_NODE 9 BUF_MEM_free LEAF_NODE 8 ( ARGUMENT 8 b FIELD 9 b LEAF_NODE 10 b LEAF_NODE 8 ) LEAF_NODE 6 ; JUMP_STATEMENT 3 return - 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 - 1 EXPR 5 - 1 UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 69, "project": "openssl_ast_vul_function_test_13", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASYNC_init_thread LEAF_NODE 3 ASYNC_init_thread PARAMETER_LIST 2 ( size_t max_size , size_t init_size ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t max_size TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 max_size LEAF_NODE 5 max_size LEAF_NODE 3 , PARAMETER_DECL 3 size_t init_size TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 init_size LEAF_NODE 5 init_size LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 async_pool * pool ; VAR_DECL 4 async_pool * pool TYPE 5 async_pool * TYPE_NAME 6 async_pool LEAF_NODE 7 async_pool POINTER 6 * LEAF_NODE 7 * NAME 5 pool LEAF_NODE 6 pool LEAF_NODE 4 ; SIMPLE_DECL 3 size_t curr_size ; curr_size = 0 ; VAR_DECL 4 size_t curr_size ; curr_size = 0 TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 curr_size LEAF_NODE 6 curr_size LEAF_NODE 5 ; INIT 5 curr_size = 0 ASSIGN 6 curr_size = 0 LVAL 7 curr_size NAME 8 curr_size LEAF_NODE 9 curr_size ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 init_size > max_size EXPR 5 init_size > max_size FIELD 6 init_size LEAF_NODE 7 init_size REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 max_size LEAF_NODE 7 max_size LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASYNCerr ( ASYNC_F_ASYNC_INIT_THREAD , ASYNC_R_INVALID_POOL_SIZE ) ; EXPR 7 ASYNCerr ( ASYNC_F_ASYNC_INIT_THREAD , ASYNC_R_INVALID_POOL_SIZE ) FUNCTION_CALL 8 ASYNCerr ( ASYNC_F_ASYNC_INIT_THREAD , ASYNC_R_INVALID_POOL_SIZE ) CALLEE 9 ASYNCerr LEAF_NODE 10 ASYNCerr LEAF_NODE 9 ( ARGUMENT 9 ASYNC_F_ASYNC_INIT_THREAD FIELD 10 ASYNC_F_ASYNC_INIT_THREAD LEAF_NODE 11 ASYNC_F_ASYNC_INIT_THREAD LEAF_NODE 9 , ARGUMENT 9 ASYNC_R_INVALID_POOL_SIZE FIELD 10 ASYNC_R_INVALID_POOL_SIZE LEAF_NODE 11 ASYNC_R_INVALID_POOL_SIZE LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! OPENSSL_init_crypto ( OPENSSL_INIT_ASYNC , NULL ) EXPR 5 ! OPENSSL_init_crypto ( OPENSSL_INIT_ASYNC , NULL ) UNARY_EXPR 6 ! OPENSSL_init_crypto ( OPENSSL_INIT_ASYNC , NULL ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 OPENSSL_init_crypto ( OPENSSL_INIT_ASYNC , NULL ) CALLEE 8 OPENSSL_init_crypto LEAF_NODE 9 OPENSSL_init_crypto LEAF_NODE 8 ( ARGUMENT 8 OPENSSL_INIT_ASYNC FIELD 9 OPENSSL_INIT_ASYNC LEAF_NODE 10 OPENSSL_INIT_ASYNC LEAF_NODE 8 , ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ossl_init_thread_start ( OPENSSL_INIT_THREAD_ASYNC ) EXPR 5 ! ossl_init_thread_start ( OPENSSL_INIT_THREAD_ASYNC ) UNARY_EXPR 6 ! ossl_init_thread_start ( OPENSSL_INIT_THREAD_ASYNC ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 ossl_init_thread_start ( OPENSSL_INIT_THREAD_ASYNC ) CALLEE 8 ossl_init_thread_start LEAF_NODE 9 ossl_init_thread_start LEAF_NODE 8 ( ARGUMENT 8 OPENSSL_INIT_THREAD_ASYNC FIELD 9 OPENSSL_INIT_THREAD_ASYNC LEAF_NODE 10 OPENSSL_INIT_THREAD_ASYNC LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; EXPR_STATEMENT 3 pool = OPENSSL_zalloc ( sizeof ( * pool ) ) ; EXPR 4 pool = OPENSSL_zalloc ( sizeof ( * pool ) ) ASSIGN 5 pool = OPENSSL_zalloc ( sizeof ( * pool ) ) LVAL 6 pool FIELD 7 pool LEAF_NODE 8 pool ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 OPENSSL_zalloc ( sizeof ( * pool ) ) FUNCTION_CALL 7 OPENSSL_zalloc ( sizeof ( * pool ) ) CALLEE 8 OPENSSL_zalloc LEAF_NODE 9 OPENSSL_zalloc LEAF_NODE 8 ( ARGUMENT 8 sizeof ( * pool ) FUNCTION_CALL 9 sizeof ( * pool ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 * pool UNARY_EXPR 11 * pool UNARY_OPERATOR 12 * LEAF_NODE 13 * FIELD 12 pool LEAF_NODE 13 pool LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 pool == NULL EXPR 5 pool == NULL FIELD 6 pool LEAF_NODE 7 pool EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASYNCerr ( ASYNC_F_ASYNC_INIT_THREAD , ERR_R_MALLOC_FAILURE ) ; EXPR 7 ASYNCerr ( ASYNC_F_ASYNC_INIT_THREAD , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 8 ASYNCerr ( ASYNC_F_ASYNC_INIT_THREAD , ERR_R_MALLOC_FAILURE ) CALLEE 9 ASYNCerr LEAF_NODE 10 ASYNCerr LEAF_NODE 9 ( ARGUMENT 9 ASYNC_F_ASYNC_INIT_THREAD FIELD 10 ASYNC_F_ASYNC_INIT_THREAD LEAF_NODE 11 ASYNC_F_ASYNC_INIT_THREAD LEAF_NODE 9 , ARGUMENT 9 ERR_R_MALLOC_FAILURE FIELD 10 ERR_R_MALLOC_FAILURE LEAF_NODE 11 ERR_R_MALLOC_FAILURE LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 pool -> jobs = sk_ASYNC_JOB_new_reserve ( NULL , init_size ) ; EXPR 4 pool -> jobs = sk_ASYNC_JOB_new_reserve ( NULL , init_size ) ASSIGN 5 pool -> jobs = sk_ASYNC_JOB_new_reserve ( NULL , init_size ) LVAL 6 pool -> jobs FIELD 7 pool -> jobs LEAF_NODE 8 pool LEAF_NODE 8 -> LEAF_NODE 8 jobs ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 sk_ASYNC_JOB_new_reserve ( NULL , init_size ) FUNCTION_CALL 7 sk_ASYNC_JOB_new_reserve ( NULL , init_size ) CALLEE 8 sk_ASYNC_JOB_new_reserve LEAF_NODE 9 sk_ASYNC_JOB_new_reserve LEAF_NODE 8 ( ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 , ARGUMENT 8 init_size FIELD 9 init_size LEAF_NODE 10 init_size LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 pool -> jobs == NULL EXPR 5 pool -> jobs == NULL FIELD 6 pool -> jobs LEAF_NODE 7 pool LEAF_NODE 7 -> LEAF_NODE 7 jobs EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASYNCerr ( ASYNC_F_ASYNC_INIT_THREAD , ERR_R_MALLOC_FAILURE ) ; EXPR 7 ASYNCerr ( ASYNC_F_ASYNC_INIT_THREAD , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 8 ASYNCerr ( ASYNC_F_ASYNC_INIT_THREAD , ERR_R_MALLOC_FAILURE ) CALLEE 9 ASYNCerr LEAF_NODE 10 ASYNCerr LEAF_NODE 9 ( ARGUMENT 9 ASYNC_F_ASYNC_INIT_THREAD FIELD 10 ASYNC_F_ASYNC_INIT_THREAD LEAF_NODE 11 ASYNC_F_ASYNC_INIT_THREAD LEAF_NODE 9 , ARGUMENT 9 ERR_R_MALLOC_FAILURE FIELD 10 ERR_R_MALLOC_FAILURE LEAF_NODE 11 ERR_R_MALLOC_FAILURE LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_free ( pool ) ; EXPR 7 OPENSSL_free ( pool ) FUNCTION_CALL 8 OPENSSL_free ( pool ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 pool FIELD 10 pool LEAF_NODE 11 pool LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 pool -> max_size = max_size ; EXPR 4 pool -> max_size = max_size ASSIGN 5 pool -> max_size = max_size LVAL 6 pool -> max_size FIELD 7 pool -> max_size LEAF_NODE 8 pool LEAF_NODE 8 -> LEAF_NODE 8 max_size ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 max_size FIELD 7 max_size LEAF_NODE 8 max_size LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 init_size -- EXPR 5 init_size -- FIELD 6 init_size -- LEAF_NODE 7 init_size LEAF_NODE 7 -- LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 ASYNC_JOB * job ; VAR_DECL 7 ASYNC_JOB * job TYPE 8 ASYNC_JOB * TYPE_NAME 9 ASYNC_JOB LEAF_NODE 10 ASYNC_JOB POINTER 9 * LEAF_NODE 10 * NAME 8 job LEAF_NODE 9 job LEAF_NODE 7 ; EXPR_STATEMENT 6 job = async_job_new ( ) ; EXPR 7 job = async_job_new ( ) ASSIGN 8 job = async_job_new ( ) LVAL 9 job FIELD 10 job LEAF_NODE 11 job ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 async_job_new ( ) FUNCTION_CALL 10 async_job_new ( ) CALLEE 11 async_job_new LEAF_NODE 12 async_job_new LEAF_NODE 11 ( LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 job == NULL || ! async_fibre_makecontext ( & job -> fibrectx ) EXPR 8 job == NULL || ! async_fibre_makecontext ( & job -> fibrectx ) OR 9 job == NULL || ! async_fibre_makecontext ( & job -> fibrectx ) EXPR 10 job == NULL FIELD 11 job LEAF_NODE 12 job EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 10 || EXPR 10 ! async_fibre_makecontext ( & job -> fibrectx ) UNARY_EXPR 11 ! async_fibre_makecontext ( & job -> fibrectx ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 async_fibre_makecontext ( & job -> fibrectx ) CALLEE 13 async_fibre_makecontext LEAF_NODE 14 async_fibre_makecontext LEAF_NODE 13 ( ARGUMENT 13 & job -> fibrectx UNARY_EXPR 14 & job -> fibrectx UNARY_OPERATOR 15 & LEAF_NODE 16 & FIELD 15 job -> fibrectx LEAF_NODE 16 job LEAF_NODE 16 -> LEAF_NODE 16 fibrectx LEAF_NODE 13 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 async_job_free ( job ) ; EXPR 10 async_job_free ( job ) FUNCTION_CALL 11 async_job_free ( job ) CALLEE 12 async_job_free LEAF_NODE 13 async_job_free LEAF_NODE 12 ( ARGUMENT 12 job FIELD 13 job LEAF_NODE 14 job LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 job -> funcargs = NULL ; EXPR 7 job -> funcargs = NULL ASSIGN 8 job -> funcargs = NULL LVAL 9 job -> funcargs FIELD 10 job -> funcargs LEAF_NODE 11 job LEAF_NODE 11 -> LEAF_NODE 11 funcargs ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; EXPR_STATEMENT 6 sk_ASYNC_JOB_push ( pool -> jobs , job ) ; EXPR 7 sk_ASYNC_JOB_push ( pool -> jobs , job ) FUNCTION_CALL 8 sk_ASYNC_JOB_push ( pool -> jobs , job ) CALLEE 9 sk_ASYNC_JOB_push LEAF_NODE 10 sk_ASYNC_JOB_push LEAF_NODE 9 ( ARGUMENT 9 pool -> jobs FIELD 10 pool -> jobs LEAF_NODE 11 pool LEAF_NODE 11 -> LEAF_NODE 11 jobs LEAF_NODE 9 , ARGUMENT 9 job FIELD 10 job LEAF_NODE 11 job LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 curr_size ++ ; EXPR 7 curr_size ++ FIELD 8 curr_size ++ LEAF_NODE 9 curr_size LEAF_NODE 9 ++ LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 pool -> curr_size = curr_size ; EXPR 4 pool -> curr_size = curr_size ASSIGN 5 pool -> curr_size = curr_size LVAL 6 pool -> curr_size FIELD 7 pool -> curr_size LEAF_NODE 8 pool LEAF_NODE 8 -> LEAF_NODE 8 curr_size ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 curr_size FIELD 7 curr_size LEAF_NODE 8 curr_size LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! CRYPTO_THREAD_set_local ( & poolkey , pool ) EXPR 5 ! CRYPTO_THREAD_set_local ( & poolkey , pool ) UNARY_EXPR 6 ! CRYPTO_THREAD_set_local ( & poolkey , pool ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 CRYPTO_THREAD_set_local ( & poolkey , pool ) CALLEE 8 CRYPTO_THREAD_set_local LEAF_NODE 9 CRYPTO_THREAD_set_local LEAF_NODE 8 ( ARGUMENT 8 & poolkey UNARY_EXPR 9 & poolkey UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 poolkey LEAF_NODE 11 poolkey LEAF_NODE 8 , ARGUMENT 8 pool FIELD 9 pool LEAF_NODE 10 pool LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASYNCerr ( ASYNC_F_ASYNC_INIT_THREAD , ASYNC_R_FAILED_TO_SET_POOL ) ; EXPR 7 ASYNCerr ( ASYNC_F_ASYNC_INIT_THREAD , ASYNC_R_FAILED_TO_SET_POOL ) FUNCTION_CALL 8 ASYNCerr ( ASYNC_F_ASYNC_INIT_THREAD , ASYNC_R_FAILED_TO_SET_POOL ) CALLEE 9 ASYNCerr LEAF_NODE 10 ASYNCerr LEAF_NODE 9 ( ARGUMENT 9 ASYNC_F_ASYNC_INIT_THREAD FIELD 10 ASYNC_F_ASYNC_INIT_THREAD LEAF_NODE 11 ASYNC_F_ASYNC_INIT_THREAD LEAF_NODE 9 , ARGUMENT 9 ASYNC_R_FAILED_TO_SET_POOL FIELD 10 ASYNC_R_FAILED_TO_SET_POOL LEAF_NODE 11 ASYNC_R_FAILED_TO_SET_POOL LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LABEL 3 err : LEAF_NODE 4 err LEAF_NODE 4 : EXPR_STATEMENT 3 async_empty_pool ( pool ) ; EXPR 4 async_empty_pool ( pool ) FUNCTION_CALL 5 async_empty_pool ( pool ) CALLEE 6 async_empty_pool LEAF_NODE 7 async_empty_pool LEAF_NODE 6 ( ARGUMENT 6 pool FIELD 7 pool LEAF_NODE 8 pool LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 sk_ASYNC_JOB_free ( pool -> jobs ) ; EXPR 4 sk_ASYNC_JOB_free ( pool -> jobs ) FUNCTION_CALL 5 sk_ASYNC_JOB_free ( pool -> jobs ) CALLEE 6 sk_ASYNC_JOB_free LEAF_NODE 7 sk_ASYNC_JOB_free LEAF_NODE 6 ( ARGUMENT 6 pool -> jobs FIELD 7 pool -> jobs LEAF_NODE 8 pool LEAF_NODE 8 -> LEAF_NODE 8 jobs LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 OPENSSL_free ( pool ) ; EXPR 4 OPENSSL_free ( pool ) FUNCTION_CALL 5 OPENSSL_free ( pool ) CALLEE 6 OPENSSL_free LEAF_NODE 7 OPENSSL_free LEAF_NODE 6 ( ARGUMENT 6 pool FIELD 7 pool LEAF_NODE 8 pool LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 70, "project": "openssl_ast_normal_function_test_52", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; SIMPLE_DECL 1 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } ; CLASS_DEF 2 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } CLASS_DEF 3 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } LEAF_NODE 4 struct CLASS_NAME 4 testdata LEAF_NODE 5 testdata LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; SIMPLE_DECL 5 char * data ; VAR_DECL 6 char * data TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 int type ; VAR_DECL 6 int type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 type LEAF_NODE 8 type LEAF_NODE 6 ; SIMPLE_DECL 5 int expected_type ; VAR_DECL 6 int expected_type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 expected_type LEAF_NODE 8 expected_type LEAF_NODE 6 ; SIMPLE_DECL 5 int check_result ; VAR_DECL 6 int check_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 check_result LEAF_NODE 8 check_result LEAF_NODE 6 ; SIMPLE_DECL 5 time_t t ; VAR_DECL 6 time_t t TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 t LEAF_NODE 8 t LEAF_NODE 6 ; SIMPLE_DECL 5 int cmp_result ; VAR_DECL 6 int cmp_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 cmp_result LEAF_NODE 8 cmp_result LEAF_NODE 6 ; SIMPLE_DECL 5 int convert_result ; VAR_DECL 6 int convert_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 convert_result LEAF_NODE 8 convert_result LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } ; CLASS_DEF 2 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } CLASS_DEF 3 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } LEAF_NODE 4 struct CLASS_NAME 4 compare_testdata LEAF_NODE 5 compare_testdata LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; SIMPLE_DECL 5 ASN1_TIME t1 ; VAR_DECL 6 ASN1_TIME t1 TYPE 7 ASN1_TIME TYPE_NAME 8 ASN1_TIME LEAF_NODE 9 ASN1_TIME NAME 7 t1 LEAF_NODE 8 t1 LEAF_NODE 6 ; SIMPLE_DECL 5 ASN1_TIME t2 ; VAR_DECL 6 ASN1_TIME t2 TYPE 7 ASN1_TIME TYPE_NAME 8 ASN1_TIME LEAF_NODE 9 ASN1_TIME NAME 7 t2 LEAF_NODE 8 t2 LEAF_NODE 6 ; SIMPLE_DECL 5 int result ; VAR_DECL 6 int result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 result LEAF_NODE 8 result LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TODAY_GEN_STR ; TODAY_GEN_STR = \"20170825000000Z\" ; VAR_DECL 2 unsigned char [ ] TODAY_GEN_STR ; TODAY_GEN_STR = \"20170825000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TODAY_GEN_STR LEAF_NODE 4 TODAY_GEN_STR LEAF_NODE 3 ; INIT 3 TODAY_GEN_STR = \"20170825000000Z\" ASSIGN 4 TODAY_GEN_STR = \"20170825000000Z\" LVAL 5 TODAY_GEN_STR NAME 6 TODAY_GEN_STR LEAF_NODE 7 TODAY_GEN_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"20170825000000Z\" FIELD 6 \"20170825000000Z\" LEAF_NODE 7 \"20170825000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TOMORROW_GEN_STR ; TOMORROW_GEN_STR = \"20170826000000Z\" ; VAR_DECL 2 unsigned char [ ] TOMORROW_GEN_STR ; TOMORROW_GEN_STR = \"20170826000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TOMORROW_GEN_STR LEAF_NODE 4 TOMORROW_GEN_STR LEAF_NODE 3 ; INIT 3 TOMORROW_GEN_STR = \"20170826000000Z\" ASSIGN 4 TOMORROW_GEN_STR = \"20170826000000Z\" LVAL 5 TOMORROW_GEN_STR NAME 6 TOMORROW_GEN_STR LEAF_NODE 7 TOMORROW_GEN_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"20170826000000Z\" FIELD 6 \"20170826000000Z\" LEAF_NODE 7 \"20170826000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TODAY_UTC_STR ; TODAY_UTC_STR = \"170825000000Z\" ; VAR_DECL 2 unsigned char [ ] TODAY_UTC_STR ; TODAY_UTC_STR = \"170825000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TODAY_UTC_STR LEAF_NODE 4 TODAY_UTC_STR LEAF_NODE 3 ; INIT 3 TODAY_UTC_STR = \"170825000000Z\" ASSIGN 4 TODAY_UTC_STR = \"170825000000Z\" LVAL 5 TODAY_UTC_STR NAME 6 TODAY_UTC_STR LEAF_NODE 7 TODAY_UTC_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"170825000000Z\" FIELD 6 \"170825000000Z\" LEAF_NODE 7 \"170825000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TOMORROW_UTC_STR ; TOMORROW_UTC_STR = \"170826000000Z\" ; VAR_DECL 2 unsigned char [ ] TOMORROW_UTC_STR ; TOMORROW_UTC_STR = \"170826000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TOMORROW_UTC_STR LEAF_NODE 4 TOMORROW_UTC_STR LEAF_NODE 3 ; INIT 3 TOMORROW_UTC_STR = \"170826000000Z\" ASSIGN 4 TOMORROW_UTC_STR = \"170826000000Z\" LVAL 5 TOMORROW_UTC_STR NAME 6 TOMORROW_UTC_STR LEAF_NODE 7 TOMORROW_UTC_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"170826000000Z\" FIELD 6 \"170826000000Z\" LEAF_NODE 7 \"170826000000Z\" LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_pos LEAF_NODE 3 test_table_pos PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_pos , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_pos , idx ) EXPR 5 test_table ( tbl_testdata_pos , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_pos , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_pos FIELD 8 tbl_testdata_pos LEAF_NODE 9 tbl_testdata_pos LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_neg LEAF_NODE 3 test_table_neg PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_neg , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_neg , idx ) EXPR 5 test_table ( tbl_testdata_neg , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_neg , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_neg FIELD 8 tbl_testdata_neg LEAF_NODE 9 tbl_testdata_neg LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_pos_64bit LEAF_NODE 3 test_table_pos_64bit PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_pos_64bit , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_pos_64bit , idx ) EXPR 5 test_table ( tbl_testdata_pos_64bit , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_pos_64bit , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_pos_64bit FIELD 8 tbl_testdata_pos_64bit LEAF_NODE 9 tbl_testdata_pos_64bit LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_neg_64bit LEAF_NODE 3 test_table_neg_64bit PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_neg_64bit , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_neg_64bit , idx ) EXPR 5 test_table ( tbl_testdata_neg_64bit , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_neg_64bit , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_neg_64bit FIELD 8 tbl_testdata_neg_64bit LEAF_NODE 9 tbl_testdata_neg_64bit LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_compare LEAF_NODE 3 test_table_compare PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct compare_testdata * td ; td = & tbl_compare_testdata [ idx ] ; VAR_DECL 4 struct compare_testdata * td ; td = & tbl_compare_testdata [ idx ] TYPE 5 struct compare_testdata * TYPE_NAME 6 struct compare_testdata LEAF_NODE 7 struct LEAF_NODE 7 compare_testdata POINTER 6 * LEAF_NODE 7 * NAME 5 td LEAF_NODE 6 td LEAF_NODE 5 ; INIT 5 td = & tbl_compare_testdata [ idx ] ASSIGN 6 td = & tbl_compare_testdata [ idx ] LVAL 7 td NAME 8 td LEAF_NODE 9 td ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & tbl_compare_testdata [ idx ] UNARY_EXPR 8 & tbl_compare_testdata [ idx ] UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 tbl_compare_testdata [ idx ] LEAF_NODE 10 tbl_compare_testdata LEAF_NODE 10 [ EXPR 10 idx FIELD 11 idx LEAF_NODE 12 idx LEAF_NODE 10 ] LEAF_NODE 4 ; JUMP_STATEMENT 3 return TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) EXPR 5 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) FUNCTION_CALL 6 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) CALLEE 7 TEST_int_eq LEAF_NODE 8 TEST_int_eq LEAF_NODE 7 ( ARGUMENT 7 ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) FUNCTION_CALL 8 ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) CALLEE 9 ASN1_TIME_compare LEAF_NODE 10 ASN1_TIME_compare LEAF_NODE 9 ( ARGUMENT 9 & td -> t1 UNARY_EXPR 10 & td -> t1 UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 td -> t1 LEAF_NODE 12 td LEAF_NODE 12 -> LEAF_NODE 12 t1 LEAF_NODE 9 , ARGUMENT 9 & td -> t2 UNARY_EXPR 10 & td -> t2 UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 td -> t2 LEAF_NODE 12 td LEAF_NODE 12 -> LEAF_NODE 12 t2 LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 td -> result FIELD 8 td -> result LEAF_NODE 9 td LEAF_NODE 9 -> LEAF_NODE 9 result LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 setup_tests LEAF_NODE 3 setup_tests PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 time_t t ; t = - 1 ; VAR_DECL 4 time_t t ; t = - 1 TYPE 5 time_t TYPE_NAME 6 time_t LEAF_NODE 7 time_t NAME 5 t LEAF_NODE 6 t LEAF_NODE 5 ; INIT 5 t = - 1 ASSIGN 6 t = - 1 LVAL 7 t NAME 8 t LEAF_NODE 9 t ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 4 ; SIMPLE_DECL 3 struct tm * ptm ; ptm = localtime ( & t ) ; VAR_DECL 4 struct tm * ptm ; ptm = localtime ( & t ) TYPE 5 struct tm * TYPE_NAME 6 struct tm LEAF_NODE 7 struct LEAF_NODE 7 tm POINTER 6 * LEAF_NODE 7 * NAME 5 ptm LEAF_NODE 6 ptm LEAF_NODE 5 ; INIT 5 ptm = localtime ( & t ) ASSIGN 6 ptm = localtime ( & t ) LVAL 7 ptm NAME 8 ptm LEAF_NODE 9 ptm ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 localtime ( & t ) FUNCTION_CALL 8 localtime ( & t ) CALLEE 9 localtime LEAF_NODE 10 localtime LEAF_NODE 9 ( ARGUMENT 9 & t UNARY_EXPR 10 & t UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 t LEAF_NODE 12 t LEAF_NODE 9 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ADD_ALL_TESTS ( test_table_pos , OSSL_NELEM ( tbl_testdata_pos ) ) ; EXPR 4 ADD_ALL_TESTS ( test_table_pos , OSSL_NELEM ( tbl_testdata_pos ) ) FUNCTION_CALL 5 ADD_ALL_TESTS ( test_table_pos , OSSL_NELEM ( tbl_testdata_pos ) ) CALLEE 6 ADD_ALL_TESTS LEAF_NODE 7 ADD_ALL_TESTS LEAF_NODE 6 ( ARGUMENT 6 test_table_pos FIELD 7 test_table_pos LEAF_NODE 8 test_table_pos LEAF_NODE 6 , ARGUMENT 6 OSSL_NELEM ( tbl_testdata_pos ) FUNCTION_CALL 7 OSSL_NELEM ( tbl_testdata_pos ) CALLEE 8 OSSL_NELEM LEAF_NODE 9 OSSL_NELEM LEAF_NODE 8 ( ARGUMENT 8 tbl_testdata_pos FIELD 9 tbl_testdata_pos LEAF_NODE 10 tbl_testdata_pos LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ( t > 0 ) && ptm != NULL EXPR 5 ! ( t > 0 ) && ptm != NULL AND 6 ! ( t > 0 ) && ptm != NULL EXPR 7 ! ( t > 0 ) UNARY_EXPR 8 ! ( t > 0 ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! LEAF_NODE 9 ( FIELD 9 t LEAF_NODE 10 t REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 9 ) LEAF_NODE 7 && EXPR 7 ptm != NULL FIELD 8 ptm LEAF_NODE 9 ptm EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 TEST_info ( \"Adding negative-sign time_t tests\" ) ; EXPR 7 TEST_info ( \"Adding negative-sign time_t tests\" ) FUNCTION_CALL 8 TEST_info ( \"Adding negative-sign time_t tests\" ) CALLEE 9 TEST_info LEAF_NODE 10 TEST_info LEAF_NODE 9 ( ARGUMENT 9 \"Adding negative-sign time_t tests\" FIELD 10 \"Adding negative-sign time_t tests\" LEAF_NODE 11 \"Adding negative-sign time_t tests\" LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ADD_ALL_TESTS ( test_table_neg , OSSL_NELEM ( tbl_testdata_neg ) ) ; EXPR 7 ADD_ALL_TESTS ( test_table_neg , OSSL_NELEM ( tbl_testdata_neg ) ) FUNCTION_CALL 8 ADD_ALL_TESTS ( test_table_neg , OSSL_NELEM ( tbl_testdata_neg ) ) CALLEE 9 ADD_ALL_TESTS LEAF_NODE 10 ADD_ALL_TESTS LEAF_NODE 9 ( ARGUMENT 9 test_table_neg FIELD 10 test_table_neg LEAF_NODE 11 test_table_neg LEAF_NODE 9 , ARGUMENT 9 OSSL_NELEM ( tbl_testdata_neg ) FUNCTION_CALL 10 OSSL_NELEM ( tbl_testdata_neg ) CALLEE 11 OSSL_NELEM LEAF_NODE 12 OSSL_NELEM LEAF_NODE 11 ( ARGUMENT 11 tbl_testdata_neg FIELD 12 tbl_testdata_neg LEAF_NODE 13 tbl_testdata_neg LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 sizeof ( time_t ) > sizeof ( uint32_t ) EXPR 5 sizeof ( time_t ) > sizeof ( uint32_t ) FUNCTION_CALL 6 sizeof ( time_t ) CALLEE 7 sizeof LEAF_NODE 8 sizeof LEAF_NODE 7 ( ARGUMENT 7 time_t FIELD 8 time_t LEAF_NODE 9 time_t LEAF_NODE 7 ) REL_OPERATOR 6 > LEAF_NODE 7 > FUNCTION_CALL 6 sizeof ( uint32_t ) CALLEE 7 sizeof LEAF_NODE 8 sizeof LEAF_NODE 7 ( ARGUMENT 7 uint32_t FIELD 8 uint32_t LEAF_NODE 9 uint32_t LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 TEST_info ( \"Adding 64-bit time_t tests\" ) ; EXPR 7 TEST_info ( \"Adding 64-bit time_t tests\" ) FUNCTION_CALL 8 TEST_info ( \"Adding 64-bit time_t tests\" ) CALLEE 9 TEST_info LEAF_NODE 10 TEST_info LEAF_NODE 9 ( ARGUMENT 9 \"Adding 64-bit time_t tests\" FIELD 10 \"Adding 64-bit time_t tests\" LEAF_NODE 11 \"Adding 64-bit time_t tests\" LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ADD_ALL_TESTS ( test_table_pos_64bit , OSSL_NELEM ( tbl_testdata_pos_64bit ) ) ; EXPR 7 ADD_ALL_TESTS ( test_table_pos_64bit , OSSL_NELEM ( tbl_testdata_pos_64bit ) ) FUNCTION_CALL 8 ADD_ALL_TESTS ( test_table_pos_64bit , OSSL_NELEM ( tbl_testdata_pos_64bit ) ) CALLEE 9 ADD_ALL_TESTS LEAF_NODE 10 ADD_ALL_TESTS LEAF_NODE 9 ( ARGUMENT 9 test_table_pos_64bit FIELD 10 test_table_pos_64bit LEAF_NODE 11 test_table_pos_64bit LEAF_NODE 9 , ARGUMENT 9 OSSL_NELEM ( tbl_testdata_pos_64bit ) FUNCTION_CALL 10 OSSL_NELEM ( tbl_testdata_pos_64bit ) CALLEE 11 OSSL_NELEM LEAF_NODE 12 OSSL_NELEM LEAF_NODE 11 ( ARGUMENT 11 tbl_testdata_pos_64bit FIELD 12 tbl_testdata_pos_64bit LEAF_NODE 13 tbl_testdata_pos_64bit LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! ( t > 0 ) && ptm != NULL EXPR 8 ! ( t > 0 ) && ptm != NULL AND 9 ! ( t > 0 ) && ptm != NULL EXPR 10 ! ( t > 0 ) UNARY_EXPR 11 ! ( t > 0 ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! LEAF_NODE 12 ( FIELD 12 t LEAF_NODE 13 t REL_OPERATOR 12 > LEAF_NODE 13 > FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 12 ) LEAF_NODE 10 && EXPR 10 ptm != NULL FIELD 11 ptm LEAF_NODE 12 ptm EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 TEST_info ( \"Adding negative-sign 64-bit time_t tests\" ) ; EXPR 10 TEST_info ( \"Adding negative-sign 64-bit time_t tests\" ) FUNCTION_CALL 11 TEST_info ( \"Adding negative-sign 64-bit time_t tests\" ) CALLEE 12 TEST_info LEAF_NODE 13 TEST_info LEAF_NODE 12 ( ARGUMENT 12 \"Adding negative-sign 64-bit time_t tests\" FIELD 13 \"Adding negative-sign 64-bit time_t tests\" LEAF_NODE 14 \"Adding negative-sign 64-bit time_t tests\" LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ADD_ALL_TESTS ( test_table_neg_64bit , OSSL_NELEM ( tbl_testdata_neg_64bit ) ) ; EXPR 10 ADD_ALL_TESTS ( test_table_neg_64bit , OSSL_NELEM ( tbl_testdata_neg_64bit ) ) FUNCTION_CALL 11 ADD_ALL_TESTS ( test_table_neg_64bit , OSSL_NELEM ( tbl_testdata_neg_64bit ) ) CALLEE 12 ADD_ALL_TESTS LEAF_NODE 13 ADD_ALL_TESTS LEAF_NODE 12 ( ARGUMENT 12 test_table_neg_64bit FIELD 13 test_table_neg_64bit LEAF_NODE 14 test_table_neg_64bit LEAF_NODE 12 , ARGUMENT 12 OSSL_NELEM ( tbl_testdata_neg_64bit ) FUNCTION_CALL 13 OSSL_NELEM ( tbl_testdata_neg_64bit ) CALLEE 14 OSSL_NELEM LEAF_NODE 15 OSSL_NELEM LEAF_NODE 14 ( ARGUMENT 14 tbl_testdata_neg_64bit FIELD 15 tbl_testdata_neg_64bit LEAF_NODE 16 tbl_testdata_neg_64bit LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 ADD_ALL_TESTS ( test_table_compare , OSSL_NELEM ( tbl_compare_testdata ) ) ; EXPR 4 ADD_ALL_TESTS ( test_table_compare , OSSL_NELEM ( tbl_compare_testdata ) ) FUNCTION_CALL 5 ADD_ALL_TESTS ( test_table_compare , OSSL_NELEM ( tbl_compare_testdata ) ) CALLEE 6 ADD_ALL_TESTS LEAF_NODE 7 ADD_ALL_TESTS LEAF_NODE 6 ( ARGUMENT 6 test_table_compare FIELD 7 test_table_compare LEAF_NODE 8 test_table_compare LEAF_NODE 6 , ARGUMENT 6 OSSL_NELEM ( tbl_compare_testdata ) FUNCTION_CALL 7 OSSL_NELEM ( tbl_compare_testdata ) CALLEE 8 OSSL_NELEM LEAF_NODE 9 OSSL_NELEM LEAF_NODE 8 ( ARGUMENT 8 tbl_compare_testdata FIELD 9 tbl_compare_testdata LEAF_NODE 10 tbl_compare_testdata LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 71, "project": "openssl_ast_normal_function_test_98", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 char * save_rand_file ; VAR_DECL 2 char * save_rand_file TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 save_rand_file LEAF_NODE 4 save_rand_file LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 app_feof LEAF_NODE 3 app_feof PARAMETER_LIST 2 ( FILE * fp ) LEAF_NODE 3 ( PARAMETER_DECL 3 FILE * fp TYPE 4 FILE * TYPE_NAME 5 FILE LEAF_NODE 6 FILE POINTER 5 * LEAF_NODE 6 * NAME 4 fp LEAF_NODE 5 fp LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return feof ( fp ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 feof ( fp ) EXPR 5 feof ( fp ) FUNCTION_CALL 6 feof ( fp ) CALLEE 7 feof LEAF_NODE 8 feof LEAF_NODE 7 ( ARGUMENT 7 fp FIELD 8 fp LEAF_NODE 9 fp LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 72, "project": "openssl_ast_normal_function_test_119", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_TIME_set_string LEAF_NODE 3 ASN1_TIME_set_string PARAMETER_LIST 2 ( ASN1_TIME * s , const char * str ) LEAF_NODE 3 ( PARAMETER_DECL 3 ASN1_TIME * s TYPE 4 ASN1_TIME * TYPE_NAME 5 ASN1_TIME LEAF_NODE 6 ASN1_TIME POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 const char * str TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 str LEAF_NODE 5 str LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ASN1_UTCTIME_set_string ( s , str ) EXPR 5 ASN1_UTCTIME_set_string ( s , str ) FUNCTION_CALL 6 ASN1_UTCTIME_set_string ( s , str ) CALLEE 7 ASN1_UTCTIME_set_string LEAF_NODE 8 ASN1_UTCTIME_set_string LEAF_NODE 7 ( ARGUMENT 7 s FIELD 8 s LEAF_NODE 9 s LEAF_NODE 7 , ARGUMENT 7 str FIELD 8 str LEAF_NODE 9 str LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 1 EXPR 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 6 ; JUMP_STATEMENT 3 return ASN1_GENERALIZEDTIME_set_string ( s , str ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ASN1_GENERALIZEDTIME_set_string ( s , str ) EXPR 5 ASN1_GENERALIZEDTIME_set_string ( s , str ) FUNCTION_CALL 6 ASN1_GENERALIZEDTIME_set_string ( s , str ) CALLEE 7 ASN1_GENERALIZEDTIME_set_string LEAF_NODE 8 ASN1_GENERALIZEDTIME_set_string LEAF_NODE 7 ( ARGUMENT 7 s FIELD 8 s LEAF_NODE 9 s LEAF_NODE 7 , ARGUMENT 7 str FIELD 8 str LEAF_NODE 9 str LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 73, "project": "openssl_ast_normal_function_test_75", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 send_bio_chars LEAF_NODE 3 send_bio_chars PARAMETER_LIST 2 ( void * arg , const void * buf , int len ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * arg TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 arg LEAF_NODE 5 arg LEAF_NODE 3 , PARAMETER_DECL 3 const void * buf TYPE 4 const void * TYPE_NAME 5 const void LEAF_NODE 6 const LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 buf LEAF_NODE 5 buf LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! arg EXPR 5 ! arg UNARY_EXPR 6 ! arg UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 arg LEAF_NODE 8 arg LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 1 EXPR 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 BIO_write ( arg , buf , len ) != len EXPR 5 BIO_write ( arg , buf , len ) != len FUNCTION_CALL 6 BIO_write ( arg , buf , len ) CALLEE 7 BIO_write LEAF_NODE 8 BIO_write LEAF_NODE 7 ( ARGUMENT 7 arg FIELD 8 arg LEAF_NODE 9 arg LEAF_NODE 7 , ARGUMENT 7 buf FIELD 8 buf LEAF_NODE 9 buf LEAF_NODE 7 , ARGUMENT 7 len FIELD 8 len LEAF_NODE 9 len LEAF_NODE 7 ) EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 len LEAF_NODE 7 len LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_STRING_print_ex LEAF_NODE 3 ASN1_STRING_print_ex PARAMETER_LIST 2 ( BIO * out , const ASN1_STRING * str , unsigned long flags ) LEAF_NODE 3 ( PARAMETER_DECL 3 BIO * out TYPE 4 BIO * TYPE_NAME 5 BIO LEAF_NODE 6 BIO POINTER 5 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 const ASN1_STRING * str TYPE 4 const ASN1_STRING * TYPE_NAME 5 const ASN1_STRING LEAF_NODE 6 const LEAF_NODE 6 ASN1_STRING POINTER 5 * LEAF_NODE 6 * NAME 4 str LEAF_NODE 5 str LEAF_NODE 3 , PARAMETER_DECL 3 unsigned long flags TYPE 4 unsigned long TYPE_NAME 5 unsigned long LEAF_NODE 6 unsigned LEAF_NODE 6 long NAME 4 flags LEAF_NODE 5 flags LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return do_print_ex ( send_bio_chars , out , flags , str ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 do_print_ex ( send_bio_chars , out , flags , str ) EXPR 5 do_print_ex ( send_bio_chars , out , flags , str ) FUNCTION_CALL 6 do_print_ex ( send_bio_chars , out , flags , str ) CALLEE 7 do_print_ex LEAF_NODE 8 do_print_ex LEAF_NODE 7 ( ARGUMENT 7 send_bio_chars FIELD 8 send_bio_chars LEAF_NODE 9 send_bio_chars LEAF_NODE 7 , ARGUMENT 7 out FIELD 8 out LEAF_NODE 9 out LEAF_NODE 7 , ARGUMENT 7 flags FIELD 8 flags LEAF_NODE 9 flags LEAF_NODE 7 , ARGUMENT 7 str FIELD 8 str LEAF_NODE 9 str LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 74, "project": "openssl_ast_normal_function_test_20", "target": 0}
{"func": "SIMPLE_DECL 1 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } ; CLASS_DEF 2 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } CLASS_DEF 3 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } LEAF_NODE 4 struct CLASS_NAME 4 async_ctrs LEAF_NODE 5 async_ctrs LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned int rctr ; unsigned int wctr ; SIMPLE_DECL 5 unsigned int rctr ; VAR_DECL 6 unsigned int rctr TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rctr LEAF_NODE 8 rctr LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int wctr ; VAR_DECL 6 unsigned int wctr TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 wctr LEAF_NODE 8 wctr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 int ctr ; ctr = 0 ; VAR_DECL 2 int ctr ; ctr = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 ctr LEAF_NODE 4 ctr LEAF_NODE 3 ; INIT 3 ctr = 0 ASSIGN 4 ctr = 0 LVAL 5 ctr NAME 6 ctr LEAF_NODE 7 ctr ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 add_two LEAF_NODE 3 add_two PARAMETER_LIST 2 ( void * args ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * args TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 args LEAF_NODE 5 args LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 ctr ++ ; EXPR 4 ctr ++ FIELD 5 ctr ++ LEAF_NODE 6 ctr LEAF_NODE 6 ++ LEAF_NODE 4 ; EXPR_STATEMENT 3 ASYNC_pause_job ( ) ; EXPR 4 ASYNC_pause_job ( ) FUNCTION_CALL 5 ASYNC_pause_job ( ) CALLEE 6 ASYNC_pause_job LEAF_NODE 7 ASYNC_pause_job LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ctr ++ ; EXPR 4 ctr ++ FIELD 5 ctr ++ LEAF_NODE 6 ctr LEAF_NODE 6 ++ LEAF_NODE 4 ; JUMP_STATEMENT 3 return 2 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 2 EXPR 5 2 FIELD 6 2 LEAF_NODE 7 2 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 75, "project": "openssl_ast_normal_function_test_130", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ssl_get_prev_session LEAF_NODE 3 ssl_get_prev_session PARAMETER_LIST 2 ( SSL * s , unsigned char * session_id , int len , const unsigned char * limit ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * session_id TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 session_id LEAF_NODE 5 session_id LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 , PARAMETER_DECL 3 const unsigned char * limit TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 limit LEAF_NODE 5 limit LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 SSL_SESSION * ret ; ret = NULL ; VAR_DECL 4 SSL_SESSION * ret ; ret = NULL TYPE 5 SSL_SESSION * TYPE_NAME 6 SSL_SESSION LEAF_NODE 7 SSL_SESSION POINTER 6 * LEAF_NODE 7 * NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 5 ; INIT 5 ret = NULL ASSIGN 6 ret = NULL LVAL 7 ret NAME 8 ret LEAF_NODE 9 ret ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int fatal ; fatal = 0 ; VAR_DECL 4 int fatal ; fatal = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 fatal LEAF_NODE 6 fatal LEAF_NODE 5 ; INIT 5 fatal = 0 ASSIGN 6 fatal = 0 LVAL 7 fatal NAME 8 fatal LEAF_NODE 9 fatal ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int try_session_cache ; try_session_cache = 1 ; VAR_DECL 4 int try_session_cache ; try_session_cache = 1 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 try_session_cache LEAF_NODE 6 try_session_cache LEAF_NODE 5 ; INIT 5 try_session_cache = 1 ASSIGN 6 try_session_cache = 1 LVAL 7 try_session_cache NAME 8 try_session_cache LEAF_NODE 9 try_session_cache ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; SIMPLE_DECL 3 int r ; VAR_DECL 4 int r TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 r LEAF_NODE 6 r LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 session_id + len > limit EXPR 5 session_id + len > limit FIELD 6 session_id LEAF_NODE 7 session_id LEAF_NODE 6 + FIELD 6 len LEAF_NODE 7 len REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 limit LEAF_NODE 7 limit LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 fatal = 1 ; EXPR 7 fatal = 1 ASSIGN 8 fatal = 1 LVAL 9 fatal FIELD 10 fatal LEAF_NODE 11 fatal ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 len == 0 EXPR 5 len == 0 FIELD 6 len LEAF_NODE 7 len EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 try_session_cache = 0 ; EXPR 6 try_session_cache = 0 ASSIGN 7 try_session_cache = 0 LVAL 8 try_session_cache FIELD 9 try_session_cache LEAF_NODE 10 try_session_cache ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; EXPR_STATEMENT 3 r = tls1_process_ticket ( s , session_id , len , limit , & ret ) ; EXPR 4 r = tls1_process_ticket ( s , session_id , len , limit , & ret ) ASSIGN 5 r = tls1_process_ticket ( s , session_id , len , limit , & ret ) LVAL 6 r FIELD 7 r LEAF_NODE 8 r ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 tls1_process_ticket ( s , session_id , len , limit , & ret ) FUNCTION_CALL 7 tls1_process_ticket ( s , session_id , len , limit , & ret ) CALLEE 8 tls1_process_ticket LEAF_NODE 9 tls1_process_ticket LEAF_NODE 8 ( ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 , ARGUMENT 8 session_id FIELD 9 session_id LEAF_NODE 10 session_id LEAF_NODE 8 , ARGUMENT 8 len FIELD 9 len LEAF_NODE 10 len LEAF_NODE 8 , ARGUMENT 8 limit FIELD 9 limit LEAF_NODE 10 limit LEAF_NODE 8 , ARGUMENT 8 & ret UNARY_EXPR 9 & ret UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 r EXPR 5 r FIELD 6 r LEAF_NODE 7 r LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 case LEAF_NODE 6 - LABEL 6 1 : LEAF_NODE 7 1 LEAF_NODE 7 : EXPR_STATEMENT 6 fatal = 1 ; EXPR 7 fatal = 1 ASSIGN 8 fatal = 1 LVAL 9 fatal FIELD 10 fatal LEAF_NODE 11 fatal ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LABEL 6 case 0 : LEAF_NODE 7 case LEAF_NODE 7 0 LEAF_NODE 7 : LABEL 6 case 1 : LEAF_NODE 7 case LEAF_NODE 7 1 LEAF_NODE 7 : JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 case 2 : LEAF_NODE 7 case LEAF_NODE 7 2 LEAF_NODE 7 : LABEL 6 case 3 : LEAF_NODE 7 case LEAF_NODE 7 3 LEAF_NODE 7 : EXPR_STATEMENT 6 try_session_cache = 0 ; EXPR 7 try_session_cache = 0 ASSIGN 8 try_session_cache = 0 LVAL 9 try_session_cache FIELD 10 try_session_cache LEAF_NODE 11 try_session_cache ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 abort ( ) ; EXPR 7 abort ( ) FUNCTION_CALL 8 abort ( ) CALLEE 9 abort LEAF_NODE 10 abort LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 try_session_cache && ret == NULL && ! ( s -> session_ctx -> session_cache_mode & SSL_SESS_CACHE_NO_INTERNAL_LOOKUP ) EXPR 5 try_session_cache && ret == NULL && ! ( s -> session_ctx -> session_cache_mode & SSL_SESS_CACHE_NO_INTERNAL_LOOKUP ) AND 6 try_session_cache && ret == NULL && ! ( s -> session_ctx -> session_cache_mode & SSL_SESS_CACHE_NO_INTERNAL_LOOKUP ) EXPR 7 try_session_cache FIELD 8 try_session_cache LEAF_NODE 9 try_session_cache LEAF_NODE 7 && EXPR 7 ret == NULL && ! ( s -> session_ctx -> session_cache_mode & SSL_SESS_CACHE_NO_INTERNAL_LOOKUP ) AND 8 ret == NULL && ! ( s -> session_ctx -> session_cache_mode & SSL_SESS_CACHE_NO_INTERNAL_LOOKUP ) EXPR 9 ret == NULL FIELD 10 ret LEAF_NODE 11 ret EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 && EXPR 9 ! ( s -> session_ctx -> session_cache_mode & SSL_SESS_CACHE_NO_INTERNAL_LOOKUP ) UNARY_EXPR 10 ! ( s -> session_ctx -> session_cache_mode & SSL_SESS_CACHE_NO_INTERNAL_LOOKUP ) UNARY_OPERATOR 11 ! LEAF_NODE 12 ! LEAF_NODE 11 ( FIELD 11 s -> session_ctx -> session_cache_mode LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 session_ctx LEAF_NODE 12 -> LEAF_NODE 12 session_cache_mode LEAF_NODE 11 & FIELD 11 SSL_SESS_CACHE_NO_INTERNAL_LOOKUP LEAF_NODE 12 SSL_SESS_CACHE_NO_INTERNAL_LOOKUP LEAF_NODE 11 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 SSL_SESSION data ; VAR_DECL 7 SSL_SESSION data TYPE 8 SSL_SESSION TYPE_NAME 9 SSL_SESSION LEAF_NODE 10 SSL_SESSION NAME 8 data LEAF_NODE 9 data LEAF_NODE 7 ; EXPR_STATEMENT 6 data . ssl_version = s -> version ; EXPR 7 data . ssl_version = s -> version ASSIGN 8 data . ssl_version = s -> version LVAL 9 data . ssl_version FIELD 10 data . ssl_version LEAF_NODE 11 data LEAF_NODE 11 . LEAF_NODE 11 ssl_version ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 s -> version FIELD 10 s -> version LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 version LEAF_NODE 7 ; EXPR_STATEMENT 6 data . session_id_length = len ; EXPR 7 data . session_id_length = len ASSIGN 8 data . session_id_length = len LVAL 9 data . session_id_length FIELD 10 data . session_id_length LEAF_NODE 11 data LEAF_NODE 11 . LEAF_NODE 11 session_id_length ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 len FIELD 10 len LEAF_NODE 11 len LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 len == 0 EXPR 8 len == 0 FIELD 9 len LEAF_NODE 10 len EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return 0 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 0 EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ; EXPR_STATEMENT 6 memcpy ( data . session_id , session_id , len ) ; EXPR 7 memcpy ( data . session_id , session_id , len ) FUNCTION_CALL 8 memcpy ( data . session_id , session_id , len ) CALLEE 9 memcpy LEAF_NODE 10 memcpy LEAF_NODE 9 ( ARGUMENT 9 data . session_id FIELD 10 data . session_id LEAF_NODE 11 data LEAF_NODE 11 . LEAF_NODE 11 session_id LEAF_NODE 9 , ARGUMENT 9 session_id FIELD 10 session_id LEAF_NODE 11 session_id LEAF_NODE 9 , ARGUMENT 9 len FIELD 10 len LEAF_NODE 11 len LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 CRYPTO_r_lock ( CRYPTO_LOCK_SSL_CTX ) ; EXPR 7 CRYPTO_r_lock ( CRYPTO_LOCK_SSL_CTX ) FUNCTION_CALL 8 CRYPTO_r_lock ( CRYPTO_LOCK_SSL_CTX ) CALLEE 9 CRYPTO_r_lock LEAF_NODE 10 CRYPTO_r_lock LEAF_NODE 9 ( ARGUMENT 9 CRYPTO_LOCK_SSL_CTX FIELD 10 CRYPTO_LOCK_SSL_CTX LEAF_NODE 11 CRYPTO_LOCK_SSL_CTX LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ret = lh_SSL_SESSION_retrieve ( s -> session_ctx -> sessions , & data ) ; EXPR 7 ret = lh_SSL_SESSION_retrieve ( s -> session_ctx -> sessions , & data ) ASSIGN 8 ret = lh_SSL_SESSION_retrieve ( s -> session_ctx -> sessions , & data ) LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 lh_SSL_SESSION_retrieve ( s -> session_ctx -> sessions , & data ) FUNCTION_CALL 10 lh_SSL_SESSION_retrieve ( s -> session_ctx -> sessions , & data ) CALLEE 11 lh_SSL_SESSION_retrieve LEAF_NODE 12 lh_SSL_SESSION_retrieve LEAF_NODE 11 ( ARGUMENT 11 s -> session_ctx -> sessions FIELD 12 s -> session_ctx -> sessions LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 session_ctx LEAF_NODE 13 -> LEAF_NODE 13 sessions LEAF_NODE 11 , ARGUMENT 11 & data UNARY_EXPR 12 & data UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 data LEAF_NODE 14 data LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ret != NULL EXPR 8 ret != NULL FIELD 9 ret LEAF_NODE 10 ret EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 CRYPTO_add ( & ret -> references , 1 , CRYPTO_LOCK_SSL_SESSION ) ; EXPR 10 CRYPTO_add ( & ret -> references , 1 , CRYPTO_LOCK_SSL_SESSION ) FUNCTION_CALL 11 CRYPTO_add ( & ret -> references , 1 , CRYPTO_LOCK_SSL_SESSION ) CALLEE 12 CRYPTO_add LEAF_NODE 13 CRYPTO_add LEAF_NODE 12 ( ARGUMENT 12 & ret -> references UNARY_EXPR 13 & ret -> references UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 ret -> references LEAF_NODE 15 ret LEAF_NODE 15 -> LEAF_NODE 15 references LEAF_NODE 12 , ARGUMENT 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 , ARGUMENT 12 CRYPTO_LOCK_SSL_SESSION FIELD 13 CRYPTO_LOCK_SSL_SESSION LEAF_NODE 14 CRYPTO_LOCK_SSL_SESSION LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 CRYPTO_r_unlock ( CRYPTO_LOCK_SSL_CTX ) ; EXPR 7 CRYPTO_r_unlock ( CRYPTO_LOCK_SSL_CTX ) FUNCTION_CALL 8 CRYPTO_r_unlock ( CRYPTO_LOCK_SSL_CTX ) CALLEE 9 CRYPTO_r_unlock LEAF_NODE 10 CRYPTO_r_unlock LEAF_NODE 9 ( ARGUMENT 9 CRYPTO_LOCK_SSL_CTX FIELD 10 CRYPTO_LOCK_SSL_CTX LEAF_NODE 11 CRYPTO_LOCK_SSL_CTX LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ret == NULL EXPR 8 ret == NULL FIELD 9 ret LEAF_NODE 10 ret EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 s -> session_ctx -> stats . sess_miss ++ ; EXPR 9 s -> session_ctx -> stats . sess_miss ++ FIELD 10 s -> session_ctx -> stats . sess_miss ++ LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 session_ctx LEAF_NODE 11 -> LEAF_NODE 11 stats LEAF_NODE 11 . LEAF_NODE 11 sess_miss LEAF_NODE 11 ++ LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 try_session_cache && ret == NULL && s -> session_ctx -> get_session_cb != NULL EXPR 5 try_session_cache && ret == NULL && s -> session_ctx -> get_session_cb != NULL AND 6 try_session_cache && ret == NULL && s -> session_ctx -> get_session_cb != NULL EXPR 7 try_session_cache FIELD 8 try_session_cache LEAF_NODE 9 try_session_cache LEAF_NODE 7 && EXPR 7 ret == NULL && s -> session_ctx -> get_session_cb != NULL AND 8 ret == NULL && s -> session_ctx -> get_session_cb != NULL EXPR 9 ret == NULL FIELD 10 ret LEAF_NODE 11 ret EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 && EXPR 9 s -> session_ctx -> get_session_cb != NULL FIELD 10 s -> session_ctx -> get_session_cb LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 session_ctx LEAF_NODE 11 -> LEAF_NODE 11 get_session_cb EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int copy ; copy = 1 ; VAR_DECL 7 int copy ; copy = 1 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 copy LEAF_NODE 9 copy LEAF_NODE 8 ; INIT 8 copy = 1 ASSIGN 9 copy = 1 LVAL 10 copy NAME 11 copy LEAF_NODE 12 copy ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 1 FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( ret = s -> session_ctx -> get_session_cb ( s , session_id , len , & copy ) ) EXPR 8 ( ret = s -> session_ctx -> get_session_cb ( s , session_id , len , & copy ) ) LEAF_NODE 9 ( ASSIGN 9 ret = s -> session_ctx -> get_session_cb ( s , session_id , len , & copy ) LVAL 10 ret FIELD 11 ret LEAF_NODE 12 ret ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 s -> session_ctx -> get_session_cb ( s , session_id , len , & copy ) FUNCTION_CALL 11 s -> session_ctx -> get_session_cb ( s , session_id , len , & copy ) CALLEE 12 s -> session_ctx -> get_session_cb LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 session_ctx LEAF_NODE 13 -> LEAF_NODE 13 get_session_cb LEAF_NODE 12 ( ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 , ARGUMENT 12 session_id FIELD 13 session_id LEAF_NODE 14 session_id LEAF_NODE 12 , ARGUMENT 12 len FIELD 13 len LEAF_NODE 14 len LEAF_NODE 12 , ARGUMENT 12 & copy UNARY_EXPR 13 & copy UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 copy LEAF_NODE 15 copy LEAF_NODE 12 ) LEAF_NODE 9 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 s -> session_ctx -> stats . sess_cb_hit ++ ; EXPR 10 s -> session_ctx -> stats . sess_cb_hit ++ FIELD 11 s -> session_ctx -> stats . sess_cb_hit ++ LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 session_ctx LEAF_NODE 12 -> LEAF_NODE 12 stats LEAF_NODE 12 . LEAF_NODE 12 sess_cb_hit LEAF_NODE 12 ++ LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 copy EXPR 11 copy FIELD 12 copy LEAF_NODE 13 copy LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 CRYPTO_add ( & ret -> references , 1 , CRYPTO_LOCK_SSL_SESSION ) ; EXPR 12 CRYPTO_add ( & ret -> references , 1 , CRYPTO_LOCK_SSL_SESSION ) FUNCTION_CALL 13 CRYPTO_add ( & ret -> references , 1 , CRYPTO_LOCK_SSL_SESSION ) CALLEE 14 CRYPTO_add LEAF_NODE 15 CRYPTO_add LEAF_NODE 14 ( ARGUMENT 14 & ret -> references UNARY_EXPR 15 & ret -> references UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 ret -> references LEAF_NODE 17 ret LEAF_NODE 17 -> LEAF_NODE 17 references LEAF_NODE 14 , ARGUMENT 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 , ARGUMENT 14 CRYPTO_LOCK_SSL_SESSION FIELD 15 CRYPTO_LOCK_SSL_SESSION LEAF_NODE 16 CRYPTO_LOCK_SSL_SESSION LEAF_NODE 14 ) LEAF_NODE 12 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! ( s -> session_ctx -> session_cache_mode & SSL_SESS_CACHE_NO_INTERNAL_STORE ) EXPR 11 ! ( s -> session_ctx -> session_cache_mode & SSL_SESS_CACHE_NO_INTERNAL_STORE ) UNARY_EXPR 12 ! ( s -> session_ctx -> session_cache_mode & SSL_SESS_CACHE_NO_INTERNAL_STORE ) UNARY_OPERATOR 13 ! LEAF_NODE 14 ! LEAF_NODE 13 ( FIELD 13 s -> session_ctx -> session_cache_mode LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 session_ctx LEAF_NODE 14 -> LEAF_NODE 14 session_cache_mode LEAF_NODE 13 & FIELD 13 SSL_SESS_CACHE_NO_INTERNAL_STORE LEAF_NODE 14 SSL_SESS_CACHE_NO_INTERNAL_STORE LEAF_NODE 13 ) LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 SSL_CTX_add_session ( s -> session_ctx , ret ) ; EXPR 12 SSL_CTX_add_session ( s -> session_ctx , ret ) FUNCTION_CALL 13 SSL_CTX_add_session ( s -> session_ctx , ret ) CALLEE 14 SSL_CTX_add_session LEAF_NODE 15 SSL_CTX_add_session LEAF_NODE 14 ( ARGUMENT 14 s -> session_ctx FIELD 15 s -> session_ctx LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session_ctx LEAF_NODE 14 , ARGUMENT 14 ret FIELD 15 ret LEAF_NODE 16 ret LEAF_NODE 14 ) LEAF_NODE 12 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ret == NULL EXPR 5 ret == NULL FIELD 6 ret LEAF_NODE 7 ret EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto err ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 err LEAF_NODE 7 err LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ret -> sid_ctx_length != s -> sid_ctx_length || memcmp ( ret -> sid_ctx , s -> sid_ctx , ret -> sid_ctx_length ) EXPR 5 ret -> sid_ctx_length != s -> sid_ctx_length || memcmp ( ret -> sid_ctx , s -> sid_ctx , ret -> sid_ctx_length ) OR 6 ret -> sid_ctx_length != s -> sid_ctx_length || memcmp ( ret -> sid_ctx , s -> sid_ctx , ret -> sid_ctx_length ) EXPR 7 ret -> sid_ctx_length != s -> sid_ctx_length FIELD 8 ret -> sid_ctx_length LEAF_NODE 9 ret LEAF_NODE 9 -> LEAF_NODE 9 sid_ctx_length EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 s -> sid_ctx_length LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 sid_ctx_length LEAF_NODE 7 || EXPR 7 memcmp ( ret -> sid_ctx , s -> sid_ctx , ret -> sid_ctx_length ) FUNCTION_CALL 8 memcmp ( ret -> sid_ctx , s -> sid_ctx , ret -> sid_ctx_length ) CALLEE 9 memcmp LEAF_NODE 10 memcmp LEAF_NODE 9 ( ARGUMENT 9 ret -> sid_ctx FIELD 10 ret -> sid_ctx LEAF_NODE 11 ret LEAF_NODE 11 -> LEAF_NODE 11 sid_ctx LEAF_NODE 9 , ARGUMENT 9 s -> sid_ctx FIELD 10 s -> sid_ctx LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 sid_ctx LEAF_NODE 9 , ARGUMENT 9 ret -> sid_ctx_length FIELD 10 ret -> sid_ctx_length LEAF_NODE 11 ret LEAF_NODE 11 -> LEAF_NODE 11 sid_ctx_length LEAF_NODE 9 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( s -> verify_mode & SSL_VERIFY_PEER ) && s -> sid_ctx_length == 0 EXPR 5 ( s -> verify_mode & SSL_VERIFY_PEER ) && s -> sid_ctx_length == 0 AND 6 ( s -> verify_mode & SSL_VERIFY_PEER ) && s -> sid_ctx_length == 0 EXPR 7 ( s -> verify_mode & SSL_VERIFY_PEER ) LEAF_NODE 8 ( FIELD 8 s -> verify_mode LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 verify_mode LEAF_NODE 8 & FIELD 8 SSL_VERIFY_PEER LEAF_NODE 9 SSL_VERIFY_PEER LEAF_NODE 8 ) LEAF_NODE 7 && EXPR 7 s -> sid_ctx_length == 0 FIELD 8 s -> sid_ctx_length LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 sid_ctx_length EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL_GET_PREV_SESSION , SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED ) ; EXPR 7 SSLerr ( SSL_F_SSL_GET_PREV_SESSION , SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL_GET_PREV_SESSION , SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL_GET_PREV_SESSION FIELD 10 SSL_F_SSL_GET_PREV_SESSION LEAF_NODE 11 SSL_F_SSL_GET_PREV_SESSION LEAF_NODE 9 , ARGUMENT 9 SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED FIELD 10 SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED LEAF_NODE 11 SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 fatal = 1 ; EXPR 7 fatal = 1 ASSIGN 8 fatal = 1 LVAL 9 fatal FIELD 10 fatal LEAF_NODE 11 fatal ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ret -> cipher == NULL EXPR 5 ret -> cipher == NULL FIELD 6 ret -> cipher LEAF_NODE 7 ret LEAF_NODE 7 -> LEAF_NODE 7 cipher EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 unsigned char [ 5 ] buf , unsigned char * p ; INIT_DECL_LIST 7 unsigned char [ 5 ] buf , unsigned char * p VAR_DECL 8 unsigned char [ 5 ] buf TYPE 9 unsigned char [ 5 ] TYPE_NAME 10 unsigned char LEAF_NODE 11 unsigned LEAF_NODE 11 char TYPE_SUFFIX 10 [ 5 ] LEAF_NODE 11 [ FIELD 11 5 LEAF_NODE 12 5 LEAF_NODE 11 ] NAME 9 buf LEAF_NODE 10 buf LEAF_NODE 8 , VAR_DECL 8 unsigned char * p TYPE 9 unsigned char * TYPE_NAME 10 unsigned char LEAF_NODE 11 unsigned LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 p LEAF_NODE 10 p LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned long l ; VAR_DECL 7 unsigned long l TYPE 8 unsigned long TYPE_NAME 9 unsigned long LEAF_NODE 10 unsigned LEAF_NODE 10 long NAME 8 l LEAF_NODE 9 l LEAF_NODE 7 ; EXPR_STATEMENT 6 p = buf ; EXPR 7 p = buf ASSIGN 8 p = buf LVAL 9 p FIELD 10 p LEAF_NODE 11 p ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 buf FIELD 10 buf LEAF_NODE 11 buf LEAF_NODE 7 ; EXPR_STATEMENT 6 l = ret -> cipher_id ; EXPR 7 l = ret -> cipher_id ASSIGN 8 l = ret -> cipher_id LVAL 9 l FIELD 10 l LEAF_NODE 11 l ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ret -> cipher_id FIELD 10 ret -> cipher_id LEAF_NODE 11 ret LEAF_NODE 11 -> LEAF_NODE 11 cipher_id LEAF_NODE 7 ; EXPR_STATEMENT 6 l2n ( l , p ) ; EXPR 7 l2n ( l , p ) FUNCTION_CALL 8 l2n ( l , p ) CALLEE 9 l2n LEAF_NODE 10 l2n LEAF_NODE 9 ( ARGUMENT 9 l FIELD 10 l LEAF_NODE 11 l LEAF_NODE 9 , ARGUMENT 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( ret -> ssl_version >> 8 ) >= SSL3_VERSION_MAJOR EXPR 8 ( ret -> ssl_version >> 8 ) >= SSL3_VERSION_MAJOR LEAF_NODE 9 ( FIELD 9 ret -> ssl_version LEAF_NODE 10 ret LEAF_NODE 10 -> LEAF_NODE 10 ssl_version LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) REL_OPERATOR 9 >= LEAF_NODE 10 >= FIELD 9 SSL3_VERSION_MAJOR LEAF_NODE 10 SSL3_VERSION_MAJOR LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 ret -> cipher = ssl_get_cipher_by_char ( s , & ( buf [ 2 ] ) ) ; EXPR 9 ret -> cipher = ssl_get_cipher_by_char ( s , & ( buf [ 2 ] ) ) ASSIGN 10 ret -> cipher = ssl_get_cipher_by_char ( s , & ( buf [ 2 ] ) ) LVAL 11 ret -> cipher FIELD 12 ret -> cipher LEAF_NODE 13 ret LEAF_NODE 13 -> LEAF_NODE 13 cipher ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ssl_get_cipher_by_char ( s , & ( buf [ 2 ] ) ) FUNCTION_CALL 12 ssl_get_cipher_by_char ( s , & ( buf [ 2 ] ) ) CALLEE 13 ssl_get_cipher_by_char LEAF_NODE 14 ssl_get_cipher_by_char LEAF_NODE 13 ( ARGUMENT 13 s FIELD 14 s LEAF_NODE 15 s LEAF_NODE 13 , ARGUMENT 13 & ( buf [ 2 ] ) UNARY_EXPR 14 & ( buf [ 2 ] ) UNARY_OPERATOR 15 & LEAF_NODE 16 & LEAF_NODE 15 ( FIELD 15 buf [ 2 ] LEAF_NODE 16 buf LEAF_NODE 16 [ EXPR 16 2 FIELD 17 2 LEAF_NODE 18 2 LEAF_NODE 16 ] LEAF_NODE 15 ) LEAF_NODE 13 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 EXPR_STATEMENT 8 ret -> cipher = ssl_get_cipher_by_char ( s , & ( buf [ 1 ] ) ) ; EXPR 9 ret -> cipher = ssl_get_cipher_by_char ( s , & ( buf [ 1 ] ) ) ASSIGN 10 ret -> cipher = ssl_get_cipher_by_char ( s , & ( buf [ 1 ] ) ) LVAL 11 ret -> cipher FIELD 12 ret -> cipher LEAF_NODE 13 ret LEAF_NODE 13 -> LEAF_NODE 13 cipher ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ssl_get_cipher_by_char ( s , & ( buf [ 1 ] ) ) FUNCTION_CALL 12 ssl_get_cipher_by_char ( s , & ( buf [ 1 ] ) ) CALLEE 13 ssl_get_cipher_by_char LEAF_NODE 14 ssl_get_cipher_by_char LEAF_NODE 13 ( ARGUMENT 13 s FIELD 14 s LEAF_NODE 15 s LEAF_NODE 13 , ARGUMENT 13 & ( buf [ 1 ] ) UNARY_EXPR 14 & ( buf [ 1 ] ) UNARY_OPERATOR 15 & LEAF_NODE 16 & LEAF_NODE 15 ( FIELD 15 buf [ 1 ] LEAF_NODE 16 buf LEAF_NODE 16 [ EXPR 16 1 FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] LEAF_NODE 15 ) LEAF_NODE 13 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ret -> cipher == NULL EXPR 8 ret -> cipher == NULL FIELD 9 ret -> cipher LEAF_NODE 10 ret LEAF_NODE 10 -> LEAF_NODE 10 cipher EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 goto err ; KEYWORD 9 goto LEAF_NODE 10 goto DESTINATION 9 err LEAF_NODE 10 err LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ret -> timeout < ( long ) ( time ( NULL ) - ret -> time ) EXPR 5 ret -> timeout < ( long ) ( time ( NULL ) - ret -> time ) FIELD 6 ret -> timeout LEAF_NODE 7 ret LEAF_NODE 7 -> LEAF_NODE 7 timeout REL_OPERATOR 6 < LEAF_NODE 7 < LEAF_NODE 6 ( TYPE_NAME 6 long LEAF_NODE 7 long LEAF_NODE 6 ) LEAF_NODE 6 ( FUNCTION_CALL 6 time ( NULL ) CALLEE 7 time LEAF_NODE 8 time LEAF_NODE 7 ( ARGUMENT 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 7 ) LEAF_NODE 6 - FIELD 6 ret -> time LEAF_NODE 7 ret LEAF_NODE 7 -> LEAF_NODE 7 time LEAF_NODE 6 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 s -> session_ctx -> stats . sess_timeout ++ ; EXPR 7 s -> session_ctx -> stats . sess_timeout ++ FIELD 8 s -> session_ctx -> stats . sess_timeout ++ LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 session_ctx LEAF_NODE 9 -> LEAF_NODE 9 stats LEAF_NODE 9 . LEAF_NODE 9 sess_timeout LEAF_NODE 9 ++ LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 try_session_cache EXPR 8 try_session_cache FIELD 9 try_session_cache LEAF_NODE 10 try_session_cache LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SSL_CTX_remove_session ( s -> session_ctx , ret ) ; EXPR 10 SSL_CTX_remove_session ( s -> session_ctx , ret ) FUNCTION_CALL 11 SSL_CTX_remove_session ( s -> session_ctx , ret ) CALLEE 12 SSL_CTX_remove_session LEAF_NODE 13 SSL_CTX_remove_session LEAF_NODE 12 ( ARGUMENT 12 s -> session_ctx FIELD 13 s -> session_ctx LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 session_ctx LEAF_NODE 12 , ARGUMENT 12 ret FIELD 13 ret LEAF_NODE 14 ret LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 s -> session_ctx -> stats . sess_hit ++ ; EXPR 4 s -> session_ctx -> stats . sess_hit ++ FIELD 5 s -> session_ctx -> stats . sess_hit ++ LEAF_NODE 6 s LEAF_NODE 6 -> LEAF_NODE 6 session_ctx LEAF_NODE 6 -> LEAF_NODE 6 stats LEAF_NODE 6 . LEAF_NODE 6 sess_hit LEAF_NODE 6 ++ LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> session != NULL EXPR 5 s -> session != NULL FIELD 6 s -> session LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 session EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 SSL_SESSION_free ( s -> session ) ; EXPR 6 SSL_SESSION_free ( s -> session ) FUNCTION_CALL 7 SSL_SESSION_free ( s -> session ) CALLEE 8 SSL_SESSION_free LEAF_NODE 9 SSL_SESSION_free LEAF_NODE 8 ( ARGUMENT 8 s -> session FIELD 9 s -> session LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 session LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 3 s -> session = ret ; EXPR 4 s -> session = ret ASSIGN 5 s -> session = ret LVAL 6 s -> session FIELD 7 s -> session LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 session ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ret FIELD 7 ret LEAF_NODE 8 ret LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> verify_result = s -> session -> verify_result ; EXPR 4 s -> verify_result = s -> session -> verify_result ASSIGN 5 s -> verify_result = s -> session -> verify_result LVAL 6 s -> verify_result FIELD 7 s -> verify_result LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 verify_result ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 s -> session -> verify_result FIELD 7 s -> session -> verify_result LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 session LEAF_NODE 8 -> LEAF_NODE 8 verify_result LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LABEL 3 err : LEAF_NODE 4 err LEAF_NODE 4 : SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ret != NULL EXPR 5 ret != NULL FIELD 6 ret LEAF_NODE 7 ret EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 SSL_SESSION_free ( ret ) ; EXPR 7 SSL_SESSION_free ( ret ) FUNCTION_CALL 8 SSL_SESSION_free ( ret ) CALLEE 9 SSL_SESSION_free LEAF_NODE 10 SSL_SESSION_free LEAF_NODE 9 ( ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! try_session_cache EXPR 8 ! try_session_cache UNARY_EXPR 9 ! try_session_cache UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FIELD 10 try_session_cache LEAF_NODE 11 try_session_cache LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 s -> tlsext_ticket_expected = 1 ; EXPR 10 s -> tlsext_ticket_expected = 1 ASSIGN 11 s -> tlsext_ticket_expected = 1 LVAL 12 s -> tlsext_ticket_expected FIELD 13 s -> tlsext_ticket_expected LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 tlsext_ticket_expected ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 fatal EXPR 5 fatal FIELD 6 fatal LEAF_NODE 7 fatal LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return - 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 - 1 EXPR 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; LEAF_NODE 2 }", "idx": 76, "project": "openssl_ast_vul_function_test_22", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 AES_cfb128_encrypt LEAF_NODE 3 AES_cfb128_encrypt PARAMETER_LIST 2 ( const unsigned char * in , unsigned char * out , size_t length , const AES_KEY * key , unsigned char * ivec , int * num , const int enc ) LEAF_NODE 3 ( PARAMETER_DECL 3 const unsigned char * in TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 in LEAF_NODE 5 in LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * out TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 size_t length TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 length LEAF_NODE 5 length LEAF_NODE 3 , PARAMETER_DECL 3 const AES_KEY * key TYPE 4 const AES_KEY * TYPE_NAME 5 const AES_KEY LEAF_NODE 6 const LEAF_NODE 6 AES_KEY POINTER 5 * LEAF_NODE 6 * NAME 4 key LEAF_NODE 5 key LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * ivec TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 ivec LEAF_NODE 5 ivec LEAF_NODE 3 , PARAMETER_DECL 3 int * num TYPE 4 int * TYPE_NAME 5 int LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 num LEAF_NODE 5 num LEAF_NODE 3 , PARAMETER_DECL 3 const int enc TYPE 4 const int TYPE_NAME 5 const int LEAF_NODE 6 const LEAF_NODE 6 int NAME 4 enc LEAF_NODE 5 enc LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CRYPTO_cfb128_encrypt ( in , out , length , key , ivec , num , enc , ( block128_f ) AES_encrypt ) ; EXPR 4 CRYPTO_cfb128_encrypt ( in , out , length , key , ivec , num , enc , ( block128_f ) AES_encrypt ) FUNCTION_CALL 5 CRYPTO_cfb128_encrypt ( in , out , length , key , ivec , num , enc , ( block128_f ) AES_encrypt ) CALLEE 6 CRYPTO_cfb128_encrypt LEAF_NODE 7 CRYPTO_cfb128_encrypt LEAF_NODE 6 ( ARGUMENT 6 in FIELD 7 in LEAF_NODE 8 in LEAF_NODE 6 , ARGUMENT 6 out FIELD 7 out LEAF_NODE 8 out LEAF_NODE 6 , ARGUMENT 6 length FIELD 7 length LEAF_NODE 8 length LEAF_NODE 6 , ARGUMENT 6 key FIELD 7 key LEAF_NODE 8 key LEAF_NODE 6 , ARGUMENT 6 ivec FIELD 7 ivec LEAF_NODE 8 ivec LEAF_NODE 6 , ARGUMENT 6 num FIELD 7 num LEAF_NODE 8 num LEAF_NODE 6 , ARGUMENT 6 enc FIELD 7 enc LEAF_NODE 8 enc LEAF_NODE 6 , ARGUMENT 6 ( block128_f ) AES_encrypt LEAF_NODE 7 ( TYPE_NAME 7 block128_f LEAF_NODE 8 block128_f LEAF_NODE 7 ) FIELD 7 AES_encrypt LEAF_NODE 8 AES_encrypt LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 77, "project": "openssl_ast_normal_function_test_150", "target": 0}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } ; CLASS_DEF 2 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } CLASS_DEF 3 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } LEAF_NODE 4 struct CLASS_NAME 4 bio_addrinfo_st LEAF_NODE 5 bio_addrinfo_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; SIMPLE_DECL 5 int bai_family ; VAR_DECL 6 int bai_family TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_family LEAF_NODE 8 bai_family LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_socktype ; VAR_DECL 6 int bai_socktype TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_socktype LEAF_NODE 8 bai_socktype LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_protocol ; VAR_DECL 6 int bai_protocol TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_protocol LEAF_NODE 8 bai_protocol LEAF_NODE 6 ; SIMPLE_DECL 5 size_t bai_addrlen ; VAR_DECL 6 size_t bai_addrlen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 bai_addrlen LEAF_NODE 8 bai_addrlen LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr * bai_addr ; VAR_DECL 6 struct sockaddr * bai_addr TYPE 7 struct sockaddr * TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr POINTER 8 * LEAF_NODE 9 * NAME 7 bai_addr LEAF_NODE 8 bai_addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct bio_addrinfo_st * bai_next ; VAR_DECL 6 struct bio_addrinfo_st * bai_next TYPE 7 struct bio_addrinfo_st * TYPE_NAME 8 struct bio_addrinfo_st LEAF_NODE 9 struct LEAF_NODE 9 bio_addrinfo_st POINTER 8 * LEAF_NODE 9 * NAME 7 bai_next LEAF_NODE 8 bai_next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BIO_ADDRINFO ; VAR_DECL 2 struct bio_addrinfo_st BIO_ADDRINFO TYPE 3 struct bio_addrinfo_st TYPE_NAME 4 struct bio_addrinfo_st LEAF_NODE 5 struct LEAF_NODE 5 bio_addrinfo_st NAME 3 BIO_ADDRINFO LEAF_NODE 4 BIO_ADDRINFO LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t socklen_t ; VAR_DECL 2 uint32_t socklen_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 socklen_t LEAF_NODE 4 socklen_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } ; CLASS_DEF 2 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } CLASS_DEF 3 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } LEAF_NODE 4 enum CLASS_NAME 4 BIO_hostserv_priorities LEAF_NODE 5 BIO_hostserv_priorities LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV LEAF_NODE 5 BIO_PARSE_PRIO_HOST LEAF_NODE 5 , LEAF_NODE 5 BIO_PARSE_PRIO_SERV LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } ; CLASS_DEF 2 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } CLASS_DEF 3 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } LEAF_NODE 4 enum CLASS_NAME 4 BIO_lookup_type LEAF_NODE 5 BIO_lookup_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER LEAF_NODE 5 BIO_LOOKUP_CLIENT LEAF_NODE 5 , LEAF_NODE 5 BIO_LOOKUP_SERVER LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 BIO_bind LEAF_NODE 3 BIO_bind PARAMETER_LIST 2 ( int sock , const BIO_ADDR * addr , int options ) LEAF_NODE 3 ( PARAMETER_DECL 3 int sock TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 sock LEAF_NODE 5 sock LEAF_NODE 3 , PARAMETER_DECL 3 const BIO_ADDR * addr TYPE 4 const BIO_ADDR * TYPE_NAME 5 const BIO_ADDR LEAF_NODE 6 const LEAF_NODE 6 BIO_ADDR POINTER 5 * LEAF_NODE 6 * NAME 4 addr LEAF_NODE 5 addr LEAF_NODE 3 , PARAMETER_DECL 3 int options TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 options LEAF_NODE 5 options LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int on ; on = 1 ; VAR_DECL 4 int on ; on = 1 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 on LEAF_NODE 6 on LEAF_NODE 5 ; INIT 5 on = 1 ASSIGN 6 on = 1 LVAL 7 on NAME 8 on LEAF_NODE 9 on ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 sock == - 1 EXPR 5 sock == - 1 FIELD 6 sock LEAF_NODE 7 sock EQ_OPERATOR 6 == LEAF_NODE 7 == UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 BIOerr ( BIO_F_BIO_BIND , BIO_R_INVALID_SOCKET ) ; EXPR 7 BIOerr ( BIO_F_BIO_BIND , BIO_R_INVALID_SOCKET ) FUNCTION_CALL 8 BIOerr ( BIO_F_BIO_BIND , BIO_R_INVALID_SOCKET ) CALLEE 9 BIOerr LEAF_NODE 10 BIOerr LEAF_NODE 9 ( ARGUMENT 9 BIO_F_BIO_BIND FIELD 10 BIO_F_BIO_BIND LEAF_NODE 11 BIO_F_BIO_BIND LEAF_NODE 9 , ARGUMENT 9 BIO_R_INVALID_SOCKET FIELD 10 BIO_R_INVALID_SOCKET LEAF_NODE 11 BIO_R_INVALID_SOCKET LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 options & BIO_SOCK_REUSEADDR EXPR 5 options & BIO_SOCK_REUSEADDR FIELD 6 options LEAF_NODE 7 options LEAF_NODE 6 & FIELD 6 BIO_SOCK_REUSEADDR LEAF_NODE 7 BIO_SOCK_REUSEADDR LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 setsockopt ( sock , SOL_SOCKET , SO_REUSEADDR , ( const void * ) & on , sizeof ( on ) ) != 0 EXPR 8 setsockopt ( sock , SOL_SOCKET , SO_REUSEADDR , ( const void * ) & on , sizeof ( on ) ) != 0 FUNCTION_CALL 9 setsockopt ( sock , SOL_SOCKET , SO_REUSEADDR , ( const void * ) & on , sizeof ( on ) ) CALLEE 10 setsockopt LEAF_NODE 11 setsockopt LEAF_NODE 10 ( ARGUMENT 10 sock FIELD 11 sock LEAF_NODE 12 sock LEAF_NODE 10 , ARGUMENT 10 SOL_SOCKET FIELD 11 SOL_SOCKET LEAF_NODE 12 SOL_SOCKET LEAF_NODE 10 , ARGUMENT 10 SO_REUSEADDR FIELD 11 SO_REUSEADDR LEAF_NODE 12 SO_REUSEADDR LEAF_NODE 10 , ARGUMENT 10 ( const void * ) & on LEAF_NODE 11 ( TYPE_NAME 11 const void LEAF_NODE 12 const LEAF_NODE 12 void LEAF_NODE 11 * LEAF_NODE 11 ) UNARY_EXPR 11 & on UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 on LEAF_NODE 13 on LEAF_NODE 10 , ARGUMENT 10 sizeof ( on ) FUNCTION_CALL 11 sizeof ( on ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 on FIELD 13 on LEAF_NODE 14 on LEAF_NODE 12 ) LEAF_NODE 10 ) EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SYSerr ( SYS_F_SETSOCKOPT , get_last_socket_error ( ) ) ; EXPR 10 SYSerr ( SYS_F_SETSOCKOPT , get_last_socket_error ( ) ) FUNCTION_CALL 11 SYSerr ( SYS_F_SETSOCKOPT , get_last_socket_error ( ) ) CALLEE 12 SYSerr LEAF_NODE 13 SYSerr LEAF_NODE 12 ( ARGUMENT 12 SYS_F_SETSOCKOPT FIELD 13 SYS_F_SETSOCKOPT LEAF_NODE 14 SYS_F_SETSOCKOPT LEAF_NODE 12 , ARGUMENT 12 get_last_socket_error ( ) FUNCTION_CALL 13 get_last_socket_error ( ) CALLEE 14 get_last_socket_error LEAF_NODE 15 get_last_socket_error LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 BIOerr ( BIO_F_BIO_BIND , BIO_R_UNABLE_TO_REUSEADDR ) ; EXPR 10 BIOerr ( BIO_F_BIO_BIND , BIO_R_UNABLE_TO_REUSEADDR ) FUNCTION_CALL 11 BIOerr ( BIO_F_BIO_BIND , BIO_R_UNABLE_TO_REUSEADDR ) CALLEE 12 BIOerr LEAF_NODE 13 BIOerr LEAF_NODE 12 ( ARGUMENT 12 BIO_F_BIO_BIND FIELD 13 BIO_F_BIO_BIND LEAF_NODE 14 BIO_F_BIO_BIND LEAF_NODE 12 , ARGUMENT 12 BIO_R_UNABLE_TO_REUSEADDR FIELD 13 BIO_R_UNABLE_TO_REUSEADDR LEAF_NODE 14 BIO_R_UNABLE_TO_REUSEADDR LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return 0 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 0 EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 bind ( sock , BIO_ADDR_sockaddr ( addr ) , BIO_ADDR_sockaddr_size ( addr ) ) != 0 EXPR 5 bind ( sock , BIO_ADDR_sockaddr ( addr ) , BIO_ADDR_sockaddr_size ( addr ) ) != 0 FUNCTION_CALL 6 bind ( sock , BIO_ADDR_sockaddr ( addr ) , BIO_ADDR_sockaddr_size ( addr ) ) CALLEE 7 bind LEAF_NODE 8 bind LEAF_NODE 7 ( ARGUMENT 7 sock FIELD 8 sock LEAF_NODE 9 sock LEAF_NODE 7 , ARGUMENT 7 BIO_ADDR_sockaddr ( addr ) FUNCTION_CALL 8 BIO_ADDR_sockaddr ( addr ) CALLEE 9 BIO_ADDR_sockaddr LEAF_NODE 10 BIO_ADDR_sockaddr LEAF_NODE 9 ( ARGUMENT 9 addr FIELD 10 addr LEAF_NODE 11 addr LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 BIO_ADDR_sockaddr_size ( addr ) FUNCTION_CALL 8 BIO_ADDR_sockaddr_size ( addr ) CALLEE 9 BIO_ADDR_sockaddr_size LEAF_NODE 10 BIO_ADDR_sockaddr_size LEAF_NODE 9 ( ARGUMENT 9 addr FIELD 10 addr LEAF_NODE 11 addr LEAF_NODE 9 ) LEAF_NODE 7 ) EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 SYSerr ( SYS_F_BIND , get_last_socket_error ( ) ) ; EXPR 7 SYSerr ( SYS_F_BIND , get_last_socket_error ( ) ) FUNCTION_CALL 8 SYSerr ( SYS_F_BIND , get_last_socket_error ( ) ) CALLEE 9 SYSerr LEAF_NODE 10 SYSerr LEAF_NODE 9 ( ARGUMENT 9 SYS_F_BIND FIELD 10 SYS_F_BIND LEAF_NODE 11 SYS_F_BIND LEAF_NODE 9 , ARGUMENT 9 get_last_socket_error ( ) FUNCTION_CALL 10 get_last_socket_error ( ) CALLEE 11 get_last_socket_error LEAF_NODE 12 get_last_socket_error LEAF_NODE 11 ( LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 BIOerr ( BIO_F_BIO_BIND , BIO_R_UNABLE_TO_BIND_SOCKET ) ; EXPR 7 BIOerr ( BIO_F_BIO_BIND , BIO_R_UNABLE_TO_BIND_SOCKET ) FUNCTION_CALL 8 BIOerr ( BIO_F_BIO_BIND , BIO_R_UNABLE_TO_BIND_SOCKET ) CALLEE 9 BIOerr LEAF_NODE 10 BIOerr LEAF_NODE 9 ( ARGUMENT 9 BIO_F_BIO_BIND FIELD 10 BIO_F_BIO_BIND LEAF_NODE 11 BIO_F_BIO_BIND LEAF_NODE 9 , ARGUMENT 9 BIO_R_UNABLE_TO_BIND_SOCKET FIELD 10 BIO_R_UNABLE_TO_BIND_SOCKET LEAF_NODE 11 BIO_R_UNABLE_TO_BIND_SOCKET LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 78, "project": "openssl_ast_normal_function_test_65", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static BIO * LEAF_NODE 3 static TYPE_NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 3 * FUNCTION_NAME 2 bio_open_default_ LEAF_NODE 3 bio_open_default_ PARAMETER_LIST 2 ( const char * filename , char mode , int format , int quiet ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * filename TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 filename LEAF_NODE 5 filename LEAF_NODE 3 , PARAMETER_DECL 3 char mode TYPE 4 char TYPE_NAME 5 char LEAF_NODE 6 char NAME 4 mode LEAF_NODE 5 mode LEAF_NODE 3 , PARAMETER_DECL 3 int format TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 format LEAF_NODE 5 format LEAF_NODE 3 , PARAMETER_DECL 3 int quiet TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 quiet LEAF_NODE 5 quiet LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 BIO * ret ; VAR_DECL 4 BIO * ret TYPE 5 BIO * TYPE_NAME 6 BIO LEAF_NODE 7 BIO POINTER 6 * LEAF_NODE 7 * NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 filename == NULL || strcmp ( filename , \"-\" ) == 0 EXPR 5 filename == NULL || strcmp ( filename , \"-\" ) == 0 OR 6 filename == NULL || strcmp ( filename , \"-\" ) == 0 EXPR 7 filename == NULL FIELD 8 filename LEAF_NODE 9 filename EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 7 || EXPR 7 strcmp ( filename , \"-\" ) == 0 FUNCTION_CALL 8 strcmp ( filename , \"-\" ) CALLEE 9 strcmp LEAF_NODE 10 strcmp LEAF_NODE 9 ( ARGUMENT 9 filename FIELD 10 filename LEAF_NODE 11 filename LEAF_NODE 9 , ARGUMENT 9 \"-\" FIELD 10 \"-\" LEAF_NODE 11 \"-\" LEAF_NODE 9 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ret = mode == 'r' ? dup_bio_in ( format ) : dup_bio_out ( format ) ; EXPR 7 ret = mode == 'r' ? dup_bio_in ( format ) : dup_bio_out ( format ) ASSIGN 8 ret = mode == 'r' ? dup_bio_in ( format ) : dup_bio_out ( format ) LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 mode == 'r' ? dup_bio_in ( format ) : dup_bio_out ( format ) COND_EXPR 10 mode == 'r' ? dup_bio_in ( format ) : dup_bio_out ( format ) CONDITION 11 mode == 'r' FIELD 12 mode LEAF_NODE 13 mode EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 'r' LEAF_NODE 13 'r' LEAF_NODE 11 ? EXPR 11 dup_bio_in ( format ) FUNCTION_CALL 12 dup_bio_in ( format ) CALLEE 13 dup_bio_in LEAF_NODE 14 dup_bio_in LEAF_NODE 13 ( ARGUMENT 13 format FIELD 14 format LEAF_NODE 15 format LEAF_NODE 13 ) LEAF_NODE 11 : FUNCTION_CALL 11 dup_bio_out ( format ) CALLEE 12 dup_bio_out LEAF_NODE 13 dup_bio_out LEAF_NODE 12 ( ARGUMENT 12 format FIELD 13 format LEAF_NODE 14 format LEAF_NODE 12 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 quiet EXPR 8 quiet FIELD 9 quiet LEAF_NODE 10 quiet LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ERR_clear_error ( ) ; EXPR 10 ERR_clear_error ( ) FUNCTION_CALL 11 ERR_clear_error ( ) CALLEE 12 ERR_clear_error LEAF_NODE 13 ERR_clear_error LEAF_NODE 12 ( LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return ret ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 ret EXPR 11 ret FIELD 12 ret LEAF_NODE 13 ret LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ret != NULL EXPR 8 ret != NULL FIELD 9 ret LEAF_NODE 10 ret EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return ret ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 ret EXPR 10 ret FIELD 11 ret LEAF_NODE 12 ret LEAF_NODE 9 ; EXPR_STATEMENT 6 BIO_printf ( bio_err , \"Can't open %s, %s\\n\" , mode == 'r' ? \"stdin\" : \"stdout\" , strerror ( errno ) ) ; EXPR 7 BIO_printf ( bio_err , \"Can't open %s, %s\\n\" , mode == 'r' ? \"stdin\" : \"stdout\" , strerror ( errno ) ) FUNCTION_CALL 8 BIO_printf ( bio_err , \"Can't open %s, %s\\n\" , mode == 'r' ? \"stdin\" : \"stdout\" , strerror ( errno ) ) CALLEE 9 BIO_printf LEAF_NODE 10 BIO_printf LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 , ARGUMENT 9 \"Can't open %s, %s\\n\" FIELD 10 \"Can't open %s, %s\\n\" LEAF_NODE 11 \"Can't open %s, %s\\n\" LEAF_NODE 9 , ARGUMENT 9 mode == 'r' ? \"stdin\" : \"stdout\" COND_EXPR 10 mode == 'r' ? \"stdin\" : \"stdout\" CONDITION 11 mode == 'r' FIELD 12 mode LEAF_NODE 13 mode EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 'r' LEAF_NODE 13 'r' LEAF_NODE 11 ? EXPR 11 \"stdin\" FIELD 12 \"stdin\" LEAF_NODE 13 \"stdin\" LEAF_NODE 11 : FIELD 11 \"stdout\" LEAF_NODE 12 \"stdout\" LEAF_NODE 9 , ARGUMENT 9 strerror ( errno ) FUNCTION_CALL 10 strerror ( errno ) CALLEE 11 strerror LEAF_NODE 12 strerror LEAF_NODE 11 ( ARGUMENT 11 errno FIELD 12 errno LEAF_NODE 13 errno LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ret = BIO_new_file ( filename , modestr ( mode , format ) ) ; EXPR 7 ret = BIO_new_file ( filename , modestr ( mode , format ) ) ASSIGN 8 ret = BIO_new_file ( filename , modestr ( mode , format ) ) LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 BIO_new_file ( filename , modestr ( mode , format ) ) FUNCTION_CALL 10 BIO_new_file ( filename , modestr ( mode , format ) ) CALLEE 11 BIO_new_file LEAF_NODE 12 BIO_new_file LEAF_NODE 11 ( ARGUMENT 11 filename FIELD 12 filename LEAF_NODE 13 filename LEAF_NODE 11 , ARGUMENT 11 modestr ( mode , format ) FUNCTION_CALL 12 modestr ( mode , format ) CALLEE 13 modestr LEAF_NODE 14 modestr LEAF_NODE 13 ( ARGUMENT 13 mode FIELD 14 mode LEAF_NODE 15 mode LEAF_NODE 13 , ARGUMENT 13 format FIELD 14 format LEAF_NODE 15 format LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 quiet EXPR 8 quiet FIELD 9 quiet LEAF_NODE 10 quiet LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ERR_clear_error ( ) ; EXPR 10 ERR_clear_error ( ) FUNCTION_CALL 11 ERR_clear_error ( ) CALLEE 12 ERR_clear_error LEAF_NODE 13 ERR_clear_error LEAF_NODE 12 ( LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return ret ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 ret EXPR 11 ret FIELD 12 ret LEAF_NODE 13 ret LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ret != NULL EXPR 8 ret != NULL FIELD 9 ret LEAF_NODE 10 ret EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return ret ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 ret EXPR 10 ret FIELD 11 ret LEAF_NODE 12 ret LEAF_NODE 9 ; EXPR_STATEMENT 6 BIO_printf ( bio_err , \"Can't open %s for %s, %s\\n\" , filename , modeverb ( mode ) , strerror ( errno ) ) ; EXPR 7 BIO_printf ( bio_err , \"Can't open %s for %s, %s\\n\" , filename , modeverb ( mode ) , strerror ( errno ) ) FUNCTION_CALL 8 BIO_printf ( bio_err , \"Can't open %s for %s, %s\\n\" , filename , modeverb ( mode ) , strerror ( errno ) ) CALLEE 9 BIO_printf LEAF_NODE 10 BIO_printf LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 , ARGUMENT 9 \"Can't open %s for %s, %s\\n\" FIELD 10 \"Can't open %s for %s, %s\\n\" LEAF_NODE 11 \"Can't open %s for %s, %s\\n\" LEAF_NODE 9 , ARGUMENT 9 filename FIELD 10 filename LEAF_NODE 11 filename LEAF_NODE 9 , ARGUMENT 9 modeverb ( mode ) FUNCTION_CALL 10 modeverb ( mode ) CALLEE 11 modeverb LEAF_NODE 12 modeverb LEAF_NODE 11 ( ARGUMENT 11 mode FIELD 12 mode LEAF_NODE 13 mode LEAF_NODE 11 ) LEAF_NODE 9 , ARGUMENT 9 strerror ( errno ) FUNCTION_CALL 10 strerror ( errno ) CALLEE 11 strerror LEAF_NODE 12 strerror LEAF_NODE 11 ( ARGUMENT 11 errno FIELD 12 errno LEAF_NODE 13 errno LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ERR_print_errors ( bio_err ) ; EXPR 4 ERR_print_errors ( bio_err ) FUNCTION_CALL 5 ERR_print_errors ( bio_err ) CALLEE 6 ERR_print_errors LEAF_NODE 7 ERR_print_errors LEAF_NODE 6 ( ARGUMENT 6 bio_err FIELD 7 bio_err LEAF_NODE 8 bio_err LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return NULL ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 NULL EXPR 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 79, "project": "openssl_ast_normal_function_test_45", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_item_sign LEAF_NODE 3 ASN1_item_sign PARAMETER_LIST 2 ( const ASN1_ITEM * it , X509_ALGOR * algor1 , X509_ALGOR * algor2 , ASN1_BIT_STRING * signature , void * asn , EVP_PKEY * pkey , const EVP_MD * type ) LEAF_NODE 3 ( PARAMETER_DECL 3 const ASN1_ITEM * it TYPE 4 const ASN1_ITEM * TYPE_NAME 5 const ASN1_ITEM LEAF_NODE 6 const LEAF_NODE 6 ASN1_ITEM POINTER 5 * LEAF_NODE 6 * NAME 4 it LEAF_NODE 5 it LEAF_NODE 3 , PARAMETER_DECL 3 X509_ALGOR * algor1 TYPE 4 X509_ALGOR * TYPE_NAME 5 X509_ALGOR LEAF_NODE 6 X509_ALGOR POINTER 5 * LEAF_NODE 6 * NAME 4 algor1 LEAF_NODE 5 algor1 LEAF_NODE 3 , PARAMETER_DECL 3 X509_ALGOR * algor2 TYPE 4 X509_ALGOR * TYPE_NAME 5 X509_ALGOR LEAF_NODE 6 X509_ALGOR POINTER 5 * LEAF_NODE 6 * NAME 4 algor2 LEAF_NODE 5 algor2 LEAF_NODE 3 , PARAMETER_DECL 3 ASN1_BIT_STRING * signature TYPE 4 ASN1_BIT_STRING * TYPE_NAME 5 ASN1_BIT_STRING LEAF_NODE 6 ASN1_BIT_STRING POINTER 5 * LEAF_NODE 6 * NAME 4 signature LEAF_NODE 5 signature LEAF_NODE 3 , PARAMETER_DECL 3 void * asn TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 asn LEAF_NODE 5 asn LEAF_NODE 3 , PARAMETER_DECL 3 EVP_PKEY * pkey TYPE 4 EVP_PKEY * TYPE_NAME 5 EVP_PKEY LEAF_NODE 6 EVP_PKEY POINTER 5 * LEAF_NODE 6 * NAME 4 pkey LEAF_NODE 5 pkey LEAF_NODE 3 , PARAMETER_DECL 3 const EVP_MD * type TYPE 4 const EVP_MD * TYPE_NAME 5 const EVP_MD LEAF_NODE 6 const LEAF_NODE 6 EVP_MD POINTER 5 * LEAF_NODE 6 * NAME 4 type LEAF_NODE 5 type LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int rv ; VAR_DECL 4 int rv TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 rv LEAF_NODE 6 rv LEAF_NODE 4 ; SIMPLE_DECL 3 EVP_MD_CTX * ctx ; ctx = EVP_MD_CTX_new ( ) ; VAR_DECL 4 EVP_MD_CTX * ctx ; ctx = EVP_MD_CTX_new ( ) TYPE 5 EVP_MD_CTX * TYPE_NAME 6 EVP_MD_CTX LEAF_NODE 7 EVP_MD_CTX POINTER 6 * LEAF_NODE 7 * NAME 5 ctx LEAF_NODE 6 ctx LEAF_NODE 5 ; INIT 5 ctx = EVP_MD_CTX_new ( ) ASSIGN 6 ctx = EVP_MD_CTX_new ( ) LVAL 7 ctx NAME 8 ctx LEAF_NODE 9 ctx ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 EVP_MD_CTX_new ( ) FUNCTION_CALL 8 EVP_MD_CTX_new ( ) CALLEE 9 EVP_MD_CTX_new LEAF_NODE 10 EVP_MD_CTX_new LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ctx == NULL EXPR 5 ctx == NULL FIELD 6 ctx LEAF_NODE 7 ctx EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASN1err ( ASN1_F_ASN1_ITEM_SIGN , ERR_R_MALLOC_FAILURE ) ; EXPR 7 ASN1err ( ASN1_F_ASN1_ITEM_SIGN , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 8 ASN1err ( ASN1_F_ASN1_ITEM_SIGN , ERR_R_MALLOC_FAILURE ) CALLEE 9 ASN1err LEAF_NODE 10 ASN1err LEAF_NODE 9 ( ARGUMENT 9 ASN1_F_ASN1_ITEM_SIGN FIELD 10 ASN1_F_ASN1_ITEM_SIGN LEAF_NODE 11 ASN1_F_ASN1_ITEM_SIGN LEAF_NODE 9 , ARGUMENT 9 ERR_R_MALLOC_FAILURE FIELD 10 ERR_R_MALLOC_FAILURE LEAF_NODE 11 ERR_R_MALLOC_FAILURE LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! EVP_DigestSignInit ( ctx , NULL , type , NULL , pkey ) EXPR 5 ! EVP_DigestSignInit ( ctx , NULL , type , NULL , pkey ) UNARY_EXPR 6 ! EVP_DigestSignInit ( ctx , NULL , type , NULL , pkey ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 EVP_DigestSignInit ( ctx , NULL , type , NULL , pkey ) CALLEE 8 EVP_DigestSignInit LEAF_NODE 9 EVP_DigestSignInit LEAF_NODE 8 ( ARGUMENT 8 ctx FIELD 9 ctx LEAF_NODE 10 ctx LEAF_NODE 8 , ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 , ARGUMENT 8 type FIELD 9 type LEAF_NODE 10 type LEAF_NODE 8 , ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 , ARGUMENT 8 pkey FIELD 9 pkey LEAF_NODE 10 pkey LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 EVP_MD_CTX_free ( ctx ) ; EXPR 7 EVP_MD_CTX_free ( ctx ) FUNCTION_CALL 8 EVP_MD_CTX_free ( ctx ) CALLEE 9 EVP_MD_CTX_free LEAF_NODE 10 EVP_MD_CTX_free LEAF_NODE 9 ( ARGUMENT 9 ctx FIELD 10 ctx LEAF_NODE 11 ctx LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 rv = ASN1_item_sign_ctx ( it , algor1 , algor2 , signature , asn , ctx ) ; EXPR 4 rv = ASN1_item_sign_ctx ( it , algor1 , algor2 , signature , asn , ctx ) ASSIGN 5 rv = ASN1_item_sign_ctx ( it , algor1 , algor2 , signature , asn , ctx ) LVAL 6 rv FIELD 7 rv LEAF_NODE 8 rv ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ASN1_item_sign_ctx ( it , algor1 , algor2 , signature , asn , ctx ) FUNCTION_CALL 7 ASN1_item_sign_ctx ( it , algor1 , algor2 , signature , asn , ctx ) CALLEE 8 ASN1_item_sign_ctx LEAF_NODE 9 ASN1_item_sign_ctx LEAF_NODE 8 ( ARGUMENT 8 it FIELD 9 it LEAF_NODE 10 it LEAF_NODE 8 , ARGUMENT 8 algor1 FIELD 9 algor1 LEAF_NODE 10 algor1 LEAF_NODE 8 , ARGUMENT 8 algor2 FIELD 9 algor2 LEAF_NODE 10 algor2 LEAF_NODE 8 , ARGUMENT 8 signature FIELD 9 signature LEAF_NODE 10 signature LEAF_NODE 8 , ARGUMENT 8 asn FIELD 9 asn LEAF_NODE 10 asn LEAF_NODE 8 , ARGUMENT 8 ctx FIELD 9 ctx LEAF_NODE 10 ctx LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_MD_CTX_free ( ctx ) ; EXPR 4 EVP_MD_CTX_free ( ctx ) FUNCTION_CALL 5 EVP_MD_CTX_free ( ctx ) CALLEE 6 EVP_MD_CTX_free LEAF_NODE 7 EVP_MD_CTX_free LEAF_NODE 6 ( ARGUMENT 6 ctx FIELD 7 ctx LEAF_NODE 8 ctx LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return rv ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 rv EXPR 5 rv FIELD 6 rv LEAF_NODE 7 rv LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 80, "project": "openssl_ast_normal_function_test_174", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 size_t TYPE_NAME 3 size_t LEAF_NODE 4 size_t FUNCTION_NAME 2 CRYPTO_secure_actual_size LEAF_NODE 3 CRYPTO_secure_actual_size PARAMETER_LIST 2 ( void * ptr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * ptr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 ptr LEAF_NODE 5 ptr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t actual_size ; VAR_DECL 4 size_t actual_size TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 actual_size LEAF_NODE 6 actual_size LEAF_NODE 4 ; EXPR_STATEMENT 3 CRYPTO_THREAD_write_lock ( sec_malloc_lock ) ; EXPR 4 CRYPTO_THREAD_write_lock ( sec_malloc_lock ) FUNCTION_CALL 5 CRYPTO_THREAD_write_lock ( sec_malloc_lock ) CALLEE 6 CRYPTO_THREAD_write_lock LEAF_NODE 7 CRYPTO_THREAD_write_lock LEAF_NODE 6 ( ARGUMENT 6 sec_malloc_lock FIELD 7 sec_malloc_lock LEAF_NODE 8 sec_malloc_lock LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 actual_size = sh_actual_size ( ptr ) ; EXPR 4 actual_size = sh_actual_size ( ptr ) ASSIGN 5 actual_size = sh_actual_size ( ptr ) LVAL 6 actual_size FIELD 7 actual_size LEAF_NODE 8 actual_size ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 sh_actual_size ( ptr ) FUNCTION_CALL 7 sh_actual_size ( ptr ) CALLEE 8 sh_actual_size LEAF_NODE 9 sh_actual_size LEAF_NODE 8 ( ARGUMENT 8 ptr FIELD 9 ptr LEAF_NODE 10 ptr LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CRYPTO_THREAD_unlock ( sec_malloc_lock ) ; EXPR 4 CRYPTO_THREAD_unlock ( sec_malloc_lock ) FUNCTION_CALL 5 CRYPTO_THREAD_unlock ( sec_malloc_lock ) CALLEE 6 CRYPTO_THREAD_unlock LEAF_NODE 7 CRYPTO_THREAD_unlock LEAF_NODE 6 ( ARGUMENT 6 sec_malloc_lock FIELD 7 sec_malloc_lock LEAF_NODE 8 sec_malloc_lock LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return actual_size ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 actual_size EXPR 5 actual_size FIELD 6 actual_size LEAF_NODE 7 actual_size LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 81, "project": "openssl_ast_normal_function_test_126", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; SIMPLE_DECL 1 struct tag_name_st BASE_CLASSES { const char * strnam ; int len ; int tag ; } ; CLASS_DEF 2 struct tag_name_st BASE_CLASSES { const char * strnam ; int len ; int tag ; } CLASS_DEF 3 struct tag_name_st BASE_CLASSES { const char * strnam ; int len ; int tag ; } LEAF_NODE 4 struct CLASS_NAME 4 tag_name_st LEAF_NODE 5 tag_name_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 const char * strnam ; int len ; int tag ; SIMPLE_DECL 5 const char * strnam ; VAR_DECL 6 const char * strnam TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 strnam LEAF_NODE 8 strnam LEAF_NODE 6 ; SIMPLE_DECL 5 int len ; VAR_DECL 6 int len TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 len LEAF_NODE 8 len LEAF_NODE 6 ; SIMPLE_DECL 5 int tag ; VAR_DECL 6 int tag TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 tag LEAF_NODE 8 tag LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 asn1_str2tag LEAF_NODE 3 asn1_str2tag PARAMETER_LIST 2 ( const char * tagstr , int len ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * tagstr TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 tagstr LEAF_NODE 5 tagstr LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned int i ; VAR_DECL 4 unsigned int i TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; LEAF_NODE 3 static LEAF_NODE 3 const LEAF_NODE 3 struct LEAF_NODE 3 tag_name_st LEAF_NODE 3 * LEAF_NODE 3 tntmp LEAF_NODE 3 , LEAF_NODE 3 tnst LEAF_NODE 3 [ LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"BOOL\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_BOOLEAN LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"BOOLEAN\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_BOOLEAN LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"NULL\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_NULL LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"INT\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_INTEGER LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"INTEGER\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_INTEGER LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"ENUM\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_ENUMERATED LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"ENUMERATED\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_ENUMERATED LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"OID\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_OBJECT LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"OBJECT\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_OBJECT LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"UTCTIME\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_UTCTIME LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"UTC\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_UTCTIME LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"GENERALIZEDTIME\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_GENERALIZEDTIME LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"GENTIME\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_GENERALIZEDTIME LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"OCT\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_OCTET_STRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"OCTETSTRING\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_OCTET_STRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"BITSTR\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_BIT_STRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"BITSTRING\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_BIT_STRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"UNIVERSALSTRING\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_UNIVERSALSTRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"UNIV\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_UNIVERSALSTRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"IA5\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_IA5STRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"IA5STRING\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_IA5STRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"UTF8\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_UTF8STRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"UTF8String\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_UTF8STRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"BMP\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_BMPSTRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"BMPSTRING\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_BMPSTRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"VISIBLESTRING\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_VISIBLESTRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"VISIBLE\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_VISIBLESTRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"PRINTABLESTRING\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_PRINTABLESTRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"PRINTABLE\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_PRINTABLESTRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"T61\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_T61STRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"T61STRING\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_T61STRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"TELETEXSTRING\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_T61STRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"GeneralString\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_GENERALSTRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"GENSTR\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_GENERALSTRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"NUMERIC\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_NUMERICSTRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"NUMERICSTRING\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_NUMERICSTRING LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"SEQUENCE\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_SEQUENCE LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"SEQ\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_SEQUENCE LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"SET\" LEAF_NODE 4 , LEAF_NODE 4 V_ASN1_SET LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"EXP\" LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_FLAG_EXP LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"EXPLICIT\" LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_FLAG_EXP LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"IMP\" LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_FLAG_IMP LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"IMPLICIT\" LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_FLAG_IMP LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"OCTWRAP\" LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_FLAG_OCTWRAP LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"SEQWRAP\" LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_FLAG_SEQWRAP LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"SETWRAP\" LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_FLAG_SETWRAP LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"BITWRAP\" LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_FLAG_BITWRAP LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"FORM\" LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_FLAG_FORMAT LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_STR LEAF_NODE 4 ( LEAF_NODE 4 \"FORMAT\" LEAF_NODE 4 , LEAF_NODE 4 ASN1_GEN_FLAG_FORMAT LEAF_NODE 4 ) LEAF_NODE 4 , LEAF_NODE 3 } LEAF_NODE 3 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 len == - 1 EXPR 5 len == - 1 FIELD 6 len LEAF_NODE 7 len EQ_OPERATOR 6 == LEAF_NODE 7 == UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 len = strlen ( tagstr ) ; EXPR 6 len = strlen ( tagstr ) ASSIGN 7 len = strlen ( tagstr ) LVAL 8 len FIELD 9 len LEAF_NODE 10 len ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( tagstr ) FUNCTION_CALL 9 strlen ( tagstr ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 tagstr FIELD 11 tagstr LEAF_NODE 12 tagstr LEAF_NODE 10 ) LEAF_NODE 6 ; EXPR_STATEMENT 3 tntmp = tnst ; EXPR 4 tntmp = tnst ASSIGN 5 tntmp = tnst LVAL 6 tntmp FIELD 7 tntmp LEAF_NODE 8 tntmp ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 tnst FIELD 7 tnst LEAF_NODE 8 tnst LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < OSSL_NELEM ( tnst ) EXPR 5 i < OSSL_NELEM ( tnst ) FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FUNCTION_CALL 6 OSSL_NELEM ( tnst ) CALLEE 7 OSSL_NELEM LEAF_NODE 8 OSSL_NELEM LEAF_NODE 7 ( ARGUMENT 7 tnst FIELD 8 tnst LEAF_NODE 9 tnst LEAF_NODE 7 ) LEAF_NODE 4 ; FOR_EXPR 4 i ++ , tntmp ++ EXPR 5 i ++ , tntmp ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 6 , FIELD 6 tntmp ++ LEAF_NODE 7 tntmp LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( len == tntmp -> len ) && ( strncmp ( tntmp -> strnam , tagstr , len ) == 0 ) EXPR 8 ( len == tntmp -> len ) && ( strncmp ( tntmp -> strnam , tagstr , len ) == 0 ) AND 9 ( len == tntmp -> len ) && ( strncmp ( tntmp -> strnam , tagstr , len ) == 0 ) EXPR 10 ( len == tntmp -> len ) LEAF_NODE 11 ( FIELD 11 len LEAF_NODE 12 len EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 tntmp -> len LEAF_NODE 12 tntmp LEAF_NODE 12 -> LEAF_NODE 12 len LEAF_NODE 11 ) LEAF_NODE 10 && EXPR 10 ( strncmp ( tntmp -> strnam , tagstr , len ) == 0 ) LEAF_NODE 11 ( FUNCTION_CALL 11 strncmp ( tntmp -> strnam , tagstr , len ) CALLEE 12 strncmp LEAF_NODE 13 strncmp LEAF_NODE 12 ( ARGUMENT 12 tntmp -> strnam FIELD 13 tntmp -> strnam LEAF_NODE 14 tntmp LEAF_NODE 14 -> LEAF_NODE 14 strnam LEAF_NODE 12 , ARGUMENT 12 tagstr FIELD 13 tagstr LEAF_NODE 14 tagstr LEAF_NODE 12 , ARGUMENT 12 len FIELD 13 len LEAF_NODE 14 len LEAF_NODE 12 ) EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return tntmp -> tag ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 tntmp -> tag EXPR 10 tntmp -> tag FIELD 11 tntmp -> tag LEAF_NODE 12 tntmp LEAF_NODE 12 -> LEAF_NODE 12 tag LEAF_NODE 9 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return - 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 - 1 EXPR 5 - 1 UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 82, "project": "openssl_ast_normal_function_test_18", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_STRING_set_default_mask_asc LEAF_NODE 3 ASN1_STRING_set_default_mask_asc PARAMETER_LIST 2 ( const char * p ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * p TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 p LEAF_NODE 5 p LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned long mask ; VAR_DECL 4 unsigned long mask TYPE 5 unsigned long TYPE_NAME 6 unsigned long LEAF_NODE 7 unsigned LEAF_NODE 7 long NAME 5 mask LEAF_NODE 6 mask LEAF_NODE 4 ; SIMPLE_DECL 3 char * end ; VAR_DECL 4 char * end TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 end LEAF_NODE 6 end LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 strncmp ( p , \"MASK:\" , 5 ) == 0 EXPR 5 strncmp ( p , \"MASK:\" , 5 ) == 0 FUNCTION_CALL 6 strncmp ( p , \"MASK:\" , 5 ) CALLEE 7 strncmp LEAF_NODE 8 strncmp LEAF_NODE 7 ( ARGUMENT 7 p FIELD 8 p LEAF_NODE 9 p LEAF_NODE 7 , ARGUMENT 7 \"MASK:\" FIELD 8 \"MASK:\" LEAF_NODE 9 \"MASK:\" LEAF_NODE 7 , ARGUMENT 7 5 FIELD 8 5 LEAF_NODE 9 5 LEAF_NODE 7 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! p [ 5 ] EXPR 8 ! p [ 5 ] UNARY_EXPR 9 ! p [ 5 ] UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FIELD 10 p [ 5 ] LEAF_NODE 11 p LEAF_NODE 11 [ EXPR 11 5 FIELD 12 5 LEAF_NODE 13 5 LEAF_NODE 11 ] LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return 0 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 0 EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ; EXPR_STATEMENT 6 mask = strtoul ( p + 5 , & end , 0 ) ; EXPR 7 mask = strtoul ( p + 5 , & end , 0 ) ASSIGN 8 mask = strtoul ( p + 5 , & end , 0 ) LVAL 9 mask FIELD 10 mask LEAF_NODE 11 mask ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 strtoul ( p + 5 , & end , 0 ) FUNCTION_CALL 10 strtoul ( p + 5 , & end , 0 ) CALLEE 11 strtoul LEAF_NODE 12 strtoul LEAF_NODE 11 ( ARGUMENT 11 p + 5 FIELD 12 p LEAF_NODE 13 p LEAF_NODE 12 + FIELD 12 5 LEAF_NODE 13 5 LEAF_NODE 11 , ARGUMENT 11 & end UNARY_EXPR 12 & end UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 end LEAF_NODE 14 end LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * end EXPR 8 * end UNARY_EXPR 9 * end UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 end LEAF_NODE 11 end LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return 0 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 0 EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 strcmp ( p , \"nombstr\" ) == 0 EXPR 7 strcmp ( p , \"nombstr\" ) == 0 FUNCTION_CALL 8 strcmp ( p , \"nombstr\" ) CALLEE 9 strcmp LEAF_NODE 10 strcmp LEAF_NODE 9 ( ARGUMENT 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 , ARGUMENT 9 \"nombstr\" FIELD 10 \"nombstr\" LEAF_NODE 11 \"nombstr\" LEAF_NODE 9 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ) STATEMENTS 6 EXPR_STATEMENT 7 mask = ~ ( ( unsigned long ) ( B_ASN1_BMPSTRING | B_ASN1_UTF8STRING ) ) ; EXPR 8 mask = ~ ( ( unsigned long ) ( B_ASN1_BMPSTRING | B_ASN1_UTF8STRING ) ) ASSIGN 9 mask = ~ ( ( unsigned long ) ( B_ASN1_BMPSTRING | B_ASN1_UTF8STRING ) ) LVAL 10 mask FIELD 11 mask LEAF_NODE 12 mask ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ~ ( ( unsigned long ) ( B_ASN1_BMPSTRING | B_ASN1_UTF8STRING ) ) UNARY_EXPR 11 ~ ( ( unsigned long ) ( B_ASN1_BMPSTRING | B_ASN1_UTF8STRING ) ) UNARY_OPERATOR 12 ~ LEAF_NODE 13 ~ LEAF_NODE 12 ( LEAF_NODE 12 ( TYPE_NAME 12 unsigned long LEAF_NODE 13 unsigned LEAF_NODE 13 long LEAF_NODE 12 ) LEAF_NODE 12 ( BIT_OR 12 B_ASN1_BMPSTRING | B_ASN1_UTF8STRING BIT_OR_ELEM 13 B_ASN1_BMPSTRING FIELD 14 B_ASN1_BMPSTRING LEAF_NODE 15 B_ASN1_BMPSTRING LEAF_NODE 13 | BIT_OR_ELEM 13 B_ASN1_UTF8STRING FIELD 14 B_ASN1_UTF8STRING LEAF_NODE 15 B_ASN1_UTF8STRING LEAF_NODE 12 ) LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 strcmp ( p , \"pkix\" ) == 0 EXPR 7 strcmp ( p , \"pkix\" ) == 0 FUNCTION_CALL 8 strcmp ( p , \"pkix\" ) CALLEE 9 strcmp LEAF_NODE 10 strcmp LEAF_NODE 9 ( ARGUMENT 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 , ARGUMENT 9 \"pkix\" FIELD 10 \"pkix\" LEAF_NODE 11 \"pkix\" LEAF_NODE 9 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ) STATEMENTS 6 EXPR_STATEMENT 7 mask = ~ ( ( unsigned long ) B_ASN1_T61STRING ) ; EXPR 8 mask = ~ ( ( unsigned long ) B_ASN1_T61STRING ) ASSIGN 9 mask = ~ ( ( unsigned long ) B_ASN1_T61STRING ) LVAL 10 mask FIELD 11 mask LEAF_NODE 12 mask ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ~ ( ( unsigned long ) B_ASN1_T61STRING ) UNARY_EXPR 11 ~ ( ( unsigned long ) B_ASN1_T61STRING ) UNARY_OPERATOR 12 ~ LEAF_NODE 13 ~ LEAF_NODE 12 ( LEAF_NODE 12 ( TYPE_NAME 12 unsigned long LEAF_NODE 13 unsigned LEAF_NODE 13 long LEAF_NODE 12 ) FIELD 12 B_ASN1_T61STRING LEAF_NODE 13 B_ASN1_T61STRING LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 strcmp ( p , \"utf8only\" ) == 0 EXPR 7 strcmp ( p , \"utf8only\" ) == 0 FUNCTION_CALL 8 strcmp ( p , \"utf8only\" ) CALLEE 9 strcmp LEAF_NODE 10 strcmp LEAF_NODE 9 ( ARGUMENT 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 , ARGUMENT 9 \"utf8only\" FIELD 10 \"utf8only\" LEAF_NODE 11 \"utf8only\" LEAF_NODE 9 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ) STATEMENTS 6 EXPR_STATEMENT 7 mask = B_ASN1_UTF8STRING ; EXPR 8 mask = B_ASN1_UTF8STRING ASSIGN 9 mask = B_ASN1_UTF8STRING LVAL 10 mask FIELD 11 mask LEAF_NODE 12 mask ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 B_ASN1_UTF8STRING FIELD 11 B_ASN1_UTF8STRING LEAF_NODE 12 B_ASN1_UTF8STRING LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 strcmp ( p , \"default\" ) == 0 EXPR 7 strcmp ( p , \"default\" ) == 0 FUNCTION_CALL 8 strcmp ( p , \"default\" ) CALLEE 9 strcmp LEAF_NODE 10 strcmp LEAF_NODE 9 ( ARGUMENT 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 , ARGUMENT 9 \"default\" FIELD 10 \"default\" LEAF_NODE 11 \"default\" LEAF_NODE 9 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ) STATEMENTS 6 EXPR_STATEMENT 7 mask = 0xFFFFFFFFL ; EXPR 8 mask = 0xFFFFFFFFL ASSIGN 9 mask = 0xFFFFFFFFL LVAL 10 mask FIELD 11 mask LEAF_NODE 12 mask ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0xFFFFFFFFL FIELD 11 0xFFFFFFFFL LEAF_NODE 12 0xFFFFFFFFL LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; EXPR_STATEMENT 3 ASN1_STRING_set_default_mask ( mask ) ; EXPR 4 ASN1_STRING_set_default_mask ( mask ) FUNCTION_CALL 5 ASN1_STRING_set_default_mask ( mask ) CALLEE 6 ASN1_STRING_set_default_mask LEAF_NODE 7 ASN1_STRING_set_default_mask LEAF_NODE 6 ( ARGUMENT 6 mask FIELD 7 mask LEAF_NODE 8 mask LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 83, "project": "openssl_ast_normal_function_test_5", "target": 0}
{"func": "SIMPLE_DECL 1 SRTP_PROTECTION_PROFILE * p ; VAR_DECL 2 SRTP_PROTECTION_PROFILE * p TYPE 3 SRTP_PROTECTION_PROFILE * TYPE_NAME 4 SRTP_PROTECTION_PROFILE LEAF_NODE 5 SRTP_PROTECTION_PROFILE POINTER 4 * LEAF_NODE 5 * NAME 3 p LEAF_NODE 4 p LEAF_NODE 2 ;", "idx": 84, "project": "openssl_ast_vul_function_test_21", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 PKCS12_PBE_add LEAF_NODE 3 PKCS12_PBE_add PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 }", "idx": 85, "project": "openssl_ast_normal_function_test_76", "target": 0}
{"func": "SIMPLE_DECL 1 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } ; CLASS_DEF 2 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } CLASS_DEF 3 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } LEAF_NODE 4 struct CLASS_NAME 4 async_ctrs LEAF_NODE 5 async_ctrs LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned int rctr ; unsigned int wctr ; SIMPLE_DECL 5 unsigned int rctr ; VAR_DECL 6 unsigned int rctr TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rctr LEAF_NODE 8 rctr LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int wctr ; VAR_DECL 6 unsigned int wctr TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 wctr LEAF_NODE 8 wctr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_job_st ASYNC_JOB ; VAR_DECL 2 struct async_job_st ASYNC_JOB TYPE 3 struct async_job_st TYPE_NAME 4 struct async_job_st LEAF_NODE 5 struct LEAF_NODE 5 async_job_st NAME 3 ASYNC_JOB LEAF_NODE 4 ASYNC_JOB LEAF_NODE 2 ; SIMPLE_DECL 1 ASYNC_JOB * currjob ; currjob = NULL ; VAR_DECL 2 ASYNC_JOB * currjob ; currjob = NULL TYPE 3 ASYNC_JOB * TYPE_NAME 4 ASYNC_JOB LEAF_NODE 5 ASYNC_JOB POINTER 4 * LEAF_NODE 5 * NAME 3 currjob LEAF_NODE 4 currjob LEAF_NODE 3 ; INIT 3 currjob = NULL ASSIGN 4 currjob = NULL LVAL 5 currjob NAME 6 currjob LEAF_NODE 7 currjob ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_wait_ctx_st BASE_CLASSES { struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; } ; CLASS_DEF 2 struct async_wait_ctx_st BASE_CLASSES { struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; } CLASS_DEF 3 struct async_wait_ctx_st BASE_CLASSES { struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; } LEAF_NODE 4 struct CLASS_NAME 4 async_wait_ctx_st LEAF_NODE 5 async_wait_ctx_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; SIMPLE_DECL 5 struct fd_lookup_st * fds ; VAR_DECL 6 struct fd_lookup_st * fds TYPE 7 struct fd_lookup_st * TYPE_NAME 8 struct fd_lookup_st LEAF_NODE 9 struct LEAF_NODE 9 fd_lookup_st POINTER 8 * LEAF_NODE 9 * NAME 7 fds LEAF_NODE 8 fds LEAF_NODE 6 ; SIMPLE_DECL 5 size_t numadd ; VAR_DECL 6 size_t numadd TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 numadd LEAF_NODE 8 numadd LEAF_NODE 6 ; SIMPLE_DECL 5 size_t numdel ; VAR_DECL 6 size_t numdel TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 numdel LEAF_NODE 8 numdel LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 save_current LEAF_NODE 3 save_current PARAMETER_LIST 2 ( void * args ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * args TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 args LEAF_NODE 5 args LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 currjob = ASYNC_get_current_job ( ) ; EXPR 4 currjob = ASYNC_get_current_job ( ) ASSIGN 5 currjob = ASYNC_get_current_job ( ) LVAL 6 currjob FIELD 7 currjob LEAF_NODE 8 currjob ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ASYNC_get_current_job ( ) FUNCTION_CALL 7 ASYNC_get_current_job ( ) CALLEE 8 ASYNC_get_current_job LEAF_NODE 9 ASYNC_get_current_job LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ASYNC_pause_job ( ) ; EXPR 4 ASYNC_pause_job ( ) FUNCTION_CALL 5 ASYNC_pause_job ( ) CALLEE 6 ASYNC_pause_job LEAF_NODE 7 ASYNC_pause_job LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 } SIMPLE_DECL 1 struct async_wait_ctx_st ASYNC_WAIT_CTX ; VAR_DECL 2 struct async_wait_ctx_st ASYNC_WAIT_CTX TYPE 3 struct async_wait_ctx_st TYPE_NAME 4 struct async_wait_ctx_st LEAF_NODE 5 struct LEAF_NODE 5 async_wait_ctx_st NAME 3 ASYNC_WAIT_CTX LEAF_NODE 4 ASYNC_WAIT_CTX LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 waitfd LEAF_NODE 3 waitfd PARAMETER_LIST 2 ( void * args ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * args TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 args LEAF_NODE 5 args LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 ASYNC_JOB * job ; VAR_DECL 4 ASYNC_JOB * job TYPE 5 ASYNC_JOB * TYPE_NAME 6 ASYNC_JOB LEAF_NODE 7 ASYNC_JOB POINTER 6 * LEAF_NODE 7 * NAME 5 job LEAF_NODE 6 job LEAF_NODE 4 ; SIMPLE_DECL 3 ASYNC_WAIT_CTX * waitctx ; VAR_DECL 4 ASYNC_WAIT_CTX * waitctx TYPE 5 ASYNC_WAIT_CTX * TYPE_NAME 6 ASYNC_WAIT_CTX LEAF_NODE 7 ASYNC_WAIT_CTX POINTER 6 * LEAF_NODE 7 * NAME 5 waitctx LEAF_NODE 6 waitctx LEAF_NODE 4 ; EXPR_STATEMENT 3 ASYNC_pause_job ( ) ; EXPR 4 ASYNC_pause_job ( ) FUNCTION_CALL 5 ASYNC_pause_job ( ) CALLEE 6 ASYNC_pause_job LEAF_NODE 7 ASYNC_pause_job LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 job = ASYNC_get_current_job ( ) ; EXPR 4 job = ASYNC_get_current_job ( ) ASSIGN 5 job = ASYNC_get_current_job ( ) LVAL 6 job FIELD 7 job LEAF_NODE 8 job ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ASYNC_get_current_job ( ) FUNCTION_CALL 7 ASYNC_get_current_job ( ) CALLEE 8 ASYNC_get_current_job LEAF_NODE 9 ASYNC_get_current_job LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 job == NULL EXPR 5 job == NULL FIELD 6 job LEAF_NODE 7 job EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; EXPR_STATEMENT 3 waitctx = ASYNC_get_wait_ctx ( job ) ; EXPR 4 waitctx = ASYNC_get_wait_ctx ( job ) ASSIGN 5 waitctx = ASYNC_get_wait_ctx ( job ) LVAL 6 waitctx FIELD 7 waitctx LEAF_NODE 8 waitctx ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ASYNC_get_wait_ctx ( job ) FUNCTION_CALL 7 ASYNC_get_wait_ctx ( job ) CALLEE 8 ASYNC_get_wait_ctx LEAF_NODE 9 ASYNC_get_wait_ctx LEAF_NODE 8 ( ARGUMENT 8 job FIELD 9 job LEAF_NODE 10 job LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 waitctx == NULL EXPR 5 waitctx == NULL FIELD 6 waitctx LEAF_NODE 7 waitctx EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ASYNC_WAIT_CTX_set_wait_fd ( waitctx , waitctx , MAGIC_WAIT_FD , NULL , NULL ) EXPR 5 ! ASYNC_WAIT_CTX_set_wait_fd ( waitctx , waitctx , MAGIC_WAIT_FD , NULL , NULL ) UNARY_EXPR 6 ! ASYNC_WAIT_CTX_set_wait_fd ( waitctx , waitctx , MAGIC_WAIT_FD , NULL , NULL ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 ASYNC_WAIT_CTX_set_wait_fd ( waitctx , waitctx , MAGIC_WAIT_FD , NULL , NULL ) CALLEE 8 ASYNC_WAIT_CTX_set_wait_fd LEAF_NODE 9 ASYNC_WAIT_CTX_set_wait_fd LEAF_NODE 8 ( ARGUMENT 8 waitctx FIELD 9 waitctx LEAF_NODE 10 waitctx LEAF_NODE 8 , ARGUMENT 8 waitctx FIELD 9 waitctx LEAF_NODE 10 waitctx LEAF_NODE 8 , ARGUMENT 8 MAGIC_WAIT_FD FIELD 9 MAGIC_WAIT_FD LEAF_NODE 10 MAGIC_WAIT_FD LEAF_NODE 8 , ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 , ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; EXPR_STATEMENT 3 ASYNC_pause_job ( ) ; EXPR 4 ASYNC_pause_job ( ) FUNCTION_CALL 5 ASYNC_pause_job ( ) CALLEE 6 ASYNC_pause_job LEAF_NODE 7 ASYNC_pause_job LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ASYNC_WAIT_CTX_clear_fd ( waitctx , waitctx ) EXPR 5 ! ASYNC_WAIT_CTX_clear_fd ( waitctx , waitctx ) UNARY_EXPR 6 ! ASYNC_WAIT_CTX_clear_fd ( waitctx , waitctx ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 ASYNC_WAIT_CTX_clear_fd ( waitctx , waitctx ) CALLEE 8 ASYNC_WAIT_CTX_clear_fd LEAF_NODE 9 ASYNC_WAIT_CTX_clear_fd LEAF_NODE 8 ( ARGUMENT 8 waitctx FIELD 9 waitctx LEAF_NODE 10 waitctx LEAF_NODE 8 , ARGUMENT 8 waitctx FIELD 9 waitctx LEAF_NODE 10 waitctx LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_ASYNC_WAIT_CTX_get_all_fds LEAF_NODE 3 test_ASYNC_WAIT_CTX_get_all_fds PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 ASYNC_JOB * job ; job = NULL ; VAR_DECL 4 ASYNC_JOB * job ; job = NULL TYPE 5 ASYNC_JOB * TYPE_NAME 6 ASYNC_JOB LEAF_NODE 7 ASYNC_JOB POINTER 6 * LEAF_NODE 7 * NAME 5 job LEAF_NODE 6 job LEAF_NODE 5 ; INIT 5 job = NULL ASSIGN 6 job = NULL LVAL 7 job NAME 8 job LEAF_NODE 9 job ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int funcret ; VAR_DECL 4 int funcret TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 funcret LEAF_NODE 6 funcret LEAF_NODE 4 ; SIMPLE_DECL 3 ASYNC_WAIT_CTX * waitctx ; waitctx = NULL ; VAR_DECL 4 ASYNC_WAIT_CTX * waitctx ; waitctx = NULL TYPE 5 ASYNC_WAIT_CTX * TYPE_NAME 6 ASYNC_WAIT_CTX LEAF_NODE 7 ASYNC_WAIT_CTX POINTER 6 * LEAF_NODE 7 * NAME 5 waitctx LEAF_NODE 6 waitctx LEAF_NODE 5 ; INIT 5 waitctx = NULL ASSIGN 6 waitctx = NULL LVAL 7 waitctx NAME 8 waitctx LEAF_NODE 9 waitctx ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 OSSL_ASYNC_FD fd ; fd = OSSL_BAD_ASYNC_FD , OSSL_ASYNC_FD delfd ; delfd = OSSL_BAD_ASYNC_FD ; INIT_DECL_LIST 4 OSSL_ASYNC_FD fd ; fd = OSSL_BAD_ASYNC_FD , OSSL_ASYNC_FD delfd ; delfd = OSSL_BAD_ASYNC_FD VAR_DECL 5 OSSL_ASYNC_FD fd ; fd = OSSL_BAD_ASYNC_FD TYPE 6 OSSL_ASYNC_FD TYPE_NAME 7 OSSL_ASYNC_FD LEAF_NODE 8 OSSL_ASYNC_FD NAME 6 fd LEAF_NODE 7 fd LEAF_NODE 6 ; INIT 6 fd = OSSL_BAD_ASYNC_FD ASSIGN 7 fd = OSSL_BAD_ASYNC_FD LVAL 8 fd NAME 9 fd LEAF_NODE 10 fd ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 OSSL_BAD_ASYNC_FD FIELD 9 OSSL_BAD_ASYNC_FD LEAF_NODE 10 OSSL_BAD_ASYNC_FD LEAF_NODE 5 , VAR_DECL 5 OSSL_ASYNC_FD delfd ; delfd = OSSL_BAD_ASYNC_FD TYPE 6 OSSL_ASYNC_FD TYPE_NAME 7 OSSL_ASYNC_FD LEAF_NODE 8 OSSL_ASYNC_FD NAME 6 delfd LEAF_NODE 7 delfd LEAF_NODE 6 ; INIT 6 delfd = OSSL_BAD_ASYNC_FD ASSIGN 7 delfd = OSSL_BAD_ASYNC_FD LVAL 8 delfd NAME 9 delfd LEAF_NODE 10 delfd ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 OSSL_BAD_ASYNC_FD FIELD 9 OSSL_BAD_ASYNC_FD LEAF_NODE 10 OSSL_BAD_ASYNC_FD LEAF_NODE 4 ; SIMPLE_DECL 3 size_t numfds , size_t numdelfds ; INIT_DECL_LIST 4 size_t numfds , size_t numdelfds VAR_DECL 5 size_t numfds TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 numfds LEAF_NODE 7 numfds LEAF_NODE 5 , VAR_DECL 5 size_t numdelfds TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 numdelfds LEAF_NODE 7 numdelfds LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ASYNC_init_thread ( 1 , 0 ) || ( waitctx = ASYNC_WAIT_CTX_new ( ) ) == NULL || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 5 ! ASYNC_init_thread ( 1 , 0 ) || ( waitctx = ASYNC_WAIT_CTX_new ( ) ) == NULL || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 6 ! ASYNC_init_thread ( 1 , 0 ) || ( waitctx = ASYNC_WAIT_CTX_new ( ) ) == NULL || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 7 ! ASYNC_init_thread ( 1 , 0 ) UNARY_EXPR 8 ! ASYNC_init_thread ( 1 , 0 ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 ASYNC_init_thread ( 1 , 0 ) CALLEE 10 ASYNC_init_thread LEAF_NODE 11 ASYNC_init_thread LEAF_NODE 10 ( ARGUMENT 10 1 FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 , ARGUMENT 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ) LEAF_NODE 7 || EXPR 7 ( waitctx = ASYNC_WAIT_CTX_new ( ) ) == NULL || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 8 ( waitctx = ASYNC_WAIT_CTX_new ( ) ) == NULL || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 9 ( waitctx = ASYNC_WAIT_CTX_new ( ) ) == NULL LEAF_NODE 10 ( ASSIGN 10 waitctx = ASYNC_WAIT_CTX_new ( ) LVAL 11 waitctx FIELD 12 waitctx LEAF_NODE 13 waitctx ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ASYNC_WAIT_CTX_new ( ) FUNCTION_CALL 12 ASYNC_WAIT_CTX_new ( ) CALLEE 13 ASYNC_WAIT_CTX_new LEAF_NODE 14 ASYNC_WAIT_CTX_new LEAF_NODE 13 ( LEAF_NODE 13 ) LEAF_NODE 10 ) EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 || EXPR 9 ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 10 ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 11 ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE FUNCTION_CALL 12 ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) CALLEE 13 ASYNC_start_job LEAF_NODE 14 ASYNC_start_job LEAF_NODE 13 ( ARGUMENT 13 & job UNARY_EXPR 14 & job UNARY_OPERATOR 15 & LEAF_NODE 16 & FIELD 15 job LEAF_NODE 16 job LEAF_NODE 13 , ARGUMENT 13 waitctx FIELD 14 waitctx LEAF_NODE 15 waitctx LEAF_NODE 13 , ARGUMENT 13 & funcret UNARY_EXPR 14 & funcret UNARY_OPERATOR 15 & LEAF_NODE 16 & FIELD 15 funcret LEAF_NODE 16 funcret LEAF_NODE 13 , ARGUMENT 13 waitfd FIELD 14 waitfd LEAF_NODE 15 waitfd LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 , ARGUMENT 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 13 ) EQ_OPERATOR 12 != LEAF_NODE 13 != FIELD 12 ASYNC_PAUSE LEAF_NODE 13 ASYNC_PAUSE LEAF_NODE 11 || EXPR 11 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 12 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 13 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) UNARY_EXPR 14 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) UNARY_OPERATOR 15 ! LEAF_NODE 16 ! FUNCTION_CALL 15 ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) CALLEE 16 ASYNC_WAIT_CTX_get_all_fds LEAF_NODE 17 ASYNC_WAIT_CTX_get_all_fds LEAF_NODE 16 ( ARGUMENT 16 waitctx FIELD 17 waitctx LEAF_NODE 18 waitctx LEAF_NODE 16 , ARGUMENT 16 NULL FIELD 17 NULL LEAF_NODE 18 NULL LEAF_NODE 16 , ARGUMENT 16 & numfds UNARY_EXPR 17 & numfds UNARY_OPERATOR 18 & LEAF_NODE 19 & FIELD 18 numfds LEAF_NODE 19 numfds LEAF_NODE 16 ) LEAF_NODE 13 || EXPR 13 numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 14 numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 15 numfds != 0 FIELD 16 numfds LEAF_NODE 17 numfds EQ_OPERATOR 16 != LEAF_NODE 17 != FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 || EXPR 15 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 16 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 17 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) UNARY_EXPR 18 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) UNARY_OPERATOR 19 ! LEAF_NODE 20 ! FUNCTION_CALL 19 ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) CALLEE 20 ASYNC_WAIT_CTX_get_changed_fds LEAF_NODE 21 ASYNC_WAIT_CTX_get_changed_fds LEAF_NODE 20 ( ARGUMENT 20 waitctx FIELD 21 waitctx LEAF_NODE 22 waitctx LEAF_NODE 20 , ARGUMENT 20 NULL FIELD 21 NULL LEAF_NODE 22 NULL LEAF_NODE 20 , ARGUMENT 20 & numfds UNARY_EXPR 21 & numfds UNARY_OPERATOR 22 & LEAF_NODE 23 & FIELD 22 numfds LEAF_NODE 23 numfds LEAF_NODE 20 , ARGUMENT 20 NULL FIELD 21 NULL LEAF_NODE 22 NULL LEAF_NODE 20 , ARGUMENT 20 & numdelfds UNARY_EXPR 21 & numdelfds UNARY_OPERATOR 22 & LEAF_NODE 23 & FIELD 22 numdelfds LEAF_NODE 23 numdelfds LEAF_NODE 20 ) LEAF_NODE 17 || EXPR 17 numfds != 0 || numdelfds != 0 || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 18 numfds != 0 || numdelfds != 0 || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 19 numfds != 0 FIELD 20 numfds LEAF_NODE 21 numfds EQ_OPERATOR 20 != LEAF_NODE 21 != FIELD 20 0 LEAF_NODE 21 0 LEAF_NODE 19 || EXPR 19 numdelfds != 0 || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 20 numdelfds != 0 || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 21 numdelfds != 0 FIELD 22 numdelfds LEAF_NODE 23 numdelfds EQ_OPERATOR 22 != LEAF_NODE 23 != FIELD 22 0 LEAF_NODE 23 0 LEAF_NODE 21 || EXPR 21 ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 22 ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 23 ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE FUNCTION_CALL 24 ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) CALLEE 25 ASYNC_start_job LEAF_NODE 26 ASYNC_start_job LEAF_NODE 25 ( ARGUMENT 25 & job UNARY_EXPR 26 & job UNARY_OPERATOR 27 & LEAF_NODE 28 & FIELD 27 job LEAF_NODE 28 job LEAF_NODE 25 , ARGUMENT 25 waitctx FIELD 26 waitctx LEAF_NODE 27 waitctx LEAF_NODE 25 , ARGUMENT 25 & funcret UNARY_EXPR 26 & funcret UNARY_OPERATOR 27 & LEAF_NODE 28 & FIELD 27 funcret LEAF_NODE 28 funcret LEAF_NODE 25 , ARGUMENT 25 waitfd FIELD 26 waitfd LEAF_NODE 27 waitfd LEAF_NODE 25 , ARGUMENT 25 NULL FIELD 26 NULL LEAF_NODE 27 NULL LEAF_NODE 25 , ARGUMENT 25 0 FIELD 26 0 LEAF_NODE 27 0 LEAF_NODE 25 ) EQ_OPERATOR 24 != LEAF_NODE 25 != FIELD 24 ASYNC_PAUSE LEAF_NODE 25 ASYNC_PAUSE LEAF_NODE 23 || EXPR 23 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 24 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 25 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) UNARY_EXPR 26 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) UNARY_OPERATOR 27 ! LEAF_NODE 28 ! FUNCTION_CALL 27 ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) CALLEE 28 ASYNC_WAIT_CTX_get_all_fds LEAF_NODE 29 ASYNC_WAIT_CTX_get_all_fds LEAF_NODE 28 ( ARGUMENT 28 waitctx FIELD 29 waitctx LEAF_NODE 30 waitctx LEAF_NODE 28 , ARGUMENT 28 NULL FIELD 29 NULL LEAF_NODE 30 NULL LEAF_NODE 28 , ARGUMENT 28 & numfds UNARY_EXPR 29 & numfds UNARY_OPERATOR 30 & LEAF_NODE 31 & FIELD 30 numfds LEAF_NODE 31 numfds LEAF_NODE 28 ) LEAF_NODE 25 || EXPR 25 numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 26 numfds != 1 || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 27 numfds != 1 FIELD 28 numfds LEAF_NODE 29 numfds EQ_OPERATOR 28 != LEAF_NODE 29 != FIELD 28 1 LEAF_NODE 29 1 LEAF_NODE 27 || EXPR 27 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 28 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) || fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 29 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) UNARY_EXPR 30 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) UNARY_OPERATOR 31 ! LEAF_NODE 32 ! FUNCTION_CALL 31 ASYNC_WAIT_CTX_get_all_fds ( waitctx , & fd , & numfds ) CALLEE 32 ASYNC_WAIT_CTX_get_all_fds LEAF_NODE 33 ASYNC_WAIT_CTX_get_all_fds LEAF_NODE 32 ( ARGUMENT 32 waitctx FIELD 33 waitctx LEAF_NODE 34 waitctx LEAF_NODE 32 , ARGUMENT 32 & fd UNARY_EXPR 33 & fd UNARY_OPERATOR 34 & LEAF_NODE 35 & FIELD 34 fd LEAF_NODE 35 fd LEAF_NODE 32 , ARGUMENT 32 & numfds UNARY_EXPR 33 & numfds UNARY_OPERATOR 34 & LEAF_NODE 35 & FIELD 34 numfds LEAF_NODE 35 numfds LEAF_NODE 32 ) LEAF_NODE 29 || EXPR 29 fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 30 fd != MAGIC_WAIT_FD || ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 31 fd != MAGIC_WAIT_FD FIELD 32 fd LEAF_NODE 33 fd EQ_OPERATOR 32 != LEAF_NODE 33 != FIELD 32 MAGIC_WAIT_FD LEAF_NODE 33 MAGIC_WAIT_FD LEAF_NODE 31 || EXPR 31 ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 32 ( fd = OSSL_BAD_ASYNC_FD , 0 ) || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 33 ( fd = OSSL_BAD_ASYNC_FD , 0 ) LEAF_NODE 34 ( ASSIGN 34 fd = OSSL_BAD_ASYNC_FD LVAL 35 fd FIELD 36 fd LEAF_NODE 37 fd ASSIGN_OP 35 = LEAF_NODE 36 = RVAL 35 OSSL_BAD_ASYNC_FD FIELD 36 OSSL_BAD_ASYNC_FD LEAF_NODE 37 OSSL_BAD_ASYNC_FD LEAF_NODE 34 , FIELD 34 0 LEAF_NODE 35 0 LEAF_NODE 34 ) LEAF_NODE 33 || EXPR 33 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 34 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 35 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) UNARY_EXPR 36 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) UNARY_OPERATOR 37 ! LEAF_NODE 38 ! FUNCTION_CALL 37 ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) CALLEE 38 ASYNC_WAIT_CTX_get_changed_fds LEAF_NODE 39 ASYNC_WAIT_CTX_get_changed_fds LEAF_NODE 38 ( ARGUMENT 38 waitctx FIELD 39 waitctx LEAF_NODE 40 waitctx LEAF_NODE 38 , ARGUMENT 38 NULL FIELD 39 NULL LEAF_NODE 40 NULL LEAF_NODE 38 , ARGUMENT 38 & numfds UNARY_EXPR 39 & numfds UNARY_OPERATOR 40 & LEAF_NODE 41 & FIELD 40 numfds LEAF_NODE 41 numfds LEAF_NODE 38 , ARGUMENT 38 NULL FIELD 39 NULL LEAF_NODE 40 NULL LEAF_NODE 38 , ARGUMENT 38 & numdelfds UNARY_EXPR 39 & numdelfds UNARY_OPERATOR 40 & LEAF_NODE 41 & FIELD 40 numdelfds LEAF_NODE 41 numdelfds LEAF_NODE 38 ) LEAF_NODE 35 || EXPR 35 numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 36 numfds != 1 || numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 37 numfds != 1 FIELD 38 numfds LEAF_NODE 39 numfds EQ_OPERATOR 38 != LEAF_NODE 39 != FIELD 38 1 LEAF_NODE 39 1 LEAF_NODE 37 || EXPR 37 numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 38 numdelfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 39 numdelfds != 0 FIELD 40 numdelfds LEAF_NODE 41 numdelfds EQ_OPERATOR 40 != LEAF_NODE 41 != FIELD 40 0 LEAF_NODE 41 0 LEAF_NODE 39 || EXPR 39 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 40 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) || fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 41 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) UNARY_EXPR 42 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) UNARY_OPERATOR 43 ! LEAF_NODE 44 ! FUNCTION_CALL 43 ASYNC_WAIT_CTX_get_changed_fds ( waitctx , & fd , & numfds , NULL , & numdelfds ) CALLEE 44 ASYNC_WAIT_CTX_get_changed_fds LEAF_NODE 45 ASYNC_WAIT_CTX_get_changed_fds LEAF_NODE 44 ( ARGUMENT 44 waitctx FIELD 45 waitctx LEAF_NODE 46 waitctx LEAF_NODE 44 , ARGUMENT 44 & fd UNARY_EXPR 45 & fd UNARY_OPERATOR 46 & LEAF_NODE 47 & FIELD 46 fd LEAF_NODE 47 fd LEAF_NODE 44 , ARGUMENT 44 & numfds UNARY_EXPR 45 & numfds UNARY_OPERATOR 46 & LEAF_NODE 47 & FIELD 46 numfds LEAF_NODE 47 numfds LEAF_NODE 44 , ARGUMENT 44 NULL FIELD 45 NULL LEAF_NODE 46 NULL LEAF_NODE 44 , ARGUMENT 44 & numdelfds UNARY_EXPR 45 & numdelfds UNARY_OPERATOR 46 & LEAF_NODE 47 & FIELD 46 numdelfds LEAF_NODE 47 numdelfds LEAF_NODE 44 ) LEAF_NODE 41 || EXPR 41 fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 42 fd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 43 fd != MAGIC_WAIT_FD FIELD 44 fd LEAF_NODE 45 fd EQ_OPERATOR 44 != LEAF_NODE 45 != FIELD 44 MAGIC_WAIT_FD LEAF_NODE 45 MAGIC_WAIT_FD LEAF_NODE 43 || EXPR 43 ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 44 ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 45 ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_PAUSE FUNCTION_CALL 46 ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) CALLEE 47 ASYNC_start_job LEAF_NODE 48 ASYNC_start_job LEAF_NODE 47 ( ARGUMENT 47 & job UNARY_EXPR 48 & job UNARY_OPERATOR 49 & LEAF_NODE 50 & FIELD 49 job LEAF_NODE 50 job LEAF_NODE 47 , ARGUMENT 47 waitctx FIELD 48 waitctx LEAF_NODE 49 waitctx LEAF_NODE 47 , ARGUMENT 47 & funcret UNARY_EXPR 48 & funcret UNARY_OPERATOR 49 & LEAF_NODE 50 & FIELD 49 funcret LEAF_NODE 50 funcret LEAF_NODE 47 , ARGUMENT 47 waitfd FIELD 48 waitfd LEAF_NODE 49 waitfd LEAF_NODE 47 , ARGUMENT 47 NULL FIELD 48 NULL LEAF_NODE 49 NULL LEAF_NODE 47 , ARGUMENT 47 0 FIELD 48 0 LEAF_NODE 49 0 LEAF_NODE 47 ) EQ_OPERATOR 46 != LEAF_NODE 47 != FIELD 46 ASYNC_PAUSE LEAF_NODE 47 ASYNC_PAUSE LEAF_NODE 45 || EXPR 45 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 46 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 47 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) UNARY_EXPR 48 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) UNARY_OPERATOR 49 ! LEAF_NODE 50 ! FUNCTION_CALL 49 ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) CALLEE 50 ASYNC_WAIT_CTX_get_all_fds LEAF_NODE 51 ASYNC_WAIT_CTX_get_all_fds LEAF_NODE 50 ( ARGUMENT 50 waitctx FIELD 51 waitctx LEAF_NODE 52 waitctx LEAF_NODE 50 , ARGUMENT 50 NULL FIELD 51 NULL LEAF_NODE 52 NULL LEAF_NODE 50 , ARGUMENT 50 & numfds UNARY_EXPR 51 & numfds UNARY_OPERATOR 52 & LEAF_NODE 53 & FIELD 52 numfds LEAF_NODE 53 numfds LEAF_NODE 50 ) LEAF_NODE 47 || EXPR 47 numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 48 numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 49 numfds != 0 FIELD 50 numfds LEAF_NODE 51 numfds EQ_OPERATOR 50 != LEAF_NODE 51 != FIELD 50 0 LEAF_NODE 51 0 LEAF_NODE 49 || EXPR 49 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 50 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 51 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) UNARY_EXPR 52 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) UNARY_OPERATOR 53 ! LEAF_NODE 54 ! FUNCTION_CALL 53 ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) CALLEE 54 ASYNC_WAIT_CTX_get_changed_fds LEAF_NODE 55 ASYNC_WAIT_CTX_get_changed_fds LEAF_NODE 54 ( ARGUMENT 54 waitctx FIELD 55 waitctx LEAF_NODE 56 waitctx LEAF_NODE 54 , ARGUMENT 54 NULL FIELD 55 NULL LEAF_NODE 56 NULL LEAF_NODE 54 , ARGUMENT 54 & numfds UNARY_EXPR 55 & numfds UNARY_OPERATOR 56 & LEAF_NODE 57 & FIELD 56 numfds LEAF_NODE 57 numfds LEAF_NODE 54 , ARGUMENT 54 NULL FIELD 55 NULL LEAF_NODE 56 NULL LEAF_NODE 54 , ARGUMENT 54 & numdelfds UNARY_EXPR 55 & numdelfds UNARY_OPERATOR 56 & LEAF_NODE 57 & FIELD 56 numdelfds LEAF_NODE 57 numdelfds LEAF_NODE 54 ) LEAF_NODE 51 || EXPR 51 numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 52 numfds != 0 || numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 53 numfds != 0 FIELD 54 numfds LEAF_NODE 55 numfds EQ_OPERATOR 54 != LEAF_NODE 55 != FIELD 54 0 LEAF_NODE 55 0 LEAF_NODE 53 || EXPR 53 numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 54 numdelfds != 1 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 55 numdelfds != 1 FIELD 56 numdelfds LEAF_NODE 57 numdelfds EQ_OPERATOR 56 != LEAF_NODE 57 != FIELD 56 1 LEAF_NODE 57 1 LEAF_NODE 55 || EXPR 55 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 56 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) || delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 57 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) UNARY_EXPR 58 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) UNARY_OPERATOR 59 ! LEAF_NODE 60 ! FUNCTION_CALL 59 ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , & delfd , & numdelfds ) CALLEE 60 ASYNC_WAIT_CTX_get_changed_fds LEAF_NODE 61 ASYNC_WAIT_CTX_get_changed_fds LEAF_NODE 60 ( ARGUMENT 60 waitctx FIELD 61 waitctx LEAF_NODE 62 waitctx LEAF_NODE 60 , ARGUMENT 60 NULL FIELD 61 NULL LEAF_NODE 62 NULL LEAF_NODE 60 , ARGUMENT 60 & numfds UNARY_EXPR 61 & numfds UNARY_OPERATOR 62 & LEAF_NODE 63 & FIELD 62 numfds LEAF_NODE 63 numfds LEAF_NODE 60 , ARGUMENT 60 & delfd UNARY_EXPR 61 & delfd UNARY_OPERATOR 62 & LEAF_NODE 63 & FIELD 62 delfd LEAF_NODE 63 delfd LEAF_NODE 60 , ARGUMENT 60 & numdelfds UNARY_EXPR 61 & numdelfds UNARY_OPERATOR 62 & LEAF_NODE 63 & FIELD 62 numdelfds LEAF_NODE 63 numdelfds LEAF_NODE 60 ) LEAF_NODE 57 || EXPR 57 delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 58 delfd != MAGIC_WAIT_FD || ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 59 delfd != MAGIC_WAIT_FD FIELD 60 delfd LEAF_NODE 61 delfd EQ_OPERATOR 60 != LEAF_NODE 61 != FIELD 60 MAGIC_WAIT_FD LEAF_NODE 61 MAGIC_WAIT_FD LEAF_NODE 59 || EXPR 59 ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 60 ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH || ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 61 ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) != ASYNC_FINISH FUNCTION_CALL 62 ASYNC_start_job ( & job , waitctx , & funcret , waitfd , NULL , 0 ) CALLEE 63 ASYNC_start_job LEAF_NODE 64 ASYNC_start_job LEAF_NODE 63 ( ARGUMENT 63 & job UNARY_EXPR 64 & job UNARY_OPERATOR 65 & LEAF_NODE 66 & FIELD 65 job LEAF_NODE 66 job LEAF_NODE 63 , ARGUMENT 63 waitctx FIELD 64 waitctx LEAF_NODE 65 waitctx LEAF_NODE 63 , ARGUMENT 63 & funcret UNARY_EXPR 64 & funcret UNARY_OPERATOR 65 & LEAF_NODE 66 & FIELD 65 funcret LEAF_NODE 66 funcret LEAF_NODE 63 , ARGUMENT 63 waitfd FIELD 64 waitfd LEAF_NODE 65 waitfd LEAF_NODE 63 , ARGUMENT 63 NULL FIELD 64 NULL LEAF_NODE 65 NULL LEAF_NODE 63 , ARGUMENT 63 0 FIELD 64 0 LEAF_NODE 65 0 LEAF_NODE 63 ) EQ_OPERATOR 62 != LEAF_NODE 63 != FIELD 62 ASYNC_FINISH LEAF_NODE 63 ASYNC_FINISH LEAF_NODE 61 || EXPR 61 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 62 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) || numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 63 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) UNARY_EXPR 64 ! ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) UNARY_OPERATOR 65 ! LEAF_NODE 66 ! FUNCTION_CALL 65 ASYNC_WAIT_CTX_get_all_fds ( waitctx , NULL , & numfds ) CALLEE 66 ASYNC_WAIT_CTX_get_all_fds LEAF_NODE 67 ASYNC_WAIT_CTX_get_all_fds LEAF_NODE 66 ( ARGUMENT 66 waitctx FIELD 67 waitctx LEAF_NODE 68 waitctx LEAF_NODE 66 , ARGUMENT 66 NULL FIELD 67 NULL LEAF_NODE 68 NULL LEAF_NODE 66 , ARGUMENT 66 & numfds UNARY_EXPR 67 & numfds UNARY_OPERATOR 68 & LEAF_NODE 69 & FIELD 68 numfds LEAF_NODE 69 numfds LEAF_NODE 66 ) LEAF_NODE 63 || EXPR 63 numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 64 numfds != 0 || ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 65 numfds != 0 FIELD 66 numfds LEAF_NODE 67 numfds EQ_OPERATOR 66 != LEAF_NODE 67 != FIELD 66 0 LEAF_NODE 67 0 LEAF_NODE 65 || EXPR 65 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 OR 66 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) || numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 67 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) UNARY_EXPR 68 ! ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) UNARY_OPERATOR 69 ! LEAF_NODE 70 ! FUNCTION_CALL 69 ASYNC_WAIT_CTX_get_changed_fds ( waitctx , NULL , & numfds , NULL , & numdelfds ) CALLEE 70 ASYNC_WAIT_CTX_get_changed_fds LEAF_NODE 71 ASYNC_WAIT_CTX_get_changed_fds LEAF_NODE 70 ( ARGUMENT 70 waitctx FIELD 71 waitctx LEAF_NODE 72 waitctx LEAF_NODE 70 , ARGUMENT 70 NULL FIELD 71 NULL LEAF_NODE 72 NULL LEAF_NODE 70 , ARGUMENT 70 & numfds UNARY_EXPR 71 & numfds UNARY_OPERATOR 72 & LEAF_NODE 73 & FIELD 72 numfds LEAF_NODE 73 numfds LEAF_NODE 70 , ARGUMENT 70 NULL FIELD 71 NULL LEAF_NODE 72 NULL LEAF_NODE 70 , ARGUMENT 70 & numdelfds UNARY_EXPR 71 & numdelfds UNARY_OPERATOR 72 & LEAF_NODE 73 & FIELD 72 numdelfds LEAF_NODE 73 numdelfds LEAF_NODE 70 ) LEAF_NODE 67 || EXPR 67 numfds != 0 || numdelfds != 0 || funcret != 1 OR 68 numfds != 0 || numdelfds != 0 || funcret != 1 EXPR 69 numfds != 0 FIELD 70 numfds LEAF_NODE 71 numfds EQ_OPERATOR 70 != LEAF_NODE 71 != FIELD 70 0 LEAF_NODE 71 0 LEAF_NODE 69 || EXPR 69 numdelfds != 0 || funcret != 1 OR 70 numdelfds != 0 || funcret != 1 EXPR 71 numdelfds != 0 FIELD 72 numdelfds LEAF_NODE 73 numdelfds EQ_OPERATOR 72 != LEAF_NODE 73 != FIELD 72 0 LEAF_NODE 73 0 LEAF_NODE 71 || EXPR 71 funcret != 1 FIELD 72 funcret LEAF_NODE 73 funcret EQ_OPERATOR 72 != LEAF_NODE 73 != FIELD 72 1 LEAF_NODE 73 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 fprintf ( stderr , \"test_ASYNC_get_wait_fd() failed\\n\" ) ; EXPR 7 fprintf ( stderr , \"test_ASYNC_get_wait_fd() failed\\n\" ) FUNCTION_CALL 8 fprintf ( stderr , \"test_ASYNC_get_wait_fd() failed\\n\" ) CALLEE 9 fprintf LEAF_NODE 10 fprintf LEAF_NODE 9 ( ARGUMENT 9 stderr FIELD 10 stderr LEAF_NODE 11 stderr LEAF_NODE 9 , ARGUMENT 9 \"test_ASYNC_get_wait_fd() failed\\n\" FIELD 10 \"test_ASYNC_get_wait_fd() failed\\n\" LEAF_NODE 11 \"test_ASYNC_get_wait_fd() failed\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ASYNC_WAIT_CTX_free ( waitctx ) ; EXPR 7 ASYNC_WAIT_CTX_free ( waitctx ) FUNCTION_CALL 8 ASYNC_WAIT_CTX_free ( waitctx ) CALLEE 9 ASYNC_WAIT_CTX_free LEAF_NODE 10 ASYNC_WAIT_CTX_free LEAF_NODE 9 ( ARGUMENT 9 waitctx FIELD 10 waitctx LEAF_NODE 11 waitctx LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ASYNC_cleanup_thread ( ) ; EXPR 7 ASYNC_cleanup_thread ( ) FUNCTION_CALL 8 ASYNC_cleanup_thread ( ) CALLEE 9 ASYNC_cleanup_thread LEAF_NODE 10 ASYNC_cleanup_thread LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ASYNC_WAIT_CTX_free ( waitctx ) ; EXPR 4 ASYNC_WAIT_CTX_free ( waitctx ) FUNCTION_CALL 5 ASYNC_WAIT_CTX_free ( waitctx ) CALLEE 6 ASYNC_WAIT_CTX_free LEAF_NODE 7 ASYNC_WAIT_CTX_free LEAF_NODE 6 ( ARGUMENT 6 waitctx FIELD 7 waitctx LEAF_NODE 8 waitctx LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ASYNC_cleanup_thread ( ) ; EXPR 4 ASYNC_cleanup_thread ( ) FUNCTION_CALL 5 ASYNC_cleanup_thread ( ) CALLEE 6 ASYNC_cleanup_thread LEAF_NODE 7 ASYNC_cleanup_thread LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 86, "project": "openssl_ast_normal_function_test_169", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 AES_cfb1_encrypt LEAF_NODE 3 AES_cfb1_encrypt PARAMETER_LIST 2 ( const unsigned char * in , unsigned char * out , size_t length , const AES_KEY * key , unsigned char * ivec , int * num , const int enc ) LEAF_NODE 3 ( PARAMETER_DECL 3 const unsigned char * in TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 in LEAF_NODE 5 in LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * out TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 size_t length TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 length LEAF_NODE 5 length LEAF_NODE 3 , PARAMETER_DECL 3 const AES_KEY * key TYPE 4 const AES_KEY * TYPE_NAME 5 const AES_KEY LEAF_NODE 6 const LEAF_NODE 6 AES_KEY POINTER 5 * LEAF_NODE 6 * NAME 4 key LEAF_NODE 5 key LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * ivec TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 ivec LEAF_NODE 5 ivec LEAF_NODE 3 , PARAMETER_DECL 3 int * num TYPE 4 int * TYPE_NAME 5 int LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 num LEAF_NODE 5 num LEAF_NODE 3 , PARAMETER_DECL 3 const int enc TYPE 4 const int TYPE_NAME 5 const int LEAF_NODE 6 const LEAF_NODE 6 int NAME 4 enc LEAF_NODE 5 enc LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CRYPTO_cfb128_1_encrypt ( in , out , length , key , ivec , num , enc , ( block128_f ) AES_encrypt ) ; EXPR 4 CRYPTO_cfb128_1_encrypt ( in , out , length , key , ivec , num , enc , ( block128_f ) AES_encrypt ) FUNCTION_CALL 5 CRYPTO_cfb128_1_encrypt ( in , out , length , key , ivec , num , enc , ( block128_f ) AES_encrypt ) CALLEE 6 CRYPTO_cfb128_1_encrypt LEAF_NODE 7 CRYPTO_cfb128_1_encrypt LEAF_NODE 6 ( ARGUMENT 6 in FIELD 7 in LEAF_NODE 8 in LEAF_NODE 6 , ARGUMENT 6 out FIELD 7 out LEAF_NODE 8 out LEAF_NODE 6 , ARGUMENT 6 length FIELD 7 length LEAF_NODE 8 length LEAF_NODE 6 , ARGUMENT 6 key FIELD 7 key LEAF_NODE 8 key LEAF_NODE 6 , ARGUMENT 6 ivec FIELD 7 ivec LEAF_NODE 8 ivec LEAF_NODE 6 , ARGUMENT 6 num FIELD 7 num LEAF_NODE 8 num LEAF_NODE 6 , ARGUMENT 6 enc FIELD 7 enc LEAF_NODE 8 enc LEAF_NODE 6 , ARGUMENT 6 ( block128_f ) AES_encrypt LEAF_NODE 7 ( TYPE_NAME 7 block128_f LEAF_NODE 8 block128_f LEAF_NODE 7 ) FIELD 7 AES_encrypt LEAF_NODE 8 AES_encrypt LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 87, "project": "openssl_ast_normal_function_test_168", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 do_enc_dec LEAF_NODE 3 do_enc_dec PARAMETER_LIST 2 ( EXPECTED * bytes , long nbytes , const TEST_PACKAGE * package ) LEAF_NODE 3 ( PARAMETER_DECL 3 EXPECTED * bytes TYPE 4 EXPECTED * TYPE_NAME 5 EXPECTED LEAF_NODE 6 EXPECTED POINTER 5 * LEAF_NODE 6 * NAME 4 bytes LEAF_NODE 5 bytes LEAF_NODE 3 , PARAMETER_DECL 3 long nbytes TYPE 4 long TYPE_NAME 5 long LEAF_NODE 6 long NAME 4 nbytes LEAF_NODE 5 nbytes LEAF_NODE 3 , PARAMETER_DECL 3 const TEST_PACKAGE * package TYPE 4 const TEST_PACKAGE * TYPE_NAME 5 const TEST_PACKAGE LEAF_NODE 6 const LEAF_NODE 6 TEST_PACKAGE POINTER 5 * LEAF_NODE 6 * NAME 4 package LEAF_NODE 5 package LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned char * data ; data = NULL ; VAR_DECL 4 unsigned char * data ; data = NULL TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = NULL ASSIGN 6 data = NULL LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int len ; VAR_DECL 4 int len TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 len LEAF_NODE 6 len LEAF_NODE 4 ; SIMPLE_DECL 3 int ret ; ret = 0 ; VAR_DECL 4 int ret ; ret = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 5 ; INIT 5 ret = 0 ASSIGN 6 ret = 0 LVAL 7 ret NAME 8 ret LEAF_NODE 9 ret ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 void * p ; p = bytes ; VAR_DECL 4 void * p ; p = bytes TYPE 5 void * TYPE_NAME 6 void LEAF_NODE 7 void POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 5 ; INIT 5 p = bytes ASSIGN 6 p = bytes LVAL 7 p NAME 8 p LEAF_NODE 9 p ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 bytes FIELD 8 bytes LEAF_NODE 9 bytes LEAF_NODE 4 ; EXPR_STATEMENT 3 len = package -> i2d ( p , & data ) ; EXPR 4 len = package -> i2d ( p , & data ) ASSIGN 5 len = package -> i2d ( p , & data ) LVAL 6 len FIELD 7 len LEAF_NODE 8 len ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 package -> i2d ( p , & data ) FUNCTION_CALL 7 package -> i2d ( p , & data ) CALLEE 8 package -> i2d LEAF_NODE 9 package LEAF_NODE 9 -> LEAF_NODE 9 i2d LEAF_NODE 8 ( ARGUMENT 8 p FIELD 9 p LEAF_NODE 10 p LEAF_NODE 8 , ARGUMENT 8 & data UNARY_EXPR 9 & data UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 data LEAF_NODE 11 data LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 len < 0 EXPR 5 len < 0 FIELD 6 len LEAF_NODE 7 len REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return - 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 - 1 EXPR 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 6 ; EXPR_STATEMENT 3 ret = do_decode ( data , len , bytes , nbytes , package ) ; EXPR 4 ret = do_decode ( data , len , bytes , nbytes , package ) ASSIGN 5 ret = do_decode ( data , len , bytes , nbytes , package ) LVAL 6 ret FIELD 7 ret LEAF_NODE 8 ret ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 do_decode ( data , len , bytes , nbytes , package ) FUNCTION_CALL 7 do_decode ( data , len , bytes , nbytes , package ) CALLEE 8 do_decode LEAF_NODE 9 do_decode LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 len FIELD 9 len LEAF_NODE 10 len LEAF_NODE 8 , ARGUMENT 8 bytes FIELD 9 bytes LEAF_NODE 10 bytes LEAF_NODE 8 , ARGUMENT 8 nbytes FIELD 9 nbytes LEAF_NODE 10 nbytes LEAF_NODE 8 , ARGUMENT 8 package FIELD 9 package LEAF_NODE 10 package LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 OPENSSL_free ( data ) ; EXPR 4 OPENSSL_free ( data ) FUNCTION_CALL 5 OPENSSL_free ( data ) CALLEE 6 OPENSSL_free LEAF_NODE 7 OPENSSL_free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return ret ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ret EXPR 5 ret FIELD 6 ret LEAF_NODE 7 ret LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 88, "project": "openssl_ast_normal_function_test_161", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASYNC_is_capable LEAF_NODE 3 ASYNC_is_capable PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 ucontext_t ctx ; VAR_DECL 4 ucontext_t ctx TYPE 5 ucontext_t TYPE_NAME 6 ucontext_t LEAF_NODE 7 ucontext_t NAME 5 ctx LEAF_NODE 6 ctx LEAF_NODE 4 ; JUMP_STATEMENT 3 return getcontext ( & ctx ) == 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 getcontext ( & ctx ) == 0 EXPR 5 getcontext ( & ctx ) == 0 FUNCTION_CALL 6 getcontext ( & ctx ) CALLEE 7 getcontext LEAF_NODE 8 getcontext LEAF_NODE 7 ( ARGUMENT 7 & ctx UNARY_EXPR 8 & ctx UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 ctx LEAF_NODE 10 ctx LEAF_NODE 7 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 89, "project": "openssl_ast_normal_function_test_153", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 FIPS_mode LEAF_NODE 3 FIPS_mode PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 90, "project": "openssl_ast_normal_function_test_26", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 isblank LEAF_NODE 3 isblank PARAMETER_LIST 2 ( int c ) LEAF_NODE 3 ( PARAMETER_DECL 3 int c TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return c == ' ' || c == '\\t' ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 c == ' ' || c == '\\t' EXPR 5 c == ' ' || c == '\\t' OR 6 c == ' ' || c == '\\t' EXPR 7 c == ' ' FIELD 8 c LEAF_NODE 9 c EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 ' ' LEAF_NODE 9 ' ' LEAF_NODE 7 || EXPR 7 c == '\\t' FIELD 8 c LEAF_NODE 9 c EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 '\\t' LEAF_NODE 9 '\\t' LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 91, "project": "openssl_ast_normal_function_test_69", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 BIO_hex_string LEAF_NODE 3 BIO_hex_string PARAMETER_LIST 2 ( BIO * out , int indent , int width , unsigned char * data , int datalen ) LEAF_NODE 3 ( PARAMETER_DECL 3 BIO * out TYPE 4 BIO * TYPE_NAME 5 BIO LEAF_NODE 6 BIO POINTER 5 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 int indent TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 indent LEAF_NODE 5 indent LEAF_NODE 3 , PARAMETER_DECL 3 int width TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 width LEAF_NODE 5 width LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * data TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 , PARAMETER_DECL 3 int datalen TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 datalen LEAF_NODE 5 datalen LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int i , int j ; j = 0 ; INIT_DECL_LIST 4 int i , int j ; j = 0 VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 , VAR_DECL 5 int j ; j = 0 TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 j LEAF_NODE 7 j LEAF_NODE 6 ; INIT 6 j = 0 ASSIGN 7 j = 0 LVAL 8 j NAME 9 j LEAF_NODE 10 j ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 datalen < 1 EXPR 5 datalen < 1 FIELD 6 datalen LEAF_NODE 7 datalen REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 1 EXPR 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 6 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < datalen - 1 EXPR 5 i < datalen - 1 FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 datalen LEAF_NODE 7 datalen LEAF_NODE 6 - FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 i ++ EXPR 5 i ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 i && ! j EXPR 8 i && ! j AND 9 i && ! j EXPR 10 i FIELD 11 i LEAF_NODE 12 i LEAF_NODE 10 && EXPR 10 ! j UNARY_EXPR 11 ! j UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FIELD 12 j LEAF_NODE 13 j LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 BIO_printf ( out , \"%*s\" , indent , \"\" ) ; EXPR 9 BIO_printf ( out , \"%*s\" , indent , \"\" ) FUNCTION_CALL 10 BIO_printf ( out , \"%*s\" , indent , \"\" ) CALLEE 11 BIO_printf LEAF_NODE 12 BIO_printf LEAF_NODE 11 ( ARGUMENT 11 out FIELD 12 out LEAF_NODE 13 out LEAF_NODE 11 , ARGUMENT 11 \"%*s\" FIELD 12 \"%*s\" LEAF_NODE 13 \"%*s\" LEAF_NODE 11 , ARGUMENT 11 indent FIELD 12 indent LEAF_NODE 13 indent LEAF_NODE 11 , ARGUMENT 11 \"\" FIELD 12 \"\" LEAF_NODE 13 \"\" LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 6 BIO_printf ( out , \"%02X:\" , data [ i ] ) ; EXPR 7 BIO_printf ( out , \"%02X:\" , data [ i ] ) FUNCTION_CALL 8 BIO_printf ( out , \"%02X:\" , data [ i ] ) CALLEE 9 BIO_printf LEAF_NODE 10 BIO_printf LEAF_NODE 9 ( ARGUMENT 9 out FIELD 10 out LEAF_NODE 11 out LEAF_NODE 9 , ARGUMENT 9 \"%02X:\" FIELD 10 \"%02X:\" LEAF_NODE 11 \"%02X:\" LEAF_NODE 9 , ARGUMENT 9 data [ i ] FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 j = ( j + 1 ) % width ; EXPR 7 j = ( j + 1 ) % width ASSIGN 8 j = ( j + 1 ) % width LVAL 9 j FIELD 10 j LEAF_NODE 11 j ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( j + 1 ) % width LEAF_NODE 10 ( FIELD 10 j LEAF_NODE 11 j LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ) LEAF_NODE 10 % FIELD 10 width LEAF_NODE 11 width LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! j EXPR 8 ! j UNARY_EXPR 9 ! j UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FIELD 10 j LEAF_NODE 11 j LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 BIO_printf ( out , \"\\n\" ) ; EXPR 9 BIO_printf ( out , \"\\n\" ) FUNCTION_CALL 10 BIO_printf ( out , \"\\n\" ) CALLEE 11 BIO_printf LEAF_NODE 12 BIO_printf LEAF_NODE 11 ( ARGUMENT 11 out FIELD 12 out LEAF_NODE 13 out LEAF_NODE 11 , ARGUMENT 11 \"\\n\" FIELD 12 \"\\n\" LEAF_NODE 13 \"\\n\" LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 i && ! j EXPR 5 i && ! j AND 6 i && ! j EXPR 7 i FIELD 8 i LEAF_NODE 9 i LEAF_NODE 7 && EXPR 7 ! j UNARY_EXPR 8 ! j UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 j LEAF_NODE 10 j LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 BIO_printf ( out , \"%*s\" , indent , \"\" ) ; EXPR 6 BIO_printf ( out , \"%*s\" , indent , \"\" ) FUNCTION_CALL 7 BIO_printf ( out , \"%*s\" , indent , \"\" ) CALLEE 8 BIO_printf LEAF_NODE 9 BIO_printf LEAF_NODE 8 ( ARGUMENT 8 out FIELD 9 out LEAF_NODE 10 out LEAF_NODE 8 , ARGUMENT 8 \"%*s\" FIELD 9 \"%*s\" LEAF_NODE 10 \"%*s\" LEAF_NODE 8 , ARGUMENT 8 indent FIELD 9 indent LEAF_NODE 10 indent LEAF_NODE 8 , ARGUMENT 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 3 BIO_printf ( out , \"%02X\" , data [ datalen - 1 ] ) ; EXPR 4 BIO_printf ( out , \"%02X\" , data [ datalen - 1 ] ) FUNCTION_CALL 5 BIO_printf ( out , \"%02X\" , data [ datalen - 1 ] ) CALLEE 6 BIO_printf LEAF_NODE 7 BIO_printf LEAF_NODE 6 ( ARGUMENT 6 out FIELD 7 out LEAF_NODE 8 out LEAF_NODE 6 , ARGUMENT 6 \"%02X\" FIELD 7 \"%02X\" LEAF_NODE 8 \"%02X\" LEAF_NODE 6 , ARGUMENT 6 data [ datalen - 1 ] FIELD 7 data [ datalen - 1 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 datalen - 1 FIELD 9 datalen LEAF_NODE 10 datalen LEAF_NODE 9 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 92, "project": "openssl_ast_normal_function_test_37", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; SIMPLE_DECL 1 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } ; CLASS_DEF 2 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } CLASS_DEF 3 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } LEAF_NODE 4 struct CLASS_NAME 4 testdata LEAF_NODE 5 testdata LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; SIMPLE_DECL 5 char * data ; VAR_DECL 6 char * data TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 int type ; VAR_DECL 6 int type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 type LEAF_NODE 8 type LEAF_NODE 6 ; SIMPLE_DECL 5 int expected_type ; VAR_DECL 6 int expected_type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 expected_type LEAF_NODE 8 expected_type LEAF_NODE 6 ; SIMPLE_DECL 5 int check_result ; VAR_DECL 6 int check_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 check_result LEAF_NODE 8 check_result LEAF_NODE 6 ; SIMPLE_DECL 5 time_t t ; VAR_DECL 6 time_t t TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 t LEAF_NODE 8 t LEAF_NODE 6 ; SIMPLE_DECL 5 int cmp_result ; VAR_DECL 6 int cmp_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 cmp_result LEAF_NODE 8 cmp_result LEAF_NODE 6 ; SIMPLE_DECL 5 int convert_result ; VAR_DECL 6 int convert_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 convert_result LEAF_NODE 8 convert_result LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } ; CLASS_DEF 2 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } CLASS_DEF 3 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } LEAF_NODE 4 struct CLASS_NAME 4 compare_testdata LEAF_NODE 5 compare_testdata LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; SIMPLE_DECL 5 ASN1_TIME t1 ; VAR_DECL 6 ASN1_TIME t1 TYPE 7 ASN1_TIME TYPE_NAME 8 ASN1_TIME LEAF_NODE 9 ASN1_TIME NAME 7 t1 LEAF_NODE 8 t1 LEAF_NODE 6 ; SIMPLE_DECL 5 ASN1_TIME t2 ; VAR_DECL 6 ASN1_TIME t2 TYPE 7 ASN1_TIME TYPE_NAME 8 ASN1_TIME LEAF_NODE 9 ASN1_TIME NAME 7 t2 LEAF_NODE 8 t2 LEAF_NODE 6 ; SIMPLE_DECL 5 int result ; VAR_DECL 6 int result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 result LEAF_NODE 8 result LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TODAY_GEN_STR ; TODAY_GEN_STR = \"20170825000000Z\" ; VAR_DECL 2 unsigned char [ ] TODAY_GEN_STR ; TODAY_GEN_STR = \"20170825000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TODAY_GEN_STR LEAF_NODE 4 TODAY_GEN_STR LEAF_NODE 3 ; INIT 3 TODAY_GEN_STR = \"20170825000000Z\" ASSIGN 4 TODAY_GEN_STR = \"20170825000000Z\" LVAL 5 TODAY_GEN_STR NAME 6 TODAY_GEN_STR LEAF_NODE 7 TODAY_GEN_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"20170825000000Z\" FIELD 6 \"20170825000000Z\" LEAF_NODE 7 \"20170825000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TOMORROW_GEN_STR ; TOMORROW_GEN_STR = \"20170826000000Z\" ; VAR_DECL 2 unsigned char [ ] TOMORROW_GEN_STR ; TOMORROW_GEN_STR = \"20170826000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TOMORROW_GEN_STR LEAF_NODE 4 TOMORROW_GEN_STR LEAF_NODE 3 ; INIT 3 TOMORROW_GEN_STR = \"20170826000000Z\" ASSIGN 4 TOMORROW_GEN_STR = \"20170826000000Z\" LVAL 5 TOMORROW_GEN_STR NAME 6 TOMORROW_GEN_STR LEAF_NODE 7 TOMORROW_GEN_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"20170826000000Z\" FIELD 6 \"20170826000000Z\" LEAF_NODE 7 \"20170826000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TODAY_UTC_STR ; TODAY_UTC_STR = \"170825000000Z\" ; VAR_DECL 2 unsigned char [ ] TODAY_UTC_STR ; TODAY_UTC_STR = \"170825000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TODAY_UTC_STR LEAF_NODE 4 TODAY_UTC_STR LEAF_NODE 3 ; INIT 3 TODAY_UTC_STR = \"170825000000Z\" ASSIGN 4 TODAY_UTC_STR = \"170825000000Z\" LVAL 5 TODAY_UTC_STR NAME 6 TODAY_UTC_STR LEAF_NODE 7 TODAY_UTC_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"170825000000Z\" FIELD 6 \"170825000000Z\" LEAF_NODE 7 \"170825000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TOMORROW_UTC_STR ; TOMORROW_UTC_STR = \"170826000000Z\" ; VAR_DECL 2 unsigned char [ ] TOMORROW_UTC_STR ; TOMORROW_UTC_STR = \"170826000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TOMORROW_UTC_STR LEAF_NODE 4 TOMORROW_UTC_STR LEAF_NODE 3 ; INIT 3 TOMORROW_UTC_STR = \"170826000000Z\" ASSIGN 4 TOMORROW_UTC_STR = \"170826000000Z\" LVAL 5 TOMORROW_UTC_STR NAME 6 TOMORROW_UTC_STR LEAF_NODE 7 TOMORROW_UTC_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"170826000000Z\" FIELD 6 \"170826000000Z\" LEAF_NODE 7 \"170826000000Z\" LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_pos LEAF_NODE 3 test_table_pos PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_pos , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_pos , idx ) EXPR 5 test_table ( tbl_testdata_pos , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_pos , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_pos FIELD 8 tbl_testdata_pos LEAF_NODE 9 tbl_testdata_pos LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_neg LEAF_NODE 3 test_table_neg PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_neg , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_neg , idx ) EXPR 5 test_table ( tbl_testdata_neg , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_neg , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_neg FIELD 8 tbl_testdata_neg LEAF_NODE 9 tbl_testdata_neg LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_pos_64bit LEAF_NODE 3 test_table_pos_64bit PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_pos_64bit , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_pos_64bit , idx ) EXPR 5 test_table ( tbl_testdata_pos_64bit , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_pos_64bit , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_pos_64bit FIELD 8 tbl_testdata_pos_64bit LEAF_NODE 9 tbl_testdata_pos_64bit LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_neg_64bit LEAF_NODE 3 test_table_neg_64bit PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_neg_64bit , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_neg_64bit , idx ) EXPR 5 test_table ( tbl_testdata_neg_64bit , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_neg_64bit , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_neg_64bit FIELD 8 tbl_testdata_neg_64bit LEAF_NODE 9 tbl_testdata_neg_64bit LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_compare LEAF_NODE 3 test_table_compare PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct compare_testdata * td ; td = & tbl_compare_testdata [ idx ] ; VAR_DECL 4 struct compare_testdata * td ; td = & tbl_compare_testdata [ idx ] TYPE 5 struct compare_testdata * TYPE_NAME 6 struct compare_testdata LEAF_NODE 7 struct LEAF_NODE 7 compare_testdata POINTER 6 * LEAF_NODE 7 * NAME 5 td LEAF_NODE 6 td LEAF_NODE 5 ; INIT 5 td = & tbl_compare_testdata [ idx ] ASSIGN 6 td = & tbl_compare_testdata [ idx ] LVAL 7 td NAME 8 td LEAF_NODE 9 td ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & tbl_compare_testdata [ idx ] UNARY_EXPR 8 & tbl_compare_testdata [ idx ] UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 tbl_compare_testdata [ idx ] LEAF_NODE 10 tbl_compare_testdata LEAF_NODE 10 [ EXPR 10 idx FIELD 11 idx LEAF_NODE 12 idx LEAF_NODE 10 ] LEAF_NODE 4 ; JUMP_STATEMENT 3 return TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) EXPR 5 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) FUNCTION_CALL 6 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) CALLEE 7 TEST_int_eq LEAF_NODE 8 TEST_int_eq LEAF_NODE 7 ( ARGUMENT 7 ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) FUNCTION_CALL 8 ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) CALLEE 9 ASN1_TIME_compare LEAF_NODE 10 ASN1_TIME_compare LEAF_NODE 9 ( ARGUMENT 9 & td -> t1 UNARY_EXPR 10 & td -> t1 UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 td -> t1 LEAF_NODE 12 td LEAF_NODE 12 -> LEAF_NODE 12 t1 LEAF_NODE 9 , ARGUMENT 9 & td -> t2 UNARY_EXPR 10 & td -> t2 UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 td -> t2 LEAF_NODE 12 td LEAF_NODE 12 -> LEAF_NODE 12 t2 LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 td -> result FIELD 8 td -> result LEAF_NODE 9 td LEAF_NODE 9 -> LEAF_NODE 9 result LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 do_generate LEAF_NODE 3 do_generate PARAMETER_LIST 2 ( char * genstr , const char * genconf , BUF_MEM * buf ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * genstr TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 genstr LEAF_NODE 5 genstr LEAF_NODE 3 , PARAMETER_DECL 3 const char * genconf TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 genconf LEAF_NODE 5 genconf LEAF_NODE 3 , PARAMETER_DECL 3 BUF_MEM * buf TYPE 4 BUF_MEM * TYPE_NAME 5 BUF_MEM LEAF_NODE 6 BUF_MEM POINTER 5 * LEAF_NODE 6 * NAME 4 buf LEAF_NODE 5 buf LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 CONF * cnf ; cnf = NULL ; VAR_DECL 4 CONF * cnf ; cnf = NULL TYPE 5 CONF * TYPE_NAME 6 CONF LEAF_NODE 7 CONF POINTER 6 * LEAF_NODE 7 * NAME 5 cnf LEAF_NODE 6 cnf LEAF_NODE 5 ; INIT 5 cnf = NULL ASSIGN 6 cnf = NULL LVAL 7 cnf NAME 8 cnf LEAF_NODE 9 cnf ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int len ; VAR_DECL 4 int len TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 len LEAF_NODE 6 len LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * p ; VAR_DECL 4 unsigned char * p TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 4 ; SIMPLE_DECL 3 ASN1_TYPE * atyp ; atyp = NULL ; VAR_DECL 4 ASN1_TYPE * atyp ; atyp = NULL TYPE 5 ASN1_TYPE * TYPE_NAME 6 ASN1_TYPE LEAF_NODE 7 ASN1_TYPE POINTER 6 * LEAF_NODE 7 * NAME 5 atyp LEAF_NODE 6 atyp LEAF_NODE 5 ; INIT 5 atyp = NULL ASSIGN 6 atyp = NULL LVAL 7 atyp NAME 8 atyp LEAF_NODE 9 atyp ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 genconf != NULL EXPR 5 genconf != NULL FIELD 6 genconf LEAF_NODE 7 genconf EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( cnf = app_load_config ( genconf ) ) == NULL EXPR 8 ( cnf = app_load_config ( genconf ) ) == NULL LEAF_NODE 9 ( ASSIGN 9 cnf = app_load_config ( genconf ) LVAL 10 cnf FIELD 11 cnf LEAF_NODE 12 cnf ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 app_load_config ( genconf ) FUNCTION_CALL 11 app_load_config ( genconf ) CALLEE 12 app_load_config LEAF_NODE 13 app_load_config LEAF_NODE 12 ( ARGUMENT 12 genconf FIELD 13 genconf LEAF_NODE 14 genconf LEAF_NODE 12 ) LEAF_NODE 9 ) EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 goto err ; KEYWORD 9 goto LEAF_NODE 10 goto DESTINATION 9 err LEAF_NODE 10 err LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 genstr == NULL EXPR 8 genstr == NULL FIELD 9 genstr LEAF_NODE 10 genstr EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 genstr = NCONF_get_string ( cnf , \"default\" , \"asn1\" ) ; EXPR 9 genstr = NCONF_get_string ( cnf , \"default\" , \"asn1\" ) ASSIGN 10 genstr = NCONF_get_string ( cnf , \"default\" , \"asn1\" ) LVAL 11 genstr FIELD 12 genstr LEAF_NODE 13 genstr ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 NCONF_get_string ( cnf , \"default\" , \"asn1\" ) FUNCTION_CALL 12 NCONF_get_string ( cnf , \"default\" , \"asn1\" ) CALLEE 13 NCONF_get_string LEAF_NODE 14 NCONF_get_string LEAF_NODE 13 ( ARGUMENT 13 cnf FIELD 14 cnf LEAF_NODE 15 cnf LEAF_NODE 13 , ARGUMENT 13 \"default\" FIELD 14 \"default\" LEAF_NODE 15 \"default\" LEAF_NODE 13 , ARGUMENT 13 \"asn1\" FIELD 14 \"asn1\" LEAF_NODE 15 \"asn1\" LEAF_NODE 13 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 genstr == NULL EXPR 8 genstr == NULL FIELD 9 genstr LEAF_NODE 10 genstr EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_printf ( bio_err , \"Can't find 'asn1' in '%s'\\n\" , genconf ) ; EXPR 10 BIO_printf ( bio_err , \"Can't find 'asn1' in '%s'\\n\" , genconf ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"Can't find 'asn1' in '%s'\\n\" , genconf ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"Can't find 'asn1' in '%s'\\n\" FIELD 13 \"Can't find 'asn1' in '%s'\\n\" LEAF_NODE 14 \"Can't find 'asn1' in '%s'\\n\" LEAF_NODE 12 , ARGUMENT 12 genconf FIELD 13 genconf LEAF_NODE 14 genconf LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 err LEAF_NODE 11 err LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 atyp = ASN1_generate_nconf ( genstr , cnf ) ; EXPR 4 atyp = ASN1_generate_nconf ( genstr , cnf ) ASSIGN 5 atyp = ASN1_generate_nconf ( genstr , cnf ) LVAL 6 atyp FIELD 7 atyp LEAF_NODE 8 atyp ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ASN1_generate_nconf ( genstr , cnf ) FUNCTION_CALL 7 ASN1_generate_nconf ( genstr , cnf ) CALLEE 8 ASN1_generate_nconf LEAF_NODE 9 ASN1_generate_nconf LEAF_NODE 8 ( ARGUMENT 8 genstr FIELD 9 genstr LEAF_NODE 10 genstr LEAF_NODE 8 , ARGUMENT 8 cnf FIELD 9 cnf LEAF_NODE 10 cnf LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 NCONF_free ( cnf ) ; EXPR 4 NCONF_free ( cnf ) FUNCTION_CALL 5 NCONF_free ( cnf ) CALLEE 6 NCONF_free LEAF_NODE 7 NCONF_free LEAF_NODE 6 ( ARGUMENT 6 cnf FIELD 7 cnf LEAF_NODE 8 cnf LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 cnf = NULL ; EXPR 4 cnf = NULL ASSIGN 5 cnf = NULL LVAL 6 cnf FIELD 7 cnf LEAF_NODE 8 cnf ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 atyp == NULL EXPR 5 atyp == NULL FIELD 6 atyp LEAF_NODE 7 atyp EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return - 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 - 1 EXPR 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 6 ; EXPR_STATEMENT 3 len = i2d_ASN1_TYPE ( atyp , NULL ) ; EXPR 4 len = i2d_ASN1_TYPE ( atyp , NULL ) ASSIGN 5 len = i2d_ASN1_TYPE ( atyp , NULL ) LVAL 6 len FIELD 7 len LEAF_NODE 8 len ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 i2d_ASN1_TYPE ( atyp , NULL ) FUNCTION_CALL 7 i2d_ASN1_TYPE ( atyp , NULL ) CALLEE 8 i2d_ASN1_TYPE LEAF_NODE 9 i2d_ASN1_TYPE LEAF_NODE 8 ( ARGUMENT 8 atyp FIELD 9 atyp LEAF_NODE 10 atyp LEAF_NODE 8 , ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 len <= 0 EXPR 5 len <= 0 FIELD 6 len LEAF_NODE 7 len REL_OPERATOR 6 <= LEAF_NODE 7 <= FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto err ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 err LEAF_NODE 7 err LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! BUF_MEM_grow ( buf , len ) EXPR 5 ! BUF_MEM_grow ( buf , len ) UNARY_EXPR 6 ! BUF_MEM_grow ( buf , len ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 BUF_MEM_grow ( buf , len ) CALLEE 8 BUF_MEM_grow LEAF_NODE 9 BUF_MEM_grow LEAF_NODE 8 ( ARGUMENT 8 buf FIELD 9 buf LEAF_NODE 10 buf LEAF_NODE 8 , ARGUMENT 8 len FIELD 9 len LEAF_NODE 10 len LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto err ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 err LEAF_NODE 7 err LEAF_NODE 6 ; EXPR_STATEMENT 3 p = ( unsigned char * ) buf -> data ; EXPR 4 p = ( unsigned char * ) buf -> data ASSIGN 5 p = ( unsigned char * ) buf -> data LVAL 6 p FIELD 7 p LEAF_NODE 8 p ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( unsigned char * ) buf -> data LEAF_NODE 7 ( TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FIELD 7 buf -> data LEAF_NODE 8 buf LEAF_NODE 8 -> LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 i2d_ASN1_TYPE ( atyp , & p ) ; EXPR 4 i2d_ASN1_TYPE ( atyp , & p ) FUNCTION_CALL 5 i2d_ASN1_TYPE ( atyp , & p ) CALLEE 6 i2d_ASN1_TYPE LEAF_NODE 7 i2d_ASN1_TYPE LEAF_NODE 6 ( ARGUMENT 6 atyp FIELD 7 atyp LEAF_NODE 8 atyp LEAF_NODE 6 , ARGUMENT 6 & p UNARY_EXPR 7 & p UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 p LEAF_NODE 9 p LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ASN1_TYPE_free ( atyp ) ; EXPR 4 ASN1_TYPE_free ( atyp ) FUNCTION_CALL 5 ASN1_TYPE_free ( atyp ) CALLEE 6 ASN1_TYPE_free LEAF_NODE 7 ASN1_TYPE_free LEAF_NODE 6 ( ARGUMENT 6 atyp FIELD 7 atyp LEAF_NODE 8 atyp LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return len ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 len EXPR 5 len FIELD 6 len LEAF_NODE 7 len LEAF_NODE 4 ; LABEL 3 err : LEAF_NODE 4 err LEAF_NODE 4 : EXPR_STATEMENT 3 NCONF_free ( cnf ) ; EXPR 4 NCONF_free ( cnf ) FUNCTION_CALL 5 NCONF_free ( cnf ) CALLEE 6 NCONF_free LEAF_NODE 7 NCONF_free LEAF_NODE 6 ( ARGUMENT 6 cnf FIELD 7 cnf LEAF_NODE 8 cnf LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ASN1_TYPE_free ( atyp ) ; EXPR 4 ASN1_TYPE_free ( atyp ) FUNCTION_CALL 5 ASN1_TYPE_free ( atyp ) CALLEE 6 ASN1_TYPE_free LEAF_NODE 7 ASN1_TYPE_free LEAF_NODE 6 ( ARGUMENT 6 atyp FIELD 7 atyp LEAF_NODE 8 atyp LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return - 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 - 1 EXPR 5 - 1 UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 93, "project": "openssl_ast_normal_function_test_19", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static const SSL_METHOD * LEAF_NODE 3 static TYPE_NAME 3 const SSL_METHOD LEAF_NODE 4 const LEAF_NODE 4 SSL_METHOD LEAF_NODE 3 * FUNCTION_NAME 2 ssl23_get_client_method LEAF_NODE 3 ssl23_get_client_method PARAMETER_LIST 2 ( int ver ) LEAF_NODE 3 ( PARAMETER_DECL 3 int ver TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 ver LEAF_NODE 5 ver LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ver == SSL2_VERSION EXPR 5 ver == SSL2_VERSION FIELD 6 ver LEAF_NODE 7 ver EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 SSL2_VERSION LEAF_NODE 7 SSL2_VERSION LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return ( SSLv2_client_method ( ) ) ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 ( SSLv2_client_method ( ) ) EXPR 7 ( SSLv2_client_method ( ) ) LEAF_NODE 8 ( FUNCTION_CALL 8 SSLv2_client_method ( ) CALLEE 9 SSLv2_client_method LEAF_NODE 10 SSLv2_client_method LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 8 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ver == SSL3_VERSION EXPR 5 ver == SSL3_VERSION FIELD 6 ver LEAF_NODE 7 ver EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 SSL3_VERSION LEAF_NODE 7 SSL3_VERSION LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return ( SSLv3_client_method ( ) ) ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 ( SSLv3_client_method ( ) ) EXPR 7 ( SSLv3_client_method ( ) ) LEAF_NODE 8 ( FUNCTION_CALL 8 SSLv3_client_method ( ) CALLEE 9 SSLv3_client_method LEAF_NODE 10 SSLv3_client_method LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 8 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ver == TLS1_VERSION EXPR 7 ver == TLS1_VERSION FIELD 8 ver LEAF_NODE 9 ver EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 TLS1_VERSION LEAF_NODE 9 TLS1_VERSION LEAF_NODE 6 ) STATEMENTS 6 JUMP_STATEMENT 7 return ( TLSv1_client_method ( ) ) ; KEYWORD 8 return LEAF_NODE 9 return DESTINATION 8 ( TLSv1_client_method ( ) ) EXPR 9 ( TLSv1_client_method ( ) ) LEAF_NODE 10 ( FUNCTION_CALL 10 TLSv1_client_method ( ) CALLEE 11 TLSv1_client_method LEAF_NODE 12 TLSv1_client_method LEAF_NODE 11 ( LEAF_NODE 11 ) LEAF_NODE 10 ) LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ver == TLS1_1_VERSION EXPR 7 ver == TLS1_1_VERSION FIELD 8 ver LEAF_NODE 9 ver EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 TLS1_1_VERSION LEAF_NODE 9 TLS1_1_VERSION LEAF_NODE 6 ) STATEMENTS 6 JUMP_STATEMENT 7 return ( TLSv1_1_client_method ( ) ) ; KEYWORD 8 return LEAF_NODE 9 return DESTINATION 8 ( TLSv1_1_client_method ( ) ) EXPR 9 ( TLSv1_1_client_method ( ) ) LEAF_NODE 10 ( FUNCTION_CALL 10 TLSv1_1_client_method ( ) CALLEE 11 TLSv1_1_client_method LEAF_NODE 12 TLSv1_1_client_method LEAF_NODE 11 ( LEAF_NODE 11 ) LEAF_NODE 10 ) LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ver == TLS1_2_VERSION EXPR 7 ver == TLS1_2_VERSION FIELD 8 ver LEAF_NODE 9 ver EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 TLS1_2_VERSION LEAF_NODE 9 TLS1_2_VERSION LEAF_NODE 6 ) STATEMENTS 6 JUMP_STATEMENT 7 return ( TLSv1_2_client_method ( ) ) ; KEYWORD 8 return LEAF_NODE 9 return DESTINATION 8 ( TLSv1_2_client_method ( ) ) EXPR 9 ( TLSv1_2_client_method ( ) ) LEAF_NODE 10 ( FUNCTION_CALL 10 TLSv1_2_client_method ( ) CALLEE 11 TLSv1_2_client_method LEAF_NODE 12 TLSv1_2_client_method LEAF_NODE 11 ( LEAF_NODE 11 ) LEAF_NODE 10 ) LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 return LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 2 }", "idx": 94, "project": "openssl_ast_vul_function_test_33", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 nid_cmp LEAF_NODE 3 nid_cmp PARAMETER_LIST 2 ( const int * a , const int * b ) LEAF_NODE 3 ( PARAMETER_DECL 3 const int * a TYPE 4 const int * TYPE_NAME 5 const int LEAF_NODE 6 const LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 const int * b TYPE 4 const int * TYPE_NAME 5 const int LEAF_NODE 6 const LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 b LEAF_NODE 5 b LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return * a - * b ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 * a - * b EXPR 5 * a - * b UNARY_EXPR 6 * a UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 - UNARY_EXPR 6 * b UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 b LEAF_NODE 8 b LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 95, "project": "openssl_ast_normal_function_test_42", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 char * save_rand_file ; VAR_DECL 2 char * save_rand_file TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 save_rand_file LEAF_NODE 4 save_rand_file LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 app_RAND_load_conf LEAF_NODE 3 app_RAND_load_conf PARAMETER_LIST 2 ( CONF * c , const char * section ) LEAF_NODE 3 ( PARAMETER_DECL 3 CONF * c TYPE 4 CONF * TYPE_NAME 5 CONF LEAF_NODE 6 CONF POINTER 5 * LEAF_NODE 6 * NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 , PARAMETER_DECL 3 const char * section TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 section LEAF_NODE 5 section LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 const char * randfile ; randfile = NCONF_get_string ( c , section , \"RANDFILE\" ) ; VAR_DECL 4 const char * randfile ; randfile = NCONF_get_string ( c , section , \"RANDFILE\" ) TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 randfile LEAF_NODE 6 randfile LEAF_NODE 5 ; INIT 5 randfile = NCONF_get_string ( c , section , \"RANDFILE\" ) ASSIGN 6 randfile = NCONF_get_string ( c , section , \"RANDFILE\" ) LVAL 7 randfile NAME 8 randfile LEAF_NODE 9 randfile ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NCONF_get_string ( c , section , \"RANDFILE\" ) FUNCTION_CALL 8 NCONF_get_string ( c , section , \"RANDFILE\" ) CALLEE 9 NCONF_get_string LEAF_NODE 10 NCONF_get_string LEAF_NODE 9 ( ARGUMENT 9 c FIELD 10 c LEAF_NODE 11 c LEAF_NODE 9 , ARGUMENT 9 section FIELD 10 section LEAF_NODE 11 section LEAF_NODE 9 , ARGUMENT 9 \"RANDFILE\" FIELD 10 \"RANDFILE\" LEAF_NODE 11 \"RANDFILE\" LEAF_NODE 9 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 randfile == NULL EXPR 5 randfile == NULL FIELD 6 randfile LEAF_NODE 7 randfile EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ERR_clear_error ( ) ; EXPR 7 ERR_clear_error ( ) FUNCTION_CALL 8 ERR_clear_error ( ) CALLEE 9 ERR_clear_error LEAF_NODE 10 ERR_clear_error LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return DESTINATION ; KEYWORD 7 return LEAF_NODE 8 return LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 RAND_load_file ( randfile , - 1 ) < 0 EXPR 5 RAND_load_file ( randfile , - 1 ) < 0 FUNCTION_CALL 6 RAND_load_file ( randfile , - 1 ) CALLEE 7 RAND_load_file LEAF_NODE 8 RAND_load_file LEAF_NODE 7 ( ARGUMENT 7 randfile FIELD 8 randfile LEAF_NODE 9 randfile LEAF_NODE 7 , ARGUMENT 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ) REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 BIO_printf ( bio_err , \"Can't load %s into RNG\\n\" , randfile ) ; EXPR 7 BIO_printf ( bio_err , \"Can't load %s into RNG\\n\" , randfile ) FUNCTION_CALL 8 BIO_printf ( bio_err , \"Can't load %s into RNG\\n\" , randfile ) CALLEE 9 BIO_printf LEAF_NODE 10 BIO_printf LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 , ARGUMENT 9 \"Can't load %s into RNG\\n\" FIELD 10 \"Can't load %s into RNG\\n\" LEAF_NODE 11 \"Can't load %s into RNG\\n\" LEAF_NODE 9 , ARGUMENT 9 randfile FIELD 10 randfile LEAF_NODE 11 randfile LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ERR_print_errors ( bio_err ) ; EXPR 7 ERR_print_errors ( bio_err ) FUNCTION_CALL 8 ERR_print_errors ( bio_err ) CALLEE 9 ERR_print_errors LEAF_NODE 10 ERR_print_errors LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 save_rand_file == NULL EXPR 5 save_rand_file == NULL FIELD 6 save_rand_file LEAF_NODE 7 save_rand_file EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 save_rand_file = OPENSSL_strdup ( randfile ) ; EXPR 6 save_rand_file = OPENSSL_strdup ( randfile ) ASSIGN 7 save_rand_file = OPENSSL_strdup ( randfile ) LVAL 8 save_rand_file FIELD 9 save_rand_file LEAF_NODE 10 save_rand_file ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 OPENSSL_strdup ( randfile ) FUNCTION_CALL 9 OPENSSL_strdup ( randfile ) CALLEE 10 OPENSSL_strdup LEAF_NODE 11 OPENSSL_strdup LEAF_NODE 10 ( ARGUMENT 10 randfile FIELD 11 randfile LEAF_NODE 12 randfile LEAF_NODE 10 ) LEAF_NODE 6 ; LEAF_NODE 2 }", "idx": 96, "project": "openssl_ast_normal_function_test_43", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; SIMPLE_DECL 1 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } ; CLASS_DEF 2 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } CLASS_DEF 3 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } LEAF_NODE 4 struct CLASS_NAME 4 testdata LEAF_NODE 5 testdata LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; SIMPLE_DECL 5 char * data ; VAR_DECL 6 char * data TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 int type ; VAR_DECL 6 int type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 type LEAF_NODE 8 type LEAF_NODE 6 ; SIMPLE_DECL 5 int expected_type ; VAR_DECL 6 int expected_type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 expected_type LEAF_NODE 8 expected_type LEAF_NODE 6 ; SIMPLE_DECL 5 int check_result ; VAR_DECL 6 int check_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 check_result LEAF_NODE 8 check_result LEAF_NODE 6 ; SIMPLE_DECL 5 time_t t ; VAR_DECL 6 time_t t TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 t LEAF_NODE 8 t LEAF_NODE 6 ; SIMPLE_DECL 5 int cmp_result ; VAR_DECL 6 int cmp_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 cmp_result LEAF_NODE 8 cmp_result LEAF_NODE 6 ; SIMPLE_DECL 5 int convert_result ; VAR_DECL 6 int convert_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 convert_result LEAF_NODE 8 convert_result LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } ; CLASS_DEF 2 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } CLASS_DEF 3 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } LEAF_NODE 4 struct CLASS_NAME 4 compare_testdata LEAF_NODE 5 compare_testdata LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; SIMPLE_DECL 5 ASN1_TIME t1 ; VAR_DECL 6 ASN1_TIME t1 TYPE 7 ASN1_TIME TYPE_NAME 8 ASN1_TIME LEAF_NODE 9 ASN1_TIME NAME 7 t1 LEAF_NODE 8 t1 LEAF_NODE 6 ; SIMPLE_DECL 5 ASN1_TIME t2 ; VAR_DECL 6 ASN1_TIME t2 TYPE 7 ASN1_TIME TYPE_NAME 8 ASN1_TIME LEAF_NODE 9 ASN1_TIME NAME 7 t2 LEAF_NODE 8 t2 LEAF_NODE 6 ; SIMPLE_DECL 5 int result ; VAR_DECL 6 int result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 result LEAF_NODE 8 result LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TODAY_GEN_STR ; TODAY_GEN_STR = \"20170825000000Z\" ; VAR_DECL 2 unsigned char [ ] TODAY_GEN_STR ; TODAY_GEN_STR = \"20170825000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TODAY_GEN_STR LEAF_NODE 4 TODAY_GEN_STR LEAF_NODE 3 ; INIT 3 TODAY_GEN_STR = \"20170825000000Z\" ASSIGN 4 TODAY_GEN_STR = \"20170825000000Z\" LVAL 5 TODAY_GEN_STR NAME 6 TODAY_GEN_STR LEAF_NODE 7 TODAY_GEN_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"20170825000000Z\" FIELD 6 \"20170825000000Z\" LEAF_NODE 7 \"20170825000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TOMORROW_GEN_STR ; TOMORROW_GEN_STR = \"20170826000000Z\" ; VAR_DECL 2 unsigned char [ ] TOMORROW_GEN_STR ; TOMORROW_GEN_STR = \"20170826000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TOMORROW_GEN_STR LEAF_NODE 4 TOMORROW_GEN_STR LEAF_NODE 3 ; INIT 3 TOMORROW_GEN_STR = \"20170826000000Z\" ASSIGN 4 TOMORROW_GEN_STR = \"20170826000000Z\" LVAL 5 TOMORROW_GEN_STR NAME 6 TOMORROW_GEN_STR LEAF_NODE 7 TOMORROW_GEN_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"20170826000000Z\" FIELD 6 \"20170826000000Z\" LEAF_NODE 7 \"20170826000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TODAY_UTC_STR ; TODAY_UTC_STR = \"170825000000Z\" ; VAR_DECL 2 unsigned char [ ] TODAY_UTC_STR ; TODAY_UTC_STR = \"170825000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TODAY_UTC_STR LEAF_NODE 4 TODAY_UTC_STR LEAF_NODE 3 ; INIT 3 TODAY_UTC_STR = \"170825000000Z\" ASSIGN 4 TODAY_UTC_STR = \"170825000000Z\" LVAL 5 TODAY_UTC_STR NAME 6 TODAY_UTC_STR LEAF_NODE 7 TODAY_UTC_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"170825000000Z\" FIELD 6 \"170825000000Z\" LEAF_NODE 7 \"170825000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TOMORROW_UTC_STR ; TOMORROW_UTC_STR = \"170826000000Z\" ; VAR_DECL 2 unsigned char [ ] TOMORROW_UTC_STR ; TOMORROW_UTC_STR = \"170826000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TOMORROW_UTC_STR LEAF_NODE 4 TOMORROW_UTC_STR LEAF_NODE 3 ; INIT 3 TOMORROW_UTC_STR = \"170826000000Z\" ASSIGN 4 TOMORROW_UTC_STR = \"170826000000Z\" LVAL 5 TOMORROW_UTC_STR NAME 6 TOMORROW_UTC_STR LEAF_NODE 7 TOMORROW_UTC_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"170826000000Z\" FIELD 6 \"170826000000Z\" LEAF_NODE 7 \"170826000000Z\" LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_pos LEAF_NODE 3 test_table_pos PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_pos , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_pos , idx ) EXPR 5 test_table ( tbl_testdata_pos , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_pos , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_pos FIELD 8 tbl_testdata_pos LEAF_NODE 9 tbl_testdata_pos LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_neg LEAF_NODE 3 test_table_neg PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_neg , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_neg , idx ) EXPR 5 test_table ( tbl_testdata_neg , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_neg , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_neg FIELD 8 tbl_testdata_neg LEAF_NODE 9 tbl_testdata_neg LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_pos_64bit LEAF_NODE 3 test_table_pos_64bit PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_pos_64bit , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_pos_64bit , idx ) EXPR 5 test_table ( tbl_testdata_pos_64bit , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_pos_64bit , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_pos_64bit FIELD 8 tbl_testdata_pos_64bit LEAF_NODE 9 tbl_testdata_pos_64bit LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_neg_64bit LEAF_NODE 3 test_table_neg_64bit PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_neg_64bit , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_neg_64bit , idx ) EXPR 5 test_table ( tbl_testdata_neg_64bit , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_neg_64bit , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_neg_64bit FIELD 8 tbl_testdata_neg_64bit LEAF_NODE 9 tbl_testdata_neg_64bit LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_compare LEAF_NODE 3 test_table_compare PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct compare_testdata * td ; td = & tbl_compare_testdata [ idx ] ; VAR_DECL 4 struct compare_testdata * td ; td = & tbl_compare_testdata [ idx ] TYPE 5 struct compare_testdata * TYPE_NAME 6 struct compare_testdata LEAF_NODE 7 struct LEAF_NODE 7 compare_testdata POINTER 6 * LEAF_NODE 7 * NAME 5 td LEAF_NODE 6 td LEAF_NODE 5 ; INIT 5 td = & tbl_compare_testdata [ idx ] ASSIGN 6 td = & tbl_compare_testdata [ idx ] LVAL 7 td NAME 8 td LEAF_NODE 9 td ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & tbl_compare_testdata [ idx ] UNARY_EXPR 8 & tbl_compare_testdata [ idx ] UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 tbl_compare_testdata [ idx ] LEAF_NODE 10 tbl_compare_testdata LEAF_NODE 10 [ EXPR 10 idx FIELD 11 idx LEAF_NODE 12 idx LEAF_NODE 10 ] LEAF_NODE 4 ; JUMP_STATEMENT 3 return TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) EXPR 5 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) FUNCTION_CALL 6 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) CALLEE 7 TEST_int_eq LEAF_NODE 8 TEST_int_eq LEAF_NODE 7 ( ARGUMENT 7 ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) FUNCTION_CALL 8 ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) CALLEE 9 ASN1_TIME_compare LEAF_NODE 10 ASN1_TIME_compare LEAF_NODE 9 ( ARGUMENT 9 & td -> t1 UNARY_EXPR 10 & td -> t1 UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 td -> t1 LEAF_NODE 12 td LEAF_NODE 12 -> LEAF_NODE 12 t1 LEAF_NODE 9 , ARGUMENT 9 & td -> t2 UNARY_EXPR 10 & td -> t2 UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 td -> t2 LEAF_NODE 12 td LEAF_NODE 12 -> LEAF_NODE 12 t2 LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 td -> result FIELD 8 td -> result LEAF_NODE 9 td LEAF_NODE 9 -> LEAF_NODE 9 result LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 97, "project": "openssl_ast_normal_function_test_136", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; SIMPLE_DECL 1 struct X509V3_CONF_METHOD_st BASE_CLASSES { char * ( * get_string ) ( void * db , char * section , char * value ) ; STACK_OF ( CONF_VALUE ) * ( * get_section ) ( void * db , char * section ) ; void ( * free_string ) ( void * db , char * string ) ; void ( * free_section ) ( void * db , STACK_OF ( CONF_VALUE ) * section ) ; } X509V3_CONF_METHOD ; VAR_DECL 2 struct X509V3_CONF_METHOD_st BASE_CLASSES { char * ( * get_string ) ( void * db , char * section , char * value ) ; STACK_OF ( CONF_VALUE ) * ( * get_section ) ( void * db , char * section ) ; void ( * free_string ) ( void * db , char * string ) ; void ( * free_section ) ( void * db , STACK_OF ( CONF_VALUE ) * section ) ; } X509V3_CONF_METHOD TYPE 3 struct X509V3_CONF_METHOD_st BASE_CLASSES { char * ( * get_string ) ( void * db , char * section , char * value ) ; STACK_OF ( CONF_VALUE ) * ( * get_section ) ( void * db , char * section ) ; void ( * free_string ) ( void * db , char * string ) ; void ( * free_section ) ( void * db , STACK_OF ( CONF_VALUE ) * section ) ; } CLASS_DEF 4 struct X509V3_CONF_METHOD_st BASE_CLASSES { char * ( * get_string ) ( void * db , char * section , char * value ) ; STACK_OF ( CONF_VALUE ) * ( * get_section ) ( void * db , char * section ) ; void ( * free_string ) ( void * db , char * string ) ; void ( * free_section ) ( void * db , STACK_OF ( CONF_VALUE ) * section ) ; } LEAF_NODE 5 struct CLASS_NAME 5 X509V3_CONF_METHOD_st LEAF_NODE 6 X509V3_CONF_METHOD_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 char * ( * get_string ) ( void * db , char * section , char * value ) ; STACK_OF ( CONF_VALUE ) * ( * get_section ) ( void * db , char * section ) ; void ( * free_string ) ( void * db , char * string ) ; void ( * free_section ) ( void * db , STACK_OF ( CONF_VALUE ) * section ) ; LEAF_NODE 6 char LEAF_NODE 6 * LEAF_NODE 6 ( LEAF_NODE 6 * LEAF_NODE 6 get_string LEAF_NODE 6 ) LEAF_NODE 6 ( LEAF_NODE 6 void LEAF_NODE 6 * LEAF_NODE 6 db LEAF_NODE 6 , LEAF_NODE 6 char LEAF_NODE 6 * LEAF_NODE 6 section LEAF_NODE 6 , LEAF_NODE 6 char LEAF_NODE 6 * LEAF_NODE 6 value LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 6 STACK_OF LEAF_NODE 6 ( LEAF_NODE 6 CONF_VALUE LEAF_NODE 6 ) LEAF_NODE 6 * LEAF_NODE 6 ( LEAF_NODE 6 * LEAF_NODE 6 get_section LEAF_NODE 6 ) LEAF_NODE 6 ( LEAF_NODE 6 void LEAF_NODE 6 * LEAF_NODE 6 db LEAF_NODE 6 , LEAF_NODE 6 char LEAF_NODE 6 * LEAF_NODE 6 section LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 6 void LEAF_NODE 6 ( LEAF_NODE 6 * LEAF_NODE 6 free_string LEAF_NODE 6 ) LEAF_NODE 6 ( LEAF_NODE 6 void LEAF_NODE 6 * LEAF_NODE 6 db LEAF_NODE 6 , LEAF_NODE 6 char LEAF_NODE 6 * LEAF_NODE 6 string LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 6 void LEAF_NODE 6 ( LEAF_NODE 6 * LEAF_NODE 6 free_section LEAF_NODE 6 ) LEAF_NODE 6 ( LEAF_NODE 6 void LEAF_NODE 6 * LEAF_NODE 6 db LEAF_NODE 6 , LEAF_NODE 6 STACK_OF LEAF_NODE 6 ( LEAF_NODE 6 CONF_VALUE LEAF_NODE 6 ) LEAF_NODE 6 * LEAF_NODE 6 section LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 5 } NAME 3 X509V3_CONF_METHOD LEAF_NODE 4 X509V3_CONF_METHOD LEAF_NODE 2 ; SIMPLE_DECL 1 struct v3_ext_ctx BASE_CLASSES { int flags ; X509 * issuer_cert ; X509 * subject_cert ; X509_REQ * subject_req ; X509_CRL * crl ; X509V3_CONF_METHOD * db_meth ; void * db ; } ; CLASS_DEF 2 struct v3_ext_ctx BASE_CLASSES { int flags ; X509 * issuer_cert ; X509 * subject_cert ; X509_REQ * subject_req ; X509_CRL * crl ; X509V3_CONF_METHOD * db_meth ; void * db ; } CLASS_DEF 3 struct v3_ext_ctx BASE_CLASSES { int flags ; X509 * issuer_cert ; X509 * subject_cert ; X509_REQ * subject_req ; X509_CRL * crl ; X509V3_CONF_METHOD * db_meth ; void * db ; } LEAF_NODE 4 struct CLASS_NAME 4 v3_ext_ctx LEAF_NODE 5 v3_ext_ctx LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int flags ; X509 * issuer_cert ; X509 * subject_cert ; X509_REQ * subject_req ; X509_CRL * crl ; X509V3_CONF_METHOD * db_meth ; void * db ; SIMPLE_DECL 5 int flags ; VAR_DECL 6 int flags TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 X509 * issuer_cert ; VAR_DECL 6 X509 * issuer_cert TYPE 7 X509 * TYPE_NAME 8 X509 LEAF_NODE 9 X509 POINTER 8 * LEAF_NODE 9 * NAME 7 issuer_cert LEAF_NODE 8 issuer_cert LEAF_NODE 6 ; SIMPLE_DECL 5 X509 * subject_cert ; VAR_DECL 6 X509 * subject_cert TYPE 7 X509 * TYPE_NAME 8 X509 LEAF_NODE 9 X509 POINTER 8 * LEAF_NODE 9 * NAME 7 subject_cert LEAF_NODE 8 subject_cert LEAF_NODE 6 ; SIMPLE_DECL 5 X509_REQ * subject_req ; VAR_DECL 6 X509_REQ * subject_req TYPE 7 X509_REQ * TYPE_NAME 8 X509_REQ LEAF_NODE 9 X509_REQ POINTER 8 * LEAF_NODE 9 * NAME 7 subject_req LEAF_NODE 8 subject_req LEAF_NODE 6 ; SIMPLE_DECL 5 X509_CRL * crl ; VAR_DECL 6 X509_CRL * crl TYPE 7 X509_CRL * TYPE_NAME 8 X509_CRL LEAF_NODE 9 X509_CRL POINTER 8 * LEAF_NODE 9 * NAME 7 crl LEAF_NODE 8 crl LEAF_NODE 6 ; SIMPLE_DECL 5 X509V3_CONF_METHOD * db_meth ; VAR_DECL 6 X509V3_CONF_METHOD * db_meth TYPE 7 X509V3_CONF_METHOD * TYPE_NAME 8 X509V3_CONF_METHOD LEAF_NODE 9 X509V3_CONF_METHOD POINTER 8 * LEAF_NODE 9 * NAME 7 db_meth LEAF_NODE 8 db_meth LEAF_NODE 6 ; SIMPLE_DECL 5 void * db ; VAR_DECL 6 void * db TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 db LEAF_NODE 8 db LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct v3_ext_ctx X509V3_CTX ; VAR_DECL 2 struct v3_ext_ctx X509V3_CTX TYPE 3 struct v3_ext_ctx TYPE_NAME 4 struct v3_ext_ctx LEAF_NODE 5 struct LEAF_NODE 5 v3_ext_ctx NAME 3 X509V3_CTX LEAF_NODE 4 X509V3_CTX LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 ASN1_TYPE * TYPE_NAME 3 ASN1_TYPE LEAF_NODE 4 ASN1_TYPE LEAF_NODE 3 * FUNCTION_NAME 2 ASN1_generate_nconf LEAF_NODE 3 ASN1_generate_nconf PARAMETER_LIST 2 ( const char * str , CONF * nconf ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * str TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 str LEAF_NODE 5 str LEAF_NODE 3 , PARAMETER_DECL 3 CONF * nconf TYPE 4 CONF * TYPE_NAME 5 CONF LEAF_NODE 6 CONF POINTER 5 * LEAF_NODE 6 * NAME 4 nconf LEAF_NODE 5 nconf LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 X509V3_CTX cnf ; VAR_DECL 4 X509V3_CTX cnf TYPE 5 X509V3_CTX TYPE_NAME 6 X509V3_CTX LEAF_NODE 7 X509V3_CTX NAME 5 cnf LEAF_NODE 6 cnf LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! nconf EXPR 5 ! nconf UNARY_EXPR 6 ! nconf UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 nconf LEAF_NODE 8 nconf LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return ASN1_generate_v3 ( str , NULL ) ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 ASN1_generate_v3 ( str , NULL ) EXPR 7 ASN1_generate_v3 ( str , NULL ) FUNCTION_CALL 8 ASN1_generate_v3 ( str , NULL ) CALLEE 9 ASN1_generate_v3 LEAF_NODE 10 ASN1_generate_v3 LEAF_NODE 9 ( ARGUMENT 9 str FIELD 10 str LEAF_NODE 11 str LEAF_NODE 9 , ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 ) LEAF_NODE 6 ; EXPR_STATEMENT 3 X509V3_set_nconf ( & cnf , nconf ) ; EXPR 4 X509V3_set_nconf ( & cnf , nconf ) FUNCTION_CALL 5 X509V3_set_nconf ( & cnf , nconf ) CALLEE 6 X509V3_set_nconf LEAF_NODE 7 X509V3_set_nconf LEAF_NODE 6 ( ARGUMENT 6 & cnf UNARY_EXPR 7 & cnf UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 cnf LEAF_NODE 9 cnf LEAF_NODE 6 , ARGUMENT 6 nconf FIELD 7 nconf LEAF_NODE 8 nconf LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return ASN1_generate_v3 ( str , & cnf ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ASN1_generate_v3 ( str , & cnf ) EXPR 5 ASN1_generate_v3 ( str , & cnf ) FUNCTION_CALL 6 ASN1_generate_v3 ( str , & cnf ) CALLEE 7 ASN1_generate_v3 LEAF_NODE 8 ASN1_generate_v3 LEAF_NODE 7 ( ARGUMENT 7 str FIELD 8 str LEAF_NODE 9 str LEAF_NODE 7 , ARGUMENT 7 & cnf UNARY_EXPR 8 & cnf UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 cnf LEAF_NODE 10 cnf LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 98, "project": "openssl_ast_normal_function_test_108", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ssl3_get_server_certificate LEAF_NODE 3 ssl3_get_server_certificate PARAMETER_LIST 2 ( SSL * s ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int al , int i , int ok , int ret ; ret = - 1 ; INIT_DECL_LIST 4 int al , int i , int ok , int ret ; ret = - 1 VAR_DECL 5 int al TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 al LEAF_NODE 7 al LEAF_NODE 5 , INIT_DECL_LIST 5 int i , int ok , int ret ; ret = - 1 VAR_DECL 6 int i TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 i LEAF_NODE 8 i LEAF_NODE 6 , INIT_DECL_LIST 6 int ok , int ret ; ret = - 1 VAR_DECL 7 int ok TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 ok LEAF_NODE 9 ok LEAF_NODE 7 , VAR_DECL 7 int ret ; ret = - 1 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 ret LEAF_NODE 9 ret LEAF_NODE 8 ; INIT 8 ret = - 1 ASSIGN 9 ret = - 1 LVAL 10 ret NAME 11 ret LEAF_NODE 12 ret ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 - 1 UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned long n , unsigned long nc , unsigned long llen , unsigned long l ; INIT_DECL_LIST 4 unsigned long n , unsigned long nc , unsigned long llen , unsigned long l VAR_DECL 5 unsigned long n TYPE 6 unsigned long TYPE_NAME 7 unsigned long LEAF_NODE 8 unsigned LEAF_NODE 8 long NAME 6 n LEAF_NODE 7 n LEAF_NODE 5 , INIT_DECL_LIST 5 unsigned long nc , unsigned long llen , unsigned long l VAR_DECL 6 unsigned long nc TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 nc LEAF_NODE 8 nc LEAF_NODE 6 , INIT_DECL_LIST 6 unsigned long llen , unsigned long l VAR_DECL 7 unsigned long llen TYPE 8 unsigned long TYPE_NAME 9 unsigned long LEAF_NODE 10 unsigned LEAF_NODE 10 long NAME 8 llen LEAF_NODE 9 llen LEAF_NODE 7 , VAR_DECL 7 unsigned long l TYPE 8 unsigned long TYPE_NAME 9 unsigned long LEAF_NODE 10 unsigned LEAF_NODE 10 long NAME 8 l LEAF_NODE 9 l LEAF_NODE 4 ; SIMPLE_DECL 3 X509 * x ; x = NULL ; VAR_DECL 4 X509 * x ; x = NULL TYPE 5 X509 * TYPE_NAME 6 X509 LEAF_NODE 7 X509 POINTER 6 * LEAF_NODE 7 * NAME 5 x LEAF_NODE 6 x LEAF_NODE 5 ; INIT 5 x = NULL ASSIGN 6 x = NULL LVAL 7 x NAME 8 x LEAF_NODE 9 x ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 const unsigned char * q , const unsigned char * p ; INIT_DECL_LIST 4 const unsigned char * q , const unsigned char * p VAR_DECL 5 const unsigned char * q TYPE 6 const unsigned char * TYPE_NAME 7 const unsigned char LEAF_NODE 8 const LEAF_NODE 8 unsigned LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 q LEAF_NODE 7 q LEAF_NODE 5 , VAR_DECL 5 const unsigned char * p TYPE 6 const unsigned char * TYPE_NAME 7 const unsigned char LEAF_NODE 8 const LEAF_NODE 8 unsigned LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 p LEAF_NODE 7 p LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * d ; VAR_DECL 4 unsigned char * d TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 d LEAF_NODE 6 d LEAF_NODE 4 ; EXPR_STATEMENT 3 STACK_OF ( X509 ) * sk = NULL ; EXPR 4 STACK_OF ( X509 ) * sk = NULL ASSIGN 5 STACK_OF ( X509 ) * sk = NULL LVAL 6 STACK_OF ( X509 ) * sk FUNCTION_CALL 7 STACK_OF ( X509 ) CALLEE 8 STACK_OF LEAF_NODE 9 STACK_OF LEAF_NODE 8 ( ARGUMENT 8 X509 FIELD 9 X509 LEAF_NODE 10 X509 LEAF_NODE 8 ) LEAF_NODE 7 * FIELD 7 sk LEAF_NODE 8 sk ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 SESS_CERT * sc ; VAR_DECL 4 SESS_CERT * sc TYPE 5 SESS_CERT * TYPE_NAME 6 SESS_CERT LEAF_NODE 7 SESS_CERT POINTER 6 * LEAF_NODE 7 * NAME 5 sc LEAF_NODE 6 sc LEAF_NODE 4 ; SIMPLE_DECL 3 EVP_PKEY * pkey ; pkey = NULL ; VAR_DECL 4 EVP_PKEY * pkey ; pkey = NULL TYPE 5 EVP_PKEY * TYPE_NAME 6 EVP_PKEY LEAF_NODE 7 EVP_PKEY POINTER 6 * LEAF_NODE 7 * NAME 5 pkey LEAF_NODE 6 pkey LEAF_NODE 5 ; INIT 5 pkey = NULL ASSIGN 6 pkey = NULL LVAL 7 pkey NAME 8 pkey LEAF_NODE 9 pkey ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int need_cert ; need_cert = 1 ; VAR_DECL 4 int need_cert ; need_cert = 1 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 need_cert LEAF_NODE 6 need_cert LEAF_NODE 5 ; INIT 5 need_cert = 1 ASSIGN 6 need_cert = 1 LVAL 7 need_cert NAME 8 need_cert LEAF_NODE 9 need_cert ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 n = s -> method -> ssl_get_message ( s , SSL3_ST_CR_CERT_A , SSL3_ST_CR_CERT_B , - 1 , s -> max_cert_list , & ok ) ; EXPR 4 n = s -> method -> ssl_get_message ( s , SSL3_ST_CR_CERT_A , SSL3_ST_CR_CERT_B , - 1 , s -> max_cert_list , & ok ) ASSIGN 5 n = s -> method -> ssl_get_message ( s , SSL3_ST_CR_CERT_A , SSL3_ST_CR_CERT_B , - 1 , s -> max_cert_list , & ok ) LVAL 6 n FIELD 7 n LEAF_NODE 8 n ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 s -> method -> ssl_get_message ( s , SSL3_ST_CR_CERT_A , SSL3_ST_CR_CERT_B , - 1 , s -> max_cert_list , & ok ) FUNCTION_CALL 7 s -> method -> ssl_get_message ( s , SSL3_ST_CR_CERT_A , SSL3_ST_CR_CERT_B , - 1 , s -> max_cert_list , & ok ) CALLEE 8 s -> method -> ssl_get_message LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 method LEAF_NODE 9 -> LEAF_NODE 9 ssl_get_message LEAF_NODE 8 ( ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 , ARGUMENT 8 SSL3_ST_CR_CERT_A FIELD 9 SSL3_ST_CR_CERT_A LEAF_NODE 10 SSL3_ST_CR_CERT_A LEAF_NODE 8 , ARGUMENT 8 SSL3_ST_CR_CERT_B FIELD 9 SSL3_ST_CR_CERT_B LEAF_NODE 10 SSL3_ST_CR_CERT_B LEAF_NODE 8 , ARGUMENT 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 8 , ARGUMENT 8 s -> max_cert_list FIELD 9 s -> max_cert_list LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 max_cert_list LEAF_NODE 8 , ARGUMENT 8 & ok UNARY_EXPR 9 & ok UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 ok LEAF_NODE 11 ok LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ok EXPR 5 ! ok UNARY_EXPR 6 ! ok UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 ok LEAF_NODE 8 ok LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return ( ( int ) n ) ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 ( ( int ) n ) EXPR 7 ( ( int ) n ) LEAF_NODE 8 ( LEAF_NODE 8 ( TYPE_NAME 8 int LEAF_NODE 9 int LEAF_NODE 8 ) FIELD 8 n LEAF_NODE 9 n LEAF_NODE 8 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( s -> s3 -> tmp . message_type == SSL3_MT_SERVER_KEY_EXCHANGE ) || ( ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) && ( s -> s3 -> tmp . message_type == SSL3_MT_SERVER_DONE ) ) EXPR 5 ( s -> s3 -> tmp . message_type == SSL3_MT_SERVER_KEY_EXCHANGE ) || ( ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) && ( s -> s3 -> tmp . message_type == SSL3_MT_SERVER_DONE ) ) OR 6 ( s -> s3 -> tmp . message_type == SSL3_MT_SERVER_KEY_EXCHANGE ) || ( ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) && ( s -> s3 -> tmp . message_type == SSL3_MT_SERVER_DONE ) ) EXPR 7 ( s -> s3 -> tmp . message_type == SSL3_MT_SERVER_KEY_EXCHANGE ) LEAF_NODE 8 ( FIELD 8 s -> s3 -> tmp . message_type LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 s3 LEAF_NODE 9 -> LEAF_NODE 9 tmp LEAF_NODE 9 . LEAF_NODE 9 message_type EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 SSL3_MT_SERVER_KEY_EXCHANGE LEAF_NODE 9 SSL3_MT_SERVER_KEY_EXCHANGE LEAF_NODE 8 ) LEAF_NODE 7 || EXPR 7 ( ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) && ( s -> s3 -> tmp . message_type == SSL3_MT_SERVER_DONE ) ) LEAF_NODE 8 ( AND 8 ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) && ( s -> s3 -> tmp . message_type == SSL3_MT_SERVER_DONE ) EXPR 9 ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) LEAF_NODE 10 ( FIELD 10 s -> s3 -> tmp . new_cipher -> algorithm_auth LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s3 LEAF_NODE 11 -> LEAF_NODE 11 tmp LEAF_NODE 11 . LEAF_NODE 11 new_cipher LEAF_NODE 11 -> LEAF_NODE 11 algorithm_auth LEAF_NODE 10 & FIELD 10 SSL_aKRB5 LEAF_NODE 11 SSL_aKRB5 LEAF_NODE 10 ) LEAF_NODE 9 && EXPR 9 ( s -> s3 -> tmp . message_type == SSL3_MT_SERVER_DONE ) LEAF_NODE 10 ( FIELD 10 s -> s3 -> tmp . message_type LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s3 LEAF_NODE 11 -> LEAF_NODE 11 tmp LEAF_NODE 11 . LEAF_NODE 11 message_type EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SSL3_MT_SERVER_DONE LEAF_NODE 11 SSL3_MT_SERVER_DONE LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 s -> s3 -> tmp . reuse_message = 1 ; EXPR 7 s -> s3 -> tmp . reuse_message = 1 ASSIGN 8 s -> s3 -> tmp . reuse_message = 1 LVAL 9 s -> s3 -> tmp . reuse_message FIELD 10 s -> s3 -> tmp . reuse_message LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s3 LEAF_NODE 11 -> LEAF_NODE 11 tmp LEAF_NODE 11 . LEAF_NODE 11 reuse_message ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; JUMP_STATEMENT 6 return ( 1 ) ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 ( 1 ) EXPR 8 ( 1 ) LEAF_NODE 9 ( FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> s3 -> tmp . message_type != SSL3_MT_CERTIFICATE EXPR 5 s -> s3 -> tmp . message_type != SSL3_MT_CERTIFICATE FIELD 6 s -> s3 -> tmp . message_type LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 s3 LEAF_NODE 7 -> LEAF_NODE 7 tmp LEAF_NODE 7 . LEAF_NODE 7 message_type EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 SSL3_MT_CERTIFICATE LEAF_NODE 7 SSL3_MT_CERTIFICATE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 al = SSL_AD_UNEXPECTED_MESSAGE ; EXPR 7 al = SSL_AD_UNEXPECTED_MESSAGE ASSIGN 8 al = SSL_AD_UNEXPECTED_MESSAGE LVAL 9 al FIELD 10 al LEAF_NODE 11 al ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL_AD_UNEXPECTED_MESSAGE FIELD 10 SSL_AD_UNEXPECTED_MESSAGE LEAF_NODE 11 SSL_AD_UNEXPECTED_MESSAGE LEAF_NODE 7 ; EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_BAD_MESSAGE_TYPE ) ; EXPR 7 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_BAD_MESSAGE_TYPE ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_BAD_MESSAGE_TYPE ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL3_GET_SERVER_CERTIFICATE FIELD 10 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 11 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 9 , ARGUMENT 9 SSL_R_BAD_MESSAGE_TYPE FIELD 10 SSL_R_BAD_MESSAGE_TYPE LEAF_NODE 11 SSL_R_BAD_MESSAGE_TYPE LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto f_err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 f_err LEAF_NODE 8 f_err LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 p = d = ( unsigned char * ) s -> init_msg ; EXPR 4 p = d = ( unsigned char * ) s -> init_msg ASSIGN 5 p = d = ( unsigned char * ) s -> init_msg LVAL 6 p FIELD 7 p LEAF_NODE 8 p ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 d = ( unsigned char * ) s -> init_msg ASSIGN 7 d = ( unsigned char * ) s -> init_msg LVAL 8 d FIELD 9 d LEAF_NODE 10 d ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( unsigned char * ) s -> init_msg LEAF_NODE 9 ( TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char LEAF_NODE 9 * LEAF_NODE 9 ) FIELD 9 s -> init_msg LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 init_msg LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( sk = sk_X509_new_null ( ) ) == NULL EXPR 5 ( sk = sk_X509_new_null ( ) ) == NULL LEAF_NODE 6 ( ASSIGN 6 sk = sk_X509_new_null ( ) LVAL 7 sk FIELD 8 sk LEAF_NODE 9 sk ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 sk_X509_new_null ( ) FUNCTION_CALL 8 sk_X509_new_null ( ) CALLEE 9 sk_X509_new_null LEAF_NODE 10 sk_X509_new_null LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 6 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , ERR_R_MALLOC_FAILURE ) ; EXPR 7 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , ERR_R_MALLOC_FAILURE ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL3_GET_SERVER_CERTIFICATE FIELD 10 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 11 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 9 , ARGUMENT 9 ERR_R_MALLOC_FAILURE FIELD 10 ERR_R_MALLOC_FAILURE LEAF_NODE 11 ERR_R_MALLOC_FAILURE LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 n2l3 ( p , llen ) ; EXPR 4 n2l3 ( p , llen ) FUNCTION_CALL 5 n2l3 ( p , llen ) CALLEE 6 n2l3 LEAF_NODE 7 n2l3 LEAF_NODE 6 ( ARGUMENT 6 p FIELD 7 p LEAF_NODE 8 p LEAF_NODE 6 , ARGUMENT 6 llen FIELD 7 llen LEAF_NODE 8 llen LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 llen + 3 != n EXPR 5 llen + 3 != n FIELD 6 llen LEAF_NODE 7 llen LEAF_NODE 6 + FIELD 6 3 LEAF_NODE 7 3 EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 n LEAF_NODE 7 n LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 al = SSL_AD_DECODE_ERROR ; EXPR 7 al = SSL_AD_DECODE_ERROR ASSIGN 8 al = SSL_AD_DECODE_ERROR LVAL 9 al FIELD 10 al LEAF_NODE 11 al ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL_AD_DECODE_ERROR FIELD 10 SSL_AD_DECODE_ERROR LEAF_NODE 11 SSL_AD_DECODE_ERROR LEAF_NODE 7 ; EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_LENGTH_MISMATCH ) ; EXPR 7 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_LENGTH_MISMATCH ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_LENGTH_MISMATCH ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL3_GET_SERVER_CERTIFICATE FIELD 10 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 11 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 9 , ARGUMENT 9 SSL_R_LENGTH_MISMATCH FIELD 10 SSL_R_LENGTH_MISMATCH LEAF_NODE 11 SSL_R_LENGTH_MISMATCH LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto f_err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 f_err LEAF_NODE 8 f_err LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 nc = 0 ; EXPR 5 nc = 0 ASSIGN 6 nc = 0 LVAL 7 nc FIELD 8 nc LEAF_NODE 9 nc ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 nc < llen EXPR 5 nc < llen FIELD 6 nc LEAF_NODE 7 nc REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 llen LEAF_NODE 7 llen LEAF_NODE 4 ; LEAF_NODE 4 FOR_EXPR LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 n2l3 ( p , l ) ; EXPR 7 n2l3 ( p , l ) FUNCTION_CALL 8 n2l3 ( p , l ) CALLEE 9 n2l3 LEAF_NODE 10 n2l3 LEAF_NODE 9 ( ARGUMENT 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 , ARGUMENT 9 l FIELD 10 l LEAF_NODE 11 l LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( l + nc + 3 ) > llen EXPR 8 ( l + nc + 3 ) > llen LEAF_NODE 9 ( FIELD 9 l LEAF_NODE 10 l LEAF_NODE 9 + FIELD 9 nc LEAF_NODE 10 nc LEAF_NODE 9 + FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 9 ) REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 llen LEAF_NODE 10 llen LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 al = SSL_AD_DECODE_ERROR ; EXPR 10 al = SSL_AD_DECODE_ERROR ASSIGN 11 al = SSL_AD_DECODE_ERROR LVAL 12 al FIELD 13 al LEAF_NODE 14 al ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 SSL_AD_DECODE_ERROR FIELD 13 SSL_AD_DECODE_ERROR LEAF_NODE 14 SSL_AD_DECODE_ERROR LEAF_NODE 10 ; EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_CERT_LENGTH_MISMATCH ) ; EXPR 10 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_CERT_LENGTH_MISMATCH ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_CERT_LENGTH_MISMATCH ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL3_GET_SERVER_CERTIFICATE FIELD 13 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 14 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 12 , ARGUMENT 12 SSL_R_CERT_LENGTH_MISMATCH FIELD 13 SSL_R_CERT_LENGTH_MISMATCH LEAF_NODE 14 SSL_R_CERT_LENGTH_MISMATCH LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto f_err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 f_err LEAF_NODE 11 f_err LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 q = p ; EXPR 7 q = p ASSIGN 8 q = p LVAL 9 q FIELD 10 q LEAF_NODE 11 q ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 7 ; EXPR_STATEMENT 6 x = d2i_X509 ( NULL , & q , l ) ; EXPR 7 x = d2i_X509 ( NULL , & q , l ) ASSIGN 8 x = d2i_X509 ( NULL , & q , l ) LVAL 9 x FIELD 10 x LEAF_NODE 11 x ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 d2i_X509 ( NULL , & q , l ) FUNCTION_CALL 10 d2i_X509 ( NULL , & q , l ) CALLEE 11 d2i_X509 LEAF_NODE 12 d2i_X509 LEAF_NODE 11 ( ARGUMENT 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 11 , ARGUMENT 11 & q UNARY_EXPR 12 & q UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 q LEAF_NODE 14 q LEAF_NODE 11 , ARGUMENT 11 l FIELD 12 l LEAF_NODE 13 l LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 x == NULL EXPR 8 x == NULL FIELD 9 x LEAF_NODE 10 x EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 al = SSL_AD_BAD_CERTIFICATE ; EXPR 10 al = SSL_AD_BAD_CERTIFICATE ASSIGN 11 al = SSL_AD_BAD_CERTIFICATE LVAL 12 al FIELD 13 al LEAF_NODE 14 al ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 SSL_AD_BAD_CERTIFICATE FIELD 13 SSL_AD_BAD_CERTIFICATE LEAF_NODE 14 SSL_AD_BAD_CERTIFICATE LEAF_NODE 10 ; EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , ERR_R_ASN1_LIB ) ; EXPR 10 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , ERR_R_ASN1_LIB ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , ERR_R_ASN1_LIB ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL3_GET_SERVER_CERTIFICATE FIELD 13 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 14 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 12 , ARGUMENT 12 ERR_R_ASN1_LIB FIELD 13 ERR_R_ASN1_LIB LEAF_NODE 14 ERR_R_ASN1_LIB LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto f_err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 f_err LEAF_NODE 11 f_err LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 q != ( p + l ) EXPR 8 q != ( p + l ) FIELD 9 q LEAF_NODE 10 q EQ_OPERATOR 9 != LEAF_NODE 10 != LEAF_NODE 9 ( FIELD 9 p LEAF_NODE 10 p LEAF_NODE 9 + FIELD 9 l LEAF_NODE 10 l LEAF_NODE 9 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 al = SSL_AD_DECODE_ERROR ; EXPR 10 al = SSL_AD_DECODE_ERROR ASSIGN 11 al = SSL_AD_DECODE_ERROR LVAL 12 al FIELD 13 al LEAF_NODE 14 al ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 SSL_AD_DECODE_ERROR FIELD 13 SSL_AD_DECODE_ERROR LEAF_NODE 14 SSL_AD_DECODE_ERROR LEAF_NODE 10 ; EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_CERT_LENGTH_MISMATCH ) ; EXPR 10 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_CERT_LENGTH_MISMATCH ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_CERT_LENGTH_MISMATCH ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL3_GET_SERVER_CERTIFICATE FIELD 13 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 14 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 12 , ARGUMENT 12 SSL_R_CERT_LENGTH_MISMATCH FIELD 13 SSL_R_CERT_LENGTH_MISMATCH LEAF_NODE 14 SSL_R_CERT_LENGTH_MISMATCH LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto f_err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 f_err LEAF_NODE 11 f_err LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! sk_X509_push ( sk , x ) EXPR 8 ! sk_X509_push ( sk , x ) UNARY_EXPR 9 ! sk_X509_push ( sk , x ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 sk_X509_push ( sk , x ) CALLEE 11 sk_X509_push LEAF_NODE 12 sk_X509_push LEAF_NODE 11 ( ARGUMENT 11 sk FIELD 12 sk LEAF_NODE 13 sk LEAF_NODE 11 , ARGUMENT 11 x FIELD 12 x LEAF_NODE 13 x LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , ERR_R_MALLOC_FAILURE ) ; EXPR 10 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , ERR_R_MALLOC_FAILURE ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL3_GET_SERVER_CERTIFICATE FIELD 13 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 14 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 12 , ARGUMENT 12 ERR_R_MALLOC_FAILURE FIELD 13 ERR_R_MALLOC_FAILURE LEAF_NODE 14 ERR_R_MALLOC_FAILURE LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 err LEAF_NODE 11 err LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 x = NULL ; EXPR 7 x = NULL ASSIGN 8 x = NULL LVAL 9 x FIELD 10 x LEAF_NODE 11 x ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; EXPR_STATEMENT 6 nc += l + 3 ; EXPR 7 nc += l + 3 ASSIGN 8 nc += l + 3 LVAL 9 nc FIELD 10 nc LEAF_NODE 11 nc ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 l + 3 FIELD 10 l LEAF_NODE 11 l LEAF_NODE 10 + FIELD 10 3 LEAF_NODE 11 3 LEAF_NODE 7 ; EXPR_STATEMENT 6 p = q ; EXPR 7 p = q ASSIGN 8 p = q LVAL 9 p FIELD 10 p LEAF_NODE 11 p ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 q FIELD 10 q LEAF_NODE 11 q LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 i = ssl_verify_cert_chain ( s , sk ) ; EXPR 4 i = ssl_verify_cert_chain ( s , sk ) ASSIGN 5 i = ssl_verify_cert_chain ( s , sk ) LVAL 6 i FIELD 7 i LEAF_NODE 8 i ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ssl_verify_cert_chain ( s , sk ) FUNCTION_CALL 7 ssl_verify_cert_chain ( s , sk ) CALLEE 8 ssl_verify_cert_chain LEAF_NODE 9 ssl_verify_cert_chain LEAF_NODE 8 ( ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 , ARGUMENT 8 sk FIELD 9 sk LEAF_NODE 10 sk LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( s -> verify_mode != SSL_VERIFY_NONE ) && ( i <= 0 ) && ! ( ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kKRB5 ) && ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) ) EXPR 5 ( s -> verify_mode != SSL_VERIFY_NONE ) && ( i <= 0 ) && ! ( ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kKRB5 ) && ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) ) AND 6 ( s -> verify_mode != SSL_VERIFY_NONE ) && ( i <= 0 ) && ! ( ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kKRB5 ) && ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) ) EXPR 7 ( s -> verify_mode != SSL_VERIFY_NONE ) LEAF_NODE 8 ( FIELD 8 s -> verify_mode LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 verify_mode EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 SSL_VERIFY_NONE LEAF_NODE 9 SSL_VERIFY_NONE LEAF_NODE 8 ) LEAF_NODE 7 && EXPR 7 ( i <= 0 ) && ! ( ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kKRB5 ) && ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) ) AND 8 ( i <= 0 ) && ! ( ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kKRB5 ) && ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) ) EXPR 9 ( i <= 0 ) LEAF_NODE 10 ( FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 <= LEAF_NODE 11 <= FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 10 ) LEAF_NODE 9 && EXPR 9 ! ( ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kKRB5 ) && ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) ) UNARY_EXPR 10 ! ( ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kKRB5 ) && ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) ) UNARY_OPERATOR 11 ! LEAF_NODE 12 ! LEAF_NODE 11 ( AND 11 ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kKRB5 ) && ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) EXPR 12 ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kKRB5 ) LEAF_NODE 13 ( FIELD 13 s -> s3 -> tmp . new_cipher -> algorithm_mkey LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 s3 LEAF_NODE 14 -> LEAF_NODE 14 tmp LEAF_NODE 14 . LEAF_NODE 14 new_cipher LEAF_NODE 14 -> LEAF_NODE 14 algorithm_mkey LEAF_NODE 13 & FIELD 13 SSL_kKRB5 LEAF_NODE 14 SSL_kKRB5 LEAF_NODE 13 ) LEAF_NODE 12 && EXPR 12 ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) LEAF_NODE 13 ( FIELD 13 s -> s3 -> tmp . new_cipher -> algorithm_auth LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 s3 LEAF_NODE 14 -> LEAF_NODE 14 tmp LEAF_NODE 14 . LEAF_NODE 14 new_cipher LEAF_NODE 14 -> LEAF_NODE 14 algorithm_auth LEAF_NODE 13 & FIELD 13 SSL_aKRB5 LEAF_NODE 14 SSL_aKRB5 LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 al = ssl_verify_alarm_type ( s -> verify_result ) ; EXPR 7 al = ssl_verify_alarm_type ( s -> verify_result ) ASSIGN 8 al = ssl_verify_alarm_type ( s -> verify_result ) LVAL 9 al FIELD 10 al LEAF_NODE 11 al ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ssl_verify_alarm_type ( s -> verify_result ) FUNCTION_CALL 10 ssl_verify_alarm_type ( s -> verify_result ) CALLEE 11 ssl_verify_alarm_type LEAF_NODE 12 ssl_verify_alarm_type LEAF_NODE 11 ( ARGUMENT 11 s -> verify_result FIELD 12 s -> verify_result LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 verify_result LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_CERTIFICATE_VERIFY_FAILED ) ; EXPR 7 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_CERTIFICATE_VERIFY_FAILED ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_CERTIFICATE_VERIFY_FAILED ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL3_GET_SERVER_CERTIFICATE FIELD 10 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 11 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 9 , ARGUMENT 9 SSL_R_CERTIFICATE_VERIFY_FAILED FIELD 10 SSL_R_CERTIFICATE_VERIFY_FAILED LEAF_NODE 11 SSL_R_CERTIFICATE_VERIFY_FAILED LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto f_err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 f_err LEAF_NODE 8 f_err LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ERR_clear_error ( ) ; EXPR 4 ERR_clear_error ( ) FUNCTION_CALL 5 ERR_clear_error ( ) CALLEE 6 ERR_clear_error LEAF_NODE 7 ERR_clear_error LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 sc = ssl_sess_cert_new ( ) ; EXPR 4 sc = ssl_sess_cert_new ( ) ASSIGN 5 sc = ssl_sess_cert_new ( ) LVAL 6 sc FIELD 7 sc LEAF_NODE 8 sc ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ssl_sess_cert_new ( ) FUNCTION_CALL 7 ssl_sess_cert_new ( ) CALLEE 8 ssl_sess_cert_new LEAF_NODE 9 ssl_sess_cert_new LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 sc == NULL EXPR 5 sc == NULL FIELD 6 sc LEAF_NODE 7 sc EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto err ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 err LEAF_NODE 7 err LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> session -> sess_cert EXPR 5 s -> session -> sess_cert FIELD 6 s -> session -> sess_cert LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 session LEAF_NODE 7 -> LEAF_NODE 7 sess_cert LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 ssl_sess_cert_free ( s -> session -> sess_cert ) ; EXPR 6 ssl_sess_cert_free ( s -> session -> sess_cert ) FUNCTION_CALL 7 ssl_sess_cert_free ( s -> session -> sess_cert ) CALLEE 8 ssl_sess_cert_free LEAF_NODE 9 ssl_sess_cert_free LEAF_NODE 8 ( ARGUMENT 8 s -> session -> sess_cert FIELD 9 s -> session -> sess_cert LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 session LEAF_NODE 10 -> LEAF_NODE 10 sess_cert LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 3 s -> session -> sess_cert = sc ; EXPR 4 s -> session -> sess_cert = sc ASSIGN 5 s -> session -> sess_cert = sc LVAL 6 s -> session -> sess_cert FIELD 7 s -> session -> sess_cert LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 session LEAF_NODE 8 -> LEAF_NODE 8 sess_cert ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 sc FIELD 7 sc LEAF_NODE 8 sc LEAF_NODE 4 ; EXPR_STATEMENT 3 sc -> cert_chain = sk ; EXPR 4 sc -> cert_chain = sk ASSIGN 5 sc -> cert_chain = sk LVAL 6 sc -> cert_chain FIELD 7 sc -> cert_chain LEAF_NODE 8 sc LEAF_NODE 8 -> LEAF_NODE 8 cert_chain ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 sk FIELD 7 sk LEAF_NODE 8 sk LEAF_NODE 4 ; EXPR_STATEMENT 3 x = sk_X509_value ( sk , 0 ) ; EXPR 4 x = sk_X509_value ( sk , 0 ) ASSIGN 5 x = sk_X509_value ( sk , 0 ) LVAL 6 x FIELD 7 x LEAF_NODE 8 x ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 sk_X509_value ( sk , 0 ) FUNCTION_CALL 7 sk_X509_value ( sk , 0 ) CALLEE 8 sk_X509_value LEAF_NODE 9 sk_X509_value LEAF_NODE 8 ( ARGUMENT 8 sk FIELD 9 sk LEAF_NODE 10 sk LEAF_NODE 8 , ARGUMENT 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 sk = NULL ; EXPR 4 sk = NULL ASSIGN 5 sk = NULL LVAL 6 sk FIELD 7 sk LEAF_NODE 8 sk ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 pkey = X509_get_pubkey ( x ) ; EXPR 4 pkey = X509_get_pubkey ( x ) ASSIGN 5 pkey = X509_get_pubkey ( x ) LVAL 6 pkey FIELD 7 pkey LEAF_NODE 8 pkey ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 X509_get_pubkey ( x ) FUNCTION_CALL 7 X509_get_pubkey ( x ) CALLEE 8 X509_get_pubkey LEAF_NODE 9 X509_get_pubkey LEAF_NODE 8 ( ARGUMENT 8 x FIELD 9 x LEAF_NODE 10 x LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 need_cert = ( ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kKRB5 ) && ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) ) ? 0 : 1 ; EXPR 4 need_cert = ( ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kKRB5 ) && ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) ) ? 0 : 1 ASSIGN 5 need_cert = ( ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kKRB5 ) && ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) ) ? 0 : 1 LVAL 6 need_cert FIELD 7 need_cert LEAF_NODE 8 need_cert ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kKRB5 ) && ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) ) ? 0 : 1 COND_EXPR 7 ( ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kKRB5 ) && ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) ) ? 0 : 1 CONDITION 8 ( ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kKRB5 ) && ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) ) LEAF_NODE 9 ( AND 9 ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kKRB5 ) && ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) EXPR 10 ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kKRB5 ) LEAF_NODE 11 ( FIELD 11 s -> s3 -> tmp . new_cipher -> algorithm_mkey LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 s3 LEAF_NODE 12 -> LEAF_NODE 12 tmp LEAF_NODE 12 . LEAF_NODE 12 new_cipher LEAF_NODE 12 -> LEAF_NODE 12 algorithm_mkey LEAF_NODE 11 & FIELD 11 SSL_kKRB5 LEAF_NODE 12 SSL_kKRB5 LEAF_NODE 11 ) LEAF_NODE 10 && EXPR 10 ( s -> s3 -> tmp . new_cipher -> algorithm_auth & SSL_aKRB5 ) LEAF_NODE 11 ( FIELD 11 s -> s3 -> tmp . new_cipher -> algorithm_auth LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 s3 LEAF_NODE 12 -> LEAF_NODE 12 tmp LEAF_NODE 12 . LEAF_NODE 12 new_cipher LEAF_NODE 12 -> LEAF_NODE 12 algorithm_auth LEAF_NODE 11 & FIELD 11 SSL_aKRB5 LEAF_NODE 12 SSL_aKRB5 LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 8 ? EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 : FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 fprintf ( stderr , \"pkey,x = %p, %p\\n\" , pkey , x ) ; EXPR 4 fprintf ( stderr , \"pkey,x = %p, %p\\n\" , pkey , x ) FUNCTION_CALL 5 fprintf ( stderr , \"pkey,x = %p, %p\\n\" , pkey , x ) CALLEE 6 fprintf LEAF_NODE 7 fprintf LEAF_NODE 6 ( ARGUMENT 6 stderr FIELD 7 stderr LEAF_NODE 8 stderr LEAF_NODE 6 , ARGUMENT 6 \"pkey,x = %p, %p\\n\" FIELD 7 \"pkey,x = %p, %p\\n\" LEAF_NODE 8 \"pkey,x = %p, %p\\n\" LEAF_NODE 6 , ARGUMENT 6 pkey FIELD 7 pkey LEAF_NODE 8 pkey LEAF_NODE 6 , ARGUMENT 6 x FIELD 7 x LEAF_NODE 8 x LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 fprintf ( stderr , \"ssl_cert_type(x,pkey) = %d\\n\" , ssl_cert_type ( x , pkey ) ) ; EXPR 4 fprintf ( stderr , \"ssl_cert_type(x,pkey) = %d\\n\" , ssl_cert_type ( x , pkey ) ) FUNCTION_CALL 5 fprintf ( stderr , \"ssl_cert_type(x,pkey) = %d\\n\" , ssl_cert_type ( x , pkey ) ) CALLEE 6 fprintf LEAF_NODE 7 fprintf LEAF_NODE 6 ( ARGUMENT 6 stderr FIELD 7 stderr LEAF_NODE 8 stderr LEAF_NODE 6 , ARGUMENT 6 \"ssl_cert_type(x,pkey) = %d\\n\" FIELD 7 \"ssl_cert_type(x,pkey) = %d\\n\" LEAF_NODE 8 \"ssl_cert_type(x,pkey) = %d\\n\" LEAF_NODE 6 , ARGUMENT 6 ssl_cert_type ( x , pkey ) FUNCTION_CALL 7 ssl_cert_type ( x , pkey ) CALLEE 8 ssl_cert_type LEAF_NODE 9 ssl_cert_type LEAF_NODE 8 ( ARGUMENT 8 x FIELD 9 x LEAF_NODE 10 x LEAF_NODE 8 , ARGUMENT 8 pkey FIELD 9 pkey LEAF_NODE 10 pkey LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 fprintf ( stderr , \"cipher, alg, nc = %s, %lx, %lx, %d\\n\" , s -> s3 -> tmp . new_cipher -> name , s -> s3 -> tmp . new_cipher -> algorithm_mkey , s -> s3 -> tmp . new_cipher -> algorithm_auth , need_cert ) ; EXPR 4 fprintf ( stderr , \"cipher, alg, nc = %s, %lx, %lx, %d\\n\" , s -> s3 -> tmp . new_cipher -> name , s -> s3 -> tmp . new_cipher -> algorithm_mkey , s -> s3 -> tmp . new_cipher -> algorithm_auth , need_cert ) FUNCTION_CALL 5 fprintf ( stderr , \"cipher, alg, nc = %s, %lx, %lx, %d\\n\" , s -> s3 -> tmp . new_cipher -> name , s -> s3 -> tmp . new_cipher -> algorithm_mkey , s -> s3 -> tmp . new_cipher -> algorithm_auth , need_cert ) CALLEE 6 fprintf LEAF_NODE 7 fprintf LEAF_NODE 6 ( ARGUMENT 6 stderr FIELD 7 stderr LEAF_NODE 8 stderr LEAF_NODE 6 , ARGUMENT 6 \"cipher, alg, nc = %s, %lx, %lx, %d\\n\" FIELD 7 \"cipher, alg, nc = %s, %lx, %lx, %d\\n\" LEAF_NODE 8 \"cipher, alg, nc = %s, %lx, %lx, %d\\n\" LEAF_NODE 6 , ARGUMENT 6 s -> s3 -> tmp . new_cipher -> name FIELD 7 s -> s3 -> tmp . new_cipher -> name LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s3 LEAF_NODE 8 -> LEAF_NODE 8 tmp LEAF_NODE 8 . LEAF_NODE 8 new_cipher LEAF_NODE 8 -> LEAF_NODE 8 name LEAF_NODE 6 , ARGUMENT 6 s -> s3 -> tmp . new_cipher -> algorithm_mkey FIELD 7 s -> s3 -> tmp . new_cipher -> algorithm_mkey LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s3 LEAF_NODE 8 -> LEAF_NODE 8 tmp LEAF_NODE 8 . LEAF_NODE 8 new_cipher LEAF_NODE 8 -> LEAF_NODE 8 algorithm_mkey LEAF_NODE 6 , ARGUMENT 6 s -> s3 -> tmp . new_cipher -> algorithm_auth FIELD 7 s -> s3 -> tmp . new_cipher -> algorithm_auth LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s3 LEAF_NODE 8 -> LEAF_NODE 8 tmp LEAF_NODE 8 . LEAF_NODE 8 new_cipher LEAF_NODE 8 -> LEAF_NODE 8 algorithm_auth LEAF_NODE 6 , ARGUMENT 6 need_cert FIELD 7 need_cert LEAF_NODE 8 need_cert LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 need_cert && ( ( pkey == NULL ) || EVP_PKEY_missing_parameters ( pkey ) ) EXPR 5 need_cert && ( ( pkey == NULL ) || EVP_PKEY_missing_parameters ( pkey ) ) AND 6 need_cert && ( ( pkey == NULL ) || EVP_PKEY_missing_parameters ( pkey ) ) EXPR 7 need_cert FIELD 8 need_cert LEAF_NODE 9 need_cert LEAF_NODE 7 && EXPR 7 ( ( pkey == NULL ) || EVP_PKEY_missing_parameters ( pkey ) ) LEAF_NODE 8 ( OR 8 ( pkey == NULL ) || EVP_PKEY_missing_parameters ( pkey ) EXPR 9 ( pkey == NULL ) LEAF_NODE 10 ( FIELD 10 pkey LEAF_NODE 11 pkey EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 10 ) LEAF_NODE 9 || EXPR 9 EVP_PKEY_missing_parameters ( pkey ) FUNCTION_CALL 10 EVP_PKEY_missing_parameters ( pkey ) CALLEE 11 EVP_PKEY_missing_parameters LEAF_NODE 12 EVP_PKEY_missing_parameters LEAF_NODE 11 ( ARGUMENT 11 pkey FIELD 12 pkey LEAF_NODE 13 pkey LEAF_NODE 11 ) LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 x = NULL ; EXPR 7 x = NULL ASSIGN 8 x = NULL LVAL 9 x FIELD 10 x LEAF_NODE 11 x ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; EXPR_STATEMENT 6 al = SSL3_AL_FATAL ; EXPR 7 al = SSL3_AL_FATAL ASSIGN 8 al = SSL3_AL_FATAL LVAL 9 al FIELD 10 al LEAF_NODE 11 al ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL3_AL_FATAL FIELD 10 SSL3_AL_FATAL LEAF_NODE 11 SSL3_AL_FATAL LEAF_NODE 7 ; EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS ) ; EXPR 7 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL3_GET_SERVER_CERTIFICATE FIELD 10 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 11 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 9 , ARGUMENT 9 SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS FIELD 10 SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS LEAF_NODE 11 SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto f_err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 f_err LEAF_NODE 8 f_err LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 i = ssl_cert_type ( x , pkey ) ; EXPR 4 i = ssl_cert_type ( x , pkey ) ASSIGN 5 i = ssl_cert_type ( x , pkey ) LVAL 6 i FIELD 7 i LEAF_NODE 8 i ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ssl_cert_type ( x , pkey ) FUNCTION_CALL 7 ssl_cert_type ( x , pkey ) CALLEE 8 ssl_cert_type LEAF_NODE 9 ssl_cert_type LEAF_NODE 8 ( ARGUMENT 8 x FIELD 9 x LEAF_NODE 10 x LEAF_NODE 8 , ARGUMENT 8 pkey FIELD 9 pkey LEAF_NODE 10 pkey LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 need_cert && i < 0 EXPR 5 need_cert && i < 0 AND 6 need_cert && i < 0 EXPR 7 need_cert FIELD 8 need_cert LEAF_NODE 9 need_cert LEAF_NODE 7 && EXPR 7 i < 0 FIELD 8 i LEAF_NODE 9 i REL_OPERATOR 8 < LEAF_NODE 9 < FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 x = NULL ; EXPR 7 x = NULL ASSIGN 8 x = NULL LVAL 9 x FIELD 10 x LEAF_NODE 11 x ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; EXPR_STATEMENT 6 al = SSL3_AL_FATAL ; EXPR 7 al = SSL3_AL_FATAL ASSIGN 8 al = SSL3_AL_FATAL LVAL 9 al FIELD 10 al LEAF_NODE 11 al ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL3_AL_FATAL FIELD 10 SSL3_AL_FATAL LEAF_NODE 11 SSL3_AL_FATAL LEAF_NODE 7 ; EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_UNKNOWN_CERTIFICATE_TYPE ) ; EXPR 7 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_UNKNOWN_CERTIFICATE_TYPE ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_UNKNOWN_CERTIFICATE_TYPE ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL3_GET_SERVER_CERTIFICATE FIELD 10 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 11 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 9 , ARGUMENT 9 SSL_R_UNKNOWN_CERTIFICATE_TYPE FIELD 10 SSL_R_UNKNOWN_CERTIFICATE_TYPE LEAF_NODE 11 SSL_R_UNKNOWN_CERTIFICATE_TYPE LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto f_err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 f_err LEAF_NODE 8 f_err LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 need_cert EXPR 5 need_cert FIELD 6 need_cert LEAF_NODE 7 need_cert LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int exp_idx ; exp_idx = ssl_cipher_get_cert_index ( s -> s3 -> tmp . new_cipher ) ; VAR_DECL 7 int exp_idx ; exp_idx = ssl_cipher_get_cert_index ( s -> s3 -> tmp . new_cipher ) TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_idx LEAF_NODE 9 exp_idx LEAF_NODE 8 ; INIT 8 exp_idx = ssl_cipher_get_cert_index ( s -> s3 -> tmp . new_cipher ) ASSIGN 9 exp_idx = ssl_cipher_get_cert_index ( s -> s3 -> tmp . new_cipher ) LVAL 10 exp_idx NAME 11 exp_idx LEAF_NODE 12 exp_idx ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ssl_cipher_get_cert_index ( s -> s3 -> tmp . new_cipher ) FUNCTION_CALL 11 ssl_cipher_get_cert_index ( s -> s3 -> tmp . new_cipher ) CALLEE 12 ssl_cipher_get_cert_index LEAF_NODE 13 ssl_cipher_get_cert_index LEAF_NODE 12 ( ARGUMENT 12 s -> s3 -> tmp . new_cipher FIELD 13 s -> s3 -> tmp . new_cipher LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 s3 LEAF_NODE 14 -> LEAF_NODE 14 tmp LEAF_NODE 14 . LEAF_NODE 14 new_cipher LEAF_NODE 12 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 exp_idx >= 0 && i != exp_idx EXPR 8 exp_idx >= 0 && i != exp_idx AND 9 exp_idx >= 0 && i != exp_idx EXPR 10 exp_idx >= 0 FIELD 11 exp_idx LEAF_NODE 12 exp_idx REL_OPERATOR 11 >= LEAF_NODE 12 >= FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 && EXPR 10 i != exp_idx FIELD 11 i LEAF_NODE 12 i EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 exp_idx LEAF_NODE 12 exp_idx LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 x = NULL ; EXPR 10 x = NULL ASSIGN 11 x = NULL LVAL 12 x FIELD 13 x LEAF_NODE 14 x ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 10 ; EXPR_STATEMENT 9 al = SSL_AD_ILLEGAL_PARAMETER ; EXPR 10 al = SSL_AD_ILLEGAL_PARAMETER ASSIGN 11 al = SSL_AD_ILLEGAL_PARAMETER LVAL 12 al FIELD 13 al LEAF_NODE 14 al ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 SSL_AD_ILLEGAL_PARAMETER FIELD 13 SSL_AD_ILLEGAL_PARAMETER LEAF_NODE 14 SSL_AD_ILLEGAL_PARAMETER LEAF_NODE 10 ; EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_WRONG_CERTIFICATE_TYPE ) ; EXPR 10 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_WRONG_CERTIFICATE_TYPE ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_WRONG_CERTIFICATE_TYPE ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL3_GET_SERVER_CERTIFICATE FIELD 13 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 14 SSL_F_SSL3_GET_SERVER_CERTIFICATE LEAF_NODE 12 , ARGUMENT 12 SSL_R_WRONG_CERTIFICATE_TYPE FIELD 13 SSL_R_WRONG_CERTIFICATE_TYPE LEAF_NODE 14 SSL_R_WRONG_CERTIFICATE_TYPE LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto f_err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 f_err LEAF_NODE 11 f_err LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 sc -> peer_cert_type = i ; EXPR 7 sc -> peer_cert_type = i ASSIGN 8 sc -> peer_cert_type = i LVAL 9 sc -> peer_cert_type FIELD 10 sc -> peer_cert_type LEAF_NODE 11 sc LEAF_NODE 11 -> LEAF_NODE 11 peer_cert_type ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 7 ; EXPR_STATEMENT 6 CRYPTO_add ( & x -> references , 1 , CRYPTO_LOCK_X509 ) ; EXPR 7 CRYPTO_add ( & x -> references , 1 , CRYPTO_LOCK_X509 ) FUNCTION_CALL 8 CRYPTO_add ( & x -> references , 1 , CRYPTO_LOCK_X509 ) CALLEE 9 CRYPTO_add LEAF_NODE 10 CRYPTO_add LEAF_NODE 9 ( ARGUMENT 9 & x -> references UNARY_EXPR 10 & x -> references UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 x -> references LEAF_NODE 12 x LEAF_NODE 12 -> LEAF_NODE 12 references LEAF_NODE 9 , ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 , ARGUMENT 9 CRYPTO_LOCK_X509 FIELD 10 CRYPTO_LOCK_X509 LEAF_NODE 11 CRYPTO_LOCK_X509 LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 sc -> peer_pkeys [ i ] . x509 != NULL EXPR 8 sc -> peer_pkeys [ i ] . x509 != NULL FIELD 9 sc -> peer_pkeys [ i ] . x509 LEAF_NODE 10 sc LEAF_NODE 10 -> LEAF_NODE 10 peer_pkeys LEAF_NODE 10 [ EXPR 10 i FIELD 11 i LEAF_NODE 12 i LEAF_NODE 10 ] LEAF_NODE 10 . LEAF_NODE 10 x509 EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 X509_free ( sc -> peer_pkeys [ i ] . x509 ) ; EXPR 9 X509_free ( sc -> peer_pkeys [ i ] . x509 ) FUNCTION_CALL 10 X509_free ( sc -> peer_pkeys [ i ] . x509 ) CALLEE 11 X509_free LEAF_NODE 12 X509_free LEAF_NODE 11 ( ARGUMENT 11 sc -> peer_pkeys [ i ] . x509 FIELD 12 sc -> peer_pkeys [ i ] . x509 LEAF_NODE 13 sc LEAF_NODE 13 -> LEAF_NODE 13 peer_pkeys LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] LEAF_NODE 13 . LEAF_NODE 13 x509 LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 6 sc -> peer_pkeys [ i ] . x509 = x ; EXPR 7 sc -> peer_pkeys [ i ] . x509 = x ASSIGN 8 sc -> peer_pkeys [ i ] . x509 = x LVAL 9 sc -> peer_pkeys [ i ] . x509 FIELD 10 sc -> peer_pkeys [ i ] . x509 LEAF_NODE 11 sc LEAF_NODE 11 -> LEAF_NODE 11 peer_pkeys LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] LEAF_NODE 11 . LEAF_NODE 11 x509 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 x FIELD 10 x LEAF_NODE 11 x LEAF_NODE 7 ; EXPR_STATEMENT 6 sc -> peer_key = & ( sc -> peer_pkeys [ i ] ) ; EXPR 7 sc -> peer_key = & ( sc -> peer_pkeys [ i ] ) ASSIGN 8 sc -> peer_key = & ( sc -> peer_pkeys [ i ] ) LVAL 9 sc -> peer_key FIELD 10 sc -> peer_key LEAF_NODE 11 sc LEAF_NODE 11 -> LEAF_NODE 11 peer_key ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 & ( sc -> peer_pkeys [ i ] ) UNARY_EXPR 10 & ( sc -> peer_pkeys [ i ] ) UNARY_OPERATOR 11 & LEAF_NODE 12 & LEAF_NODE 11 ( FIELD 11 sc -> peer_pkeys [ i ] LEAF_NODE 12 sc LEAF_NODE 12 -> LEAF_NODE 12 peer_pkeys LEAF_NODE 12 [ EXPR 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 12 ] LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> session -> peer != NULL EXPR 8 s -> session -> peer != NULL FIELD 9 s -> session -> peer LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 session LEAF_NODE 10 -> LEAF_NODE 10 peer EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 X509_free ( s -> session -> peer ) ; EXPR 9 X509_free ( s -> session -> peer ) FUNCTION_CALL 10 X509_free ( s -> session -> peer ) CALLEE 11 X509_free LEAF_NODE 12 X509_free LEAF_NODE 11 ( ARGUMENT 11 s -> session -> peer FIELD 12 s -> session -> peer LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 session LEAF_NODE 13 -> LEAF_NODE 13 peer LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 6 CRYPTO_add ( & x -> references , 1 , CRYPTO_LOCK_X509 ) ; EXPR 7 CRYPTO_add ( & x -> references , 1 , CRYPTO_LOCK_X509 ) FUNCTION_CALL 8 CRYPTO_add ( & x -> references , 1 , CRYPTO_LOCK_X509 ) CALLEE 9 CRYPTO_add LEAF_NODE 10 CRYPTO_add LEAF_NODE 9 ( ARGUMENT 9 & x -> references UNARY_EXPR 10 & x -> references UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 x -> references LEAF_NODE 12 x LEAF_NODE 12 -> LEAF_NODE 12 references LEAF_NODE 9 , ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 , ARGUMENT 9 CRYPTO_LOCK_X509 FIELD 10 CRYPTO_LOCK_X509 LEAF_NODE 11 CRYPTO_LOCK_X509 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> session -> peer = x ; EXPR 7 s -> session -> peer = x ASSIGN 8 s -> session -> peer = x LVAL 9 s -> session -> peer FIELD 10 s -> session -> peer LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 session LEAF_NODE 11 -> LEAF_NODE 11 peer ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 x FIELD 10 x LEAF_NODE 11 x LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 sc -> peer_cert_type = i ; EXPR 7 sc -> peer_cert_type = i ASSIGN 8 sc -> peer_cert_type = i LVAL 9 sc -> peer_cert_type FIELD 10 sc -> peer_cert_type LEAF_NODE 11 sc LEAF_NODE 11 -> LEAF_NODE 11 peer_cert_type ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 7 ; EXPR_STATEMENT 6 sc -> peer_key = NULL ; EXPR 7 sc -> peer_key = NULL ASSIGN 8 sc -> peer_key = NULL LVAL 9 sc -> peer_key FIELD 10 sc -> peer_key LEAF_NODE 11 sc LEAF_NODE 11 -> LEAF_NODE 11 peer_key ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> session -> peer != NULL EXPR 8 s -> session -> peer != NULL FIELD 9 s -> session -> peer LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 session LEAF_NODE 10 -> LEAF_NODE 10 peer EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 X509_free ( s -> session -> peer ) ; EXPR 9 X509_free ( s -> session -> peer ) FUNCTION_CALL 10 X509_free ( s -> session -> peer ) CALLEE 11 X509_free LEAF_NODE 12 X509_free LEAF_NODE 11 ( ARGUMENT 11 s -> session -> peer FIELD 12 s -> session -> peer LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 session LEAF_NODE 13 -> LEAF_NODE 13 peer LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 6 s -> session -> peer = NULL ; EXPR 7 s -> session -> peer = NULL ASSIGN 8 s -> session -> peer = NULL LVAL 9 s -> session -> peer FIELD 10 s -> session -> peer LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 session LEAF_NODE 11 -> LEAF_NODE 11 peer ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 s -> session -> verify_result = s -> verify_result ; EXPR 4 s -> session -> verify_result = s -> verify_result ASSIGN 5 s -> session -> verify_result = s -> verify_result LVAL 6 s -> session -> verify_result FIELD 7 s -> session -> verify_result LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 session LEAF_NODE 8 -> LEAF_NODE 8 verify_result ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 s -> verify_result FIELD 7 s -> verify_result LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 verify_result LEAF_NODE 4 ; EXPR_STATEMENT 3 x = NULL ; EXPR 4 x = NULL ASSIGN 5 x = NULL LVAL 6 x FIELD 7 x LEAF_NODE 8 x ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 ret = 1 ; EXPR 4 ret = 1 ASSIGN 5 ret = 1 LVAL 6 ret FIELD 7 ret LEAF_NODE 8 ret ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 f_err : LEAF_NODE 7 f_err LEAF_NODE 7 : EXPR_STATEMENT 6 ssl3_send_alert ( s , SSL3_AL_FATAL , al ) ; EXPR 7 ssl3_send_alert ( s , SSL3_AL_FATAL , al ) FUNCTION_CALL 8 ssl3_send_alert ( s , SSL3_AL_FATAL , al ) CALLEE 9 ssl3_send_alert LEAF_NODE 10 ssl3_send_alert LEAF_NODE 9 ( ARGUMENT 9 s FIELD 10 s LEAF_NODE 11 s LEAF_NODE 9 , ARGUMENT 9 SSL3_AL_FATAL FIELD 10 SSL3_AL_FATAL LEAF_NODE 11 SSL3_AL_FATAL LEAF_NODE 9 , ARGUMENT 9 al FIELD 10 al LEAF_NODE 11 al LEAF_NODE 9 ) LEAF_NODE 7 ; LABEL 6 err : LEAF_NODE 7 err LEAF_NODE 7 : EXPR_STATEMENT 6 s -> state = SSL_ST_ERR ; EXPR 7 s -> state = SSL_ST_ERR ASSIGN 8 s -> state = SSL_ST_ERR LVAL 9 s -> state FIELD 10 s -> state LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 state ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL_ST_ERR FIELD 10 SSL_ST_ERR LEAF_NODE 11 SSL_ST_ERR LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 EVP_PKEY_free ( pkey ) ; EXPR 4 EVP_PKEY_free ( pkey ) FUNCTION_CALL 5 EVP_PKEY_free ( pkey ) CALLEE 6 EVP_PKEY_free LEAF_NODE 7 EVP_PKEY_free LEAF_NODE 6 ( ARGUMENT 6 pkey FIELD 7 pkey LEAF_NODE 8 pkey LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 X509_free ( x ) ; EXPR 4 X509_free ( x ) FUNCTION_CALL 5 X509_free ( x ) CALLEE 6 X509_free LEAF_NODE 7 X509_free LEAF_NODE 6 ( ARGUMENT 6 x FIELD 7 x LEAF_NODE 8 x LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 sk_X509_pop_free ( sk , X509_free ) ; EXPR 4 sk_X509_pop_free ( sk , X509_free ) FUNCTION_CALL 5 sk_X509_pop_free ( sk , X509_free ) CALLEE 6 sk_X509_pop_free LEAF_NODE 7 sk_X509_pop_free LEAF_NODE 6 ( ARGUMENT 6 sk FIELD 7 sk LEAF_NODE 8 sk LEAF_NODE 6 , ARGUMENT 6 X509_free FIELD 7 X509_free LEAF_NODE 8 X509_free LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 3 return LEAF_NODE 3 ( LEAF_NODE 3 ret LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 2 }", "idx": 99, "project": "openssl_ast_vul_function_test_20", "target": 1}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } ; CLASS_DEF 2 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } CLASS_DEF 3 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } LEAF_NODE 4 struct CLASS_NAME 4 bio_addrinfo_st LEAF_NODE 5 bio_addrinfo_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; SIMPLE_DECL 5 int bai_family ; VAR_DECL 6 int bai_family TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_family LEAF_NODE 8 bai_family LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_socktype ; VAR_DECL 6 int bai_socktype TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_socktype LEAF_NODE 8 bai_socktype LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_protocol ; VAR_DECL 6 int bai_protocol TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_protocol LEAF_NODE 8 bai_protocol LEAF_NODE 6 ; SIMPLE_DECL 5 size_t bai_addrlen ; VAR_DECL 6 size_t bai_addrlen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 bai_addrlen LEAF_NODE 8 bai_addrlen LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr * bai_addr ; VAR_DECL 6 struct sockaddr * bai_addr TYPE 7 struct sockaddr * TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr POINTER 8 * LEAF_NODE 9 * NAME 7 bai_addr LEAF_NODE 8 bai_addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct bio_addrinfo_st * bai_next ; VAR_DECL 6 struct bio_addrinfo_st * bai_next TYPE 7 struct bio_addrinfo_st * TYPE_NAME 8 struct bio_addrinfo_st LEAF_NODE 9 struct LEAF_NODE 9 bio_addrinfo_st POINTER 8 * LEAF_NODE 9 * NAME 7 bai_next LEAF_NODE 8 bai_next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BIO_ADDRINFO ; VAR_DECL 2 struct bio_addrinfo_st BIO_ADDRINFO TYPE 3 struct bio_addrinfo_st TYPE_NAME 4 struct bio_addrinfo_st LEAF_NODE 5 struct LEAF_NODE 5 bio_addrinfo_st NAME 3 BIO_ADDRINFO LEAF_NODE 4 BIO_ADDRINFO LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t socklen_t ; VAR_DECL 2 uint32_t socklen_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 socklen_t LEAF_NODE 4 socklen_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } ; CLASS_DEF 2 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } CLASS_DEF 3 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } LEAF_NODE 4 enum CLASS_NAME 4 BIO_hostserv_priorities LEAF_NODE 5 BIO_hostserv_priorities LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV LEAF_NODE 5 BIO_PARSE_PRIO_HOST LEAF_NODE 5 , LEAF_NODE 5 BIO_PARSE_PRIO_SERV LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } ; CLASS_DEF 2 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } CLASS_DEF 3 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } LEAF_NODE 4 enum CLASS_NAME 4 BIO_lookup_type LEAF_NODE 5 BIO_lookup_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER LEAF_NODE 5 BIO_LOOKUP_CLIENT LEAF_NODE 5 , LEAF_NODE 5 BIO_LOOKUP_SERVER LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 BIO_socket_nbio LEAF_NODE 3 BIO_socket_nbio PARAMETER_LIST 2 ( int s , int mode ) LEAF_NODE 3 ( PARAMETER_DECL 3 int s TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 int mode TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 mode LEAF_NODE 5 mode LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int ret ; ret = - 1 ; VAR_DECL 4 int ret ; ret = - 1 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 5 ; INIT 5 ret = - 1 ASSIGN 6 ret = - 1 LVAL 7 ret NAME 8 ret LEAF_NODE 9 ret ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 4 ; SIMPLE_DECL 3 int l ; VAR_DECL 4 int l TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 l LEAF_NODE 6 l LEAF_NODE 4 ; EXPR_STATEMENT 3 l = mode ; EXPR 4 l = mode ASSIGN 5 l = mode LVAL 6 l FIELD 7 l LEAF_NODE 8 l ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 mode FIELD 7 mode LEAF_NODE 8 mode LEAF_NODE 4 ; EXPR_STATEMENT 3 l = mode ; EXPR 4 l = mode ASSIGN 5 l = mode LVAL 6 l FIELD 7 l LEAF_NODE 8 l ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 mode FIELD 7 mode LEAF_NODE 8 mode LEAF_NODE 4 ; EXPR_STATEMENT 3 ret = BIO_socket_ioctl ( s , FIONBIO , & l ) ; EXPR 4 ret = BIO_socket_ioctl ( s , FIONBIO , & l ) ASSIGN 5 ret = BIO_socket_ioctl ( s , FIONBIO , & l ) LVAL 6 ret FIELD 7 ret LEAF_NODE 8 ret ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 BIO_socket_ioctl ( s , FIONBIO , & l ) FUNCTION_CALL 7 BIO_socket_ioctl ( s , FIONBIO , & l ) CALLEE 8 BIO_socket_ioctl LEAF_NODE 9 BIO_socket_ioctl LEAF_NODE 8 ( ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 , ARGUMENT 8 FIONBIO FIELD 9 FIONBIO LEAF_NODE 10 FIONBIO LEAF_NODE 8 , ARGUMENT 8 & l UNARY_EXPR 9 & l UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 l LEAF_NODE 11 l LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 l = fcntl ( s , F_GETFL , 0 ) ; EXPR 4 l = fcntl ( s , F_GETFL , 0 ) ASSIGN 5 l = fcntl ( s , F_GETFL , 0 ) LVAL 6 l FIELD 7 l LEAF_NODE 8 l ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 fcntl ( s , F_GETFL , 0 ) FUNCTION_CALL 7 fcntl ( s , F_GETFL , 0 ) CALLEE 8 fcntl LEAF_NODE 9 fcntl LEAF_NODE 8 ( ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 , ARGUMENT 8 F_GETFL FIELD 9 F_GETFL LEAF_NODE 10 F_GETFL LEAF_NODE 8 , ARGUMENT 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 l == - 1 EXPR 5 l == - 1 FIELD 6 l LEAF_NODE 7 l EQ_OPERATOR 6 == LEAF_NODE 7 == UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 SYSerr ( SYS_F_FCNTL , get_last_sys_error ( ) ) ; EXPR 7 SYSerr ( SYS_F_FCNTL , get_last_sys_error ( ) ) FUNCTION_CALL 8 SYSerr ( SYS_F_FCNTL , get_last_sys_error ( ) ) CALLEE 9 SYSerr LEAF_NODE 10 SYSerr LEAF_NODE 9 ( ARGUMENT 9 SYS_F_FCNTL FIELD 10 SYS_F_FCNTL LEAF_NODE 11 SYS_F_FCNTL LEAF_NODE 9 , ARGUMENT 9 get_last_sys_error ( ) FUNCTION_CALL 10 get_last_sys_error ( ) CALLEE 11 get_last_sys_error LEAF_NODE 12 get_last_sys_error LEAF_NODE 11 ( LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ret = - 1 ; EXPR 7 ret = - 1 ASSIGN 8 ret = - 1 LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 - 1 UNARY_EXPR 10 - 1 UNARY_OPERATOR 11 - LEAF_NODE 12 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 l &= ~O_NONBLOCK ; EXPR 7 l &= ~O_NONBLOCK ASSIGN 8 l &= ~O_NONBLOCK LVAL 9 l FIELD 10 l LEAF_NODE 11 l ASSIGN_OP 9 &= LEAF_NODE 10 &= RVAL 9 ~O_NONBLOCK FIELD 10 ~O_NONBLOCK LEAF_NODE 11 ~O_NONBLOCK LEAF_NODE 7 ; EXPR_STATEMENT 6 l &= ~FNDELAY ; EXPR 7 l &= ~FNDELAY ASSIGN 8 l &= ~FNDELAY LVAL 9 l FIELD 10 l LEAF_NODE 11 l ASSIGN_OP 9 &= LEAF_NODE 10 &= RVAL 9 ~FNDELAY FIELD 10 ~FNDELAY LEAF_NODE 11 ~FNDELAY LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 mode EXPR 8 mode FIELD 9 mode LEAF_NODE 10 mode LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 l |= O_NONBLOCK ; EXPR 10 l |= O_NONBLOCK ASSIGN 11 l |= O_NONBLOCK LVAL 12 l FIELD 13 l LEAF_NODE 14 l ASSIGN_OP 12 |= LEAF_NODE 13 |= RVAL 12 O_NONBLOCK FIELD 13 O_NONBLOCK LEAF_NODE 14 O_NONBLOCK LEAF_NODE 10 ; EXPR_STATEMENT 9 l |= FNDELAY ; EXPR 10 l |= FNDELAY ASSIGN 11 l |= FNDELAY LVAL 12 l FIELD 13 l LEAF_NODE 14 l ASSIGN_OP 12 |= LEAF_NODE 13 |= RVAL 12 FNDELAY FIELD 13 FNDELAY LEAF_NODE 14 FNDELAY LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 ret = fcntl ( s , F_SETFL , l ) ; EXPR 7 ret = fcntl ( s , F_SETFL , l ) ASSIGN 8 ret = fcntl ( s , F_SETFL , l ) LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 fcntl ( s , F_SETFL , l ) FUNCTION_CALL 10 fcntl ( s , F_SETFL , l ) CALLEE 11 fcntl LEAF_NODE 12 fcntl LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 , ARGUMENT 11 F_SETFL FIELD 12 F_SETFL LEAF_NODE 13 F_SETFL LEAF_NODE 11 , ARGUMENT 11 l FIELD 12 l LEAF_NODE 13 l LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ret < 0 EXPR 8 ret < 0 FIELD 9 ret LEAF_NODE 10 ret REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SYSerr ( SYS_F_FCNTL , get_last_sys_error ( ) ) ; EXPR 10 SYSerr ( SYS_F_FCNTL , get_last_sys_error ( ) ) FUNCTION_CALL 11 SYSerr ( SYS_F_FCNTL , get_last_sys_error ( ) ) CALLEE 12 SYSerr LEAF_NODE 13 SYSerr LEAF_NODE 12 ( ARGUMENT 12 SYS_F_FCNTL FIELD 13 SYS_F_FCNTL LEAF_NODE 14 SYS_F_FCNTL LEAF_NODE 12 , ARGUMENT 12 get_last_sys_error ( ) FUNCTION_CALL 13 get_last_sys_error ( ) CALLEE 14 get_last_sys_error LEAF_NODE 15 get_last_sys_error LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 BIOerr ( BIO_F_BIO_SOCKET_NBIO , ERR_R_PASSED_INVALID_ARGUMENT ) ; EXPR 4 BIOerr ( BIO_F_BIO_SOCKET_NBIO , ERR_R_PASSED_INVALID_ARGUMENT ) FUNCTION_CALL 5 BIOerr ( BIO_F_BIO_SOCKET_NBIO , ERR_R_PASSED_INVALID_ARGUMENT ) CALLEE 6 BIOerr LEAF_NODE 7 BIOerr LEAF_NODE 6 ( ARGUMENT 6 BIO_F_BIO_SOCKET_NBIO FIELD 7 BIO_F_BIO_SOCKET_NBIO LEAF_NODE 8 BIO_F_BIO_SOCKET_NBIO LEAF_NODE 6 , ARGUMENT 6 ERR_R_PASSED_INVALID_ARGUMENT FIELD 7 ERR_R_PASSED_INVALID_ARGUMENT LEAF_NODE 8 ERR_R_PASSED_INVALID_ARGUMENT LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return ( ret == 0 ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ( ret == 0 ) EXPR 5 ( ret == 0 ) LEAF_NODE 6 ( FIELD 6 ret LEAF_NODE 7 ret EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 100, "project": "openssl_ast_normal_function_test_122", "target": 0}
{"func": "SIMPLE_DECL 1 unsigned char u8 ; VAR_DECL 2 unsigned char u8 TYPE 3 unsigned char TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char NAME 3 u8 LEAF_NODE 4 u8 LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned int u32 ; VAR_DECL 2 unsigned int u32 TYPE 3 unsigned int TYPE_NAME 4 unsigned int LEAF_NODE 5 unsigned LEAF_NODE 5 int NAME 3 u32 LEAF_NODE 4 u32 LEAF_NODE 2 ; SIMPLE_DECL 1 long u64 ; VAR_DECL 2 long u64 TYPE 3 long TYPE_NAME 4 long LEAF_NODE 5 long NAME 3 u64 LEAF_NODE 4 u64 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 AES_encrypt LEAF_NODE 3 AES_encrypt PARAMETER_LIST 2 ( const unsigned char * in , unsigned char * out , const AES_KEY * key ) LEAF_NODE 3 ( PARAMETER_DECL 3 const unsigned char * in TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 in LEAF_NODE 5 in LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * out TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 const AES_KEY * key TYPE 4 const AES_KEY * TYPE_NAME 5 const AES_KEY LEAF_NODE 6 const LEAF_NODE 6 AES_KEY POINTER 5 * LEAF_NODE 6 * NAME 4 key LEAF_NODE 5 key LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 const u32 * rk ; VAR_DECL 4 const u32 * rk TYPE 5 const u32 * TYPE_NAME 6 const u32 LEAF_NODE 7 const LEAF_NODE 7 u32 POINTER 6 * LEAF_NODE 7 * NAME 5 rk LEAF_NODE 6 rk LEAF_NODE 4 ; SIMPLE_DECL 3 u32 s0 , u32 s1 , u32 s2 , u32 s3 , u32 t0 , u32 t1 , u32 t2 , u32 t3 ; INIT_DECL_LIST 4 u32 s0 , u32 s1 , u32 s2 , u32 s3 , u32 t0 , u32 t1 , u32 t2 , u32 t3 VAR_DECL 5 u32 s0 TYPE 6 u32 TYPE_NAME 7 u32 LEAF_NODE 8 u32 NAME 6 s0 LEAF_NODE 7 s0 LEAF_NODE 5 , INIT_DECL_LIST 5 u32 s1 , u32 s2 , u32 s3 , u32 t0 , u32 t1 , u32 t2 , u32 t3 VAR_DECL 6 u32 s1 TYPE 7 u32 TYPE_NAME 8 u32 LEAF_NODE 9 u32 NAME 7 s1 LEAF_NODE 8 s1 LEAF_NODE 6 , INIT_DECL_LIST 6 u32 s2 , u32 s3 , u32 t0 , u32 t1 , u32 t2 , u32 t3 VAR_DECL 7 u32 s2 TYPE 8 u32 TYPE_NAME 9 u32 LEAF_NODE 10 u32 NAME 8 s2 LEAF_NODE 9 s2 LEAF_NODE 7 , INIT_DECL_LIST 7 u32 s3 , u32 t0 , u32 t1 , u32 t2 , u32 t3 VAR_DECL 8 u32 s3 TYPE 9 u32 TYPE_NAME 10 u32 LEAF_NODE 11 u32 NAME 9 s3 LEAF_NODE 10 s3 LEAF_NODE 8 , INIT_DECL_LIST 8 u32 t0 , u32 t1 , u32 t2 , u32 t3 VAR_DECL 9 u32 t0 TYPE 10 u32 TYPE_NAME 11 u32 LEAF_NODE 12 u32 NAME 10 t0 LEAF_NODE 11 t0 LEAF_NODE 9 , INIT_DECL_LIST 9 u32 t1 , u32 t2 , u32 t3 VAR_DECL 10 u32 t1 TYPE 11 u32 TYPE_NAME 12 u32 LEAF_NODE 13 u32 NAME 11 t1 LEAF_NODE 12 t1 LEAF_NODE 10 , INIT_DECL_LIST 10 u32 t2 , u32 t3 VAR_DECL 11 u32 t2 TYPE 12 u32 TYPE_NAME 13 u32 LEAF_NODE 14 u32 NAME 12 t2 LEAF_NODE 13 t2 LEAF_NODE 11 , VAR_DECL 11 u32 t3 TYPE 12 u32 TYPE_NAME 13 u32 LEAF_NODE 14 u32 NAME 12 t3 LEAF_NODE 13 t3 LEAF_NODE 4 ; SIMPLE_DECL 3 int r ; VAR_DECL 4 int r TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 r LEAF_NODE 6 r LEAF_NODE 4 ; EXPR_STATEMENT 3 assert ( in && out && key ) ; EXPR 4 assert ( in && out && key ) FUNCTION_CALL 5 assert ( in && out && key ) CALLEE 6 assert LEAF_NODE 7 assert LEAF_NODE 6 ( ARGUMENT 6 in && out && key AND 7 in && out && key EXPR 8 in FIELD 9 in LEAF_NODE 10 in LEAF_NODE 8 && EXPR 8 out && key AND 9 out && key EXPR 10 out FIELD 11 out LEAF_NODE 12 out LEAF_NODE 10 && EXPR 10 key FIELD 11 key LEAF_NODE 12 key LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 rk = key -> rd_key ; EXPR 4 rk = key -> rd_key ASSIGN 5 rk = key -> rd_key LVAL 6 rk FIELD 7 rk LEAF_NODE 8 rk ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 key -> rd_key FIELD 7 key -> rd_key LEAF_NODE 8 key LEAF_NODE 8 -> LEAF_NODE 8 rd_key LEAF_NODE 4 ; EXPR_STATEMENT 3 s0 = GETU32 ( in ) ^ rk [ 0 ] ; EXPR 4 s0 = GETU32 ( in ) ^ rk [ 0 ] ASSIGN 5 s0 = GETU32 ( in ) ^ rk [ 0 ] LVAL 6 s0 FIELD 7 s0 LEAF_NODE 8 s0 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 GETU32 ( in ) ^ rk [ 0 ] FUNCTION_CALL 7 GETU32 ( in ) CALLEE 8 GETU32 LEAF_NODE 9 GETU32 LEAF_NODE 8 ( ARGUMENT 8 in FIELD 9 in LEAF_NODE 10 in LEAF_NODE 8 ) LEAF_NODE 7 ^ FIELD 7 rk [ 0 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 s1 = GETU32 ( in + 4 ) ^ rk [ 1 ] ; EXPR 4 s1 = GETU32 ( in + 4 ) ^ rk [ 1 ] ASSIGN 5 s1 = GETU32 ( in + 4 ) ^ rk [ 1 ] LVAL 6 s1 FIELD 7 s1 LEAF_NODE 8 s1 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 GETU32 ( in + 4 ) ^ rk [ 1 ] FUNCTION_CALL 7 GETU32 ( in + 4 ) CALLEE 8 GETU32 LEAF_NODE 9 GETU32 LEAF_NODE 8 ( ARGUMENT 8 in + 4 FIELD 9 in LEAF_NODE 10 in LEAF_NODE 9 + FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 8 ) LEAF_NODE 7 ^ FIELD 7 rk [ 1 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 s2 = GETU32 ( in + 8 ) ^ rk [ 2 ] ; EXPR 4 s2 = GETU32 ( in + 8 ) ^ rk [ 2 ] ASSIGN 5 s2 = GETU32 ( in + 8 ) ^ rk [ 2 ] LVAL 6 s2 FIELD 7 s2 LEAF_NODE 8 s2 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 GETU32 ( in + 8 ) ^ rk [ 2 ] FUNCTION_CALL 7 GETU32 ( in + 8 ) CALLEE 8 GETU32 LEAF_NODE 9 GETU32 LEAF_NODE 8 ( ARGUMENT 8 in + 8 FIELD 9 in LEAF_NODE 10 in LEAF_NODE 9 + FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 8 ) LEAF_NODE 7 ^ FIELD 7 rk [ 2 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 s3 = GETU32 ( in + 12 ) ^ rk [ 3 ] ; EXPR 4 s3 = GETU32 ( in + 12 ) ^ rk [ 3 ] ASSIGN 5 s3 = GETU32 ( in + 12 ) ^ rk [ 3 ] LVAL 6 s3 FIELD 7 s3 LEAF_NODE 8 s3 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 GETU32 ( in + 12 ) ^ rk [ 3 ] FUNCTION_CALL 7 GETU32 ( in + 12 ) CALLEE 8 GETU32 LEAF_NODE 9 GETU32 LEAF_NODE 8 ( ARGUMENT 8 in + 12 FIELD 9 in LEAF_NODE 10 in LEAF_NODE 9 + FIELD 9 12 LEAF_NODE 10 12 LEAF_NODE 8 ) LEAF_NODE 7 ^ FIELD 7 rk [ 3 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 4 ] ; EXPR 4 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 4 ] ASSIGN 5 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 4 ] LVAL 6 t0 FIELD 7 t0 LEAF_NODE 8 t0 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 4 ] FIELD 7 Te0 [ s0 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s0 >> 24 FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s1 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s1 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s2 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s2 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s3 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s3 & 0xff FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 4 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 4 FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 5 ] ; EXPR 4 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 5 ] ASSIGN 5 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 5 ] LVAL 6 t1 FIELD 7 t1 LEAF_NODE 8 t1 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 5 ] FIELD 7 Te0 [ s1 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s1 >> 24 FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s2 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s2 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s3 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s3 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s0 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s0 & 0xff FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 5 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 5 FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 6 ] ; EXPR 4 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 6 ] ASSIGN 5 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 6 ] LVAL 6 t2 FIELD 7 t2 LEAF_NODE 8 t2 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 6 ] FIELD 7 Te0 [ s2 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s2 >> 24 FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s3 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s3 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s0 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s0 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s1 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s1 & 0xff FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 6 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 6 FIELD 9 6 LEAF_NODE 10 6 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 7 ] ; EXPR 4 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 7 ] ASSIGN 5 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 7 ] LVAL 6 t3 FIELD 7 t3 LEAF_NODE 8 t3 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 7 ] FIELD 7 Te0 [ s3 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s3 >> 24 FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s0 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s0 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s1 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s1 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s2 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s2 & 0xff FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 7 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 7 FIELD 9 7 LEAF_NODE 10 7 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 s0 = Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 8 ] ; EXPR 4 s0 = Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 8 ] ASSIGN 5 s0 = Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 8 ] LVAL 6 s0 FIELD 7 s0 LEAF_NODE 8 s0 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 8 ] FIELD 7 Te0 [ t0 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 t0 >> 24 FIELD 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( t1 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t1 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( t2 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t2 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ t3 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 t3 & 0xff FIELD 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 8 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 8 FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 s1 = Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 9 ] ; EXPR 4 s1 = Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 9 ] ASSIGN 5 s1 = Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 9 ] LVAL 6 s1 FIELD 7 s1 LEAF_NODE 8 s1 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 9 ] FIELD 7 Te0 [ t1 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 t1 >> 24 FIELD 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( t2 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t2 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( t3 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t3 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ t0 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 t0 & 0xff FIELD 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 9 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 9 FIELD 9 9 LEAF_NODE 10 9 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 s2 = Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 10 ] ; EXPR 4 s2 = Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 10 ] ASSIGN 5 s2 = Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 10 ] LVAL 6 s2 FIELD 7 s2 LEAF_NODE 8 s2 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 10 ] FIELD 7 Te0 [ t2 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 t2 >> 24 FIELD 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( t3 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t3 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( t0 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t0 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ t1 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 t1 & 0xff FIELD 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 10 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 10 FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 s3 = Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 11 ] ; EXPR 4 s3 = Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 11 ] ASSIGN 5 s3 = Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 11 ] LVAL 6 s3 FIELD 7 s3 LEAF_NODE 8 s3 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 11 ] FIELD 7 Te0 [ t3 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 t3 >> 24 FIELD 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( t0 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t0 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( t1 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t1 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ t2 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 t2 & 0xff FIELD 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 11 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 11 FIELD 9 11 LEAF_NODE 10 11 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 12 ] ; EXPR 4 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 12 ] ASSIGN 5 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 12 ] LVAL 6 t0 FIELD 7 t0 LEAF_NODE 8 t0 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 12 ] FIELD 7 Te0 [ s0 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s0 >> 24 FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s1 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s1 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s2 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s2 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s3 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s3 & 0xff FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 12 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 12 FIELD 9 12 LEAF_NODE 10 12 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 13 ] ; EXPR 4 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 13 ] ASSIGN 5 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 13 ] LVAL 6 t1 FIELD 7 t1 LEAF_NODE 8 t1 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 13 ] FIELD 7 Te0 [ s1 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s1 >> 24 FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s2 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s2 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s3 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s3 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s0 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s0 & 0xff FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 13 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 13 FIELD 9 13 LEAF_NODE 10 13 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 14 ] ; EXPR 4 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 14 ] ASSIGN 5 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 14 ] LVAL 6 t2 FIELD 7 t2 LEAF_NODE 8 t2 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 14 ] FIELD 7 Te0 [ s2 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s2 >> 24 FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s3 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s3 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s0 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s0 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s1 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s1 & 0xff FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 14 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 14 FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 15 ] ; EXPR 4 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 15 ] ASSIGN 5 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 15 ] LVAL 6 t3 FIELD 7 t3 LEAF_NODE 8 t3 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 15 ] FIELD 7 Te0 [ s3 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s3 >> 24 FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s0 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s0 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s1 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s1 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s2 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s2 & 0xff FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 15 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 15 FIELD 9 15 LEAF_NODE 10 15 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 s0 = Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 16 ] ; EXPR 4 s0 = Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 16 ] ASSIGN 5 s0 = Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 16 ] LVAL 6 s0 FIELD 7 s0 LEAF_NODE 8 s0 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 16 ] FIELD 7 Te0 [ t0 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 t0 >> 24 FIELD 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( t1 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t1 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( t2 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t2 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ t3 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 t3 & 0xff FIELD 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 16 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 16 FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 s1 = Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 17 ] ; EXPR 4 s1 = Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 17 ] ASSIGN 5 s1 = Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 17 ] LVAL 6 s1 FIELD 7 s1 LEAF_NODE 8 s1 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 17 ] FIELD 7 Te0 [ t1 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 t1 >> 24 FIELD 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( t2 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t2 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( t3 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t3 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ t0 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 t0 & 0xff FIELD 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 17 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 17 FIELD 9 17 LEAF_NODE 10 17 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 s2 = Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 18 ] ; EXPR 4 s2 = Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 18 ] ASSIGN 5 s2 = Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 18 ] LVAL 6 s2 FIELD 7 s2 LEAF_NODE 8 s2 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 18 ] FIELD 7 Te0 [ t2 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 t2 >> 24 FIELD 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( t3 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t3 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( t0 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t0 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ t1 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 t1 & 0xff FIELD 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 18 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 18 FIELD 9 18 LEAF_NODE 10 18 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 s3 = Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 19 ] ; EXPR 4 s3 = Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 19 ] ASSIGN 5 s3 = Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 19 ] LVAL 6 s3 FIELD 7 s3 LEAF_NODE 8 s3 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 19 ] FIELD 7 Te0 [ t3 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 t3 >> 24 FIELD 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( t0 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t0 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( t1 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t1 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ t2 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 t2 & 0xff FIELD 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 19 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 19 FIELD 9 19 LEAF_NODE 10 19 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 20 ] ; EXPR 4 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 20 ] ASSIGN 5 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 20 ] LVAL 6 t0 FIELD 7 t0 LEAF_NODE 8 t0 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 20 ] FIELD 7 Te0 [ s0 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s0 >> 24 FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s1 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s1 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s2 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s2 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s3 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s3 & 0xff FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 20 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 20 FIELD 9 20 LEAF_NODE 10 20 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 21 ] ; EXPR 4 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 21 ] ASSIGN 5 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 21 ] LVAL 6 t1 FIELD 7 t1 LEAF_NODE 8 t1 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 21 ] FIELD 7 Te0 [ s1 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s1 >> 24 FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s2 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s2 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s3 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s3 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s0 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s0 & 0xff FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 21 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 21 FIELD 9 21 LEAF_NODE 10 21 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 22 ] ; EXPR 4 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 22 ] ASSIGN 5 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 22 ] LVAL 6 t2 FIELD 7 t2 LEAF_NODE 8 t2 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 22 ] FIELD 7 Te0 [ s2 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s2 >> 24 FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s3 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s3 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s0 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s0 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s1 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s1 & 0xff FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 22 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 22 FIELD 9 22 LEAF_NODE 10 22 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 23 ] ; EXPR 4 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 23 ] ASSIGN 5 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 23 ] LVAL 6 t3 FIELD 7 t3 LEAF_NODE 8 t3 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 23 ] FIELD 7 Te0 [ s3 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s3 >> 24 FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s0 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s0 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s1 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s1 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s2 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s2 & 0xff FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 23 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 23 FIELD 9 23 LEAF_NODE 10 23 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 s0 = Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 24 ] ; EXPR 4 s0 = Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 24 ] ASSIGN 5 s0 = Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 24 ] LVAL 6 s0 FIELD 7 s0 LEAF_NODE 8 s0 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 24 ] FIELD 7 Te0 [ t0 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 t0 >> 24 FIELD 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( t1 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t1 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( t2 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t2 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ t3 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 t3 & 0xff FIELD 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 24 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 24 FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 s1 = Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 25 ] ; EXPR 4 s1 = Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 25 ] ASSIGN 5 s1 = Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 25 ] LVAL 6 s1 FIELD 7 s1 LEAF_NODE 8 s1 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 25 ] FIELD 7 Te0 [ t1 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 t1 >> 24 FIELD 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( t2 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t2 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( t3 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t3 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ t0 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 t0 & 0xff FIELD 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 25 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 25 FIELD 9 25 LEAF_NODE 10 25 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 s2 = Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 26 ] ; EXPR 4 s2 = Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 26 ] ASSIGN 5 s2 = Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 26 ] LVAL 6 s2 FIELD 7 s2 LEAF_NODE 8 s2 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 26 ] FIELD 7 Te0 [ t2 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 t2 >> 24 FIELD 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( t3 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t3 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( t0 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t0 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ t1 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 t1 & 0xff FIELD 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 26 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 26 FIELD 9 26 LEAF_NODE 10 26 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 s3 = Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 27 ] ; EXPR 4 s3 = Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 27 ] ASSIGN 5 s3 = Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 27 ] LVAL 6 s3 FIELD 7 s3 LEAF_NODE 8 s3 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 27 ] FIELD 7 Te0 [ t3 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 t3 >> 24 FIELD 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( t0 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t0 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( t1 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t1 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ t2 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 t2 & 0xff FIELD 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 27 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 27 FIELD 9 27 LEAF_NODE 10 27 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 28 ] ; EXPR 4 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 28 ] ASSIGN 5 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 28 ] LVAL 6 t0 FIELD 7 t0 LEAF_NODE 8 t0 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 28 ] FIELD 7 Te0 [ s0 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s0 >> 24 FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s1 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s1 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s2 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s2 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s3 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s3 & 0xff FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 28 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 28 FIELD 9 28 LEAF_NODE 10 28 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 29 ] ; EXPR 4 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 29 ] ASSIGN 5 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 29 ] LVAL 6 t1 FIELD 7 t1 LEAF_NODE 8 t1 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 29 ] FIELD 7 Te0 [ s1 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s1 >> 24 FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s2 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s2 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s3 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s3 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s0 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s0 & 0xff FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 29 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 29 FIELD 9 29 LEAF_NODE 10 29 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 30 ] ; EXPR 4 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 30 ] ASSIGN 5 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 30 ] LVAL 6 t2 FIELD 7 t2 LEAF_NODE 8 t2 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 30 ] FIELD 7 Te0 [ s2 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s2 >> 24 FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s3 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s3 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s0 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s0 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s1 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s1 & 0xff FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 30 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 30 FIELD 9 30 LEAF_NODE 10 30 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 31 ] ; EXPR 4 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 31 ] ASSIGN 5 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 31 ] LVAL 6 t3 FIELD 7 t3 LEAF_NODE 8 t3 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 31 ] FIELD 7 Te0 [ s3 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s3 >> 24 FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s0 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s0 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s1 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s1 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s2 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s2 & 0xff FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 31 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 31 FIELD 9 31 LEAF_NODE 10 31 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 s0 = Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 32 ] ; EXPR 4 s0 = Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 32 ] ASSIGN 5 s0 = Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 32 ] LVAL 6 s0 FIELD 7 s0 LEAF_NODE 8 s0 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 32 ] FIELD 7 Te0 [ t0 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 t0 >> 24 FIELD 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( t1 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t1 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( t2 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t2 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ t3 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 t3 & 0xff FIELD 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 32 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 32 FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 s1 = Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 33 ] ; EXPR 4 s1 = Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 33 ] ASSIGN 5 s1 = Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 33 ] LVAL 6 s1 FIELD 7 s1 LEAF_NODE 8 s1 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 33 ] FIELD 7 Te0 [ t1 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 t1 >> 24 FIELD 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( t2 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t2 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( t3 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t3 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ t0 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 t0 & 0xff FIELD 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 33 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 33 FIELD 9 33 LEAF_NODE 10 33 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 s2 = Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 34 ] ; EXPR 4 s2 = Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 34 ] ASSIGN 5 s2 = Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 34 ] LVAL 6 s2 FIELD 7 s2 LEAF_NODE 8 s2 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 34 ] FIELD 7 Te0 [ t2 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 t2 >> 24 FIELD 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( t3 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t3 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( t0 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t0 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ t1 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 t1 & 0xff FIELD 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 34 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 34 FIELD 9 34 LEAF_NODE 10 34 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 s3 = Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 35 ] ; EXPR 4 s3 = Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 35 ] ASSIGN 5 s3 = Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 35 ] LVAL 6 s3 FIELD 7 s3 LEAF_NODE 8 s3 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 35 ] FIELD 7 Te0 [ t3 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 t3 >> 24 FIELD 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( t0 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t0 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( t1 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t1 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ t2 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 t2 & 0xff FIELD 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 35 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 35 FIELD 9 35 LEAF_NODE 10 35 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 36 ] ; EXPR 4 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 36 ] ASSIGN 5 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 36 ] LVAL 6 t0 FIELD 7 t0 LEAF_NODE 8 t0 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 36 ] FIELD 7 Te0 [ s0 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s0 >> 24 FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s1 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s1 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s2 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s2 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s3 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s3 & 0xff FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 36 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 36 FIELD 9 36 LEAF_NODE 10 36 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 37 ] ; EXPR 4 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 37 ] ASSIGN 5 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 37 ] LVAL 6 t1 FIELD 7 t1 LEAF_NODE 8 t1 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 37 ] FIELD 7 Te0 [ s1 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s1 >> 24 FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s2 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s2 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s3 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s3 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s0 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s0 & 0xff FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 37 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 37 FIELD 9 37 LEAF_NODE 10 37 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 38 ] ; EXPR 4 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 38 ] ASSIGN 5 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 38 ] LVAL 6 t2 FIELD 7 t2 LEAF_NODE 8 t2 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 38 ] FIELD 7 Te0 [ s2 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s2 >> 24 FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s3 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s3 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s0 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s0 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s1 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s1 & 0xff FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 38 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 38 FIELD 9 38 LEAF_NODE 10 38 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 39 ] ; EXPR 4 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 39 ] ASSIGN 5 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 39 ] LVAL 6 t3 FIELD 7 t3 LEAF_NODE 8 t3 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 39 ] FIELD 7 Te0 [ s3 >> 24 ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 s3 >> 24 FIELD 9 s3 LEAF_NODE 10 s3 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te1 [ ( s0 >> 16 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( s0 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 s0 LEAF_NODE 10 s0 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te2 [ ( s1 >> 8 ) & 0xff ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( s1 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 s1 LEAF_NODE 10 s1 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 Te3 [ s2 & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 s2 & 0xff FIELD 9 s2 LEAF_NODE 10 s2 LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 rk [ 39 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 39 FIELD 9 39 LEAF_NODE 10 39 LEAF_NODE 8 ] LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 key -> rounds > 10 EXPR 5 key -> rounds > 10 FIELD 6 key -> rounds LEAF_NODE 7 key LEAF_NODE 7 -> LEAF_NODE 7 rounds REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 10 LEAF_NODE 7 10 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 s0 = Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 40 ] ; EXPR 7 s0 = Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 40 ] ASSIGN 8 s0 = Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 40 ] LVAL 9 s0 FIELD 10 s0 LEAF_NODE 11 s0 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 40 ] FIELD 10 Te0 [ t0 >> 24 ] LEAF_NODE 11 Te0 LEAF_NODE 11 [ EXPR 11 t0 >> 24 FIELD 12 t0 LEAF_NODE 13 t0 LEAF_NODE 12 >> FIELD 12 24 LEAF_NODE 13 24 LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te1 [ ( t1 >> 16 ) & 0xff ] LEAF_NODE 11 Te1 LEAF_NODE 11 [ EXPR 11 ( t1 >> 16 ) & 0xff LEAF_NODE 12 ( FIELD 12 t1 LEAF_NODE 13 t1 LEAF_NODE 12 >> FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te2 [ ( t2 >> 8 ) & 0xff ] LEAF_NODE 11 Te2 LEAF_NODE 11 [ EXPR 11 ( t2 >> 8 ) & 0xff LEAF_NODE 12 ( FIELD 12 t2 LEAF_NODE 13 t2 LEAF_NODE 12 >> FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te3 [ t3 & 0xff ] LEAF_NODE 11 Te3 LEAF_NODE 11 [ EXPR 11 t3 & 0xff FIELD 12 t3 LEAF_NODE 13 t3 LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 rk [ 40 ] LEAF_NODE 11 rk LEAF_NODE 11 [ EXPR 11 40 FIELD 12 40 LEAF_NODE 13 40 LEAF_NODE 11 ] LEAF_NODE 7 ; EXPR_STATEMENT 6 s1 = Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 41 ] ; EXPR 7 s1 = Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 41 ] ASSIGN 8 s1 = Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 41 ] LVAL 9 s1 FIELD 10 s1 LEAF_NODE 11 s1 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 41 ] FIELD 10 Te0 [ t1 >> 24 ] LEAF_NODE 11 Te0 LEAF_NODE 11 [ EXPR 11 t1 >> 24 FIELD 12 t1 LEAF_NODE 13 t1 LEAF_NODE 12 >> FIELD 12 24 LEAF_NODE 13 24 LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te1 [ ( t2 >> 16 ) & 0xff ] LEAF_NODE 11 Te1 LEAF_NODE 11 [ EXPR 11 ( t2 >> 16 ) & 0xff LEAF_NODE 12 ( FIELD 12 t2 LEAF_NODE 13 t2 LEAF_NODE 12 >> FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te2 [ ( t3 >> 8 ) & 0xff ] LEAF_NODE 11 Te2 LEAF_NODE 11 [ EXPR 11 ( t3 >> 8 ) & 0xff LEAF_NODE 12 ( FIELD 12 t3 LEAF_NODE 13 t3 LEAF_NODE 12 >> FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te3 [ t0 & 0xff ] LEAF_NODE 11 Te3 LEAF_NODE 11 [ EXPR 11 t0 & 0xff FIELD 12 t0 LEAF_NODE 13 t0 LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 rk [ 41 ] LEAF_NODE 11 rk LEAF_NODE 11 [ EXPR 11 41 FIELD 12 41 LEAF_NODE 13 41 LEAF_NODE 11 ] LEAF_NODE 7 ; EXPR_STATEMENT 6 s2 = Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 42 ] ; EXPR 7 s2 = Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 42 ] ASSIGN 8 s2 = Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 42 ] LVAL 9 s2 FIELD 10 s2 LEAF_NODE 11 s2 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 42 ] FIELD 10 Te0 [ t2 >> 24 ] LEAF_NODE 11 Te0 LEAF_NODE 11 [ EXPR 11 t2 >> 24 FIELD 12 t2 LEAF_NODE 13 t2 LEAF_NODE 12 >> FIELD 12 24 LEAF_NODE 13 24 LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te1 [ ( t3 >> 16 ) & 0xff ] LEAF_NODE 11 Te1 LEAF_NODE 11 [ EXPR 11 ( t3 >> 16 ) & 0xff LEAF_NODE 12 ( FIELD 12 t3 LEAF_NODE 13 t3 LEAF_NODE 12 >> FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te2 [ ( t0 >> 8 ) & 0xff ] LEAF_NODE 11 Te2 LEAF_NODE 11 [ EXPR 11 ( t0 >> 8 ) & 0xff LEAF_NODE 12 ( FIELD 12 t0 LEAF_NODE 13 t0 LEAF_NODE 12 >> FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te3 [ t1 & 0xff ] LEAF_NODE 11 Te3 LEAF_NODE 11 [ EXPR 11 t1 & 0xff FIELD 12 t1 LEAF_NODE 13 t1 LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 rk [ 42 ] LEAF_NODE 11 rk LEAF_NODE 11 [ EXPR 11 42 FIELD 12 42 LEAF_NODE 13 42 LEAF_NODE 11 ] LEAF_NODE 7 ; EXPR_STATEMENT 6 s3 = Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 43 ] ; EXPR 7 s3 = Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 43 ] ASSIGN 8 s3 = Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 43 ] LVAL 9 s3 FIELD 10 s3 LEAF_NODE 11 s3 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 43 ] FIELD 10 Te0 [ t3 >> 24 ] LEAF_NODE 11 Te0 LEAF_NODE 11 [ EXPR 11 t3 >> 24 FIELD 12 t3 LEAF_NODE 13 t3 LEAF_NODE 12 >> FIELD 12 24 LEAF_NODE 13 24 LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te1 [ ( t0 >> 16 ) & 0xff ] LEAF_NODE 11 Te1 LEAF_NODE 11 [ EXPR 11 ( t0 >> 16 ) & 0xff LEAF_NODE 12 ( FIELD 12 t0 LEAF_NODE 13 t0 LEAF_NODE 12 >> FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te2 [ ( t1 >> 8 ) & 0xff ] LEAF_NODE 11 Te2 LEAF_NODE 11 [ EXPR 11 ( t1 >> 8 ) & 0xff LEAF_NODE 12 ( FIELD 12 t1 LEAF_NODE 13 t1 LEAF_NODE 12 >> FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te3 [ t2 & 0xff ] LEAF_NODE 11 Te3 LEAF_NODE 11 [ EXPR 11 t2 & 0xff FIELD 12 t2 LEAF_NODE 13 t2 LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 rk [ 43 ] LEAF_NODE 11 rk LEAF_NODE 11 [ EXPR 11 43 FIELD 12 43 LEAF_NODE 13 43 LEAF_NODE 11 ] LEAF_NODE 7 ; EXPR_STATEMENT 6 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 44 ] ; EXPR 7 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 44 ] ASSIGN 8 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 44 ] LVAL 9 t0 FIELD 10 t0 LEAF_NODE 11 t0 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 44 ] FIELD 10 Te0 [ s0 >> 24 ] LEAF_NODE 11 Te0 LEAF_NODE 11 [ EXPR 11 s0 >> 24 FIELD 12 s0 LEAF_NODE 13 s0 LEAF_NODE 12 >> FIELD 12 24 LEAF_NODE 13 24 LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te1 [ ( s1 >> 16 ) & 0xff ] LEAF_NODE 11 Te1 LEAF_NODE 11 [ EXPR 11 ( s1 >> 16 ) & 0xff LEAF_NODE 12 ( FIELD 12 s1 LEAF_NODE 13 s1 LEAF_NODE 12 >> FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te2 [ ( s2 >> 8 ) & 0xff ] LEAF_NODE 11 Te2 LEAF_NODE 11 [ EXPR 11 ( s2 >> 8 ) & 0xff LEAF_NODE 12 ( FIELD 12 s2 LEAF_NODE 13 s2 LEAF_NODE 12 >> FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te3 [ s3 & 0xff ] LEAF_NODE 11 Te3 LEAF_NODE 11 [ EXPR 11 s3 & 0xff FIELD 12 s3 LEAF_NODE 13 s3 LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 rk [ 44 ] LEAF_NODE 11 rk LEAF_NODE 11 [ EXPR 11 44 FIELD 12 44 LEAF_NODE 13 44 LEAF_NODE 11 ] LEAF_NODE 7 ; EXPR_STATEMENT 6 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 45 ] ; EXPR 7 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 45 ] ASSIGN 8 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 45 ] LVAL 9 t1 FIELD 10 t1 LEAF_NODE 11 t1 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 45 ] FIELD 10 Te0 [ s1 >> 24 ] LEAF_NODE 11 Te0 LEAF_NODE 11 [ EXPR 11 s1 >> 24 FIELD 12 s1 LEAF_NODE 13 s1 LEAF_NODE 12 >> FIELD 12 24 LEAF_NODE 13 24 LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te1 [ ( s2 >> 16 ) & 0xff ] LEAF_NODE 11 Te1 LEAF_NODE 11 [ EXPR 11 ( s2 >> 16 ) & 0xff LEAF_NODE 12 ( FIELD 12 s2 LEAF_NODE 13 s2 LEAF_NODE 12 >> FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te2 [ ( s3 >> 8 ) & 0xff ] LEAF_NODE 11 Te2 LEAF_NODE 11 [ EXPR 11 ( s3 >> 8 ) & 0xff LEAF_NODE 12 ( FIELD 12 s3 LEAF_NODE 13 s3 LEAF_NODE 12 >> FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te3 [ s0 & 0xff ] LEAF_NODE 11 Te3 LEAF_NODE 11 [ EXPR 11 s0 & 0xff FIELD 12 s0 LEAF_NODE 13 s0 LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 rk [ 45 ] LEAF_NODE 11 rk LEAF_NODE 11 [ EXPR 11 45 FIELD 12 45 LEAF_NODE 13 45 LEAF_NODE 11 ] LEAF_NODE 7 ; EXPR_STATEMENT 6 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 46 ] ; EXPR 7 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 46 ] ASSIGN 8 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 46 ] LVAL 9 t2 FIELD 10 t2 LEAF_NODE 11 t2 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 46 ] FIELD 10 Te0 [ s2 >> 24 ] LEAF_NODE 11 Te0 LEAF_NODE 11 [ EXPR 11 s2 >> 24 FIELD 12 s2 LEAF_NODE 13 s2 LEAF_NODE 12 >> FIELD 12 24 LEAF_NODE 13 24 LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te1 [ ( s3 >> 16 ) & 0xff ] LEAF_NODE 11 Te1 LEAF_NODE 11 [ EXPR 11 ( s3 >> 16 ) & 0xff LEAF_NODE 12 ( FIELD 12 s3 LEAF_NODE 13 s3 LEAF_NODE 12 >> FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te2 [ ( s0 >> 8 ) & 0xff ] LEAF_NODE 11 Te2 LEAF_NODE 11 [ EXPR 11 ( s0 >> 8 ) & 0xff LEAF_NODE 12 ( FIELD 12 s0 LEAF_NODE 13 s0 LEAF_NODE 12 >> FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te3 [ s1 & 0xff ] LEAF_NODE 11 Te3 LEAF_NODE 11 [ EXPR 11 s1 & 0xff FIELD 12 s1 LEAF_NODE 13 s1 LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 rk [ 46 ] LEAF_NODE 11 rk LEAF_NODE 11 [ EXPR 11 46 FIELD 12 46 LEAF_NODE 13 46 LEAF_NODE 11 ] LEAF_NODE 7 ; EXPR_STATEMENT 6 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 47 ] ; EXPR 7 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 47 ] ASSIGN 8 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 47 ] LVAL 9 t3 FIELD 10 t3 LEAF_NODE 11 t3 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 47 ] FIELD 10 Te0 [ s3 >> 24 ] LEAF_NODE 11 Te0 LEAF_NODE 11 [ EXPR 11 s3 >> 24 FIELD 12 s3 LEAF_NODE 13 s3 LEAF_NODE 12 >> FIELD 12 24 LEAF_NODE 13 24 LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te1 [ ( s0 >> 16 ) & 0xff ] LEAF_NODE 11 Te1 LEAF_NODE 11 [ EXPR 11 ( s0 >> 16 ) & 0xff LEAF_NODE 12 ( FIELD 12 s0 LEAF_NODE 13 s0 LEAF_NODE 12 >> FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te2 [ ( s1 >> 8 ) & 0xff ] LEAF_NODE 11 Te2 LEAF_NODE 11 [ EXPR 11 ( s1 >> 8 ) & 0xff LEAF_NODE 12 ( FIELD 12 s1 LEAF_NODE 13 s1 LEAF_NODE 12 >> FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te3 [ s2 & 0xff ] LEAF_NODE 11 Te3 LEAF_NODE 11 [ EXPR 11 s2 & 0xff FIELD 12 s2 LEAF_NODE 13 s2 LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 rk [ 47 ] LEAF_NODE 11 rk LEAF_NODE 11 [ EXPR 11 47 FIELD 12 47 LEAF_NODE 13 47 LEAF_NODE 11 ] LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 key -> rounds > 12 EXPR 8 key -> rounds > 12 FIELD 9 key -> rounds LEAF_NODE 10 key LEAF_NODE 10 -> LEAF_NODE 10 rounds REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 12 LEAF_NODE 10 12 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 s0 = Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 48 ] ; EXPR 10 s0 = Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 48 ] ASSIGN 11 s0 = Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 48 ] LVAL 12 s0 FIELD 13 s0 LEAF_NODE 14 s0 ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 Te0 [ t0 >> 24 ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ t3 & 0xff ] ^ rk [ 48 ] FIELD 13 Te0 [ t0 >> 24 ] LEAF_NODE 14 Te0 LEAF_NODE 14 [ EXPR 14 t0 >> 24 FIELD 15 t0 LEAF_NODE 16 t0 LEAF_NODE 15 >> FIELD 15 24 LEAF_NODE 16 24 LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te1 [ ( t1 >> 16 ) & 0xff ] LEAF_NODE 14 Te1 LEAF_NODE 14 [ EXPR 14 ( t1 >> 16 ) & 0xff LEAF_NODE 15 ( FIELD 15 t1 LEAF_NODE 16 t1 LEAF_NODE 15 >> FIELD 15 16 LEAF_NODE 16 16 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te2 [ ( t2 >> 8 ) & 0xff ] LEAF_NODE 14 Te2 LEAF_NODE 14 [ EXPR 14 ( t2 >> 8 ) & 0xff LEAF_NODE 15 ( FIELD 15 t2 LEAF_NODE 16 t2 LEAF_NODE 15 >> FIELD 15 8 LEAF_NODE 16 8 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te3 [ t3 & 0xff ] LEAF_NODE 14 Te3 LEAF_NODE 14 [ EXPR 14 t3 & 0xff FIELD 15 t3 LEAF_NODE 16 t3 LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 rk [ 48 ] LEAF_NODE 14 rk LEAF_NODE 14 [ EXPR 14 48 FIELD 15 48 LEAF_NODE 16 48 LEAF_NODE 14 ] LEAF_NODE 10 ; EXPR_STATEMENT 9 s1 = Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 49 ] ; EXPR 10 s1 = Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 49 ] ASSIGN 11 s1 = Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 49 ] LVAL 12 s1 FIELD 13 s1 LEAF_NODE 14 s1 ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 Te0 [ t1 >> 24 ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ t0 & 0xff ] ^ rk [ 49 ] FIELD 13 Te0 [ t1 >> 24 ] LEAF_NODE 14 Te0 LEAF_NODE 14 [ EXPR 14 t1 >> 24 FIELD 15 t1 LEAF_NODE 16 t1 LEAF_NODE 15 >> FIELD 15 24 LEAF_NODE 16 24 LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te1 [ ( t2 >> 16 ) & 0xff ] LEAF_NODE 14 Te1 LEAF_NODE 14 [ EXPR 14 ( t2 >> 16 ) & 0xff LEAF_NODE 15 ( FIELD 15 t2 LEAF_NODE 16 t2 LEAF_NODE 15 >> FIELD 15 16 LEAF_NODE 16 16 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te2 [ ( t3 >> 8 ) & 0xff ] LEAF_NODE 14 Te2 LEAF_NODE 14 [ EXPR 14 ( t3 >> 8 ) & 0xff LEAF_NODE 15 ( FIELD 15 t3 LEAF_NODE 16 t3 LEAF_NODE 15 >> FIELD 15 8 LEAF_NODE 16 8 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te3 [ t0 & 0xff ] LEAF_NODE 14 Te3 LEAF_NODE 14 [ EXPR 14 t0 & 0xff FIELD 15 t0 LEAF_NODE 16 t0 LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 rk [ 49 ] LEAF_NODE 14 rk LEAF_NODE 14 [ EXPR 14 49 FIELD 15 49 LEAF_NODE 16 49 LEAF_NODE 14 ] LEAF_NODE 10 ; EXPR_STATEMENT 9 s2 = Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 50 ] ; EXPR 10 s2 = Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 50 ] ASSIGN 11 s2 = Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 50 ] LVAL 12 s2 FIELD 13 s2 LEAF_NODE 14 s2 ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 Te0 [ t2 >> 24 ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ t1 & 0xff ] ^ rk [ 50 ] FIELD 13 Te0 [ t2 >> 24 ] LEAF_NODE 14 Te0 LEAF_NODE 14 [ EXPR 14 t2 >> 24 FIELD 15 t2 LEAF_NODE 16 t2 LEAF_NODE 15 >> FIELD 15 24 LEAF_NODE 16 24 LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te1 [ ( t3 >> 16 ) & 0xff ] LEAF_NODE 14 Te1 LEAF_NODE 14 [ EXPR 14 ( t3 >> 16 ) & 0xff LEAF_NODE 15 ( FIELD 15 t3 LEAF_NODE 16 t3 LEAF_NODE 15 >> FIELD 15 16 LEAF_NODE 16 16 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te2 [ ( t0 >> 8 ) & 0xff ] LEAF_NODE 14 Te2 LEAF_NODE 14 [ EXPR 14 ( t0 >> 8 ) & 0xff LEAF_NODE 15 ( FIELD 15 t0 LEAF_NODE 16 t0 LEAF_NODE 15 >> FIELD 15 8 LEAF_NODE 16 8 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te3 [ t1 & 0xff ] LEAF_NODE 14 Te3 LEAF_NODE 14 [ EXPR 14 t1 & 0xff FIELD 15 t1 LEAF_NODE 16 t1 LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 rk [ 50 ] LEAF_NODE 14 rk LEAF_NODE 14 [ EXPR 14 50 FIELD 15 50 LEAF_NODE 16 50 LEAF_NODE 14 ] LEAF_NODE 10 ; EXPR_STATEMENT 9 s3 = Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 51 ] ; EXPR 10 s3 = Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 51 ] ASSIGN 11 s3 = Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 51 ] LVAL 12 s3 FIELD 13 s3 LEAF_NODE 14 s3 ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 Te0 [ t3 >> 24 ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ t2 & 0xff ] ^ rk [ 51 ] FIELD 13 Te0 [ t3 >> 24 ] LEAF_NODE 14 Te0 LEAF_NODE 14 [ EXPR 14 t3 >> 24 FIELD 15 t3 LEAF_NODE 16 t3 LEAF_NODE 15 >> FIELD 15 24 LEAF_NODE 16 24 LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te1 [ ( t0 >> 16 ) & 0xff ] LEAF_NODE 14 Te1 LEAF_NODE 14 [ EXPR 14 ( t0 >> 16 ) & 0xff LEAF_NODE 15 ( FIELD 15 t0 LEAF_NODE 16 t0 LEAF_NODE 15 >> FIELD 15 16 LEAF_NODE 16 16 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te2 [ ( t1 >> 8 ) & 0xff ] LEAF_NODE 14 Te2 LEAF_NODE 14 [ EXPR 14 ( t1 >> 8 ) & 0xff LEAF_NODE 15 ( FIELD 15 t1 LEAF_NODE 16 t1 LEAF_NODE 15 >> FIELD 15 8 LEAF_NODE 16 8 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te3 [ t2 & 0xff ] LEAF_NODE 14 Te3 LEAF_NODE 14 [ EXPR 14 t2 & 0xff FIELD 15 t2 LEAF_NODE 16 t2 LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 rk [ 51 ] LEAF_NODE 14 rk LEAF_NODE 14 [ EXPR 14 51 FIELD 15 51 LEAF_NODE 16 51 LEAF_NODE 14 ] LEAF_NODE 10 ; EXPR_STATEMENT 9 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 52 ] ; EXPR 10 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 52 ] ASSIGN 11 t0 = Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 52 ] LVAL 12 t0 FIELD 13 t0 LEAF_NODE 14 t0 ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 Te0 [ s0 >> 24 ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ s3 & 0xff ] ^ rk [ 52 ] FIELD 13 Te0 [ s0 >> 24 ] LEAF_NODE 14 Te0 LEAF_NODE 14 [ EXPR 14 s0 >> 24 FIELD 15 s0 LEAF_NODE 16 s0 LEAF_NODE 15 >> FIELD 15 24 LEAF_NODE 16 24 LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te1 [ ( s1 >> 16 ) & 0xff ] LEAF_NODE 14 Te1 LEAF_NODE 14 [ EXPR 14 ( s1 >> 16 ) & 0xff LEAF_NODE 15 ( FIELD 15 s1 LEAF_NODE 16 s1 LEAF_NODE 15 >> FIELD 15 16 LEAF_NODE 16 16 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te2 [ ( s2 >> 8 ) & 0xff ] LEAF_NODE 14 Te2 LEAF_NODE 14 [ EXPR 14 ( s2 >> 8 ) & 0xff LEAF_NODE 15 ( FIELD 15 s2 LEAF_NODE 16 s2 LEAF_NODE 15 >> FIELD 15 8 LEAF_NODE 16 8 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te3 [ s3 & 0xff ] LEAF_NODE 14 Te3 LEAF_NODE 14 [ EXPR 14 s3 & 0xff FIELD 15 s3 LEAF_NODE 16 s3 LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 rk [ 52 ] LEAF_NODE 14 rk LEAF_NODE 14 [ EXPR 14 52 FIELD 15 52 LEAF_NODE 16 52 LEAF_NODE 14 ] LEAF_NODE 10 ; EXPR_STATEMENT 9 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 53 ] ; EXPR 10 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 53 ] ASSIGN 11 t1 = Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 53 ] LVAL 12 t1 FIELD 13 t1 LEAF_NODE 14 t1 ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 Te0 [ s1 >> 24 ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ s0 & 0xff ] ^ rk [ 53 ] FIELD 13 Te0 [ s1 >> 24 ] LEAF_NODE 14 Te0 LEAF_NODE 14 [ EXPR 14 s1 >> 24 FIELD 15 s1 LEAF_NODE 16 s1 LEAF_NODE 15 >> FIELD 15 24 LEAF_NODE 16 24 LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te1 [ ( s2 >> 16 ) & 0xff ] LEAF_NODE 14 Te1 LEAF_NODE 14 [ EXPR 14 ( s2 >> 16 ) & 0xff LEAF_NODE 15 ( FIELD 15 s2 LEAF_NODE 16 s2 LEAF_NODE 15 >> FIELD 15 16 LEAF_NODE 16 16 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te2 [ ( s3 >> 8 ) & 0xff ] LEAF_NODE 14 Te2 LEAF_NODE 14 [ EXPR 14 ( s3 >> 8 ) & 0xff LEAF_NODE 15 ( FIELD 15 s3 LEAF_NODE 16 s3 LEAF_NODE 15 >> FIELD 15 8 LEAF_NODE 16 8 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te3 [ s0 & 0xff ] LEAF_NODE 14 Te3 LEAF_NODE 14 [ EXPR 14 s0 & 0xff FIELD 15 s0 LEAF_NODE 16 s0 LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 rk [ 53 ] LEAF_NODE 14 rk LEAF_NODE 14 [ EXPR 14 53 FIELD 15 53 LEAF_NODE 16 53 LEAF_NODE 14 ] LEAF_NODE 10 ; EXPR_STATEMENT 9 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 54 ] ; EXPR 10 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 54 ] ASSIGN 11 t2 = Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 54 ] LVAL 12 t2 FIELD 13 t2 LEAF_NODE 14 t2 ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 Te0 [ s2 >> 24 ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ s1 & 0xff ] ^ rk [ 54 ] FIELD 13 Te0 [ s2 >> 24 ] LEAF_NODE 14 Te0 LEAF_NODE 14 [ EXPR 14 s2 >> 24 FIELD 15 s2 LEAF_NODE 16 s2 LEAF_NODE 15 >> FIELD 15 24 LEAF_NODE 16 24 LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te1 [ ( s3 >> 16 ) & 0xff ] LEAF_NODE 14 Te1 LEAF_NODE 14 [ EXPR 14 ( s3 >> 16 ) & 0xff LEAF_NODE 15 ( FIELD 15 s3 LEAF_NODE 16 s3 LEAF_NODE 15 >> FIELD 15 16 LEAF_NODE 16 16 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te2 [ ( s0 >> 8 ) & 0xff ] LEAF_NODE 14 Te2 LEAF_NODE 14 [ EXPR 14 ( s0 >> 8 ) & 0xff LEAF_NODE 15 ( FIELD 15 s0 LEAF_NODE 16 s0 LEAF_NODE 15 >> FIELD 15 8 LEAF_NODE 16 8 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te3 [ s1 & 0xff ] LEAF_NODE 14 Te3 LEAF_NODE 14 [ EXPR 14 s1 & 0xff FIELD 15 s1 LEAF_NODE 16 s1 LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 rk [ 54 ] LEAF_NODE 14 rk LEAF_NODE 14 [ EXPR 14 54 FIELD 15 54 LEAF_NODE 16 54 LEAF_NODE 14 ] LEAF_NODE 10 ; EXPR_STATEMENT 9 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 55 ] ; EXPR 10 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 55 ] ASSIGN 11 t3 = Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 55 ] LVAL 12 t3 FIELD 13 t3 LEAF_NODE 14 t3 ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 Te0 [ s3 >> 24 ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ s2 & 0xff ] ^ rk [ 55 ] FIELD 13 Te0 [ s3 >> 24 ] LEAF_NODE 14 Te0 LEAF_NODE 14 [ EXPR 14 s3 >> 24 FIELD 15 s3 LEAF_NODE 16 s3 LEAF_NODE 15 >> FIELD 15 24 LEAF_NODE 16 24 LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te1 [ ( s0 >> 16 ) & 0xff ] LEAF_NODE 14 Te1 LEAF_NODE 14 [ EXPR 14 ( s0 >> 16 ) & 0xff LEAF_NODE 15 ( FIELD 15 s0 LEAF_NODE 16 s0 LEAF_NODE 15 >> FIELD 15 16 LEAF_NODE 16 16 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te2 [ ( s1 >> 8 ) & 0xff ] LEAF_NODE 14 Te2 LEAF_NODE 14 [ EXPR 14 ( s1 >> 8 ) & 0xff LEAF_NODE 15 ( FIELD 15 s1 LEAF_NODE 16 s1 LEAF_NODE 15 >> FIELD 15 8 LEAF_NODE 16 8 LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 Te3 [ s2 & 0xff ] LEAF_NODE 14 Te3 LEAF_NODE 14 [ EXPR 14 s2 & 0xff FIELD 15 s2 LEAF_NODE 16 s2 LEAF_NODE 15 & FIELD 15 0xff LEAF_NODE 16 0xff LEAF_NODE 14 ] LEAF_NODE 13 ^ FIELD 13 rk [ 55 ] LEAF_NODE 14 rk LEAF_NODE 14 [ EXPR 14 55 FIELD 15 55 LEAF_NODE 16 55 LEAF_NODE 14 ] LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 rk += key -> rounds << 2 ; EXPR 4 rk += key -> rounds << 2 ASSIGN 5 rk += key -> rounds << 2 LVAL 6 rk FIELD 7 rk LEAF_NODE 8 rk ASSIGN_OP 6 += LEAF_NODE 7 += RVAL 6 key -> rounds << 2 FIELD 7 key -> rounds LEAF_NODE 8 key LEAF_NODE 8 -> LEAF_NODE 8 rounds LEAF_NODE 7 << FIELD 7 2 LEAF_NODE 8 2 LEAF_NODE 4 ; EXPR_STATEMENT 3 r = key -> rounds >> 1 ; EXPR 4 r = key -> rounds >> 1 ASSIGN 5 r = key -> rounds >> 1 LVAL 6 r FIELD 7 r LEAF_NODE 8 r ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 key -> rounds >> 1 FIELD 7 key -> rounds LEAF_NODE 8 key LEAF_NODE 8 -> LEAF_NODE 8 rounds LEAF_NODE 7 >> FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; LEAF_NODE 4 CONDITION LEAF_NODE 4 ; LEAF_NODE 4 FOR_EXPR LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 t0 = Te0 [ ( s0 >> 24 ) ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ ( s3 ) & 0xff ] ^ rk [ 4 ] ; EXPR 7 t0 = Te0 [ ( s0 >> 24 ) ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ ( s3 ) & 0xff ] ^ rk [ 4 ] ASSIGN 8 t0 = Te0 [ ( s0 >> 24 ) ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ ( s3 ) & 0xff ] ^ rk [ 4 ] LVAL 9 t0 FIELD 10 t0 LEAF_NODE 11 t0 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 Te0 [ ( s0 >> 24 ) ] ^ Te1 [ ( s1 >> 16 ) & 0xff ] ^ Te2 [ ( s2 >> 8 ) & 0xff ] ^ Te3 [ ( s3 ) & 0xff ] ^ rk [ 4 ] FIELD 10 Te0 [ ( s0 >> 24 ) ] LEAF_NODE 11 Te0 LEAF_NODE 11 [ EXPR 11 ( s0 >> 24 ) LEAF_NODE 12 ( FIELD 12 s0 LEAF_NODE 13 s0 LEAF_NODE 12 >> FIELD 12 24 LEAF_NODE 13 24 LEAF_NODE 12 ) LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te1 [ ( s1 >> 16 ) & 0xff ] LEAF_NODE 11 Te1 LEAF_NODE 11 [ EXPR 11 ( s1 >> 16 ) & 0xff LEAF_NODE 12 ( FIELD 12 s1 LEAF_NODE 13 s1 LEAF_NODE 12 >> FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te2 [ ( s2 >> 8 ) & 0xff ] LEAF_NODE 11 Te2 LEAF_NODE 11 [ EXPR 11 ( s2 >> 8 ) & 0xff LEAF_NODE 12 ( FIELD 12 s2 LEAF_NODE 13 s2 LEAF_NODE 12 >> FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te3 [ ( s3 ) & 0xff ] LEAF_NODE 11 Te3 LEAF_NODE 11 [ EXPR 11 ( s3 ) & 0xff LEAF_NODE 12 ( TYPE_NAME 12 s3 LEAF_NODE 13 s3 LEAF_NODE 12 ) UNARY_EXPR 12 & 0xff UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 0xff LEAF_NODE 14 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 rk [ 4 ] LEAF_NODE 11 rk LEAF_NODE 11 [ EXPR 11 4 FIELD 12 4 LEAF_NODE 13 4 LEAF_NODE 11 ] LEAF_NODE 7 ; EXPR_STATEMENT 6 t1 = Te0 [ ( s1 >> 24 ) ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ ( s0 ) & 0xff ] ^ rk [ 5 ] ; EXPR 7 t1 = Te0 [ ( s1 >> 24 ) ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ ( s0 ) & 0xff ] ^ rk [ 5 ] ASSIGN 8 t1 = Te0 [ ( s1 >> 24 ) ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ ( s0 ) & 0xff ] ^ rk [ 5 ] LVAL 9 t1 FIELD 10 t1 LEAF_NODE 11 t1 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 Te0 [ ( s1 >> 24 ) ] ^ Te1 [ ( s2 >> 16 ) & 0xff ] ^ Te2 [ ( s3 >> 8 ) & 0xff ] ^ Te3 [ ( s0 ) & 0xff ] ^ rk [ 5 ] FIELD 10 Te0 [ ( s1 >> 24 ) ] LEAF_NODE 11 Te0 LEAF_NODE 11 [ EXPR 11 ( s1 >> 24 ) LEAF_NODE 12 ( FIELD 12 s1 LEAF_NODE 13 s1 LEAF_NODE 12 >> FIELD 12 24 LEAF_NODE 13 24 LEAF_NODE 12 ) LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te1 [ ( s2 >> 16 ) & 0xff ] LEAF_NODE 11 Te1 LEAF_NODE 11 [ EXPR 11 ( s2 >> 16 ) & 0xff LEAF_NODE 12 ( FIELD 12 s2 LEAF_NODE 13 s2 LEAF_NODE 12 >> FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te2 [ ( s3 >> 8 ) & 0xff ] LEAF_NODE 11 Te2 LEAF_NODE 11 [ EXPR 11 ( s3 >> 8 ) & 0xff LEAF_NODE 12 ( FIELD 12 s3 LEAF_NODE 13 s3 LEAF_NODE 12 >> FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te3 [ ( s0 ) & 0xff ] LEAF_NODE 11 Te3 LEAF_NODE 11 [ EXPR 11 ( s0 ) & 0xff LEAF_NODE 12 ( TYPE_NAME 12 s0 LEAF_NODE 13 s0 LEAF_NODE 12 ) UNARY_EXPR 12 & 0xff UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 0xff LEAF_NODE 14 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 rk [ 5 ] LEAF_NODE 11 rk LEAF_NODE 11 [ EXPR 11 5 FIELD 12 5 LEAF_NODE 13 5 LEAF_NODE 11 ] LEAF_NODE 7 ; EXPR_STATEMENT 6 t2 = Te0 [ ( s2 >> 24 ) ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ ( s1 ) & 0xff ] ^ rk [ 6 ] ; EXPR 7 t2 = Te0 [ ( s2 >> 24 ) ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ ( s1 ) & 0xff ] ^ rk [ 6 ] ASSIGN 8 t2 = Te0 [ ( s2 >> 24 ) ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ ( s1 ) & 0xff ] ^ rk [ 6 ] LVAL 9 t2 FIELD 10 t2 LEAF_NODE 11 t2 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 Te0 [ ( s2 >> 24 ) ] ^ Te1 [ ( s3 >> 16 ) & 0xff ] ^ Te2 [ ( s0 >> 8 ) & 0xff ] ^ Te3 [ ( s1 ) & 0xff ] ^ rk [ 6 ] FIELD 10 Te0 [ ( s2 >> 24 ) ] LEAF_NODE 11 Te0 LEAF_NODE 11 [ EXPR 11 ( s2 >> 24 ) LEAF_NODE 12 ( FIELD 12 s2 LEAF_NODE 13 s2 LEAF_NODE 12 >> FIELD 12 24 LEAF_NODE 13 24 LEAF_NODE 12 ) LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te1 [ ( s3 >> 16 ) & 0xff ] LEAF_NODE 11 Te1 LEAF_NODE 11 [ EXPR 11 ( s3 >> 16 ) & 0xff LEAF_NODE 12 ( FIELD 12 s3 LEAF_NODE 13 s3 LEAF_NODE 12 >> FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te2 [ ( s0 >> 8 ) & 0xff ] LEAF_NODE 11 Te2 LEAF_NODE 11 [ EXPR 11 ( s0 >> 8 ) & 0xff LEAF_NODE 12 ( FIELD 12 s0 LEAF_NODE 13 s0 LEAF_NODE 12 >> FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te3 [ ( s1 ) & 0xff ] LEAF_NODE 11 Te3 LEAF_NODE 11 [ EXPR 11 ( s1 ) & 0xff LEAF_NODE 12 ( TYPE_NAME 12 s1 LEAF_NODE 13 s1 LEAF_NODE 12 ) UNARY_EXPR 12 & 0xff UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 0xff LEAF_NODE 14 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 rk [ 6 ] LEAF_NODE 11 rk LEAF_NODE 11 [ EXPR 11 6 FIELD 12 6 LEAF_NODE 13 6 LEAF_NODE 11 ] LEAF_NODE 7 ; EXPR_STATEMENT 6 t3 = Te0 [ ( s3 >> 24 ) ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ ( s2 ) & 0xff ] ^ rk [ 7 ] ; EXPR 7 t3 = Te0 [ ( s3 >> 24 ) ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ ( s2 ) & 0xff ] ^ rk [ 7 ] ASSIGN 8 t3 = Te0 [ ( s3 >> 24 ) ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ ( s2 ) & 0xff ] ^ rk [ 7 ] LVAL 9 t3 FIELD 10 t3 LEAF_NODE 11 t3 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 Te0 [ ( s3 >> 24 ) ] ^ Te1 [ ( s0 >> 16 ) & 0xff ] ^ Te2 [ ( s1 >> 8 ) & 0xff ] ^ Te3 [ ( s2 ) & 0xff ] ^ rk [ 7 ] FIELD 10 Te0 [ ( s3 >> 24 ) ] LEAF_NODE 11 Te0 LEAF_NODE 11 [ EXPR 11 ( s3 >> 24 ) LEAF_NODE 12 ( FIELD 12 s3 LEAF_NODE 13 s3 LEAF_NODE 12 >> FIELD 12 24 LEAF_NODE 13 24 LEAF_NODE 12 ) LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te1 [ ( s0 >> 16 ) & 0xff ] LEAF_NODE 11 Te1 LEAF_NODE 11 [ EXPR 11 ( s0 >> 16 ) & 0xff LEAF_NODE 12 ( FIELD 12 s0 LEAF_NODE 13 s0 LEAF_NODE 12 >> FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te2 [ ( s1 >> 8 ) & 0xff ] LEAF_NODE 11 Te2 LEAF_NODE 11 [ EXPR 11 ( s1 >> 8 ) & 0xff LEAF_NODE 12 ( FIELD 12 s1 LEAF_NODE 13 s1 LEAF_NODE 12 >> FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te3 [ ( s2 ) & 0xff ] LEAF_NODE 11 Te3 LEAF_NODE 11 [ EXPR 11 ( s2 ) & 0xff LEAF_NODE 12 ( TYPE_NAME 12 s2 LEAF_NODE 13 s2 LEAF_NODE 12 ) UNARY_EXPR 12 & 0xff UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 0xff LEAF_NODE 14 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 rk [ 7 ] LEAF_NODE 11 rk LEAF_NODE 11 [ EXPR 11 7 FIELD 12 7 LEAF_NODE 13 7 LEAF_NODE 11 ] LEAF_NODE 7 ; EXPR_STATEMENT 6 rk += 8 ; EXPR 7 rk += 8 ASSIGN 8 rk += 8 LVAL 9 rk FIELD 10 rk LEAF_NODE 11 rk ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 8 FIELD 10 8 LEAF_NODE 11 8 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 -- r == 0 EXPR 8 -- r == 0 LEAF_NODE 9 -- FIELD 9 r LEAF_NODE 10 r EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 s0 = Te0 [ ( t0 >> 24 ) ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ ( t3 ) & 0xff ] ^ rk [ 0 ] ; EXPR 7 s0 = Te0 [ ( t0 >> 24 ) ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ ( t3 ) & 0xff ] ^ rk [ 0 ] ASSIGN 8 s0 = Te0 [ ( t0 >> 24 ) ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ ( t3 ) & 0xff ] ^ rk [ 0 ] LVAL 9 s0 FIELD 10 s0 LEAF_NODE 11 s0 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 Te0 [ ( t0 >> 24 ) ] ^ Te1 [ ( t1 >> 16 ) & 0xff ] ^ Te2 [ ( t2 >> 8 ) & 0xff ] ^ Te3 [ ( t3 ) & 0xff ] ^ rk [ 0 ] FIELD 10 Te0 [ ( t0 >> 24 ) ] LEAF_NODE 11 Te0 LEAF_NODE 11 [ EXPR 11 ( t0 >> 24 ) LEAF_NODE 12 ( FIELD 12 t0 LEAF_NODE 13 t0 LEAF_NODE 12 >> FIELD 12 24 LEAF_NODE 13 24 LEAF_NODE 12 ) LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te1 [ ( t1 >> 16 ) & 0xff ] LEAF_NODE 11 Te1 LEAF_NODE 11 [ EXPR 11 ( t1 >> 16 ) & 0xff LEAF_NODE 12 ( FIELD 12 t1 LEAF_NODE 13 t1 LEAF_NODE 12 >> FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te2 [ ( t2 >> 8 ) & 0xff ] LEAF_NODE 11 Te2 LEAF_NODE 11 [ EXPR 11 ( t2 >> 8 ) & 0xff LEAF_NODE 12 ( FIELD 12 t2 LEAF_NODE 13 t2 LEAF_NODE 12 >> FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te3 [ ( t3 ) & 0xff ] LEAF_NODE 11 Te3 LEAF_NODE 11 [ EXPR 11 ( t3 ) & 0xff LEAF_NODE 12 ( TYPE_NAME 12 t3 LEAF_NODE 13 t3 LEAF_NODE 12 ) UNARY_EXPR 12 & 0xff UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 0xff LEAF_NODE 14 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 rk [ 0 ] LEAF_NODE 11 rk LEAF_NODE 11 [ EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ] LEAF_NODE 7 ; EXPR_STATEMENT 6 s1 = Te0 [ ( t1 >> 24 ) ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ ( t0 ) & 0xff ] ^ rk [ 1 ] ; EXPR 7 s1 = Te0 [ ( t1 >> 24 ) ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ ( t0 ) & 0xff ] ^ rk [ 1 ] ASSIGN 8 s1 = Te0 [ ( t1 >> 24 ) ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ ( t0 ) & 0xff ] ^ rk [ 1 ] LVAL 9 s1 FIELD 10 s1 LEAF_NODE 11 s1 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 Te0 [ ( t1 >> 24 ) ] ^ Te1 [ ( t2 >> 16 ) & 0xff ] ^ Te2 [ ( t3 >> 8 ) & 0xff ] ^ Te3 [ ( t0 ) & 0xff ] ^ rk [ 1 ] FIELD 10 Te0 [ ( t1 >> 24 ) ] LEAF_NODE 11 Te0 LEAF_NODE 11 [ EXPR 11 ( t1 >> 24 ) LEAF_NODE 12 ( FIELD 12 t1 LEAF_NODE 13 t1 LEAF_NODE 12 >> FIELD 12 24 LEAF_NODE 13 24 LEAF_NODE 12 ) LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te1 [ ( t2 >> 16 ) & 0xff ] LEAF_NODE 11 Te1 LEAF_NODE 11 [ EXPR 11 ( t2 >> 16 ) & 0xff LEAF_NODE 12 ( FIELD 12 t2 LEAF_NODE 13 t2 LEAF_NODE 12 >> FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te2 [ ( t3 >> 8 ) & 0xff ] LEAF_NODE 11 Te2 LEAF_NODE 11 [ EXPR 11 ( t3 >> 8 ) & 0xff LEAF_NODE 12 ( FIELD 12 t3 LEAF_NODE 13 t3 LEAF_NODE 12 >> FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te3 [ ( t0 ) & 0xff ] LEAF_NODE 11 Te3 LEAF_NODE 11 [ EXPR 11 ( t0 ) & 0xff LEAF_NODE 12 ( TYPE_NAME 12 t0 LEAF_NODE 13 t0 LEAF_NODE 12 ) UNARY_EXPR 12 & 0xff UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 0xff LEAF_NODE 14 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 rk [ 1 ] LEAF_NODE 11 rk LEAF_NODE 11 [ EXPR 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] LEAF_NODE 7 ; EXPR_STATEMENT 6 s2 = Te0 [ ( t2 >> 24 ) ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ ( t1 ) & 0xff ] ^ rk [ 2 ] ; EXPR 7 s2 = Te0 [ ( t2 >> 24 ) ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ ( t1 ) & 0xff ] ^ rk [ 2 ] ASSIGN 8 s2 = Te0 [ ( t2 >> 24 ) ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ ( t1 ) & 0xff ] ^ rk [ 2 ] LVAL 9 s2 FIELD 10 s2 LEAF_NODE 11 s2 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 Te0 [ ( t2 >> 24 ) ] ^ Te1 [ ( t3 >> 16 ) & 0xff ] ^ Te2 [ ( t0 >> 8 ) & 0xff ] ^ Te3 [ ( t1 ) & 0xff ] ^ rk [ 2 ] FIELD 10 Te0 [ ( t2 >> 24 ) ] LEAF_NODE 11 Te0 LEAF_NODE 11 [ EXPR 11 ( t2 >> 24 ) LEAF_NODE 12 ( FIELD 12 t2 LEAF_NODE 13 t2 LEAF_NODE 12 >> FIELD 12 24 LEAF_NODE 13 24 LEAF_NODE 12 ) LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te1 [ ( t3 >> 16 ) & 0xff ] LEAF_NODE 11 Te1 LEAF_NODE 11 [ EXPR 11 ( t3 >> 16 ) & 0xff LEAF_NODE 12 ( FIELD 12 t3 LEAF_NODE 13 t3 LEAF_NODE 12 >> FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te2 [ ( t0 >> 8 ) & 0xff ] LEAF_NODE 11 Te2 LEAF_NODE 11 [ EXPR 11 ( t0 >> 8 ) & 0xff LEAF_NODE 12 ( FIELD 12 t0 LEAF_NODE 13 t0 LEAF_NODE 12 >> FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te3 [ ( t1 ) & 0xff ] LEAF_NODE 11 Te3 LEAF_NODE 11 [ EXPR 11 ( t1 ) & 0xff LEAF_NODE 12 ( TYPE_NAME 12 t1 LEAF_NODE 13 t1 LEAF_NODE 12 ) UNARY_EXPR 12 & 0xff UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 0xff LEAF_NODE 14 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 rk [ 2 ] LEAF_NODE 11 rk LEAF_NODE 11 [ EXPR 11 2 FIELD 12 2 LEAF_NODE 13 2 LEAF_NODE 11 ] LEAF_NODE 7 ; EXPR_STATEMENT 6 s3 = Te0 [ ( t3 >> 24 ) ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ ( t2 ) & 0xff ] ^ rk [ 3 ] ; EXPR 7 s3 = Te0 [ ( t3 >> 24 ) ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ ( t2 ) & 0xff ] ^ rk [ 3 ] ASSIGN 8 s3 = Te0 [ ( t3 >> 24 ) ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ ( t2 ) & 0xff ] ^ rk [ 3 ] LVAL 9 s3 FIELD 10 s3 LEAF_NODE 11 s3 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 Te0 [ ( t3 >> 24 ) ] ^ Te1 [ ( t0 >> 16 ) & 0xff ] ^ Te2 [ ( t1 >> 8 ) & 0xff ] ^ Te3 [ ( t2 ) & 0xff ] ^ rk [ 3 ] FIELD 10 Te0 [ ( t3 >> 24 ) ] LEAF_NODE 11 Te0 LEAF_NODE 11 [ EXPR 11 ( t3 >> 24 ) LEAF_NODE 12 ( FIELD 12 t3 LEAF_NODE 13 t3 LEAF_NODE 12 >> FIELD 12 24 LEAF_NODE 13 24 LEAF_NODE 12 ) LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te1 [ ( t0 >> 16 ) & 0xff ] LEAF_NODE 11 Te1 LEAF_NODE 11 [ EXPR 11 ( t0 >> 16 ) & 0xff LEAF_NODE 12 ( FIELD 12 t0 LEAF_NODE 13 t0 LEAF_NODE 12 >> FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te2 [ ( t1 >> 8 ) & 0xff ] LEAF_NODE 11 Te2 LEAF_NODE 11 [ EXPR 11 ( t1 >> 8 ) & 0xff LEAF_NODE 12 ( FIELD 12 t1 LEAF_NODE 13 t1 LEAF_NODE 12 >> FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 ) LEAF_NODE 12 & FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 Te3 [ ( t2 ) & 0xff ] LEAF_NODE 11 Te3 LEAF_NODE 11 [ EXPR 11 ( t2 ) & 0xff LEAF_NODE 12 ( TYPE_NAME 12 t2 LEAF_NODE 13 t2 LEAF_NODE 12 ) UNARY_EXPR 12 & 0xff UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 0xff LEAF_NODE 14 0xff LEAF_NODE 11 ] LEAF_NODE 10 ^ FIELD 10 rk [ 3 ] LEAF_NODE 11 rk LEAF_NODE 11 [ EXPR 11 3 FIELD 12 3 LEAF_NODE 13 3 LEAF_NODE 11 ] LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 s0 = ( Te2 [ ( t0 >> 24 ) ] & 0xff000000 ) ^ ( Te3 [ ( t1 >> 16 ) & 0xff ] & 0x00ff0000 ) ^ ( Te0 [ ( t2 >> 8 ) & 0xff ] & 0x0000ff00 ) ^ ( Te1 [ ( t3 ) & 0xff ] & 0x000000ff ) ^ rk [ 0 ] ; EXPR 4 s0 = ( Te2 [ ( t0 >> 24 ) ] & 0xff000000 ) ^ ( Te3 [ ( t1 >> 16 ) & 0xff ] & 0x00ff0000 ) ^ ( Te0 [ ( t2 >> 8 ) & 0xff ] & 0x0000ff00 ) ^ ( Te1 [ ( t3 ) & 0xff ] & 0x000000ff ) ^ rk [ 0 ] ASSIGN 5 s0 = ( Te2 [ ( t0 >> 24 ) ] & 0xff000000 ) ^ ( Te3 [ ( t1 >> 16 ) & 0xff ] & 0x00ff0000 ) ^ ( Te0 [ ( t2 >> 8 ) & 0xff ] & 0x0000ff00 ) ^ ( Te1 [ ( t3 ) & 0xff ] & 0x000000ff ) ^ rk [ 0 ] LVAL 6 s0 FIELD 7 s0 LEAF_NODE 8 s0 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( Te2 [ ( t0 >> 24 ) ] & 0xff000000 ) ^ ( Te3 [ ( t1 >> 16 ) & 0xff ] & 0x00ff0000 ) ^ ( Te0 [ ( t2 >> 8 ) & 0xff ] & 0x0000ff00 ) ^ ( Te1 [ ( t3 ) & 0xff ] & 0x000000ff ) ^ rk [ 0 ] LEAF_NODE 7 ( FIELD 7 Te2 [ ( t0 >> 24 ) ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t0 >> 24 ) LEAF_NODE 9 ( FIELD 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 9 ) LEAF_NODE 8 ] LEAF_NODE 7 & FIELD 7 0xff000000 LEAF_NODE 8 0xff000000 LEAF_NODE 7 ) LEAF_NODE 7 ^ LEAF_NODE 7 ( FIELD 7 Te3 [ ( t1 >> 16 ) & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 ( t1 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 & FIELD 7 0x00ff0000 LEAF_NODE 8 0x00ff0000 LEAF_NODE 7 ) LEAF_NODE 7 ^ LEAF_NODE 7 ( FIELD 7 Te0 [ ( t2 >> 8 ) & 0xff ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 ( t2 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 & FIELD 7 0x0000ff00 LEAF_NODE 8 0x0000ff00 LEAF_NODE 7 ) LEAF_NODE 7 ^ LEAF_NODE 7 ( FIELD 7 Te1 [ ( t3 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t3 ) & 0xff LEAF_NODE 9 ( TYPE_NAME 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 ) UNARY_EXPR 9 & 0xff UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 0xff LEAF_NODE 11 0xff LEAF_NODE 8 ] LEAF_NODE 7 & FIELD 7 0x000000ff LEAF_NODE 8 0x000000ff LEAF_NODE 7 ) LEAF_NODE 7 ^ FIELD 7 rk [ 0 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 PUTU32 ( out , s0 ) ; EXPR 4 PUTU32 ( out , s0 ) FUNCTION_CALL 5 PUTU32 ( out , s0 ) CALLEE 6 PUTU32 LEAF_NODE 7 PUTU32 LEAF_NODE 6 ( ARGUMENT 6 out FIELD 7 out LEAF_NODE 8 out LEAF_NODE 6 , ARGUMENT 6 s0 FIELD 7 s0 LEAF_NODE 8 s0 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 s1 = ( Te2 [ ( t1 >> 24 ) ] & 0xff000000 ) ^ ( Te3 [ ( t2 >> 16 ) & 0xff ] & 0x00ff0000 ) ^ ( Te0 [ ( t3 >> 8 ) & 0xff ] & 0x0000ff00 ) ^ ( Te1 [ ( t0 ) & 0xff ] & 0x000000ff ) ^ rk [ 1 ] ; EXPR 4 s1 = ( Te2 [ ( t1 >> 24 ) ] & 0xff000000 ) ^ ( Te3 [ ( t2 >> 16 ) & 0xff ] & 0x00ff0000 ) ^ ( Te0 [ ( t3 >> 8 ) & 0xff ] & 0x0000ff00 ) ^ ( Te1 [ ( t0 ) & 0xff ] & 0x000000ff ) ^ rk [ 1 ] ASSIGN 5 s1 = ( Te2 [ ( t1 >> 24 ) ] & 0xff000000 ) ^ ( Te3 [ ( t2 >> 16 ) & 0xff ] & 0x00ff0000 ) ^ ( Te0 [ ( t3 >> 8 ) & 0xff ] & 0x0000ff00 ) ^ ( Te1 [ ( t0 ) & 0xff ] & 0x000000ff ) ^ rk [ 1 ] LVAL 6 s1 FIELD 7 s1 LEAF_NODE 8 s1 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( Te2 [ ( t1 >> 24 ) ] & 0xff000000 ) ^ ( Te3 [ ( t2 >> 16 ) & 0xff ] & 0x00ff0000 ) ^ ( Te0 [ ( t3 >> 8 ) & 0xff ] & 0x0000ff00 ) ^ ( Te1 [ ( t0 ) & 0xff ] & 0x000000ff ) ^ rk [ 1 ] LEAF_NODE 7 ( FIELD 7 Te2 [ ( t1 >> 24 ) ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t1 >> 24 ) LEAF_NODE 9 ( FIELD 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 9 ) LEAF_NODE 8 ] LEAF_NODE 7 & FIELD 7 0xff000000 LEAF_NODE 8 0xff000000 LEAF_NODE 7 ) LEAF_NODE 7 ^ LEAF_NODE 7 ( FIELD 7 Te3 [ ( t2 >> 16 ) & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 ( t2 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 & FIELD 7 0x00ff0000 LEAF_NODE 8 0x00ff0000 LEAF_NODE 7 ) LEAF_NODE 7 ^ LEAF_NODE 7 ( FIELD 7 Te0 [ ( t3 >> 8 ) & 0xff ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 ( t3 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 & FIELD 7 0x0000ff00 LEAF_NODE 8 0x0000ff00 LEAF_NODE 7 ) LEAF_NODE 7 ^ LEAF_NODE 7 ( FIELD 7 Te1 [ ( t0 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t0 ) & 0xff LEAF_NODE 9 ( TYPE_NAME 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 ) UNARY_EXPR 9 & 0xff UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 0xff LEAF_NODE 11 0xff LEAF_NODE 8 ] LEAF_NODE 7 & FIELD 7 0x000000ff LEAF_NODE 8 0x000000ff LEAF_NODE 7 ) LEAF_NODE 7 ^ FIELD 7 rk [ 1 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 PUTU32 ( out + 4 , s1 ) ; EXPR 4 PUTU32 ( out + 4 , s1 ) FUNCTION_CALL 5 PUTU32 ( out + 4 , s1 ) CALLEE 6 PUTU32 LEAF_NODE 7 PUTU32 LEAF_NODE 6 ( ARGUMENT 6 out + 4 FIELD 7 out LEAF_NODE 8 out LEAF_NODE 7 + FIELD 7 4 LEAF_NODE 8 4 LEAF_NODE 6 , ARGUMENT 6 s1 FIELD 7 s1 LEAF_NODE 8 s1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 s2 = ( Te2 [ ( t2 >> 24 ) ] & 0xff000000 ) ^ ( Te3 [ ( t3 >> 16 ) & 0xff ] & 0x00ff0000 ) ^ ( Te0 [ ( t0 >> 8 ) & 0xff ] & 0x0000ff00 ) ^ ( Te1 [ ( t1 ) & 0xff ] & 0x000000ff ) ^ rk [ 2 ] ; EXPR 4 s2 = ( Te2 [ ( t2 >> 24 ) ] & 0xff000000 ) ^ ( Te3 [ ( t3 >> 16 ) & 0xff ] & 0x00ff0000 ) ^ ( Te0 [ ( t0 >> 8 ) & 0xff ] & 0x0000ff00 ) ^ ( Te1 [ ( t1 ) & 0xff ] & 0x000000ff ) ^ rk [ 2 ] ASSIGN 5 s2 = ( Te2 [ ( t2 >> 24 ) ] & 0xff000000 ) ^ ( Te3 [ ( t3 >> 16 ) & 0xff ] & 0x00ff0000 ) ^ ( Te0 [ ( t0 >> 8 ) & 0xff ] & 0x0000ff00 ) ^ ( Te1 [ ( t1 ) & 0xff ] & 0x000000ff ) ^ rk [ 2 ] LVAL 6 s2 FIELD 7 s2 LEAF_NODE 8 s2 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( Te2 [ ( t2 >> 24 ) ] & 0xff000000 ) ^ ( Te3 [ ( t3 >> 16 ) & 0xff ] & 0x00ff0000 ) ^ ( Te0 [ ( t0 >> 8 ) & 0xff ] & 0x0000ff00 ) ^ ( Te1 [ ( t1 ) & 0xff ] & 0x000000ff ) ^ rk [ 2 ] LEAF_NODE 7 ( FIELD 7 Te2 [ ( t2 >> 24 ) ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t2 >> 24 ) LEAF_NODE 9 ( FIELD 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 9 ) LEAF_NODE 8 ] LEAF_NODE 7 & FIELD 7 0xff000000 LEAF_NODE 8 0xff000000 LEAF_NODE 7 ) LEAF_NODE 7 ^ LEAF_NODE 7 ( FIELD 7 Te3 [ ( t3 >> 16 ) & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 ( t3 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 & FIELD 7 0x00ff0000 LEAF_NODE 8 0x00ff0000 LEAF_NODE 7 ) LEAF_NODE 7 ^ LEAF_NODE 7 ( FIELD 7 Te0 [ ( t0 >> 8 ) & 0xff ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 ( t0 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 & FIELD 7 0x0000ff00 LEAF_NODE 8 0x0000ff00 LEAF_NODE 7 ) LEAF_NODE 7 ^ LEAF_NODE 7 ( FIELD 7 Te1 [ ( t1 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t1 ) & 0xff LEAF_NODE 9 ( TYPE_NAME 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 ) UNARY_EXPR 9 & 0xff UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 0xff LEAF_NODE 11 0xff LEAF_NODE 8 ] LEAF_NODE 7 & FIELD 7 0x000000ff LEAF_NODE 8 0x000000ff LEAF_NODE 7 ) LEAF_NODE 7 ^ FIELD 7 rk [ 2 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 PUTU32 ( out + 8 , s2 ) ; EXPR 4 PUTU32 ( out + 8 , s2 ) FUNCTION_CALL 5 PUTU32 ( out + 8 , s2 ) CALLEE 6 PUTU32 LEAF_NODE 7 PUTU32 LEAF_NODE 6 ( ARGUMENT 6 out + 8 FIELD 7 out LEAF_NODE 8 out LEAF_NODE 7 + FIELD 7 8 LEAF_NODE 8 8 LEAF_NODE 6 , ARGUMENT 6 s2 FIELD 7 s2 LEAF_NODE 8 s2 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 s3 = ( Te2 [ ( t3 >> 24 ) ] & 0xff000000 ) ^ ( Te3 [ ( t0 >> 16 ) & 0xff ] & 0x00ff0000 ) ^ ( Te0 [ ( t1 >> 8 ) & 0xff ] & 0x0000ff00 ) ^ ( Te1 [ ( t2 ) & 0xff ] & 0x000000ff ) ^ rk [ 3 ] ; EXPR 4 s3 = ( Te2 [ ( t3 >> 24 ) ] & 0xff000000 ) ^ ( Te3 [ ( t0 >> 16 ) & 0xff ] & 0x00ff0000 ) ^ ( Te0 [ ( t1 >> 8 ) & 0xff ] & 0x0000ff00 ) ^ ( Te1 [ ( t2 ) & 0xff ] & 0x000000ff ) ^ rk [ 3 ] ASSIGN 5 s3 = ( Te2 [ ( t3 >> 24 ) ] & 0xff000000 ) ^ ( Te3 [ ( t0 >> 16 ) & 0xff ] & 0x00ff0000 ) ^ ( Te0 [ ( t1 >> 8 ) & 0xff ] & 0x0000ff00 ) ^ ( Te1 [ ( t2 ) & 0xff ] & 0x000000ff ) ^ rk [ 3 ] LVAL 6 s3 FIELD 7 s3 LEAF_NODE 8 s3 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( Te2 [ ( t3 >> 24 ) ] & 0xff000000 ) ^ ( Te3 [ ( t0 >> 16 ) & 0xff ] & 0x00ff0000 ) ^ ( Te0 [ ( t1 >> 8 ) & 0xff ] & 0x0000ff00 ) ^ ( Te1 [ ( t2 ) & 0xff ] & 0x000000ff ) ^ rk [ 3 ] LEAF_NODE 7 ( FIELD 7 Te2 [ ( t3 >> 24 ) ] LEAF_NODE 8 Te2 LEAF_NODE 8 [ EXPR 8 ( t3 >> 24 ) LEAF_NODE 9 ( FIELD 9 t3 LEAF_NODE 10 t3 LEAF_NODE 9 >> FIELD 9 24 LEAF_NODE 10 24 LEAF_NODE 9 ) LEAF_NODE 8 ] LEAF_NODE 7 & FIELD 7 0xff000000 LEAF_NODE 8 0xff000000 LEAF_NODE 7 ) LEAF_NODE 7 ^ LEAF_NODE 7 ( FIELD 7 Te3 [ ( t0 >> 16 ) & 0xff ] LEAF_NODE 8 Te3 LEAF_NODE 8 [ EXPR 8 ( t0 >> 16 ) & 0xff LEAF_NODE 9 ( FIELD 9 t0 LEAF_NODE 10 t0 LEAF_NODE 9 >> FIELD 9 16 LEAF_NODE 10 16 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 & FIELD 7 0x00ff0000 LEAF_NODE 8 0x00ff0000 LEAF_NODE 7 ) LEAF_NODE 7 ^ LEAF_NODE 7 ( FIELD 7 Te0 [ ( t1 >> 8 ) & 0xff ] LEAF_NODE 8 Te0 LEAF_NODE 8 [ EXPR 8 ( t1 >> 8 ) & 0xff LEAF_NODE 9 ( FIELD 9 t1 LEAF_NODE 10 t1 LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 9 & FIELD 9 0xff LEAF_NODE 10 0xff LEAF_NODE 8 ] LEAF_NODE 7 & FIELD 7 0x0000ff00 LEAF_NODE 8 0x0000ff00 LEAF_NODE 7 ) LEAF_NODE 7 ^ LEAF_NODE 7 ( FIELD 7 Te1 [ ( t2 ) & 0xff ] LEAF_NODE 8 Te1 LEAF_NODE 8 [ EXPR 8 ( t2 ) & 0xff LEAF_NODE 9 ( TYPE_NAME 9 t2 LEAF_NODE 10 t2 LEAF_NODE 9 ) UNARY_EXPR 9 & 0xff UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 0xff LEAF_NODE 11 0xff LEAF_NODE 8 ] LEAF_NODE 7 & FIELD 7 0x000000ff LEAF_NODE 8 0x000000ff LEAF_NODE 7 ) LEAF_NODE 7 ^ FIELD 7 rk [ 3 ] LEAF_NODE 8 rk LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 PUTU32 ( out + 12 , s3 ) ; EXPR 4 PUTU32 ( out + 12 , s3 ) FUNCTION_CALL 5 PUTU32 ( out + 12 , s3 ) CALLEE 6 PUTU32 LEAF_NODE 7 PUTU32 LEAF_NODE 6 ( ARGUMENT 6 out + 12 FIELD 7 out LEAF_NODE 8 out LEAF_NODE 7 + FIELD 7 12 LEAF_NODE 8 12 LEAF_NODE 6 , ARGUMENT 6 s3 FIELD 7 s3 LEAF_NODE 8 s3 LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 101, "project": "openssl_ast_normal_function_test_99", "target": 0}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 const struct sockaddr * TYPE_NAME 3 const struct sockaddr LEAF_NODE 4 const LEAF_NODE 4 struct LEAF_NODE 4 sockaddr LEAF_NODE 3 * FUNCTION_NAME 2 BIO_ADDR_sockaddr LEAF_NODE 3 BIO_ADDR_sockaddr PARAMETER_LIST 2 ( const BIO_ADDR * ap ) LEAF_NODE 3 ( PARAMETER_DECL 3 const BIO_ADDR * ap TYPE 4 const BIO_ADDR * TYPE_NAME 5 const BIO_ADDR LEAF_NODE 6 const LEAF_NODE 6 BIO_ADDR POINTER 5 * LEAF_NODE 6 * NAME 4 ap LEAF_NODE 5 ap LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return & ( ap -> sa ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 & ( ap -> sa ) EXPR 5 & ( ap -> sa ) UNARY_EXPR 6 & ( ap -> sa ) UNARY_OPERATOR 7 & LEAF_NODE 8 & LEAF_NODE 7 ( FIELD 7 ap -> sa LEAF_NODE 8 ap LEAF_NODE 8 -> LEAF_NODE 8 sa LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 102, "project": "openssl_ast_normal_function_test_84", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 const char * TYPE_NAME 3 const char LEAF_NODE 4 const LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 BF_options LEAF_NODE 3 BF_options PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return \"blowfish(ptr)\" ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 \"blowfish(ptr)\" EXPR 5 \"blowfish(ptr)\" FIELD 6 \"blowfish(ptr)\" LEAF_NODE 7 \"blowfish(ptr)\" LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 103, "project": "openssl_ast_normal_function_test_115", "target": 0}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } ; CLASS_DEF 2 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } CLASS_DEF 3 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } LEAF_NODE 4 struct CLASS_NAME 4 bio_addrinfo_st LEAF_NODE 5 bio_addrinfo_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; SIMPLE_DECL 5 int bai_family ; VAR_DECL 6 int bai_family TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_family LEAF_NODE 8 bai_family LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_socktype ; VAR_DECL 6 int bai_socktype TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_socktype LEAF_NODE 8 bai_socktype LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_protocol ; VAR_DECL 6 int bai_protocol TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_protocol LEAF_NODE 8 bai_protocol LEAF_NODE 6 ; SIMPLE_DECL 5 size_t bai_addrlen ; VAR_DECL 6 size_t bai_addrlen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 bai_addrlen LEAF_NODE 8 bai_addrlen LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr * bai_addr ; VAR_DECL 6 struct sockaddr * bai_addr TYPE 7 struct sockaddr * TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr POINTER 8 * LEAF_NODE 9 * NAME 7 bai_addr LEAF_NODE 8 bai_addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct bio_addrinfo_st * bai_next ; VAR_DECL 6 struct bio_addrinfo_st * bai_next TYPE 7 struct bio_addrinfo_st * TYPE_NAME 8 struct bio_addrinfo_st LEAF_NODE 9 struct LEAF_NODE 9 bio_addrinfo_st POINTER 8 * LEAF_NODE 9 * NAME 7 bai_next LEAF_NODE 8 bai_next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BIO_ADDRINFO ; VAR_DECL 2 struct bio_addrinfo_st BIO_ADDRINFO TYPE 3 struct bio_addrinfo_st TYPE_NAME 4 struct bio_addrinfo_st LEAF_NODE 5 struct LEAF_NODE 5 bio_addrinfo_st NAME 3 BIO_ADDRINFO LEAF_NODE 4 BIO_ADDRINFO LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t socklen_t ; VAR_DECL 2 uint32_t socklen_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 socklen_t LEAF_NODE 4 socklen_t LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 BIO_lookup_ex LEAF_NODE 3 BIO_lookup_ex PARAMETER_LIST 2 ( const char * host , const char * service , int lookup_type , int family , int socktype , int protocol , BIO_ADDRINFO * * res ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * host TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 host LEAF_NODE 5 host LEAF_NODE 3 , PARAMETER_DECL 3 const char * service TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 service LEAF_NODE 5 service LEAF_NODE 3 , PARAMETER_DECL 3 int lookup_type TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 lookup_type LEAF_NODE 5 lookup_type LEAF_NODE 3 , PARAMETER_DECL 3 int family TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 family LEAF_NODE 5 family LEAF_NODE 3 , PARAMETER_DECL 3 int socktype TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 socktype LEAF_NODE 5 socktype LEAF_NODE 3 , PARAMETER_DECL 3 int protocol TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 protocol LEAF_NODE 5 protocol LEAF_NODE 3 , PARAMETER_DECL 3 BIO_ADDRINFO * * res TYPE 4 BIO_ADDRINFO * * TYPE_NAME 5 BIO_ADDRINFO LEAF_NODE 6 BIO_ADDRINFO POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 res LEAF_NODE 5 res LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int ret ; ret = 0 ; VAR_DECL 4 int ret ; ret = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 5 ; INIT 5 ret = 0 ASSIGN 6 ret = 0 LVAL 7 ret NAME 8 ret LEAF_NODE 9 ret ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 family EXPR 5 family FIELD 6 family LEAF_NODE 7 family LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case AF_INET : LEAF_NODE 7 case LEAF_NODE 7 AF_INET LEAF_NODE 7 : LABEL 6 case AF_INET6 : LEAF_NODE 7 case LEAF_NODE 7 AF_INET6 LEAF_NODE 7 : LABEL 6 case AF_UNIX : LEAF_NODE 7 case LEAF_NODE 7 AF_UNIX LEAF_NODE 7 : LABEL 6 case AF_UNSPEC : LEAF_NODE 7 case LEAF_NODE 7 AF_UNSPEC LEAF_NODE 7 : JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 BIOerr ( BIO_F_BIO_LOOKUP_EX , BIO_R_UNSUPPORTED_PROTOCOL_FAMILY ) ; EXPR 7 BIOerr ( BIO_F_BIO_LOOKUP_EX , BIO_R_UNSUPPORTED_PROTOCOL_FAMILY ) FUNCTION_CALL 8 BIOerr ( BIO_F_BIO_LOOKUP_EX , BIO_R_UNSUPPORTED_PROTOCOL_FAMILY ) CALLEE 9 BIOerr LEAF_NODE 10 BIOerr LEAF_NODE 9 ( ARGUMENT 9 BIO_F_BIO_LOOKUP_EX FIELD 10 BIO_F_BIO_LOOKUP_EX LEAF_NODE 11 BIO_F_BIO_LOOKUP_EX LEAF_NODE 9 , ARGUMENT 9 BIO_R_UNSUPPORTED_PROTOCOL_FAMILY FIELD 10 BIO_R_UNSUPPORTED_PROTOCOL_FAMILY LEAF_NODE 11 BIO_R_UNSUPPORTED_PROTOCOL_FAMILY LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 family == AF_UNIX EXPR 5 family == AF_UNIX FIELD 6 family LEAF_NODE 7 family EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 AF_UNIX LEAF_NODE 7 AF_UNIX LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 addrinfo_wrap ( family , socktype , host , strlen ( host ) , 0 , res ) EXPR 8 addrinfo_wrap ( family , socktype , host , strlen ( host ) , 0 , res ) FUNCTION_CALL 9 addrinfo_wrap ( family , socktype , host , strlen ( host ) , 0 , res ) CALLEE 10 addrinfo_wrap LEAF_NODE 11 addrinfo_wrap LEAF_NODE 10 ( ARGUMENT 10 family FIELD 11 family LEAF_NODE 12 family LEAF_NODE 10 , ARGUMENT 10 socktype FIELD 11 socktype LEAF_NODE 12 socktype LEAF_NODE 10 , ARGUMENT 10 host FIELD 11 host LEAF_NODE 12 host LEAF_NODE 10 , ARGUMENT 10 strlen ( host ) FUNCTION_CALL 11 strlen ( host ) CALLEE 12 strlen LEAF_NODE 13 strlen LEAF_NODE 12 ( ARGUMENT 12 host FIELD 13 host LEAF_NODE 14 host LEAF_NODE 12 ) LEAF_NODE 10 , ARGUMENT 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 , ARGUMENT 10 res FIELD 11 res LEAF_NODE 12 res LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return 1 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 1 EXPR 10 1 FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 EXPR_STATEMENT 8 BIOerr ( BIO_F_BIO_LOOKUP_EX , ERR_R_MALLOC_FAILURE ) ; EXPR 9 BIOerr ( BIO_F_BIO_LOOKUP_EX , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 10 BIOerr ( BIO_F_BIO_LOOKUP_EX , ERR_R_MALLOC_FAILURE ) CALLEE 11 BIOerr LEAF_NODE 12 BIOerr LEAF_NODE 11 ( ARGUMENT 11 BIO_F_BIO_LOOKUP_EX FIELD 12 BIO_F_BIO_LOOKUP_EX LEAF_NODE 13 BIO_F_BIO_LOOKUP_EX LEAF_NODE 11 , ARGUMENT 11 ERR_R_MALLOC_FAILURE FIELD 12 ERR_R_MALLOC_FAILURE LEAF_NODE 13 ERR_R_MALLOC_FAILURE LEAF_NODE 11 ) LEAF_NODE 9 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 BIO_sock_init ( ) != 1 EXPR 5 BIO_sock_init ( ) != 1 FUNCTION_CALL 6 BIO_sock_init ( ) CALLEE 7 BIO_sock_init LEAF_NODE 8 BIO_sock_init LEAF_NODE 7 ( LEAF_NODE 7 ) EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int gai_ret ; gai_ret = 0 ; VAR_DECL 7 int gai_ret ; gai_ret = 0 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 gai_ret LEAF_NODE 9 gai_ret LEAF_NODE 8 ; INIT 8 gai_ret = 0 ASSIGN 9 gai_ret = 0 LVAL 10 gai_ret NAME 11 gai_ret LEAF_NODE 12 gai_ret ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ; SIMPLE_DECL 6 struct addrinfo hints ; VAR_DECL 7 struct addrinfo hints TYPE 8 struct addrinfo TYPE_NAME 9 struct addrinfo LEAF_NODE 10 struct LEAF_NODE 10 addrinfo NAME 8 hints LEAF_NODE 9 hints LEAF_NODE 7 ; EXPR_STATEMENT 6 memset ( & hints , 0 , sizeof ( hints ) ) ; EXPR 7 memset ( & hints , 0 , sizeof ( hints ) ) FUNCTION_CALL 8 memset ( & hints , 0 , sizeof ( hints ) ) CALLEE 9 memset LEAF_NODE 10 memset LEAF_NODE 9 ( ARGUMENT 9 & hints UNARY_EXPR 10 & hints UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 hints LEAF_NODE 12 hints LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 , ARGUMENT 9 sizeof ( hints ) FUNCTION_CALL 10 sizeof ( hints ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 hints FIELD 12 hints LEAF_NODE 13 hints LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 hints . ai_family = family ; EXPR 7 hints . ai_family = family ASSIGN 8 hints . ai_family = family LVAL 9 hints . ai_family FIELD 10 hints . ai_family LEAF_NODE 11 hints LEAF_NODE 11 . LEAF_NODE 11 ai_family ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 family FIELD 10 family LEAF_NODE 11 family LEAF_NODE 7 ; EXPR_STATEMENT 6 hints . ai_socktype = socktype ; EXPR 7 hints . ai_socktype = socktype ASSIGN 8 hints . ai_socktype = socktype LVAL 9 hints . ai_socktype FIELD 10 hints . ai_socktype LEAF_NODE 11 hints LEAF_NODE 11 . LEAF_NODE 11 ai_socktype ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 socktype FIELD 10 socktype LEAF_NODE 11 socktype LEAF_NODE 7 ; EXPR_STATEMENT 6 hints . ai_protocol = protocol ; EXPR 7 hints . ai_protocol = protocol ASSIGN 8 hints . ai_protocol = protocol LVAL 9 hints . ai_protocol FIELD 10 hints . ai_protocol LEAF_NODE 11 hints LEAF_NODE 11 . LEAF_NODE 11 ai_protocol ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 protocol FIELD 10 protocol LEAF_NODE 11 protocol LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 lookup_type == BIO_LOOKUP_SERVER EXPR 8 lookup_type == BIO_LOOKUP_SERVER FIELD 9 lookup_type LEAF_NODE 10 lookup_type EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 BIO_LOOKUP_SERVER LEAF_NODE 10 BIO_LOOKUP_SERVER LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 hints . ai_flags |= AI_PASSIVE ; EXPR 9 hints . ai_flags |= AI_PASSIVE ASSIGN 10 hints . ai_flags |= AI_PASSIVE LVAL 11 hints . ai_flags FIELD 12 hints . ai_flags LEAF_NODE 13 hints LEAF_NODE 13 . LEAF_NODE 13 ai_flags ASSIGN_OP 11 |= LEAF_NODE 12 |= RVAL 11 AI_PASSIVE FIELD 12 AI_PASSIVE LEAF_NODE 13 AI_PASSIVE LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 switch LEAF_NODE 8 switch LEAF_NODE 7 ( CONDITION 7 ( gai_ret = getaddrinfo ( host , service , & hints , res ) ) EXPR 8 ( gai_ret = getaddrinfo ( host , service , & hints , res ) ) LEAF_NODE 9 ( ASSIGN 9 gai_ret = getaddrinfo ( host , service , & hints , res ) LVAL 10 gai_ret FIELD 11 gai_ret LEAF_NODE 12 gai_ret ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 getaddrinfo ( host , service , & hints , res ) FUNCTION_CALL 11 getaddrinfo ( host , service , & hints , res ) CALLEE 12 getaddrinfo LEAF_NODE 13 getaddrinfo LEAF_NODE 12 ( ARGUMENT 12 host FIELD 13 host LEAF_NODE 14 host LEAF_NODE 12 , ARGUMENT 12 service FIELD 13 service LEAF_NODE 14 service LEAF_NODE 12 , ARGUMENT 12 & hints UNARY_EXPR 13 & hints UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 hints LEAF_NODE 15 hints LEAF_NODE 12 , ARGUMENT 12 res FIELD 13 res LEAF_NODE 14 res LEAF_NODE 12 ) LEAF_NODE 9 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 LABEL 9 case EAI_SYSTEM : LEAF_NODE 10 case LEAF_NODE 10 EAI_SYSTEM LEAF_NODE 10 : EXPR_STATEMENT 9 SYSerr ( SYS_F_GETADDRINFO , get_last_socket_error ( ) ) ; EXPR 10 SYSerr ( SYS_F_GETADDRINFO , get_last_socket_error ( ) ) FUNCTION_CALL 11 SYSerr ( SYS_F_GETADDRINFO , get_last_socket_error ( ) ) CALLEE 12 SYSerr LEAF_NODE 13 SYSerr LEAF_NODE 12 ( ARGUMENT 12 SYS_F_GETADDRINFO FIELD 13 SYS_F_GETADDRINFO LEAF_NODE 14 SYS_F_GETADDRINFO LEAF_NODE 12 , ARGUMENT 12 get_last_socket_error ( ) FUNCTION_CALL 13 get_last_socket_error ( ) CALLEE 14 get_last_socket_error LEAF_NODE 15 get_last_socket_error LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 BIOerr ( BIO_F_BIO_LOOKUP_EX , ERR_R_SYS_LIB ) ; EXPR 10 BIOerr ( BIO_F_BIO_LOOKUP_EX , ERR_R_SYS_LIB ) FUNCTION_CALL 11 BIOerr ( BIO_F_BIO_LOOKUP_EX , ERR_R_SYS_LIB ) CALLEE 12 BIOerr LEAF_NODE 13 BIOerr LEAF_NODE 12 ( ARGUMENT 12 BIO_F_BIO_LOOKUP_EX FIELD 13 BIO_F_BIO_LOOKUP_EX LEAF_NODE 14 BIO_F_BIO_LOOKUP_EX LEAF_NODE 12 , ARGUMENT 12 ERR_R_SYS_LIB FIELD 13 ERR_R_SYS_LIB LEAF_NODE 14 ERR_R_SYS_LIB LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case 0 : LEAF_NODE 10 case LEAF_NODE 10 0 LEAF_NODE 10 : EXPR_STATEMENT 9 ret = 1 ; EXPR 10 ret = 1 ASSIGN 11 ret = 1 LVAL 12 ret FIELD 13 ret LEAF_NODE 14 ret ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 default : LEAF_NODE 10 default LEAF_NODE 10 : EXPR_STATEMENT 9 BIOerr ( BIO_F_BIO_LOOKUP_EX , ERR_R_SYS_LIB ) ; EXPR 10 BIOerr ( BIO_F_BIO_LOOKUP_EX , ERR_R_SYS_LIB ) FUNCTION_CALL 11 BIOerr ( BIO_F_BIO_LOOKUP_EX , ERR_R_SYS_LIB ) CALLEE 12 BIOerr LEAF_NODE 13 BIOerr LEAF_NODE 12 ( ARGUMENT 12 BIO_F_BIO_LOOKUP_EX FIELD 13 BIO_F_BIO_LOOKUP_EX LEAF_NODE 14 BIO_F_BIO_LOOKUP_EX LEAF_NODE 12 , ARGUMENT 12 ERR_R_SYS_LIB FIELD 13 ERR_R_SYS_LIB LEAF_NODE 14 ERR_R_SYS_LIB LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ERR_add_error_data ( 1 , gai_strerror ( gai_ret ) ) ; EXPR 10 ERR_add_error_data ( 1 , gai_strerror ( gai_ret ) ) FUNCTION_CALL 11 ERR_add_error_data ( 1 , gai_strerror ( gai_ret ) ) CALLEE 12 ERR_add_error_data LEAF_NODE 13 ERR_add_error_data LEAF_NODE 12 ( ARGUMENT 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 , ARGUMENT 12 gai_strerror ( gai_ret ) FUNCTION_CALL 13 gai_strerror ( gai_ret ) CALLEE 14 gai_strerror LEAF_NODE 15 gai_strerror LEAF_NODE 14 ( ARGUMENT 14 gai_ret FIELD 15 gai_ret LEAF_NODE 16 gai_ret LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 const struct hostent * he ; VAR_DECL 7 const struct hostent * he TYPE 8 const struct hostent * TYPE_NAME 9 const struct hostent LEAF_NODE 10 const LEAF_NODE 10 struct LEAF_NODE 10 hostent POINTER 9 * LEAF_NODE 10 * NAME 8 he LEAF_NODE 9 he LEAF_NODE 7 ; LEAF_NODE 6 static SIMPLE_DECL 6 uint32_t he_fallback_address ; VAR_DECL 7 uint32_t he_fallback_address TYPE 8 uint32_t TYPE_NAME 9 uint32_t LEAF_NODE 10 uint32_t NAME 8 he_fallback_address LEAF_NODE 9 he_fallback_address LEAF_NODE 7 ; LEAF_NODE 6 static LEAF_NODE 6 const LEAF_NODE 6 char LEAF_NODE 6 * LEAF_NODE 6 he_fallback_addresses LEAF_NODE 6 [ LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 ( LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 ) LEAF_NODE 7 & LEAF_NODE 7 he_fallback_address LEAF_NODE 7 , LEAF_NODE 7 NULL LEAF_NODE 6 } LEAF_NODE 6 ; LEAF_NODE 6 static SIMPLE_DECL 6 in_addr_t he_fallback_address ; VAR_DECL 7 in_addr_t he_fallback_address TYPE 8 in_addr_t TYPE_NAME 9 in_addr_t LEAF_NODE 10 in_addr_t NAME 8 he_fallback_address LEAF_NODE 9 he_fallback_address LEAF_NODE 7 ; LEAF_NODE 6 static LEAF_NODE 6 const LEAF_NODE 6 char LEAF_NODE 6 * LEAF_NODE 6 he_fallback_addresses LEAF_NODE 6 [ LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 ( LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 ) LEAF_NODE 7 & LEAF_NODE 7 he_fallback_address LEAF_NODE 7 , LEAF_NODE 7 NULL LEAF_NODE 6 } LEAF_NODE 6 ; LEAF_NODE 6 static LEAF_NODE 6 const LEAF_NODE 6 struct LEAF_NODE 6 hostent LEAF_NODE 6 he_fallback LEAF_NODE 6 = LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 NULL LEAF_NODE 7 , LEAF_NODE 7 NULL LEAF_NODE 7 , LEAF_NODE 7 AF_INET LEAF_NODE 7 , LEAF_NODE 7 sizeof LEAF_NODE 7 ( LEAF_NODE 7 he_fallback_address LEAF_NODE 7 ) LEAF_NODE 7 , LEAF_NODE 7 ( LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 * LEAF_NODE 7 ) LEAF_NODE 7 & LEAF_NODE 7 he_fallback_addresses LEAF_NODE 6 } LEAF_NODE 6 ; SIMPLE_DECL 6 struct servent * se ; VAR_DECL 7 struct servent * se TYPE 8 struct servent * TYPE_NAME 9 struct servent LEAF_NODE 10 struct LEAF_NODE 10 servent POINTER 9 * LEAF_NODE 10 * NAME 8 se LEAF_NODE 9 se LEAF_NODE 7 ; LEAF_NODE 6 struct LEAF_NODE 6 servent LEAF_NODE 6 se_fallback LEAF_NODE 6 = LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 NULL LEAF_NODE 7 , LEAF_NODE 7 NULL LEAF_NODE 7 , LEAF_NODE 7 NULL LEAF_NODE 7 , LEAF_NODE 7 0 LEAF_NODE 6 } LEAF_NODE 6 ; LEAF_NODE 6 struct LEAF_NODE 6 servent LEAF_NODE 6 se_fallback LEAF_NODE 6 = LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 NULL LEAF_NODE 7 , LEAF_NODE 7 NULL LEAF_NODE 7 , LEAF_NODE 7 0 LEAF_NODE 7 , LEAF_NODE 7 NULL LEAF_NODE 6 } LEAF_NODE 6 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! RUN_ONCE ( & bio_lookup_init , do_bio_lookup_init ) EXPR 8 ! RUN_ONCE ( & bio_lookup_init , do_bio_lookup_init ) UNARY_EXPR 9 ! RUN_ONCE ( & bio_lookup_init , do_bio_lookup_init ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 RUN_ONCE ( & bio_lookup_init , do_bio_lookup_init ) CALLEE 11 RUN_ONCE LEAF_NODE 12 RUN_ONCE LEAF_NODE 11 ( ARGUMENT 11 & bio_lookup_init UNARY_EXPR 12 & bio_lookup_init UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 bio_lookup_init LEAF_NODE 14 bio_lookup_init LEAF_NODE 11 , ARGUMENT 11 do_bio_lookup_init FIELD 12 do_bio_lookup_init LEAF_NODE 13 do_bio_lookup_init LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIOerr ( BIO_F_BIO_LOOKUP_EX , ERR_R_MALLOC_FAILURE ) ; EXPR 10 BIOerr ( BIO_F_BIO_LOOKUP_EX , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 11 BIOerr ( BIO_F_BIO_LOOKUP_EX , ERR_R_MALLOC_FAILURE ) CALLEE 12 BIOerr LEAF_NODE 13 BIOerr LEAF_NODE 12 ( ARGUMENT 12 BIO_F_BIO_LOOKUP_EX FIELD 13 BIO_F_BIO_LOOKUP_EX LEAF_NODE 14 BIO_F_BIO_LOOKUP_EX LEAF_NODE 12 , ARGUMENT 12 ERR_R_MALLOC_FAILURE FIELD 13 ERR_R_MALLOC_FAILURE LEAF_NODE 14 ERR_R_MALLOC_FAILURE LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ret = 0 ; EXPR 10 ret = 0 ASSIGN 11 ret = 0 LVAL 12 ret FIELD 13 ret LEAF_NODE 14 ret ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; JUMP_STATEMENT 9 goto err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 err LEAF_NODE 11 err LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 CRYPTO_THREAD_write_lock ( bio_lookup_lock ) ; EXPR 7 CRYPTO_THREAD_write_lock ( bio_lookup_lock ) FUNCTION_CALL 8 CRYPTO_THREAD_write_lock ( bio_lookup_lock ) CALLEE 9 CRYPTO_THREAD_write_lock LEAF_NODE 10 CRYPTO_THREAD_write_lock LEAF_NODE 9 ( ARGUMENT 9 bio_lookup_lock FIELD 10 bio_lookup_lock LEAF_NODE 11 bio_lookup_lock LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 he_fallback_address = INADDR_ANY ; EXPR 7 he_fallback_address = INADDR_ANY ASSIGN 8 he_fallback_address = INADDR_ANY LVAL 9 he_fallback_address FIELD 10 he_fallback_address LEAF_NODE 11 he_fallback_address ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 INADDR_ANY FIELD 10 INADDR_ANY LEAF_NODE 11 INADDR_ANY LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 host == NULL EXPR 8 host == NULL FIELD 9 host LEAF_NODE 10 host EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 he = & he_fallback ; EXPR 10 he = & he_fallback ASSIGN 11 he = & he_fallback LVAL 12 he FIELD 13 he LEAF_NODE 14 he ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 & he_fallback UNARY_EXPR 13 & he_fallback UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 he_fallback LEAF_NODE 15 he_fallback LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 switch LEAF_NODE 11 switch LEAF_NODE 10 ( CONDITION 10 lookup_type EXPR 11 lookup_type FIELD 12 lookup_type LEAF_NODE 13 lookup_type LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 LABEL 12 case BIO_LOOKUP_CLIENT : LEAF_NODE 13 case LEAF_NODE 13 BIO_LOOKUP_CLIENT LEAF_NODE 13 : EXPR_STATEMENT 12 he_fallback_address = INADDR_LOOPBACK ; EXPR 13 he_fallback_address = INADDR_LOOPBACK ASSIGN 14 he_fallback_address = INADDR_LOOPBACK LVAL 15 he_fallback_address FIELD 16 he_fallback_address LEAF_NODE 17 he_fallback_address ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 INADDR_LOOPBACK FIELD 16 INADDR_LOOPBACK LEAF_NODE 17 INADDR_LOOPBACK LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LABEL 12 case BIO_LOOKUP_SERVER : LEAF_NODE 13 case LEAF_NODE 13 BIO_LOOKUP_SERVER LEAF_NODE 13 : EXPR_STATEMENT 12 he_fallback_address = INADDR_ANY ; EXPR 13 he_fallback_address = INADDR_ANY ASSIGN 14 he_fallback_address = INADDR_ANY LVAL 15 he_fallback_address FIELD 16 he_fallback_address LEAF_NODE 17 he_fallback_address ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 INADDR_ANY FIELD 16 INADDR_ANY LEAF_NODE 17 INADDR_ANY LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LABEL 12 default : LEAF_NODE 13 default LEAF_NODE 13 : EXPR_STATEMENT 12 assert ( \"We forgot to handle a lookup type!\" == NULL ) ; EXPR 13 assert ( \"We forgot to handle a lookup type!\" == NULL ) FUNCTION_CALL 14 assert ( \"We forgot to handle a lookup type!\" == NULL ) CALLEE 15 assert LEAF_NODE 16 assert LEAF_NODE 15 ( ARGUMENT 15 \"We forgot to handle a lookup type!\" == NULL FIELD 16 \"We forgot to handle a lookup type!\" LEAF_NODE 17 \"We forgot to handle a lookup type!\" EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 BIOerr ( BIO_F_BIO_LOOKUP_EX , ERR_R_INTERNAL_ERROR ) ; EXPR 13 BIOerr ( BIO_F_BIO_LOOKUP_EX , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 14 BIOerr ( BIO_F_BIO_LOOKUP_EX , ERR_R_INTERNAL_ERROR ) CALLEE 15 BIOerr LEAF_NODE 16 BIOerr LEAF_NODE 15 ( ARGUMENT 15 BIO_F_BIO_LOOKUP_EX FIELD 16 BIO_F_BIO_LOOKUP_EX LEAF_NODE 17 BIO_F_BIO_LOOKUP_EX LEAF_NODE 15 , ARGUMENT 15 ERR_R_INTERNAL_ERROR FIELD 16 ERR_R_INTERNAL_ERROR LEAF_NODE 17 ERR_R_INTERNAL_ERROR LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 ret = 0 ; EXPR 13 ret = 0 ASSIGN 14 ret = 0 LVAL 15 ret FIELD 16 ret LEAF_NODE 17 ret ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 13 ; JUMP_STATEMENT 12 goto err ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 err LEAF_NODE 14 err LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 he = gethostbyname ( host ) ; EXPR 10 he = gethostbyname ( host ) ASSIGN 11 he = gethostbyname ( host ) LVAL 12 he FIELD 13 he LEAF_NODE 14 he ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 gethostbyname ( host ) FUNCTION_CALL 13 gethostbyname ( host ) CALLEE 14 gethostbyname LEAF_NODE 15 gethostbyname LEAF_NODE 14 ( ARGUMENT 14 host FIELD 15 host LEAF_NODE 16 host LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 he == NULL EXPR 11 he == NULL FIELD 12 he LEAF_NODE 13 he EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 SYSerr ( SYS_F_GETHOSTBYNAME , 1000 + h_errno ) ; EXPR 13 SYSerr ( SYS_F_GETHOSTBYNAME , 1000 + h_errno ) FUNCTION_CALL 14 SYSerr ( SYS_F_GETHOSTBYNAME , 1000 + h_errno ) CALLEE 15 SYSerr LEAF_NODE 16 SYSerr LEAF_NODE 15 ( ARGUMENT 15 SYS_F_GETHOSTBYNAME FIELD 16 SYS_F_GETHOSTBYNAME LEAF_NODE 17 SYS_F_GETHOSTBYNAME LEAF_NODE 15 , ARGUMENT 15 1000 + h_errno FIELD 16 1000 LEAF_NODE 17 1000 LEAF_NODE 16 + FIELD 16 h_errno LEAF_NODE 17 h_errno LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 SYSerr ( SYS_F_GETHOSTBYNAME , WSAGetLastError ( ) ) ; EXPR 13 SYSerr ( SYS_F_GETHOSTBYNAME , WSAGetLastError ( ) ) FUNCTION_CALL 14 SYSerr ( SYS_F_GETHOSTBYNAME , WSAGetLastError ( ) ) CALLEE 15 SYSerr LEAF_NODE 16 SYSerr LEAF_NODE 15 ( ARGUMENT 15 SYS_F_GETHOSTBYNAME FIELD 16 SYS_F_GETHOSTBYNAME LEAF_NODE 17 SYS_F_GETHOSTBYNAME LEAF_NODE 15 , ARGUMENT 15 WSAGetLastError ( ) FUNCTION_CALL 16 WSAGetLastError ( ) CALLEE 17 WSAGetLastError LEAF_NODE 18 WSAGetLastError LEAF_NODE 17 ( LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 ret = 0 ; EXPR 13 ret = 0 ASSIGN 14 ret = 0 LVAL 15 ret FIELD 16 ret LEAF_NODE 17 ret ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 13 ; JUMP_STATEMENT 12 goto err ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 err LEAF_NODE 14 err LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 service == NULL EXPR 8 service == NULL FIELD 9 service LEAF_NODE 10 service EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 se_fallback . s_port = 0 ; EXPR 10 se_fallback . s_port = 0 ASSIGN 11 se_fallback . s_port = 0 LVAL 12 se_fallback . s_port FIELD 13 se_fallback . s_port LEAF_NODE 14 se_fallback LEAF_NODE 14 . LEAF_NODE 14 s_port ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 se_fallback . s_proto = NULL ; EXPR 10 se_fallback . s_proto = NULL ASSIGN 11 se_fallback . s_proto = NULL LVAL 12 se_fallback . s_proto FIELD 13 se_fallback . s_proto LEAF_NODE 14 se_fallback LEAF_NODE 14 . LEAF_NODE 14 s_proto ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 10 ; EXPR_STATEMENT 9 se = & se_fallback ; EXPR 10 se = & se_fallback ASSIGN 11 se = & se_fallback LVAL 12 se FIELD 13 se LEAF_NODE 14 se ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 & se_fallback UNARY_EXPR 13 & se_fallback UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 se_fallback LEAF_NODE 15 se_fallback LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SIMPLE_DECL 9 char * endp ; endp = NULL ; VAR_DECL 10 char * endp ; endp = NULL TYPE 11 char * TYPE_NAME 12 char LEAF_NODE 13 char POINTER 12 * LEAF_NODE 13 * NAME 11 endp LEAF_NODE 12 endp LEAF_NODE 11 ; INIT 11 endp = NULL ASSIGN 12 endp = NULL LVAL 13 endp NAME 14 endp LEAF_NODE 15 endp ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 10 ; SIMPLE_DECL 9 long portnum ; portnum = strtol ( service , & endp , 10 ) ; VAR_DECL 10 long portnum ; portnum = strtol ( service , & endp , 10 ) TYPE 11 long TYPE_NAME 12 long LEAF_NODE 13 long NAME 11 portnum LEAF_NODE 12 portnum LEAF_NODE 11 ; INIT 11 portnum = strtol ( service , & endp , 10 ) ASSIGN 12 portnum = strtol ( service , & endp , 10 ) LVAL 13 portnum NAME 14 portnum LEAF_NODE 15 portnum ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strtol ( service , & endp , 10 ) FUNCTION_CALL 14 strtol ( service , & endp , 10 ) CALLEE 15 strtol LEAF_NODE 16 strtol LEAF_NODE 15 ( ARGUMENT 15 service FIELD 16 service LEAF_NODE 17 service LEAF_NODE 15 , ARGUMENT 15 & endp UNARY_EXPR 16 & endp UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 endp LEAF_NODE 18 endp LEAF_NODE 15 , ARGUMENT 15 10 FIELD 16 10 LEAF_NODE 17 10 LEAF_NODE 15 ) LEAF_NODE 10 ; SIMPLE_DECL 9 char * proto ; proto = NULL ; VAR_DECL 10 char * proto ; proto = NULL TYPE 11 char * TYPE_NAME 12 char LEAF_NODE 13 char POINTER 12 * LEAF_NODE 13 * NAME 11 proto LEAF_NODE 12 proto LEAF_NODE 11 ; INIT 11 proto = NULL ASSIGN 12 proto = NULL LVAL 13 proto NAME 14 proto LEAF_NODE 15 proto ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 switch LEAF_NODE 11 switch LEAF_NODE 10 ( CONDITION 10 socktype EXPR 11 socktype FIELD 12 socktype LEAF_NODE 13 socktype LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 LABEL 12 case SOCK_STREAM : LEAF_NODE 13 case LEAF_NODE 13 SOCK_STREAM LEAF_NODE 13 : EXPR_STATEMENT 12 proto = \"tcp\" ; EXPR 13 proto = \"tcp\" ASSIGN 14 proto = \"tcp\" LVAL 15 proto FIELD 16 proto LEAF_NODE 17 proto ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 \"tcp\" FIELD 16 \"tcp\" LEAF_NODE 17 \"tcp\" LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LABEL 12 case SOCK_DGRAM : LEAF_NODE 13 case LEAF_NODE 13 SOCK_DGRAM LEAF_NODE 13 : EXPR_STATEMENT 12 proto = \"udp\" ; EXPR 13 proto = \"udp\" ASSIGN 14 proto = \"udp\" LVAL 15 proto FIELD 16 proto LEAF_NODE 17 proto ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 \"udp\" FIELD 16 \"udp\" LEAF_NODE 17 \"udp\" LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 endp != service && * endp == '\\0' && portnum > 0 && portnum < 65536 EXPR 11 endp != service && * endp == '\\0' && portnum > 0 && portnum < 65536 AND 12 endp != service && * endp == '\\0' && portnum > 0 && portnum < 65536 EXPR 13 endp != service FIELD 14 endp LEAF_NODE 15 endp EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 service LEAF_NODE 15 service LEAF_NODE 13 && EXPR 13 * endp == '\\0' && portnum > 0 && portnum < 65536 AND 14 * endp == '\\0' && portnum > 0 && portnum < 65536 EXPR 15 * endp == '\\0' UNARY_EXPR 16 * endp UNARY_OPERATOR 17 * LEAF_NODE 18 * FIELD 17 endp LEAF_NODE 18 endp EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 '\\0' LEAF_NODE 17 '\\0' LEAF_NODE 15 && EXPR 15 portnum > 0 && portnum < 65536 AND 16 portnum > 0 && portnum < 65536 EXPR 17 portnum > 0 FIELD 18 portnum LEAF_NODE 19 portnum REL_OPERATOR 18 > LEAF_NODE 19 > FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 17 && EXPR 17 portnum < 65536 FIELD 18 portnum LEAF_NODE 19 portnum REL_OPERATOR 18 < LEAF_NODE 19 < FIELD 18 65536 LEAF_NODE 19 65536 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 se_fallback . s_port = htons ( ( unsigned short ) portnum ) ; EXPR 13 se_fallback . s_port = htons ( ( unsigned short ) portnum ) ASSIGN 14 se_fallback . s_port = htons ( ( unsigned short ) portnum ) LVAL 15 se_fallback . s_port FIELD 16 se_fallback . s_port LEAF_NODE 17 se_fallback LEAF_NODE 17 . LEAF_NODE 17 s_port ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 htons ( ( unsigned short ) portnum ) FUNCTION_CALL 16 htons ( ( unsigned short ) portnum ) CALLEE 17 htons LEAF_NODE 18 htons LEAF_NODE 17 ( ARGUMENT 17 ( unsigned short ) portnum LEAF_NODE 18 ( TYPE_NAME 18 unsigned short LEAF_NODE 19 unsigned LEAF_NODE 19 short LEAF_NODE 18 ) FIELD 18 portnum LEAF_NODE 19 portnum LEAF_NODE 17 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 se_fallback . s_proto = proto ; EXPR 13 se_fallback . s_proto = proto ASSIGN 14 se_fallback . s_proto = proto LVAL 15 se_fallback . s_proto FIELD 16 se_fallback . s_proto LEAF_NODE 17 se_fallback LEAF_NODE 17 . LEAF_NODE 17 s_proto ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 proto FIELD 16 proto LEAF_NODE 17 proto LEAF_NODE 13 ; EXPR_STATEMENT 12 se = & se_fallback ; EXPR 13 se = & se_fallback ASSIGN 14 se = & se_fallback LVAL 15 se FIELD 16 se LEAF_NODE 17 se ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 & se_fallback UNARY_EXPR 16 & se_fallback UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 se_fallback LEAF_NODE 18 se_fallback LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 else LEAF_NODE 11 else STATEMENTS 10 SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 endp == service EXPR 13 endp == service FIELD 14 endp LEAF_NODE 15 endp EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 service LEAF_NODE 15 service LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 se = getservbyname ( service , proto ) ; EXPR 15 se = getservbyname ( service , proto ) ASSIGN 16 se = getservbyname ( service , proto ) LVAL 17 se FIELD 18 se LEAF_NODE 19 se ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 getservbyname ( service , proto ) FUNCTION_CALL 18 getservbyname ( service , proto ) CALLEE 19 getservbyname LEAF_NODE 20 getservbyname LEAF_NODE 19 ( ARGUMENT 19 service FIELD 20 service LEAF_NODE 21 service LEAF_NODE 19 , ARGUMENT 19 proto FIELD 20 proto LEAF_NODE 21 proto LEAF_NODE 19 ) LEAF_NODE 15 ; SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 se == NULL EXPR 16 se == NULL FIELD 17 se LEAF_NODE 18 se EQ_OPERATOR 17 == LEAF_NODE 18 == FIELD 17 NULL LEAF_NODE 18 NULL LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 EXPR_STATEMENT 17 SYSerr ( SYS_F_GETSERVBYNAME , errno ) ; EXPR 18 SYSerr ( SYS_F_GETSERVBYNAME , errno ) FUNCTION_CALL 19 SYSerr ( SYS_F_GETSERVBYNAME , errno ) CALLEE 20 SYSerr LEAF_NODE 21 SYSerr LEAF_NODE 20 ( ARGUMENT 20 SYS_F_GETSERVBYNAME FIELD 21 SYS_F_GETSERVBYNAME LEAF_NODE 22 SYS_F_GETSERVBYNAME LEAF_NODE 20 , ARGUMENT 20 errno FIELD 21 errno LEAF_NODE 22 errno LEAF_NODE 20 ) LEAF_NODE 18 ; EXPR_STATEMENT 17 SYSerr ( SYS_F_GETSERVBYNAME , WSAGetLastError ( ) ) ; EXPR 18 SYSerr ( SYS_F_GETSERVBYNAME , WSAGetLastError ( ) ) FUNCTION_CALL 19 SYSerr ( SYS_F_GETSERVBYNAME , WSAGetLastError ( ) ) CALLEE 20 SYSerr LEAF_NODE 21 SYSerr LEAF_NODE 20 ( ARGUMENT 20 SYS_F_GETSERVBYNAME FIELD 21 SYS_F_GETSERVBYNAME LEAF_NODE 22 SYS_F_GETSERVBYNAME LEAF_NODE 20 , ARGUMENT 20 WSAGetLastError ( ) FUNCTION_CALL 21 WSAGetLastError ( ) CALLEE 22 WSAGetLastError LEAF_NODE 23 WSAGetLastError LEAF_NODE 22 ( LEAF_NODE 22 ) LEAF_NODE 20 ) LEAF_NODE 18 ; JUMP_STATEMENT 17 goto err ; KEYWORD 18 goto LEAF_NODE 19 goto DESTINATION 18 err LEAF_NODE 19 err LEAF_NODE 18 ; LEAF_NODE 16 } LEAF_NODE 13 } SELECTION 9 KEYWORD 10 else LEAF_NODE 11 else STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 BIOerr ( BIO_F_BIO_LOOKUP_EX , BIO_R_MALFORMED_HOST_OR_SERVICE ) ; EXPR 13 BIOerr ( BIO_F_BIO_LOOKUP_EX , BIO_R_MALFORMED_HOST_OR_SERVICE ) FUNCTION_CALL 14 BIOerr ( BIO_F_BIO_LOOKUP_EX , BIO_R_MALFORMED_HOST_OR_SERVICE ) CALLEE 15 BIOerr LEAF_NODE 16 BIOerr LEAF_NODE 15 ( ARGUMENT 15 BIO_F_BIO_LOOKUP_EX FIELD 16 BIO_F_BIO_LOOKUP_EX LEAF_NODE 17 BIO_F_BIO_LOOKUP_EX LEAF_NODE 15 , ARGUMENT 15 BIO_R_MALFORMED_HOST_OR_SERVICE FIELD 16 BIO_R_MALFORMED_HOST_OR_SERVICE LEAF_NODE 17 BIO_R_MALFORMED_HOST_OR_SERVICE LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 goto err ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 err LEAF_NODE 14 err LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } EXPR_STATEMENT 6 * res = NULL ; EXPR 7 * res = NULL ASSIGN 8 * res = NULL LVAL 9 * res UNARY_EXPR 10 * res UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 res LEAF_NODE 12 res ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * addrlistp ; VAR_DECL 8 char * addrlistp TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 addrlistp LEAF_NODE 10 addrlistp LEAF_NODE 8 ; SIMPLE_DECL 7 size_t addresses ; VAR_DECL 8 size_t addresses TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 addresses LEAF_NODE 10 addresses LEAF_NODE 8 ; SIMPLE_DECL 7 BIO_ADDRINFO * tmp_bai ; tmp_bai = NULL ; VAR_DECL 8 BIO_ADDRINFO * tmp_bai ; tmp_bai = NULL TYPE 9 BIO_ADDRINFO * TYPE_NAME 10 BIO_ADDRINFO LEAF_NODE 11 BIO_ADDRINFO POINTER 10 * LEAF_NODE 11 * NAME 9 tmp_bai LEAF_NODE 10 tmp_bai LEAF_NODE 9 ; INIT 9 tmp_bai = NULL ASSIGN 10 tmp_bai = NULL LVAL 11 tmp_bai NAME 12 tmp_bai LEAF_NODE 13 tmp_bai ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 addrlistp = he -> h_addr_list ; EXPR 9 addrlistp = he -> h_addr_list ASSIGN 10 addrlistp = he -> h_addr_list LVAL 11 addrlistp FIELD 12 addrlistp LEAF_NODE 13 addrlistp ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 he -> h_addr_list FIELD 12 he -> h_addr_list LEAF_NODE 13 he LEAF_NODE 13 -> LEAF_NODE 13 h_addr_list LEAF_NODE 9 ; CONDITION 8 * addrlistp != NULL EXPR 9 * addrlistp != NULL UNARY_EXPR 10 * addrlistp UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 addrlistp LEAF_NODE 12 addrlistp EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ; FOR_EXPR 8 addrlistp ++ EXPR 9 addrlistp ++ FIELD 10 addrlistp ++ LEAF_NODE 11 addrlistp LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 addresses = addrlistp - he -> h_addr_list ; EXPR 9 addresses = addrlistp - he -> h_addr_list ASSIGN 10 addresses = addrlistp - he -> h_addr_list LVAL 11 addresses FIELD 12 addresses LEAF_NODE 13 addresses ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 addrlistp - he -> h_addr_list FIELD 12 addrlistp LEAF_NODE 13 addrlistp LEAF_NODE 12 - FIELD 12 he -> h_addr_list LEAF_NODE 13 he LEAF_NODE 13 -> LEAF_NODE 13 h_addr_list LEAF_NODE 9 ; CONDITION 8 addrlistp -- , addresses -- > 0 EXPR 9 addrlistp -- , addresses -- > 0 FIELD 10 addrlistp -- LEAF_NODE 11 addrlistp LEAF_NODE 11 -- LEAF_NODE 10 , FIELD 10 addresses -- LEAF_NODE 11 addresses LEAF_NODE 11 -- REL_OPERATOR 10 > LEAF_NODE 11 > FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 8 ; LEAF_NODE 8 FOR_EXPR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 ! addrinfo_wrap ( he -> h_addrtype , socktype , * addrlistp , he -> h_length , se -> s_port , & tmp_bai ) EXPR 12 ! addrinfo_wrap ( he -> h_addrtype , socktype , * addrlistp , he -> h_length , se -> s_port , & tmp_bai ) UNARY_EXPR 13 ! addrinfo_wrap ( he -> h_addrtype , socktype , * addrlistp , he -> h_length , se -> s_port , & tmp_bai ) UNARY_OPERATOR 14 ! LEAF_NODE 15 ! FUNCTION_CALL 14 addrinfo_wrap ( he -> h_addrtype , socktype , * addrlistp , he -> h_length , se -> s_port , & tmp_bai ) CALLEE 15 addrinfo_wrap LEAF_NODE 16 addrinfo_wrap LEAF_NODE 15 ( ARGUMENT 15 he -> h_addrtype FIELD 16 he -> h_addrtype LEAF_NODE 17 he LEAF_NODE 17 -> LEAF_NODE 17 h_addrtype LEAF_NODE 15 , ARGUMENT 15 socktype FIELD 16 socktype LEAF_NODE 17 socktype LEAF_NODE 15 , ARGUMENT 15 * addrlistp UNARY_EXPR 16 * addrlistp UNARY_OPERATOR 17 * LEAF_NODE 18 * FIELD 17 addrlistp LEAF_NODE 18 addrlistp LEAF_NODE 15 , ARGUMENT 15 he -> h_length FIELD 16 he -> h_length LEAF_NODE 17 he LEAF_NODE 17 -> LEAF_NODE 17 h_length LEAF_NODE 15 , ARGUMENT 15 se -> s_port FIELD 16 se -> s_port LEAF_NODE 17 se LEAF_NODE 17 -> LEAF_NODE 17 s_port LEAF_NODE 15 , ARGUMENT 15 & tmp_bai UNARY_EXPR 16 & tmp_bai UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 tmp_bai LEAF_NODE 18 tmp_bai LEAF_NODE 15 ) LEAF_NODE 11 ) STATEMENTS 11 JUMP_STATEMENT 12 goto addrinfo_malloc_err ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 addrinfo_malloc_err LEAF_NODE 14 addrinfo_malloc_err LEAF_NODE 13 ; EXPR_STATEMENT 10 tmp_bai -> bai_next = * res ; EXPR 11 tmp_bai -> bai_next = * res ASSIGN 12 tmp_bai -> bai_next = * res LVAL 13 tmp_bai -> bai_next FIELD 14 tmp_bai -> bai_next LEAF_NODE 15 tmp_bai LEAF_NODE 15 -> LEAF_NODE 15 bai_next ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 * res UNARY_EXPR 14 * res UNARY_OPERATOR 15 * LEAF_NODE 16 * FIELD 15 res LEAF_NODE 16 res LEAF_NODE 11 ; EXPR_STATEMENT 10 * res = tmp_bai ; EXPR 11 * res = tmp_bai ASSIGN 12 * res = tmp_bai LVAL 13 * res UNARY_EXPR 14 * res UNARY_OPERATOR 15 * LEAF_NODE 16 * FIELD 15 res LEAF_NODE 16 res ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 tmp_bai FIELD 14 tmp_bai LEAF_NODE 15 tmp_bai LEAF_NODE 11 ; JUMP_STATEMENT 10 continue DESTINATION ; KEYWORD 11 continue LEAF_NODE 12 continue LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LABEL 10 addrinfo_malloc_err : LEAF_NODE 11 addrinfo_malloc_err LEAF_NODE 11 : EXPR_STATEMENT 10 BIO_ADDRINFO_free ( * res ) ; EXPR 11 BIO_ADDRINFO_free ( * res ) FUNCTION_CALL 12 BIO_ADDRINFO_free ( * res ) CALLEE 13 BIO_ADDRINFO_free LEAF_NODE 14 BIO_ADDRINFO_free LEAF_NODE 13 ( ARGUMENT 13 * res UNARY_EXPR 14 * res UNARY_OPERATOR 15 * LEAF_NODE 16 * FIELD 15 res LEAF_NODE 16 res LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 * res = NULL ; EXPR 11 * res = NULL ASSIGN 12 * res = NULL LVAL 13 * res UNARY_EXPR 14 * res UNARY_OPERATOR 15 * LEAF_NODE 16 * FIELD 15 res LEAF_NODE 16 res ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 11 ; EXPR_STATEMENT 10 BIOerr ( BIO_F_BIO_LOOKUP_EX , ERR_R_MALLOC_FAILURE ) ; EXPR 11 BIOerr ( BIO_F_BIO_LOOKUP_EX , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 12 BIOerr ( BIO_F_BIO_LOOKUP_EX , ERR_R_MALLOC_FAILURE ) CALLEE 13 BIOerr LEAF_NODE 14 BIOerr LEAF_NODE 13 ( ARGUMENT 13 BIO_F_BIO_LOOKUP_EX FIELD 14 BIO_F_BIO_LOOKUP_EX LEAF_NODE 15 BIO_F_BIO_LOOKUP_EX LEAF_NODE 13 , ARGUMENT 13 ERR_R_MALLOC_FAILURE FIELD 14 ERR_R_MALLOC_FAILURE LEAF_NODE 15 ERR_R_MALLOC_FAILURE LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 ret = 0 ; EXPR 11 ret = 0 ASSIGN 12 ret = 0 LVAL 13 ret FIELD 14 ret LEAF_NODE 15 ret ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; JUMP_STATEMENT 10 goto err ; KEYWORD 11 goto LEAF_NODE 12 goto DESTINATION 11 err LEAF_NODE 12 err LEAF_NODE 11 ; LEAF_NODE 9 } EXPR_STATEMENT 7 ret = 1 ; EXPR 8 ret = 1 ASSIGN 9 ret = 1 LVAL 10 ret FIELD 11 ret LEAF_NODE 12 ret ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 1 FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 8 ; LEAF_NODE 6 } LABEL 6 err : LEAF_NODE 7 err LEAF_NODE 7 : EXPR_STATEMENT 6 CRYPTO_THREAD_unlock ( bio_lookup_lock ) ; EXPR 7 CRYPTO_THREAD_unlock ( bio_lookup_lock ) FUNCTION_CALL 8 CRYPTO_THREAD_unlock ( bio_lookup_lock ) CALLEE 9 CRYPTO_THREAD_unlock LEAF_NODE 10 CRYPTO_THREAD_unlock LEAF_NODE 9 ( ARGUMENT 9 bio_lookup_lock FIELD 10 bio_lookup_lock LEAF_NODE 11 bio_lookup_lock LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return ret ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ret EXPR 5 ret FIELD 6 ret LEAF_NODE 7 ret LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 104, "project": "openssl_ast_normal_function_test_113", "target": 0}
{"func": "SIMPLE_DECL 1 struct async_wait_ctx_st BASE_CLASSES { struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; ASYNC_callback_fn callback ; void * callback_arg ; int status ; } ; CLASS_DEF 2 struct async_wait_ctx_st BASE_CLASSES { struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; ASYNC_callback_fn callback ; void * callback_arg ; int status ; } CLASS_DEF 3 struct async_wait_ctx_st BASE_CLASSES { struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; ASYNC_callback_fn callback ; void * callback_arg ; int status ; } LEAF_NODE 4 struct CLASS_NAME 4 async_wait_ctx_st LEAF_NODE 5 async_wait_ctx_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; ASYNC_callback_fn callback ; void * callback_arg ; int status ; SIMPLE_DECL 5 struct fd_lookup_st * fds ; VAR_DECL 6 struct fd_lookup_st * fds TYPE 7 struct fd_lookup_st * TYPE_NAME 8 struct fd_lookup_st LEAF_NODE 9 struct LEAF_NODE 9 fd_lookup_st POINTER 8 * LEAF_NODE 9 * NAME 7 fds LEAF_NODE 8 fds LEAF_NODE 6 ; SIMPLE_DECL 5 size_t numadd ; VAR_DECL 6 size_t numadd TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 numadd LEAF_NODE 8 numadd LEAF_NODE 6 ; SIMPLE_DECL 5 size_t numdel ; VAR_DECL 6 size_t numdel TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 numdel LEAF_NODE 8 numdel LEAF_NODE 6 ; SIMPLE_DECL 5 ASYNC_callback_fn callback ; VAR_DECL 6 ASYNC_callback_fn callback TYPE 7 ASYNC_callback_fn TYPE_NAME 8 ASYNC_callback_fn LEAF_NODE 9 ASYNC_callback_fn NAME 7 callback LEAF_NODE 8 callback LEAF_NODE 6 ; SIMPLE_DECL 5 void * callback_arg ; VAR_DECL 6 void * callback_arg TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 callback_arg LEAF_NODE 8 callback_arg LEAF_NODE 6 ; SIMPLE_DECL 5 int status ; VAR_DECL 6 int status TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 status LEAF_NODE 8 status LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_wait_ctx_st ASYNC_WAIT_CTX ; VAR_DECL 2 struct async_wait_ctx_st ASYNC_WAIT_CTX TYPE 3 struct async_wait_ctx_st TYPE_NAME 4 struct async_wait_ctx_st LEAF_NODE 5 struct LEAF_NODE 5 async_wait_ctx_st NAME 3 ASYNC_WAIT_CTX LEAF_NODE 4 ASYNC_WAIT_CTX LEAF_NODE 2 ; SIMPLE_DECL 1 struct fd_lookup_st BASE_CLASSES { const void * key ; OSSL_ASYNC_FD fd ; void * custom_data ; void ( * cleanup ) ( ASYNC_WAIT_CTX * , const void * , OSSL_ASYNC_FD , void * ) ; int add ; int del ; struct fd_lookup_st * next ; } ; CLASS_DEF 2 struct fd_lookup_st BASE_CLASSES { const void * key ; OSSL_ASYNC_FD fd ; void * custom_data ; void ( * cleanup ) ( ASYNC_WAIT_CTX * , const void * , OSSL_ASYNC_FD , void * ) ; int add ; int del ; struct fd_lookup_st * next ; } CLASS_DEF 3 struct fd_lookup_st BASE_CLASSES { const void * key ; OSSL_ASYNC_FD fd ; void * custom_data ; void ( * cleanup ) ( ASYNC_WAIT_CTX * , const void * , OSSL_ASYNC_FD , void * ) ; int add ; int del ; struct fd_lookup_st * next ; } LEAF_NODE 4 struct CLASS_NAME 4 fd_lookup_st LEAF_NODE 5 fd_lookup_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 const void * key ; OSSL_ASYNC_FD fd ; void * custom_data ; void ( * cleanup ) ( ASYNC_WAIT_CTX * , const void * , OSSL_ASYNC_FD , void * ) ; int add ; int del ; struct fd_lookup_st * next ; SIMPLE_DECL 5 const void * key ; VAR_DECL 6 const void * key TYPE 7 const void * TYPE_NAME 8 const void LEAF_NODE 9 const LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 key LEAF_NODE 8 key LEAF_NODE 6 ; SIMPLE_DECL 5 OSSL_ASYNC_FD fd ; VAR_DECL 6 OSSL_ASYNC_FD fd TYPE 7 OSSL_ASYNC_FD TYPE_NAME 8 OSSL_ASYNC_FD LEAF_NODE 9 OSSL_ASYNC_FD NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 void * custom_data ; VAR_DECL 6 void * custom_data TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 custom_data LEAF_NODE 8 custom_data LEAF_NODE 6 ; LEAF_NODE 5 void LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 cleanup LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 ASYNC_WAIT_CTX LEAF_NODE 5 * LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 void LEAF_NODE 5 * LEAF_NODE 5 , LEAF_NODE 5 OSSL_ASYNC_FD LEAF_NODE 5 , LEAF_NODE 5 void LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 int add ; VAR_DECL 6 int add TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 add LEAF_NODE 8 add LEAF_NODE 6 ; SIMPLE_DECL 5 int del ; VAR_DECL 6 int del TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 del LEAF_NODE 8 del LEAF_NODE 6 ; SIMPLE_DECL 5 struct fd_lookup_st * next ; VAR_DECL 6 struct fd_lookup_st * next TYPE 7 struct fd_lookup_st * TYPE_NAME 8 struct fd_lookup_st LEAF_NODE 9 struct LEAF_NODE 9 fd_lookup_st POINTER 8 * LEAF_NODE 9 * NAME 7 next LEAF_NODE 8 next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_wait_ctx_st ASYNC_WAIT_CTX ; VAR_DECL 2 struct async_wait_ctx_st ASYNC_WAIT_CTX TYPE 3 struct async_wait_ctx_st TYPE_NAME 4 struct async_wait_ctx_st LEAF_NODE 5 struct LEAF_NODE 5 async_wait_ctx_st NAME 3 ASYNC_WAIT_CTX LEAF_NODE 4 ASYNC_WAIT_CTX LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 ASYNC_WAIT_CTX * TYPE_NAME 3 ASYNC_WAIT_CTX LEAF_NODE 4 ASYNC_WAIT_CTX LEAF_NODE 3 * FUNCTION_NAME 2 ASYNC_WAIT_CTX_new LEAF_NODE 3 ASYNC_WAIT_CTX_new PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return OPENSSL_zalloc ( sizeof ( ASYNC_WAIT_CTX ) ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 OPENSSL_zalloc ( sizeof ( ASYNC_WAIT_CTX ) ) EXPR 5 OPENSSL_zalloc ( sizeof ( ASYNC_WAIT_CTX ) ) FUNCTION_CALL 6 OPENSSL_zalloc ( sizeof ( ASYNC_WAIT_CTX ) ) CALLEE 7 OPENSSL_zalloc LEAF_NODE 8 OPENSSL_zalloc LEAF_NODE 7 ( ARGUMENT 7 sizeof ( ASYNC_WAIT_CTX ) FUNCTION_CALL 8 sizeof ( ASYNC_WAIT_CTX ) CALLEE 9 sizeof LEAF_NODE 10 sizeof LEAF_NODE 9 ( ARGUMENT 9 ASYNC_WAIT_CTX FIELD 10 ASYNC_WAIT_CTX LEAF_NODE 11 ASYNC_WAIT_CTX LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 105, "project": "openssl_ast_normal_function_test_44", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_UTCTIME_print LEAF_NODE 3 ASN1_UTCTIME_print PARAMETER_LIST 2 ( BIO * bp , const ASN1_UTCTIME * tm ) LEAF_NODE 3 ( PARAMETER_DECL 3 BIO * bp TYPE 4 BIO * TYPE_NAME 5 BIO LEAF_NODE 6 BIO POINTER 5 * LEAF_NODE 6 * NAME 4 bp LEAF_NODE 5 bp LEAF_NODE 3 , PARAMETER_DECL 3 const ASN1_UTCTIME * tm TYPE 4 const ASN1_UTCTIME * TYPE_NAME 5 const ASN1_UTCTIME LEAF_NODE 6 const LEAF_NODE 6 ASN1_UTCTIME POINTER 5 * LEAF_NODE 6 * NAME 4 tm LEAF_NODE 5 tm LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 tm -> type != V_ASN1_UTCTIME EXPR 5 tm -> type != V_ASN1_UTCTIME FIELD 6 tm -> type LEAF_NODE 7 tm LEAF_NODE 7 -> LEAF_NODE 7 type EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 V_ASN1_UTCTIME LEAF_NODE 7 V_ASN1_UTCTIME LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; JUMP_STATEMENT 3 return ASN1_TIME_print ( bp , tm ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ASN1_TIME_print ( bp , tm ) EXPR 5 ASN1_TIME_print ( bp , tm ) FUNCTION_CALL 6 ASN1_TIME_print ( bp , tm ) CALLEE 7 ASN1_TIME_print LEAF_NODE 8 ASN1_TIME_print LEAF_NODE 7 ( ARGUMENT 7 bp FIELD 8 bp LEAF_NODE 9 bp LEAF_NODE 7 , ARGUMENT 7 tm FIELD 8 tm LEAF_NODE 9 tm LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 106, "project": "openssl_ast_normal_function_test_35", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_const_check_infinite_end LEAF_NODE 3 ASN1_const_check_infinite_end PARAMETER_LIST 2 ( const unsigned char * * p , long len ) LEAF_NODE 3 ( PARAMETER_DECL 3 const unsigned char * * p TYPE 4 const unsigned char * * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 p LEAF_NODE 5 p LEAF_NODE 3 , PARAMETER_DECL 3 long len TYPE 4 long TYPE_NAME 5 long LEAF_NODE 6 long NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return _asn1_check_infinite_end ( p , len ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 _asn1_check_infinite_end ( p , len ) EXPR 5 _asn1_check_infinite_end ( p , len ) FUNCTION_CALL 6 _asn1_check_infinite_end ( p , len ) CALLEE 7 _asn1_check_infinite_end LEAF_NODE 8 _asn1_check_infinite_end LEAF_NODE 7 ( ARGUMENT 7 p FIELD 8 p LEAF_NODE 9 p LEAF_NODE 7 , ARGUMENT 7 len FIELD 8 len LEAF_NODE 9 len LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 107, "project": "openssl_ast_normal_function_test_160", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 in_utf8 LEAF_NODE 3 in_utf8 PARAMETER_LIST 2 ( unsigned long value , void * arg ) LEAF_NODE 3 ( PARAMETER_DECL 3 unsigned long value TYPE 4 unsigned long TYPE_NAME 5 unsigned long LEAF_NODE 6 unsigned LEAF_NODE 6 long NAME 4 value LEAF_NODE 5 value LEAF_NODE 3 , PARAMETER_DECL 3 void * arg TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 arg LEAF_NODE 5 arg LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int * nchar ; VAR_DECL 4 int * nchar TYPE 5 int * TYPE_NAME 6 int LEAF_NODE 7 int POINTER 6 * LEAF_NODE 7 * NAME 5 nchar LEAF_NODE 6 nchar LEAF_NODE 4 ; EXPR_STATEMENT 3 nchar = arg ; EXPR 4 nchar = arg ASSIGN 5 nchar = arg LVAL 6 nchar FIELD 7 nchar LEAF_NODE 8 nchar ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 arg FIELD 7 arg LEAF_NODE 8 arg LEAF_NODE 4 ; EXPR_STATEMENT 3 ( * nchar ) ++ ; EXPR 4 ( * nchar ) ++ LEAF_NODE 5 ( UNARY_EXPR 5 * nchar UNARY_OPERATOR 6 * LEAF_NODE 7 * FIELD 6 nchar LEAF_NODE 7 nchar LEAF_NODE 5 ) LEAF_NODE 5 ++ LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 108, "project": "openssl_ast_normal_function_test_16", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ssl_parse_clienthello_tlsext LEAF_NODE 3 ssl_parse_clienthello_tlsext PARAMETER_LIST 2 ( SSL * s , unsigned char * * p , unsigned char * limit ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * * p TYPE 4 unsigned char * * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 p LEAF_NODE 5 p LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * limit TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 limit LEAF_NODE 5 limit LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int al ; al = - 1 ; VAR_DECL 4 int al ; al = - 1 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 al LEAF_NODE 6 al LEAF_NODE 5 ; INIT 5 al = - 1 ASSIGN 6 al = - 1 LVAL 7 al NAME 8 al LEAF_NODE 9 al ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * ptmp ; ptmp = * p ; VAR_DECL 4 unsigned char * ptmp ; ptmp = * p TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 ptmp LEAF_NODE 6 ptmp LEAF_NODE 5 ; INIT 5 ptmp = * p ASSIGN 6 ptmp = * p LVAL 7 ptmp NAME 8 ptmp LEAF_NODE 9 ptmp ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * p UNARY_EXPR 8 * p UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 p LEAF_NODE 10 p LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ssl_scan_clienthello_tlsext ( s , p , limit , & al ) <= 0 EXPR 5 ssl_scan_clienthello_tlsext ( s , p , limit , & al ) <= 0 FUNCTION_CALL 6 ssl_scan_clienthello_tlsext ( s , p , limit , & al ) CALLEE 7 ssl_scan_clienthello_tlsext LEAF_NODE 8 ssl_scan_clienthello_tlsext LEAF_NODE 7 ( ARGUMENT 7 s FIELD 8 s LEAF_NODE 9 s LEAF_NODE 7 , ARGUMENT 7 p FIELD 8 p LEAF_NODE 9 p LEAF_NODE 7 , ARGUMENT 7 limit FIELD 8 limit LEAF_NODE 9 limit LEAF_NODE 7 , ARGUMENT 7 & al UNARY_EXPR 8 & al UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 al LEAF_NODE 10 al LEAF_NODE 7 ) REL_OPERATOR 6 <= LEAF_NODE 7 <= FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ssl3_send_alert ( s , SSL3_AL_FATAL , al ) ; EXPR 7 ssl3_send_alert ( s , SSL3_AL_FATAL , al ) FUNCTION_CALL 8 ssl3_send_alert ( s , SSL3_AL_FATAL , al ) CALLEE 9 ssl3_send_alert LEAF_NODE 10 ssl3_send_alert LEAF_NODE 9 ( ARGUMENT 9 s FIELD 10 s LEAF_NODE 11 s LEAF_NODE 9 , ARGUMENT 9 SSL3_AL_FATAL FIELD 10 SSL3_AL_FATAL LEAF_NODE 11 SSL3_AL_FATAL LEAF_NODE 9 , ARGUMENT 9 al FIELD 10 al LEAF_NODE 11 al LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ssl_check_clienthello_tlsext_early ( s ) <= 0 EXPR 5 ssl_check_clienthello_tlsext_early ( s ) <= 0 FUNCTION_CALL 6 ssl_check_clienthello_tlsext_early ( s ) CALLEE 7 ssl_check_clienthello_tlsext_early LEAF_NODE 8 ssl_check_clienthello_tlsext_early LEAF_NODE 7 ( ARGUMENT 7 s FIELD 8 s LEAF_NODE 9 s LEAF_NODE 7 ) REL_OPERATOR 6 <= LEAF_NODE 7 <= FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT , SSL_R_CLIENTHELLO_TLSEXT ) ; EXPR 7 SSLerr ( SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT , SSL_R_CLIENTHELLO_TLSEXT ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT , SSL_R_CLIENTHELLO_TLSEXT ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT FIELD 10 SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT LEAF_NODE 11 SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT LEAF_NODE 9 , ARGUMENT 9 SSL_R_CLIENTHELLO_TLSEXT FIELD 10 SSL_R_CLIENTHELLO_TLSEXT LEAF_NODE 11 SSL_R_CLIENTHELLO_TLSEXT LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 custom_ext_init ( & s -> cert -> srv_ext ) ; EXPR 4 custom_ext_init ( & s -> cert -> srv_ext ) FUNCTION_CALL 5 custom_ext_init ( & s -> cert -> srv_ext ) CALLEE 6 custom_ext_init LEAF_NODE 7 custom_ext_init LEAF_NODE 6 ( ARGUMENT 6 & s -> cert -> srv_ext UNARY_EXPR 7 & s -> cert -> srv_ext UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 s -> cert -> srv_ext LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 cert LEAF_NODE 9 -> LEAF_NODE 9 srv_ext LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ssl_scan_clienthello_custom_tlsext ( s , ptmp , limit , & al ) <= 0 EXPR 5 ssl_scan_clienthello_custom_tlsext ( s , ptmp , limit , & al ) <= 0 FUNCTION_CALL 6 ssl_scan_clienthello_custom_tlsext ( s , ptmp , limit , & al ) CALLEE 7 ssl_scan_clienthello_custom_tlsext LEAF_NODE 8 ssl_scan_clienthello_custom_tlsext LEAF_NODE 7 ( ARGUMENT 7 s FIELD 8 s LEAF_NODE 9 s LEAF_NODE 7 , ARGUMENT 7 ptmp FIELD 8 ptmp LEAF_NODE 9 ptmp LEAF_NODE 7 , ARGUMENT 7 limit FIELD 8 limit LEAF_NODE 9 limit LEAF_NODE 7 , ARGUMENT 7 & al UNARY_EXPR 8 & al UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 al LEAF_NODE 10 al LEAF_NODE 7 ) REL_OPERATOR 6 <= LEAF_NODE 7 <= FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ssl3_send_alert ( s , SSL3_AL_FATAL , al ) ; EXPR 7 ssl3_send_alert ( s , SSL3_AL_FATAL , al ) FUNCTION_CALL 8 ssl3_send_alert ( s , SSL3_AL_FATAL , al ) CALLEE 9 ssl3_send_alert LEAF_NODE 10 ssl3_send_alert LEAF_NODE 9 ( ARGUMENT 9 s FIELD 10 s LEAF_NODE 11 s LEAF_NODE 9 , ARGUMENT 9 SSL3_AL_FATAL FIELD 10 SSL3_AL_FATAL LEAF_NODE 11 SSL3_AL_FATAL LEAF_NODE 9 , ARGUMENT 9 al FIELD 10 al LEAF_NODE 11 al LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 109, "project": "openssl_ast_vul_function_test_10", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 const EVP_PKEY_ASN1_METHOD * TYPE_NAME 3 const EVP_PKEY_ASN1_METHOD LEAF_NODE 4 const LEAF_NODE 4 EVP_PKEY_ASN1_METHOD LEAF_NODE 3 * FUNCTION_NAME 2 EVP_PKEY_get0_asn1 LEAF_NODE 3 EVP_PKEY_get0_asn1 PARAMETER_LIST 2 ( const EVP_PKEY * pkey ) LEAF_NODE 3 ( PARAMETER_DECL 3 const EVP_PKEY * pkey TYPE 4 const EVP_PKEY * TYPE_NAME 5 const EVP_PKEY LEAF_NODE 6 const LEAF_NODE 6 EVP_PKEY POINTER 5 * LEAF_NODE 6 * NAME 4 pkey LEAF_NODE 5 pkey LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return pkey -> ameth ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 pkey -> ameth EXPR 5 pkey -> ameth FIELD 6 pkey -> ameth LEAF_NODE 7 pkey LEAF_NODE 7 -> LEAF_NODE 7 ameth LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 110, "project": "openssl_ast_normal_function_test_171", "target": 0}
{"func": "SIMPLE_DECL 1 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } ; CLASS_DEF 2 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } CLASS_DEF 3 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } LEAF_NODE 4 struct CLASS_NAME 4 async_ctrs LEAF_NODE 5 async_ctrs LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned int rctr ; unsigned int wctr ; SIMPLE_DECL 5 unsigned int rctr ; VAR_DECL 6 unsigned int rctr TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rctr LEAF_NODE 8 rctr LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int wctr ; VAR_DECL 6 unsigned int wctr TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 wctr LEAF_NODE 8 wctr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_job_st ASYNC_JOB ; VAR_DECL 2 struct async_job_st ASYNC_JOB TYPE 3 struct async_job_st TYPE_NAME 4 struct async_job_st LEAF_NODE 5 struct LEAF_NODE 5 async_job_st NAME 3 ASYNC_JOB LEAF_NODE 4 ASYNC_JOB LEAF_NODE 2 ; SIMPLE_DECL 1 ASYNC_JOB * currjob ; currjob = NULL ; VAR_DECL 2 ASYNC_JOB * currjob ; currjob = NULL TYPE 3 ASYNC_JOB * TYPE_NAME 4 ASYNC_JOB LEAF_NODE 5 ASYNC_JOB POINTER 4 * LEAF_NODE 5 * NAME 3 currjob LEAF_NODE 4 currjob LEAF_NODE 3 ; INIT 3 currjob = NULL ASSIGN 4 currjob = NULL LVAL 5 currjob NAME 6 currjob LEAF_NODE 7 currjob ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 save_current LEAF_NODE 3 save_current PARAMETER_LIST 2 ( void * args ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * args TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 args LEAF_NODE 5 args LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 currjob = ASYNC_get_current_job ( ) ; EXPR 4 currjob = ASYNC_get_current_job ( ) ASSIGN 5 currjob = ASYNC_get_current_job ( ) LVAL 6 currjob FIELD 7 currjob LEAF_NODE 8 currjob ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ASYNC_get_current_job ( ) FUNCTION_CALL 7 ASYNC_get_current_job ( ) CALLEE 8 ASYNC_get_current_job LEAF_NODE 9 ASYNC_get_current_job LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ASYNC_pause_job ( ) ; EXPR 4 ASYNC_pause_job ( ) FUNCTION_CALL 5 ASYNC_pause_job ( ) CALLEE 6 ASYNC_pause_job LEAF_NODE 7 ASYNC_pause_job LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 111, "project": "openssl_ast_normal_function_test_125", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; SIMPLE_DECL 1 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } ; CLASS_DEF 2 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } CLASS_DEF 3 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } LEAF_NODE 4 struct CLASS_NAME 4 testdata LEAF_NODE 5 testdata LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; SIMPLE_DECL 5 char * data ; VAR_DECL 6 char * data TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 int type ; VAR_DECL 6 int type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 type LEAF_NODE 8 type LEAF_NODE 6 ; SIMPLE_DECL 5 int expected_type ; VAR_DECL 6 int expected_type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 expected_type LEAF_NODE 8 expected_type LEAF_NODE 6 ; SIMPLE_DECL 5 int check_result ; VAR_DECL 6 int check_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 check_result LEAF_NODE 8 check_result LEAF_NODE 6 ; SIMPLE_DECL 5 time_t t ; VAR_DECL 6 time_t t TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 t LEAF_NODE 8 t LEAF_NODE 6 ; SIMPLE_DECL 5 int cmp_result ; VAR_DECL 6 int cmp_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 cmp_result LEAF_NODE 8 cmp_result LEAF_NODE 6 ; SIMPLE_DECL 5 int convert_result ; VAR_DECL 6 int convert_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 convert_result LEAF_NODE 8 convert_result LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } ; CLASS_DEF 2 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } CLASS_DEF 3 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } LEAF_NODE 4 struct CLASS_NAME 4 compare_testdata LEAF_NODE 5 compare_testdata LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; SIMPLE_DECL 5 ASN1_TIME t1 ; VAR_DECL 6 ASN1_TIME t1 TYPE 7 ASN1_TIME TYPE_NAME 8 ASN1_TIME LEAF_NODE 9 ASN1_TIME NAME 7 t1 LEAF_NODE 8 t1 LEAF_NODE 6 ; SIMPLE_DECL 5 ASN1_TIME t2 ; VAR_DECL 6 ASN1_TIME t2 TYPE 7 ASN1_TIME TYPE_NAME 8 ASN1_TIME LEAF_NODE 9 ASN1_TIME NAME 7 t2 LEAF_NODE 8 t2 LEAF_NODE 6 ; SIMPLE_DECL 5 int result ; VAR_DECL 6 int result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 result LEAF_NODE 8 result LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TODAY_GEN_STR ; TODAY_GEN_STR = \"20170825000000Z\" ; VAR_DECL 2 unsigned char [ ] TODAY_GEN_STR ; TODAY_GEN_STR = \"20170825000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TODAY_GEN_STR LEAF_NODE 4 TODAY_GEN_STR LEAF_NODE 3 ; INIT 3 TODAY_GEN_STR = \"20170825000000Z\" ASSIGN 4 TODAY_GEN_STR = \"20170825000000Z\" LVAL 5 TODAY_GEN_STR NAME 6 TODAY_GEN_STR LEAF_NODE 7 TODAY_GEN_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"20170825000000Z\" FIELD 6 \"20170825000000Z\" LEAF_NODE 7 \"20170825000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TOMORROW_GEN_STR ; TOMORROW_GEN_STR = \"20170826000000Z\" ; VAR_DECL 2 unsigned char [ ] TOMORROW_GEN_STR ; TOMORROW_GEN_STR = \"20170826000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TOMORROW_GEN_STR LEAF_NODE 4 TOMORROW_GEN_STR LEAF_NODE 3 ; INIT 3 TOMORROW_GEN_STR = \"20170826000000Z\" ASSIGN 4 TOMORROW_GEN_STR = \"20170826000000Z\" LVAL 5 TOMORROW_GEN_STR NAME 6 TOMORROW_GEN_STR LEAF_NODE 7 TOMORROW_GEN_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"20170826000000Z\" FIELD 6 \"20170826000000Z\" LEAF_NODE 7 \"20170826000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TODAY_UTC_STR ; TODAY_UTC_STR = \"170825000000Z\" ; VAR_DECL 2 unsigned char [ ] TODAY_UTC_STR ; TODAY_UTC_STR = \"170825000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TODAY_UTC_STR LEAF_NODE 4 TODAY_UTC_STR LEAF_NODE 3 ; INIT 3 TODAY_UTC_STR = \"170825000000Z\" ASSIGN 4 TODAY_UTC_STR = \"170825000000Z\" LVAL 5 TODAY_UTC_STR NAME 6 TODAY_UTC_STR LEAF_NODE 7 TODAY_UTC_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"170825000000Z\" FIELD 6 \"170825000000Z\" LEAF_NODE 7 \"170825000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TOMORROW_UTC_STR ; TOMORROW_UTC_STR = \"170826000000Z\" ; VAR_DECL 2 unsigned char [ ] TOMORROW_UTC_STR ; TOMORROW_UTC_STR = \"170826000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TOMORROW_UTC_STR LEAF_NODE 4 TOMORROW_UTC_STR LEAF_NODE 3 ; INIT 3 TOMORROW_UTC_STR = \"170826000000Z\" ASSIGN 4 TOMORROW_UTC_STR = \"170826000000Z\" LVAL 5 TOMORROW_UTC_STR NAME 6 TOMORROW_UTC_STR LEAF_NODE 7 TOMORROW_UTC_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"170826000000Z\" FIELD 6 \"170826000000Z\" LEAF_NODE 7 \"170826000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 time_t gtime_t ; gtime_t = 946598400 ; VAR_DECL 2 time_t gtime_t ; gtime_t = 946598400 TYPE 3 time_t TYPE_NAME 4 time_t LEAF_NODE 5 time_t NAME 3 gtime_t LEAF_NODE 4 gtime_t LEAF_NODE 3 ; INIT 3 gtime_t = 946598400 ASSIGN 4 gtime_t = 946598400 LVAL 5 gtime_t NAME 6 gtime_t LEAF_NODE 7 gtime_t ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 946598400 FIELD 6 946598400 LEAF_NODE 7 946598400 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table LEAF_NODE 3 test_table PARAMETER_LIST 2 ( struct testdata * tbl , int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct testdata * tbl TYPE 4 struct testdata * TYPE_NAME 5 struct testdata LEAF_NODE 6 struct LEAF_NODE 6 testdata POINTER 5 * LEAF_NODE 6 * NAME 4 tbl LEAF_NODE 5 tbl LEAF_NODE 3 , PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int error ; error = 0 ; VAR_DECL 4 int error ; error = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 error LEAF_NODE 6 error LEAF_NODE 5 ; INIT 5 error = 0 ASSIGN 6 error = 0 LVAL 7 error NAME 8 error LEAF_NODE 9 error ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 ASN1_TIME atime ; VAR_DECL 4 ASN1_TIME atime TYPE 5 ASN1_TIME TYPE_NAME 6 ASN1_TIME LEAF_NODE 7 ASN1_TIME NAME 5 atime LEAF_NODE 6 atime LEAF_NODE 4 ; SIMPLE_DECL 3 ASN1_TIME * ptime ; VAR_DECL 4 ASN1_TIME * ptime TYPE 5 ASN1_TIME * TYPE_NAME 6 ASN1_TIME LEAF_NODE 7 ASN1_TIME POINTER 6 * LEAF_NODE 7 * NAME 5 ptime LEAF_NODE 6 ptime LEAF_NODE 4 ; SIMPLE_DECL 3 struct testdata * td ; td = & tbl [ idx ] ; VAR_DECL 4 struct testdata * td ; td = & tbl [ idx ] TYPE 5 struct testdata * TYPE_NAME 6 struct testdata LEAF_NODE 7 struct LEAF_NODE 7 testdata POINTER 6 * LEAF_NODE 7 * NAME 5 td LEAF_NODE 6 td LEAF_NODE 5 ; INIT 5 td = & tbl [ idx ] ASSIGN 6 td = & tbl [ idx ] LVAL 7 td NAME 8 td LEAF_NODE 9 td ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & tbl [ idx ] UNARY_EXPR 8 & tbl [ idx ] UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 tbl [ idx ] LEAF_NODE 10 tbl LEAF_NODE 10 [ EXPR 10 idx FIELD 11 idx LEAF_NODE 12 idx LEAF_NODE 10 ] LEAF_NODE 4 ; SIMPLE_DECL 3 int day , int sec ; INIT_DECL_LIST 4 int day , int sec VAR_DECL 5 int day TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 day LEAF_NODE 7 day LEAF_NODE 5 , VAR_DECL 5 int sec TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 sec LEAF_NODE 7 sec LEAF_NODE 4 ; EXPR_STATEMENT 3 atime . data = ( unsigned char * ) td -> data ; EXPR 4 atime . data = ( unsigned char * ) td -> data ASSIGN 5 atime . data = ( unsigned char * ) td -> data LVAL 6 atime . data FIELD 7 atime . data LEAF_NODE 8 atime LEAF_NODE 8 . LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( unsigned char * ) td -> data LEAF_NODE 7 ( TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FIELD 7 td -> data LEAF_NODE 8 td LEAF_NODE 8 -> LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 atime . length = strlen ( ( char * ) atime . data ) ; EXPR 4 atime . length = strlen ( ( char * ) atime . data ) ASSIGN 5 atime . length = strlen ( ( char * ) atime . data ) LVAL 6 atime . length FIELD 7 atime . length LEAF_NODE 8 atime LEAF_NODE 8 . LEAF_NODE 8 length ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 strlen ( ( char * ) atime . data ) FUNCTION_CALL 7 strlen ( ( char * ) atime . data ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 ( char * ) atime . data LEAF_NODE 9 ( TYPE_NAME 9 char LEAF_NODE 10 char LEAF_NODE 9 * LEAF_NODE 9 ) FIELD 9 atime . data LEAF_NODE 10 atime LEAF_NODE 10 . LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 atime . type = td -> type ; EXPR 4 atime . type = td -> type ASSIGN 5 atime . type = td -> type LVAL 6 atime . type FIELD 7 atime . type LEAF_NODE 8 atime LEAF_NODE 8 . LEAF_NODE 8 type ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 td -> type FIELD 7 td -> type LEAF_NODE 8 td LEAF_NODE 8 -> LEAF_NODE 8 type LEAF_NODE 4 ; EXPR_STATEMENT 3 atime . flags = 0 ; EXPR 4 atime . flags = 0 ASSIGN 5 atime . flags = 0 LVAL 6 atime . flags FIELD 7 atime . flags LEAF_NODE 8 atime LEAF_NODE 8 . LEAF_NODE 8 flags ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! TEST_int_eq ( ASN1_TIME_check ( & atime ) , td -> check_result ) EXPR 5 ! TEST_int_eq ( ASN1_TIME_check ( & atime ) , td -> check_result ) UNARY_EXPR 6 ! TEST_int_eq ( ASN1_TIME_check ( & atime ) , td -> check_result ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 TEST_int_eq ( ASN1_TIME_check ( & atime ) , td -> check_result ) CALLEE 8 TEST_int_eq LEAF_NODE 9 TEST_int_eq LEAF_NODE 8 ( ARGUMENT 8 ASN1_TIME_check ( & atime ) FUNCTION_CALL 9 ASN1_TIME_check ( & atime ) CALLEE 10 ASN1_TIME_check LEAF_NODE 11 ASN1_TIME_check LEAF_NODE 10 ( ARGUMENT 10 & atime UNARY_EXPR 11 & atime UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 atime LEAF_NODE 13 atime LEAF_NODE 10 ) LEAF_NODE 8 , ARGUMENT 8 td -> check_result FIELD 9 td -> check_result LEAF_NODE 10 td LEAF_NODE 10 -> LEAF_NODE 10 check_result LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 TEST_info ( \"ASN1_TIME_check(%s) unexpected result\" , atime . data ) ; EXPR 7 TEST_info ( \"ASN1_TIME_check(%s) unexpected result\" , atime . data ) FUNCTION_CALL 8 TEST_info ( \"ASN1_TIME_check(%s) unexpected result\" , atime . data ) CALLEE 9 TEST_info LEAF_NODE 10 TEST_info LEAF_NODE 9 ( ARGUMENT 9 \"ASN1_TIME_check(%s) unexpected result\" FIELD 10 \"ASN1_TIME_check(%s) unexpected result\" LEAF_NODE 11 \"ASN1_TIME_check(%s) unexpected result\" LEAF_NODE 9 , ARGUMENT 9 atime . data FIELD 10 atime . data LEAF_NODE 11 atime LEAF_NODE 11 . LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 error = 1 ; EXPR 7 error = 1 ASSIGN 8 error = 1 LVAL 9 error FIELD 10 error LEAF_NODE 11 error ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 td -> check_result == 0 EXPR 5 td -> check_result == 0 FIELD 6 td -> check_result LEAF_NODE 7 td LEAF_NODE 7 -> LEAF_NODE 7 check_result EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 1 EXPR 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( & atime , td -> t ) , 0 ) EXPR 5 ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( & atime , td -> t ) , 0 ) UNARY_EXPR 6 ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( & atime , td -> t ) , 0 ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 TEST_int_eq ( ASN1_TIME_cmp_time_t ( & atime , td -> t ) , 0 ) CALLEE 8 TEST_int_eq LEAF_NODE 9 TEST_int_eq LEAF_NODE 8 ( ARGUMENT 8 ASN1_TIME_cmp_time_t ( & atime , td -> t ) FUNCTION_CALL 9 ASN1_TIME_cmp_time_t ( & atime , td -> t ) CALLEE 10 ASN1_TIME_cmp_time_t LEAF_NODE 11 ASN1_TIME_cmp_time_t LEAF_NODE 10 ( ARGUMENT 10 & atime UNARY_EXPR 11 & atime UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 atime LEAF_NODE 13 atime LEAF_NODE 10 , ARGUMENT 10 td -> t FIELD 11 td -> t LEAF_NODE 12 td LEAF_NODE 12 -> LEAF_NODE 12 t LEAF_NODE 10 ) LEAF_NODE 8 , ARGUMENT 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 TEST_info ( \"ASN1_TIME_cmp_time_t(%s vs %ld) compare failed\" , atime . data , ( long ) td -> t ) ; EXPR 7 TEST_info ( \"ASN1_TIME_cmp_time_t(%s vs %ld) compare failed\" , atime . data , ( long ) td -> t ) FUNCTION_CALL 8 TEST_info ( \"ASN1_TIME_cmp_time_t(%s vs %ld) compare failed\" , atime . data , ( long ) td -> t ) CALLEE 9 TEST_info LEAF_NODE 10 TEST_info LEAF_NODE 9 ( ARGUMENT 9 \"ASN1_TIME_cmp_time_t(%s vs %ld) compare failed\" FIELD 10 \"ASN1_TIME_cmp_time_t(%s vs %ld) compare failed\" LEAF_NODE 11 \"ASN1_TIME_cmp_time_t(%s vs %ld) compare failed\" LEAF_NODE 9 , ARGUMENT 9 atime . data FIELD 10 atime . data LEAF_NODE 11 atime LEAF_NODE 11 . LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 ( long ) td -> t LEAF_NODE 10 ( TYPE_NAME 10 long LEAF_NODE 11 long LEAF_NODE 10 ) FIELD 10 td -> t LEAF_NODE 11 td LEAF_NODE 11 -> LEAF_NODE 11 t LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 error = 1 ; EXPR 7 error = 1 ASSIGN 8 error = 1 LVAL 9 error FIELD 10 error LEAF_NODE 11 error ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! TEST_true ( ASN1_TIME_diff ( & day , & sec , & atime , & atime ) ) EXPR 5 ! TEST_true ( ASN1_TIME_diff ( & day , & sec , & atime , & atime ) ) UNARY_EXPR 6 ! TEST_true ( ASN1_TIME_diff ( & day , & sec , & atime , & atime ) ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 TEST_true ( ASN1_TIME_diff ( & day , & sec , & atime , & atime ) ) CALLEE 8 TEST_true LEAF_NODE 9 TEST_true LEAF_NODE 8 ( ARGUMENT 8 ASN1_TIME_diff ( & day , & sec , & atime , & atime ) FUNCTION_CALL 9 ASN1_TIME_diff ( & day , & sec , & atime , & atime ) CALLEE 10 ASN1_TIME_diff LEAF_NODE 11 ASN1_TIME_diff LEAF_NODE 10 ( ARGUMENT 10 & day UNARY_EXPR 11 & day UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 day LEAF_NODE 13 day LEAF_NODE 10 , ARGUMENT 10 & sec UNARY_EXPR 11 & sec UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 sec LEAF_NODE 13 sec LEAF_NODE 10 , ARGUMENT 10 & atime UNARY_EXPR 11 & atime UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 atime LEAF_NODE 13 atime LEAF_NODE 10 , ARGUMENT 10 & atime UNARY_EXPR 11 & atime UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 atime LEAF_NODE 13 atime LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 TEST_info ( \"ASN1_TIME_diff(%s) to self failed\" , atime . data ) ; EXPR 7 TEST_info ( \"ASN1_TIME_diff(%s) to self failed\" , atime . data ) FUNCTION_CALL 8 TEST_info ( \"ASN1_TIME_diff(%s) to self failed\" , atime . data ) CALLEE 9 TEST_info LEAF_NODE 10 TEST_info LEAF_NODE 9 ( ARGUMENT 9 \"ASN1_TIME_diff(%s) to self failed\" FIELD 10 \"ASN1_TIME_diff(%s) to self failed\" LEAF_NODE 11 \"ASN1_TIME_diff(%s) to self failed\" LEAF_NODE 9 , ARGUMENT 9 atime . data FIELD 10 atime . data LEAF_NODE 11 atime LEAF_NODE 11 . LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 error = 1 ; EXPR 7 error = 1 ASSIGN 8 error = 1 LVAL 9 error FIELD 10 error LEAF_NODE 11 error ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! TEST_int_eq ( day , 0 ) || ! TEST_int_eq ( sec , 0 ) EXPR 5 ! TEST_int_eq ( day , 0 ) || ! TEST_int_eq ( sec , 0 ) OR 6 ! TEST_int_eq ( day , 0 ) || ! TEST_int_eq ( sec , 0 ) EXPR 7 ! TEST_int_eq ( day , 0 ) UNARY_EXPR 8 ! TEST_int_eq ( day , 0 ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 TEST_int_eq ( day , 0 ) CALLEE 10 TEST_int_eq LEAF_NODE 11 TEST_int_eq LEAF_NODE 10 ( ARGUMENT 10 day FIELD 11 day LEAF_NODE 12 day LEAF_NODE 10 , ARGUMENT 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ) LEAF_NODE 7 || EXPR 7 ! TEST_int_eq ( sec , 0 ) UNARY_EXPR 8 ! TEST_int_eq ( sec , 0 ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 TEST_int_eq ( sec , 0 ) CALLEE 10 TEST_int_eq LEAF_NODE 11 TEST_int_eq LEAF_NODE 10 ( ARGUMENT 10 sec FIELD 11 sec LEAF_NODE 12 sec LEAF_NODE 10 , ARGUMENT 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 TEST_info ( \"ASN1_TIME_diff(%s) to self not equal\" , atime . data ) ; EXPR 7 TEST_info ( \"ASN1_TIME_diff(%s) to self not equal\" , atime . data ) FUNCTION_CALL 8 TEST_info ( \"ASN1_TIME_diff(%s) to self not equal\" , atime . data ) CALLEE 9 TEST_info LEAF_NODE 10 TEST_info LEAF_NODE 9 ( ARGUMENT 9 \"ASN1_TIME_diff(%s) to self not equal\" FIELD 10 \"ASN1_TIME_diff(%s) to self not equal\" LEAF_NODE 11 \"ASN1_TIME_diff(%s) to self not equal\" LEAF_NODE 9 , ARGUMENT 9 atime . data FIELD 10 atime . data LEAF_NODE 11 atime LEAF_NODE 11 . LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 error = 1 ; EXPR 7 error = 1 ASSIGN 8 error = 1 LVAL 9 error FIELD 10 error LEAF_NODE 11 error ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! TEST_true ( ASN1_TIME_diff ( & day , & sec , & gtime , & atime ) ) EXPR 5 ! TEST_true ( ASN1_TIME_diff ( & day , & sec , & gtime , & atime ) ) UNARY_EXPR 6 ! TEST_true ( ASN1_TIME_diff ( & day , & sec , & gtime , & atime ) ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 TEST_true ( ASN1_TIME_diff ( & day , & sec , & gtime , & atime ) ) CALLEE 8 TEST_true LEAF_NODE 9 TEST_true LEAF_NODE 8 ( ARGUMENT 8 ASN1_TIME_diff ( & day , & sec , & gtime , & atime ) FUNCTION_CALL 9 ASN1_TIME_diff ( & day , & sec , & gtime , & atime ) CALLEE 10 ASN1_TIME_diff LEAF_NODE 11 ASN1_TIME_diff LEAF_NODE 10 ( ARGUMENT 10 & day UNARY_EXPR 11 & day UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 day LEAF_NODE 13 day LEAF_NODE 10 , ARGUMENT 10 & sec UNARY_EXPR 11 & sec UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 sec LEAF_NODE 13 sec LEAF_NODE 10 , ARGUMENT 10 & gtime UNARY_EXPR 11 & gtime UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 gtime LEAF_NODE 13 gtime LEAF_NODE 10 , ARGUMENT 10 & atime UNARY_EXPR 11 & atime UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 atime LEAF_NODE 13 atime LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 TEST_info ( \"ASN1_TIME_diff(%s) to baseline failed\" , atime . data ) ; EXPR 7 TEST_info ( \"ASN1_TIME_diff(%s) to baseline failed\" , atime . data ) FUNCTION_CALL 8 TEST_info ( \"ASN1_TIME_diff(%s) to baseline failed\" , atime . data ) CALLEE 9 TEST_info LEAF_NODE 10 TEST_info LEAF_NODE 9 ( ARGUMENT 9 \"ASN1_TIME_diff(%s) to baseline failed\" FIELD 10 \"ASN1_TIME_diff(%s) to baseline failed\" LEAF_NODE 11 \"ASN1_TIME_diff(%s) to baseline failed\" LEAF_NODE 9 , ARGUMENT 9 atime . data FIELD 10 atime . data LEAF_NODE 11 atime LEAF_NODE 11 . LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 error = 1 ; EXPR 7 error = 1 ASSIGN 8 error = 1 LVAL 9 error FIELD 10 error LEAF_NODE 11 error ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ! ( ( td -> cmp_result == 0 && TEST_true ( ( day == 0 && sec == 0 ) ) ) || ( td -> cmp_result == - 1 && TEST_true ( ( day < 0 || sec < 0 ) ) ) || ( td -> cmp_result == 1 && TEST_true ( ( day > 0 || sec > 0 ) ) ) ) EXPR 7 ! ( ( td -> cmp_result == 0 && TEST_true ( ( day == 0 && sec == 0 ) ) ) || ( td -> cmp_result == - 1 && TEST_true ( ( day < 0 || sec < 0 ) ) ) || ( td -> cmp_result == 1 && TEST_true ( ( day > 0 || sec > 0 ) ) ) ) UNARY_EXPR 8 ! ( ( td -> cmp_result == 0 && TEST_true ( ( day == 0 && sec == 0 ) ) ) || ( td -> cmp_result == - 1 && TEST_true ( ( day < 0 || sec < 0 ) ) ) || ( td -> cmp_result == 1 && TEST_true ( ( day > 0 || sec > 0 ) ) ) ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! LEAF_NODE 9 ( OR 9 ( td -> cmp_result == 0 && TEST_true ( ( day == 0 && sec == 0 ) ) ) || ( td -> cmp_result == - 1 && TEST_true ( ( day < 0 || sec < 0 ) ) ) || ( td -> cmp_result == 1 && TEST_true ( ( day > 0 || sec > 0 ) ) ) EXPR 10 ( td -> cmp_result == 0 && TEST_true ( ( day == 0 && sec == 0 ) ) ) LEAF_NODE 11 ( AND 11 td -> cmp_result == 0 && TEST_true ( ( day == 0 && sec == 0 ) ) EXPR 12 td -> cmp_result == 0 FIELD 13 td -> cmp_result LEAF_NODE 14 td LEAF_NODE 14 -> LEAF_NODE 14 cmp_result EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 && EXPR 12 TEST_true ( ( day == 0 && sec == 0 ) ) FUNCTION_CALL 13 TEST_true ( ( day == 0 && sec == 0 ) ) CALLEE 14 TEST_true LEAF_NODE 15 TEST_true LEAF_NODE 14 ( ARGUMENT 14 ( day == 0 && sec == 0 ) LEAF_NODE 15 ( AND 15 day == 0 && sec == 0 EXPR 16 day == 0 FIELD 17 day LEAF_NODE 18 day EQ_OPERATOR 17 == LEAF_NODE 18 == FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 16 && EXPR 16 sec == 0 FIELD 17 sec LEAF_NODE 18 sec EQ_OPERATOR 17 == LEAF_NODE 18 == FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ) LEAF_NODE 14 ) LEAF_NODE 11 ) LEAF_NODE 10 || EXPR 10 ( td -> cmp_result == - 1 && TEST_true ( ( day < 0 || sec < 0 ) ) ) || ( td -> cmp_result == 1 && TEST_true ( ( day > 0 || sec > 0 ) ) ) OR 11 ( td -> cmp_result == - 1 && TEST_true ( ( day < 0 || sec < 0 ) ) ) || ( td -> cmp_result == 1 && TEST_true ( ( day > 0 || sec > 0 ) ) ) EXPR 12 ( td -> cmp_result == - 1 && TEST_true ( ( day < 0 || sec < 0 ) ) ) LEAF_NODE 13 ( AND 13 td -> cmp_result == - 1 && TEST_true ( ( day < 0 || sec < 0 ) ) EXPR 14 td -> cmp_result == - 1 FIELD 15 td -> cmp_result LEAF_NODE 16 td LEAF_NODE 16 -> LEAF_NODE 16 cmp_result EQ_OPERATOR 15 == LEAF_NODE 16 == UNARY_EXPR 15 - 1 UNARY_OPERATOR 16 - LEAF_NODE 17 - FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 14 && EXPR 14 TEST_true ( ( day < 0 || sec < 0 ) ) FUNCTION_CALL 15 TEST_true ( ( day < 0 || sec < 0 ) ) CALLEE 16 TEST_true LEAF_NODE 17 TEST_true LEAF_NODE 16 ( ARGUMENT 16 ( day < 0 || sec < 0 ) LEAF_NODE 17 ( OR 17 day < 0 || sec < 0 EXPR 18 day < 0 FIELD 19 day LEAF_NODE 20 day REL_OPERATOR 19 < LEAF_NODE 20 < FIELD 19 0 LEAF_NODE 20 0 LEAF_NODE 18 || EXPR 18 sec < 0 FIELD 19 sec LEAF_NODE 20 sec REL_OPERATOR 19 < LEAF_NODE 20 < FIELD 19 0 LEAF_NODE 20 0 LEAF_NODE 17 ) LEAF_NODE 16 ) LEAF_NODE 13 ) LEAF_NODE 12 || EXPR 12 ( td -> cmp_result == 1 && TEST_true ( ( day > 0 || sec > 0 ) ) ) LEAF_NODE 13 ( AND 13 td -> cmp_result == 1 && TEST_true ( ( day > 0 || sec > 0 ) ) EXPR 14 td -> cmp_result == 1 FIELD 15 td -> cmp_result LEAF_NODE 16 td LEAF_NODE 16 -> LEAF_NODE 16 cmp_result EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 && EXPR 14 TEST_true ( ( day > 0 || sec > 0 ) ) FUNCTION_CALL 15 TEST_true ( ( day > 0 || sec > 0 ) ) CALLEE 16 TEST_true LEAF_NODE 17 TEST_true LEAF_NODE 16 ( ARGUMENT 16 ( day > 0 || sec > 0 ) LEAF_NODE 17 ( OR 17 day > 0 || sec > 0 EXPR 18 day > 0 FIELD 19 day LEAF_NODE 20 day REL_OPERATOR 19 > LEAF_NODE 20 > FIELD 19 0 LEAF_NODE 20 0 LEAF_NODE 18 || EXPR 18 sec > 0 FIELD 19 sec LEAF_NODE 20 sec REL_OPERATOR 19 > LEAF_NODE 20 > FIELD 19 0 LEAF_NODE 20 0 LEAF_NODE 17 ) LEAF_NODE 16 ) LEAF_NODE 13 ) LEAF_NODE 9 ) LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 TEST_info ( \"ASN1_TIME_diff(%s) to baseline bad comparison\" , atime . data ) ; EXPR 9 TEST_info ( \"ASN1_TIME_diff(%s) to baseline bad comparison\" , atime . data ) FUNCTION_CALL 10 TEST_info ( \"ASN1_TIME_diff(%s) to baseline bad comparison\" , atime . data ) CALLEE 11 TEST_info LEAF_NODE 12 TEST_info LEAF_NODE 11 ( ARGUMENT 11 \"ASN1_TIME_diff(%s) to baseline bad comparison\" FIELD 12 \"ASN1_TIME_diff(%s) to baseline bad comparison\" LEAF_NODE 13 \"ASN1_TIME_diff(%s) to baseline bad comparison\" LEAF_NODE 11 , ARGUMENT 11 atime . data FIELD 12 atime . data LEAF_NODE 13 atime LEAF_NODE 13 . LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 8 error = 1 ; EXPR 9 error = 1 ASSIGN 10 error = 1 LVAL 11 error FIELD 12 error LEAF_NODE 13 error ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( & atime , gtime_t ) , td -> cmp_result ) EXPR 5 ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( & atime , gtime_t ) , td -> cmp_result ) UNARY_EXPR 6 ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( & atime , gtime_t ) , td -> cmp_result ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 TEST_int_eq ( ASN1_TIME_cmp_time_t ( & atime , gtime_t ) , td -> cmp_result ) CALLEE 8 TEST_int_eq LEAF_NODE 9 TEST_int_eq LEAF_NODE 8 ( ARGUMENT 8 ASN1_TIME_cmp_time_t ( & atime , gtime_t ) FUNCTION_CALL 9 ASN1_TIME_cmp_time_t ( & atime , gtime_t ) CALLEE 10 ASN1_TIME_cmp_time_t LEAF_NODE 11 ASN1_TIME_cmp_time_t LEAF_NODE 10 ( ARGUMENT 10 & atime UNARY_EXPR 11 & atime UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 atime LEAF_NODE 13 atime LEAF_NODE 10 , ARGUMENT 10 gtime_t FIELD 11 gtime_t LEAF_NODE 12 gtime_t LEAF_NODE 10 ) LEAF_NODE 8 , ARGUMENT 8 td -> cmp_result FIELD 9 td -> cmp_result LEAF_NODE 10 td LEAF_NODE 10 -> LEAF_NODE 10 cmp_result LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 TEST_info ( \"ASN1_TIME_cmp_time_t(%s) to baseline bad comparison\" , atime . data ) ; EXPR 7 TEST_info ( \"ASN1_TIME_cmp_time_t(%s) to baseline bad comparison\" , atime . data ) FUNCTION_CALL 8 TEST_info ( \"ASN1_TIME_cmp_time_t(%s) to baseline bad comparison\" , atime . data ) CALLEE 9 TEST_info LEAF_NODE 10 TEST_info LEAF_NODE 9 ( ARGUMENT 9 \"ASN1_TIME_cmp_time_t(%s) to baseline bad comparison\" FIELD 10 \"ASN1_TIME_cmp_time_t(%s) to baseline bad comparison\" LEAF_NODE 11 \"ASN1_TIME_cmp_time_t(%s) to baseline bad comparison\" LEAF_NODE 9 , ARGUMENT 9 atime . data FIELD 10 atime . data LEAF_NODE 11 atime LEAF_NODE 11 . LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 error = 1 ; EXPR 7 error = 1 ASSIGN 8 error = 1 LVAL 9 error FIELD 10 error LEAF_NODE 11 error ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ptime = ASN1_TIME_set ( NULL , td -> t ) ; EXPR 4 ptime = ASN1_TIME_set ( NULL , td -> t ) ASSIGN 5 ptime = ASN1_TIME_set ( NULL , td -> t ) LVAL 6 ptime FIELD 7 ptime LEAF_NODE 8 ptime ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ASN1_TIME_set ( NULL , td -> t ) FUNCTION_CALL 7 ASN1_TIME_set ( NULL , td -> t ) CALLEE 8 ASN1_TIME_set LEAF_NODE 9 ASN1_TIME_set LEAF_NODE 8 ( ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 , ARGUMENT 8 td -> t FIELD 9 td -> t LEAF_NODE 10 td LEAF_NODE 10 -> LEAF_NODE 10 t LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! TEST_ptr ( ptime ) EXPR 5 ! TEST_ptr ( ptime ) UNARY_EXPR 6 ! TEST_ptr ( ptime ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 TEST_ptr ( ptime ) CALLEE 8 TEST_ptr LEAF_NODE 9 TEST_ptr LEAF_NODE 8 ( ARGUMENT 8 ptime FIELD 9 ptime LEAF_NODE 10 ptime LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 TEST_info ( \"ASN1_TIME_set(%ld) failed\" , ( long ) td -> t ) ; EXPR 7 TEST_info ( \"ASN1_TIME_set(%ld) failed\" , ( long ) td -> t ) FUNCTION_CALL 8 TEST_info ( \"ASN1_TIME_set(%ld) failed\" , ( long ) td -> t ) CALLEE 9 TEST_info LEAF_NODE 10 TEST_info LEAF_NODE 9 ( ARGUMENT 9 \"ASN1_TIME_set(%ld) failed\" FIELD 10 \"ASN1_TIME_set(%ld) failed\" LEAF_NODE 11 \"ASN1_TIME_set(%ld) failed\" LEAF_NODE 9 , ARGUMENT 9 ( long ) td -> t LEAF_NODE 10 ( TYPE_NAME 10 long LEAF_NODE 11 long LEAF_NODE 10 ) FIELD 10 td -> t LEAF_NODE 11 td LEAF_NODE 11 -> LEAF_NODE 11 t LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 error = 1 ; EXPR 7 error = 1 ASSIGN 8 error = 1 LVAL 9 error FIELD 10 error LEAF_NODE 11 error ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int local_error ; local_error = 0 ; VAR_DECL 7 int local_error ; local_error = 0 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 local_error LEAF_NODE 9 local_error LEAF_NODE 8 ; INIT 8 local_error = 0 ASSIGN 9 local_error = 0 LVAL 10 local_error NAME 11 local_error LEAF_NODE 12 local_error ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( ptime , td -> t ) , 0 ) EXPR 8 ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( ptime , td -> t ) , 0 ) UNARY_EXPR 9 ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( ptime , td -> t ) , 0 ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 TEST_int_eq ( ASN1_TIME_cmp_time_t ( ptime , td -> t ) , 0 ) CALLEE 11 TEST_int_eq LEAF_NODE 12 TEST_int_eq LEAF_NODE 11 ( ARGUMENT 11 ASN1_TIME_cmp_time_t ( ptime , td -> t ) FUNCTION_CALL 12 ASN1_TIME_cmp_time_t ( ptime , td -> t ) CALLEE 13 ASN1_TIME_cmp_time_t LEAF_NODE 14 ASN1_TIME_cmp_time_t LEAF_NODE 13 ( ARGUMENT 13 ptime FIELD 14 ptime LEAF_NODE 15 ptime LEAF_NODE 13 , ARGUMENT 13 td -> t FIELD 14 td -> t LEAF_NODE 15 td LEAF_NODE 15 -> LEAF_NODE 15 t LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 TEST_info ( \"ASN1_TIME_set(%ld) compare failed (%s->%s)\" , ( long ) td -> t , td -> data , ptime -> data ) ; EXPR 10 TEST_info ( \"ASN1_TIME_set(%ld) compare failed (%s->%s)\" , ( long ) td -> t , td -> data , ptime -> data ) FUNCTION_CALL 11 TEST_info ( \"ASN1_TIME_set(%ld) compare failed (%s->%s)\" , ( long ) td -> t , td -> data , ptime -> data ) CALLEE 12 TEST_info LEAF_NODE 13 TEST_info LEAF_NODE 12 ( ARGUMENT 12 \"ASN1_TIME_set(%ld) compare failed (%s->%s)\" FIELD 13 \"ASN1_TIME_set(%ld) compare failed (%s->%s)\" LEAF_NODE 14 \"ASN1_TIME_set(%ld) compare failed (%s->%s)\" LEAF_NODE 12 , ARGUMENT 12 ( long ) td -> t LEAF_NODE 13 ( TYPE_NAME 13 long LEAF_NODE 14 long LEAF_NODE 13 ) FIELD 13 td -> t LEAF_NODE 14 td LEAF_NODE 14 -> LEAF_NODE 14 t LEAF_NODE 12 , ARGUMENT 12 td -> data FIELD 13 td -> data LEAF_NODE 14 td LEAF_NODE 14 -> LEAF_NODE 14 data LEAF_NODE 12 , ARGUMENT 12 ptime -> data FIELD 13 ptime -> data LEAF_NODE 14 ptime LEAF_NODE 14 -> LEAF_NODE 14 data LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 local_error = error = 1 ; EXPR 10 local_error = error = 1 ASSIGN 11 local_error = error = 1 LVAL 12 local_error FIELD 13 local_error LEAF_NODE 14 local_error ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 error = 1 ASSIGN 13 error = 1 LVAL 14 error FIELD 15 error LEAF_NODE 16 error ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! TEST_int_eq ( ptime -> type , td -> expected_type ) EXPR 8 ! TEST_int_eq ( ptime -> type , td -> expected_type ) UNARY_EXPR 9 ! TEST_int_eq ( ptime -> type , td -> expected_type ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 TEST_int_eq ( ptime -> type , td -> expected_type ) CALLEE 11 TEST_int_eq LEAF_NODE 12 TEST_int_eq LEAF_NODE 11 ( ARGUMENT 11 ptime -> type FIELD 12 ptime -> type LEAF_NODE 13 ptime LEAF_NODE 13 -> LEAF_NODE 13 type LEAF_NODE 11 , ARGUMENT 11 td -> expected_type FIELD 12 td -> expected_type LEAF_NODE 13 td LEAF_NODE 13 -> LEAF_NODE 13 expected_type LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 TEST_info ( \"ASN1_TIME_set(%ld) unexpected type\" , ( long ) td -> t ) ; EXPR 10 TEST_info ( \"ASN1_TIME_set(%ld) unexpected type\" , ( long ) td -> t ) FUNCTION_CALL 11 TEST_info ( \"ASN1_TIME_set(%ld) unexpected type\" , ( long ) td -> t ) CALLEE 12 TEST_info LEAF_NODE 13 TEST_info LEAF_NODE 12 ( ARGUMENT 12 \"ASN1_TIME_set(%ld) unexpected type\" FIELD 13 \"ASN1_TIME_set(%ld) unexpected type\" LEAF_NODE 14 \"ASN1_TIME_set(%ld) unexpected type\" LEAF_NODE 12 , ARGUMENT 12 ( long ) td -> t LEAF_NODE 13 ( TYPE_NAME 13 long LEAF_NODE 14 long LEAF_NODE 13 ) FIELD 13 td -> t LEAF_NODE 14 td LEAF_NODE 14 -> LEAF_NODE 14 t LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 local_error = error = 1 ; EXPR 10 local_error = error = 1 ASSIGN 11 local_error = error = 1 LVAL 12 local_error FIELD 13 local_error LEAF_NODE 14 local_error ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 error = 1 ASSIGN 13 error = 1 LVAL 14 error FIELD 15 error LEAF_NODE 16 error ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 local_error EXPR 8 local_error FIELD 9 local_error LEAF_NODE 10 local_error LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 TEST_info ( \"ASN1_TIME_set() = %*s\" , ptime -> length , ptime -> data ) ; EXPR 9 TEST_info ( \"ASN1_TIME_set() = %*s\" , ptime -> length , ptime -> data ) FUNCTION_CALL 10 TEST_info ( \"ASN1_TIME_set() = %*s\" , ptime -> length , ptime -> data ) CALLEE 11 TEST_info LEAF_NODE 12 TEST_info LEAF_NODE 11 ( ARGUMENT 11 \"ASN1_TIME_set() = %*s\" FIELD 12 \"ASN1_TIME_set() = %*s\" LEAF_NODE 13 \"ASN1_TIME_set() = %*s\" LEAF_NODE 11 , ARGUMENT 11 ptime -> length FIELD 12 ptime -> length LEAF_NODE 13 ptime LEAF_NODE 13 -> LEAF_NODE 13 length LEAF_NODE 11 , ARGUMENT 11 ptime -> data FIELD 12 ptime -> data LEAF_NODE 13 ptime LEAF_NODE 13 -> LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 6 ASN1_TIME_free ( ptime ) ; EXPR 7 ASN1_TIME_free ( ptime ) FUNCTION_CALL 8 ASN1_TIME_free ( ptime ) CALLEE 9 ASN1_TIME_free LEAF_NODE 10 ASN1_TIME_free LEAF_NODE 9 ( ARGUMENT 9 ptime FIELD 10 ptime LEAF_NODE 11 ptime LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ptime = ASN1_TIME_new ( ) ; EXPR 4 ptime = ASN1_TIME_new ( ) ASSIGN 5 ptime = ASN1_TIME_new ( ) LVAL 6 ptime FIELD 7 ptime LEAF_NODE 8 ptime ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ASN1_TIME_new ( ) FUNCTION_CALL 7 ASN1_TIME_new ( ) CALLEE 8 ASN1_TIME_new LEAF_NODE 9 ASN1_TIME_new LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! TEST_ptr ( ptime ) EXPR 5 ! TEST_ptr ( ptime ) UNARY_EXPR 6 ! TEST_ptr ( ptime ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 TEST_ptr ( ptime ) CALLEE 8 TEST_ptr LEAF_NODE 9 TEST_ptr LEAF_NODE 8 ( ARGUMENT 8 ptime FIELD 9 ptime LEAF_NODE 10 ptime LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 TEST_info ( \"ASN1_TIME_new() failed\" ) ; EXPR 7 TEST_info ( \"ASN1_TIME_new() failed\" ) FUNCTION_CALL 8 TEST_info ( \"ASN1_TIME_new() failed\" ) CALLEE 9 TEST_info LEAF_NODE 10 TEST_info LEAF_NODE 9 ( ARGUMENT 9 \"ASN1_TIME_new() failed\" FIELD 10 \"ASN1_TIME_new() failed\" LEAF_NODE 11 \"ASN1_TIME_new() failed\" LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 error = 1 ; EXPR 7 error = 1 ASSIGN 8 error = 1 LVAL 9 error FIELD 10 error LEAF_NODE 11 error ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int local_error ; local_error = 0 ; VAR_DECL 7 int local_error ; local_error = 0 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 local_error LEAF_NODE 9 local_error LEAF_NODE 8 ; INIT 8 local_error = 0 ASSIGN 9 local_error = 0 LVAL 10 local_error NAME 11 local_error LEAF_NODE 12 local_error ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! TEST_int_eq ( ASN1_TIME_set_string ( ptime , td -> data ) , td -> check_result ) EXPR 8 ! TEST_int_eq ( ASN1_TIME_set_string ( ptime , td -> data ) , td -> check_result ) UNARY_EXPR 9 ! TEST_int_eq ( ASN1_TIME_set_string ( ptime , td -> data ) , td -> check_result ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 TEST_int_eq ( ASN1_TIME_set_string ( ptime , td -> data ) , td -> check_result ) CALLEE 11 TEST_int_eq LEAF_NODE 12 TEST_int_eq LEAF_NODE 11 ( ARGUMENT 11 ASN1_TIME_set_string ( ptime , td -> data ) FUNCTION_CALL 12 ASN1_TIME_set_string ( ptime , td -> data ) CALLEE 13 ASN1_TIME_set_string LEAF_NODE 14 ASN1_TIME_set_string LEAF_NODE 13 ( ARGUMENT 13 ptime FIELD 14 ptime LEAF_NODE 15 ptime LEAF_NODE 13 , ARGUMENT 13 td -> data FIELD 14 td -> data LEAF_NODE 15 td LEAF_NODE 15 -> LEAF_NODE 15 data LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 td -> check_result FIELD 12 td -> check_result LEAF_NODE 13 td LEAF_NODE 13 -> LEAF_NODE 13 check_result LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 TEST_info ( \"ASN1_TIME_set_string_gmt(%s) failed\" , td -> data ) ; EXPR 10 TEST_info ( \"ASN1_TIME_set_string_gmt(%s) failed\" , td -> data ) FUNCTION_CALL 11 TEST_info ( \"ASN1_TIME_set_string_gmt(%s) failed\" , td -> data ) CALLEE 12 TEST_info LEAF_NODE 13 TEST_info LEAF_NODE 12 ( ARGUMENT 12 \"ASN1_TIME_set_string_gmt(%s) failed\" FIELD 13 \"ASN1_TIME_set_string_gmt(%s) failed\" LEAF_NODE 14 \"ASN1_TIME_set_string_gmt(%s) failed\" LEAF_NODE 12 , ARGUMENT 12 td -> data FIELD 13 td -> data LEAF_NODE 14 td LEAF_NODE 14 -> LEAF_NODE 14 data LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 local_error = error = 1 ; EXPR 10 local_error = error = 1 ASSIGN 11 local_error = error = 1 LVAL 12 local_error FIELD 13 local_error LEAF_NODE 14 local_error ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 error = 1 ASSIGN 13 error = 1 LVAL 14 error FIELD 15 error LEAF_NODE 16 error ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! TEST_int_eq ( ASN1_TIME_normalize ( ptime ) , td -> check_result ) EXPR 8 ! TEST_int_eq ( ASN1_TIME_normalize ( ptime ) , td -> check_result ) UNARY_EXPR 9 ! TEST_int_eq ( ASN1_TIME_normalize ( ptime ) , td -> check_result ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 TEST_int_eq ( ASN1_TIME_normalize ( ptime ) , td -> check_result ) CALLEE 11 TEST_int_eq LEAF_NODE 12 TEST_int_eq LEAF_NODE 11 ( ARGUMENT 11 ASN1_TIME_normalize ( ptime ) FUNCTION_CALL 12 ASN1_TIME_normalize ( ptime ) CALLEE 13 ASN1_TIME_normalize LEAF_NODE 14 ASN1_TIME_normalize LEAF_NODE 13 ( ARGUMENT 13 ptime FIELD 14 ptime LEAF_NODE 15 ptime LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 td -> check_result FIELD 12 td -> check_result LEAF_NODE 13 td LEAF_NODE 13 -> LEAF_NODE 13 check_result LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 TEST_info ( \"ASN1_TIME_normalize(%s) failed\" , td -> data ) ; EXPR 10 TEST_info ( \"ASN1_TIME_normalize(%s) failed\" , td -> data ) FUNCTION_CALL 11 TEST_info ( \"ASN1_TIME_normalize(%s) failed\" , td -> data ) CALLEE 12 TEST_info LEAF_NODE 13 TEST_info LEAF_NODE 12 ( ARGUMENT 12 \"ASN1_TIME_normalize(%s) failed\" FIELD 13 \"ASN1_TIME_normalize(%s) failed\" LEAF_NODE 14 \"ASN1_TIME_normalize(%s) failed\" LEAF_NODE 12 , ARGUMENT 12 td -> data FIELD 13 td -> data LEAF_NODE 14 td LEAF_NODE 14 -> LEAF_NODE 14 data LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 local_error = error = 1 ; EXPR 10 local_error = error = 1 ASSIGN 11 local_error = error = 1 LVAL 12 local_error FIELD 13 local_error LEAF_NODE 14 local_error ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 error = 1 ASSIGN 13 error = 1 LVAL 14 error FIELD 15 error LEAF_NODE 16 error ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! TEST_int_eq ( ptime -> type , td -> expected_type ) EXPR 8 ! TEST_int_eq ( ptime -> type , td -> expected_type ) UNARY_EXPR 9 ! TEST_int_eq ( ptime -> type , td -> expected_type ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 TEST_int_eq ( ptime -> type , td -> expected_type ) CALLEE 11 TEST_int_eq LEAF_NODE 12 TEST_int_eq LEAF_NODE 11 ( ARGUMENT 11 ptime -> type FIELD 12 ptime -> type LEAF_NODE 13 ptime LEAF_NODE 13 -> LEAF_NODE 13 type LEAF_NODE 11 , ARGUMENT 11 td -> expected_type FIELD 12 td -> expected_type LEAF_NODE 13 td LEAF_NODE 13 -> LEAF_NODE 13 expected_type LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 TEST_info ( \"ASN1_TIME_set_string_gmt(%s) unexpected type\" , td -> data ) ; EXPR 10 TEST_info ( \"ASN1_TIME_set_string_gmt(%s) unexpected type\" , td -> data ) FUNCTION_CALL 11 TEST_info ( \"ASN1_TIME_set_string_gmt(%s) unexpected type\" , td -> data ) CALLEE 12 TEST_info LEAF_NODE 13 TEST_info LEAF_NODE 12 ( ARGUMENT 12 \"ASN1_TIME_set_string_gmt(%s) unexpected type\" FIELD 13 \"ASN1_TIME_set_string_gmt(%s) unexpected type\" LEAF_NODE 14 \"ASN1_TIME_set_string_gmt(%s) unexpected type\" LEAF_NODE 12 , ARGUMENT 12 td -> data FIELD 13 td -> data LEAF_NODE 14 td LEAF_NODE 14 -> LEAF_NODE 14 data LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 local_error = error = 1 ; EXPR 10 local_error = error = 1 ASSIGN 11 local_error = error = 1 LVAL 12 local_error FIELD 13 local_error LEAF_NODE 14 local_error ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 error = 1 ASSIGN 13 error = 1 LVAL 14 error FIELD 15 error LEAF_NODE 16 error ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 day = sec = 0 ; EXPR 7 day = sec = 0 ASSIGN 8 day = sec = 0 LVAL 9 day FIELD 10 day LEAF_NODE 11 day ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 sec = 0 ASSIGN 10 sec = 0 LVAL 11 sec FIELD 12 sec LEAF_NODE 13 sec ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! TEST_true ( ASN1_TIME_diff ( & day , & sec , ptime , & atime ) ) || ! TEST_int_eq ( day , 0 ) || ! TEST_int_eq ( sec , 0 ) EXPR 8 ! TEST_true ( ASN1_TIME_diff ( & day , & sec , ptime , & atime ) ) || ! TEST_int_eq ( day , 0 ) || ! TEST_int_eq ( sec , 0 ) OR 9 ! TEST_true ( ASN1_TIME_diff ( & day , & sec , ptime , & atime ) ) || ! TEST_int_eq ( day , 0 ) || ! TEST_int_eq ( sec , 0 ) EXPR 10 ! TEST_true ( ASN1_TIME_diff ( & day , & sec , ptime , & atime ) ) UNARY_EXPR 11 ! TEST_true ( ASN1_TIME_diff ( & day , & sec , ptime , & atime ) ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 TEST_true ( ASN1_TIME_diff ( & day , & sec , ptime , & atime ) ) CALLEE 13 TEST_true LEAF_NODE 14 TEST_true LEAF_NODE 13 ( ARGUMENT 13 ASN1_TIME_diff ( & day , & sec , ptime , & atime ) FUNCTION_CALL 14 ASN1_TIME_diff ( & day , & sec , ptime , & atime ) CALLEE 15 ASN1_TIME_diff LEAF_NODE 16 ASN1_TIME_diff LEAF_NODE 15 ( ARGUMENT 15 & day UNARY_EXPR 16 & day UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 day LEAF_NODE 18 day LEAF_NODE 15 , ARGUMENT 15 & sec UNARY_EXPR 16 & sec UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 sec LEAF_NODE 18 sec LEAF_NODE 15 , ARGUMENT 15 ptime FIELD 16 ptime LEAF_NODE 17 ptime LEAF_NODE 15 , ARGUMENT 15 & atime UNARY_EXPR 16 & atime UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 atime LEAF_NODE 18 atime LEAF_NODE 15 ) LEAF_NODE 13 ) LEAF_NODE 10 || EXPR 10 ! TEST_int_eq ( day , 0 ) || ! TEST_int_eq ( sec , 0 ) OR 11 ! TEST_int_eq ( day , 0 ) || ! TEST_int_eq ( sec , 0 ) EXPR 12 ! TEST_int_eq ( day , 0 ) UNARY_EXPR 13 ! TEST_int_eq ( day , 0 ) UNARY_OPERATOR 14 ! LEAF_NODE 15 ! FUNCTION_CALL 14 TEST_int_eq ( day , 0 ) CALLEE 15 TEST_int_eq LEAF_NODE 16 TEST_int_eq LEAF_NODE 15 ( ARGUMENT 15 day FIELD 16 day LEAF_NODE 17 day LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ) LEAF_NODE 12 || EXPR 12 ! TEST_int_eq ( sec , 0 ) UNARY_EXPR 13 ! TEST_int_eq ( sec , 0 ) UNARY_OPERATOR 14 ! LEAF_NODE 15 ! FUNCTION_CALL 14 TEST_int_eq ( sec , 0 ) CALLEE 15 TEST_int_eq LEAF_NODE 16 TEST_int_eq LEAF_NODE 15 ( ARGUMENT 15 sec FIELD 16 sec LEAF_NODE 17 sec LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 TEST_info ( \"ASN1_TIME_diff(day=%d, sec=%d, %s) after ASN1_TIME_set_string_gmt() failed\" , day , sec , td -> data ) ; EXPR 10 TEST_info ( \"ASN1_TIME_diff(day=%d, sec=%d, %s) after ASN1_TIME_set_string_gmt() failed\" , day , sec , td -> data ) FUNCTION_CALL 11 TEST_info ( \"ASN1_TIME_diff(day=%d, sec=%d, %s) after ASN1_TIME_set_string_gmt() failed\" , day , sec , td -> data ) CALLEE 12 TEST_info LEAF_NODE 13 TEST_info LEAF_NODE 12 ( ARGUMENT 12 \"ASN1_TIME_diff(day=%d, sec=%d, %s) after ASN1_TIME_set_string_gmt() failed\" FIELD 13 \"ASN1_TIME_diff(day=%d, sec=%d, %s) after ASN1_TIME_set_string_gmt() failed\" LEAF_NODE 14 \"ASN1_TIME_diff(day=%d, sec=%d, %s) after ASN1_TIME_set_string_gmt() failed\" LEAF_NODE 12 , ARGUMENT 12 day FIELD 13 day LEAF_NODE 14 day LEAF_NODE 12 , ARGUMENT 12 sec FIELD 13 sec LEAF_NODE 14 sec LEAF_NODE 12 , ARGUMENT 12 td -> data FIELD 13 td -> data LEAF_NODE 14 td LEAF_NODE 14 -> LEAF_NODE 14 data LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 local_error = error = 1 ; EXPR 10 local_error = error = 1 ASSIGN 11 local_error = error = 1 LVAL 12 local_error FIELD 13 local_error LEAF_NODE 14 local_error ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 error = 1 ASSIGN 13 error = 1 LVAL 14 error FIELD 15 error LEAF_NODE 16 error ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( ptime , gtime_t ) , td -> cmp_result ) EXPR 8 ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( ptime , gtime_t ) , td -> cmp_result ) UNARY_EXPR 9 ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( ptime , gtime_t ) , td -> cmp_result ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 TEST_int_eq ( ASN1_TIME_cmp_time_t ( ptime , gtime_t ) , td -> cmp_result ) CALLEE 11 TEST_int_eq LEAF_NODE 12 TEST_int_eq LEAF_NODE 11 ( ARGUMENT 11 ASN1_TIME_cmp_time_t ( ptime , gtime_t ) FUNCTION_CALL 12 ASN1_TIME_cmp_time_t ( ptime , gtime_t ) CALLEE 13 ASN1_TIME_cmp_time_t LEAF_NODE 14 ASN1_TIME_cmp_time_t LEAF_NODE 13 ( ARGUMENT 13 ptime FIELD 14 ptime LEAF_NODE 15 ptime LEAF_NODE 13 , ARGUMENT 13 gtime_t FIELD 14 gtime_t LEAF_NODE 15 gtime_t LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 td -> cmp_result FIELD 12 td -> cmp_result LEAF_NODE 13 td LEAF_NODE 13 -> LEAF_NODE 13 cmp_result LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 TEST_info ( \"ASN1_TIME_cmp_time_t(%s) after ASN1_TIME_set_string_gnt() to baseline bad comparison\" , td -> data ) ; EXPR 10 TEST_info ( \"ASN1_TIME_cmp_time_t(%s) after ASN1_TIME_set_string_gnt() to baseline bad comparison\" , td -> data ) FUNCTION_CALL 11 TEST_info ( \"ASN1_TIME_cmp_time_t(%s) after ASN1_TIME_set_string_gnt() to baseline bad comparison\" , td -> data ) CALLEE 12 TEST_info LEAF_NODE 13 TEST_info LEAF_NODE 12 ( ARGUMENT 12 \"ASN1_TIME_cmp_time_t(%s) after ASN1_TIME_set_string_gnt() to baseline bad comparison\" FIELD 13 \"ASN1_TIME_cmp_time_t(%s) after ASN1_TIME_set_string_gnt() to baseline bad comparison\" LEAF_NODE 14 \"ASN1_TIME_cmp_time_t(%s) after ASN1_TIME_set_string_gnt() to baseline bad comparison\" LEAF_NODE 12 , ARGUMENT 12 td -> data FIELD 13 td -> data LEAF_NODE 14 td LEAF_NODE 14 -> LEAF_NODE 14 data LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 local_error = error = 1 ; EXPR 10 local_error = error = 1 ASSIGN 11 local_error = error = 1 LVAL 12 local_error FIELD 13 local_error LEAF_NODE 14 local_error ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 error = 1 ASSIGN 13 error = 1 LVAL 14 error FIELD 15 error LEAF_NODE 16 error ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 local_error EXPR 8 local_error FIELD 9 local_error LEAF_NODE 10 local_error LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 TEST_info ( \"ASN1_TIME_set_string_gmt() = %*s\" , ptime -> length , ptime -> data ) ; EXPR 9 TEST_info ( \"ASN1_TIME_set_string_gmt() = %*s\" , ptime -> length , ptime -> data ) FUNCTION_CALL 10 TEST_info ( \"ASN1_TIME_set_string_gmt() = %*s\" , ptime -> length , ptime -> data ) CALLEE 11 TEST_info LEAF_NODE 12 TEST_info LEAF_NODE 11 ( ARGUMENT 11 \"ASN1_TIME_set_string_gmt() = %*s\" FIELD 12 \"ASN1_TIME_set_string_gmt() = %*s\" LEAF_NODE 13 \"ASN1_TIME_set_string_gmt() = %*s\" LEAF_NODE 11 , ARGUMENT 11 ptime -> length FIELD 12 ptime -> length LEAF_NODE 13 ptime LEAF_NODE 13 -> LEAF_NODE 13 length LEAF_NODE 11 , ARGUMENT 11 ptime -> data FIELD 12 ptime -> data LEAF_NODE 13 ptime LEAF_NODE 13 -> LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 6 ASN1_TIME_free ( ptime ) ; EXPR 7 ASN1_TIME_free ( ptime ) FUNCTION_CALL 8 ASN1_TIME_free ( ptime ) CALLEE 9 ASN1_TIME_free LEAF_NODE 10 ASN1_TIME_free LEAF_NODE 9 ( ARGUMENT 9 ptime FIELD 10 ptime LEAF_NODE 11 ptime LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ptime = ASN1_TIME_new ( ) ; EXPR 4 ptime = ASN1_TIME_new ( ) ASSIGN 5 ptime = ASN1_TIME_new ( ) LVAL 6 ptime FIELD 7 ptime LEAF_NODE 8 ptime ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ASN1_TIME_new ( ) FUNCTION_CALL 7 ASN1_TIME_new ( ) CALLEE 8 ASN1_TIME_new LEAF_NODE 9 ASN1_TIME_new LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! TEST_ptr ( ptime ) EXPR 5 ! TEST_ptr ( ptime ) UNARY_EXPR 6 ! TEST_ptr ( ptime ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 TEST_ptr ( ptime ) CALLEE 8 TEST_ptr LEAF_NODE 9 TEST_ptr LEAF_NODE 8 ( ARGUMENT 8 ptime FIELD 9 ptime LEAF_NODE 10 ptime LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 TEST_info ( \"ASN1_TIME_new() failed\" ) ; EXPR 7 TEST_info ( \"ASN1_TIME_new() failed\" ) FUNCTION_CALL 8 TEST_info ( \"ASN1_TIME_new() failed\" ) CALLEE 9 TEST_info LEAF_NODE 10 TEST_info LEAF_NODE 9 ( ARGUMENT 9 \"ASN1_TIME_new() failed\" FIELD 10 \"ASN1_TIME_new() failed\" LEAF_NODE 11 \"ASN1_TIME_new() failed\" LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 error = 1 ; EXPR 7 error = 1 ASSIGN 8 error = 1 LVAL 9 error FIELD 10 error LEAF_NODE 11 error ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int local_error ; local_error = 0 ; VAR_DECL 7 int local_error ; local_error = 0 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 local_error LEAF_NODE 9 local_error LEAF_NODE 8 ; INIT 8 local_error = 0 ASSIGN 9 local_error = 0 LVAL 10 local_error NAME 11 local_error LEAF_NODE 12 local_error ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! TEST_int_eq ( ASN1_TIME_set_string ( ptime , td -> data ) , td -> check_result ) EXPR 8 ! TEST_int_eq ( ASN1_TIME_set_string ( ptime , td -> data ) , td -> check_result ) UNARY_EXPR 9 ! TEST_int_eq ( ASN1_TIME_set_string ( ptime , td -> data ) , td -> check_result ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 TEST_int_eq ( ASN1_TIME_set_string ( ptime , td -> data ) , td -> check_result ) CALLEE 11 TEST_int_eq LEAF_NODE 12 TEST_int_eq LEAF_NODE 11 ( ARGUMENT 11 ASN1_TIME_set_string ( ptime , td -> data ) FUNCTION_CALL 12 ASN1_TIME_set_string ( ptime , td -> data ) CALLEE 13 ASN1_TIME_set_string LEAF_NODE 14 ASN1_TIME_set_string LEAF_NODE 13 ( ARGUMENT 13 ptime FIELD 14 ptime LEAF_NODE 15 ptime LEAF_NODE 13 , ARGUMENT 13 td -> data FIELD 14 td -> data LEAF_NODE 15 td LEAF_NODE 15 -> LEAF_NODE 15 data LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 td -> check_result FIELD 12 td -> check_result LEAF_NODE 13 td LEAF_NODE 13 -> LEAF_NODE 13 check_result LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 TEST_info ( \"ASN1_TIME_set_string(%s) failed\" , td -> data ) ; EXPR 10 TEST_info ( \"ASN1_TIME_set_string(%s) failed\" , td -> data ) FUNCTION_CALL 11 TEST_info ( \"ASN1_TIME_set_string(%s) failed\" , td -> data ) CALLEE 12 TEST_info LEAF_NODE 13 TEST_info LEAF_NODE 12 ( ARGUMENT 12 \"ASN1_TIME_set_string(%s) failed\" FIELD 13 \"ASN1_TIME_set_string(%s) failed\" LEAF_NODE 14 \"ASN1_TIME_set_string(%s) failed\" LEAF_NODE 12 , ARGUMENT 12 td -> data FIELD 13 td -> data LEAF_NODE 14 td LEAF_NODE 14 -> LEAF_NODE 14 data LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 local_error = error = 1 ; EXPR 10 local_error = error = 1 ASSIGN 11 local_error = error = 1 LVAL 12 local_error FIELD 13 local_error LEAF_NODE 14 local_error ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 error = 1 ASSIGN 13 error = 1 LVAL 14 error FIELD 15 error LEAF_NODE 16 error ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 day = sec = 0 ; EXPR 7 day = sec = 0 ASSIGN 8 day = sec = 0 LVAL 9 day FIELD 10 day LEAF_NODE 11 day ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 sec = 0 ASSIGN 10 sec = 0 LVAL 11 sec FIELD 12 sec LEAF_NODE 13 sec ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! TEST_true ( ASN1_TIME_diff ( & day , & sec , ptime , & atime ) ) || ! TEST_int_eq ( day , 0 ) || ! TEST_int_eq ( sec , 0 ) EXPR 8 ! TEST_true ( ASN1_TIME_diff ( & day , & sec , ptime , & atime ) ) || ! TEST_int_eq ( day , 0 ) || ! TEST_int_eq ( sec , 0 ) OR 9 ! TEST_true ( ASN1_TIME_diff ( & day , & sec , ptime , & atime ) ) || ! TEST_int_eq ( day , 0 ) || ! TEST_int_eq ( sec , 0 ) EXPR 10 ! TEST_true ( ASN1_TIME_diff ( & day , & sec , ptime , & atime ) ) UNARY_EXPR 11 ! TEST_true ( ASN1_TIME_diff ( & day , & sec , ptime , & atime ) ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 TEST_true ( ASN1_TIME_diff ( & day , & sec , ptime , & atime ) ) CALLEE 13 TEST_true LEAF_NODE 14 TEST_true LEAF_NODE 13 ( ARGUMENT 13 ASN1_TIME_diff ( & day , & sec , ptime , & atime ) FUNCTION_CALL 14 ASN1_TIME_diff ( & day , & sec , ptime , & atime ) CALLEE 15 ASN1_TIME_diff LEAF_NODE 16 ASN1_TIME_diff LEAF_NODE 15 ( ARGUMENT 15 & day UNARY_EXPR 16 & day UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 day LEAF_NODE 18 day LEAF_NODE 15 , ARGUMENT 15 & sec UNARY_EXPR 16 & sec UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 sec LEAF_NODE 18 sec LEAF_NODE 15 , ARGUMENT 15 ptime FIELD 16 ptime LEAF_NODE 17 ptime LEAF_NODE 15 , ARGUMENT 15 & atime UNARY_EXPR 16 & atime UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 atime LEAF_NODE 18 atime LEAF_NODE 15 ) LEAF_NODE 13 ) LEAF_NODE 10 || EXPR 10 ! TEST_int_eq ( day , 0 ) || ! TEST_int_eq ( sec , 0 ) OR 11 ! TEST_int_eq ( day , 0 ) || ! TEST_int_eq ( sec , 0 ) EXPR 12 ! TEST_int_eq ( day , 0 ) UNARY_EXPR 13 ! TEST_int_eq ( day , 0 ) UNARY_OPERATOR 14 ! LEAF_NODE 15 ! FUNCTION_CALL 14 TEST_int_eq ( day , 0 ) CALLEE 15 TEST_int_eq LEAF_NODE 16 TEST_int_eq LEAF_NODE 15 ( ARGUMENT 15 day FIELD 16 day LEAF_NODE 17 day LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ) LEAF_NODE 12 || EXPR 12 ! TEST_int_eq ( sec , 0 ) UNARY_EXPR 13 ! TEST_int_eq ( sec , 0 ) UNARY_OPERATOR 14 ! LEAF_NODE 15 ! FUNCTION_CALL 14 TEST_int_eq ( sec , 0 ) CALLEE 15 TEST_int_eq LEAF_NODE 16 TEST_int_eq LEAF_NODE 15 ( ARGUMENT 15 sec FIELD 16 sec LEAF_NODE 17 sec LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 TEST_info ( \"ASN1_TIME_diff(day=%d, sec=%d, %s) after ASN1_TIME_set_string() failed\" , day , sec , td -> data ) ; EXPR 10 TEST_info ( \"ASN1_TIME_diff(day=%d, sec=%d, %s) after ASN1_TIME_set_string() failed\" , day , sec , td -> data ) FUNCTION_CALL 11 TEST_info ( \"ASN1_TIME_diff(day=%d, sec=%d, %s) after ASN1_TIME_set_string() failed\" , day , sec , td -> data ) CALLEE 12 TEST_info LEAF_NODE 13 TEST_info LEAF_NODE 12 ( ARGUMENT 12 \"ASN1_TIME_diff(day=%d, sec=%d, %s) after ASN1_TIME_set_string() failed\" FIELD 13 \"ASN1_TIME_diff(day=%d, sec=%d, %s) after ASN1_TIME_set_string() failed\" LEAF_NODE 14 \"ASN1_TIME_diff(day=%d, sec=%d, %s) after ASN1_TIME_set_string() failed\" LEAF_NODE 12 , ARGUMENT 12 day FIELD 13 day LEAF_NODE 14 day LEAF_NODE 12 , ARGUMENT 12 sec FIELD 13 sec LEAF_NODE 14 sec LEAF_NODE 12 , ARGUMENT 12 td -> data FIELD 13 td -> data LEAF_NODE 14 td LEAF_NODE 14 -> LEAF_NODE 14 data LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 local_error = error = 1 ; EXPR 10 local_error = error = 1 ASSIGN 11 local_error = error = 1 LVAL 12 local_error FIELD 13 local_error LEAF_NODE 14 local_error ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 error = 1 ASSIGN 13 error = 1 LVAL 14 error FIELD 15 error LEAF_NODE 16 error ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( ptime , gtime_t ) , td -> cmp_result ) EXPR 8 ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( ptime , gtime_t ) , td -> cmp_result ) UNARY_EXPR 9 ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( ptime , gtime_t ) , td -> cmp_result ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 TEST_int_eq ( ASN1_TIME_cmp_time_t ( ptime , gtime_t ) , td -> cmp_result ) CALLEE 11 TEST_int_eq LEAF_NODE 12 TEST_int_eq LEAF_NODE 11 ( ARGUMENT 11 ASN1_TIME_cmp_time_t ( ptime , gtime_t ) FUNCTION_CALL 12 ASN1_TIME_cmp_time_t ( ptime , gtime_t ) CALLEE 13 ASN1_TIME_cmp_time_t LEAF_NODE 14 ASN1_TIME_cmp_time_t LEAF_NODE 13 ( ARGUMENT 13 ptime FIELD 14 ptime LEAF_NODE 15 ptime LEAF_NODE 13 , ARGUMENT 13 gtime_t FIELD 14 gtime_t LEAF_NODE 15 gtime_t LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 td -> cmp_result FIELD 12 td -> cmp_result LEAF_NODE 13 td LEAF_NODE 13 -> LEAF_NODE 13 cmp_result LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 TEST_info ( \"ASN1_TIME_cmp_time_t(%s) after ASN1_TIME_set_string() to baseline bad comparison\" , td -> data ) ; EXPR 10 TEST_info ( \"ASN1_TIME_cmp_time_t(%s) after ASN1_TIME_set_string() to baseline bad comparison\" , td -> data ) FUNCTION_CALL 11 TEST_info ( \"ASN1_TIME_cmp_time_t(%s) after ASN1_TIME_set_string() to baseline bad comparison\" , td -> data ) CALLEE 12 TEST_info LEAF_NODE 13 TEST_info LEAF_NODE 12 ( ARGUMENT 12 \"ASN1_TIME_cmp_time_t(%s) after ASN1_TIME_set_string() to baseline bad comparison\" FIELD 13 \"ASN1_TIME_cmp_time_t(%s) after ASN1_TIME_set_string() to baseline bad comparison\" LEAF_NODE 14 \"ASN1_TIME_cmp_time_t(%s) after ASN1_TIME_set_string() to baseline bad comparison\" LEAF_NODE 12 , ARGUMENT 12 td -> data FIELD 13 td -> data LEAF_NODE 14 td LEAF_NODE 14 -> LEAF_NODE 14 data LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 local_error = error = 1 ; EXPR 10 local_error = error = 1 ASSIGN 11 local_error = error = 1 LVAL 12 local_error FIELD 13 local_error LEAF_NODE 14 local_error ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 error = 1 ASSIGN 13 error = 1 LVAL 14 error FIELD 15 error LEAF_NODE 16 error ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 local_error EXPR 8 local_error FIELD 9 local_error LEAF_NODE 10 local_error LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 TEST_info ( \"ASN1_TIME_set_string() = %*s\" , ptime -> length , ptime -> data ) ; EXPR 9 TEST_info ( \"ASN1_TIME_set_string() = %*s\" , ptime -> length , ptime -> data ) FUNCTION_CALL 10 TEST_info ( \"ASN1_TIME_set_string() = %*s\" , ptime -> length , ptime -> data ) CALLEE 11 TEST_info LEAF_NODE 12 TEST_info LEAF_NODE 11 ( ARGUMENT 11 \"ASN1_TIME_set_string() = %*s\" FIELD 12 \"ASN1_TIME_set_string() = %*s\" LEAF_NODE 13 \"ASN1_TIME_set_string() = %*s\" LEAF_NODE 11 , ARGUMENT 11 ptime -> length FIELD 12 ptime -> length LEAF_NODE 13 ptime LEAF_NODE 13 -> LEAF_NODE 13 length LEAF_NODE 11 , ARGUMENT 11 ptime -> data FIELD 12 ptime -> data LEAF_NODE 13 ptime LEAF_NODE 13 -> LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 6 ASN1_TIME_free ( ptime ) ; EXPR 7 ASN1_TIME_free ( ptime ) FUNCTION_CALL 8 ASN1_TIME_free ( ptime ) CALLEE 9 ASN1_TIME_free LEAF_NODE 10 ASN1_TIME_free LEAF_NODE 9 ( ARGUMENT 9 ptime FIELD 10 ptime LEAF_NODE 11 ptime LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 td -> type == V_ASN1_UTCTIME EXPR 5 td -> type == V_ASN1_UTCTIME FIELD 6 td -> type LEAF_NODE 7 td LEAF_NODE 7 -> LEAF_NODE 7 type EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 V_ASN1_UTCTIME LEAF_NODE 7 V_ASN1_UTCTIME LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ptime = ASN1_TIME_to_generalizedtime ( & atime , NULL ) ; EXPR 7 ptime = ASN1_TIME_to_generalizedtime ( & atime , NULL ) ASSIGN 8 ptime = ASN1_TIME_to_generalizedtime ( & atime , NULL ) LVAL 9 ptime FIELD 10 ptime LEAF_NODE 11 ptime ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ASN1_TIME_to_generalizedtime ( & atime , NULL ) FUNCTION_CALL 10 ASN1_TIME_to_generalizedtime ( & atime , NULL ) CALLEE 11 ASN1_TIME_to_generalizedtime LEAF_NODE 12 ASN1_TIME_to_generalizedtime LEAF_NODE 11 ( ARGUMENT 11 & atime UNARY_EXPR 12 & atime UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 atime LEAF_NODE 14 atime LEAF_NODE 11 , ARGUMENT 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 td -> convert_result == 1 && ! TEST_ptr ( ptime ) EXPR 8 td -> convert_result == 1 && ! TEST_ptr ( ptime ) AND 9 td -> convert_result == 1 && ! TEST_ptr ( ptime ) EXPR 10 td -> convert_result == 1 FIELD 11 td -> convert_result LEAF_NODE 12 td LEAF_NODE 12 -> LEAF_NODE 12 convert_result EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 && EXPR 10 ! TEST_ptr ( ptime ) UNARY_EXPR 11 ! TEST_ptr ( ptime ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 TEST_ptr ( ptime ) CALLEE 13 TEST_ptr LEAF_NODE 14 TEST_ptr LEAF_NODE 13 ( ARGUMENT 13 ptime FIELD 14 ptime LEAF_NODE 15 ptime LEAF_NODE 13 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 TEST_info ( \"ASN1_TIME_to_generalizedtime(%s) failed\" , atime . data ) ; EXPR 10 TEST_info ( \"ASN1_TIME_to_generalizedtime(%s) failed\" , atime . data ) FUNCTION_CALL 11 TEST_info ( \"ASN1_TIME_to_generalizedtime(%s) failed\" , atime . data ) CALLEE 12 TEST_info LEAF_NODE 13 TEST_info LEAF_NODE 12 ( ARGUMENT 12 \"ASN1_TIME_to_generalizedtime(%s) failed\" FIELD 13 \"ASN1_TIME_to_generalizedtime(%s) failed\" LEAF_NODE 14 \"ASN1_TIME_to_generalizedtime(%s) failed\" LEAF_NODE 12 , ARGUMENT 12 atime . data FIELD 13 atime . data LEAF_NODE 14 atime LEAF_NODE 14 . LEAF_NODE 14 data LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 error = 1 ; EXPR 10 error = 1 ASSIGN 11 error = 1 LVAL 12 error FIELD 13 error LEAF_NODE 14 error ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 td -> convert_result == 0 && ! TEST_ptr_null ( ptime ) EXPR 10 td -> convert_result == 0 && ! TEST_ptr_null ( ptime ) AND 11 td -> convert_result == 0 && ! TEST_ptr_null ( ptime ) EXPR 12 td -> convert_result == 0 FIELD 13 td -> convert_result LEAF_NODE 14 td LEAF_NODE 14 -> LEAF_NODE 14 convert_result EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 && EXPR 12 ! TEST_ptr_null ( ptime ) UNARY_EXPR 13 ! TEST_ptr_null ( ptime ) UNARY_OPERATOR 14 ! LEAF_NODE 15 ! FUNCTION_CALL 14 TEST_ptr_null ( ptime ) CALLEE 15 TEST_ptr_null LEAF_NODE 16 TEST_ptr_null LEAF_NODE 15 ( ARGUMENT 15 ptime FIELD 16 ptime LEAF_NODE 17 ptime LEAF_NODE 15 ) LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 TEST_info ( \"ASN1_TIME_to_generalizedtime(%s) should have failed\" , atime . data ) ; EXPR 12 TEST_info ( \"ASN1_TIME_to_generalizedtime(%s) should have failed\" , atime . data ) FUNCTION_CALL 13 TEST_info ( \"ASN1_TIME_to_generalizedtime(%s) should have failed\" , atime . data ) CALLEE 14 TEST_info LEAF_NODE 15 TEST_info LEAF_NODE 14 ( ARGUMENT 14 \"ASN1_TIME_to_generalizedtime(%s) should have failed\" FIELD 15 \"ASN1_TIME_to_generalizedtime(%s) should have failed\" LEAF_NODE 16 \"ASN1_TIME_to_generalizedtime(%s) should have failed\" LEAF_NODE 14 , ARGUMENT 14 atime . data FIELD 15 atime . data LEAF_NODE 16 atime LEAF_NODE 16 . LEAF_NODE 16 data LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 error = 1 ; EXPR 12 error = 1 ASSIGN 13 error = 1 LVAL 14 error FIELD 15 error LEAF_NODE 16 error ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ptime != NULL && ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( ptime , td -> t ) , 0 ) EXPR 8 ptime != NULL && ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( ptime , td -> t ) , 0 ) AND 9 ptime != NULL && ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( ptime , td -> t ) , 0 ) EXPR 10 ptime != NULL FIELD 11 ptime LEAF_NODE 12 ptime EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 10 && EXPR 10 ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( ptime , td -> t ) , 0 ) UNARY_EXPR 11 ! TEST_int_eq ( ASN1_TIME_cmp_time_t ( ptime , td -> t ) , 0 ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 TEST_int_eq ( ASN1_TIME_cmp_time_t ( ptime , td -> t ) , 0 ) CALLEE 13 TEST_int_eq LEAF_NODE 14 TEST_int_eq LEAF_NODE 13 ( ARGUMENT 13 ASN1_TIME_cmp_time_t ( ptime , td -> t ) FUNCTION_CALL 14 ASN1_TIME_cmp_time_t ( ptime , td -> t ) CALLEE 15 ASN1_TIME_cmp_time_t LEAF_NODE 16 ASN1_TIME_cmp_time_t LEAF_NODE 15 ( ARGUMENT 15 ptime FIELD 16 ptime LEAF_NODE 17 ptime LEAF_NODE 15 , ARGUMENT 15 td -> t FIELD 16 td -> t LEAF_NODE 17 td LEAF_NODE 17 -> LEAF_NODE 17 t LEAF_NODE 15 ) LEAF_NODE 13 , ARGUMENT 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 13 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 TEST_info ( \"ASN1_TIME_to_generalizedtime(%s->%s) bad result\" , atime . data , ptime -> data ) ; EXPR 10 TEST_info ( \"ASN1_TIME_to_generalizedtime(%s->%s) bad result\" , atime . data , ptime -> data ) FUNCTION_CALL 11 TEST_info ( \"ASN1_TIME_to_generalizedtime(%s->%s) bad result\" , atime . data , ptime -> data ) CALLEE 12 TEST_info LEAF_NODE 13 TEST_info LEAF_NODE 12 ( ARGUMENT 12 \"ASN1_TIME_to_generalizedtime(%s->%s) bad result\" FIELD 13 \"ASN1_TIME_to_generalizedtime(%s->%s) bad result\" LEAF_NODE 14 \"ASN1_TIME_to_generalizedtime(%s->%s) bad result\" LEAF_NODE 12 , ARGUMENT 12 atime . data FIELD 13 atime . data LEAF_NODE 14 atime LEAF_NODE 14 . LEAF_NODE 14 data LEAF_NODE 12 , ARGUMENT 12 ptime -> data FIELD 13 ptime -> data LEAF_NODE 14 ptime LEAF_NODE 14 -> LEAF_NODE 14 data LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 error = 1 ; EXPR 10 error = 1 ASSIGN 11 error = 1 LVAL 12 error FIELD 13 error LEAF_NODE 14 error ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 ASN1_TIME_free ( ptime ) ; EXPR 7 ASN1_TIME_free ( ptime ) FUNCTION_CALL 8 ASN1_TIME_free ( ptime ) CALLEE 9 ASN1_TIME_free LEAF_NODE 10 ASN1_TIME_free LEAF_NODE 9 ( ARGUMENT 9 ptime FIELD 10 ptime LEAF_NODE 11 ptime LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 error EXPR 5 error FIELD 6 error LEAF_NODE 7 error LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 TEST_error ( \"atime=%s\" , atime . data ) ; EXPR 6 TEST_error ( \"atime=%s\" , atime . data ) FUNCTION_CALL 7 TEST_error ( \"atime=%s\" , atime . data ) CALLEE 8 TEST_error LEAF_NODE 9 TEST_error LEAF_NODE 8 ( ARGUMENT 8 \"atime=%s\" FIELD 9 \"atime=%s\" LEAF_NODE 10 \"atime=%s\" LEAF_NODE 8 , ARGUMENT 8 atime . data FIELD 9 atime . data LEAF_NODE 10 atime LEAF_NODE 10 . LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; JUMP_STATEMENT 3 return ! error ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ! error EXPR 5 ! error UNARY_EXPR 6 ! error UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 error LEAF_NODE 8 error LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_pos LEAF_NODE 3 test_table_pos PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_pos , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_pos , idx ) EXPR 5 test_table ( tbl_testdata_pos , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_pos , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_pos FIELD 8 tbl_testdata_pos LEAF_NODE 9 tbl_testdata_pos LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_neg LEAF_NODE 3 test_table_neg PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_neg , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_neg , idx ) EXPR 5 test_table ( tbl_testdata_neg , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_neg , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_neg FIELD 8 tbl_testdata_neg LEAF_NODE 9 tbl_testdata_neg LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_pos_64bit LEAF_NODE 3 test_table_pos_64bit PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_pos_64bit , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_pos_64bit , idx ) EXPR 5 test_table ( tbl_testdata_pos_64bit , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_pos_64bit , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_pos_64bit FIELD 8 tbl_testdata_pos_64bit LEAF_NODE 9 tbl_testdata_pos_64bit LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_neg_64bit LEAF_NODE 3 test_table_neg_64bit PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_neg_64bit , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_neg_64bit , idx ) EXPR 5 test_table ( tbl_testdata_neg_64bit , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_neg_64bit , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_neg_64bit FIELD 8 tbl_testdata_neg_64bit LEAF_NODE 9 tbl_testdata_neg_64bit LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_compare LEAF_NODE 3 test_table_compare PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct compare_testdata * td ; td = & tbl_compare_testdata [ idx ] ; VAR_DECL 4 struct compare_testdata * td ; td = & tbl_compare_testdata [ idx ] TYPE 5 struct compare_testdata * TYPE_NAME 6 struct compare_testdata LEAF_NODE 7 struct LEAF_NODE 7 compare_testdata POINTER 6 * LEAF_NODE 7 * NAME 5 td LEAF_NODE 6 td LEAF_NODE 5 ; INIT 5 td = & tbl_compare_testdata [ idx ] ASSIGN 6 td = & tbl_compare_testdata [ idx ] LVAL 7 td NAME 8 td LEAF_NODE 9 td ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & tbl_compare_testdata [ idx ] UNARY_EXPR 8 & tbl_compare_testdata [ idx ] UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 tbl_compare_testdata [ idx ] LEAF_NODE 10 tbl_compare_testdata LEAF_NODE 10 [ EXPR 10 idx FIELD 11 idx LEAF_NODE 12 idx LEAF_NODE 10 ] LEAF_NODE 4 ; JUMP_STATEMENT 3 return TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) EXPR 5 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) FUNCTION_CALL 6 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) CALLEE 7 TEST_int_eq LEAF_NODE 8 TEST_int_eq LEAF_NODE 7 ( ARGUMENT 7 ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) FUNCTION_CALL 8 ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) CALLEE 9 ASN1_TIME_compare LEAF_NODE 10 ASN1_TIME_compare LEAF_NODE 9 ( ARGUMENT 9 & td -> t1 UNARY_EXPR 10 & td -> t1 UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 td -> t1 LEAF_NODE 12 td LEAF_NODE 12 -> LEAF_NODE 12 t1 LEAF_NODE 9 , ARGUMENT 9 & td -> t2 UNARY_EXPR 10 & td -> t2 UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 td -> t2 LEAF_NODE 12 td LEAF_NODE 12 -> LEAF_NODE 12 t2 LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 td -> result FIELD 8 td -> result LEAF_NODE 9 td LEAF_NODE 9 -> LEAF_NODE 9 result LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 112, "project": "openssl_ast_normal_function_test_124", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 U32TO8 LEAF_NODE 3 U32TO8 PARAMETER_LIST 2 ( unsigned char * p , unsigned int v ) LEAF_NODE 3 ( PARAMETER_DECL 3 unsigned char * p TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 p LEAF_NODE 5 p LEAF_NODE 3 , PARAMETER_DECL 3 unsigned int v TYPE 4 unsigned int TYPE_NAME 5 unsigned int LEAF_NODE 6 unsigned LEAF_NODE 6 int NAME 4 v LEAF_NODE 5 v LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 p [ 0 ] = ( unsigned char ) ( ( v ) & 0xff ) ; EXPR 4 p [ 0 ] = ( unsigned char ) ( ( v ) & 0xff ) ASSIGN 5 p [ 0 ] = ( unsigned char ) ( ( v ) & 0xff ) LVAL 6 p [ 0 ] FIELD 7 p [ 0 ] LEAF_NODE 8 p LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( unsigned char ) ( ( v ) & 0xff ) LEAF_NODE 7 ( TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char LEAF_NODE 7 ) LEAF_NODE 7 ( LEAF_NODE 7 ( TYPE_NAME 7 v LEAF_NODE 8 v LEAF_NODE 7 ) UNARY_EXPR 7 & 0xff UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 0xff LEAF_NODE 9 0xff LEAF_NODE 7 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 p [ 1 ] = ( unsigned char ) ( ( v >> 8 ) & 0xff ) ; EXPR 4 p [ 1 ] = ( unsigned char ) ( ( v >> 8 ) & 0xff ) ASSIGN 5 p [ 1 ] = ( unsigned char ) ( ( v >> 8 ) & 0xff ) LVAL 6 p [ 1 ] FIELD 7 p [ 1 ] LEAF_NODE 8 p LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( unsigned char ) ( ( v >> 8 ) & 0xff ) LEAF_NODE 7 ( TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char LEAF_NODE 7 ) LEAF_NODE 7 ( LEAF_NODE 7 ( FIELD 7 v LEAF_NODE 8 v LEAF_NODE 7 >> FIELD 7 8 LEAF_NODE 8 8 LEAF_NODE 7 ) LEAF_NODE 7 & FIELD 7 0xff LEAF_NODE 8 0xff LEAF_NODE 7 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 p [ 2 ] = ( unsigned char ) ( ( v >> 16 ) & 0xff ) ; EXPR 4 p [ 2 ] = ( unsigned char ) ( ( v >> 16 ) & 0xff ) ASSIGN 5 p [ 2 ] = ( unsigned char ) ( ( v >> 16 ) & 0xff ) LVAL 6 p [ 2 ] FIELD 7 p [ 2 ] LEAF_NODE 8 p LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( unsigned char ) ( ( v >> 16 ) & 0xff ) LEAF_NODE 7 ( TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char LEAF_NODE 7 ) LEAF_NODE 7 ( LEAF_NODE 7 ( FIELD 7 v LEAF_NODE 8 v LEAF_NODE 7 >> FIELD 7 16 LEAF_NODE 8 16 LEAF_NODE 7 ) LEAF_NODE 7 & FIELD 7 0xff LEAF_NODE 8 0xff LEAF_NODE 7 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 p [ 3 ] = ( unsigned char ) ( ( v >> 24 ) & 0xff ) ; EXPR 4 p [ 3 ] = ( unsigned char ) ( ( v >> 24 ) & 0xff ) ASSIGN 5 p [ 3 ] = ( unsigned char ) ( ( v >> 24 ) & 0xff ) LVAL 6 p [ 3 ] FIELD 7 p [ 3 ] LEAF_NODE 8 p LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( unsigned char ) ( ( v >> 24 ) & 0xff ) LEAF_NODE 7 ( TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char LEAF_NODE 7 ) LEAF_NODE 7 ( LEAF_NODE 7 ( FIELD 7 v LEAF_NODE 8 v LEAF_NODE 7 >> FIELD 7 24 LEAF_NODE 8 24 LEAF_NODE 7 ) LEAF_NODE 7 & FIELD 7 0xff LEAF_NODE 8 0xff LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 113, "project": "openssl_ast_normal_function_test_107", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 const EVP_PKEY_ASN1_METHOD * TYPE_NAME 3 const EVP_PKEY_ASN1_METHOD LEAF_NODE 4 const LEAF_NODE 4 EVP_PKEY_ASN1_METHOD LEAF_NODE 3 * FUNCTION_NAME 2 EVP_PKEY_asn1_find_str LEAF_NODE 3 EVP_PKEY_asn1_find_str PARAMETER_LIST 2 ( ENGINE * * pe , const char * str , int len ) LEAF_NODE 3 ( PARAMETER_DECL 3 ENGINE * * pe TYPE 4 ENGINE * * TYPE_NAME 5 ENGINE LEAF_NODE 6 ENGINE POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 pe LEAF_NODE 5 pe LEAF_NODE 3 , PARAMETER_DECL 3 const char * str TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 str LEAF_NODE 5 str LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int i ; VAR_DECL 4 int i TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; SIMPLE_DECL 3 const EVP_PKEY_ASN1_METHOD * ameth ; ameth = NULL ; VAR_DECL 4 const EVP_PKEY_ASN1_METHOD * ameth ; ameth = NULL TYPE 5 const EVP_PKEY_ASN1_METHOD * TYPE_NAME 6 const EVP_PKEY_ASN1_METHOD LEAF_NODE 7 const LEAF_NODE 7 EVP_PKEY_ASN1_METHOD POINTER 6 * LEAF_NODE 7 * NAME 5 ameth LEAF_NODE 6 ameth LEAF_NODE 5 ; INIT 5 ameth = NULL ASSIGN 6 ameth = NULL LVAL 7 ameth NAME 8 ameth LEAF_NODE 9 ameth ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 len == - 1 EXPR 5 len == - 1 FIELD 6 len LEAF_NODE 7 len EQ_OPERATOR 6 == LEAF_NODE 7 == UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 len = strlen ( str ) ; EXPR 6 len = strlen ( str ) ASSIGN 7 len = strlen ( str ) LVAL 8 len FIELD 9 len LEAF_NODE 10 len ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( str ) FUNCTION_CALL 9 strlen ( str ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 str FIELD 11 str LEAF_NODE 12 str LEAF_NODE 10 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 pe EXPR 5 pe FIELD 6 pe LEAF_NODE 7 pe LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 ENGINE * e ; VAR_DECL 7 ENGINE * e TYPE 8 ENGINE * TYPE_NAME 9 ENGINE LEAF_NODE 10 ENGINE POINTER 9 * LEAF_NODE 10 * NAME 8 e LEAF_NODE 9 e LEAF_NODE 7 ; EXPR_STATEMENT 6 ameth = ENGINE_pkey_asn1_find_str ( & e , str , len ) ; EXPR 7 ameth = ENGINE_pkey_asn1_find_str ( & e , str , len ) ASSIGN 8 ameth = ENGINE_pkey_asn1_find_str ( & e , str , len ) LVAL 9 ameth FIELD 10 ameth LEAF_NODE 11 ameth ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ENGINE_pkey_asn1_find_str ( & e , str , len ) FUNCTION_CALL 10 ENGINE_pkey_asn1_find_str ( & e , str , len ) CALLEE 11 ENGINE_pkey_asn1_find_str LEAF_NODE 12 ENGINE_pkey_asn1_find_str LEAF_NODE 11 ( ARGUMENT 11 & e UNARY_EXPR 12 & e UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 e LEAF_NODE 14 e LEAF_NODE 11 , ARGUMENT 11 str FIELD 12 str LEAF_NODE 13 str LEAF_NODE 11 , ARGUMENT 11 len FIELD 12 len LEAF_NODE 13 len LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ameth EXPR 8 ameth FIELD 9 ameth LEAF_NODE 10 ameth LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! ENGINE_init ( e ) EXPR 11 ! ENGINE_init ( e ) UNARY_EXPR 12 ! ENGINE_init ( e ) UNARY_OPERATOR 13 ! LEAF_NODE 14 ! FUNCTION_CALL 13 ENGINE_init ( e ) CALLEE 14 ENGINE_init LEAF_NODE 15 ENGINE_init LEAF_NODE 14 ( ARGUMENT 14 e FIELD 15 e LEAF_NODE 16 e LEAF_NODE 14 ) LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 ameth = NULL ; EXPR 12 ameth = NULL ASSIGN 13 ameth = NULL LVAL 14 ameth FIELD 15 ameth LEAF_NODE 16 ameth ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 NULL FIELD 15 NULL LEAF_NODE 16 NULL LEAF_NODE 12 ; EXPR_STATEMENT 9 ENGINE_free ( e ) ; EXPR 10 ENGINE_free ( e ) FUNCTION_CALL 11 ENGINE_free ( e ) CALLEE 12 ENGINE_free LEAF_NODE 13 ENGINE_free LEAF_NODE 12 ( ARGUMENT 12 e FIELD 13 e LEAF_NODE 14 e LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 * pe = e ; EXPR 10 * pe = e ASSIGN 11 * pe = e LVAL 12 * pe UNARY_EXPR 13 * pe UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 pe LEAF_NODE 15 pe ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 e FIELD 13 e LEAF_NODE 14 e LEAF_NODE 10 ; JUMP_STATEMENT 9 return ameth ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 ameth EXPR 11 ameth FIELD 12 ameth LEAF_NODE 13 ameth LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 * pe = NULL ; EXPR 7 * pe = NULL ASSIGN 8 * pe = NULL LVAL 9 * pe UNARY_EXPR 10 * pe UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 pe LEAF_NODE 12 pe ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = EVP_PKEY_asn1_get_count ( ) ; EXPR 5 i = EVP_PKEY_asn1_get_count ( ) ASSIGN 6 i = EVP_PKEY_asn1_get_count ( ) LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 EVP_PKEY_asn1_get_count ( ) FUNCTION_CALL 8 EVP_PKEY_asn1_get_count ( ) CALLEE 9 EVP_PKEY_asn1_get_count LEAF_NODE 10 EVP_PKEY_asn1_get_count LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 5 ; CONDITION 4 i -- > 0 EXPR 5 i -- > 0 FIELD 6 i -- LEAF_NODE 7 i LEAF_NODE 7 -- REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 4 FOR_EXPR LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ameth = EVP_PKEY_asn1_get0 ( i ) ; EXPR 7 ameth = EVP_PKEY_asn1_get0 ( i ) ASSIGN 8 ameth = EVP_PKEY_asn1_get0 ( i ) LVAL 9 ameth FIELD 10 ameth LEAF_NODE 11 ameth ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 EVP_PKEY_asn1_get0 ( i ) FUNCTION_CALL 10 EVP_PKEY_asn1_get0 ( i ) CALLEE 11 EVP_PKEY_asn1_get0 LEAF_NODE 12 EVP_PKEY_asn1_get0 LEAF_NODE 11 ( ARGUMENT 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ameth -> pkey_flags & ASN1_PKEY_ALIAS EXPR 8 ameth -> pkey_flags & ASN1_PKEY_ALIAS FIELD 9 ameth -> pkey_flags LEAF_NODE 10 ameth LEAF_NODE 10 -> LEAF_NODE 10 pkey_flags LEAF_NODE 9 & FIELD 9 ASN1_PKEY_ALIAS LEAF_NODE 10 ASN1_PKEY_ALIAS LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 continue DESTINATION ; KEYWORD 9 continue LEAF_NODE 10 continue LEAF_NODE 9 DESTINATION LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( int ) strlen ( ameth -> pem_str ) == len && strncasecmp ( ameth -> pem_str , str , len ) == 0 EXPR 8 ( int ) strlen ( ameth -> pem_str ) == len && strncasecmp ( ameth -> pem_str , str , len ) == 0 AND 9 ( int ) strlen ( ameth -> pem_str ) == len && strncasecmp ( ameth -> pem_str , str , len ) == 0 EXPR 10 ( int ) strlen ( ameth -> pem_str ) == len LEAF_NODE 11 ( TYPE_NAME 11 int LEAF_NODE 12 int LEAF_NODE 11 ) FUNCTION_CALL 11 strlen ( ameth -> pem_str ) CALLEE 12 strlen LEAF_NODE 13 strlen LEAF_NODE 12 ( ARGUMENT 12 ameth -> pem_str FIELD 13 ameth -> pem_str LEAF_NODE 14 ameth LEAF_NODE 14 -> LEAF_NODE 14 pem_str LEAF_NODE 12 ) EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 len LEAF_NODE 12 len LEAF_NODE 10 && EXPR 10 strncasecmp ( ameth -> pem_str , str , len ) == 0 FUNCTION_CALL 11 strncasecmp ( ameth -> pem_str , str , len ) CALLEE 12 strncasecmp LEAF_NODE 13 strncasecmp LEAF_NODE 12 ( ARGUMENT 12 ameth -> pem_str FIELD 13 ameth -> pem_str LEAF_NODE 14 ameth LEAF_NODE 14 -> LEAF_NODE 14 pem_str LEAF_NODE 12 , ARGUMENT 12 str FIELD 13 str LEAF_NODE 14 str LEAF_NODE 12 , ARGUMENT 12 len FIELD 13 len LEAF_NODE 14 len LEAF_NODE 12 ) EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return ameth ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 ameth EXPR 10 ameth FIELD 11 ameth LEAF_NODE 12 ameth LEAF_NODE 9 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return NULL ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 NULL EXPR 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 114, "project": "openssl_ast_normal_function_test_147", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 aes_gcm_decrypt LEAF_NODE 3 aes_gcm_decrypt PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 EVP_CIPHER_CTX * ctx ; VAR_DECL 4 EVP_CIPHER_CTX * ctx TYPE 5 EVP_CIPHER_CTX * TYPE_NAME 6 EVP_CIPHER_CTX LEAF_NODE 7 EVP_CIPHER_CTX POINTER 6 * LEAF_NODE 7 * NAME 5 ctx LEAF_NODE 6 ctx LEAF_NODE 4 ; SIMPLE_DECL 3 int outlen , int tmplen , int rv ; INIT_DECL_LIST 4 int outlen , int tmplen , int rv VAR_DECL 5 int outlen TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 outlen LEAF_NODE 7 outlen LEAF_NODE 5 , INIT_DECL_LIST 5 int tmplen , int rv VAR_DECL 6 int tmplen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 tmplen LEAF_NODE 8 tmplen LEAF_NODE 6 , VAR_DECL 6 int rv TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rv LEAF_NODE 8 rv LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char [ 1024 ] outbuf ; VAR_DECL 4 unsigned char [ 1024 ] outbuf TYPE 5 unsigned char [ 1024 ] TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char TYPE_SUFFIX 6 [ 1024 ] LEAF_NODE 7 [ FIELD 7 1024 LEAF_NODE 8 1024 LEAF_NODE 7 ] NAME 5 outbuf LEAF_NODE 6 outbuf LEAF_NODE 4 ; EXPR_STATEMENT 3 printf ( \"AES GCM Derypt:\\n\" ) ; EXPR 4 printf ( \"AES GCM Derypt:\\n\" ) FUNCTION_CALL 5 printf ( \"AES GCM Derypt:\\n\" ) CALLEE 6 printf LEAF_NODE 7 printf LEAF_NODE 6 ( ARGUMENT 6 \"AES GCM Derypt:\\n\" FIELD 7 \"AES GCM Derypt:\\n\" LEAF_NODE 8 \"AES GCM Derypt:\\n\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printf ( \"Ciphertext:\\n\" ) ; EXPR 4 printf ( \"Ciphertext:\\n\" ) FUNCTION_CALL 5 printf ( \"Ciphertext:\\n\" ) CALLEE 6 printf LEAF_NODE 7 printf LEAF_NODE 6 ( ARGUMENT 6 \"Ciphertext:\\n\" FIELD 7 \"Ciphertext:\\n\" LEAF_NODE 8 \"Ciphertext:\\n\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 BIO_dump_fp ( stdout , gcm_ct , sizeof ( gcm_ct ) ) ; EXPR 4 BIO_dump_fp ( stdout , gcm_ct , sizeof ( gcm_ct ) ) FUNCTION_CALL 5 BIO_dump_fp ( stdout , gcm_ct , sizeof ( gcm_ct ) ) CALLEE 6 BIO_dump_fp LEAF_NODE 7 BIO_dump_fp LEAF_NODE 6 ( ARGUMENT 6 stdout FIELD 7 stdout LEAF_NODE 8 stdout LEAF_NODE 6 , ARGUMENT 6 gcm_ct FIELD 7 gcm_ct LEAF_NODE 8 gcm_ct LEAF_NODE 6 , ARGUMENT 6 sizeof ( gcm_ct ) FUNCTION_CALL 7 sizeof ( gcm_ct ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 gcm_ct FIELD 9 gcm_ct LEAF_NODE 10 gcm_ct LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ctx = EVP_CIPHER_CTX_new ( ) ; EXPR 4 ctx = EVP_CIPHER_CTX_new ( ) ASSIGN 5 ctx = EVP_CIPHER_CTX_new ( ) LVAL 6 ctx FIELD 7 ctx LEAF_NODE 8 ctx ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 EVP_CIPHER_CTX_new ( ) FUNCTION_CALL 7 EVP_CIPHER_CTX_new ( ) CALLEE 8 EVP_CIPHER_CTX_new LEAF_NODE 9 EVP_CIPHER_CTX_new LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_DecryptInit_ex ( ctx , EVP_aes_256_gcm ( ) , NULL , NULL , NULL ) ; EXPR 4 EVP_DecryptInit_ex ( ctx , EVP_aes_256_gcm ( ) , NULL , NULL , NULL ) FUNCTION_CALL 5 EVP_DecryptInit_ex ( ctx , EVP_aes_256_gcm ( ) , NULL , NULL , NULL ) CALLEE 6 EVP_DecryptInit_ex LEAF_NODE 7 EVP_DecryptInit_ex LEAF_NODE 6 ( ARGUMENT 6 ctx FIELD 7 ctx LEAF_NODE 8 ctx LEAF_NODE 6 , ARGUMENT 6 EVP_aes_256_gcm ( ) FUNCTION_CALL 7 EVP_aes_256_gcm ( ) CALLEE 8 EVP_aes_256_gcm LEAF_NODE 9 EVP_aes_256_gcm LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 6 , ARGUMENT 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 , ARGUMENT 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 , ARGUMENT 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_CIPHER_CTX_ctrl ( ctx , EVP_CTRL_AEAD_SET_IVLEN , sizeof ( gcm_iv ) , NULL ) ; EXPR 4 EVP_CIPHER_CTX_ctrl ( ctx , EVP_CTRL_AEAD_SET_IVLEN , sizeof ( gcm_iv ) , NULL ) FUNCTION_CALL 5 EVP_CIPHER_CTX_ctrl ( ctx , EVP_CTRL_AEAD_SET_IVLEN , sizeof ( gcm_iv ) , NULL ) CALLEE 6 EVP_CIPHER_CTX_ctrl LEAF_NODE 7 EVP_CIPHER_CTX_ctrl LEAF_NODE 6 ( ARGUMENT 6 ctx FIELD 7 ctx LEAF_NODE 8 ctx LEAF_NODE 6 , ARGUMENT 6 EVP_CTRL_AEAD_SET_IVLEN FIELD 7 EVP_CTRL_AEAD_SET_IVLEN LEAF_NODE 8 EVP_CTRL_AEAD_SET_IVLEN LEAF_NODE 6 , ARGUMENT 6 sizeof ( gcm_iv ) FUNCTION_CALL 7 sizeof ( gcm_iv ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 gcm_iv FIELD 9 gcm_iv LEAF_NODE 10 gcm_iv LEAF_NODE 8 ) LEAF_NODE 6 , ARGUMENT 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_DecryptInit_ex ( ctx , NULL , NULL , gcm_key , gcm_iv ) ; EXPR 4 EVP_DecryptInit_ex ( ctx , NULL , NULL , gcm_key , gcm_iv ) FUNCTION_CALL 5 EVP_DecryptInit_ex ( ctx , NULL , NULL , gcm_key , gcm_iv ) CALLEE 6 EVP_DecryptInit_ex LEAF_NODE 7 EVP_DecryptInit_ex LEAF_NODE 6 ( ARGUMENT 6 ctx FIELD 7 ctx LEAF_NODE 8 ctx LEAF_NODE 6 , ARGUMENT 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 , ARGUMENT 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 , ARGUMENT 6 gcm_key FIELD 7 gcm_key LEAF_NODE 8 gcm_key LEAF_NODE 6 , ARGUMENT 6 gcm_iv FIELD 7 gcm_iv LEAF_NODE 8 gcm_iv LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_DecryptUpdate ( ctx , NULL , & outlen , gcm_aad , sizeof ( gcm_aad ) ) ; EXPR 4 EVP_DecryptUpdate ( ctx , NULL , & outlen , gcm_aad , sizeof ( gcm_aad ) ) FUNCTION_CALL 5 EVP_DecryptUpdate ( ctx , NULL , & outlen , gcm_aad , sizeof ( gcm_aad ) ) CALLEE 6 EVP_DecryptUpdate LEAF_NODE 7 EVP_DecryptUpdate LEAF_NODE 6 ( ARGUMENT 6 ctx FIELD 7 ctx LEAF_NODE 8 ctx LEAF_NODE 6 , ARGUMENT 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 , ARGUMENT 6 & outlen UNARY_EXPR 7 & outlen UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 outlen LEAF_NODE 9 outlen LEAF_NODE 6 , ARGUMENT 6 gcm_aad FIELD 7 gcm_aad LEAF_NODE 8 gcm_aad LEAF_NODE 6 , ARGUMENT 6 sizeof ( gcm_aad ) FUNCTION_CALL 7 sizeof ( gcm_aad ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 gcm_aad FIELD 9 gcm_aad LEAF_NODE 10 gcm_aad LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_DecryptUpdate ( ctx , outbuf , & outlen , gcm_ct , sizeof ( gcm_ct ) ) ; EXPR 4 EVP_DecryptUpdate ( ctx , outbuf , & outlen , gcm_ct , sizeof ( gcm_ct ) ) FUNCTION_CALL 5 EVP_DecryptUpdate ( ctx , outbuf , & outlen , gcm_ct , sizeof ( gcm_ct ) ) CALLEE 6 EVP_DecryptUpdate LEAF_NODE 7 EVP_DecryptUpdate LEAF_NODE 6 ( ARGUMENT 6 ctx FIELD 7 ctx LEAF_NODE 8 ctx LEAF_NODE 6 , ARGUMENT 6 outbuf FIELD 7 outbuf LEAF_NODE 8 outbuf LEAF_NODE 6 , ARGUMENT 6 & outlen UNARY_EXPR 7 & outlen UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 outlen LEAF_NODE 9 outlen LEAF_NODE 6 , ARGUMENT 6 gcm_ct FIELD 7 gcm_ct LEAF_NODE 8 gcm_ct LEAF_NODE 6 , ARGUMENT 6 sizeof ( gcm_ct ) FUNCTION_CALL 7 sizeof ( gcm_ct ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 gcm_ct FIELD 9 gcm_ct LEAF_NODE 10 gcm_ct LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printf ( \"Plaintext:\\n\" ) ; EXPR 4 printf ( \"Plaintext:\\n\" ) FUNCTION_CALL 5 printf ( \"Plaintext:\\n\" ) CALLEE 6 printf LEAF_NODE 7 printf LEAF_NODE 6 ( ARGUMENT 6 \"Plaintext:\\n\" FIELD 7 \"Plaintext:\\n\" LEAF_NODE 8 \"Plaintext:\\n\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 BIO_dump_fp ( stdout , outbuf , outlen ) ; EXPR 4 BIO_dump_fp ( stdout , outbuf , outlen ) FUNCTION_CALL 5 BIO_dump_fp ( stdout , outbuf , outlen ) CALLEE 6 BIO_dump_fp LEAF_NODE 7 BIO_dump_fp LEAF_NODE 6 ( ARGUMENT 6 stdout FIELD 7 stdout LEAF_NODE 8 stdout LEAF_NODE 6 , ARGUMENT 6 outbuf FIELD 7 outbuf LEAF_NODE 8 outbuf LEAF_NODE 6 , ARGUMENT 6 outlen FIELD 7 outlen LEAF_NODE 8 outlen LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_CIPHER_CTX_ctrl ( ctx , EVP_CTRL_AEAD_SET_TAG , sizeof ( gcm_tag ) , ( void * ) gcm_tag ) ; EXPR 4 EVP_CIPHER_CTX_ctrl ( ctx , EVP_CTRL_AEAD_SET_TAG , sizeof ( gcm_tag ) , ( void * ) gcm_tag ) FUNCTION_CALL 5 EVP_CIPHER_CTX_ctrl ( ctx , EVP_CTRL_AEAD_SET_TAG , sizeof ( gcm_tag ) , ( void * ) gcm_tag ) CALLEE 6 EVP_CIPHER_CTX_ctrl LEAF_NODE 7 EVP_CIPHER_CTX_ctrl LEAF_NODE 6 ( ARGUMENT 6 ctx FIELD 7 ctx LEAF_NODE 8 ctx LEAF_NODE 6 , ARGUMENT 6 EVP_CTRL_AEAD_SET_TAG FIELD 7 EVP_CTRL_AEAD_SET_TAG LEAF_NODE 8 EVP_CTRL_AEAD_SET_TAG LEAF_NODE 6 , ARGUMENT 6 sizeof ( gcm_tag ) FUNCTION_CALL 7 sizeof ( gcm_tag ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 gcm_tag FIELD 9 gcm_tag LEAF_NODE 10 gcm_tag LEAF_NODE 8 ) LEAF_NODE 6 , ARGUMENT 6 ( void * ) gcm_tag LEAF_NODE 7 ( TYPE_NAME 7 void LEAF_NODE 8 void LEAF_NODE 7 * LEAF_NODE 7 ) FIELD 7 gcm_tag LEAF_NODE 8 gcm_tag LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 rv = EVP_DecryptFinal_ex ( ctx , outbuf , & outlen ) ; EXPR 4 rv = EVP_DecryptFinal_ex ( ctx , outbuf , & outlen ) ASSIGN 5 rv = EVP_DecryptFinal_ex ( ctx , outbuf , & outlen ) LVAL 6 rv FIELD 7 rv LEAF_NODE 8 rv ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 EVP_DecryptFinal_ex ( ctx , outbuf , & outlen ) FUNCTION_CALL 7 EVP_DecryptFinal_ex ( ctx , outbuf , & outlen ) CALLEE 8 EVP_DecryptFinal_ex LEAF_NODE 9 EVP_DecryptFinal_ex LEAF_NODE 8 ( ARGUMENT 8 ctx FIELD 9 ctx LEAF_NODE 10 ctx LEAF_NODE 8 , ARGUMENT 8 outbuf FIELD 9 outbuf LEAF_NODE 10 outbuf LEAF_NODE 8 , ARGUMENT 8 & outlen UNARY_EXPR 9 & outlen UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 outlen LEAF_NODE 11 outlen LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printf ( \"Tag Verify %s\\n\" , rv > 0 ? \"Successful!\" : \"Failed!\" ) ; EXPR 4 printf ( \"Tag Verify %s\\n\" , rv > 0 ? \"Successful!\" : \"Failed!\" ) FUNCTION_CALL 5 printf ( \"Tag Verify %s\\n\" , rv > 0 ? \"Successful!\" : \"Failed!\" ) CALLEE 6 printf LEAF_NODE 7 printf LEAF_NODE 6 ( ARGUMENT 6 \"Tag Verify %s\\n\" FIELD 7 \"Tag Verify %s\\n\" LEAF_NODE 8 \"Tag Verify %s\\n\" LEAF_NODE 6 , ARGUMENT 6 rv > 0 ? \"Successful!\" : \"Failed!\" COND_EXPR 7 rv > 0 ? \"Successful!\" : \"Failed!\" CONDITION 8 rv > 0 FIELD 9 rv LEAF_NODE 10 rv REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ? EXPR 8 \"Successful!\" FIELD 9 \"Successful!\" LEAF_NODE 10 \"Successful!\" LEAF_NODE 8 : FIELD 8 \"Failed!\" LEAF_NODE 9 \"Failed!\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_CIPHER_CTX_free ( ctx ) ; EXPR 4 EVP_CIPHER_CTX_free ( ctx ) FUNCTION_CALL 5 EVP_CIPHER_CTX_free ( ctx ) CALLEE 6 EVP_CIPHER_CTX_free LEAF_NODE 7 EVP_CIPHER_CTX_free LEAF_NODE 6 ( ARGUMENT 6 ctx FIELD 7 ctx LEAF_NODE 8 ctx LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 115, "project": "openssl_ast_normal_function_test_133", "target": 0}
{"func": "SIMPLE_DECL 1 struct ssl3_enc_method BASE_CLASSES { int ( * enc ) ( SSL * , int ) ; int ( * mac ) ( SSL * , unsigned char * , int ) ; int ( * setup_key_block ) ( SSL * ) ; int ( * generate_master_secret ) ( SSL * , unsigned char * , unsigned char * , int ) ; int ( * change_cipher_state ) ( SSL * , int ) ; int ( * final_finish_mac ) ( SSL * , const char * , int , unsigned char * ) ; int finish_mac_length ; int ( * cert_verify_mac ) ( SSL * , int , unsigned char * ) ; const char * client_finished_label ; int client_finished_label_len ; const char * server_finished_label ; int server_finished_label_len ; int ( * alert_value ) ( int ) ; int ( * export_keying_material ) ( SSL * , unsigned char * , size_t , const char * , size_t , const unsigned char * , size_t , int use_context ) ; } ; CLASS_DEF 2 struct ssl3_enc_method BASE_CLASSES { int ( * enc ) ( SSL * , int ) ; int ( * mac ) ( SSL * , unsigned char * , int ) ; int ( * setup_key_block ) ( SSL * ) ; int ( * generate_master_secret ) ( SSL * , unsigned char * , unsigned char * , int ) ; int ( * change_cipher_state ) ( SSL * , int ) ; int ( * final_finish_mac ) ( SSL * , const char * , int , unsigned char * ) ; int finish_mac_length ; int ( * cert_verify_mac ) ( SSL * , int , unsigned char * ) ; const char * client_finished_label ; int client_finished_label_len ; const char * server_finished_label ; int server_finished_label_len ; int ( * alert_value ) ( int ) ; int ( * export_keying_material ) ( SSL * , unsigned char * , size_t , const char * , size_t , const unsigned char * , size_t , int use_context ) ; } CLASS_DEF 3 struct ssl3_enc_method BASE_CLASSES { int ( * enc ) ( SSL * , int ) ; int ( * mac ) ( SSL * , unsigned char * , int ) ; int ( * setup_key_block ) ( SSL * ) ; int ( * generate_master_secret ) ( SSL * , unsigned char * , unsigned char * , int ) ; int ( * change_cipher_state ) ( SSL * , int ) ; int ( * final_finish_mac ) ( SSL * , const char * , int , unsigned char * ) ; int finish_mac_length ; int ( * cert_verify_mac ) ( SSL * , int , unsigned char * ) ; const char * client_finished_label ; int client_finished_label_len ; const char * server_finished_label ; int server_finished_label_len ; int ( * alert_value ) ( int ) ; int ( * export_keying_material ) ( SSL * , unsigned char * , size_t , const char * , size_t , const unsigned char * , size_t , int use_context ) ; } LEAF_NODE 4 struct CLASS_NAME 4 ssl3_enc_method LEAF_NODE 5 ssl3_enc_method LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int ( * enc ) ( SSL * , int ) ; int ( * mac ) ( SSL * , unsigned char * , int ) ; int ( * setup_key_block ) ( SSL * ) ; int ( * generate_master_secret ) ( SSL * , unsigned char * , unsigned char * , int ) ; int ( * change_cipher_state ) ( SSL * , int ) ; int ( * final_finish_mac ) ( SSL * , const char * , int , unsigned char * ) ; int finish_mac_length ; int ( * cert_verify_mac ) ( SSL * , int , unsigned char * ) ; const char * client_finished_label ; int client_finished_label_len ; const char * server_finished_label ; int server_finished_label_len ; int ( * alert_value ) ( int ) ; int ( * export_keying_material ) ( SSL * , unsigned char * , size_t , const char * , size_t , const unsigned char * , size_t , int use_context ) ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 enc LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 mac LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 setup_key_block LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 generate_master_secret LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 change_cipher_state LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 final_finish_mac LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 int finish_mac_length ; VAR_DECL 6 int finish_mac_length TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 finish_mac_length LEAF_NODE 8 finish_mac_length LEAF_NODE 6 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 cert_verify_mac LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 const char * client_finished_label ; VAR_DECL 6 const char * client_finished_label TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 client_finished_label LEAF_NODE 8 client_finished_label LEAF_NODE 6 ; SIMPLE_DECL 5 int client_finished_label_len ; VAR_DECL 6 int client_finished_label_len TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 client_finished_label_len LEAF_NODE 8 client_finished_label_len LEAF_NODE 6 ; SIMPLE_DECL 5 const char * server_finished_label ; VAR_DECL 6 const char * server_finished_label TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 server_finished_label LEAF_NODE 8 server_finished_label LEAF_NODE 6 ; SIMPLE_DECL 5 int server_finished_label_len ; VAR_DECL 6 int server_finished_label_len TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 server_finished_label_len LEAF_NODE 8 server_finished_label_len LEAF_NODE 6 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 alert_value LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 int LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 export_keying_material LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 , LEAF_NODE 5 size_t LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 , LEAF_NODE 5 size_t LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 , LEAF_NODE 5 size_t LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 use_context LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 ssl3_take_mac LEAF_NODE 3 ssl3_take_mac PARAMETER_LIST 2 ( SSL * s ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 const char * sender ; VAR_DECL 4 const char * sender TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 sender LEAF_NODE 6 sender LEAF_NODE 4 ; SIMPLE_DECL 3 int slen ; VAR_DECL 4 int slen TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 slen LEAF_NODE 6 slen LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> state & SSL_ST_CONNECT EXPR 5 s -> state & SSL_ST_CONNECT FIELD 6 s -> state LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 state LEAF_NODE 6 & FIELD 6 SSL_ST_CONNECT LEAF_NODE 7 SSL_ST_CONNECT LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 sender = s -> method -> ssl3_enc -> server_finished_label ; EXPR 7 sender = s -> method -> ssl3_enc -> server_finished_label ASSIGN 8 sender = s -> method -> ssl3_enc -> server_finished_label LVAL 9 sender FIELD 10 sender LEAF_NODE 11 sender ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 s -> method -> ssl3_enc -> server_finished_label FIELD 10 s -> method -> ssl3_enc -> server_finished_label LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 method LEAF_NODE 11 -> LEAF_NODE 11 ssl3_enc LEAF_NODE 11 -> LEAF_NODE 11 server_finished_label LEAF_NODE 7 ; EXPR_STATEMENT 6 slen = s -> method -> ssl3_enc -> server_finished_label_len ; EXPR 7 slen = s -> method -> ssl3_enc -> server_finished_label_len ASSIGN 8 slen = s -> method -> ssl3_enc -> server_finished_label_len LVAL 9 slen FIELD 10 slen LEAF_NODE 11 slen ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 s -> method -> ssl3_enc -> server_finished_label_len FIELD 10 s -> method -> ssl3_enc -> server_finished_label_len LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 method LEAF_NODE 11 -> LEAF_NODE 11 ssl3_enc LEAF_NODE 11 -> LEAF_NODE 11 server_finished_label_len LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 sender = s -> method -> ssl3_enc -> client_finished_label ; EXPR 7 sender = s -> method -> ssl3_enc -> client_finished_label ASSIGN 8 sender = s -> method -> ssl3_enc -> client_finished_label LVAL 9 sender FIELD 10 sender LEAF_NODE 11 sender ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 s -> method -> ssl3_enc -> client_finished_label FIELD 10 s -> method -> ssl3_enc -> client_finished_label LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 method LEAF_NODE 11 -> LEAF_NODE 11 ssl3_enc LEAF_NODE 11 -> LEAF_NODE 11 client_finished_label LEAF_NODE 7 ; EXPR_STATEMENT 6 slen = s -> method -> ssl3_enc -> client_finished_label_len ; EXPR 7 slen = s -> method -> ssl3_enc -> client_finished_label_len ASSIGN 8 slen = s -> method -> ssl3_enc -> client_finished_label_len LVAL 9 slen FIELD 10 slen LEAF_NODE 11 slen ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 s -> method -> ssl3_enc -> client_finished_label_len FIELD 10 s -> method -> ssl3_enc -> client_finished_label_len LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 method LEAF_NODE 11 -> LEAF_NODE 11 ssl3_enc LEAF_NODE 11 -> LEAF_NODE 11 client_finished_label_len LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 s -> s3 -> tmp . peer_finish_md_len = s -> method -> ssl3_enc -> final_finish_mac ( s , sender , slen , s -> s3 -> tmp . peer_finish_md ) ; EXPR 4 s -> s3 -> tmp . peer_finish_md_len = s -> method -> ssl3_enc -> final_finish_mac ( s , sender , slen , s -> s3 -> tmp . peer_finish_md ) ASSIGN 5 s -> s3 -> tmp . peer_finish_md_len = s -> method -> ssl3_enc -> final_finish_mac ( s , sender , slen , s -> s3 -> tmp . peer_finish_md ) LVAL 6 s -> s3 -> tmp . peer_finish_md_len FIELD 7 s -> s3 -> tmp . peer_finish_md_len LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s3 LEAF_NODE 8 -> LEAF_NODE 8 tmp LEAF_NODE 8 . LEAF_NODE 8 peer_finish_md_len ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 s -> method -> ssl3_enc -> final_finish_mac ( s , sender , slen , s -> s3 -> tmp . peer_finish_md ) FUNCTION_CALL 7 s -> method -> ssl3_enc -> final_finish_mac ( s , sender , slen , s -> s3 -> tmp . peer_finish_md ) CALLEE 8 s -> method -> ssl3_enc -> final_finish_mac LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 method LEAF_NODE 9 -> LEAF_NODE 9 ssl3_enc LEAF_NODE 9 -> LEAF_NODE 9 final_finish_mac LEAF_NODE 8 ( ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 , ARGUMENT 8 sender FIELD 9 sender LEAF_NODE 10 sender LEAF_NODE 8 , ARGUMENT 8 slen FIELD 9 slen LEAF_NODE 10 slen LEAF_NODE 8 , ARGUMENT 8 s -> s3 -> tmp . peer_finish_md FIELD 9 s -> s3 -> tmp . peer_finish_md LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 s3 LEAF_NODE 10 -> LEAF_NODE 10 tmp LEAF_NODE 10 . LEAF_NODE 10 peer_finish_md LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 116, "project": "openssl_ast_vul_function_test_11", "target": 1}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 char * default_config_file ; VAR_DECL 2 char * default_config_file TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 default_config_file LEAF_NODE 4 default_config_file LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 app_load_modules LEAF_NODE 3 app_load_modules PARAMETER_LIST 2 ( const CONF * config ) LEAF_NODE 3 ( PARAMETER_DECL 3 const CONF * config TYPE 4 const CONF * TYPE_NAME 5 const CONF LEAF_NODE 6 const LEAF_NODE 6 CONF POINTER 5 * LEAF_NODE 6 * NAME 4 config LEAF_NODE 5 config LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 CONF * to_free ; to_free = NULL ; VAR_DECL 4 CONF * to_free ; to_free = NULL TYPE 5 CONF * TYPE_NAME 6 CONF LEAF_NODE 7 CONF POINTER 6 * LEAF_NODE 7 * NAME 5 to_free LEAF_NODE 6 to_free LEAF_NODE 5 ; INIT 5 to_free = NULL ASSIGN 6 to_free = NULL LVAL 7 to_free NAME 8 to_free LEAF_NODE 9 to_free ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 config == NULL EXPR 5 config == NULL FIELD 6 config LEAF_NODE 7 config EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 config = to_free = app_load_config_quiet ( default_config_file ) ; EXPR 6 config = to_free = app_load_config_quiet ( default_config_file ) ASSIGN 7 config = to_free = app_load_config_quiet ( default_config_file ) LVAL 8 config FIELD 9 config LEAF_NODE 10 config ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 to_free = app_load_config_quiet ( default_config_file ) ASSIGN 9 to_free = app_load_config_quiet ( default_config_file ) LVAL 10 to_free FIELD 11 to_free LEAF_NODE 12 to_free ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 app_load_config_quiet ( default_config_file ) FUNCTION_CALL 11 app_load_config_quiet ( default_config_file ) CALLEE 12 app_load_config_quiet LEAF_NODE 13 app_load_config_quiet LEAF_NODE 12 ( ARGUMENT 12 default_config_file FIELD 13 default_config_file LEAF_NODE 14 default_config_file LEAF_NODE 12 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 config == NULL EXPR 5 config == NULL FIELD 6 config LEAF_NODE 7 config EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 1 EXPR 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CONF_modules_load ( config , NULL , 0 ) <= 0 EXPR 5 CONF_modules_load ( config , NULL , 0 ) <= 0 FUNCTION_CALL 6 CONF_modules_load ( config , NULL , 0 ) CALLEE 7 CONF_modules_load LEAF_NODE 8 CONF_modules_load LEAF_NODE 7 ( ARGUMENT 7 config FIELD 8 config LEAF_NODE 9 config LEAF_NODE 7 , ARGUMENT 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 7 , ARGUMENT 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 7 ) REL_OPERATOR 6 <= LEAF_NODE 7 <= FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 BIO_printf ( bio_err , \"Error configuring OpenSSL modules\\n\" ) ; EXPR 7 BIO_printf ( bio_err , \"Error configuring OpenSSL modules\\n\" ) FUNCTION_CALL 8 BIO_printf ( bio_err , \"Error configuring OpenSSL modules\\n\" ) CALLEE 9 BIO_printf LEAF_NODE 10 BIO_printf LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 , ARGUMENT 9 \"Error configuring OpenSSL modules\\n\" FIELD 10 \"Error configuring OpenSSL modules\\n\" LEAF_NODE 11 \"Error configuring OpenSSL modules\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ERR_print_errors ( bio_err ) ; EXPR 7 ERR_print_errors ( bio_err ) FUNCTION_CALL 8 ERR_print_errors ( bio_err ) CALLEE 9 ERR_print_errors LEAF_NODE 10 ERR_print_errors LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 NCONF_free ( to_free ) ; EXPR 7 NCONF_free ( to_free ) FUNCTION_CALL 8 NCONF_free ( to_free ) CALLEE 9 NCONF_free LEAF_NODE 10 NCONF_free LEAF_NODE 9 ( ARGUMENT 9 to_free FIELD 10 to_free LEAF_NODE 11 to_free LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 NCONF_free ( to_free ) ; EXPR 4 NCONF_free ( to_free ) FUNCTION_CALL 5 NCONF_free ( to_free ) CALLEE 6 NCONF_free LEAF_NODE 7 NCONF_free LEAF_NODE 6 ( ARGUMENT 6 to_free FIELD 7 to_free LEAF_NODE 8 to_free LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 117, "project": "openssl_ast_normal_function_test_2", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS ; VAR_DECL 2 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS TYPE 3 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } CLASS_DEF 4 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } LEAF_NODE 5 struct CLASS_NAME 5 args_st LEAF_NODE 6 args_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int size ; int argc ; char * argv ; SIMPLE_DECL 6 int size ; VAR_DECL 7 int size TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 size LEAF_NODE 9 size LEAF_NODE 7 ; SIMPLE_DECL 6 int argc ; VAR_DECL 7 int argc TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 argc LEAF_NODE 9 argc LEAF_NODE 7 ; SIMPLE_DECL 6 char * argv ; VAR_DECL 7 char * argv TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 argv LEAF_NODE 9 argv LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 ARGS LEAF_NODE 4 ARGS LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static const char * LEAF_NODE 3 static TYPE_NAME 3 const char LEAF_NODE 4 const LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 modestr LEAF_NODE 3 modestr PARAMETER_LIST 2 ( char mode , int format ) LEAF_NODE 3 ( PARAMETER_DECL 3 char mode TYPE 4 char TYPE_NAME 5 char LEAF_NODE 6 char NAME 4 mode LEAF_NODE 5 mode LEAF_NODE 3 , PARAMETER_DECL 3 int format TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 format LEAF_NODE 5 format LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 OPENSSL_assert ( mode == 'a' || mode == 'r' || mode == 'w' ) ; EXPR 4 OPENSSL_assert ( mode == 'a' || mode == 'r' || mode == 'w' ) FUNCTION_CALL 5 OPENSSL_assert ( mode == 'a' || mode == 'r' || mode == 'w' ) CALLEE 6 OPENSSL_assert LEAF_NODE 7 OPENSSL_assert LEAF_NODE 6 ( ARGUMENT 6 mode == 'a' || mode == 'r' || mode == 'w' OR 7 mode == 'a' || mode == 'r' || mode == 'w' EXPR 8 mode == 'a' FIELD 9 mode LEAF_NODE 10 mode EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 'a' LEAF_NODE 10 'a' LEAF_NODE 8 || EXPR 8 mode == 'r' || mode == 'w' OR 9 mode == 'r' || mode == 'w' EXPR 10 mode == 'r' FIELD 11 mode LEAF_NODE 12 mode EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 'r' LEAF_NODE 12 'r' LEAF_NODE 10 || EXPR 10 mode == 'w' FIELD 11 mode LEAF_NODE 12 mode EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 'w' LEAF_NODE 12 'w' LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 mode EXPR 5 mode FIELD 6 mode LEAF_NODE 7 mode LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 case LEAF_NODE 6 'a' LEAF_NODE 6 : JUMP_STATEMENT 6 return istext ( format ) ? \"a\" : \"ab\" ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 istext ( format ) ? \"a\" : \"ab\" EXPR 8 istext ( format ) ? \"a\" : \"ab\" COND_EXPR 9 istext ( format ) ? \"a\" : \"ab\" CONDITION 10 istext ( format ) FUNCTION_CALL 11 istext ( format ) CALLEE 12 istext LEAF_NODE 13 istext LEAF_NODE 12 ( ARGUMENT 12 format FIELD 13 format LEAF_NODE 14 format LEAF_NODE 12 ) LEAF_NODE 10 ? EXPR 10 \"a\" FIELD 11 \"a\" LEAF_NODE 12 \"a\" LEAF_NODE 10 : FIELD 10 \"ab\" LEAF_NODE 11 \"ab\" LEAF_NODE 7 ; LEAF_NODE 6 case LEAF_NODE 6 'r' LEAF_NODE 6 : JUMP_STATEMENT 6 return istext ( format ) ? \"r\" : \"rb\" ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 istext ( format ) ? \"r\" : \"rb\" EXPR 8 istext ( format ) ? \"r\" : \"rb\" COND_EXPR 9 istext ( format ) ? \"r\" : \"rb\" CONDITION 10 istext ( format ) FUNCTION_CALL 11 istext ( format ) CALLEE 12 istext LEAF_NODE 13 istext LEAF_NODE 12 ( ARGUMENT 12 format FIELD 13 format LEAF_NODE 14 format LEAF_NODE 12 ) LEAF_NODE 10 ? EXPR 10 \"r\" FIELD 11 \"r\" LEAF_NODE 12 \"r\" LEAF_NODE 10 : FIELD 10 \"rb\" LEAF_NODE 11 \"rb\" LEAF_NODE 7 ; LEAF_NODE 6 case LEAF_NODE 6 'w' LEAF_NODE 6 : JUMP_STATEMENT 6 return istext ( format ) ? \"w\" : \"wb\" ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 istext ( format ) ? \"w\" : \"wb\" EXPR 8 istext ( format ) ? \"w\" : \"wb\" COND_EXPR 9 istext ( format ) ? \"w\" : \"wb\" CONDITION 10 istext ( format ) FUNCTION_CALL 11 istext ( format ) CALLEE 12 istext LEAF_NODE 13 istext LEAF_NODE 12 ( ARGUMENT 12 format FIELD 13 format LEAF_NODE 14 format LEAF_NODE 12 ) LEAF_NODE 10 ? EXPR 10 \"w\" FIELD 11 \"w\" LEAF_NODE 12 \"w\" LEAF_NODE 10 : FIELD 10 \"wb\" LEAF_NODE 11 \"wb\" LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return NULL ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 NULL EXPR 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 118, "project": "openssl_ast_normal_function_test_106", "target": 0}
{"func": "SIMPLE_DECL 1 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } ; CLASS_DEF 2 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } CLASS_DEF 3 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } LEAF_NODE 4 struct CLASS_NAME 4 async_ctrs LEAF_NODE 5 async_ctrs LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned int rctr ; unsigned int wctr ; SIMPLE_DECL 5 unsigned int rctr ; VAR_DECL 6 unsigned int rctr TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rctr LEAF_NODE 8 rctr LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int wctr ; VAR_DECL 6 unsigned int wctr TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 wctr LEAF_NODE 8 wctr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 blockpause LEAF_NODE 3 blockpause PARAMETER_LIST 2 ( void * args ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * args TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 args LEAF_NODE 5 args LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 ASYNC_block_pause ( ) ; EXPR 4 ASYNC_block_pause ( ) FUNCTION_CALL 5 ASYNC_block_pause ( ) CALLEE 6 ASYNC_block_pause LEAF_NODE 7 ASYNC_block_pause LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ASYNC_pause_job ( ) ; EXPR 4 ASYNC_pause_job ( ) FUNCTION_CALL 5 ASYNC_pause_job ( ) CALLEE 6 ASYNC_pause_job LEAF_NODE 7 ASYNC_pause_job LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ASYNC_unblock_pause ( ) ; EXPR 4 ASYNC_unblock_pause ( ) FUNCTION_CALL 5 ASYNC_unblock_pause ( ) CALLEE 6 ASYNC_unblock_pause LEAF_NODE 7 ASYNC_unblock_pause LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ASYNC_pause_job ( ) ; EXPR 4 ASYNC_pause_job ( ) FUNCTION_CALL 5 ASYNC_pause_job ( ) CALLEE 6 ASYNC_pause_job LEAF_NODE 7 ASYNC_pause_job LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 119, "project": "openssl_ast_normal_function_test_164", "target": 0}
{"func": "SIMPLE_DECL 1 struct aes_key_st BASE_CLASSES { unsigned long [ 4 * ( AES_MAXNR + 1 ) ] rd_key ; unsigned int [ 4 * ( AES_MAXNR + 1 ) ] rd_key ; int rounds ; } ; CLASS_DEF 2 struct aes_key_st BASE_CLASSES { unsigned long [ 4 * ( AES_MAXNR + 1 ) ] rd_key ; unsigned int [ 4 * ( AES_MAXNR + 1 ) ] rd_key ; int rounds ; } CLASS_DEF 3 struct aes_key_st BASE_CLASSES { unsigned long [ 4 * ( AES_MAXNR + 1 ) ] rd_key ; unsigned int [ 4 * ( AES_MAXNR + 1 ) ] rd_key ; int rounds ; } LEAF_NODE 4 struct CLASS_NAME 4 aes_key_st LEAF_NODE 5 aes_key_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned long [ 4 * ( AES_MAXNR + 1 ) ] rd_key ; unsigned int [ 4 * ( AES_MAXNR + 1 ) ] rd_key ; int rounds ; SIMPLE_DECL 5 unsigned long [ 4 * ( AES_MAXNR + 1 ) ] rd_key ; VAR_DECL 6 unsigned long [ 4 * ( AES_MAXNR + 1 ) ] rd_key TYPE 7 unsigned long [ 4 * ( AES_MAXNR + 1 ) ] TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long TYPE_SUFFIX 8 [ 4 * ( AES_MAXNR + 1 ) ] LEAF_NODE 9 [ FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 9 * LEAF_NODE 9 ( FIELD 9 AES_MAXNR LEAF_NODE 10 AES_MAXNR LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ) LEAF_NODE 9 ] NAME 7 rd_key LEAF_NODE 8 rd_key LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int [ 4 * ( AES_MAXNR + 1 ) ] rd_key ; VAR_DECL 6 unsigned int [ 4 * ( AES_MAXNR + 1 ) ] rd_key TYPE 7 unsigned int [ 4 * ( AES_MAXNR + 1 ) ] TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int TYPE_SUFFIX 8 [ 4 * ( AES_MAXNR + 1 ) ] LEAF_NODE 9 [ FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 9 * LEAF_NODE 9 ( FIELD 9 AES_MAXNR LEAF_NODE 10 AES_MAXNR LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ) LEAF_NODE 9 ] NAME 7 rd_key LEAF_NODE 8 rd_key LEAF_NODE 6 ; SIMPLE_DECL 5 int rounds ; VAR_DECL 6 int rounds TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rounds LEAF_NODE 8 rounds LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct aes_key_st AES_KEY ; VAR_DECL 2 struct aes_key_st AES_KEY TYPE 3 struct aes_key_st TYPE_NAME 4 struct aes_key_st LEAF_NODE 5 struct LEAF_NODE 5 aes_key_st NAME 3 AES_KEY LEAF_NODE 4 AES_KEY LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { AES_KEY ks ; SHA_CTX head , SHA_CTX tail , SHA_CTX md ; size_t payload_length ; union CLASS_NAME BASE_CLASSES { unsigned int tls_ver ; unsigned char [ 16 ] tls_aad ; } aux ; } EVP_AES_HMAC_SHA1 ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { AES_KEY ks ; SHA_CTX head , SHA_CTX tail , SHA_CTX md ; size_t payload_length ; union CLASS_NAME BASE_CLASSES { unsigned int tls_ver ; unsigned char [ 16 ] tls_aad ; } aux ; } EVP_AES_HMAC_SHA1 TYPE 3 struct CLASS_NAME BASE_CLASSES { AES_KEY ks ; SHA_CTX head , SHA_CTX tail , SHA_CTX md ; size_t payload_length ; union CLASS_NAME BASE_CLASSES { unsigned int tls_ver ; unsigned char [ 16 ] tls_aad ; } aux ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { AES_KEY ks ; SHA_CTX head , SHA_CTX tail , SHA_CTX md ; size_t payload_length ; union CLASS_NAME BASE_CLASSES { unsigned int tls_ver ; unsigned char [ 16 ] tls_aad ; } aux ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 AES_KEY ks ; SHA_CTX head , SHA_CTX tail , SHA_CTX md ; size_t payload_length ; union CLASS_NAME BASE_CLASSES { unsigned int tls_ver ; unsigned char [ 16 ] tls_aad ; } aux ; SIMPLE_DECL 6 AES_KEY ks ; VAR_DECL 7 AES_KEY ks TYPE 8 AES_KEY TYPE_NAME 9 AES_KEY LEAF_NODE 10 AES_KEY NAME 8 ks LEAF_NODE 9 ks LEAF_NODE 7 ; SIMPLE_DECL 6 SHA_CTX head , SHA_CTX tail , SHA_CTX md ; INIT_DECL_LIST 7 SHA_CTX head , SHA_CTX tail , SHA_CTX md VAR_DECL 8 SHA_CTX head TYPE 9 SHA_CTX TYPE_NAME 10 SHA_CTX LEAF_NODE 11 SHA_CTX NAME 9 head LEAF_NODE 10 head LEAF_NODE 8 , INIT_DECL_LIST 8 SHA_CTX tail , SHA_CTX md VAR_DECL 9 SHA_CTX tail TYPE 10 SHA_CTX TYPE_NAME 11 SHA_CTX LEAF_NODE 12 SHA_CTX NAME 10 tail LEAF_NODE 11 tail LEAF_NODE 9 , VAR_DECL 9 SHA_CTX md TYPE 10 SHA_CTX TYPE_NAME 11 SHA_CTX LEAF_NODE 12 SHA_CTX NAME 10 md LEAF_NODE 11 md LEAF_NODE 7 ; SIMPLE_DECL 6 size_t payload_length ; VAR_DECL 7 size_t payload_length TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 payload_length LEAF_NODE 9 payload_length LEAF_NODE 7 ; SIMPLE_DECL 6 union CLASS_NAME BASE_CLASSES { unsigned int tls_ver ; unsigned char [ 16 ] tls_aad ; } aux ; VAR_DECL 7 union CLASS_NAME BASE_CLASSES { unsigned int tls_ver ; unsigned char [ 16 ] tls_aad ; } aux TYPE 8 union CLASS_NAME BASE_CLASSES { unsigned int tls_ver ; unsigned char [ 16 ] tls_aad ; } CLASS_DEF 9 union CLASS_NAME BASE_CLASSES { unsigned int tls_ver ; unsigned char [ 16 ] tls_aad ; } LEAF_NODE 10 union LEAF_NODE 10 CLASS_NAME LEAF_NODE 10 BASE_CLASSES LEAF_NODE 10 { CLASS_CONTENT 10 unsigned int tls_ver ; unsigned char [ 16 ] tls_aad ; SIMPLE_DECL 11 unsigned int tls_ver ; VAR_DECL 12 unsigned int tls_ver TYPE 13 unsigned int TYPE_NAME 14 unsigned int LEAF_NODE 15 unsigned LEAF_NODE 15 int NAME 13 tls_ver LEAF_NODE 14 tls_ver LEAF_NODE 12 ; SIMPLE_DECL 11 unsigned char [ 16 ] tls_aad ; VAR_DECL 12 unsigned char [ 16 ] tls_aad TYPE 13 unsigned char [ 16 ] TYPE_NAME 14 unsigned char LEAF_NODE 15 unsigned LEAF_NODE 15 char TYPE_SUFFIX 14 [ 16 ] LEAF_NODE 15 [ FIELD 15 16 LEAF_NODE 16 16 LEAF_NODE 15 ] NAME 13 tls_aad LEAF_NODE 14 tls_aad LEAF_NODE 12 ; LEAF_NODE 10 } NAME 8 aux LEAF_NODE 9 aux LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EVP_AES_HMAC_SHA1 LEAF_NODE 4 EVP_AES_HMAC_SHA1 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 aesni_cbc_hmac_sha1_cipher LEAF_NODE 3 aesni_cbc_hmac_sha1_cipher PARAMETER_LIST 2 ( EVP_CIPHER_CTX * ctx , unsigned char * out , const unsigned char * in , size_t len ) LEAF_NODE 3 ( PARAMETER_DECL 3 EVP_CIPHER_CTX * ctx TYPE 4 EVP_CIPHER_CTX * TYPE_NAME 5 EVP_CIPHER_CTX LEAF_NODE 6 EVP_CIPHER_CTX POINTER 5 * LEAF_NODE 6 * NAME 4 ctx LEAF_NODE 5 ctx LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * out TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 const unsigned char * in TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 in LEAF_NODE 5 in LEAF_NODE 3 , PARAMETER_DECL 3 size_t len TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 EVP_AES_HMAC_SHA1 * key ; key = data ( ctx ) ; VAR_DECL 4 EVP_AES_HMAC_SHA1 * key ; key = data ( ctx ) TYPE 5 EVP_AES_HMAC_SHA1 * TYPE_NAME 6 EVP_AES_HMAC_SHA1 LEAF_NODE 7 EVP_AES_HMAC_SHA1 POINTER 6 * LEAF_NODE 7 * NAME 5 key LEAF_NODE 6 key LEAF_NODE 5 ; INIT 5 key = data ( ctx ) ASSIGN 6 key = data ( ctx ) LVAL 7 key NAME 8 key LEAF_NODE 9 key ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data ( ctx ) FUNCTION_CALL 8 data ( ctx ) CALLEE 9 data LEAF_NODE 10 data LEAF_NODE 9 ( ARGUMENT 9 ctx FIELD 10 ctx LEAF_NODE 11 ctx LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int l ; VAR_DECL 4 unsigned int l TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 l LEAF_NODE 6 l LEAF_NODE 4 ; SIMPLE_DECL 3 size_t plen ; plen = key -> payload_length , size_t iv ; iv = 0 , size_t sha_off ; sha_off = 0 ; INIT_DECL_LIST 4 size_t plen ; plen = key -> payload_length , size_t iv ; iv = 0 , size_t sha_off ; sha_off = 0 VAR_DECL 5 size_t plen ; plen = key -> payload_length TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 plen LEAF_NODE 7 plen LEAF_NODE 6 ; INIT 6 plen = key -> payload_length ASSIGN 7 plen = key -> payload_length LVAL 8 plen NAME 9 plen LEAF_NODE 10 plen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 key -> payload_length FIELD 9 key -> payload_length LEAF_NODE 10 key LEAF_NODE 10 -> LEAF_NODE 10 payload_length LEAF_NODE 5 , INIT_DECL_LIST 5 size_t iv ; iv = 0 , size_t sha_off ; sha_off = 0 VAR_DECL 6 size_t iv ; iv = 0 TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 iv LEAF_NODE 8 iv LEAF_NODE 7 ; INIT 7 iv = 0 ASSIGN 8 iv = 0 LVAL 9 iv NAME 10 iv LEAF_NODE 11 iv ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 6 , VAR_DECL 6 size_t sha_off ; sha_off = 0 TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 sha_off LEAF_NODE 8 sha_off LEAF_NODE 7 ; INIT 7 sha_off = 0 ASSIGN 8 sha_off = 0 LVAL 9 sha_off NAME 10 sha_off LEAF_NODE 11 sha_off ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 4 ; SIMPLE_DECL 3 size_t aes_off ; aes_off = 0 , size_t blocks ; INIT_DECL_LIST 4 size_t aes_off ; aes_off = 0 , size_t blocks VAR_DECL 5 size_t aes_off ; aes_off = 0 TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 aes_off LEAF_NODE 7 aes_off LEAF_NODE 6 ; INIT 6 aes_off = 0 ASSIGN 7 aes_off = 0 LVAL 8 aes_off NAME 9 aes_off LEAF_NODE 10 aes_off ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 5 , VAR_DECL 5 size_t blocks TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 blocks LEAF_NODE 7 blocks LEAF_NODE 4 ; EXPR_STATEMENT 3 sha_off = SHA_CBLOCK - key -> md . num ; EXPR 4 sha_off = SHA_CBLOCK - key -> md . num ASSIGN 5 sha_off = SHA_CBLOCK - key -> md . num LVAL 6 sha_off FIELD 7 sha_off LEAF_NODE 8 sha_off ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 SHA_CBLOCK - key -> md . num FIELD 7 SHA_CBLOCK LEAF_NODE 8 SHA_CBLOCK LEAF_NODE 7 - FIELD 7 key -> md . num LEAF_NODE 8 key LEAF_NODE 8 -> LEAF_NODE 8 md LEAF_NODE 8 . LEAF_NODE 8 num LEAF_NODE 4 ; EXPR_STATEMENT 3 key -> payload_length = NO_PAYLOAD_LENGTH ; EXPR 4 key -> payload_length = NO_PAYLOAD_LENGTH ASSIGN 5 key -> payload_length = NO_PAYLOAD_LENGTH LVAL 6 key -> payload_length FIELD 7 key -> payload_length LEAF_NODE 8 key LEAF_NODE 8 -> LEAF_NODE 8 payload_length ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NO_PAYLOAD_LENGTH FIELD 7 NO_PAYLOAD_LENGTH LEAF_NODE 8 NO_PAYLOAD_LENGTH LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 len % AES_BLOCK_SIZE EXPR 5 len % AES_BLOCK_SIZE FIELD 6 len LEAF_NODE 7 len LEAF_NODE 6 % FIELD 6 AES_BLOCK_SIZE LEAF_NODE 7 AES_BLOCK_SIZE LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ctx -> encrypt EXPR 5 ctx -> encrypt FIELD 6 ctx -> encrypt LEAF_NODE 7 ctx LEAF_NODE 7 -> LEAF_NODE 7 encrypt LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 plen == NO_PAYLOAD_LENGTH EXPR 8 plen == NO_PAYLOAD_LENGTH FIELD 9 plen LEAF_NODE 10 plen EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NO_PAYLOAD_LENGTH LEAF_NODE 10 NO_PAYLOAD_LENGTH LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 plen = len ; EXPR 9 plen = len ASSIGN 10 plen = len LVAL 11 plen FIELD 12 plen LEAF_NODE 13 plen ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 len FIELD 12 len LEAF_NODE 13 len LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 len != ( ( plen + SHA_DIGEST_LENGTH + AES_BLOCK_SIZE ) & - AES_BLOCK_SIZE ) EXPR 10 len != ( ( plen + SHA_DIGEST_LENGTH + AES_BLOCK_SIZE ) & - AES_BLOCK_SIZE ) FIELD 11 len LEAF_NODE 12 len EQ_OPERATOR 11 != LEAF_NODE 12 != LEAF_NODE 11 ( LEAF_NODE 11 ( FIELD 11 plen LEAF_NODE 12 plen LEAF_NODE 11 + FIELD 11 SHA_DIGEST_LENGTH LEAF_NODE 12 SHA_DIGEST_LENGTH LEAF_NODE 11 + FIELD 11 AES_BLOCK_SIZE LEAF_NODE 12 AES_BLOCK_SIZE LEAF_NODE 11 ) LEAF_NODE 11 & UNARY_EXPR 11 - AES_BLOCK_SIZE UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 AES_BLOCK_SIZE LEAF_NODE 13 AES_BLOCK_SIZE LEAF_NODE 11 ) LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 return 0 ; KEYWORD 11 return LEAF_NODE 12 return DESTINATION 11 0 EXPR 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 11 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 key -> aux . tls_ver >= TLS1_1_VERSION EXPR 10 key -> aux . tls_ver >= TLS1_1_VERSION FIELD 11 key -> aux . tls_ver LEAF_NODE 12 key LEAF_NODE 12 -> LEAF_NODE 12 aux LEAF_NODE 12 . LEAF_NODE 12 tls_ver REL_OPERATOR 11 >= LEAF_NODE 12 >= FIELD 11 TLS1_1_VERSION LEAF_NODE 12 TLS1_1_VERSION LEAF_NODE 9 ) STATEMENTS 9 EXPR_STATEMENT 10 iv = AES_BLOCK_SIZE ; EXPR 11 iv = AES_BLOCK_SIZE ASSIGN 12 iv = AES_BLOCK_SIZE LVAL 13 iv FIELD 14 iv LEAF_NODE 15 iv ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 AES_BLOCK_SIZE FIELD 14 AES_BLOCK_SIZE LEAF_NODE 15 AES_BLOCK_SIZE LEAF_NODE 11 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 plen > ( sha_off + iv ) && ( blocks = ( plen - ( sha_off + iv ) ) / SHA_CBLOCK ) EXPR 8 plen > ( sha_off + iv ) && ( blocks = ( plen - ( sha_off + iv ) ) / SHA_CBLOCK ) AND 9 plen > ( sha_off + iv ) && ( blocks = ( plen - ( sha_off + iv ) ) / SHA_CBLOCK ) EXPR 10 plen > ( sha_off + iv ) FIELD 11 plen LEAF_NODE 12 plen REL_OPERATOR 11 > LEAF_NODE 12 > LEAF_NODE 11 ( FIELD 11 sha_off LEAF_NODE 12 sha_off LEAF_NODE 11 + FIELD 11 iv LEAF_NODE 12 iv LEAF_NODE 11 ) LEAF_NODE 10 && EXPR 10 ( blocks = ( plen - ( sha_off + iv ) ) / SHA_CBLOCK ) LEAF_NODE 11 ( ASSIGN 11 blocks = ( plen - ( sha_off + iv ) ) / SHA_CBLOCK LVAL 12 blocks FIELD 13 blocks LEAF_NODE 14 blocks ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( plen - ( sha_off + iv ) ) / SHA_CBLOCK LEAF_NODE 13 ( FIELD 13 plen LEAF_NODE 14 plen LEAF_NODE 13 - LEAF_NODE 13 ( FIELD 13 sha_off LEAF_NODE 14 sha_off LEAF_NODE 13 + FIELD 13 iv LEAF_NODE 14 iv LEAF_NODE 13 ) LEAF_NODE 13 ) LEAF_NODE 13 / FIELD 13 SHA_CBLOCK LEAF_NODE 14 SHA_CBLOCK LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SHA1_Update ( & key -> md , in + iv , sha_off ) ; EXPR 10 SHA1_Update ( & key -> md , in + iv , sha_off ) FUNCTION_CALL 11 SHA1_Update ( & key -> md , in + iv , sha_off ) CALLEE 12 SHA1_Update LEAF_NODE 13 SHA1_Update LEAF_NODE 12 ( ARGUMENT 12 & key -> md UNARY_EXPR 13 & key -> md UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 key -> md LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 md LEAF_NODE 12 , ARGUMENT 12 in + iv FIELD 13 in LEAF_NODE 14 in LEAF_NODE 13 + FIELD 13 iv LEAF_NODE 14 iv LEAF_NODE 12 , ARGUMENT 12 sha_off FIELD 13 sha_off LEAF_NODE 14 sha_off LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 aesni_cbc_sha1_enc ( in , out , blocks , & key -> ks , ctx -> iv , & key -> md , in + iv + sha_off ) ; EXPR 10 aesni_cbc_sha1_enc ( in , out , blocks , & key -> ks , ctx -> iv , & key -> md , in + iv + sha_off ) FUNCTION_CALL 11 aesni_cbc_sha1_enc ( in , out , blocks , & key -> ks , ctx -> iv , & key -> md , in + iv + sha_off ) CALLEE 12 aesni_cbc_sha1_enc LEAF_NODE 13 aesni_cbc_sha1_enc LEAF_NODE 12 ( ARGUMENT 12 in FIELD 13 in LEAF_NODE 14 in LEAF_NODE 12 , ARGUMENT 12 out FIELD 13 out LEAF_NODE 14 out LEAF_NODE 12 , ARGUMENT 12 blocks FIELD 13 blocks LEAF_NODE 14 blocks LEAF_NODE 12 , ARGUMENT 12 & key -> ks UNARY_EXPR 13 & key -> ks UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 key -> ks LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 ks LEAF_NODE 12 , ARGUMENT 12 ctx -> iv FIELD 13 ctx -> iv LEAF_NODE 14 ctx LEAF_NODE 14 -> LEAF_NODE 14 iv LEAF_NODE 12 , ARGUMENT 12 & key -> md UNARY_EXPR 13 & key -> md UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 key -> md LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 md LEAF_NODE 12 , ARGUMENT 12 in + iv + sha_off FIELD 13 in LEAF_NODE 14 in LEAF_NODE 13 + FIELD 13 iv LEAF_NODE 14 iv LEAF_NODE 13 + FIELD 13 sha_off LEAF_NODE 14 sha_off LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 blocks *= SHA_CBLOCK ; EXPR 10 blocks *= SHA_CBLOCK ASSIGN 11 blocks *= SHA_CBLOCK LVAL 12 blocks FIELD 13 blocks LEAF_NODE 14 blocks ASSIGN_OP 12 *= LEAF_NODE 13 *= RVAL 12 SHA_CBLOCK FIELD 13 SHA_CBLOCK LEAF_NODE 14 SHA_CBLOCK LEAF_NODE 10 ; EXPR_STATEMENT 9 aes_off += blocks ; EXPR 10 aes_off += blocks ASSIGN 11 aes_off += blocks LVAL 12 aes_off FIELD 13 aes_off LEAF_NODE 14 aes_off ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 blocks FIELD 13 blocks LEAF_NODE 14 blocks LEAF_NODE 10 ; EXPR_STATEMENT 9 sha_off += blocks ; EXPR 10 sha_off += blocks ASSIGN 11 sha_off += blocks LVAL 12 sha_off FIELD 13 sha_off LEAF_NODE 14 sha_off ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 blocks FIELD 13 blocks LEAF_NODE 14 blocks LEAF_NODE 10 ; EXPR_STATEMENT 9 key -> md . Nh += blocks >> 29 ; EXPR 10 key -> md . Nh += blocks >> 29 ASSIGN 11 key -> md . Nh += blocks >> 29 LVAL 12 key -> md . Nh FIELD 13 key -> md . Nh LEAF_NODE 14 key LEAF_NODE 14 -> LEAF_NODE 14 md LEAF_NODE 14 . LEAF_NODE 14 Nh ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 blocks >> 29 FIELD 13 blocks LEAF_NODE 14 blocks LEAF_NODE 13 >> FIELD 13 29 LEAF_NODE 14 29 LEAF_NODE 10 ; EXPR_STATEMENT 9 key -> md . Nl += blocks <<= 3 ; EXPR 10 key -> md . Nl += blocks <<= 3 ASSIGN 11 key -> md . Nl += blocks <<= 3 LVAL 12 key -> md . Nl FIELD 13 key -> md . Nl LEAF_NODE 14 key LEAF_NODE 14 -> LEAF_NODE 14 md LEAF_NODE 14 . LEAF_NODE 14 Nl ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 blocks <<= 3 ASSIGN 13 blocks <<= 3 LVAL 14 blocks FIELD 15 blocks LEAF_NODE 16 blocks ASSIGN_OP 14 <<= LEAF_NODE 15 <<= RVAL 14 3 FIELD 15 3 LEAF_NODE 16 3 LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 key -> md . Nl < ( unsigned int ) blocks EXPR 11 key -> md . Nl < ( unsigned int ) blocks FIELD 12 key -> md . Nl LEAF_NODE 13 key LEAF_NODE 13 -> LEAF_NODE 13 md LEAF_NODE 13 . LEAF_NODE 13 Nl REL_OPERATOR 12 < LEAF_NODE 13 < LEAF_NODE 12 ( TYPE_NAME 12 unsigned int LEAF_NODE 13 unsigned LEAF_NODE 13 int LEAF_NODE 12 ) FIELD 12 blocks LEAF_NODE 13 blocks LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 key -> md . Nh ++ ; EXPR 12 key -> md . Nh ++ FIELD 13 key -> md . Nh ++ LEAF_NODE 14 key LEAF_NODE 14 -> LEAF_NODE 14 md LEAF_NODE 14 . LEAF_NODE 14 Nh LEAF_NODE 14 ++ LEAF_NODE 12 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 sha_off = 0 ; EXPR 10 sha_off = 0 ASSIGN 11 sha_off = 0 LVAL 12 sha_off FIELD 13 sha_off LEAF_NODE 14 sha_off ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 sha_off += iv ; EXPR 7 sha_off += iv ASSIGN 8 sha_off += iv LVAL 9 sha_off FIELD 10 sha_off LEAF_NODE 11 sha_off ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 iv FIELD 10 iv LEAF_NODE 11 iv LEAF_NODE 7 ; EXPR_STATEMENT 6 SHA1_Update ( & key -> md , in + sha_off , plen - sha_off ) ; EXPR 7 SHA1_Update ( & key -> md , in + sha_off , plen - sha_off ) FUNCTION_CALL 8 SHA1_Update ( & key -> md , in + sha_off , plen - sha_off ) CALLEE 9 SHA1_Update LEAF_NODE 10 SHA1_Update LEAF_NODE 9 ( ARGUMENT 9 & key -> md UNARY_EXPR 10 & key -> md UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 key -> md LEAF_NODE 12 key LEAF_NODE 12 -> LEAF_NODE 12 md LEAF_NODE 9 , ARGUMENT 9 in + sha_off FIELD 10 in LEAF_NODE 11 in LEAF_NODE 10 + FIELD 10 sha_off LEAF_NODE 11 sha_off LEAF_NODE 9 , ARGUMENT 9 plen - sha_off FIELD 10 plen LEAF_NODE 11 plen LEAF_NODE 10 - FIELD 10 sha_off LEAF_NODE 11 sha_off LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 plen != len EXPR 8 plen != len FIELD 9 plen LEAF_NODE 10 plen EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 len LEAF_NODE 10 len LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 in != out EXPR 11 in != out FIELD 12 in LEAF_NODE 13 in EQ_OPERATOR 12 != LEAF_NODE 13 != FIELD 12 out LEAF_NODE 13 out LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 memcpy ( out + aes_off , in + aes_off , plen - aes_off ) ; EXPR 12 memcpy ( out + aes_off , in + aes_off , plen - aes_off ) FUNCTION_CALL 13 memcpy ( out + aes_off , in + aes_off , plen - aes_off ) CALLEE 14 memcpy LEAF_NODE 15 memcpy LEAF_NODE 14 ( ARGUMENT 14 out + aes_off FIELD 15 out LEAF_NODE 16 out LEAF_NODE 15 + FIELD 15 aes_off LEAF_NODE 16 aes_off LEAF_NODE 14 , ARGUMENT 14 in + aes_off FIELD 15 in LEAF_NODE 16 in LEAF_NODE 15 + FIELD 15 aes_off LEAF_NODE 16 aes_off LEAF_NODE 14 , ARGUMENT 14 plen - aes_off FIELD 15 plen LEAF_NODE 16 plen LEAF_NODE 15 - FIELD 15 aes_off LEAF_NODE 16 aes_off LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 9 SHA1_Final ( out + plen , & key -> md ) ; EXPR 10 SHA1_Final ( out + plen , & key -> md ) FUNCTION_CALL 11 SHA1_Final ( out + plen , & key -> md ) CALLEE 12 SHA1_Final LEAF_NODE 13 SHA1_Final LEAF_NODE 12 ( ARGUMENT 12 out + plen FIELD 13 out LEAF_NODE 14 out LEAF_NODE 13 + FIELD 13 plen LEAF_NODE 14 plen LEAF_NODE 12 , ARGUMENT 12 & key -> md UNARY_EXPR 13 & key -> md UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 key -> md LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 md LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 key -> md = key -> tail ; EXPR 10 key -> md = key -> tail ASSIGN 11 key -> md = key -> tail LVAL 12 key -> md FIELD 13 key -> md LEAF_NODE 14 key LEAF_NODE 14 -> LEAF_NODE 14 md ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 key -> tail FIELD 13 key -> tail LEAF_NODE 14 key LEAF_NODE 14 -> LEAF_NODE 14 tail LEAF_NODE 10 ; EXPR_STATEMENT 9 SHA1_Update ( & key -> md , out + plen , SHA_DIGEST_LENGTH ) ; EXPR 10 SHA1_Update ( & key -> md , out + plen , SHA_DIGEST_LENGTH ) FUNCTION_CALL 11 SHA1_Update ( & key -> md , out + plen , SHA_DIGEST_LENGTH ) CALLEE 12 SHA1_Update LEAF_NODE 13 SHA1_Update LEAF_NODE 12 ( ARGUMENT 12 & key -> md UNARY_EXPR 13 & key -> md UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 key -> md LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 md LEAF_NODE 12 , ARGUMENT 12 out + plen FIELD 13 out LEAF_NODE 14 out LEAF_NODE 13 + FIELD 13 plen LEAF_NODE 14 plen LEAF_NODE 12 , ARGUMENT 12 SHA_DIGEST_LENGTH FIELD 13 SHA_DIGEST_LENGTH LEAF_NODE 14 SHA_DIGEST_LENGTH LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 SHA1_Final ( out + plen , & key -> md ) ; EXPR 10 SHA1_Final ( out + plen , & key -> md ) FUNCTION_CALL 11 SHA1_Final ( out + plen , & key -> md ) CALLEE 12 SHA1_Final LEAF_NODE 13 SHA1_Final LEAF_NODE 12 ( ARGUMENT 12 out + plen FIELD 13 out LEAF_NODE 14 out LEAF_NODE 13 + FIELD 13 plen LEAF_NODE 14 plen LEAF_NODE 12 , ARGUMENT 12 & key -> md UNARY_EXPR 13 & key -> md UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 key -> md LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 md LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 plen += SHA_DIGEST_LENGTH ; EXPR 10 plen += SHA_DIGEST_LENGTH ASSIGN 11 plen += SHA_DIGEST_LENGTH LVAL 12 plen FIELD 13 plen LEAF_NODE 14 plen ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 SHA_DIGEST_LENGTH FIELD 13 SHA_DIGEST_LENGTH LEAF_NODE 14 SHA_DIGEST_LENGTH LEAF_NODE 10 ; ITERATION 9 KEYWORD 10 for LEAF_NODE 11 for LEAF_NODE 10 ( FOR_INIT 10 l = len - plen - 1 ; EXPR 11 l = len - plen - 1 ASSIGN 12 l = len - plen - 1 LVAL 13 l FIELD 14 l LEAF_NODE 15 l ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 len - plen - 1 FIELD 14 len LEAF_NODE 15 len LEAF_NODE 14 - FIELD 14 plen LEAF_NODE 15 plen LEAF_NODE 14 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 11 ; CONDITION 10 plen < len EXPR 11 plen < len FIELD 12 plen LEAF_NODE 13 plen REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 len LEAF_NODE 13 len LEAF_NODE 10 ; FOR_EXPR 10 plen ++ EXPR 11 plen ++ FIELD 12 plen ++ LEAF_NODE 13 plen LEAF_NODE 13 ++ LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 out [ plen ] = l ; EXPR 12 out [ plen ] = l ASSIGN 13 out [ plen ] = l LVAL 14 out [ plen ] FIELD 15 out [ plen ] LEAF_NODE 16 out LEAF_NODE 16 [ EXPR 16 plen FIELD 17 plen LEAF_NODE 18 plen LEAF_NODE 16 ] ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 l FIELD 15 l LEAF_NODE 16 l LEAF_NODE 12 ; EXPR_STATEMENT 9 aesni_cbc_encrypt ( out + aes_off , out + aes_off , len - aes_off , & key -> ks , ctx -> iv , 1 ) ; EXPR 10 aesni_cbc_encrypt ( out + aes_off , out + aes_off , len - aes_off , & key -> ks , ctx -> iv , 1 ) FUNCTION_CALL 11 aesni_cbc_encrypt ( out + aes_off , out + aes_off , len - aes_off , & key -> ks , ctx -> iv , 1 ) CALLEE 12 aesni_cbc_encrypt LEAF_NODE 13 aesni_cbc_encrypt LEAF_NODE 12 ( ARGUMENT 12 out + aes_off FIELD 13 out LEAF_NODE 14 out LEAF_NODE 13 + FIELD 13 aes_off LEAF_NODE 14 aes_off LEAF_NODE 12 , ARGUMENT 12 out + aes_off FIELD 13 out LEAF_NODE 14 out LEAF_NODE 13 + FIELD 13 aes_off LEAF_NODE 14 aes_off LEAF_NODE 12 , ARGUMENT 12 len - aes_off FIELD 13 len LEAF_NODE 14 len LEAF_NODE 13 - FIELD 13 aes_off LEAF_NODE 14 aes_off LEAF_NODE 12 , ARGUMENT 12 & key -> ks UNARY_EXPR 13 & key -> ks UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 key -> ks LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 ks LEAF_NODE 12 , ARGUMENT 12 ctx -> iv FIELD 13 ctx -> iv LEAF_NODE 14 ctx LEAF_NODE 14 -> LEAF_NODE 14 iv LEAF_NODE 12 , ARGUMENT 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 aesni_cbc_encrypt ( in + aes_off , out + aes_off , len - aes_off , & key -> ks , ctx -> iv , 1 ) ; EXPR 10 aesni_cbc_encrypt ( in + aes_off , out + aes_off , len - aes_off , & key -> ks , ctx -> iv , 1 ) FUNCTION_CALL 11 aesni_cbc_encrypt ( in + aes_off , out + aes_off , len - aes_off , & key -> ks , ctx -> iv , 1 ) CALLEE 12 aesni_cbc_encrypt LEAF_NODE 13 aesni_cbc_encrypt LEAF_NODE 12 ( ARGUMENT 12 in + aes_off FIELD 13 in LEAF_NODE 14 in LEAF_NODE 13 + FIELD 13 aes_off LEAF_NODE 14 aes_off LEAF_NODE 12 , ARGUMENT 12 out + aes_off FIELD 13 out LEAF_NODE 14 out LEAF_NODE 13 + FIELD 13 aes_off LEAF_NODE 14 aes_off LEAF_NODE 12 , ARGUMENT 12 len - aes_off FIELD 13 len LEAF_NODE 14 len LEAF_NODE 13 - FIELD 13 aes_off LEAF_NODE 14 aes_off LEAF_NODE 12 , ARGUMENT 12 & key -> ks UNARY_EXPR 13 & key -> ks UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 key -> ks LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 ks LEAF_NODE 12 , ARGUMENT 12 ctx -> iv FIELD 13 ctx -> iv LEAF_NODE 14 ctx LEAF_NODE 14 -> LEAF_NODE 14 iv LEAF_NODE 12 , ARGUMENT 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 union CLASS_NAME BASE_CLASSES { unsigned int u [ SHA_DIGEST_LENGTH / sizeof ( unsigned int ) ] ; unsigned char [ 32 + SHA_DIGEST_LENGTH ] c ; } mac , union CLASS_NAME BASE_CLASSES { unsigned int u [ SHA_DIGEST_LENGTH / sizeof ( unsigned int ) ] ; unsigned char [ 32 + SHA_DIGEST_LENGTH ] c ; } * pmac ; INIT_DECL_LIST 7 union CLASS_NAME BASE_CLASSES { unsigned int u [ SHA_DIGEST_LENGTH / sizeof ( unsigned int ) ] ; unsigned char [ 32 + SHA_DIGEST_LENGTH ] c ; } mac , union CLASS_NAME BASE_CLASSES { unsigned int u [ SHA_DIGEST_LENGTH / sizeof ( unsigned int ) ] ; unsigned char [ 32 + SHA_DIGEST_LENGTH ] c ; } * pmac VAR_DECL 8 union CLASS_NAME BASE_CLASSES { unsigned int u [ SHA_DIGEST_LENGTH / sizeof ( unsigned int ) ] ; unsigned char [ 32 + SHA_DIGEST_LENGTH ] c ; } mac TYPE 9 union CLASS_NAME BASE_CLASSES { unsigned int u [ SHA_DIGEST_LENGTH / sizeof ( unsigned int ) ] ; unsigned char [ 32 + SHA_DIGEST_LENGTH ] c ; } CLASS_DEF 10 union CLASS_NAME BASE_CLASSES { unsigned int u [ SHA_DIGEST_LENGTH / sizeof ( unsigned int ) ] ; unsigned char [ 32 + SHA_DIGEST_LENGTH ] c ; } LEAF_NODE 11 union LEAF_NODE 11 CLASS_NAME LEAF_NODE 11 BASE_CLASSES LEAF_NODE 11 { CLASS_CONTENT 11 unsigned int u [ SHA_DIGEST_LENGTH / sizeof ( unsigned int ) ] ; unsigned char [ 32 + SHA_DIGEST_LENGTH ] c ; LEAF_NODE 12 unsigned LEAF_NODE 12 int LEAF_NODE 12 u LEAF_NODE 12 [ LEAF_NODE 12 SHA_DIGEST_LENGTH LEAF_NODE 12 / LEAF_NODE 12 sizeof LEAF_NODE 12 ( LEAF_NODE 12 unsigned LEAF_NODE 12 int LEAF_NODE 12 ) LEAF_NODE 12 ] LEAF_NODE 12 ; SIMPLE_DECL 12 unsigned char [ 32 + SHA_DIGEST_LENGTH ] c ; VAR_DECL 13 unsigned char [ 32 + SHA_DIGEST_LENGTH ] c TYPE 14 unsigned char [ 32 + SHA_DIGEST_LENGTH ] TYPE_NAME 15 unsigned char LEAF_NODE 16 unsigned LEAF_NODE 16 char TYPE_SUFFIX 15 [ 32 + SHA_DIGEST_LENGTH ] LEAF_NODE 16 [ FIELD 16 32 LEAF_NODE 17 32 LEAF_NODE 16 + FIELD 16 SHA_DIGEST_LENGTH LEAF_NODE 17 SHA_DIGEST_LENGTH LEAF_NODE 16 ] NAME 14 c LEAF_NODE 15 c LEAF_NODE 13 ; LEAF_NODE 11 } NAME 9 mac LEAF_NODE 10 mac LEAF_NODE 8 , VAR_DECL 8 union CLASS_NAME BASE_CLASSES { unsigned int u [ SHA_DIGEST_LENGTH / sizeof ( unsigned int ) ] ; unsigned char [ 32 + SHA_DIGEST_LENGTH ] c ; } * pmac TYPE 9 union CLASS_NAME BASE_CLASSES { unsigned int u [ SHA_DIGEST_LENGTH / sizeof ( unsigned int ) ] ; unsigned char [ 32 + SHA_DIGEST_LENGTH ] c ; } * CLASS_DEF 10 union CLASS_NAME BASE_CLASSES { unsigned int u [ SHA_DIGEST_LENGTH / sizeof ( unsigned int ) ] ; unsigned char [ 32 + SHA_DIGEST_LENGTH ] c ; } LEAF_NODE 11 union LEAF_NODE 11 CLASS_NAME LEAF_NODE 11 BASE_CLASSES LEAF_NODE 11 { CLASS_CONTENT 11 unsigned int u [ SHA_DIGEST_LENGTH / sizeof ( unsigned int ) ] ; unsigned char [ 32 + SHA_DIGEST_LENGTH ] c ; LEAF_NODE 12 unsigned LEAF_NODE 12 int LEAF_NODE 12 u LEAF_NODE 12 [ LEAF_NODE 12 SHA_DIGEST_LENGTH LEAF_NODE 12 / LEAF_NODE 12 sizeof LEAF_NODE 12 ( LEAF_NODE 12 unsigned LEAF_NODE 12 int LEAF_NODE 12 ) LEAF_NODE 12 ] LEAF_NODE 12 ; SIMPLE_DECL 12 unsigned char [ 32 + SHA_DIGEST_LENGTH ] c ; VAR_DECL 13 unsigned char [ 32 + SHA_DIGEST_LENGTH ] c TYPE 14 unsigned char [ 32 + SHA_DIGEST_LENGTH ] TYPE_NAME 15 unsigned char LEAF_NODE 16 unsigned LEAF_NODE 16 char TYPE_SUFFIX 15 [ 32 + SHA_DIGEST_LENGTH ] LEAF_NODE 16 [ FIELD 16 32 LEAF_NODE 17 32 LEAF_NODE 16 + FIELD 16 SHA_DIGEST_LENGTH LEAF_NODE 17 SHA_DIGEST_LENGTH LEAF_NODE 16 ] NAME 14 c LEAF_NODE 15 c LEAF_NODE 13 ; LEAF_NODE 11 } POINTER 10 * LEAF_NODE 11 * NAME 9 pmac LEAF_NODE 10 pmac LEAF_NODE 7 ; EXPR_STATEMENT 6 pmac = ( void * ) ( ( ( size_t ) mac . c + 31 ) & ( ( size_t ) 0 - 32 ) ) ; EXPR 7 pmac = ( void * ) ( ( ( size_t ) mac . c + 31 ) & ( ( size_t ) 0 - 32 ) ) ASSIGN 8 pmac = ( void * ) ( ( ( size_t ) mac . c + 31 ) & ( ( size_t ) 0 - 32 ) ) LVAL 9 pmac FIELD 10 pmac LEAF_NODE 11 pmac ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( void * ) ( ( ( size_t ) mac . c + 31 ) & ( ( size_t ) 0 - 32 ) ) LEAF_NODE 10 ( TYPE_NAME 10 void LEAF_NODE 11 void LEAF_NODE 10 * LEAF_NODE 10 ) LEAF_NODE 10 ( LEAF_NODE 10 ( LEAF_NODE 10 ( TYPE_NAME 10 size_t LEAF_NODE 11 size_t LEAF_NODE 10 ) FIELD 10 mac . c LEAF_NODE 11 mac LEAF_NODE 11 . LEAF_NODE 11 c LEAF_NODE 10 + FIELD 10 31 LEAF_NODE 11 31 LEAF_NODE 10 ) LEAF_NODE 10 & LEAF_NODE 10 ( LEAF_NODE 10 ( TYPE_NAME 10 size_t LEAF_NODE 11 size_t LEAF_NODE 10 ) FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 10 - FIELD 10 32 LEAF_NODE 11 32 LEAF_NODE 10 ) LEAF_NODE 10 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 plen != NO_PAYLOAD_LENGTH EXPR 8 plen != NO_PAYLOAD_LENGTH FIELD 9 plen LEAF_NODE 10 plen EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 NO_PAYLOAD_LENGTH LEAF_NODE 10 NO_PAYLOAD_LENGTH LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SIMPLE_DECL 9 size_t inp_len , size_t mask , size_t j , size_t i ; INIT_DECL_LIST 10 size_t inp_len , size_t mask , size_t j , size_t i VAR_DECL 11 size_t inp_len TYPE 12 size_t TYPE_NAME 13 size_t LEAF_NODE 14 size_t NAME 12 inp_len LEAF_NODE 13 inp_len LEAF_NODE 11 , INIT_DECL_LIST 11 size_t mask , size_t j , size_t i VAR_DECL 12 size_t mask TYPE 13 size_t TYPE_NAME 14 size_t LEAF_NODE 15 size_t NAME 13 mask LEAF_NODE 14 mask LEAF_NODE 12 , INIT_DECL_LIST 12 size_t j , size_t i VAR_DECL 13 size_t j TYPE 14 size_t TYPE_NAME 15 size_t LEAF_NODE 16 size_t NAME 14 j LEAF_NODE 15 j LEAF_NODE 13 , VAR_DECL 13 size_t i TYPE 14 size_t TYPE_NAME 15 size_t LEAF_NODE 16 size_t NAME 14 i LEAF_NODE 15 i LEAF_NODE 10 ; SIMPLE_DECL 9 unsigned int res , unsigned int maxpad , unsigned int pad , unsigned int bitlen ; INIT_DECL_LIST 10 unsigned int res , unsigned int maxpad , unsigned int pad , unsigned int bitlen VAR_DECL 11 unsigned int res TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 res LEAF_NODE 13 res LEAF_NODE 11 , INIT_DECL_LIST 11 unsigned int maxpad , unsigned int pad , unsigned int bitlen VAR_DECL 12 unsigned int maxpad TYPE 13 unsigned int TYPE_NAME 14 unsigned int LEAF_NODE 15 unsigned LEAF_NODE 15 int NAME 13 maxpad LEAF_NODE 14 maxpad LEAF_NODE 12 , INIT_DECL_LIST 12 unsigned int pad , unsigned int bitlen VAR_DECL 13 unsigned int pad TYPE 14 unsigned int TYPE_NAME 15 unsigned int LEAF_NODE 16 unsigned LEAF_NODE 16 int NAME 14 pad LEAF_NODE 15 pad LEAF_NODE 13 , VAR_DECL 13 unsigned int bitlen TYPE 14 unsigned int TYPE_NAME 15 unsigned int LEAF_NODE 16 unsigned LEAF_NODE 16 int NAME 14 bitlen LEAF_NODE 15 bitlen LEAF_NODE 10 ; SIMPLE_DECL 9 int ret ; ret = 1 ; VAR_DECL 10 int ret ; ret = 1 TYPE 11 int TYPE_NAME 12 int LEAF_NODE 13 int NAME 11 ret LEAF_NODE 12 ret LEAF_NODE 11 ; INIT 11 ret = 1 ASSIGN 12 ret = 1 LVAL 13 ret NAME 14 ret LEAF_NODE 15 ret ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 1 FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 10 ; SIMPLE_DECL 9 union CLASS_NAME BASE_CLASSES { unsigned int [ SHA_LBLOCK ] u ; unsigned char [ SHA_CBLOCK ] c ; } * data ; data = ( void * ) key -> md . data ; VAR_DECL 10 union CLASS_NAME BASE_CLASSES { unsigned int [ SHA_LBLOCK ] u ; unsigned char [ SHA_CBLOCK ] c ; } * data ; data = ( void * ) key -> md . data TYPE 11 union CLASS_NAME BASE_CLASSES { unsigned int [ SHA_LBLOCK ] u ; unsigned char [ SHA_CBLOCK ] c ; } * CLASS_DEF 12 union CLASS_NAME BASE_CLASSES { unsigned int [ SHA_LBLOCK ] u ; unsigned char [ SHA_CBLOCK ] c ; } LEAF_NODE 13 union LEAF_NODE 13 CLASS_NAME LEAF_NODE 13 BASE_CLASSES LEAF_NODE 13 { CLASS_CONTENT 13 unsigned int [ SHA_LBLOCK ] u ; unsigned char [ SHA_CBLOCK ] c ; SIMPLE_DECL 14 unsigned int [ SHA_LBLOCK ] u ; VAR_DECL 15 unsigned int [ SHA_LBLOCK ] u TYPE 16 unsigned int [ SHA_LBLOCK ] TYPE_NAME 17 unsigned int LEAF_NODE 18 unsigned LEAF_NODE 18 int TYPE_SUFFIX 17 [ SHA_LBLOCK ] LEAF_NODE 18 [ FIELD 18 SHA_LBLOCK LEAF_NODE 19 SHA_LBLOCK LEAF_NODE 18 ] NAME 16 u LEAF_NODE 17 u LEAF_NODE 15 ; SIMPLE_DECL 14 unsigned char [ SHA_CBLOCK ] c ; VAR_DECL 15 unsigned char [ SHA_CBLOCK ] c TYPE 16 unsigned char [ SHA_CBLOCK ] TYPE_NAME 17 unsigned char LEAF_NODE 18 unsigned LEAF_NODE 18 char TYPE_SUFFIX 17 [ SHA_CBLOCK ] LEAF_NODE 18 [ FIELD 18 SHA_CBLOCK LEAF_NODE 19 SHA_CBLOCK LEAF_NODE 18 ] NAME 16 c LEAF_NODE 17 c LEAF_NODE 15 ; LEAF_NODE 13 } POINTER 12 * LEAF_NODE 13 * NAME 11 data LEAF_NODE 12 data LEAF_NODE 11 ; INIT 11 data = ( void * ) key -> md . data ASSIGN 12 data = ( void * ) key -> md . data LVAL 13 data NAME 14 data LEAF_NODE 15 data ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( void * ) key -> md . data LEAF_NODE 14 ( TYPE_NAME 14 void LEAF_NODE 15 void LEAF_NODE 14 * LEAF_NODE 14 ) FIELD 14 key -> md . data LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 md LEAF_NODE 15 . LEAF_NODE 15 data LEAF_NODE 10 ; SIMPLE_DECL 9 unsigned char [ AES_BLOCK_SIZE ] tail_iv ; VAR_DECL 10 unsigned char [ AES_BLOCK_SIZE ] tail_iv TYPE 11 unsigned char [ AES_BLOCK_SIZE ] TYPE_NAME 12 unsigned char LEAF_NODE 13 unsigned LEAF_NODE 13 char TYPE_SUFFIX 12 [ AES_BLOCK_SIZE ] LEAF_NODE 13 [ FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 13 ] NAME 11 tail_iv LEAF_NODE 12 tail_iv LEAF_NODE 10 ; SIMPLE_DECL 9 int stitch ; stitch = 0 ; VAR_DECL 10 int stitch ; stitch = 0 TYPE 11 int TYPE_NAME 12 int LEAF_NODE 13 int NAME 11 stitch LEAF_NODE 12 stitch LEAF_NODE 11 ; INIT 11 stitch = 0 ASSIGN 12 stitch = 0 LVAL 13 stitch NAME 14 stitch LEAF_NODE 15 stitch ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ( key -> aux . tls_aad [ plen - 4 ] << 8 | key -> aux . tls_aad [ plen - 3 ] ) >= TLS1_1_VERSION EXPR 11 ( key -> aux . tls_aad [ plen - 4 ] << 8 | key -> aux . tls_aad [ plen - 3 ] ) >= TLS1_1_VERSION LEAF_NODE 12 ( BIT_OR 12 key -> aux . tls_aad [ plen - 4 ] << 8 | key -> aux . tls_aad [ plen - 3 ] BIT_OR_ELEM 13 key -> aux . tls_aad [ plen - 4 ] << 8 FIELD 14 key -> aux . tls_aad [ plen - 4 ] LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 aux LEAF_NODE 15 . LEAF_NODE 15 tls_aad LEAF_NODE 15 [ EXPR 15 plen - 4 FIELD 16 plen LEAF_NODE 17 plen LEAF_NODE 16 - FIELD 16 4 LEAF_NODE 17 4 LEAF_NODE 15 ] LEAF_NODE 14 << FIELD 14 8 LEAF_NODE 15 8 LEAF_NODE 13 | BIT_OR_ELEM 13 key -> aux . tls_aad [ plen - 3 ] FIELD 14 key -> aux . tls_aad [ plen - 3 ] LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 aux LEAF_NODE 15 . LEAF_NODE 15 tls_aad LEAF_NODE 15 [ EXPR 15 plen - 3 FIELD 16 plen LEAF_NODE 17 plen LEAF_NODE 16 - FIELD 16 3 LEAF_NODE 17 3 LEAF_NODE 15 ] LEAF_NODE 12 ) REL_OPERATOR 12 >= LEAF_NODE 13 >= FIELD 12 TLS1_1_VERSION LEAF_NODE 13 TLS1_1_VERSION LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 len < ( AES_BLOCK_SIZE + SHA_DIGEST_LENGTH + 1 ) EXPR 14 len < ( AES_BLOCK_SIZE + SHA_DIGEST_LENGTH + 1 ) FIELD 15 len LEAF_NODE 16 len REL_OPERATOR 15 < LEAF_NODE 16 < LEAF_NODE 15 ( FIELD 15 AES_BLOCK_SIZE LEAF_NODE 16 AES_BLOCK_SIZE LEAF_NODE 15 + FIELD 15 SHA_DIGEST_LENGTH LEAF_NODE 16 SHA_DIGEST_LENGTH LEAF_NODE 15 + FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 15 ) LEAF_NODE 13 ) STATEMENTS 13 JUMP_STATEMENT 14 return 0 ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 0 EXPR 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ; EXPR_STATEMENT 12 memcpy ( ctx -> iv , in , AES_BLOCK_SIZE ) ; EXPR 13 memcpy ( ctx -> iv , in , AES_BLOCK_SIZE ) FUNCTION_CALL 14 memcpy ( ctx -> iv , in , AES_BLOCK_SIZE ) CALLEE 15 memcpy LEAF_NODE 16 memcpy LEAF_NODE 15 ( ARGUMENT 15 ctx -> iv FIELD 16 ctx -> iv LEAF_NODE 17 ctx LEAF_NODE 17 -> LEAF_NODE 17 iv LEAF_NODE 15 , ARGUMENT 15 in FIELD 16 in LEAF_NODE 17 in LEAF_NODE 15 , ARGUMENT 15 AES_BLOCK_SIZE FIELD 16 AES_BLOCK_SIZE LEAF_NODE 17 AES_BLOCK_SIZE LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 in += AES_BLOCK_SIZE ; EXPR 13 in += AES_BLOCK_SIZE ASSIGN 14 in += AES_BLOCK_SIZE LVAL 15 in FIELD 16 in LEAF_NODE 17 in ASSIGN_OP 15 += LEAF_NODE 16 += RVAL 15 AES_BLOCK_SIZE FIELD 16 AES_BLOCK_SIZE LEAF_NODE 17 AES_BLOCK_SIZE LEAF_NODE 13 ; EXPR_STATEMENT 12 out += AES_BLOCK_SIZE ; EXPR 13 out += AES_BLOCK_SIZE ASSIGN 14 out += AES_BLOCK_SIZE LVAL 15 out FIELD 16 out LEAF_NODE 17 out ASSIGN_OP 15 += LEAF_NODE 16 += RVAL 15 AES_BLOCK_SIZE FIELD 16 AES_BLOCK_SIZE LEAF_NODE 17 AES_BLOCK_SIZE LEAF_NODE 13 ; EXPR_STATEMENT 12 len -= AES_BLOCK_SIZE ; EXPR 13 len -= AES_BLOCK_SIZE ASSIGN 14 len -= AES_BLOCK_SIZE LVAL 15 len FIELD 16 len LEAF_NODE 17 len ASSIGN_OP 15 -= LEAF_NODE 16 -= RVAL 15 AES_BLOCK_SIZE FIELD 16 AES_BLOCK_SIZE LEAF_NODE 17 AES_BLOCK_SIZE LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 else LEAF_NODE 11 else STATEMENTS 10 SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 len < ( SHA_DIGEST_LENGTH + 1 ) EXPR 13 len < ( SHA_DIGEST_LENGTH + 1 ) FIELD 14 len LEAF_NODE 15 len REL_OPERATOR 14 < LEAF_NODE 15 < LEAF_NODE 14 ( FIELD 14 SHA_DIGEST_LENGTH LEAF_NODE 15 SHA_DIGEST_LENGTH LEAF_NODE 14 + FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 14 ) LEAF_NODE 12 ) STATEMENTS 12 JUMP_STATEMENT 13 return 0 ; KEYWORD 14 return LEAF_NODE 15 return DESTINATION 14 0 EXPR 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 14 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 len >= 1024 && ctx -> key_len == 32 EXPR 11 len >= 1024 && ctx -> key_len == 32 AND 12 len >= 1024 && ctx -> key_len == 32 EXPR 13 len >= 1024 FIELD 14 len LEAF_NODE 15 len REL_OPERATOR 14 >= LEAF_NODE 15 >= FIELD 14 1024 LEAF_NODE 15 1024 LEAF_NODE 13 && EXPR 13 ctx -> key_len == 32 FIELD 14 ctx -> key_len LEAF_NODE 15 ctx LEAF_NODE 15 -> LEAF_NODE 15 key_len EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 32 LEAF_NODE 15 32 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 memcpy ( tail_iv , in + len - 2 * AES_BLOCK_SIZE , AES_BLOCK_SIZE ) ; EXPR 13 memcpy ( tail_iv , in + len - 2 * AES_BLOCK_SIZE , AES_BLOCK_SIZE ) FUNCTION_CALL 14 memcpy ( tail_iv , in + len - 2 * AES_BLOCK_SIZE , AES_BLOCK_SIZE ) CALLEE 15 memcpy LEAF_NODE 16 memcpy LEAF_NODE 15 ( ARGUMENT 15 tail_iv FIELD 16 tail_iv LEAF_NODE 17 tail_iv LEAF_NODE 15 , ARGUMENT 15 in + len - 2 * AES_BLOCK_SIZE FIELD 16 in LEAF_NODE 17 in LEAF_NODE 16 + FIELD 16 len LEAF_NODE 17 len LEAF_NODE 16 - FIELD 16 2 LEAF_NODE 17 2 LEAF_NODE 16 * FIELD 16 AES_BLOCK_SIZE LEAF_NODE 17 AES_BLOCK_SIZE LEAF_NODE 15 , ARGUMENT 15 AES_BLOCK_SIZE FIELD 16 AES_BLOCK_SIZE LEAF_NODE 17 AES_BLOCK_SIZE LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 aesni_cbc_encrypt ( in + len - AES_BLOCK_SIZE , out + len - AES_BLOCK_SIZE , AES_BLOCK_SIZE , & key -> ks , tail_iv , 0 ) ; EXPR 13 aesni_cbc_encrypt ( in + len - AES_BLOCK_SIZE , out + len - AES_BLOCK_SIZE , AES_BLOCK_SIZE , & key -> ks , tail_iv , 0 ) FUNCTION_CALL 14 aesni_cbc_encrypt ( in + len - AES_BLOCK_SIZE , out + len - AES_BLOCK_SIZE , AES_BLOCK_SIZE , & key -> ks , tail_iv , 0 ) CALLEE 15 aesni_cbc_encrypt LEAF_NODE 16 aesni_cbc_encrypt LEAF_NODE 15 ( ARGUMENT 15 in + len - AES_BLOCK_SIZE FIELD 16 in LEAF_NODE 17 in LEAF_NODE 16 + FIELD 16 len LEAF_NODE 17 len LEAF_NODE 16 - FIELD 16 AES_BLOCK_SIZE LEAF_NODE 17 AES_BLOCK_SIZE LEAF_NODE 15 , ARGUMENT 15 out + len - AES_BLOCK_SIZE FIELD 16 out LEAF_NODE 17 out LEAF_NODE 16 + FIELD 16 len LEAF_NODE 17 len LEAF_NODE 16 - FIELD 16 AES_BLOCK_SIZE LEAF_NODE 17 AES_BLOCK_SIZE LEAF_NODE 15 , ARGUMENT 15 AES_BLOCK_SIZE FIELD 16 AES_BLOCK_SIZE LEAF_NODE 17 AES_BLOCK_SIZE LEAF_NODE 15 , ARGUMENT 15 & key -> ks UNARY_EXPR 16 & key -> ks UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 key -> ks LEAF_NODE 18 key LEAF_NODE 18 -> LEAF_NODE 18 ks LEAF_NODE 15 , ARGUMENT 15 tail_iv FIELD 16 tail_iv LEAF_NODE 17 tail_iv LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 stitch = 1 ; EXPR 13 stitch = 1 ASSIGN 14 stitch = 1 LVAL 15 stitch FIELD 16 stitch LEAF_NODE 17 stitch ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 1 FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 else LEAF_NODE 11 else STATEMENTS 10 EXPR_STATEMENT 11 aesni_cbc_encrypt ( in , out , len , & key -> ks , ctx -> iv , 0 ) ; EXPR 12 aesni_cbc_encrypt ( in , out , len , & key -> ks , ctx -> iv , 0 ) FUNCTION_CALL 13 aesni_cbc_encrypt ( in , out , len , & key -> ks , ctx -> iv , 0 ) CALLEE 14 aesni_cbc_encrypt LEAF_NODE 15 aesni_cbc_encrypt LEAF_NODE 14 ( ARGUMENT 14 in FIELD 15 in LEAF_NODE 16 in LEAF_NODE 14 , ARGUMENT 14 out FIELD 15 out LEAF_NODE 16 out LEAF_NODE 14 , ARGUMENT 14 len FIELD 15 len LEAF_NODE 16 len LEAF_NODE 14 , ARGUMENT 14 & key -> ks UNARY_EXPR 15 & key -> ks UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 key -> ks LEAF_NODE 17 key LEAF_NODE 17 -> LEAF_NODE 17 ks LEAF_NODE 14 , ARGUMENT 14 ctx -> iv FIELD 15 ctx -> iv LEAF_NODE 16 ctx LEAF_NODE 16 -> LEAF_NODE 16 iv LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 9 pad = out [ len - 1 ] ; EXPR 10 pad = out [ len - 1 ] ASSIGN 11 pad = out [ len - 1 ] LVAL 12 pad FIELD 13 pad LEAF_NODE 14 pad ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 out [ len - 1 ] FIELD 13 out [ len - 1 ] LEAF_NODE 14 out LEAF_NODE 14 [ EXPR 14 len - 1 FIELD 15 len LEAF_NODE 16 len LEAF_NODE 15 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 ] LEAF_NODE 10 ; EXPR_STATEMENT 9 maxpad = len - ( SHA_DIGEST_LENGTH + 1 ) ; EXPR 10 maxpad = len - ( SHA_DIGEST_LENGTH + 1 ) ASSIGN 11 maxpad = len - ( SHA_DIGEST_LENGTH + 1 ) LVAL 12 maxpad FIELD 13 maxpad LEAF_NODE 14 maxpad ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 len - ( SHA_DIGEST_LENGTH + 1 ) FIELD 13 len LEAF_NODE 14 len LEAF_NODE 13 - LEAF_NODE 13 ( FIELD 13 SHA_DIGEST_LENGTH LEAF_NODE 14 SHA_DIGEST_LENGTH LEAF_NODE 13 + FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 maxpad |= ( 255 - maxpad ) >> ( sizeof ( maxpad ) * 8 - 8 ) ; EXPR 10 maxpad |= ( 255 - maxpad ) >> ( sizeof ( maxpad ) * 8 - 8 ) ASSIGN 11 maxpad |= ( 255 - maxpad ) >> ( sizeof ( maxpad ) * 8 - 8 ) LVAL 12 maxpad FIELD 13 maxpad LEAF_NODE 14 maxpad ASSIGN_OP 12 |= LEAF_NODE 13 |= RVAL 12 ( 255 - maxpad ) >> ( sizeof ( maxpad ) * 8 - 8 ) LEAF_NODE 13 ( FIELD 13 255 LEAF_NODE 14 255 LEAF_NODE 13 - FIELD 13 maxpad LEAF_NODE 14 maxpad LEAF_NODE 13 ) LEAF_NODE 13 >> LEAF_NODE 13 ( FUNCTION_CALL 13 sizeof ( maxpad ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 maxpad FIELD 15 maxpad LEAF_NODE 16 maxpad LEAF_NODE 14 ) LEAF_NODE 13 * FIELD 13 8 LEAF_NODE 14 8 LEAF_NODE 13 - FIELD 13 8 LEAF_NODE 14 8 LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 maxpad &= 255 ; EXPR 10 maxpad &= 255 ASSIGN 11 maxpad &= 255 LVAL 12 maxpad FIELD 13 maxpad LEAF_NODE 14 maxpad ASSIGN_OP 12 &= LEAF_NODE 13 &= RVAL 12 255 FIELD 13 255 LEAF_NODE 14 255 LEAF_NODE 10 ; EXPR_STATEMENT 9 inp_len = len - ( SHA_DIGEST_LENGTH + pad + 1 ) ; EXPR 10 inp_len = len - ( SHA_DIGEST_LENGTH + pad + 1 ) ASSIGN 11 inp_len = len - ( SHA_DIGEST_LENGTH + pad + 1 ) LVAL 12 inp_len FIELD 13 inp_len LEAF_NODE 14 inp_len ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 len - ( SHA_DIGEST_LENGTH + pad + 1 ) FIELD 13 len LEAF_NODE 14 len LEAF_NODE 13 - LEAF_NODE 13 ( FIELD 13 SHA_DIGEST_LENGTH LEAF_NODE 14 SHA_DIGEST_LENGTH LEAF_NODE 13 + FIELD 13 pad LEAF_NODE 14 pad LEAF_NODE 13 + FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 mask = ( 0 - ( ( inp_len - len ) >> ( sizeof ( inp_len ) * 8 - 1 ) ) ) ; EXPR 10 mask = ( 0 - ( ( inp_len - len ) >> ( sizeof ( inp_len ) * 8 - 1 ) ) ) ASSIGN 11 mask = ( 0 - ( ( inp_len - len ) >> ( sizeof ( inp_len ) * 8 - 1 ) ) ) LVAL 12 mask FIELD 13 mask LEAF_NODE 14 mask ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( 0 - ( ( inp_len - len ) >> ( sizeof ( inp_len ) * 8 - 1 ) ) ) LEAF_NODE 13 ( FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 13 - LEAF_NODE 13 ( LEAF_NODE 13 ( FIELD 13 inp_len LEAF_NODE 14 inp_len LEAF_NODE 13 - FIELD 13 len LEAF_NODE 14 len LEAF_NODE 13 ) LEAF_NODE 13 >> LEAF_NODE 13 ( FUNCTION_CALL 13 sizeof ( inp_len ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 inp_len FIELD 15 inp_len LEAF_NODE 16 inp_len LEAF_NODE 14 ) LEAF_NODE 13 * FIELD 13 8 LEAF_NODE 14 8 LEAF_NODE 13 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 13 ) LEAF_NODE 13 ) LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 inp_len &= mask ; EXPR 10 inp_len &= mask ASSIGN 11 inp_len &= mask LVAL 12 inp_len FIELD 13 inp_len LEAF_NODE 14 inp_len ASSIGN_OP 12 &= LEAF_NODE 13 &= RVAL 12 mask FIELD 13 mask LEAF_NODE 14 mask LEAF_NODE 10 ; EXPR_STATEMENT 9 ret &= ( int ) mask ; EXPR 10 ret &= ( int ) mask ASSIGN 11 ret &= ( int ) mask LVAL 12 ret FIELD 13 ret LEAF_NODE 14 ret ASSIGN_OP 12 &= LEAF_NODE 13 &= RVAL 12 ( int ) mask LEAF_NODE 13 ( TYPE_NAME 13 int LEAF_NODE 14 int LEAF_NODE 13 ) FIELD 13 mask LEAF_NODE 14 mask LEAF_NODE 10 ; EXPR_STATEMENT 9 key -> aux . tls_aad [ plen - 2 ] = inp_len >> 8 ; EXPR 10 key -> aux . tls_aad [ plen - 2 ] = inp_len >> 8 ASSIGN 11 key -> aux . tls_aad [ plen - 2 ] = inp_len >> 8 LVAL 12 key -> aux . tls_aad [ plen - 2 ] FIELD 13 key -> aux . tls_aad [ plen - 2 ] LEAF_NODE 14 key LEAF_NODE 14 -> LEAF_NODE 14 aux LEAF_NODE 14 . LEAF_NODE 14 tls_aad LEAF_NODE 14 [ EXPR 14 plen - 2 FIELD 15 plen LEAF_NODE 16 plen LEAF_NODE 15 - FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 inp_len >> 8 FIELD 13 inp_len LEAF_NODE 14 inp_len LEAF_NODE 13 >> FIELD 13 8 LEAF_NODE 14 8 LEAF_NODE 10 ; EXPR_STATEMENT 9 key -> aux . tls_aad [ plen - 1 ] = inp_len ; EXPR 10 key -> aux . tls_aad [ plen - 1 ] = inp_len ASSIGN 11 key -> aux . tls_aad [ plen - 1 ] = inp_len LVAL 12 key -> aux . tls_aad [ plen - 1 ] FIELD 13 key -> aux . tls_aad [ plen - 1 ] LEAF_NODE 14 key LEAF_NODE 14 -> LEAF_NODE 14 aux LEAF_NODE 14 . LEAF_NODE 14 tls_aad LEAF_NODE 14 [ EXPR 14 plen - 1 FIELD 15 plen LEAF_NODE 16 plen LEAF_NODE 15 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 inp_len FIELD 13 inp_len LEAF_NODE 14 inp_len LEAF_NODE 10 ; EXPR_STATEMENT 9 key -> md = key -> head ; EXPR 10 key -> md = key -> head ASSIGN 11 key -> md = key -> head LVAL 12 key -> md FIELD 13 key -> md LEAF_NODE 14 key LEAF_NODE 14 -> LEAF_NODE 14 md ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 key -> head FIELD 13 key -> head LEAF_NODE 14 key LEAF_NODE 14 -> LEAF_NODE 14 head LEAF_NODE 10 ; EXPR_STATEMENT 9 SHA1_Update ( & key -> md , key -> aux . tls_aad , plen ) ; EXPR 10 SHA1_Update ( & key -> md , key -> aux . tls_aad , plen ) FUNCTION_CALL 11 SHA1_Update ( & key -> md , key -> aux . tls_aad , plen ) CALLEE 12 SHA1_Update LEAF_NODE 13 SHA1_Update LEAF_NODE 12 ( ARGUMENT 12 & key -> md UNARY_EXPR 13 & key -> md UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 key -> md LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 md LEAF_NODE 12 , ARGUMENT 12 key -> aux . tls_aad FIELD 13 key -> aux . tls_aad LEAF_NODE 14 key LEAF_NODE 14 -> LEAF_NODE 14 aux LEAF_NODE 14 . LEAF_NODE 14 tls_aad LEAF_NODE 12 , ARGUMENT 12 plen FIELD 13 plen LEAF_NODE 14 plen LEAF_NODE 12 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 stitch EXPR 11 stitch FIELD 12 stitch LEAF_NODE 13 stitch LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 blocks = ( len - ( 256 + 32 + SHA_CBLOCK ) ) / SHA_CBLOCK ; EXPR 13 blocks = ( len - ( 256 + 32 + SHA_CBLOCK ) ) / SHA_CBLOCK ASSIGN 14 blocks = ( len - ( 256 + 32 + SHA_CBLOCK ) ) / SHA_CBLOCK LVAL 15 blocks FIELD 16 blocks LEAF_NODE 17 blocks ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ( len - ( 256 + 32 + SHA_CBLOCK ) ) / SHA_CBLOCK LEAF_NODE 16 ( FIELD 16 len LEAF_NODE 17 len LEAF_NODE 16 - LEAF_NODE 16 ( FIELD 16 256 LEAF_NODE 17 256 LEAF_NODE 16 + FIELD 16 32 LEAF_NODE 17 32 LEAF_NODE 16 + FIELD 16 SHA_CBLOCK LEAF_NODE 17 SHA_CBLOCK LEAF_NODE 16 ) LEAF_NODE 16 ) LEAF_NODE 16 / FIELD 16 SHA_CBLOCK LEAF_NODE 17 SHA_CBLOCK LEAF_NODE 13 ; EXPR_STATEMENT 12 aes_off = len - AES_BLOCK_SIZE - blocks * SHA_CBLOCK ; EXPR 13 aes_off = len - AES_BLOCK_SIZE - blocks * SHA_CBLOCK ASSIGN 14 aes_off = len - AES_BLOCK_SIZE - blocks * SHA_CBLOCK LVAL 15 aes_off FIELD 16 aes_off LEAF_NODE 17 aes_off ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 len - AES_BLOCK_SIZE - blocks * SHA_CBLOCK FIELD 16 len LEAF_NODE 17 len LEAF_NODE 16 - FIELD 16 AES_BLOCK_SIZE LEAF_NODE 17 AES_BLOCK_SIZE LEAF_NODE 16 - FIELD 16 blocks LEAF_NODE 17 blocks LEAF_NODE 16 * FIELD 16 SHA_CBLOCK LEAF_NODE 17 SHA_CBLOCK LEAF_NODE 13 ; EXPR_STATEMENT 12 sha_off = SHA_CBLOCK - plen ; EXPR 13 sha_off = SHA_CBLOCK - plen ASSIGN 14 sha_off = SHA_CBLOCK - plen LVAL 15 sha_off FIELD 16 sha_off LEAF_NODE 17 sha_off ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 SHA_CBLOCK - plen FIELD 16 SHA_CBLOCK LEAF_NODE 17 SHA_CBLOCK LEAF_NODE 16 - FIELD 16 plen LEAF_NODE 17 plen LEAF_NODE 13 ; EXPR_STATEMENT 12 aesni_cbc_encrypt ( in , out , aes_off , & key -> ks , ctx -> iv , 0 ) ; EXPR 13 aesni_cbc_encrypt ( in , out , aes_off , & key -> ks , ctx -> iv , 0 ) FUNCTION_CALL 14 aesni_cbc_encrypt ( in , out , aes_off , & key -> ks , ctx -> iv , 0 ) CALLEE 15 aesni_cbc_encrypt LEAF_NODE 16 aesni_cbc_encrypt LEAF_NODE 15 ( ARGUMENT 15 in FIELD 16 in LEAF_NODE 17 in LEAF_NODE 15 , ARGUMENT 15 out FIELD 16 out LEAF_NODE 17 out LEAF_NODE 15 , ARGUMENT 15 aes_off FIELD 16 aes_off LEAF_NODE 17 aes_off LEAF_NODE 15 , ARGUMENT 15 & key -> ks UNARY_EXPR 16 & key -> ks UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 key -> ks LEAF_NODE 18 key LEAF_NODE 18 -> LEAF_NODE 18 ks LEAF_NODE 15 , ARGUMENT 15 ctx -> iv FIELD 16 ctx -> iv LEAF_NODE 17 ctx LEAF_NODE 17 -> LEAF_NODE 17 iv LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 SHA1_Update ( & key -> md , out , sha_off ) ; EXPR 13 SHA1_Update ( & key -> md , out , sha_off ) FUNCTION_CALL 14 SHA1_Update ( & key -> md , out , sha_off ) CALLEE 15 SHA1_Update LEAF_NODE 16 SHA1_Update LEAF_NODE 15 ( ARGUMENT 15 & key -> md UNARY_EXPR 16 & key -> md UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 key -> md LEAF_NODE 18 key LEAF_NODE 18 -> LEAF_NODE 18 md LEAF_NODE 15 , ARGUMENT 15 out FIELD 16 out LEAF_NODE 17 out LEAF_NODE 15 , ARGUMENT 15 sha_off FIELD 16 sha_off LEAF_NODE 17 sha_off LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 aesni256_cbc_sha1_dec ( in + aes_off , out + aes_off , blocks , & key -> ks , ctx -> iv , & key -> md , out + sha_off ) ; EXPR 13 aesni256_cbc_sha1_dec ( in + aes_off , out + aes_off , blocks , & key -> ks , ctx -> iv , & key -> md , out + sha_off ) FUNCTION_CALL 14 aesni256_cbc_sha1_dec ( in + aes_off , out + aes_off , blocks , & key -> ks , ctx -> iv , & key -> md , out + sha_off ) CALLEE 15 aesni256_cbc_sha1_dec LEAF_NODE 16 aesni256_cbc_sha1_dec LEAF_NODE 15 ( ARGUMENT 15 in + aes_off FIELD 16 in LEAF_NODE 17 in LEAF_NODE 16 + FIELD 16 aes_off LEAF_NODE 17 aes_off LEAF_NODE 15 , ARGUMENT 15 out + aes_off FIELD 16 out LEAF_NODE 17 out LEAF_NODE 16 + FIELD 16 aes_off LEAF_NODE 17 aes_off LEAF_NODE 15 , ARGUMENT 15 blocks FIELD 16 blocks LEAF_NODE 17 blocks LEAF_NODE 15 , ARGUMENT 15 & key -> ks UNARY_EXPR 16 & key -> ks UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 key -> ks LEAF_NODE 18 key LEAF_NODE 18 -> LEAF_NODE 18 ks LEAF_NODE 15 , ARGUMENT 15 ctx -> iv FIELD 16 ctx -> iv LEAF_NODE 17 ctx LEAF_NODE 17 -> LEAF_NODE 17 iv LEAF_NODE 15 , ARGUMENT 15 & key -> md UNARY_EXPR 16 & key -> md UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 key -> md LEAF_NODE 18 key LEAF_NODE 18 -> LEAF_NODE 18 md LEAF_NODE 15 , ARGUMENT 15 out + sha_off FIELD 16 out LEAF_NODE 17 out LEAF_NODE 16 + FIELD 16 sha_off LEAF_NODE 17 sha_off LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 sha_off += blocks *= SHA_CBLOCK ; EXPR 13 sha_off += blocks *= SHA_CBLOCK ASSIGN 14 sha_off += blocks *= SHA_CBLOCK LVAL 15 sha_off FIELD 16 sha_off LEAF_NODE 17 sha_off ASSIGN_OP 15 += LEAF_NODE 16 += RVAL 15 blocks *= SHA_CBLOCK ASSIGN 16 blocks *= SHA_CBLOCK LVAL 17 blocks FIELD 18 blocks LEAF_NODE 19 blocks ASSIGN_OP 17 *= LEAF_NODE 18 *= RVAL 17 SHA_CBLOCK FIELD 18 SHA_CBLOCK LEAF_NODE 19 SHA_CBLOCK LEAF_NODE 13 ; EXPR_STATEMENT 12 out += sha_off ; EXPR 13 out += sha_off ASSIGN 14 out += sha_off LVAL 15 out FIELD 16 out LEAF_NODE 17 out ASSIGN_OP 15 += LEAF_NODE 16 += RVAL 15 sha_off FIELD 16 sha_off LEAF_NODE 17 sha_off LEAF_NODE 13 ; EXPR_STATEMENT 12 len -= sha_off ; EXPR 13 len -= sha_off ASSIGN 14 len -= sha_off LVAL 15 len FIELD 16 len LEAF_NODE 17 len ASSIGN_OP 15 -= LEAF_NODE 16 -= RVAL 15 sha_off FIELD 16 sha_off LEAF_NODE 17 sha_off LEAF_NODE 13 ; EXPR_STATEMENT 12 inp_len -= sha_off ; EXPR 13 inp_len -= sha_off ASSIGN 14 inp_len -= sha_off LVAL 15 inp_len FIELD 16 inp_len LEAF_NODE 17 inp_len ASSIGN_OP 15 -= LEAF_NODE 16 -= RVAL 15 sha_off FIELD 16 sha_off LEAF_NODE 17 sha_off LEAF_NODE 13 ; EXPR_STATEMENT 12 key -> md . Nl += ( blocks << 3 ) ; EXPR 13 key -> md . Nl += ( blocks << 3 ) ASSIGN 14 key -> md . Nl += ( blocks << 3 ) LVAL 15 key -> md . Nl FIELD 16 key -> md . Nl LEAF_NODE 17 key LEAF_NODE 17 -> LEAF_NODE 17 md LEAF_NODE 17 . LEAF_NODE 17 Nl ASSIGN_OP 15 += LEAF_NODE 16 += RVAL 15 ( blocks << 3 ) LEAF_NODE 16 ( FIELD 16 blocks LEAF_NODE 17 blocks LEAF_NODE 16 << FIELD 16 3 LEAF_NODE 17 3 LEAF_NODE 16 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 memcpy ( ctx -> iv , tail_iv , AES_BLOCK_SIZE ) ; EXPR 13 memcpy ( ctx -> iv , tail_iv , AES_BLOCK_SIZE ) FUNCTION_CALL 14 memcpy ( ctx -> iv , tail_iv , AES_BLOCK_SIZE ) CALLEE 15 memcpy LEAF_NODE 16 memcpy LEAF_NODE 15 ( ARGUMENT 15 ctx -> iv FIELD 16 ctx -> iv LEAF_NODE 17 ctx LEAF_NODE 17 -> LEAF_NODE 17 iv LEAF_NODE 15 , ARGUMENT 15 tail_iv FIELD 16 tail_iv LEAF_NODE 17 tail_iv LEAF_NODE 15 , ARGUMENT 15 AES_BLOCK_SIZE FIELD 16 AES_BLOCK_SIZE LEAF_NODE 17 AES_BLOCK_SIZE LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 len -= SHA_DIGEST_LENGTH ; EXPR 10 len -= SHA_DIGEST_LENGTH ASSIGN 11 len -= SHA_DIGEST_LENGTH LVAL 12 len FIELD 13 len LEAF_NODE 14 len ASSIGN_OP 12 -= LEAF_NODE 13 -= RVAL 12 SHA_DIGEST_LENGTH FIELD 13 SHA_DIGEST_LENGTH LEAF_NODE 14 SHA_DIGEST_LENGTH LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 len >= ( 256 + SHA_CBLOCK ) EXPR 11 len >= ( 256 + SHA_CBLOCK ) FIELD 12 len LEAF_NODE 13 len REL_OPERATOR 12 >= LEAF_NODE 13 >= LEAF_NODE 12 ( FIELD 12 256 LEAF_NODE 13 256 LEAF_NODE 12 + FIELD 12 SHA_CBLOCK LEAF_NODE 13 SHA_CBLOCK LEAF_NODE 12 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 j = ( len - ( 256 + SHA_CBLOCK ) ) & ( 0 - SHA_CBLOCK ) ; EXPR 13 j = ( len - ( 256 + SHA_CBLOCK ) ) & ( 0 - SHA_CBLOCK ) ASSIGN 14 j = ( len - ( 256 + SHA_CBLOCK ) ) & ( 0 - SHA_CBLOCK ) LVAL 15 j FIELD 16 j LEAF_NODE 17 j ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ( len - ( 256 + SHA_CBLOCK ) ) & ( 0 - SHA_CBLOCK ) LEAF_NODE 16 ( FIELD 16 len LEAF_NODE 17 len LEAF_NODE 16 - LEAF_NODE 16 ( FIELD 16 256 LEAF_NODE 17 256 LEAF_NODE 16 + FIELD 16 SHA_CBLOCK LEAF_NODE 17 SHA_CBLOCK LEAF_NODE 16 ) LEAF_NODE 16 ) LEAF_NODE 16 & LEAF_NODE 16 ( FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 16 - FIELD 16 SHA_CBLOCK LEAF_NODE 17 SHA_CBLOCK LEAF_NODE 16 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 j += SHA_CBLOCK - key -> md . num ; EXPR 13 j += SHA_CBLOCK - key -> md . num ASSIGN 14 j += SHA_CBLOCK - key -> md . num LVAL 15 j FIELD 16 j LEAF_NODE 17 j ASSIGN_OP 15 += LEAF_NODE 16 += RVAL 15 SHA_CBLOCK - key -> md . num FIELD 16 SHA_CBLOCK LEAF_NODE 17 SHA_CBLOCK LEAF_NODE 16 - FIELD 16 key -> md . num LEAF_NODE 17 key LEAF_NODE 17 -> LEAF_NODE 17 md LEAF_NODE 17 . LEAF_NODE 17 num LEAF_NODE 13 ; EXPR_STATEMENT 12 SHA1_Update ( & key -> md , out , j ) ; EXPR 13 SHA1_Update ( & key -> md , out , j ) FUNCTION_CALL 14 SHA1_Update ( & key -> md , out , j ) CALLEE 15 SHA1_Update LEAF_NODE 16 SHA1_Update LEAF_NODE 15 ( ARGUMENT 15 & key -> md UNARY_EXPR 16 & key -> md UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 key -> md LEAF_NODE 18 key LEAF_NODE 18 -> LEAF_NODE 18 md LEAF_NODE 15 , ARGUMENT 15 out FIELD 16 out LEAF_NODE 17 out LEAF_NODE 15 , ARGUMENT 15 j FIELD 16 j LEAF_NODE 17 j LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 out += j ; EXPR 13 out += j ASSIGN 14 out += j LVAL 15 out FIELD 16 out LEAF_NODE 17 out ASSIGN_OP 15 += LEAF_NODE 16 += RVAL 15 j FIELD 16 j LEAF_NODE 17 j LEAF_NODE 13 ; EXPR_STATEMENT 12 len -= j ; EXPR 13 len -= j ASSIGN 14 len -= j LVAL 15 len FIELD 16 len LEAF_NODE 17 len ASSIGN_OP 15 -= LEAF_NODE 16 -= RVAL 15 j FIELD 16 j LEAF_NODE 17 j LEAF_NODE 13 ; EXPR_STATEMENT 12 inp_len -= j ; EXPR 13 inp_len -= j ASSIGN 14 inp_len -= j LVAL 15 inp_len FIELD 16 inp_len LEAF_NODE 17 inp_len ASSIGN_OP 15 -= LEAF_NODE 16 -= RVAL 15 j FIELD 16 j LEAF_NODE 17 j LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 bitlen = key -> md . Nl + ( inp_len << 3 ) ; EXPR 10 bitlen = key -> md . Nl + ( inp_len << 3 ) ASSIGN 11 bitlen = key -> md . Nl + ( inp_len << 3 ) LVAL 12 bitlen FIELD 13 bitlen LEAF_NODE 14 bitlen ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 key -> md . Nl + ( inp_len << 3 ) FIELD 13 key -> md . Nl LEAF_NODE 14 key LEAF_NODE 14 -> LEAF_NODE 14 md LEAF_NODE 14 . LEAF_NODE 14 Nl LEAF_NODE 13 + LEAF_NODE 13 ( FIELD 13 inp_len LEAF_NODE 14 inp_len LEAF_NODE 13 << FIELD 13 3 LEAF_NODE 14 3 LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 bitlen = BSWAP4 ( bitlen ) ; EXPR 10 bitlen = BSWAP4 ( bitlen ) ASSIGN 11 bitlen = BSWAP4 ( bitlen ) LVAL 12 bitlen FIELD 13 bitlen LEAF_NODE 14 bitlen ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 BSWAP4 ( bitlen ) FUNCTION_CALL 13 BSWAP4 ( bitlen ) CALLEE 14 BSWAP4 LEAF_NODE 15 BSWAP4 LEAF_NODE 14 ( ARGUMENT 14 bitlen FIELD 15 bitlen LEAF_NODE 16 bitlen LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 mac . c [ 0 ] = 0 ; EXPR 10 mac . c [ 0 ] = 0 ASSIGN 11 mac . c [ 0 ] = 0 LVAL 12 mac . c [ 0 ] FIELD 13 mac . c [ 0 ] LEAF_NODE 14 mac LEAF_NODE 14 . LEAF_NODE 14 c LEAF_NODE 14 [ EXPR 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 mac . c [ 1 ] = ( unsigned char ) ( bitlen >> 16 ) ; EXPR 10 mac . c [ 1 ] = ( unsigned char ) ( bitlen >> 16 ) ASSIGN 11 mac . c [ 1 ] = ( unsigned char ) ( bitlen >> 16 ) LVAL 12 mac . c [ 1 ] FIELD 13 mac . c [ 1 ] LEAF_NODE 14 mac LEAF_NODE 14 . LEAF_NODE 14 c LEAF_NODE 14 [ EXPR 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( unsigned char ) ( bitlen >> 16 ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 13 ) LEAF_NODE 13 ( FIELD 13 bitlen LEAF_NODE 14 bitlen LEAF_NODE 13 >> FIELD 13 16 LEAF_NODE 14 16 LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 mac . c [ 2 ] = ( unsigned char ) ( bitlen >> 8 ) ; EXPR 10 mac . c [ 2 ] = ( unsigned char ) ( bitlen >> 8 ) ASSIGN 11 mac . c [ 2 ] = ( unsigned char ) ( bitlen >> 8 ) LVAL 12 mac . c [ 2 ] FIELD 13 mac . c [ 2 ] LEAF_NODE 14 mac LEAF_NODE 14 . LEAF_NODE 14 c LEAF_NODE 14 [ EXPR 14 2 FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( unsigned char ) ( bitlen >> 8 ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 13 ) LEAF_NODE 13 ( FIELD 13 bitlen LEAF_NODE 14 bitlen LEAF_NODE 13 >> FIELD 13 8 LEAF_NODE 14 8 LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 mac . c [ 3 ] = ( unsigned char ) bitlen ; EXPR 10 mac . c [ 3 ] = ( unsigned char ) bitlen ASSIGN 11 mac . c [ 3 ] = ( unsigned char ) bitlen LVAL 12 mac . c [ 3 ] FIELD 13 mac . c [ 3 ] LEAF_NODE 14 mac LEAF_NODE 14 . LEAF_NODE 14 c LEAF_NODE 14 [ EXPR 14 3 FIELD 15 3 LEAF_NODE 16 3 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( unsigned char ) bitlen LEAF_NODE 13 ( TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 13 ) FIELD 13 bitlen LEAF_NODE 14 bitlen LEAF_NODE 10 ; EXPR_STATEMENT 9 bitlen = mac . u [ 0 ] ; EXPR 10 bitlen = mac . u [ 0 ] ASSIGN 11 bitlen = mac . u [ 0 ] LVAL 12 bitlen FIELD 13 bitlen LEAF_NODE 14 bitlen ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 mac . u [ 0 ] FIELD 13 mac . u [ 0 ] LEAF_NODE 14 mac LEAF_NODE 14 . LEAF_NODE 14 u LEAF_NODE 14 [ EXPR 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ] LEAF_NODE 10 ; EXPR_STATEMENT 9 pmac -> u [ 0 ] = 0 ; EXPR 10 pmac -> u [ 0 ] = 0 ASSIGN 11 pmac -> u [ 0 ] = 0 LVAL 12 pmac -> u [ 0 ] FIELD 13 pmac -> u [ 0 ] LEAF_NODE 14 pmac LEAF_NODE 14 -> LEAF_NODE 14 u LEAF_NODE 14 [ EXPR 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 pmac -> u [ 1 ] = 0 ; EXPR 10 pmac -> u [ 1 ] = 0 ASSIGN 11 pmac -> u [ 1 ] = 0 LVAL 12 pmac -> u [ 1 ] FIELD 13 pmac -> u [ 1 ] LEAF_NODE 14 pmac LEAF_NODE 14 -> LEAF_NODE 14 u LEAF_NODE 14 [ EXPR 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 pmac -> u [ 2 ] = 0 ; EXPR 10 pmac -> u [ 2 ] = 0 ASSIGN 11 pmac -> u [ 2 ] = 0 LVAL 12 pmac -> u [ 2 ] FIELD 13 pmac -> u [ 2 ] LEAF_NODE 14 pmac LEAF_NODE 14 -> LEAF_NODE 14 u LEAF_NODE 14 [ EXPR 14 2 FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 pmac -> u [ 3 ] = 0 ; EXPR 10 pmac -> u [ 3 ] = 0 ASSIGN 11 pmac -> u [ 3 ] = 0 LVAL 12 pmac -> u [ 3 ] FIELD 13 pmac -> u [ 3 ] LEAF_NODE 14 pmac LEAF_NODE 14 -> LEAF_NODE 14 u LEAF_NODE 14 [ EXPR 14 3 FIELD 15 3 LEAF_NODE 16 3 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 pmac -> u [ 4 ] = 0 ; EXPR 10 pmac -> u [ 4 ] = 0 ASSIGN 11 pmac -> u [ 4 ] = 0 LVAL 12 pmac -> u [ 4 ] FIELD 13 pmac -> u [ 4 ] LEAF_NODE 14 pmac LEAF_NODE 14 -> LEAF_NODE 14 u LEAF_NODE 14 [ EXPR 14 4 FIELD 15 4 LEAF_NODE 16 4 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; ITERATION 9 KEYWORD 10 for LEAF_NODE 11 for LEAF_NODE 10 ( FOR_INIT 10 res = key -> md . num , j = 0 ; EXPR 11 res = key -> md . num , j = 0 ASSIGN 12 res = key -> md . num LVAL 13 res FIELD 14 res LEAF_NODE 15 res ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 key -> md . num FIELD 14 key -> md . num LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 md LEAF_NODE 15 . LEAF_NODE 15 num LEAF_NODE 12 , ASSIGN 12 j = 0 LVAL 13 j FIELD 14 j LEAF_NODE 15 j ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; CONDITION 10 j < len EXPR 11 j < len FIELD 12 j LEAF_NODE 13 j REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 len LEAF_NODE 13 len LEAF_NODE 10 ; FOR_EXPR 10 j ++ EXPR 11 j ++ FIELD 12 j ++ LEAF_NODE 13 j LEAF_NODE 13 ++ LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 SIMPLE_DECL 12 size_t c ; c = out [ j ] ; VAR_DECL 13 size_t c ; c = out [ j ] TYPE 14 size_t TYPE_NAME 15 size_t LEAF_NODE 16 size_t NAME 14 c LEAF_NODE 15 c LEAF_NODE 14 ; INIT 14 c = out [ j ] ASSIGN 15 c = out [ j ] LVAL 16 c NAME 17 c LEAF_NODE 18 c ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 out [ j ] FIELD 17 out [ j ] LEAF_NODE 18 out LEAF_NODE 18 [ EXPR 18 j FIELD 19 j LEAF_NODE 20 j LEAF_NODE 18 ] LEAF_NODE 13 ; EXPR_STATEMENT 12 mask = ( j - inp_len ) >> ( sizeof ( j ) * 8 - 8 ) ; EXPR 13 mask = ( j - inp_len ) >> ( sizeof ( j ) * 8 - 8 ) ASSIGN 14 mask = ( j - inp_len ) >> ( sizeof ( j ) * 8 - 8 ) LVAL 15 mask FIELD 16 mask LEAF_NODE 17 mask ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ( j - inp_len ) >> ( sizeof ( j ) * 8 - 8 ) LEAF_NODE 16 ( FIELD 16 j LEAF_NODE 17 j LEAF_NODE 16 - FIELD 16 inp_len LEAF_NODE 17 inp_len LEAF_NODE 16 ) LEAF_NODE 16 >> LEAF_NODE 16 ( FUNCTION_CALL 16 sizeof ( j ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 j FIELD 18 j LEAF_NODE 19 j LEAF_NODE 17 ) LEAF_NODE 16 * FIELD 16 8 LEAF_NODE 17 8 LEAF_NODE 16 - FIELD 16 8 LEAF_NODE 17 8 LEAF_NODE 16 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 c &= mask ; EXPR 13 c &= mask ASSIGN 14 c &= mask LVAL 15 c FIELD 16 c LEAF_NODE 17 c ASSIGN_OP 15 &= LEAF_NODE 16 &= RVAL 15 mask FIELD 16 mask LEAF_NODE 17 mask LEAF_NODE 13 ; EXPR_STATEMENT 12 c |= 0x80 & ~mask & ~ ( ( inp_len - j ) >> ( sizeof ( j ) * 8 - 8 ) ) ; EXPR 13 c |= 0x80 & ~mask & ~ ( ( inp_len - j ) >> ( sizeof ( j ) * 8 - 8 ) ) ASSIGN 14 c |= 0x80 & ~mask & ~ ( ( inp_len - j ) >> ( sizeof ( j ) * 8 - 8 ) ) LVAL 15 c FIELD 16 c LEAF_NODE 17 c ASSIGN_OP 15 |= LEAF_NODE 16 |= RVAL 15 0x80 & ~mask & ~ ( ( inp_len - j ) >> ( sizeof ( j ) * 8 - 8 ) ) FIELD 16 0x80 LEAF_NODE 17 0x80 LEAF_NODE 16 & FIELD 16 ~mask LEAF_NODE 17 ~mask LEAF_NODE 16 & UNARY_EXPR 16 ~ ( ( inp_len - j ) >> ( sizeof ( j ) * 8 - 8 ) ) UNARY_OPERATOR 17 ~ LEAF_NODE 18 ~ LEAF_NODE 17 ( LEAF_NODE 17 ( FIELD 17 inp_len LEAF_NODE 18 inp_len LEAF_NODE 17 - FIELD 17 j LEAF_NODE 18 j LEAF_NODE 17 ) LEAF_NODE 17 >> LEAF_NODE 17 ( FUNCTION_CALL 17 sizeof ( j ) CALLEE 18 sizeof LEAF_NODE 19 sizeof LEAF_NODE 18 ( ARGUMENT 18 j FIELD 19 j LEAF_NODE 20 j LEAF_NODE 18 ) LEAF_NODE 17 * FIELD 17 8 LEAF_NODE 18 8 LEAF_NODE 17 - FIELD 17 8 LEAF_NODE 18 8 LEAF_NODE 17 ) LEAF_NODE 17 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 data -> c [ res ++ ] = ( unsigned char ) c ; EXPR 13 data -> c [ res ++ ] = ( unsigned char ) c ASSIGN 14 data -> c [ res ++ ] = ( unsigned char ) c LVAL 15 data -> c [ res ++ ] FIELD 16 data -> c [ res ++ ] LEAF_NODE 17 data LEAF_NODE 17 -> LEAF_NODE 17 c LEAF_NODE 17 [ EXPR 17 res ++ FIELD 18 res ++ LEAF_NODE 19 res LEAF_NODE 19 ++ LEAF_NODE 17 ] ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ( unsigned char ) c LEAF_NODE 16 ( TYPE_NAME 16 unsigned char LEAF_NODE 17 unsigned LEAF_NODE 17 char LEAF_NODE 16 ) FIELD 16 c LEAF_NODE 17 c LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 res != SHA_CBLOCK EXPR 14 res != SHA_CBLOCK FIELD 15 res LEAF_NODE 16 res EQ_OPERATOR 15 != LEAF_NODE 16 != FIELD 15 SHA_CBLOCK LEAF_NODE 16 SHA_CBLOCK LEAF_NODE 13 ) STATEMENTS 13 JUMP_STATEMENT 14 continue DESTINATION ; KEYWORD 15 continue LEAF_NODE 16 continue LEAF_NODE 15 DESTINATION LEAF_NODE 15 ; EXPR_STATEMENT 12 mask = 0 - ( ( inp_len + 7 - j ) >> ( sizeof ( j ) * 8 - 1 ) ) ; EXPR 13 mask = 0 - ( ( inp_len + 7 - j ) >> ( sizeof ( j ) * 8 - 1 ) ) ASSIGN 14 mask = 0 - ( ( inp_len + 7 - j ) >> ( sizeof ( j ) * 8 - 1 ) ) LVAL 15 mask FIELD 16 mask LEAF_NODE 17 mask ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 0 - ( ( inp_len + 7 - j ) >> ( sizeof ( j ) * 8 - 1 ) ) FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 16 - LEAF_NODE 16 ( LEAF_NODE 16 ( FIELD 16 inp_len LEAF_NODE 17 inp_len LEAF_NODE 16 + FIELD 16 7 LEAF_NODE 17 7 LEAF_NODE 16 - FIELD 16 j LEAF_NODE 17 j LEAF_NODE 16 ) LEAF_NODE 16 >> LEAF_NODE 16 ( FUNCTION_CALL 16 sizeof ( j ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 j FIELD 18 j LEAF_NODE 19 j LEAF_NODE 17 ) LEAF_NODE 16 * FIELD 16 8 LEAF_NODE 17 8 LEAF_NODE 16 - FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 16 ) LEAF_NODE 16 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 data -> u [ SHA_LBLOCK - 1 ] |= bitlen & mask ; EXPR 13 data -> u [ SHA_LBLOCK - 1 ] |= bitlen & mask ASSIGN 14 data -> u [ SHA_LBLOCK - 1 ] |= bitlen & mask LVAL 15 data -> u [ SHA_LBLOCK - 1 ] FIELD 16 data -> u [ SHA_LBLOCK - 1 ] LEAF_NODE 17 data LEAF_NODE 17 -> LEAF_NODE 17 u LEAF_NODE 17 [ EXPR 17 SHA_LBLOCK - 1 FIELD 18 SHA_LBLOCK LEAF_NODE 19 SHA_LBLOCK LEAF_NODE 18 - FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 17 ] ASSIGN_OP 15 |= LEAF_NODE 16 |= RVAL 15 bitlen & mask FIELD 16 bitlen LEAF_NODE 17 bitlen LEAF_NODE 16 & FIELD 16 mask LEAF_NODE 17 mask LEAF_NODE 13 ; EXPR_STATEMENT 12 sha1_block_data_order ( & key -> md , data , 1 ) ; EXPR 13 sha1_block_data_order ( & key -> md , data , 1 ) FUNCTION_CALL 14 sha1_block_data_order ( & key -> md , data , 1 ) CALLEE 15 sha1_block_data_order LEAF_NODE 16 sha1_block_data_order LEAF_NODE 15 ( ARGUMENT 15 & key -> md UNARY_EXPR 16 & key -> md UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 key -> md LEAF_NODE 18 key LEAF_NODE 18 -> LEAF_NODE 18 md LEAF_NODE 15 , ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 , ARGUMENT 15 1 FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 mask &= 0 - ( ( j - inp_len - 72 ) >> ( sizeof ( j ) * 8 - 1 ) ) ; EXPR 13 mask &= 0 - ( ( j - inp_len - 72 ) >> ( sizeof ( j ) * 8 - 1 ) ) ASSIGN 14 mask &= 0 - ( ( j - inp_len - 72 ) >> ( sizeof ( j ) * 8 - 1 ) ) LVAL 15 mask FIELD 16 mask LEAF_NODE 17 mask ASSIGN_OP 15 &= LEAF_NODE 16 &= RVAL 15 0 - ( ( j - inp_len - 72 ) >> ( sizeof ( j ) * 8 - 1 ) ) FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 16 - LEAF_NODE 16 ( LEAF_NODE 16 ( FIELD 16 j LEAF_NODE 17 j LEAF_NODE 16 - FIELD 16 inp_len LEAF_NODE 17 inp_len LEAF_NODE 16 - FIELD 16 72 LEAF_NODE 17 72 LEAF_NODE 16 ) LEAF_NODE 16 >> LEAF_NODE 16 ( FUNCTION_CALL 16 sizeof ( j ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 j FIELD 18 j LEAF_NODE 19 j LEAF_NODE 17 ) LEAF_NODE 16 * FIELD 16 8 LEAF_NODE 17 8 LEAF_NODE 16 - FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 16 ) LEAF_NODE 16 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 pmac -> u [ 0 ] |= key -> md . h0 & mask ; EXPR 13 pmac -> u [ 0 ] |= key -> md . h0 & mask ASSIGN 14 pmac -> u [ 0 ] |= key -> md . h0 & mask LVAL 15 pmac -> u [ 0 ] FIELD 16 pmac -> u [ 0 ] LEAF_NODE 17 pmac LEAF_NODE 17 -> LEAF_NODE 17 u LEAF_NODE 17 [ EXPR 17 0 FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 17 ] ASSIGN_OP 15 |= LEAF_NODE 16 |= RVAL 15 key -> md . h0 & mask FIELD 16 key -> md . h0 LEAF_NODE 17 key LEAF_NODE 17 -> LEAF_NODE 17 md LEAF_NODE 17 . LEAF_NODE 17 h0 LEAF_NODE 16 & FIELD 16 mask LEAF_NODE 17 mask LEAF_NODE 13 ; EXPR_STATEMENT 12 pmac -> u [ 1 ] |= key -> md . h1 & mask ; EXPR 13 pmac -> u [ 1 ] |= key -> md . h1 & mask ASSIGN 14 pmac -> u [ 1 ] |= key -> md . h1 & mask LVAL 15 pmac -> u [ 1 ] FIELD 16 pmac -> u [ 1 ] LEAF_NODE 17 pmac LEAF_NODE 17 -> LEAF_NODE 17 u LEAF_NODE 17 [ EXPR 17 1 FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 17 ] ASSIGN_OP 15 |= LEAF_NODE 16 |= RVAL 15 key -> md . h1 & mask FIELD 16 key -> md . h1 LEAF_NODE 17 key LEAF_NODE 17 -> LEAF_NODE 17 md LEAF_NODE 17 . LEAF_NODE 17 h1 LEAF_NODE 16 & FIELD 16 mask LEAF_NODE 17 mask LEAF_NODE 13 ; EXPR_STATEMENT 12 pmac -> u [ 2 ] |= key -> md . h2 & mask ; EXPR 13 pmac -> u [ 2 ] |= key -> md . h2 & mask ASSIGN 14 pmac -> u [ 2 ] |= key -> md . h2 & mask LVAL 15 pmac -> u [ 2 ] FIELD 16 pmac -> u [ 2 ] LEAF_NODE 17 pmac LEAF_NODE 17 -> LEAF_NODE 17 u LEAF_NODE 17 [ EXPR 17 2 FIELD 18 2 LEAF_NODE 19 2 LEAF_NODE 17 ] ASSIGN_OP 15 |= LEAF_NODE 16 |= RVAL 15 key -> md . h2 & mask FIELD 16 key -> md . h2 LEAF_NODE 17 key LEAF_NODE 17 -> LEAF_NODE 17 md LEAF_NODE 17 . LEAF_NODE 17 h2 LEAF_NODE 16 & FIELD 16 mask LEAF_NODE 17 mask LEAF_NODE 13 ; EXPR_STATEMENT 12 pmac -> u [ 3 ] |= key -> md . h3 & mask ; EXPR 13 pmac -> u [ 3 ] |= key -> md . h3 & mask ASSIGN 14 pmac -> u [ 3 ] |= key -> md . h3 & mask LVAL 15 pmac -> u [ 3 ] FIELD 16 pmac -> u [ 3 ] LEAF_NODE 17 pmac LEAF_NODE 17 -> LEAF_NODE 17 u LEAF_NODE 17 [ EXPR 17 3 FIELD 18 3 LEAF_NODE 19 3 LEAF_NODE 17 ] ASSIGN_OP 15 |= LEAF_NODE 16 |= RVAL 15 key -> md . h3 & mask FIELD 16 key -> md . h3 LEAF_NODE 17 key LEAF_NODE 17 -> LEAF_NODE 17 md LEAF_NODE 17 . LEAF_NODE 17 h3 LEAF_NODE 16 & FIELD 16 mask LEAF_NODE 17 mask LEAF_NODE 13 ; EXPR_STATEMENT 12 pmac -> u [ 4 ] |= key -> md . h4 & mask ; EXPR 13 pmac -> u [ 4 ] |= key -> md . h4 & mask ASSIGN 14 pmac -> u [ 4 ] |= key -> md . h4 & mask LVAL 15 pmac -> u [ 4 ] FIELD 16 pmac -> u [ 4 ] LEAF_NODE 17 pmac LEAF_NODE 17 -> LEAF_NODE 17 u LEAF_NODE 17 [ EXPR 17 4 FIELD 18 4 LEAF_NODE 19 4 LEAF_NODE 17 ] ASSIGN_OP 15 |= LEAF_NODE 16 |= RVAL 15 key -> md . h4 & mask FIELD 16 key -> md . h4 LEAF_NODE 17 key LEAF_NODE 17 -> LEAF_NODE 17 md LEAF_NODE 17 . LEAF_NODE 17 h4 LEAF_NODE 16 & FIELD 16 mask LEAF_NODE 17 mask LEAF_NODE 13 ; EXPR_STATEMENT 12 res = 0 ; EXPR 13 res = 0 ASSIGN 14 res = 0 LVAL 15 res FIELD 16 res LEAF_NODE 17 res ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 13 ; LEAF_NODE 11 } ITERATION 9 KEYWORD 10 for LEAF_NODE 11 for LEAF_NODE 10 ( FOR_INIT 10 i = res ; EXPR 11 i = res ASSIGN 12 i = res LVAL 13 i FIELD 14 i LEAF_NODE 15 i ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 res FIELD 14 res LEAF_NODE 15 res LEAF_NODE 11 ; CONDITION 10 i < SHA_CBLOCK EXPR 11 i < SHA_CBLOCK FIELD 12 i LEAF_NODE 13 i REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 SHA_CBLOCK LEAF_NODE 13 SHA_CBLOCK LEAF_NODE 10 ; FOR_EXPR 10 i ++ , j ++ EXPR 11 i ++ , j ++ FIELD 12 i ++ LEAF_NODE 13 i LEAF_NODE 13 ++ LEAF_NODE 12 , FIELD 12 j ++ LEAF_NODE 13 j LEAF_NODE 13 ++ LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 data -> c [ i ] = 0 ; EXPR 12 data -> c [ i ] = 0 ASSIGN 13 data -> c [ i ] = 0 LVAL 14 data -> c [ i ] FIELD 15 data -> c [ i ] LEAF_NODE 16 data LEAF_NODE 16 -> LEAF_NODE 16 c LEAF_NODE 16 [ EXPR 16 i FIELD 17 i LEAF_NODE 18 i LEAF_NODE 16 ] ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 12 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 res > SHA_CBLOCK - 8 EXPR 11 res > SHA_CBLOCK - 8 FIELD 12 res LEAF_NODE 13 res REL_OPERATOR 12 > LEAF_NODE 13 > FIELD 12 SHA_CBLOCK LEAF_NODE 13 SHA_CBLOCK LEAF_NODE 12 - FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 mask = 0 - ( ( inp_len + 8 - j ) >> ( sizeof ( j ) * 8 - 1 ) ) ; EXPR 13 mask = 0 - ( ( inp_len + 8 - j ) >> ( sizeof ( j ) * 8 - 1 ) ) ASSIGN 14 mask = 0 - ( ( inp_len + 8 - j ) >> ( sizeof ( j ) * 8 - 1 ) ) LVAL 15 mask FIELD 16 mask LEAF_NODE 17 mask ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 0 - ( ( inp_len + 8 - j ) >> ( sizeof ( j ) * 8 - 1 ) ) FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 16 - LEAF_NODE 16 ( LEAF_NODE 16 ( FIELD 16 inp_len LEAF_NODE 17 inp_len LEAF_NODE 16 + FIELD 16 8 LEAF_NODE 17 8 LEAF_NODE 16 - FIELD 16 j LEAF_NODE 17 j LEAF_NODE 16 ) LEAF_NODE 16 >> LEAF_NODE 16 ( FUNCTION_CALL 16 sizeof ( j ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 j FIELD 18 j LEAF_NODE 19 j LEAF_NODE 17 ) LEAF_NODE 16 * FIELD 16 8 LEAF_NODE 17 8 LEAF_NODE 16 - FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 16 ) LEAF_NODE 16 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 data -> u [ SHA_LBLOCK - 1 ] |= bitlen & mask ; EXPR 13 data -> u [ SHA_LBLOCK - 1 ] |= bitlen & mask ASSIGN 14 data -> u [ SHA_LBLOCK - 1 ] |= bitlen & mask LVAL 15 data -> u [ SHA_LBLOCK - 1 ] FIELD 16 data -> u [ SHA_LBLOCK - 1 ] LEAF_NODE 17 data LEAF_NODE 17 -> LEAF_NODE 17 u LEAF_NODE 17 [ EXPR 17 SHA_LBLOCK - 1 FIELD 18 SHA_LBLOCK LEAF_NODE 19 SHA_LBLOCK LEAF_NODE 18 - FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 17 ] ASSIGN_OP 15 |= LEAF_NODE 16 |= RVAL 15 bitlen & mask FIELD 16 bitlen LEAF_NODE 17 bitlen LEAF_NODE 16 & FIELD 16 mask LEAF_NODE 17 mask LEAF_NODE 13 ; EXPR_STATEMENT 12 sha1_block_data_order ( & key -> md , data , 1 ) ; EXPR 13 sha1_block_data_order ( & key -> md , data , 1 ) FUNCTION_CALL 14 sha1_block_data_order ( & key -> md , data , 1 ) CALLEE 15 sha1_block_data_order LEAF_NODE 16 sha1_block_data_order LEAF_NODE 15 ( ARGUMENT 15 & key -> md UNARY_EXPR 16 & key -> md UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 key -> md LEAF_NODE 18 key LEAF_NODE 18 -> LEAF_NODE 18 md LEAF_NODE 15 , ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 , ARGUMENT 15 1 FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 mask &= 0 - ( ( j - inp_len - 73 ) >> ( sizeof ( j ) * 8 - 1 ) ) ; EXPR 13 mask &= 0 - ( ( j - inp_len - 73 ) >> ( sizeof ( j ) * 8 - 1 ) ) ASSIGN 14 mask &= 0 - ( ( j - inp_len - 73 ) >> ( sizeof ( j ) * 8 - 1 ) ) LVAL 15 mask FIELD 16 mask LEAF_NODE 17 mask ASSIGN_OP 15 &= LEAF_NODE 16 &= RVAL 15 0 - ( ( j - inp_len - 73 ) >> ( sizeof ( j ) * 8 - 1 ) ) FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 16 - LEAF_NODE 16 ( LEAF_NODE 16 ( FIELD 16 j LEAF_NODE 17 j LEAF_NODE 16 - FIELD 16 inp_len LEAF_NODE 17 inp_len LEAF_NODE 16 - FIELD 16 73 LEAF_NODE 17 73 LEAF_NODE 16 ) LEAF_NODE 16 >> LEAF_NODE 16 ( FUNCTION_CALL 16 sizeof ( j ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 j FIELD 18 j LEAF_NODE 19 j LEAF_NODE 17 ) LEAF_NODE 16 * FIELD 16 8 LEAF_NODE 17 8 LEAF_NODE 16 - FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 16 ) LEAF_NODE 16 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 pmac -> u [ 0 ] |= key -> md . h0 & mask ; EXPR 13 pmac -> u [ 0 ] |= key -> md . h0 & mask ASSIGN 14 pmac -> u [ 0 ] |= key -> md . h0 & mask LVAL 15 pmac -> u [ 0 ] FIELD 16 pmac -> u [ 0 ] LEAF_NODE 17 pmac LEAF_NODE 17 -> LEAF_NODE 17 u LEAF_NODE 17 [ EXPR 17 0 FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 17 ] ASSIGN_OP 15 |= LEAF_NODE 16 |= RVAL 15 key -> md . h0 & mask FIELD 16 key -> md . h0 LEAF_NODE 17 key LEAF_NODE 17 -> LEAF_NODE 17 md LEAF_NODE 17 . LEAF_NODE 17 h0 LEAF_NODE 16 & FIELD 16 mask LEAF_NODE 17 mask LEAF_NODE 13 ; EXPR_STATEMENT 12 pmac -> u [ 1 ] |= key -> md . h1 & mask ; EXPR 13 pmac -> u [ 1 ] |= key -> md . h1 & mask ASSIGN 14 pmac -> u [ 1 ] |= key -> md . h1 & mask LVAL 15 pmac -> u [ 1 ] FIELD 16 pmac -> u [ 1 ] LEAF_NODE 17 pmac LEAF_NODE 17 -> LEAF_NODE 17 u LEAF_NODE 17 [ EXPR 17 1 FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 17 ] ASSIGN_OP 15 |= LEAF_NODE 16 |= RVAL 15 key -> md . h1 & mask FIELD 16 key -> md . h1 LEAF_NODE 17 key LEAF_NODE 17 -> LEAF_NODE 17 md LEAF_NODE 17 . LEAF_NODE 17 h1 LEAF_NODE 16 & FIELD 16 mask LEAF_NODE 17 mask LEAF_NODE 13 ; EXPR_STATEMENT 12 pmac -> u [ 2 ] |= key -> md . h2 & mask ; EXPR 13 pmac -> u [ 2 ] |= key -> md . h2 & mask ASSIGN 14 pmac -> u [ 2 ] |= key -> md . h2 & mask LVAL 15 pmac -> u [ 2 ] FIELD 16 pmac -> u [ 2 ] LEAF_NODE 17 pmac LEAF_NODE 17 -> LEAF_NODE 17 u LEAF_NODE 17 [ EXPR 17 2 FIELD 18 2 LEAF_NODE 19 2 LEAF_NODE 17 ] ASSIGN_OP 15 |= LEAF_NODE 16 |= RVAL 15 key -> md . h2 & mask FIELD 16 key -> md . h2 LEAF_NODE 17 key LEAF_NODE 17 -> LEAF_NODE 17 md LEAF_NODE 17 . LEAF_NODE 17 h2 LEAF_NODE 16 & FIELD 16 mask LEAF_NODE 17 mask LEAF_NODE 13 ; EXPR_STATEMENT 12 pmac -> u [ 3 ] |= key -> md . h3 & mask ; EXPR 13 pmac -> u [ 3 ] |= key -> md . h3 & mask ASSIGN 14 pmac -> u [ 3 ] |= key -> md . h3 & mask LVAL 15 pmac -> u [ 3 ] FIELD 16 pmac -> u [ 3 ] LEAF_NODE 17 pmac LEAF_NODE 17 -> LEAF_NODE 17 u LEAF_NODE 17 [ EXPR 17 3 FIELD 18 3 LEAF_NODE 19 3 LEAF_NODE 17 ] ASSIGN_OP 15 |= LEAF_NODE 16 |= RVAL 15 key -> md . h3 & mask FIELD 16 key -> md . h3 LEAF_NODE 17 key LEAF_NODE 17 -> LEAF_NODE 17 md LEAF_NODE 17 . LEAF_NODE 17 h3 LEAF_NODE 16 & FIELD 16 mask LEAF_NODE 17 mask LEAF_NODE 13 ; EXPR_STATEMENT 12 pmac -> u [ 4 ] |= key -> md . h4 & mask ; EXPR 13 pmac -> u [ 4 ] |= key -> md . h4 & mask ASSIGN 14 pmac -> u [ 4 ] |= key -> md . h4 & mask LVAL 15 pmac -> u [ 4 ] FIELD 16 pmac -> u [ 4 ] LEAF_NODE 17 pmac LEAF_NODE 17 -> LEAF_NODE 17 u LEAF_NODE 17 [ EXPR 17 4 FIELD 18 4 LEAF_NODE 19 4 LEAF_NODE 17 ] ASSIGN_OP 15 |= LEAF_NODE 16 |= RVAL 15 key -> md . h4 & mask FIELD 16 key -> md . h4 LEAF_NODE 17 key LEAF_NODE 17 -> LEAF_NODE 17 md LEAF_NODE 17 . LEAF_NODE 17 h4 LEAF_NODE 16 & FIELD 16 mask LEAF_NODE 17 mask LEAF_NODE 13 ; EXPR_STATEMENT 12 memset ( data , 0 , SHA_CBLOCK ) ; EXPR 13 memset ( data , 0 , SHA_CBLOCK ) FUNCTION_CALL 14 memset ( data , 0 , SHA_CBLOCK ) CALLEE 15 memset LEAF_NODE 16 memset LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 , ARGUMENT 15 SHA_CBLOCK FIELD 16 SHA_CBLOCK LEAF_NODE 17 SHA_CBLOCK LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 j += 64 ; EXPR 13 j += 64 ASSIGN 14 j += 64 LVAL 15 j FIELD 16 j LEAF_NODE 17 j ASSIGN_OP 15 += LEAF_NODE 16 += RVAL 15 64 FIELD 16 64 LEAF_NODE 17 64 LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 data -> u [ SHA_LBLOCK - 1 ] = bitlen ; EXPR 10 data -> u [ SHA_LBLOCK - 1 ] = bitlen ASSIGN 11 data -> u [ SHA_LBLOCK - 1 ] = bitlen LVAL 12 data -> u [ SHA_LBLOCK - 1 ] FIELD 13 data -> u [ SHA_LBLOCK - 1 ] LEAF_NODE 14 data LEAF_NODE 14 -> LEAF_NODE 14 u LEAF_NODE 14 [ EXPR 14 SHA_LBLOCK - 1 FIELD 15 SHA_LBLOCK LEAF_NODE 16 SHA_LBLOCK LEAF_NODE 15 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 bitlen FIELD 13 bitlen LEAF_NODE 14 bitlen LEAF_NODE 10 ; EXPR_STATEMENT 9 sha1_block_data_order ( & key -> md , data , 1 ) ; EXPR 10 sha1_block_data_order ( & key -> md , data , 1 ) FUNCTION_CALL 11 sha1_block_data_order ( & key -> md , data , 1 ) CALLEE 12 sha1_block_data_order LEAF_NODE 13 sha1_block_data_order LEAF_NODE 12 ( ARGUMENT 12 & key -> md UNARY_EXPR 13 & key -> md UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 key -> md LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 md LEAF_NODE 12 , ARGUMENT 12 data FIELD 13 data LEAF_NODE 14 data LEAF_NODE 12 , ARGUMENT 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 mask = 0 - ( ( j - inp_len - 73 ) >> ( sizeof ( j ) * 8 - 1 ) ) ; EXPR 10 mask = 0 - ( ( j - inp_len - 73 ) >> ( sizeof ( j ) * 8 - 1 ) ) ASSIGN 11 mask = 0 - ( ( j - inp_len - 73 ) >> ( sizeof ( j ) * 8 - 1 ) ) LVAL 12 mask FIELD 13 mask LEAF_NODE 14 mask ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 - ( ( j - inp_len - 73 ) >> ( sizeof ( j ) * 8 - 1 ) ) FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 13 - LEAF_NODE 13 ( LEAF_NODE 13 ( FIELD 13 j LEAF_NODE 14 j LEAF_NODE 13 - FIELD 13 inp_len LEAF_NODE 14 inp_len LEAF_NODE 13 - FIELD 13 73 LEAF_NODE 14 73 LEAF_NODE 13 ) LEAF_NODE 13 >> LEAF_NODE 13 ( FUNCTION_CALL 13 sizeof ( j ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 j FIELD 15 j LEAF_NODE 16 j LEAF_NODE 14 ) LEAF_NODE 13 * FIELD 13 8 LEAF_NODE 14 8 LEAF_NODE 13 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 13 ) LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 pmac -> u [ 0 ] |= key -> md . h0 & mask ; EXPR 10 pmac -> u [ 0 ] |= key -> md . h0 & mask ASSIGN 11 pmac -> u [ 0 ] |= key -> md . h0 & mask LVAL 12 pmac -> u [ 0 ] FIELD 13 pmac -> u [ 0 ] LEAF_NODE 14 pmac LEAF_NODE 14 -> LEAF_NODE 14 u LEAF_NODE 14 [ EXPR 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ] ASSIGN_OP 12 |= LEAF_NODE 13 |= RVAL 12 key -> md . h0 & mask FIELD 13 key -> md . h0 LEAF_NODE 14 key LEAF_NODE 14 -> LEAF_NODE 14 md LEAF_NODE 14 . LEAF_NODE 14 h0 LEAF_NODE 13 & FIELD 13 mask LEAF_NODE 14 mask LEAF_NODE 10 ; EXPR_STATEMENT 9 pmac -> u [ 1 ] |= key -> md . h1 & mask ; EXPR 10 pmac -> u [ 1 ] |= key -> md . h1 & mask ASSIGN 11 pmac -> u [ 1 ] |= key -> md . h1 & mask LVAL 12 pmac -> u [ 1 ] FIELD 13 pmac -> u [ 1 ] LEAF_NODE 14 pmac LEAF_NODE 14 -> LEAF_NODE 14 u LEAF_NODE 14 [ EXPR 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 ] ASSIGN_OP 12 |= LEAF_NODE 13 |= RVAL 12 key -> md . h1 & mask FIELD 13 key -> md . h1 LEAF_NODE 14 key LEAF_NODE 14 -> LEAF_NODE 14 md LEAF_NODE 14 . LEAF_NODE 14 h1 LEAF_NODE 13 & FIELD 13 mask LEAF_NODE 14 mask LEAF_NODE 10 ; EXPR_STATEMENT 9 pmac -> u [ 2 ] |= key -> md . h2 & mask ; EXPR 10 pmac -> u [ 2 ] |= key -> md . h2 & mask ASSIGN 11 pmac -> u [ 2 ] |= key -> md . h2 & mask LVAL 12 pmac -> u [ 2 ] FIELD 13 pmac -> u [ 2 ] LEAF_NODE 14 pmac LEAF_NODE 14 -> LEAF_NODE 14 u LEAF_NODE 14 [ EXPR 14 2 FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 14 ] ASSIGN_OP 12 |= LEAF_NODE 13 |= RVAL 12 key -> md . h2 & mask FIELD 13 key -> md . h2 LEAF_NODE 14 key LEAF_NODE 14 -> LEAF_NODE 14 md LEAF_NODE 14 . LEAF_NODE 14 h2 LEAF_NODE 13 & FIELD 13 mask LEAF_NODE 14 mask LEAF_NODE 10 ; EXPR_STATEMENT 9 pmac -> u [ 3 ] |= key -> md . h3 & mask ; EXPR 10 pmac -> u [ 3 ] |= key -> md . h3 & mask ASSIGN 11 pmac -> u [ 3 ] |= key -> md . h3 & mask LVAL 12 pmac -> u [ 3 ] FIELD 13 pmac -> u [ 3 ] LEAF_NODE 14 pmac LEAF_NODE 14 -> LEAF_NODE 14 u LEAF_NODE 14 [ EXPR 14 3 FIELD 15 3 LEAF_NODE 16 3 LEAF_NODE 14 ] ASSIGN_OP 12 |= LEAF_NODE 13 |= RVAL 12 key -> md . h3 & mask FIELD 13 key -> md . h3 LEAF_NODE 14 key LEAF_NODE 14 -> LEAF_NODE 14 md LEAF_NODE 14 . LEAF_NODE 14 h3 LEAF_NODE 13 & FIELD 13 mask LEAF_NODE 14 mask LEAF_NODE 10 ; EXPR_STATEMENT 9 pmac -> u [ 4 ] |= key -> md . h4 & mask ; EXPR 10 pmac -> u [ 4 ] |= key -> md . h4 & mask ASSIGN 11 pmac -> u [ 4 ] |= key -> md . h4 & mask LVAL 12 pmac -> u [ 4 ] FIELD 13 pmac -> u [ 4 ] LEAF_NODE 14 pmac LEAF_NODE 14 -> LEAF_NODE 14 u LEAF_NODE 14 [ EXPR 14 4 FIELD 15 4 LEAF_NODE 16 4 LEAF_NODE 14 ] ASSIGN_OP 12 |= LEAF_NODE 13 |= RVAL 12 key -> md . h4 & mask FIELD 13 key -> md . h4 LEAF_NODE 14 key LEAF_NODE 14 -> LEAF_NODE 14 md LEAF_NODE 14 . LEAF_NODE 14 h4 LEAF_NODE 13 & FIELD 13 mask LEAF_NODE 14 mask LEAF_NODE 10 ; EXPR_STATEMENT 9 pmac -> u [ 0 ] = BSWAP4 ( pmac -> u [ 0 ] ) ; EXPR 10 pmac -> u [ 0 ] = BSWAP4 ( pmac -> u [ 0 ] ) ASSIGN 11 pmac -> u [ 0 ] = BSWAP4 ( pmac -> u [ 0 ] ) LVAL 12 pmac -> u [ 0 ] FIELD 13 pmac -> u [ 0 ] LEAF_NODE 14 pmac LEAF_NODE 14 -> LEAF_NODE 14 u LEAF_NODE 14 [ EXPR 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 BSWAP4 ( pmac -> u [ 0 ] ) FUNCTION_CALL 13 BSWAP4 ( pmac -> u [ 0 ] ) CALLEE 14 BSWAP4 LEAF_NODE 15 BSWAP4 LEAF_NODE 14 ( ARGUMENT 14 pmac -> u [ 0 ] FIELD 15 pmac -> u [ 0 ] LEAF_NODE 16 pmac LEAF_NODE 16 -> LEAF_NODE 16 u LEAF_NODE 16 [ EXPR 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 16 ] LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 pmac -> u [ 1 ] = BSWAP4 ( pmac -> u [ 1 ] ) ; EXPR 10 pmac -> u [ 1 ] = BSWAP4 ( pmac -> u [ 1 ] ) ASSIGN 11 pmac -> u [ 1 ] = BSWAP4 ( pmac -> u [ 1 ] ) LVAL 12 pmac -> u [ 1 ] FIELD 13 pmac -> u [ 1 ] LEAF_NODE 14 pmac LEAF_NODE 14 -> LEAF_NODE 14 u LEAF_NODE 14 [ EXPR 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 BSWAP4 ( pmac -> u [ 1 ] ) FUNCTION_CALL 13 BSWAP4 ( pmac -> u [ 1 ] ) CALLEE 14 BSWAP4 LEAF_NODE 15 BSWAP4 LEAF_NODE 14 ( ARGUMENT 14 pmac -> u [ 1 ] FIELD 15 pmac -> u [ 1 ] LEAF_NODE 16 pmac LEAF_NODE 16 -> LEAF_NODE 16 u LEAF_NODE 16 [ EXPR 16 1 FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 pmac -> u [ 2 ] = BSWAP4 ( pmac -> u [ 2 ] ) ; EXPR 10 pmac -> u [ 2 ] = BSWAP4 ( pmac -> u [ 2 ] ) ASSIGN 11 pmac -> u [ 2 ] = BSWAP4 ( pmac -> u [ 2 ] ) LVAL 12 pmac -> u [ 2 ] FIELD 13 pmac -> u [ 2 ] LEAF_NODE 14 pmac LEAF_NODE 14 -> LEAF_NODE 14 u LEAF_NODE 14 [ EXPR 14 2 FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 BSWAP4 ( pmac -> u [ 2 ] ) FUNCTION_CALL 13 BSWAP4 ( pmac -> u [ 2 ] ) CALLEE 14 BSWAP4 LEAF_NODE 15 BSWAP4 LEAF_NODE 14 ( ARGUMENT 14 pmac -> u [ 2 ] FIELD 15 pmac -> u [ 2 ] LEAF_NODE 16 pmac LEAF_NODE 16 -> LEAF_NODE 16 u LEAF_NODE 16 [ EXPR 16 2 FIELD 17 2 LEAF_NODE 18 2 LEAF_NODE 16 ] LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 pmac -> u [ 3 ] = BSWAP4 ( pmac -> u [ 3 ] ) ; EXPR 10 pmac -> u [ 3 ] = BSWAP4 ( pmac -> u [ 3 ] ) ASSIGN 11 pmac -> u [ 3 ] = BSWAP4 ( pmac -> u [ 3 ] ) LVAL 12 pmac -> u [ 3 ] FIELD 13 pmac -> u [ 3 ] LEAF_NODE 14 pmac LEAF_NODE 14 -> LEAF_NODE 14 u LEAF_NODE 14 [ EXPR 14 3 FIELD 15 3 LEAF_NODE 16 3 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 BSWAP4 ( pmac -> u [ 3 ] ) FUNCTION_CALL 13 BSWAP4 ( pmac -> u [ 3 ] ) CALLEE 14 BSWAP4 LEAF_NODE 15 BSWAP4 LEAF_NODE 14 ( ARGUMENT 14 pmac -> u [ 3 ] FIELD 15 pmac -> u [ 3 ] LEAF_NODE 16 pmac LEAF_NODE 16 -> LEAF_NODE 16 u LEAF_NODE 16 [ EXPR 16 3 FIELD 17 3 LEAF_NODE 18 3 LEAF_NODE 16 ] LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 pmac -> u [ 4 ] = BSWAP4 ( pmac -> u [ 4 ] ) ; EXPR 10 pmac -> u [ 4 ] = BSWAP4 ( pmac -> u [ 4 ] ) ASSIGN 11 pmac -> u [ 4 ] = BSWAP4 ( pmac -> u [ 4 ] ) LVAL 12 pmac -> u [ 4 ] FIELD 13 pmac -> u [ 4 ] LEAF_NODE 14 pmac LEAF_NODE 14 -> LEAF_NODE 14 u LEAF_NODE 14 [ EXPR 14 4 FIELD 15 4 LEAF_NODE 16 4 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 BSWAP4 ( pmac -> u [ 4 ] ) FUNCTION_CALL 13 BSWAP4 ( pmac -> u [ 4 ] ) CALLEE 14 BSWAP4 LEAF_NODE 15 BSWAP4 LEAF_NODE 14 ( ARGUMENT 14 pmac -> u [ 4 ] FIELD 15 pmac -> u [ 4 ] LEAF_NODE 16 pmac LEAF_NODE 16 -> LEAF_NODE 16 u LEAF_NODE 16 [ EXPR 16 4 FIELD 17 4 LEAF_NODE 18 4 LEAF_NODE 16 ] LEAF_NODE 14 ) LEAF_NODE 10 ; ITERATION 9 KEYWORD 10 for LEAF_NODE 11 for LEAF_NODE 10 ( FOR_INIT 10 i = 0 ; EXPR 11 i = 0 ASSIGN 12 i = 0 LVAL 13 i FIELD 14 i LEAF_NODE 15 i ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; CONDITION 10 i < 5 EXPR 11 i < 5 FIELD 12 i LEAF_NODE 13 i REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 5 LEAF_NODE 13 5 LEAF_NODE 10 ; FOR_EXPR 10 i ++ EXPR 11 i ++ FIELD 12 i ++ LEAF_NODE 13 i LEAF_NODE 13 ++ LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 res = pmac -> u [ i ] ; EXPR 13 res = pmac -> u [ i ] ASSIGN 14 res = pmac -> u [ i ] LVAL 15 res FIELD 16 res LEAF_NODE 17 res ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 pmac -> u [ i ] FIELD 16 pmac -> u [ i ] LEAF_NODE 17 pmac LEAF_NODE 17 -> LEAF_NODE 17 u LEAF_NODE 17 [ EXPR 17 i FIELD 18 i LEAF_NODE 19 i LEAF_NODE 17 ] LEAF_NODE 13 ; EXPR_STATEMENT 12 pmac -> c [ 4 * i + 0 ] = ( unsigned char ) ( res >> 24 ) ; EXPR 13 pmac -> c [ 4 * i + 0 ] = ( unsigned char ) ( res >> 24 ) ASSIGN 14 pmac -> c [ 4 * i + 0 ] = ( unsigned char ) ( res >> 24 ) LVAL 15 pmac -> c [ 4 * i + 0 ] FIELD 16 pmac -> c [ 4 * i + 0 ] LEAF_NODE 17 pmac LEAF_NODE 17 -> LEAF_NODE 17 c LEAF_NODE 17 [ EXPR 17 4 * i + 0 FIELD 18 4 LEAF_NODE 19 4 LEAF_NODE 18 * FIELD 18 i LEAF_NODE 19 i LEAF_NODE 18 + FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 17 ] ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ( unsigned char ) ( res >> 24 ) LEAF_NODE 16 ( TYPE_NAME 16 unsigned char LEAF_NODE 17 unsigned LEAF_NODE 17 char LEAF_NODE 16 ) LEAF_NODE 16 ( FIELD 16 res LEAF_NODE 17 res LEAF_NODE 16 >> FIELD 16 24 LEAF_NODE 17 24 LEAF_NODE 16 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 pmac -> c [ 4 * i + 1 ] = ( unsigned char ) ( res >> 16 ) ; EXPR 13 pmac -> c [ 4 * i + 1 ] = ( unsigned char ) ( res >> 16 ) ASSIGN 14 pmac -> c [ 4 * i + 1 ] = ( unsigned char ) ( res >> 16 ) LVAL 15 pmac -> c [ 4 * i + 1 ] FIELD 16 pmac -> c [ 4 * i + 1 ] LEAF_NODE 17 pmac LEAF_NODE 17 -> LEAF_NODE 17 c LEAF_NODE 17 [ EXPR 17 4 * i + 1 FIELD 18 4 LEAF_NODE 19 4 LEAF_NODE 18 * FIELD 18 i LEAF_NODE 19 i LEAF_NODE 18 + FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 17 ] ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ( unsigned char ) ( res >> 16 ) LEAF_NODE 16 ( TYPE_NAME 16 unsigned char LEAF_NODE 17 unsigned LEAF_NODE 17 char LEAF_NODE 16 ) LEAF_NODE 16 ( FIELD 16 res LEAF_NODE 17 res LEAF_NODE 16 >> FIELD 16 16 LEAF_NODE 17 16 LEAF_NODE 16 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 pmac -> c [ 4 * i + 2 ] = ( unsigned char ) ( res >> 8 ) ; EXPR 13 pmac -> c [ 4 * i + 2 ] = ( unsigned char ) ( res >> 8 ) ASSIGN 14 pmac -> c [ 4 * i + 2 ] = ( unsigned char ) ( res >> 8 ) LVAL 15 pmac -> c [ 4 * i + 2 ] FIELD 16 pmac -> c [ 4 * i + 2 ] LEAF_NODE 17 pmac LEAF_NODE 17 -> LEAF_NODE 17 c LEAF_NODE 17 [ EXPR 17 4 * i + 2 FIELD 18 4 LEAF_NODE 19 4 LEAF_NODE 18 * FIELD 18 i LEAF_NODE 19 i LEAF_NODE 18 + FIELD 18 2 LEAF_NODE 19 2 LEAF_NODE 17 ] ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ( unsigned char ) ( res >> 8 ) LEAF_NODE 16 ( TYPE_NAME 16 unsigned char LEAF_NODE 17 unsigned LEAF_NODE 17 char LEAF_NODE 16 ) LEAF_NODE 16 ( FIELD 16 res LEAF_NODE 17 res LEAF_NODE 16 >> FIELD 16 8 LEAF_NODE 17 8 LEAF_NODE 16 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 pmac -> c [ 4 * i + 3 ] = ( unsigned char ) res ; EXPR 13 pmac -> c [ 4 * i + 3 ] = ( unsigned char ) res ASSIGN 14 pmac -> c [ 4 * i + 3 ] = ( unsigned char ) res LVAL 15 pmac -> c [ 4 * i + 3 ] FIELD 16 pmac -> c [ 4 * i + 3 ] LEAF_NODE 17 pmac LEAF_NODE 17 -> LEAF_NODE 17 c LEAF_NODE 17 [ EXPR 17 4 * i + 3 FIELD 18 4 LEAF_NODE 19 4 LEAF_NODE 18 * FIELD 18 i LEAF_NODE 19 i LEAF_NODE 18 + FIELD 18 3 LEAF_NODE 19 3 LEAF_NODE 17 ] ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ( unsigned char ) res LEAF_NODE 16 ( TYPE_NAME 16 unsigned char LEAF_NODE 17 unsigned LEAF_NODE 17 char LEAF_NODE 16 ) FIELD 16 res LEAF_NODE 17 res LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 len += SHA_DIGEST_LENGTH ; EXPR 10 len += SHA_DIGEST_LENGTH ASSIGN 11 len += SHA_DIGEST_LENGTH LVAL 12 len FIELD 13 len LEAF_NODE 14 len ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 SHA_DIGEST_LENGTH FIELD 13 SHA_DIGEST_LENGTH LEAF_NODE 14 SHA_DIGEST_LENGTH LEAF_NODE 10 ; EXPR_STATEMENT 9 SHA1_Update ( & key -> md , out , inp_len ) ; EXPR 10 SHA1_Update ( & key -> md , out , inp_len ) FUNCTION_CALL 11 SHA1_Update ( & key -> md , out , inp_len ) CALLEE 12 SHA1_Update LEAF_NODE 13 SHA1_Update LEAF_NODE 12 ( ARGUMENT 12 & key -> md UNARY_EXPR 13 & key -> md UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 key -> md LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 md LEAF_NODE 12 , ARGUMENT 12 out FIELD 13 out LEAF_NODE 14 out LEAF_NODE 12 , ARGUMENT 12 inp_len FIELD 13 inp_len LEAF_NODE 14 inp_len LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 res = key -> md . num ; EXPR 10 res = key -> md . num ASSIGN 11 res = key -> md . num LVAL 12 res FIELD 13 res LEAF_NODE 14 res ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 key -> md . num FIELD 13 key -> md . num LEAF_NODE 14 key LEAF_NODE 14 -> LEAF_NODE 14 md LEAF_NODE 14 . LEAF_NODE 14 num LEAF_NODE 10 ; EXPR_STATEMENT 9 SHA1_Final ( pmac -> c , & key -> md ) ; EXPR 10 SHA1_Final ( pmac -> c , & key -> md ) FUNCTION_CALL 11 SHA1_Final ( pmac -> c , & key -> md ) CALLEE 12 SHA1_Final LEAF_NODE 13 SHA1_Final LEAF_NODE 12 ( ARGUMENT 12 pmac -> c FIELD 13 pmac -> c LEAF_NODE 14 pmac LEAF_NODE 14 -> LEAF_NODE 14 c LEAF_NODE 12 , ARGUMENT 12 & key -> md UNARY_EXPR 13 & key -> md UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 key -> md LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 md LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 9 { STATEMENTS 9 SIMPLE_DECL 10 unsigned int inp_blocks , unsigned int pad_blocks ; INIT_DECL_LIST 11 unsigned int inp_blocks , unsigned int pad_blocks VAR_DECL 12 unsigned int inp_blocks TYPE 13 unsigned int TYPE_NAME 14 unsigned int LEAF_NODE 15 unsigned LEAF_NODE 15 int NAME 13 inp_blocks LEAF_NODE 14 inp_blocks LEAF_NODE 12 , VAR_DECL 12 unsigned int pad_blocks TYPE 13 unsigned int TYPE_NAME 14 unsigned int LEAF_NODE 15 unsigned LEAF_NODE 15 int NAME 13 pad_blocks LEAF_NODE 14 pad_blocks LEAF_NODE 11 ; EXPR_STATEMENT 10 inp_blocks = 1 + ( ( SHA_CBLOCK - 9 - res ) >> ( sizeof ( res ) * 8 - 1 ) ) ; EXPR 11 inp_blocks = 1 + ( ( SHA_CBLOCK - 9 - res ) >> ( sizeof ( res ) * 8 - 1 ) ) ASSIGN 12 inp_blocks = 1 + ( ( SHA_CBLOCK - 9 - res ) >> ( sizeof ( res ) * 8 - 1 ) ) LVAL 13 inp_blocks FIELD 14 inp_blocks LEAF_NODE 15 inp_blocks ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 1 + ( ( SHA_CBLOCK - 9 - res ) >> ( sizeof ( res ) * 8 - 1 ) ) FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 14 + LEAF_NODE 14 ( LEAF_NODE 14 ( FIELD 14 SHA_CBLOCK LEAF_NODE 15 SHA_CBLOCK LEAF_NODE 14 - FIELD 14 9 LEAF_NODE 15 9 LEAF_NODE 14 - FIELD 14 res LEAF_NODE 15 res LEAF_NODE 14 ) LEAF_NODE 14 >> LEAF_NODE 14 ( FUNCTION_CALL 14 sizeof ( res ) CALLEE 15 sizeof LEAF_NODE 16 sizeof LEAF_NODE 15 ( ARGUMENT 15 res FIELD 16 res LEAF_NODE 17 res LEAF_NODE 15 ) LEAF_NODE 14 * FIELD 14 8 LEAF_NODE 15 8 LEAF_NODE 14 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 14 ) LEAF_NODE 14 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 res += ( unsigned int ) ( len - inp_len ) ; EXPR 11 res += ( unsigned int ) ( len - inp_len ) ASSIGN 12 res += ( unsigned int ) ( len - inp_len ) LVAL 13 res FIELD 14 res LEAF_NODE 15 res ASSIGN_OP 13 += LEAF_NODE 14 += RVAL 13 ( unsigned int ) ( len - inp_len ) LEAF_NODE 14 ( TYPE_NAME 14 unsigned int LEAF_NODE 15 unsigned LEAF_NODE 15 int LEAF_NODE 14 ) LEAF_NODE 14 ( FIELD 14 len LEAF_NODE 15 len LEAF_NODE 14 - FIELD 14 inp_len LEAF_NODE 15 inp_len LEAF_NODE 14 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 pad_blocks = res / SHA_CBLOCK ; EXPR 11 pad_blocks = res / SHA_CBLOCK ASSIGN 12 pad_blocks = res / SHA_CBLOCK LVAL 13 pad_blocks FIELD 14 pad_blocks LEAF_NODE 15 pad_blocks ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 res / SHA_CBLOCK FIELD 14 res LEAF_NODE 15 res LEAF_NODE 14 / FIELD 14 SHA_CBLOCK LEAF_NODE 15 SHA_CBLOCK LEAF_NODE 11 ; EXPR_STATEMENT 10 res %= SHA_CBLOCK ; EXPR 11 res %= SHA_CBLOCK ASSIGN 12 res %= SHA_CBLOCK LVAL 13 res FIELD 14 res LEAF_NODE 15 res ASSIGN_OP 13 %= LEAF_NODE 14 %= RVAL 13 SHA_CBLOCK FIELD 14 SHA_CBLOCK LEAF_NODE 15 SHA_CBLOCK LEAF_NODE 11 ; EXPR_STATEMENT 10 pad_blocks += 1 + ( ( SHA_CBLOCK - 9 - res ) >> ( sizeof ( res ) * 8 - 1 ) ) ; EXPR 11 pad_blocks += 1 + ( ( SHA_CBLOCK - 9 - res ) >> ( sizeof ( res ) * 8 - 1 ) ) ASSIGN 12 pad_blocks += 1 + ( ( SHA_CBLOCK - 9 - res ) >> ( sizeof ( res ) * 8 - 1 ) ) LVAL 13 pad_blocks FIELD 14 pad_blocks LEAF_NODE 15 pad_blocks ASSIGN_OP 13 += LEAF_NODE 14 += RVAL 13 1 + ( ( SHA_CBLOCK - 9 - res ) >> ( sizeof ( res ) * 8 - 1 ) ) FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 14 + LEAF_NODE 14 ( LEAF_NODE 14 ( FIELD 14 SHA_CBLOCK LEAF_NODE 15 SHA_CBLOCK LEAF_NODE 14 - FIELD 14 9 LEAF_NODE 15 9 LEAF_NODE 14 - FIELD 14 res LEAF_NODE 15 res LEAF_NODE 14 ) LEAF_NODE 14 >> LEAF_NODE 14 ( FUNCTION_CALL 14 sizeof ( res ) CALLEE 15 sizeof LEAF_NODE 16 sizeof LEAF_NODE 15 ( ARGUMENT 15 res FIELD 16 res LEAF_NODE 17 res LEAF_NODE 15 ) LEAF_NODE 14 * FIELD 14 8 LEAF_NODE 15 8 LEAF_NODE 14 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 14 ) LEAF_NODE 14 ) LEAF_NODE 11 ; ITERATION 10 KEYWORD 11 for LEAF_NODE 12 for LEAF_NODE 11 ( FOR_INIT 11 ; LEAF_NODE 12 ; CONDITION 11 inp_blocks < pad_blocks EXPR 12 inp_blocks < pad_blocks FIELD 13 inp_blocks LEAF_NODE 14 inp_blocks REL_OPERATOR 13 < LEAF_NODE 14 < FIELD 13 pad_blocks LEAF_NODE 14 pad_blocks LEAF_NODE 11 ; FOR_EXPR 11 inp_blocks ++ EXPR 12 inp_blocks ++ FIELD 13 inp_blocks ++ LEAF_NODE 14 inp_blocks LEAF_NODE 14 ++ LEAF_NODE 11 ) STATEMENTS 11 EXPR_STATEMENT 12 sha1_block_data_order ( & key -> md , data , 1 ) ; EXPR 13 sha1_block_data_order ( & key -> md , data , 1 ) FUNCTION_CALL 14 sha1_block_data_order ( & key -> md , data , 1 ) CALLEE 15 sha1_block_data_order LEAF_NODE 16 sha1_block_data_order LEAF_NODE 15 ( ARGUMENT 15 & key -> md UNARY_EXPR 16 & key -> md UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 key -> md LEAF_NODE 18 key LEAF_NODE 18 -> LEAF_NODE 18 md LEAF_NODE 15 , ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 , ARGUMENT 15 1 FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 9 } EXPR_STATEMENT 9 key -> md = key -> tail ; EXPR 10 key -> md = key -> tail ASSIGN 11 key -> md = key -> tail LVAL 12 key -> md FIELD 13 key -> md LEAF_NODE 14 key LEAF_NODE 14 -> LEAF_NODE 14 md ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 key -> tail FIELD 13 key -> tail LEAF_NODE 14 key LEAF_NODE 14 -> LEAF_NODE 14 tail LEAF_NODE 10 ; EXPR_STATEMENT 9 SHA1_Update ( & key -> md , pmac -> c , SHA_DIGEST_LENGTH ) ; EXPR 10 SHA1_Update ( & key -> md , pmac -> c , SHA_DIGEST_LENGTH ) FUNCTION_CALL 11 SHA1_Update ( & key -> md , pmac -> c , SHA_DIGEST_LENGTH ) CALLEE 12 SHA1_Update LEAF_NODE 13 SHA1_Update LEAF_NODE 12 ( ARGUMENT 12 & key -> md UNARY_EXPR 13 & key -> md UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 key -> md LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 md LEAF_NODE 12 , ARGUMENT 12 pmac -> c FIELD 13 pmac -> c LEAF_NODE 14 pmac LEAF_NODE 14 -> LEAF_NODE 14 c LEAF_NODE 12 , ARGUMENT 12 SHA_DIGEST_LENGTH FIELD 13 SHA_DIGEST_LENGTH LEAF_NODE 14 SHA_DIGEST_LENGTH LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 SHA1_Final ( pmac -> c , & key -> md ) ; EXPR 10 SHA1_Final ( pmac -> c , & key -> md ) FUNCTION_CALL 11 SHA1_Final ( pmac -> c , & key -> md ) CALLEE 12 SHA1_Final LEAF_NODE 13 SHA1_Final LEAF_NODE 12 ( ARGUMENT 12 pmac -> c FIELD 13 pmac -> c LEAF_NODE 14 pmac LEAF_NODE 14 -> LEAF_NODE 14 c LEAF_NODE 12 , ARGUMENT 12 & key -> md UNARY_EXPR 13 & key -> md UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 key -> md LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 md LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 out += inp_len ; EXPR 10 out += inp_len ASSIGN 11 out += inp_len LVAL 12 out FIELD 13 out LEAF_NODE 14 out ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 inp_len FIELD 13 inp_len LEAF_NODE 14 inp_len LEAF_NODE 10 ; EXPR_STATEMENT 9 len -= inp_len ; EXPR 10 len -= inp_len ASSIGN 11 len -= inp_len LVAL 12 len FIELD 13 len LEAF_NODE 14 len ASSIGN_OP 12 -= LEAF_NODE 13 -= RVAL 12 inp_len FIELD 13 inp_len LEAF_NODE 14 inp_len LEAF_NODE 10 ; LEAF_NODE 9 { STATEMENTS 9 SIMPLE_DECL 10 unsigned char * p ; p = out + len - 1 - maxpad - SHA_DIGEST_LENGTH ; VAR_DECL 11 unsigned char * p ; p = out + len - 1 - maxpad - SHA_DIGEST_LENGTH TYPE 12 unsigned char * TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char POINTER 13 * LEAF_NODE 14 * NAME 12 p LEAF_NODE 13 p LEAF_NODE 12 ; INIT 12 p = out + len - 1 - maxpad - SHA_DIGEST_LENGTH ASSIGN 13 p = out + len - 1 - maxpad - SHA_DIGEST_LENGTH LVAL 14 p NAME 15 p LEAF_NODE 16 p ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 out + len - 1 - maxpad - SHA_DIGEST_LENGTH FIELD 15 out LEAF_NODE 16 out LEAF_NODE 15 + FIELD 15 len LEAF_NODE 16 len LEAF_NODE 15 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 15 - FIELD 15 maxpad LEAF_NODE 16 maxpad LEAF_NODE 15 - FIELD 15 SHA_DIGEST_LENGTH LEAF_NODE 16 SHA_DIGEST_LENGTH LEAF_NODE 11 ; SIMPLE_DECL 10 size_t off ; off = out - p ; VAR_DECL 11 size_t off ; off = out - p TYPE 12 size_t TYPE_NAME 13 size_t LEAF_NODE 14 size_t NAME 12 off LEAF_NODE 13 off LEAF_NODE 12 ; INIT 12 off = out - p ASSIGN 13 off = out - p LVAL 14 off NAME 15 off LEAF_NODE 16 off ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 out - p FIELD 15 out LEAF_NODE 16 out LEAF_NODE 15 - FIELD 15 p LEAF_NODE 16 p LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned int c , unsigned int cmask ; INIT_DECL_LIST 11 unsigned int c , unsigned int cmask VAR_DECL 12 unsigned int c TYPE 13 unsigned int TYPE_NAME 14 unsigned int LEAF_NODE 15 unsigned LEAF_NODE 15 int NAME 13 c LEAF_NODE 14 c LEAF_NODE 12 , VAR_DECL 12 unsigned int cmask TYPE 13 unsigned int TYPE_NAME 14 unsigned int LEAF_NODE 15 unsigned LEAF_NODE 15 int NAME 13 cmask LEAF_NODE 14 cmask LEAF_NODE 11 ; EXPR_STATEMENT 10 maxpad += SHA_DIGEST_LENGTH ; EXPR 11 maxpad += SHA_DIGEST_LENGTH ASSIGN 12 maxpad += SHA_DIGEST_LENGTH LVAL 13 maxpad FIELD 14 maxpad LEAF_NODE 15 maxpad ASSIGN_OP 13 += LEAF_NODE 14 += RVAL 13 SHA_DIGEST_LENGTH FIELD 14 SHA_DIGEST_LENGTH LEAF_NODE 15 SHA_DIGEST_LENGTH LEAF_NODE 11 ; LEAF_NODE 10 for LEAF_NODE 10 ( LEAF_NODE 10 res LEAF_NODE 10 = LEAF_NODE 10 0 LEAF_NODE 10 , EXPR_STATEMENT 10 i = 0 , j = 0 ; EXPR 11 i = 0 , j = 0 ASSIGN 12 i = 0 LVAL 13 i FIELD 14 i LEAF_NODE 15 i ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 , ASSIGN 12 j = 0 LVAL 13 j FIELD 14 j LEAF_NODE 15 j ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; EXPR_STATEMENT 10 j < maxpad ; EXPR 11 j < maxpad FIELD 12 j LEAF_NODE 13 j REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 maxpad LEAF_NODE 13 maxpad LEAF_NODE 11 ; LEAF_NODE 10 j LEAF_NODE 10 ++ LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 c = p [ j ] ; EXPR 12 c = p [ j ] ASSIGN 13 c = p [ j ] LVAL 14 c FIELD 15 c LEAF_NODE 16 c ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 p [ j ] FIELD 15 p [ j ] LEAF_NODE 16 p LEAF_NODE 16 [ EXPR 16 j FIELD 17 j LEAF_NODE 18 j LEAF_NODE 16 ] LEAF_NODE 12 ; EXPR_STATEMENT 11 cmask = ( ( int ) ( j - off - SHA_DIGEST_LENGTH ) ) >> ( sizeof ( int ) * 8 - 1 ) ; EXPR 12 cmask = ( ( int ) ( j - off - SHA_DIGEST_LENGTH ) ) >> ( sizeof ( int ) * 8 - 1 ) ASSIGN 13 cmask = ( ( int ) ( j - off - SHA_DIGEST_LENGTH ) ) >> ( sizeof ( int ) * 8 - 1 ) LVAL 14 cmask FIELD 15 cmask LEAF_NODE 16 cmask ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 ( ( int ) ( j - off - SHA_DIGEST_LENGTH ) ) >> ( sizeof ( int ) * 8 - 1 ) LEAF_NODE 15 ( LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 j LEAF_NODE 16 j LEAF_NODE 15 - FIELD 15 off LEAF_NODE 16 off LEAF_NODE 15 - FIELD 15 SHA_DIGEST_LENGTH LEAF_NODE 16 SHA_DIGEST_LENGTH LEAF_NODE 15 ) LEAF_NODE 15 ) LEAF_NODE 15 >> LEAF_NODE 15 ( FUNCTION_CALL 15 sizeof ( int ) CALLEE 16 sizeof LEAF_NODE 17 sizeof LEAF_NODE 16 ( ARGUMENT 16 int FIELD 17 int LEAF_NODE 18 int LEAF_NODE 16 ) LEAF_NODE 15 * FIELD 15 8 LEAF_NODE 16 8 LEAF_NODE 15 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 15 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 res |= ( c ^ pad ) & ~cmask ; EXPR 12 res |= ( c ^ pad ) & ~cmask ASSIGN 13 res |= ( c ^ pad ) & ~cmask LVAL 14 res FIELD 15 res LEAF_NODE 16 res ASSIGN_OP 14 |= LEAF_NODE 15 |= RVAL 14 ( c ^ pad ) & ~cmask LEAF_NODE 15 ( FIELD 15 c LEAF_NODE 16 c LEAF_NODE 15 ^ FIELD 15 pad LEAF_NODE 16 pad LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 ~cmask LEAF_NODE 16 ~cmask LEAF_NODE 12 ; EXPR_STATEMENT 11 cmask &= ( ( int ) ( off - 1 - j ) ) >> ( sizeof ( int ) * 8 - 1 ) ; EXPR 12 cmask &= ( ( int ) ( off - 1 - j ) ) >> ( sizeof ( int ) * 8 - 1 ) ASSIGN 13 cmask &= ( ( int ) ( off - 1 - j ) ) >> ( sizeof ( int ) * 8 - 1 ) LVAL 14 cmask FIELD 15 cmask LEAF_NODE 16 cmask ASSIGN_OP 14 &= LEAF_NODE 15 &= RVAL 14 ( ( int ) ( off - 1 - j ) ) >> ( sizeof ( int ) * 8 - 1 ) LEAF_NODE 15 ( LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 off LEAF_NODE 16 off LEAF_NODE 15 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 15 - FIELD 15 j LEAF_NODE 16 j LEAF_NODE 15 ) LEAF_NODE 15 ) LEAF_NODE 15 >> LEAF_NODE 15 ( FUNCTION_CALL 15 sizeof ( int ) CALLEE 16 sizeof LEAF_NODE 17 sizeof LEAF_NODE 16 ( ARGUMENT 16 int FIELD 17 int LEAF_NODE 18 int LEAF_NODE 16 ) LEAF_NODE 15 * FIELD 15 8 LEAF_NODE 16 8 LEAF_NODE 15 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 15 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 res |= ( c ^ pmac -> c [ i ] ) & cmask ; EXPR 12 res |= ( c ^ pmac -> c [ i ] ) & cmask ASSIGN 13 res |= ( c ^ pmac -> c [ i ] ) & cmask LVAL 14 res FIELD 15 res LEAF_NODE 16 res ASSIGN_OP 14 |= LEAF_NODE 15 |= RVAL 14 ( c ^ pmac -> c [ i ] ) & cmask LEAF_NODE 15 ( FIELD 15 c LEAF_NODE 16 c LEAF_NODE 15 ^ FIELD 15 pmac -> c [ i ] LEAF_NODE 16 pmac LEAF_NODE 16 -> LEAF_NODE 16 c LEAF_NODE 16 [ EXPR 16 i FIELD 17 i LEAF_NODE 18 i LEAF_NODE 16 ] LEAF_NODE 15 ) LEAF_NODE 15 & FIELD 15 cmask LEAF_NODE 16 cmask LEAF_NODE 12 ; EXPR_STATEMENT 11 i += 1 & cmask ; EXPR 12 i += 1 & cmask ASSIGN 13 i += 1 & cmask LVAL 14 i FIELD 15 i LEAF_NODE 16 i ASSIGN_OP 14 += LEAF_NODE 15 += RVAL 14 1 & cmask FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 15 & FIELD 15 cmask LEAF_NODE 16 cmask LEAF_NODE 12 ; LEAF_NODE 10 } EXPR_STATEMENT 10 maxpad -= SHA_DIGEST_LENGTH ; EXPR 11 maxpad -= SHA_DIGEST_LENGTH ASSIGN 12 maxpad -= SHA_DIGEST_LENGTH LVAL 13 maxpad FIELD 14 maxpad LEAF_NODE 15 maxpad ASSIGN_OP 13 -= LEAF_NODE 14 -= RVAL 13 SHA_DIGEST_LENGTH FIELD 14 SHA_DIGEST_LENGTH LEAF_NODE 15 SHA_DIGEST_LENGTH LEAF_NODE 11 ; EXPR_STATEMENT 10 res = 0 - ( ( 0 - res ) >> ( sizeof ( res ) * 8 - 1 ) ) ; EXPR 11 res = 0 - ( ( 0 - res ) >> ( sizeof ( res ) * 8 - 1 ) ) ASSIGN 12 res = 0 - ( ( 0 - res ) >> ( sizeof ( res ) * 8 - 1 ) ) LVAL 13 res FIELD 14 res LEAF_NODE 15 res ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 - ( ( 0 - res ) >> ( sizeof ( res ) * 8 - 1 ) ) FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 14 - LEAF_NODE 14 ( LEAF_NODE 14 ( FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 14 - FIELD 14 res LEAF_NODE 15 res LEAF_NODE 14 ) LEAF_NODE 14 >> LEAF_NODE 14 ( FUNCTION_CALL 14 sizeof ( res ) CALLEE 15 sizeof LEAF_NODE 16 sizeof LEAF_NODE 15 ( ARGUMENT 15 res FIELD 16 res LEAF_NODE 17 res LEAF_NODE 15 ) LEAF_NODE 14 * FIELD 14 8 LEAF_NODE 15 8 LEAF_NODE 14 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 14 ) LEAF_NODE 14 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 ret &= ( int ) ~res ; EXPR 11 ret &= ( int ) ~res ASSIGN 12 ret &= ( int ) ~res LVAL 13 ret FIELD 14 ret LEAF_NODE 15 ret ASSIGN_OP 13 &= LEAF_NODE 14 &= RVAL 13 ( int ) ~res LEAF_NODE 14 ( TYPE_NAME 14 int LEAF_NODE 15 int LEAF_NODE 14 ) FIELD 14 ~res LEAF_NODE 15 ~res LEAF_NODE 11 ; LEAF_NODE 9 } ITERATION 9 KEYWORD 10 for LEAF_NODE 11 for LEAF_NODE 10 ( FOR_INIT 10 res = 0 , i = 0 ; EXPR 11 res = 0 , i = 0 ASSIGN 12 res = 0 LVAL 13 res FIELD 14 res LEAF_NODE 15 res ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 , ASSIGN 12 i = 0 LVAL 13 i FIELD 14 i LEAF_NODE 15 i ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; CONDITION 10 i < SHA_DIGEST_LENGTH EXPR 11 i < SHA_DIGEST_LENGTH FIELD 12 i LEAF_NODE 13 i REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 SHA_DIGEST_LENGTH LEAF_NODE 13 SHA_DIGEST_LENGTH LEAF_NODE 10 ; FOR_EXPR 10 i ++ EXPR 11 i ++ FIELD 12 i ++ LEAF_NODE 13 i LEAF_NODE 13 ++ LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 res |= out [ i ] ^ pmac -> c [ i ] ; EXPR 12 res |= out [ i ] ^ pmac -> c [ i ] ASSIGN 13 res |= out [ i ] ^ pmac -> c [ i ] LVAL 14 res FIELD 15 res LEAF_NODE 16 res ASSIGN_OP 14 |= LEAF_NODE 15 |= RVAL 14 out [ i ] ^ pmac -> c [ i ] FIELD 15 out [ i ] LEAF_NODE 16 out LEAF_NODE 16 [ EXPR 16 i FIELD 17 i LEAF_NODE 18 i LEAF_NODE 16 ] LEAF_NODE 15 ^ FIELD 15 pmac -> c [ i ] LEAF_NODE 16 pmac LEAF_NODE 16 -> LEAF_NODE 16 c LEAF_NODE 16 [ EXPR 16 i FIELD 17 i LEAF_NODE 18 i LEAF_NODE 16 ] LEAF_NODE 12 ; EXPR_STATEMENT 9 res = 0 - ( ( 0 - res ) >> ( sizeof ( res ) * 8 - 1 ) ) ; EXPR 10 res = 0 - ( ( 0 - res ) >> ( sizeof ( res ) * 8 - 1 ) ) ASSIGN 11 res = 0 - ( ( 0 - res ) >> ( sizeof ( res ) * 8 - 1 ) ) LVAL 12 res FIELD 13 res LEAF_NODE 14 res ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 - ( ( 0 - res ) >> ( sizeof ( res ) * 8 - 1 ) ) FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 13 - LEAF_NODE 13 ( LEAF_NODE 13 ( FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 13 - FIELD 13 res LEAF_NODE 14 res LEAF_NODE 13 ) LEAF_NODE 13 >> LEAF_NODE 13 ( FUNCTION_CALL 13 sizeof ( res ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 res FIELD 15 res LEAF_NODE 16 res LEAF_NODE 14 ) LEAF_NODE 13 * FIELD 13 8 LEAF_NODE 14 8 LEAF_NODE 13 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 13 ) LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ret &= ( int ) ~res ; EXPR 10 ret &= ( int ) ~res ASSIGN 11 ret &= ( int ) ~res LVAL 12 ret FIELD 13 ret LEAF_NODE 14 ret ASSIGN_OP 12 &= LEAF_NODE 13 &= RVAL 12 ( int ) ~res LEAF_NODE 13 ( TYPE_NAME 13 int LEAF_NODE 14 int LEAF_NODE 13 ) FIELD 13 ~res LEAF_NODE 14 ~res LEAF_NODE 10 ; EXPR_STATEMENT 9 pad = ( pad & ~res ) | ( maxpad & res ) ; EXPR 10 pad = ( pad & ~res ) | ( maxpad & res ) ASSIGN 11 pad = ( pad & ~res ) | ( maxpad & res ) LVAL 12 pad FIELD 13 pad LEAF_NODE 14 pad ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( pad & ~res ) | ( maxpad & res ) BIT_OR 13 ( pad & ~res ) | ( maxpad & res ) BIT_OR_ELEM 14 ( pad & ~res ) LEAF_NODE 15 ( FIELD 15 pad LEAF_NODE 16 pad LEAF_NODE 15 & FIELD 15 ~res LEAF_NODE 16 ~res LEAF_NODE 15 ) LEAF_NODE 14 | BIT_OR_ELEM 14 ( maxpad & res ) LEAF_NODE 15 ( FIELD 15 maxpad LEAF_NODE 16 maxpad LEAF_NODE 15 & FIELD 15 res LEAF_NODE 16 res LEAF_NODE 15 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 out = out + len - 1 - pad ; EXPR 10 out = out + len - 1 - pad ASSIGN 11 out = out + len - 1 - pad LVAL 12 out FIELD 13 out LEAF_NODE 14 out ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 out + len - 1 - pad FIELD 13 out LEAF_NODE 14 out LEAF_NODE 13 + FIELD 13 len LEAF_NODE 14 len LEAF_NODE 13 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 13 - FIELD 13 pad LEAF_NODE 14 pad LEAF_NODE 10 ; ITERATION 9 KEYWORD 10 for LEAF_NODE 11 for LEAF_NODE 10 ( FOR_INIT 10 res = 0 , i = 0 ; EXPR 11 res = 0 , i = 0 ASSIGN 12 res = 0 LVAL 13 res FIELD 14 res LEAF_NODE 15 res ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 , ASSIGN 12 i = 0 LVAL 13 i FIELD 14 i LEAF_NODE 15 i ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; CONDITION 10 i < pad EXPR 11 i < pad FIELD 12 i LEAF_NODE 13 i REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 pad LEAF_NODE 13 pad LEAF_NODE 10 ; FOR_EXPR 10 i ++ EXPR 11 i ++ FIELD 12 i ++ LEAF_NODE 13 i LEAF_NODE 13 ++ LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 res |= out [ i ] ^ pad ; EXPR 12 res |= out [ i ] ^ pad ASSIGN 13 res |= out [ i ] ^ pad LVAL 14 res FIELD 15 res LEAF_NODE 16 res ASSIGN_OP 14 |= LEAF_NODE 15 |= RVAL 14 out [ i ] ^ pad FIELD 15 out [ i ] LEAF_NODE 16 out LEAF_NODE 16 [ EXPR 16 i FIELD 17 i LEAF_NODE 18 i LEAF_NODE 16 ] LEAF_NODE 15 ^ FIELD 15 pad LEAF_NODE 16 pad LEAF_NODE 12 ; EXPR_STATEMENT 9 res = ( 0 - res ) >> ( sizeof ( res ) * 8 - 1 ) ; EXPR 10 res = ( 0 - res ) >> ( sizeof ( res ) * 8 - 1 ) ASSIGN 11 res = ( 0 - res ) >> ( sizeof ( res ) * 8 - 1 ) LVAL 12 res FIELD 13 res LEAF_NODE 14 res ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( 0 - res ) >> ( sizeof ( res ) * 8 - 1 ) LEAF_NODE 13 ( FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 13 - FIELD 13 res LEAF_NODE 14 res LEAF_NODE 13 ) LEAF_NODE 13 >> LEAF_NODE 13 ( FUNCTION_CALL 13 sizeof ( res ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 res FIELD 15 res LEAF_NODE 16 res LEAF_NODE 14 ) LEAF_NODE 13 * FIELD 13 8 LEAF_NODE 14 8 LEAF_NODE 13 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ret &= ( int ) ~res ; EXPR 10 ret &= ( int ) ~res ASSIGN 11 ret &= ( int ) ~res LVAL 12 ret FIELD 13 ret LEAF_NODE 14 ret ASSIGN_OP 12 &= LEAF_NODE 13 &= RVAL 12 ( int ) ~res LEAF_NODE 13 ( TYPE_NAME 13 int LEAF_NODE 14 int LEAF_NODE 13 ) FIELD 13 ~res LEAF_NODE 14 ~res LEAF_NODE 10 ; JUMP_STATEMENT 9 return ret ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 ret EXPR 11 ret FIELD 12 ret LEAF_NODE 13 ret LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 len >= 1024 && ctx -> key_len == 32 EXPR 11 len >= 1024 && ctx -> key_len == 32 AND 12 len >= 1024 && ctx -> key_len == 32 EXPR 13 len >= 1024 FIELD 14 len LEAF_NODE 15 len REL_OPERATOR 14 >= LEAF_NODE 15 >= FIELD 14 1024 LEAF_NODE 15 1024 LEAF_NODE 13 && EXPR 13 ctx -> key_len == 32 FIELD 14 ctx -> key_len LEAF_NODE 15 ctx LEAF_NODE 15 -> LEAF_NODE 15 key_len EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 32 LEAF_NODE 15 32 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 sha_off %= SHA_CBLOCK EXPR 14 sha_off %= SHA_CBLOCK ASSIGN 15 sha_off %= SHA_CBLOCK LVAL 16 sha_off FIELD 17 sha_off LEAF_NODE 18 sha_off ASSIGN_OP 16 %= LEAF_NODE 17 %= RVAL 16 SHA_CBLOCK FIELD 17 SHA_CBLOCK LEAF_NODE 18 SHA_CBLOCK LEAF_NODE 13 ) STATEMENTS 13 EXPR_STATEMENT 14 blocks = ( len - 3 * SHA_CBLOCK ) / SHA_CBLOCK ; EXPR 15 blocks = ( len - 3 * SHA_CBLOCK ) / SHA_CBLOCK ASSIGN 16 blocks = ( len - 3 * SHA_CBLOCK ) / SHA_CBLOCK LVAL 17 blocks FIELD 18 blocks LEAF_NODE 19 blocks ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 ( len - 3 * SHA_CBLOCK ) / SHA_CBLOCK LEAF_NODE 18 ( FIELD 18 len LEAF_NODE 19 len LEAF_NODE 18 - FIELD 18 3 LEAF_NODE 19 3 LEAF_NODE 18 * FIELD 18 SHA_CBLOCK LEAF_NODE 19 SHA_CBLOCK LEAF_NODE 18 ) LEAF_NODE 18 / FIELD 18 SHA_CBLOCK LEAF_NODE 19 SHA_CBLOCK LEAF_NODE 15 ; SELECTION 12 KEYWORD 13 else LEAF_NODE 14 else STATEMENTS 13 EXPR_STATEMENT 14 blocks = ( len - 2 * SHA_CBLOCK ) / SHA_CBLOCK ; EXPR 15 blocks = ( len - 2 * SHA_CBLOCK ) / SHA_CBLOCK ASSIGN 16 blocks = ( len - 2 * SHA_CBLOCK ) / SHA_CBLOCK LVAL 17 blocks FIELD 18 blocks LEAF_NODE 19 blocks ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 ( len - 2 * SHA_CBLOCK ) / SHA_CBLOCK LEAF_NODE 18 ( FIELD 18 len LEAF_NODE 19 len LEAF_NODE 18 - FIELD 18 2 LEAF_NODE 19 2 LEAF_NODE 18 * FIELD 18 SHA_CBLOCK LEAF_NODE 19 SHA_CBLOCK LEAF_NODE 18 ) LEAF_NODE 18 / FIELD 18 SHA_CBLOCK LEAF_NODE 19 SHA_CBLOCK LEAF_NODE 15 ; EXPR_STATEMENT 12 aes_off = len - blocks * SHA_CBLOCK ; EXPR 13 aes_off = len - blocks * SHA_CBLOCK ASSIGN 14 aes_off = len - blocks * SHA_CBLOCK LVAL 15 aes_off FIELD 16 aes_off LEAF_NODE 17 aes_off ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 len - blocks * SHA_CBLOCK FIELD 16 len LEAF_NODE 17 len LEAF_NODE 16 - FIELD 16 blocks LEAF_NODE 17 blocks LEAF_NODE 16 * FIELD 16 SHA_CBLOCK LEAF_NODE 17 SHA_CBLOCK LEAF_NODE 13 ; EXPR_STATEMENT 12 aesni_cbc_encrypt ( in , out , aes_off , & key -> ks , ctx -> iv , 0 ) ; EXPR 13 aesni_cbc_encrypt ( in , out , aes_off , & key -> ks , ctx -> iv , 0 ) FUNCTION_CALL 14 aesni_cbc_encrypt ( in , out , aes_off , & key -> ks , ctx -> iv , 0 ) CALLEE 15 aesni_cbc_encrypt LEAF_NODE 16 aesni_cbc_encrypt LEAF_NODE 15 ( ARGUMENT 15 in FIELD 16 in LEAF_NODE 17 in LEAF_NODE 15 , ARGUMENT 15 out FIELD 16 out LEAF_NODE 17 out LEAF_NODE 15 , ARGUMENT 15 aes_off FIELD 16 aes_off LEAF_NODE 17 aes_off LEAF_NODE 15 , ARGUMENT 15 & key -> ks UNARY_EXPR 16 & key -> ks UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 key -> ks LEAF_NODE 18 key LEAF_NODE 18 -> LEAF_NODE 18 ks LEAF_NODE 15 , ARGUMENT 15 ctx -> iv FIELD 16 ctx -> iv LEAF_NODE 17 ctx LEAF_NODE 17 -> LEAF_NODE 17 iv LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 SHA1_Update ( & key -> md , out , sha_off ) ; EXPR 13 SHA1_Update ( & key -> md , out , sha_off ) FUNCTION_CALL 14 SHA1_Update ( & key -> md , out , sha_off ) CALLEE 15 SHA1_Update LEAF_NODE 16 SHA1_Update LEAF_NODE 15 ( ARGUMENT 15 & key -> md UNARY_EXPR 16 & key -> md UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 key -> md LEAF_NODE 18 key LEAF_NODE 18 -> LEAF_NODE 18 md LEAF_NODE 15 , ARGUMENT 15 out FIELD 16 out LEAF_NODE 17 out LEAF_NODE 15 , ARGUMENT 15 sha_off FIELD 16 sha_off LEAF_NODE 17 sha_off LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 aesni256_cbc_sha1_dec ( in + aes_off , out + aes_off , blocks , & key -> ks , ctx -> iv , & key -> md , out + sha_off ) ; EXPR 13 aesni256_cbc_sha1_dec ( in + aes_off , out + aes_off , blocks , & key -> ks , ctx -> iv , & key -> md , out + sha_off ) FUNCTION_CALL 14 aesni256_cbc_sha1_dec ( in + aes_off , out + aes_off , blocks , & key -> ks , ctx -> iv , & key -> md , out + sha_off ) CALLEE 15 aesni256_cbc_sha1_dec LEAF_NODE 16 aesni256_cbc_sha1_dec LEAF_NODE 15 ( ARGUMENT 15 in + aes_off FIELD 16 in LEAF_NODE 17 in LEAF_NODE 16 + FIELD 16 aes_off LEAF_NODE 17 aes_off LEAF_NODE 15 , ARGUMENT 15 out + aes_off FIELD 16 out LEAF_NODE 17 out LEAF_NODE 16 + FIELD 16 aes_off LEAF_NODE 17 aes_off LEAF_NODE 15 , ARGUMENT 15 blocks FIELD 16 blocks LEAF_NODE 17 blocks LEAF_NODE 15 , ARGUMENT 15 & key -> ks UNARY_EXPR 16 & key -> ks UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 key -> ks LEAF_NODE 18 key LEAF_NODE 18 -> LEAF_NODE 18 ks LEAF_NODE 15 , ARGUMENT 15 ctx -> iv FIELD 16 ctx -> iv LEAF_NODE 17 ctx LEAF_NODE 17 -> LEAF_NODE 17 iv LEAF_NODE 15 , ARGUMENT 15 & key -> md UNARY_EXPR 16 & key -> md UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 key -> md LEAF_NODE 18 key LEAF_NODE 18 -> LEAF_NODE 18 md LEAF_NODE 15 , ARGUMENT 15 out + sha_off FIELD 16 out LEAF_NODE 17 out LEAF_NODE 16 + FIELD 16 sha_off LEAF_NODE 17 sha_off LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 sha_off += blocks *= SHA_CBLOCK ; EXPR 13 sha_off += blocks *= SHA_CBLOCK ASSIGN 14 sha_off += blocks *= SHA_CBLOCK LVAL 15 sha_off FIELD 16 sha_off LEAF_NODE 17 sha_off ASSIGN_OP 15 += LEAF_NODE 16 += RVAL 15 blocks *= SHA_CBLOCK ASSIGN 16 blocks *= SHA_CBLOCK LVAL 17 blocks FIELD 18 blocks LEAF_NODE 19 blocks ASSIGN_OP 17 *= LEAF_NODE 18 *= RVAL 17 SHA_CBLOCK FIELD 18 SHA_CBLOCK LEAF_NODE 19 SHA_CBLOCK LEAF_NODE 13 ; EXPR_STATEMENT 12 out += sha_off ; EXPR 13 out += sha_off ASSIGN 14 out += sha_off LVAL 15 out FIELD 16 out LEAF_NODE 17 out ASSIGN_OP 15 += LEAF_NODE 16 += RVAL 15 sha_off FIELD 16 sha_off LEAF_NODE 17 sha_off LEAF_NODE 13 ; EXPR_STATEMENT 12 len -= sha_off ; EXPR 13 len -= sha_off ASSIGN 14 len -= sha_off LVAL 15 len FIELD 16 len LEAF_NODE 17 len ASSIGN_OP 15 -= LEAF_NODE 16 -= RVAL 15 sha_off FIELD 16 sha_off LEAF_NODE 17 sha_off LEAF_NODE 13 ; EXPR_STATEMENT 12 key -> md . Nh += blocks >> 29 ; EXPR 13 key -> md . Nh += blocks >> 29 ASSIGN 14 key -> md . Nh += blocks >> 29 LVAL 15 key -> md . Nh FIELD 16 key -> md . Nh LEAF_NODE 17 key LEAF_NODE 17 -> LEAF_NODE 17 md LEAF_NODE 17 . LEAF_NODE 17 Nh ASSIGN_OP 15 += LEAF_NODE 16 += RVAL 15 blocks >> 29 FIELD 16 blocks LEAF_NODE 17 blocks LEAF_NODE 16 >> FIELD 16 29 LEAF_NODE 17 29 LEAF_NODE 13 ; EXPR_STATEMENT 12 key -> md . Nl += blocks <<= 3 ; EXPR 13 key -> md . Nl += blocks <<= 3 ASSIGN 14 key -> md . Nl += blocks <<= 3 LVAL 15 key -> md . Nl FIELD 16 key -> md . Nl LEAF_NODE 17 key LEAF_NODE 17 -> LEAF_NODE 17 md LEAF_NODE 17 . LEAF_NODE 17 Nl ASSIGN_OP 15 += LEAF_NODE 16 += RVAL 15 blocks <<= 3 ASSIGN 16 blocks <<= 3 LVAL 17 blocks FIELD 18 blocks LEAF_NODE 19 blocks ASSIGN_OP 17 <<= LEAF_NODE 18 <<= RVAL 17 3 FIELD 18 3 LEAF_NODE 19 3 LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 key -> md . Nl < ( unsigned int ) blocks EXPR 14 key -> md . Nl < ( unsigned int ) blocks FIELD 15 key -> md . Nl LEAF_NODE 16 key LEAF_NODE 16 -> LEAF_NODE 16 md LEAF_NODE 16 . LEAF_NODE 16 Nl REL_OPERATOR 15 < LEAF_NODE 16 < LEAF_NODE 15 ( TYPE_NAME 15 unsigned int LEAF_NODE 16 unsigned LEAF_NODE 16 int LEAF_NODE 15 ) FIELD 15 blocks LEAF_NODE 16 blocks LEAF_NODE 13 ) STATEMENTS 13 EXPR_STATEMENT 14 key -> md . Nh ++ ; EXPR 15 key -> md . Nh ++ FIELD 16 key -> md . Nh ++ LEAF_NODE 17 key LEAF_NODE 17 -> LEAF_NODE 17 md LEAF_NODE 17 . LEAF_NODE 17 Nh LEAF_NODE 17 ++ LEAF_NODE 15 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 else LEAF_NODE 11 else STATEMENTS 10 EXPR_STATEMENT 11 aesni_cbc_encrypt ( in , out , len , & key -> ks , ctx -> iv , 0 ) ; EXPR 12 aesni_cbc_encrypt ( in , out , len , & key -> ks , ctx -> iv , 0 ) FUNCTION_CALL 13 aesni_cbc_encrypt ( in , out , len , & key -> ks , ctx -> iv , 0 ) CALLEE 14 aesni_cbc_encrypt LEAF_NODE 15 aesni_cbc_encrypt LEAF_NODE 14 ( ARGUMENT 14 in FIELD 15 in LEAF_NODE 16 in LEAF_NODE 14 , ARGUMENT 14 out FIELD 15 out LEAF_NODE 16 out LEAF_NODE 14 , ARGUMENT 14 len FIELD 15 len LEAF_NODE 16 len LEAF_NODE 14 , ARGUMENT 14 & key -> ks UNARY_EXPR 15 & key -> ks UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 key -> ks LEAF_NODE 17 key LEAF_NODE 17 -> LEAF_NODE 17 ks LEAF_NODE 14 , ARGUMENT 14 ctx -> iv FIELD 15 ctx -> iv LEAF_NODE 16 ctx LEAF_NODE 16 -> LEAF_NODE 16 iv LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 9 SHA1_Update ( & key -> md , out , len ) ; EXPR 10 SHA1_Update ( & key -> md , out , len ) FUNCTION_CALL 11 SHA1_Update ( & key -> md , out , len ) CALLEE 12 SHA1_Update LEAF_NODE 13 SHA1_Update LEAF_NODE 12 ( ARGUMENT 12 & key -> md UNARY_EXPR 13 & key -> md UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 key -> md LEAF_NODE 15 key LEAF_NODE 15 -> LEAF_NODE 15 md LEAF_NODE 12 , ARGUMENT 12 out FIELD 13 out LEAF_NODE 14 out LEAF_NODE 12 , ARGUMENT 12 len FIELD 13 len LEAF_NODE 14 len LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 120, "project": "openssl_ast_vul_function_test_9", "target": 1}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } ; CLASS_DEF 2 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } CLASS_DEF 3 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } LEAF_NODE 4 struct CLASS_NAME 4 bio_addrinfo_st LEAF_NODE 5 bio_addrinfo_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; SIMPLE_DECL 5 int bai_family ; VAR_DECL 6 int bai_family TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_family LEAF_NODE 8 bai_family LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_socktype ; VAR_DECL 6 int bai_socktype TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_socktype LEAF_NODE 8 bai_socktype LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_protocol ; VAR_DECL 6 int bai_protocol TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_protocol LEAF_NODE 8 bai_protocol LEAF_NODE 6 ; SIMPLE_DECL 5 size_t bai_addrlen ; VAR_DECL 6 size_t bai_addrlen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 bai_addrlen LEAF_NODE 8 bai_addrlen LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr * bai_addr ; VAR_DECL 6 struct sockaddr * bai_addr TYPE 7 struct sockaddr * TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr POINTER 8 * LEAF_NODE 9 * NAME 7 bai_addr LEAF_NODE 8 bai_addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct bio_addrinfo_st * bai_next ; VAR_DECL 6 struct bio_addrinfo_st * bai_next TYPE 7 struct bio_addrinfo_st * TYPE_NAME 8 struct bio_addrinfo_st LEAF_NODE 9 struct LEAF_NODE 9 bio_addrinfo_st POINTER 8 * LEAF_NODE 9 * NAME 7 bai_next LEAF_NODE 8 bai_next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BIO_ADDRINFO ; VAR_DECL 2 struct bio_addrinfo_st BIO_ADDRINFO TYPE 3 struct bio_addrinfo_st TYPE_NAME 4 struct bio_addrinfo_st LEAF_NODE 5 struct LEAF_NODE 5 bio_addrinfo_st NAME 3 BIO_ADDRINFO LEAF_NODE 4 BIO_ADDRINFO LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t socklen_t ; VAR_DECL 2 uint32_t socklen_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 socklen_t LEAF_NODE 4 socklen_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } ; CLASS_DEF 2 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } CLASS_DEF 3 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } LEAF_NODE 4 enum CLASS_NAME 4 BIO_hostserv_priorities LEAF_NODE 5 BIO_hostserv_priorities LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV LEAF_NODE 5 BIO_PARSE_PRIO_HOST LEAF_NODE 5 , LEAF_NODE 5 BIO_PARSE_PRIO_SERV LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } ; CLASS_DEF 2 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } CLASS_DEF 3 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } LEAF_NODE 4 enum CLASS_NAME 4 BIO_lookup_type LEAF_NODE 5 BIO_lookup_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER LEAF_NODE 5 BIO_LOOKUP_CLIENT LEAF_NODE 5 , LEAF_NODE 5 BIO_LOOKUP_SERVER LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 32 ] session_id ; VAR_DECL 2 unsigned char [ 32 ] session_id TYPE 3 unsigned char [ 32 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 32 ] LEAF_NODE 5 [ FIELD 5 32 LEAF_NODE 6 32 LEAF_NODE 5 ] NAME 3 session_id LEAF_NODE 4 session_id LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 48 ] master_secret ; VAR_DECL 2 unsigned char [ 48 ] master_secret TYPE 3 unsigned char [ 48 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 48 ] LEAF_NODE 5 [ FIELD 5 48 LEAF_NODE 6 48 LEAF_NODE 5 ] NAME 3 master_secret LEAF_NODE 4 master_secret LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ SSL3_RANDOM_SIZE ] client_random ; VAR_DECL 2 unsigned char [ SSL3_RANDOM_SIZE ] client_random TYPE 3 unsigned char [ SSL3_RANDOM_SIZE ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ SSL3_RANDOM_SIZE ] LEAF_NODE 5 [ FIELD 5 SSL3_RANDOM_SIZE LEAF_NODE 6 SSL3_RANDOM_SIZE LEAF_NODE 5 ] NAME 3 client_random LEAF_NODE 4 client_random LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ SSL3_RANDOM_SIZE ] server_random ; VAR_DECL 2 unsigned char [ SSL3_RANDOM_SIZE ] server_random TYPE 3 unsigned char [ SSL3_RANDOM_SIZE ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ SSL3_RANDOM_SIZE ] LEAF_NODE 5 [ FIELD 5 SSL3_RANDOM_SIZE LEAF_NODE 6 SSL3_RANDOM_SIZE LEAF_NODE 5 ] NAME 3 server_random LEAF_NODE 4 server_random LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 104 ] key_block ; VAR_DECL 2 unsigned char [ 104 ] key_block TYPE 3 unsigned char [ 104 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 104 ] LEAF_NODE 5 [ FIELD 5 104 LEAF_NODE 6 104 LEAF_NODE 5 ] NAME 3 key_block LEAF_NODE 4 key_block LEAF_NODE 2 ; SIMPLE_DECL 1 EVP_MD_CTX * handshake_md ; VAR_DECL 2 EVP_MD_CTX * handshake_md TYPE 3 EVP_MD_CTX * TYPE_NAME 4 EVP_MD_CTX LEAF_NODE 5 EVP_MD_CTX POINTER 4 * LEAF_NODE 5 * NAME 3 handshake_md LEAF_NODE 4 handshake_md LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } PACKET ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } PACKET TYPE 3 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 const unsigned char * curr ; size_t remaining ; SIMPLE_DECL 6 const unsigned char * curr ; VAR_DECL 7 const unsigned char * curr TYPE 8 const unsigned char * TYPE_NAME 9 const unsigned char LEAF_NODE 10 const LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 curr LEAF_NODE 9 curr LEAF_NODE 7 ; SIMPLE_DECL 6 size_t remaining ; VAR_DECL 7 size_t remaining TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 remaining LEAF_NODE 9 remaining LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 PACKET LEAF_NODE 4 PACKET LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_out ; bio_out = NULL ; VAR_DECL 2 BIO * bio_out ; bio_out = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_out LEAF_NODE 4 bio_out LEAF_NODE 3 ; INIT 3 bio_out = NULL ASSIGN 4 bio_out = NULL LVAL 5 bio_out NAME 6 bio_out LEAF_NODE 7 bio_out ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 test_close_streams LEAF_NODE 3 test_close_streams PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 BIO_free_all ( bio_out ) ; EXPR 4 BIO_free_all ( bio_out ) FUNCTION_CALL 5 BIO_free_all ( bio_out ) CALLEE 6 BIO_free_all LEAF_NODE 7 BIO_free_all LEAF_NODE 6 ( ARGUMENT 6 bio_out FIELD 7 bio_out LEAF_NODE 8 bio_out LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 BIO_free_all ( bio_err ) ; EXPR 4 BIO_free_all ( bio_err ) FUNCTION_CALL 5 BIO_free_all ( bio_err ) CALLEE 6 BIO_free_all LEAF_NODE 7 BIO_free_all LEAF_NODE 6 ( ARGUMENT 6 bio_err FIELD 7 bio_err LEAF_NODE 8 bio_err LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 121, "project": "openssl_ast_normal_function_test_55", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 unsigned long TYPE_NAME 3 unsigned long LEAF_NODE 4 unsigned LEAF_NODE 4 long FUNCTION_NAME 2 OPENSSL_LH_strhash LEAF_NODE 3 OPENSSL_LH_strhash PARAMETER_LIST 2 ( const char * c ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * c TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 c LEAF_NODE 5 c LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned long ret ; ret = 0 ; VAR_DECL 4 unsigned long ret ; ret = 0 TYPE 5 unsigned long TYPE_NAME 6 unsigned long LEAF_NODE 7 unsigned LEAF_NODE 7 long NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 5 ; INIT 5 ret = 0 ASSIGN 6 ret = 0 LVAL 7 ret NAME 8 ret LEAF_NODE 9 ret ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 long n ; VAR_DECL 4 long n TYPE 5 long TYPE_NAME 6 long LEAF_NODE 7 long NAME 5 n LEAF_NODE 6 n LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned long v ; VAR_DECL 4 unsigned long v TYPE 5 unsigned long TYPE_NAME 6 unsigned long LEAF_NODE 7 unsigned LEAF_NODE 7 long NAME 5 v LEAF_NODE 6 v LEAF_NODE 4 ; SIMPLE_DECL 3 int r ; VAR_DECL 4 int r TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 r LEAF_NODE 6 r LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( c == NULL ) || ( * c == '\\0' ) EXPR 5 ( c == NULL ) || ( * c == '\\0' ) OR 6 ( c == NULL ) || ( * c == '\\0' ) EXPR 7 ( c == NULL ) LEAF_NODE 8 ( FIELD 8 c LEAF_NODE 9 c EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 8 ) LEAF_NODE 7 || EXPR 7 ( * c == '\\0' ) LEAF_NODE 8 ( UNARY_EXPR 8 * c UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 c LEAF_NODE 10 c EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return ret ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 ret EXPR 7 ret FIELD 8 ret LEAF_NODE 9 ret LEAF_NODE 6 ; EXPR_STATEMENT 3 n = 0x100 ; EXPR 4 n = 0x100 ASSIGN 5 n = 0x100 LVAL 6 n FIELD 7 n LEAF_NODE 8 n ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0x100 FIELD 7 0x100 LEAF_NODE 8 0x100 LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 * c EXPR 5 * c UNARY_EXPR 6 * c UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 c LEAF_NODE 8 c LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 v = n | ( * c ) ; EXPR 7 v = n | ( * c ) ASSIGN 8 v = n | ( * c ) LVAL 9 v FIELD 10 v LEAF_NODE 11 v ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 n | ( * c ) BIT_OR 10 n | ( * c ) BIT_OR_ELEM 11 n FIELD 12 n LEAF_NODE 13 n LEAF_NODE 11 | BIT_OR_ELEM 11 ( * c ) LEAF_NODE 12 ( UNARY_EXPR 12 * c UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 c LEAF_NODE 14 c LEAF_NODE 12 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 n += 0x100 ; EXPR 7 n += 0x100 ASSIGN 8 n += 0x100 LVAL 9 n FIELD 10 n LEAF_NODE 11 n ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 0x100 FIELD 10 0x100 LEAF_NODE 11 0x100 LEAF_NODE 7 ; EXPR_STATEMENT 6 r = ( int ) ( ( v >> 2 ) ^ v ) & 0x0f ; EXPR 7 r = ( int ) ( ( v >> 2 ) ^ v ) & 0x0f ASSIGN 8 r = ( int ) ( ( v >> 2 ) ^ v ) & 0x0f LVAL 9 r FIELD 10 r LEAF_NODE 11 r ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( int ) ( ( v >> 2 ) ^ v ) & 0x0f LEAF_NODE 10 ( TYPE_NAME 10 int LEAF_NODE 11 int LEAF_NODE 10 ) LEAF_NODE 10 ( LEAF_NODE 10 ( FIELD 10 v LEAF_NODE 11 v LEAF_NODE 10 >> FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 10 ) LEAF_NODE 10 ^ FIELD 10 v LEAF_NODE 11 v LEAF_NODE 10 ) LEAF_NODE 10 & FIELD 10 0x0f LEAF_NODE 11 0x0f LEAF_NODE 7 ; EXPR_STATEMENT 6 ret = ( ret << r ) | ( ret >> ( 32 - r ) ) ; EXPR 7 ret = ( ret << r ) | ( ret >> ( 32 - r ) ) ASSIGN 8 ret = ( ret << r ) | ( ret >> ( 32 - r ) ) LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( ret << r ) | ( ret >> ( 32 - r ) ) BIT_OR 10 ( ret << r ) | ( ret >> ( 32 - r ) ) BIT_OR_ELEM 11 ( ret << r ) LEAF_NODE 12 ( FIELD 12 ret LEAF_NODE 13 ret LEAF_NODE 12 << FIELD 12 r LEAF_NODE 13 r LEAF_NODE 12 ) LEAF_NODE 11 | BIT_OR_ELEM 11 ( ret >> ( 32 - r ) ) LEAF_NODE 12 ( FIELD 12 ret LEAF_NODE 13 ret LEAF_NODE 12 >> LEAF_NODE 12 ( FIELD 12 32 LEAF_NODE 13 32 LEAF_NODE 12 - FIELD 12 r LEAF_NODE 13 r LEAF_NODE 12 ) LEAF_NODE 12 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ret &= 0xFFFFFFFFL ; EXPR 7 ret &= 0xFFFFFFFFL ASSIGN 8 ret &= 0xFFFFFFFFL LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 &= LEAF_NODE 10 &= RVAL 9 0xFFFFFFFFL FIELD 10 0xFFFFFFFFL LEAF_NODE 11 0xFFFFFFFFL LEAF_NODE 7 ; EXPR_STATEMENT 6 ret ^= v * v ; EXPR 7 ret ^= v * v ASSIGN 8 ret ^= v * v LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 ^= LEAF_NODE 10 ^= RVAL 9 v * v FIELD 10 v LEAF_NODE 11 v LEAF_NODE 10 * FIELD 10 v LEAF_NODE 11 v LEAF_NODE 7 ; EXPR_STATEMENT 6 c ++ ; EXPR 7 c ++ FIELD 8 c ++ LEAF_NODE 9 c LEAF_NODE 9 ++ LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return ( ret >> 16 ) ^ ret ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ( ret >> 16 ) ^ ret EXPR 5 ( ret >> 16 ) ^ ret LEAF_NODE 6 ( FIELD 6 ret LEAF_NODE 7 ret LEAF_NODE 6 >> FIELD 6 16 LEAF_NODE 7 16 LEAF_NODE 6 ) LEAF_NODE 6 ^ FIELD 6 ret LEAF_NODE 7 ret LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 122, "project": "openssl_ast_normal_function_test_22", "target": 0}
{"func": "SIMPLE_DECL 1 struct ssl2_state_st BASE_CLASSES { int three_byte_header ; int clear_text ; int escape ; int ssl2_rollback ; unsigned int wnum ; int wpend_tot ; const unsigned char * wpend_buf ; int wpend_off ; int wpend_len ; int wpend_ret ; int rbuf_left ; int rbuf_offs ; unsigned char * rbuf ; unsigned char * wbuf ; unsigned char * write_ptr ; unsigned int padding ; unsigned int rlength ; int ract_data_length ; unsigned int wlength ; int wact_data_length ; unsigned char * ract_data ; unsigned char * wact_data ; unsigned char * mac_data ; unsigned char * read_key ; unsigned char * write_key ; unsigned int challenge_length ; unsigned char [ SSL2_MAX_CHALLENGE_LENGTH ] challenge ; unsigned int conn_id_length ; unsigned char [ SSL2_MAX_CONNECTION_ID_LENGTH ] conn_id ; unsigned int key_material_length ; unsigned char [ SSL2_MAX_KEY_MATERIAL_LENGTH * 2 ] key_material ; unsigned long read_sequence ; unsigned long write_sequence ; struct CLASS_NAME BASE_CLASSES { unsigned int conn_id_length ; unsigned int cert_type ; unsigned int cert_length ; unsigned int csl ; unsigned int clear ; unsigned int enc ; unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; unsigned int cipher_spec_length ; unsigned int session_id_length ; unsigned int clen ; unsigned int rlen ; } tmp ; } ; CLASS_DEF 2 struct ssl2_state_st BASE_CLASSES { int three_byte_header ; int clear_text ; int escape ; int ssl2_rollback ; unsigned int wnum ; int wpend_tot ; const unsigned char * wpend_buf ; int wpend_off ; int wpend_len ; int wpend_ret ; int rbuf_left ; int rbuf_offs ; unsigned char * rbuf ; unsigned char * wbuf ; unsigned char * write_ptr ; unsigned int padding ; unsigned int rlength ; int ract_data_length ; unsigned int wlength ; int wact_data_length ; unsigned char * ract_data ; unsigned char * wact_data ; unsigned char * mac_data ; unsigned char * read_key ; unsigned char * write_key ; unsigned int challenge_length ; unsigned char [ SSL2_MAX_CHALLENGE_LENGTH ] challenge ; unsigned int conn_id_length ; unsigned char [ SSL2_MAX_CONNECTION_ID_LENGTH ] conn_id ; unsigned int key_material_length ; unsigned char [ SSL2_MAX_KEY_MATERIAL_LENGTH * 2 ] key_material ; unsigned long read_sequence ; unsigned long write_sequence ; struct CLASS_NAME BASE_CLASSES { unsigned int conn_id_length ; unsigned int cert_type ; unsigned int cert_length ; unsigned int csl ; unsigned int clear ; unsigned int enc ; unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; unsigned int cipher_spec_length ; unsigned int session_id_length ; unsigned int clen ; unsigned int rlen ; } tmp ; } CLASS_DEF 3 struct ssl2_state_st BASE_CLASSES { int three_byte_header ; int clear_text ; int escape ; int ssl2_rollback ; unsigned int wnum ; int wpend_tot ; const unsigned char * wpend_buf ; int wpend_off ; int wpend_len ; int wpend_ret ; int rbuf_left ; int rbuf_offs ; unsigned char * rbuf ; unsigned char * wbuf ; unsigned char * write_ptr ; unsigned int padding ; unsigned int rlength ; int ract_data_length ; unsigned int wlength ; int wact_data_length ; unsigned char * ract_data ; unsigned char * wact_data ; unsigned char * mac_data ; unsigned char * read_key ; unsigned char * write_key ; unsigned int challenge_length ; unsigned char [ SSL2_MAX_CHALLENGE_LENGTH ] challenge ; unsigned int conn_id_length ; unsigned char [ SSL2_MAX_CONNECTION_ID_LENGTH ] conn_id ; unsigned int key_material_length ; unsigned char [ SSL2_MAX_KEY_MATERIAL_LENGTH * 2 ] key_material ; unsigned long read_sequence ; unsigned long write_sequence ; struct CLASS_NAME BASE_CLASSES { unsigned int conn_id_length ; unsigned int cert_type ; unsigned int cert_length ; unsigned int csl ; unsigned int clear ; unsigned int enc ; unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; unsigned int cipher_spec_length ; unsigned int session_id_length ; unsigned int clen ; unsigned int rlen ; } tmp ; } LEAF_NODE 4 struct CLASS_NAME 4 ssl2_state_st LEAF_NODE 5 ssl2_state_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int three_byte_header ; int clear_text ; int escape ; int ssl2_rollback ; unsigned int wnum ; int wpend_tot ; const unsigned char * wpend_buf ; int wpend_off ; int wpend_len ; int wpend_ret ; int rbuf_left ; int rbuf_offs ; unsigned char * rbuf ; unsigned char * wbuf ; unsigned char * write_ptr ; unsigned int padding ; unsigned int rlength ; int ract_data_length ; unsigned int wlength ; int wact_data_length ; unsigned char * ract_data ; unsigned char * wact_data ; unsigned char * mac_data ; unsigned char * read_key ; unsigned char * write_key ; unsigned int challenge_length ; unsigned char [ SSL2_MAX_CHALLENGE_LENGTH ] challenge ; unsigned int conn_id_length ; unsigned char [ SSL2_MAX_CONNECTION_ID_LENGTH ] conn_id ; unsigned int key_material_length ; unsigned char [ SSL2_MAX_KEY_MATERIAL_LENGTH * 2 ] key_material ; unsigned long read_sequence ; unsigned long write_sequence ; struct CLASS_NAME BASE_CLASSES { unsigned int conn_id_length ; unsigned int cert_type ; unsigned int cert_length ; unsigned int csl ; unsigned int clear ; unsigned int enc ; unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; unsigned int cipher_spec_length ; unsigned int session_id_length ; unsigned int clen ; unsigned int rlen ; } tmp ; SIMPLE_DECL 5 int three_byte_header ; VAR_DECL 6 int three_byte_header TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 three_byte_header LEAF_NODE 8 three_byte_header LEAF_NODE 6 ; SIMPLE_DECL 5 int clear_text ; VAR_DECL 6 int clear_text TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 clear_text LEAF_NODE 8 clear_text LEAF_NODE 6 ; SIMPLE_DECL 5 int escape ; VAR_DECL 6 int escape TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 escape LEAF_NODE 8 escape LEAF_NODE 6 ; SIMPLE_DECL 5 int ssl2_rollback ; VAR_DECL 6 int ssl2_rollback TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ssl2_rollback LEAF_NODE 8 ssl2_rollback LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int wnum ; VAR_DECL 6 unsigned int wnum TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 wnum LEAF_NODE 8 wnum LEAF_NODE 6 ; SIMPLE_DECL 5 int wpend_tot ; VAR_DECL 6 int wpend_tot TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 wpend_tot LEAF_NODE 8 wpend_tot LEAF_NODE 6 ; SIMPLE_DECL 5 const unsigned char * wpend_buf ; VAR_DECL 6 const unsigned char * wpend_buf TYPE 7 const unsigned char * TYPE_NAME 8 const unsigned char LEAF_NODE 9 const LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 wpend_buf LEAF_NODE 8 wpend_buf LEAF_NODE 6 ; SIMPLE_DECL 5 int wpend_off ; VAR_DECL 6 int wpend_off TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 wpend_off LEAF_NODE 8 wpend_off LEAF_NODE 6 ; SIMPLE_DECL 5 int wpend_len ; VAR_DECL 6 int wpend_len TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 wpend_len LEAF_NODE 8 wpend_len LEAF_NODE 6 ; SIMPLE_DECL 5 int wpend_ret ; VAR_DECL 6 int wpend_ret TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 wpend_ret LEAF_NODE 8 wpend_ret LEAF_NODE 6 ; SIMPLE_DECL 5 int rbuf_left ; VAR_DECL 6 int rbuf_left TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rbuf_left LEAF_NODE 8 rbuf_left LEAF_NODE 6 ; SIMPLE_DECL 5 int rbuf_offs ; VAR_DECL 6 int rbuf_offs TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rbuf_offs LEAF_NODE 8 rbuf_offs LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * rbuf ; VAR_DECL 6 unsigned char * rbuf TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 rbuf LEAF_NODE 8 rbuf LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * wbuf ; VAR_DECL 6 unsigned char * wbuf TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 wbuf LEAF_NODE 8 wbuf LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * write_ptr ; VAR_DECL 6 unsigned char * write_ptr TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 write_ptr LEAF_NODE 8 write_ptr LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int padding ; VAR_DECL 6 unsigned int padding TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 padding LEAF_NODE 8 padding LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int rlength ; VAR_DECL 6 unsigned int rlength TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rlength LEAF_NODE 8 rlength LEAF_NODE 6 ; SIMPLE_DECL 5 int ract_data_length ; VAR_DECL 6 int ract_data_length TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ract_data_length LEAF_NODE 8 ract_data_length LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int wlength ; VAR_DECL 6 unsigned int wlength TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 wlength LEAF_NODE 8 wlength LEAF_NODE 6 ; SIMPLE_DECL 5 int wact_data_length ; VAR_DECL 6 int wact_data_length TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 wact_data_length LEAF_NODE 8 wact_data_length LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * ract_data ; VAR_DECL 6 unsigned char * ract_data TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 ract_data LEAF_NODE 8 ract_data LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * wact_data ; VAR_DECL 6 unsigned char * wact_data TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 wact_data LEAF_NODE 8 wact_data LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * mac_data ; VAR_DECL 6 unsigned char * mac_data TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 mac_data LEAF_NODE 8 mac_data LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * read_key ; VAR_DECL 6 unsigned char * read_key TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 read_key LEAF_NODE 8 read_key LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * write_key ; VAR_DECL 6 unsigned char * write_key TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 write_key LEAF_NODE 8 write_key LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int challenge_length ; VAR_DECL 6 unsigned int challenge_length TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 challenge_length LEAF_NODE 8 challenge_length LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ SSL2_MAX_CHALLENGE_LENGTH ] challenge ; VAR_DECL 6 unsigned char [ SSL2_MAX_CHALLENGE_LENGTH ] challenge TYPE 7 unsigned char [ SSL2_MAX_CHALLENGE_LENGTH ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ SSL2_MAX_CHALLENGE_LENGTH ] LEAF_NODE 9 [ FIELD 9 SSL2_MAX_CHALLENGE_LENGTH LEAF_NODE 10 SSL2_MAX_CHALLENGE_LENGTH LEAF_NODE 9 ] NAME 7 challenge LEAF_NODE 8 challenge LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int conn_id_length ; VAR_DECL 6 unsigned int conn_id_length TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 conn_id_length LEAF_NODE 8 conn_id_length LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ SSL2_MAX_CONNECTION_ID_LENGTH ] conn_id ; VAR_DECL 6 unsigned char [ SSL2_MAX_CONNECTION_ID_LENGTH ] conn_id TYPE 7 unsigned char [ SSL2_MAX_CONNECTION_ID_LENGTH ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ SSL2_MAX_CONNECTION_ID_LENGTH ] LEAF_NODE 9 [ FIELD 9 SSL2_MAX_CONNECTION_ID_LENGTH LEAF_NODE 10 SSL2_MAX_CONNECTION_ID_LENGTH LEAF_NODE 9 ] NAME 7 conn_id LEAF_NODE 8 conn_id LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int key_material_length ; VAR_DECL 6 unsigned int key_material_length TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 key_material_length LEAF_NODE 8 key_material_length LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ SSL2_MAX_KEY_MATERIAL_LENGTH * 2 ] key_material ; VAR_DECL 6 unsigned char [ SSL2_MAX_KEY_MATERIAL_LENGTH * 2 ] key_material TYPE 7 unsigned char [ SSL2_MAX_KEY_MATERIAL_LENGTH * 2 ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ SSL2_MAX_KEY_MATERIAL_LENGTH * 2 ] LEAF_NODE 9 [ FIELD 9 SSL2_MAX_KEY_MATERIAL_LENGTH LEAF_NODE 10 SSL2_MAX_KEY_MATERIAL_LENGTH LEAF_NODE 9 * FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 9 ] NAME 7 key_material LEAF_NODE 8 key_material LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long read_sequence ; VAR_DECL 6 unsigned long read_sequence TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 read_sequence LEAF_NODE 8 read_sequence LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long write_sequence ; VAR_DECL 6 unsigned long write_sequence TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 write_sequence LEAF_NODE 8 write_sequence LEAF_NODE 6 ; SIMPLE_DECL 5 struct CLASS_NAME BASE_CLASSES { unsigned int conn_id_length ; unsigned int cert_type ; unsigned int cert_length ; unsigned int csl ; unsigned int clear ; unsigned int enc ; unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; unsigned int cipher_spec_length ; unsigned int session_id_length ; unsigned int clen ; unsigned int rlen ; } tmp ; VAR_DECL 6 struct CLASS_NAME BASE_CLASSES { unsigned int conn_id_length ; unsigned int cert_type ; unsigned int cert_length ; unsigned int csl ; unsigned int clear ; unsigned int enc ; unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; unsigned int cipher_spec_length ; unsigned int session_id_length ; unsigned int clen ; unsigned int rlen ; } tmp TYPE 7 struct CLASS_NAME BASE_CLASSES { unsigned int conn_id_length ; unsigned int cert_type ; unsigned int cert_length ; unsigned int csl ; unsigned int clear ; unsigned int enc ; unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; unsigned int cipher_spec_length ; unsigned int session_id_length ; unsigned int clen ; unsigned int rlen ; } CLASS_DEF 8 struct CLASS_NAME BASE_CLASSES { unsigned int conn_id_length ; unsigned int cert_type ; unsigned int cert_length ; unsigned int csl ; unsigned int clear ; unsigned int enc ; unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; unsigned int cipher_spec_length ; unsigned int session_id_length ; unsigned int clen ; unsigned int rlen ; } LEAF_NODE 9 struct LEAF_NODE 9 CLASS_NAME LEAF_NODE 9 BASE_CLASSES LEAF_NODE 9 { CLASS_CONTENT 9 unsigned int conn_id_length ; unsigned int cert_type ; unsigned int cert_length ; unsigned int csl ; unsigned int clear ; unsigned int enc ; unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; unsigned int cipher_spec_length ; unsigned int session_id_length ; unsigned int clen ; unsigned int rlen ; SIMPLE_DECL 10 unsigned int conn_id_length ; VAR_DECL 11 unsigned int conn_id_length TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 conn_id_length LEAF_NODE 13 conn_id_length LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned int cert_type ; VAR_DECL 11 unsigned int cert_type TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 cert_type LEAF_NODE 13 cert_type LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned int cert_length ; VAR_DECL 11 unsigned int cert_length TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 cert_length LEAF_NODE 13 cert_length LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned int csl ; VAR_DECL 11 unsigned int csl TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 csl LEAF_NODE 13 csl LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned int clear ; VAR_DECL 11 unsigned int clear TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 clear LEAF_NODE 13 clear LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned int enc ; VAR_DECL 11 unsigned int enc TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 enc LEAF_NODE 13 enc LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; VAR_DECL 11 unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl TYPE 12 unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char TYPE_SUFFIX 13 [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] LEAF_NODE 14 [ FIELD 14 SSL2_MAX_CERT_CHALLENGE_LENGTH LEAF_NODE 15 SSL2_MAX_CERT_CHALLENGE_LENGTH LEAF_NODE 14 ] NAME 12 ccl LEAF_NODE 13 ccl LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned int cipher_spec_length ; VAR_DECL 11 unsigned int cipher_spec_length TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 cipher_spec_length LEAF_NODE 13 cipher_spec_length LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned int session_id_length ; VAR_DECL 11 unsigned int session_id_length TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 session_id_length LEAF_NODE 13 session_id_length LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned int clen ; VAR_DECL 11 unsigned int clen TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 clen LEAF_NODE 13 clen LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned int rlen ; VAR_DECL 11 unsigned int rlen TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 rlen LEAF_NODE 13 rlen LEAF_NODE 11 ; LEAF_NODE 9 } NAME 7 tmp LEAF_NODE 8 tmp LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl_method_st SSL_METHOD ; VAR_DECL 2 struct ssl_method_st SSL_METHOD TYPE 3 struct ssl_method_st TYPE_NAME 4 struct ssl_method_st LEAF_NODE 5 struct LEAF_NODE 5 ssl_method_st NAME 3 SSL_METHOD LEAF_NODE 4 SSL_METHOD LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl_aead_ctx_st SSL_AEAD_CTX ; VAR_DECL 2 struct ssl_aead_ctx_st SSL_AEAD_CTX TYPE 3 struct ssl_aead_ctx_st TYPE_NAME 4 struct ssl_aead_ctx_st LEAF_NODE 5 struct LEAF_NODE 5 ssl_aead_ctx_st NAME 3 SSL_AEAD_CTX LEAF_NODE 4 SSL_AEAD_CTX LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl_session_st SSL_SESSION ; VAR_DECL 2 struct ssl_session_st SSL_SESSION TYPE 3 struct ssl_session_st TYPE_NAME 4 struct ssl_session_st LEAF_NODE 5 struct LEAF_NODE 5 ssl_session_st NAME 3 SSL_SESSION LEAF_NODE 4 SSL_SESSION LEAF_NODE 2 ; SIMPLE_DECL 1 struct tls_session_ticket_ext_st TLS_SESSION_TICKET_EXT ; VAR_DECL 2 struct tls_session_ticket_ext_st TLS_SESSION_TICKET_EXT TYPE 3 struct tls_session_ticket_ext_st TYPE_NAME 4 struct tls_session_ticket_ext_st LEAF_NODE 5 struct LEAF_NODE 5 tls_session_ticket_ext_st NAME 3 TLS_SESSION_TICKET_EXT LEAF_NODE 4 TLS_SESSION_TICKET_EXT LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl_cipher_st BASE_CLASSES { int valid ; const char * name ; unsigned long id ; unsigned long algorithm_mkey ; unsigned long algorithm_auth ; unsigned long algorithm_enc ; unsigned long algorithm_mac ; unsigned long algorithm_ssl ; unsigned long algo_strength ; unsigned long algorithm2 ; int strength_bits ; int alg_bits ; } ; CLASS_DEF 2 struct ssl_cipher_st BASE_CLASSES { int valid ; const char * name ; unsigned long id ; unsigned long algorithm_mkey ; unsigned long algorithm_auth ; unsigned long algorithm_enc ; unsigned long algorithm_mac ; unsigned long algorithm_ssl ; unsigned long algo_strength ; unsigned long algorithm2 ; int strength_bits ; int alg_bits ; } CLASS_DEF 3 struct ssl_cipher_st BASE_CLASSES { int valid ; const char * name ; unsigned long id ; unsigned long algorithm_mkey ; unsigned long algorithm_auth ; unsigned long algorithm_enc ; unsigned long algorithm_mac ; unsigned long algorithm_ssl ; unsigned long algo_strength ; unsigned long algorithm2 ; int strength_bits ; int alg_bits ; } LEAF_NODE 4 struct CLASS_NAME 4 ssl_cipher_st LEAF_NODE 5 ssl_cipher_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int valid ; const char * name ; unsigned long id ; unsigned long algorithm_mkey ; unsigned long algorithm_auth ; unsigned long algorithm_enc ; unsigned long algorithm_mac ; unsigned long algorithm_ssl ; unsigned long algo_strength ; unsigned long algorithm2 ; int strength_bits ; int alg_bits ; SIMPLE_DECL 5 int valid ; VAR_DECL 6 int valid TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 valid LEAF_NODE 8 valid LEAF_NODE 6 ; SIMPLE_DECL 5 const char * name ; VAR_DECL 6 const char * name TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 name LEAF_NODE 8 name LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long id ; VAR_DECL 6 unsigned long id TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long algorithm_mkey ; VAR_DECL 6 unsigned long algorithm_mkey TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 algorithm_mkey LEAF_NODE 8 algorithm_mkey LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long algorithm_auth ; VAR_DECL 6 unsigned long algorithm_auth TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 algorithm_auth LEAF_NODE 8 algorithm_auth LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long algorithm_enc ; VAR_DECL 6 unsigned long algorithm_enc TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 algorithm_enc LEAF_NODE 8 algorithm_enc LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long algorithm_mac ; VAR_DECL 6 unsigned long algorithm_mac TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 algorithm_mac LEAF_NODE 8 algorithm_mac LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long algorithm_ssl ; VAR_DECL 6 unsigned long algorithm_ssl TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 algorithm_ssl LEAF_NODE 8 algorithm_ssl LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long algo_strength ; VAR_DECL 6 unsigned long algo_strength TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 algo_strength LEAF_NODE 8 algo_strength LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long algorithm2 ; VAR_DECL 6 unsigned long algorithm2 TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 algorithm2 LEAF_NODE 8 algorithm2 LEAF_NODE 6 ; SIMPLE_DECL 5 int strength_bits ; VAR_DECL 6 int strength_bits TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 strength_bits LEAF_NODE 8 strength_bits LEAF_NODE 6 ; SIMPLE_DECL 5 int alg_bits ; VAR_DECL 6 int alg_bits TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 alg_bits LEAF_NODE 8 alg_bits LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl_cipher_st SSL_CIPHER ; VAR_DECL 2 struct ssl_cipher_st SSL_CIPHER TYPE 3 struct ssl_cipher_st TYPE_NAME 4 struct ssl_cipher_st LEAF_NODE 5 struct LEAF_NODE 5 ssl_cipher_st NAME 3 SSL_CIPHER LEAF_NODE 4 SSL_CIPHER LEAF_NODE 2 ; SIMPLE_DECL 1 struct crypto_ex_data_st BASE_CLASSES { STACK_OF ( void ) * sk ; int dummy ; } ; CLASS_DEF 2 struct crypto_ex_data_st BASE_CLASSES { STACK_OF ( void ) * sk ; int dummy ; } CLASS_DEF 3 struct crypto_ex_data_st BASE_CLASSES { STACK_OF ( void ) * sk ; int dummy ; } LEAF_NODE 4 struct CLASS_NAME 4 crypto_ex_data_st LEAF_NODE 5 crypto_ex_data_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 STACK_OF ( void ) * sk ; int dummy ; LEAF_NODE 5 STACK_OF LEAF_NODE 5 ( LEAF_NODE 5 void LEAF_NODE 5 ) LEAF_NODE 5 * LEAF_NODE 5 sk LEAF_NODE 5 ; SIMPLE_DECL 5 int dummy ; VAR_DECL 6 int dummy TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 dummy LEAF_NODE 8 dummy LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct crypto_ex_data_st CRYPTO_EX_DATA ; VAR_DECL 2 struct crypto_ex_data_st CRYPTO_EX_DATA TYPE 3 struct crypto_ex_data_st TYPE_NAME 4 struct crypto_ex_data_st LEAF_NODE 5 struct LEAF_NODE 5 crypto_ex_data_st NAME 3 CRYPTO_EX_DATA LEAF_NODE 4 CRYPTO_EX_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 struct srtp_protection_profile_st BASE_CLASSES { const char * name ; unsigned long id ; } SRTP_PROTECTION_PROFILE ; VAR_DECL 2 struct srtp_protection_profile_st BASE_CLASSES { const char * name ; unsigned long id ; } SRTP_PROTECTION_PROFILE TYPE 3 struct srtp_protection_profile_st BASE_CLASSES { const char * name ; unsigned long id ; } CLASS_DEF 4 struct srtp_protection_profile_st BASE_CLASSES { const char * name ; unsigned long id ; } LEAF_NODE 5 struct CLASS_NAME 5 srtp_protection_profile_st LEAF_NODE 6 srtp_protection_profile_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 const char * name ; unsigned long id ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned long id ; VAR_DECL 7 unsigned long id TYPE 8 unsigned long TYPE_NAME 9 unsigned long LEAF_NODE 10 unsigned LEAF_NODE 10 long NAME 8 id LEAF_NODE 9 id LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 SRTP_PROTECTION_PROFILE LEAF_NODE 4 SRTP_PROTECTION_PROFILE LEAF_NODE 2 ; SIMPLE_DECL 1 struct buf_mem_st BASE_CLASSES { size_t length ; char * data ; size_t max ; } ; CLASS_DEF 2 struct buf_mem_st BASE_CLASSES { size_t length ; char * data ; size_t max ; } CLASS_DEF 3 struct buf_mem_st BASE_CLASSES { size_t length ; char * data ; size_t max ; } LEAF_NODE 4 struct CLASS_NAME 4 buf_mem_st LEAF_NODE 5 buf_mem_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 size_t length ; char * data ; size_t max ; SIMPLE_DECL 5 size_t length ; VAR_DECL 6 size_t length TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 length LEAF_NODE 8 length LEAF_NODE 6 ; SIMPLE_DECL 5 char * data ; VAR_DECL 6 char * data TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 size_t max ; VAR_DECL 6 size_t max TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 max LEAF_NODE 8 max LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct buf_mem_st BUF_MEM ; VAR_DECL 2 struct buf_mem_st BUF_MEM TYPE 3 struct buf_mem_st TYPE_NAME 4 struct buf_mem_st LEAF_NODE 5 struct LEAF_NODE 5 buf_mem_st NAME 3 BUF_MEM LEAF_NODE 4 BUF_MEM LEAF_NODE 2 ; SIMPLE_DECL 1 struct cert_pkey_st BASE_CLASSES { X509 * x509 ; EVP_PKEY * privatekey ; const EVP_MD * digest ; } ; CLASS_DEF 2 struct cert_pkey_st BASE_CLASSES { X509 * x509 ; EVP_PKEY * privatekey ; const EVP_MD * digest ; } CLASS_DEF 3 struct cert_pkey_st BASE_CLASSES { X509 * x509 ; EVP_PKEY * privatekey ; const EVP_MD * digest ; } LEAF_NODE 4 struct CLASS_NAME 4 cert_pkey_st LEAF_NODE 5 cert_pkey_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 X509 * x509 ; EVP_PKEY * privatekey ; const EVP_MD * digest ; SIMPLE_DECL 5 X509 * x509 ; VAR_DECL 6 X509 * x509 TYPE 7 X509 * TYPE_NAME 8 X509 LEAF_NODE 9 X509 POINTER 8 * LEAF_NODE 9 * NAME 7 x509 LEAF_NODE 8 x509 LEAF_NODE 6 ; SIMPLE_DECL 5 EVP_PKEY * privatekey ; VAR_DECL 6 EVP_PKEY * privatekey TYPE 7 EVP_PKEY * TYPE_NAME 8 EVP_PKEY LEAF_NODE 9 EVP_PKEY POINTER 8 * LEAF_NODE 9 * NAME 7 privatekey LEAF_NODE 8 privatekey LEAF_NODE 6 ; SIMPLE_DECL 5 const EVP_MD * digest ; VAR_DECL 6 const EVP_MD * digest TYPE 7 const EVP_MD * TYPE_NAME 8 const EVP_MD LEAF_NODE 9 const LEAF_NODE 9 EVP_MD POINTER 8 * LEAF_NODE 9 * NAME 7 digest LEAF_NODE 8 digest LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct cert_pkey_st CERT_PKEY ; VAR_DECL 2 struct cert_pkey_st CERT_PKEY TYPE 3 struct cert_pkey_st TYPE_NAME 4 struct cert_pkey_st LEAF_NODE 5 struct LEAF_NODE 5 cert_pkey_st NAME 3 CERT_PKEY LEAF_NODE 4 CERT_PKEY LEAF_NODE 2 ; SIMPLE_DECL 1 struct sess_cert_st BASE_CLASSES { STACK_OF ( X509 ) * cert_chain ; int peer_cert_type ; CERT_PKEY * peer_key ; CERT_PKEY [ SSL_PKEY_NUM ] peer_pkeys ; RSA * peer_rsa_tmp ; DH * peer_dh_tmp ; EC_KEY * peer_ecdh_tmp ; int references ; } ; CLASS_DEF 2 struct sess_cert_st BASE_CLASSES { STACK_OF ( X509 ) * cert_chain ; int peer_cert_type ; CERT_PKEY * peer_key ; CERT_PKEY [ SSL_PKEY_NUM ] peer_pkeys ; RSA * peer_rsa_tmp ; DH * peer_dh_tmp ; EC_KEY * peer_ecdh_tmp ; int references ; } CLASS_DEF 3 struct sess_cert_st BASE_CLASSES { STACK_OF ( X509 ) * cert_chain ; int peer_cert_type ; CERT_PKEY * peer_key ; CERT_PKEY [ SSL_PKEY_NUM ] peer_pkeys ; RSA * peer_rsa_tmp ; DH * peer_dh_tmp ; EC_KEY * peer_ecdh_tmp ; int references ; } LEAF_NODE 4 struct CLASS_NAME 4 sess_cert_st LEAF_NODE 5 sess_cert_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 STACK_OF ( X509 ) * cert_chain ; int peer_cert_type ; CERT_PKEY * peer_key ; CERT_PKEY [ SSL_PKEY_NUM ] peer_pkeys ; RSA * peer_rsa_tmp ; DH * peer_dh_tmp ; EC_KEY * peer_ecdh_tmp ; int references ; LEAF_NODE 5 STACK_OF LEAF_NODE 5 ( LEAF_NODE 5 X509 LEAF_NODE 5 ) LEAF_NODE 5 * LEAF_NODE 5 cert_chain LEAF_NODE 5 ; SIMPLE_DECL 5 int peer_cert_type ; VAR_DECL 6 int peer_cert_type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 peer_cert_type LEAF_NODE 8 peer_cert_type LEAF_NODE 6 ; SIMPLE_DECL 5 CERT_PKEY * peer_key ; VAR_DECL 6 CERT_PKEY * peer_key TYPE 7 CERT_PKEY * TYPE_NAME 8 CERT_PKEY LEAF_NODE 9 CERT_PKEY POINTER 8 * LEAF_NODE 9 * NAME 7 peer_key LEAF_NODE 8 peer_key LEAF_NODE 6 ; SIMPLE_DECL 5 CERT_PKEY [ SSL_PKEY_NUM ] peer_pkeys ; VAR_DECL 6 CERT_PKEY [ SSL_PKEY_NUM ] peer_pkeys TYPE 7 CERT_PKEY [ SSL_PKEY_NUM ] TYPE_NAME 8 CERT_PKEY LEAF_NODE 9 CERT_PKEY TYPE_SUFFIX 8 [ SSL_PKEY_NUM ] LEAF_NODE 9 [ FIELD 9 SSL_PKEY_NUM LEAF_NODE 10 SSL_PKEY_NUM LEAF_NODE 9 ] NAME 7 peer_pkeys LEAF_NODE 8 peer_pkeys LEAF_NODE 6 ; SIMPLE_DECL 5 RSA * peer_rsa_tmp ; VAR_DECL 6 RSA * peer_rsa_tmp TYPE 7 RSA * TYPE_NAME 8 RSA LEAF_NODE 9 RSA POINTER 8 * LEAF_NODE 9 * NAME 7 peer_rsa_tmp LEAF_NODE 8 peer_rsa_tmp LEAF_NODE 6 ; SIMPLE_DECL 5 DH * peer_dh_tmp ; VAR_DECL 6 DH * peer_dh_tmp TYPE 7 DH * TYPE_NAME 8 DH LEAF_NODE 9 DH POINTER 8 * LEAF_NODE 9 * NAME 7 peer_dh_tmp LEAF_NODE 8 peer_dh_tmp LEAF_NODE 6 ; SIMPLE_DECL 5 EC_KEY * peer_ecdh_tmp ; VAR_DECL 6 EC_KEY * peer_ecdh_tmp TYPE 7 EC_KEY * TYPE_NAME 8 EC_KEY LEAF_NODE 9 EC_KEY POINTER 8 * LEAF_NODE 9 * NAME 7 peer_ecdh_tmp LEAF_NODE 8 peer_ecdh_tmp LEAF_NODE 6 ; SIMPLE_DECL 5 int references ; VAR_DECL 6 int references TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 references LEAF_NODE 8 references LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 int CRYPTO_REF_COUNT ; VAR_DECL 2 int CRYPTO_REF_COUNT TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CRYPTO_REF_COUNT LEAF_NODE 4 CRYPTO_REF_COUNT LEAF_NODE 2 ; SIMPLE_DECL 1 struct x509_st BASE_CLASSES { CRYPTO_REF_COUNT references ; long ex_pathlen ; long ex_pcpathlen ; uint32_t ex_flags ; uint32_t ex_kusage ; uint32_t ex_xkusage ; uint32_t ex_nscert ; struct ASIdentifiers_st * rfc3779_asid ; unsigned char [ SHA_DIGEST_LENGTH ] sha1_hash ; volatile int ex_cached ; char * propq ; } ; CLASS_DEF 2 struct x509_st BASE_CLASSES { CRYPTO_REF_COUNT references ; long ex_pathlen ; long ex_pcpathlen ; uint32_t ex_flags ; uint32_t ex_kusage ; uint32_t ex_xkusage ; uint32_t ex_nscert ; struct ASIdentifiers_st * rfc3779_asid ; unsigned char [ SHA_DIGEST_LENGTH ] sha1_hash ; volatile int ex_cached ; char * propq ; } CLASS_DEF 3 struct x509_st BASE_CLASSES { CRYPTO_REF_COUNT references ; long ex_pathlen ; long ex_pcpathlen ; uint32_t ex_flags ; uint32_t ex_kusage ; uint32_t ex_xkusage ; uint32_t ex_nscert ; struct ASIdentifiers_st * rfc3779_asid ; unsigned char [ SHA_DIGEST_LENGTH ] sha1_hash ; volatile int ex_cached ; char * propq ; } LEAF_NODE 4 struct CLASS_NAME 4 x509_st LEAF_NODE 5 x509_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 CRYPTO_REF_COUNT references ; long ex_pathlen ; long ex_pcpathlen ; uint32_t ex_flags ; uint32_t ex_kusage ; uint32_t ex_xkusage ; uint32_t ex_nscert ; struct ASIdentifiers_st * rfc3779_asid ; unsigned char [ SHA_DIGEST_LENGTH ] sha1_hash ; volatile int ex_cached ; char * propq ; SIMPLE_DECL 5 CRYPTO_REF_COUNT references ; VAR_DECL 6 CRYPTO_REF_COUNT references TYPE 7 CRYPTO_REF_COUNT TYPE_NAME 8 CRYPTO_REF_COUNT LEAF_NODE 9 CRYPTO_REF_COUNT NAME 7 references LEAF_NODE 8 references LEAF_NODE 6 ; SIMPLE_DECL 5 long ex_pathlen ; VAR_DECL 6 long ex_pathlen TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 ex_pathlen LEAF_NODE 8 ex_pathlen LEAF_NODE 6 ; SIMPLE_DECL 5 long ex_pcpathlen ; VAR_DECL 6 long ex_pcpathlen TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 ex_pcpathlen LEAF_NODE 8 ex_pcpathlen LEAF_NODE 6 ; SIMPLE_DECL 5 uint32_t ex_flags ; VAR_DECL 6 uint32_t ex_flags TYPE 7 uint32_t TYPE_NAME 8 uint32_t LEAF_NODE 9 uint32_t NAME 7 ex_flags LEAF_NODE 8 ex_flags LEAF_NODE 6 ; SIMPLE_DECL 5 uint32_t ex_kusage ; VAR_DECL 6 uint32_t ex_kusage TYPE 7 uint32_t TYPE_NAME 8 uint32_t LEAF_NODE 9 uint32_t NAME 7 ex_kusage LEAF_NODE 8 ex_kusage LEAF_NODE 6 ; SIMPLE_DECL 5 uint32_t ex_xkusage ; VAR_DECL 6 uint32_t ex_xkusage TYPE 7 uint32_t TYPE_NAME 8 uint32_t LEAF_NODE 9 uint32_t NAME 7 ex_xkusage LEAF_NODE 8 ex_xkusage LEAF_NODE 6 ; SIMPLE_DECL 5 uint32_t ex_nscert ; VAR_DECL 6 uint32_t ex_nscert TYPE 7 uint32_t TYPE_NAME 8 uint32_t LEAF_NODE 9 uint32_t NAME 7 ex_nscert LEAF_NODE 8 ex_nscert LEAF_NODE 6 ; SIMPLE_DECL 5 struct ASIdentifiers_st * rfc3779_asid ; VAR_DECL 6 struct ASIdentifiers_st * rfc3779_asid TYPE 7 struct ASIdentifiers_st * TYPE_NAME 8 struct ASIdentifiers_st LEAF_NODE 9 struct LEAF_NODE 9 ASIdentifiers_st POINTER 8 * LEAF_NODE 9 * NAME 7 rfc3779_asid LEAF_NODE 8 rfc3779_asid LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ SHA_DIGEST_LENGTH ] sha1_hash ; VAR_DECL 6 unsigned char [ SHA_DIGEST_LENGTH ] sha1_hash TYPE 7 unsigned char [ SHA_DIGEST_LENGTH ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ SHA_DIGEST_LENGTH ] LEAF_NODE 9 [ FIELD 9 SHA_DIGEST_LENGTH LEAF_NODE 10 SHA_DIGEST_LENGTH LEAF_NODE 9 ] NAME 7 sha1_hash LEAF_NODE 8 sha1_hash LEAF_NODE 6 ; SIMPLE_DECL 5 volatile int ex_cached ; VAR_DECL 6 volatile int ex_cached TYPE 7 volatile int TYPE_NAME 8 volatile int LEAF_NODE 9 volatile LEAF_NODE 9 int NAME 7 ex_cached LEAF_NODE 8 ex_cached LEAF_NODE 6 ; SIMPLE_DECL 5 char * propq ; VAR_DECL 6 char * propq TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 propq LEAF_NODE 8 propq LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct x509_st X509 ; VAR_DECL 2 struct x509_st X509 TYPE 3 struct x509_st TYPE_NAME 4 struct x509_st LEAF_NODE 5 struct LEAF_NODE 5 x509_st NAME 3 X509 LEAF_NODE 4 X509 LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl_session_st BASE_CLASSES { int ssl_version ; int master_key_length ; unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] master_key ; unsigned int session_id_length ; unsigned char [ SSL_MAX_SSL_SESSION_ID_LENGTH ] session_id ; unsigned int sid_ctx_length ; unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; char * psk_identity_hint ; char * psk_identity ; int not_resumable ; struct sess_cert_st * sess_cert ; X509 * peer ; long verify_result ; int references ; long timeout ; long time ; const SSL_CIPHER * cipher ; unsigned long cipher_id ; CRYPTO_EX_DATA ex_data ; struct ssl_session_st * prev , struct ssl_session_st * next ; char * tlsext_hostname ; uint8_t * tlsext_tick ; size_t tlsext_ticklen ; uint32_t tlsext_tick_lifetime_hint ; size_t tlsext_signed_cert_timestamp_list_length ; uint8_t * tlsext_signed_cert_timestamp_list ; size_t ocsp_response_length ; uint8_t * ocsp_response ; char peer_sha256_valid ; unsigned char [ SHA256_DIGEST_LENGTH ] peer_sha256 ; unsigned char [ EVP_MAX_MD_SIZE ] original_handshake_hash ; unsigned int original_handshake_hash_len ; char extended_master_secret ; } ; CLASS_DEF 2 struct ssl_session_st BASE_CLASSES { int ssl_version ; int master_key_length ; unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] master_key ; unsigned int session_id_length ; unsigned char [ SSL_MAX_SSL_SESSION_ID_LENGTH ] session_id ; unsigned int sid_ctx_length ; unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; char * psk_identity_hint ; char * psk_identity ; int not_resumable ; struct sess_cert_st * sess_cert ; X509 * peer ; long verify_result ; int references ; long timeout ; long time ; const SSL_CIPHER * cipher ; unsigned long cipher_id ; CRYPTO_EX_DATA ex_data ; struct ssl_session_st * prev , struct ssl_session_st * next ; char * tlsext_hostname ; uint8_t * tlsext_tick ; size_t tlsext_ticklen ; uint32_t tlsext_tick_lifetime_hint ; size_t tlsext_signed_cert_timestamp_list_length ; uint8_t * tlsext_signed_cert_timestamp_list ; size_t ocsp_response_length ; uint8_t * ocsp_response ; char peer_sha256_valid ; unsigned char [ SHA256_DIGEST_LENGTH ] peer_sha256 ; unsigned char [ EVP_MAX_MD_SIZE ] original_handshake_hash ; unsigned int original_handshake_hash_len ; char extended_master_secret ; } CLASS_DEF 3 struct ssl_session_st BASE_CLASSES { int ssl_version ; int master_key_length ; unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] master_key ; unsigned int session_id_length ; unsigned char [ SSL_MAX_SSL_SESSION_ID_LENGTH ] session_id ; unsigned int sid_ctx_length ; unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; char * psk_identity_hint ; char * psk_identity ; int not_resumable ; struct sess_cert_st * sess_cert ; X509 * peer ; long verify_result ; int references ; long timeout ; long time ; const SSL_CIPHER * cipher ; unsigned long cipher_id ; CRYPTO_EX_DATA ex_data ; struct ssl_session_st * prev , struct ssl_session_st * next ; char * tlsext_hostname ; uint8_t * tlsext_tick ; size_t tlsext_ticklen ; uint32_t tlsext_tick_lifetime_hint ; size_t tlsext_signed_cert_timestamp_list_length ; uint8_t * tlsext_signed_cert_timestamp_list ; size_t ocsp_response_length ; uint8_t * ocsp_response ; char peer_sha256_valid ; unsigned char [ SHA256_DIGEST_LENGTH ] peer_sha256 ; unsigned char [ EVP_MAX_MD_SIZE ] original_handshake_hash ; unsigned int original_handshake_hash_len ; char extended_master_secret ; } LEAF_NODE 4 struct CLASS_NAME 4 ssl_session_st LEAF_NODE 5 ssl_session_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int ssl_version ; int master_key_length ; unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] master_key ; unsigned int session_id_length ; unsigned char [ SSL_MAX_SSL_SESSION_ID_LENGTH ] session_id ; unsigned int sid_ctx_length ; unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; char * psk_identity_hint ; char * psk_identity ; int not_resumable ; struct sess_cert_st * sess_cert ; X509 * peer ; long verify_result ; int references ; long timeout ; long time ; const SSL_CIPHER * cipher ; unsigned long cipher_id ; CRYPTO_EX_DATA ex_data ; struct ssl_session_st * prev , struct ssl_session_st * next ; char * tlsext_hostname ; uint8_t * tlsext_tick ; size_t tlsext_ticklen ; uint32_t tlsext_tick_lifetime_hint ; size_t tlsext_signed_cert_timestamp_list_length ; uint8_t * tlsext_signed_cert_timestamp_list ; size_t ocsp_response_length ; uint8_t * ocsp_response ; char peer_sha256_valid ; unsigned char [ SHA256_DIGEST_LENGTH ] peer_sha256 ; unsigned char [ EVP_MAX_MD_SIZE ] original_handshake_hash ; unsigned int original_handshake_hash_len ; char extended_master_secret ; SIMPLE_DECL 5 int ssl_version ; VAR_DECL 6 int ssl_version TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ssl_version LEAF_NODE 8 ssl_version LEAF_NODE 6 ; SIMPLE_DECL 5 int master_key_length ; VAR_DECL 6 int master_key_length TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 master_key_length LEAF_NODE 8 master_key_length LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] master_key ; VAR_DECL 6 unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] master_key TYPE 7 unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ SSL_MAX_MASTER_KEY_LENGTH ] LEAF_NODE 9 [ FIELD 9 SSL_MAX_MASTER_KEY_LENGTH LEAF_NODE 10 SSL_MAX_MASTER_KEY_LENGTH LEAF_NODE 9 ] NAME 7 master_key LEAF_NODE 8 master_key LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int session_id_length ; VAR_DECL 6 unsigned int session_id_length TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 session_id_length LEAF_NODE 8 session_id_length LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ SSL_MAX_SSL_SESSION_ID_LENGTH ] session_id ; VAR_DECL 6 unsigned char [ SSL_MAX_SSL_SESSION_ID_LENGTH ] session_id TYPE 7 unsigned char [ SSL_MAX_SSL_SESSION_ID_LENGTH ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ SSL_MAX_SSL_SESSION_ID_LENGTH ] LEAF_NODE 9 [ FIELD 9 SSL_MAX_SSL_SESSION_ID_LENGTH LEAF_NODE 10 SSL_MAX_SSL_SESSION_ID_LENGTH LEAF_NODE 9 ] NAME 7 session_id LEAF_NODE 8 session_id LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int sid_ctx_length ; VAR_DECL 6 unsigned int sid_ctx_length TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 sid_ctx_length LEAF_NODE 8 sid_ctx_length LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; VAR_DECL 6 unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx TYPE 7 unsigned char [ SSL_MAX_SID_CTX_LENGTH ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ SSL_MAX_SID_CTX_LENGTH ] LEAF_NODE 9 [ FIELD 9 SSL_MAX_SID_CTX_LENGTH LEAF_NODE 10 SSL_MAX_SID_CTX_LENGTH LEAF_NODE 9 ] NAME 7 sid_ctx LEAF_NODE 8 sid_ctx LEAF_NODE 6 ; SIMPLE_DECL 5 char * psk_identity_hint ; VAR_DECL 6 char * psk_identity_hint TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 psk_identity_hint LEAF_NODE 8 psk_identity_hint LEAF_NODE 6 ; SIMPLE_DECL 5 char * psk_identity ; VAR_DECL 6 char * psk_identity TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 psk_identity LEAF_NODE 8 psk_identity LEAF_NODE 6 ; SIMPLE_DECL 5 int not_resumable ; VAR_DECL 6 int not_resumable TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 not_resumable LEAF_NODE 8 not_resumable LEAF_NODE 6 ; SIMPLE_DECL 5 struct sess_cert_st * sess_cert ; VAR_DECL 6 struct sess_cert_st * sess_cert TYPE 7 struct sess_cert_st * TYPE_NAME 8 struct sess_cert_st LEAF_NODE 9 struct LEAF_NODE 9 sess_cert_st POINTER 8 * LEAF_NODE 9 * NAME 7 sess_cert LEAF_NODE 8 sess_cert LEAF_NODE 6 ; SIMPLE_DECL 5 X509 * peer ; VAR_DECL 6 X509 * peer TYPE 7 X509 * TYPE_NAME 8 X509 LEAF_NODE 9 X509 POINTER 8 * LEAF_NODE 9 * NAME 7 peer LEAF_NODE 8 peer LEAF_NODE 6 ; SIMPLE_DECL 5 long verify_result ; VAR_DECL 6 long verify_result TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 verify_result LEAF_NODE 8 verify_result LEAF_NODE 6 ; SIMPLE_DECL 5 int references ; VAR_DECL 6 int references TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 references LEAF_NODE 8 references LEAF_NODE 6 ; SIMPLE_DECL 5 long timeout ; VAR_DECL 6 long timeout TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 timeout LEAF_NODE 8 timeout LEAF_NODE 6 ; SIMPLE_DECL 5 long time ; VAR_DECL 6 long time TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 time LEAF_NODE 8 time LEAF_NODE 6 ; SIMPLE_DECL 5 const SSL_CIPHER * cipher ; VAR_DECL 6 const SSL_CIPHER * cipher TYPE 7 const SSL_CIPHER * TYPE_NAME 8 const SSL_CIPHER LEAF_NODE 9 const LEAF_NODE 9 SSL_CIPHER POINTER 8 * LEAF_NODE 9 * NAME 7 cipher LEAF_NODE 8 cipher LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long cipher_id ; VAR_DECL 6 unsigned long cipher_id TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 cipher_id LEAF_NODE 8 cipher_id LEAF_NODE 6 ; SIMPLE_DECL 5 CRYPTO_EX_DATA ex_data ; VAR_DECL 6 CRYPTO_EX_DATA ex_data TYPE 7 CRYPTO_EX_DATA TYPE_NAME 8 CRYPTO_EX_DATA LEAF_NODE 9 CRYPTO_EX_DATA NAME 7 ex_data LEAF_NODE 8 ex_data LEAF_NODE 6 ; SIMPLE_DECL 5 struct ssl_session_st * prev , struct ssl_session_st * next ; INIT_DECL_LIST 6 struct ssl_session_st * prev , struct ssl_session_st * next VAR_DECL 7 struct ssl_session_st * prev TYPE 8 struct ssl_session_st * TYPE_NAME 9 struct ssl_session_st LEAF_NODE 10 struct LEAF_NODE 10 ssl_session_st POINTER 9 * LEAF_NODE 10 * NAME 8 prev LEAF_NODE 9 prev LEAF_NODE 7 , VAR_DECL 7 struct ssl_session_st * next TYPE 8 struct ssl_session_st * TYPE_NAME 9 struct ssl_session_st LEAF_NODE 10 struct LEAF_NODE 10 ssl_session_st POINTER 9 * LEAF_NODE 10 * NAME 8 next LEAF_NODE 9 next LEAF_NODE 6 ; SIMPLE_DECL 5 char * tlsext_hostname ; VAR_DECL 6 char * tlsext_hostname TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 tlsext_hostname LEAF_NODE 8 tlsext_hostname LEAF_NODE 6 ; SIMPLE_DECL 5 uint8_t * tlsext_tick ; VAR_DECL 6 uint8_t * tlsext_tick TYPE 7 uint8_t * TYPE_NAME 8 uint8_t LEAF_NODE 9 uint8_t POINTER 8 * LEAF_NODE 9 * NAME 7 tlsext_tick LEAF_NODE 8 tlsext_tick LEAF_NODE 6 ; SIMPLE_DECL 5 size_t tlsext_ticklen ; VAR_DECL 6 size_t tlsext_ticklen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 tlsext_ticklen LEAF_NODE 8 tlsext_ticklen LEAF_NODE 6 ; SIMPLE_DECL 5 uint32_t tlsext_tick_lifetime_hint ; VAR_DECL 6 uint32_t tlsext_tick_lifetime_hint TYPE 7 uint32_t TYPE_NAME 8 uint32_t LEAF_NODE 9 uint32_t NAME 7 tlsext_tick_lifetime_hint LEAF_NODE 8 tlsext_tick_lifetime_hint LEAF_NODE 6 ; SIMPLE_DECL 5 size_t tlsext_signed_cert_timestamp_list_length ; VAR_DECL 6 size_t tlsext_signed_cert_timestamp_list_length TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 tlsext_signed_cert_timestamp_list_length LEAF_NODE 8 tlsext_signed_cert_timestamp_list_length LEAF_NODE 6 ; SIMPLE_DECL 5 uint8_t * tlsext_signed_cert_timestamp_list ; VAR_DECL 6 uint8_t * tlsext_signed_cert_timestamp_list TYPE 7 uint8_t * TYPE_NAME 8 uint8_t LEAF_NODE 9 uint8_t POINTER 8 * LEAF_NODE 9 * NAME 7 tlsext_signed_cert_timestamp_list LEAF_NODE 8 tlsext_signed_cert_timestamp_list LEAF_NODE 6 ; SIMPLE_DECL 5 size_t ocsp_response_length ; VAR_DECL 6 size_t ocsp_response_length TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 ocsp_response_length LEAF_NODE 8 ocsp_response_length LEAF_NODE 6 ; SIMPLE_DECL 5 uint8_t * ocsp_response ; VAR_DECL 6 uint8_t * ocsp_response TYPE 7 uint8_t * TYPE_NAME 8 uint8_t LEAF_NODE 9 uint8_t POINTER 8 * LEAF_NODE 9 * NAME 7 ocsp_response LEAF_NODE 8 ocsp_response LEAF_NODE 6 ; SIMPLE_DECL 5 char peer_sha256_valid ; VAR_DECL 6 char peer_sha256_valid TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 peer_sha256_valid LEAF_NODE 8 peer_sha256_valid LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ SHA256_DIGEST_LENGTH ] peer_sha256 ; VAR_DECL 6 unsigned char [ SHA256_DIGEST_LENGTH ] peer_sha256 TYPE 7 unsigned char [ SHA256_DIGEST_LENGTH ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ SHA256_DIGEST_LENGTH ] LEAF_NODE 9 [ FIELD 9 SHA256_DIGEST_LENGTH LEAF_NODE 10 SHA256_DIGEST_LENGTH LEAF_NODE 9 ] NAME 7 peer_sha256 LEAF_NODE 8 peer_sha256 LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ EVP_MAX_MD_SIZE ] original_handshake_hash ; VAR_DECL 6 unsigned char [ EVP_MAX_MD_SIZE ] original_handshake_hash TYPE 7 unsigned char [ EVP_MAX_MD_SIZE ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ EVP_MAX_MD_SIZE ] LEAF_NODE 9 [ FIELD 9 EVP_MAX_MD_SIZE LEAF_NODE 10 EVP_MAX_MD_SIZE LEAF_NODE 9 ] NAME 7 original_handshake_hash LEAF_NODE 8 original_handshake_hash LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int original_handshake_hash_len ; VAR_DECL 6 unsigned int original_handshake_hash_len TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 original_handshake_hash_len LEAF_NODE 8 original_handshake_hash_len LEAF_NODE 6 ; SIMPLE_DECL 5 char extended_master_secret ; VAR_DECL 6 char extended_master_secret TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 extended_master_secret LEAF_NODE 8 extended_master_secret LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl_session_st SSL_SESSION ; VAR_DECL 2 struct ssl_session_st SSL_SESSION TYPE 3 struct ssl_session_st TYPE_NAME 4 struct ssl_session_st LEAF_NODE 5 struct LEAF_NODE 5 ssl_session_st NAME 3 SSL_SESSION LEAF_NODE 4 SSL_SESSION LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl_st BASE_CLASSES { int version ; int type ; const SSL_METHOD * method ; BIO * rbio ; BIO * wbio ; BIO * bbio ; char * rbio ; char * wbio ; char * bbio ; int rwstate ; int in_handshake ; int ( * handshake_func ) ( SSL * ) ; int server ; int new_session ; int quiet_shutdown ; int shutdown ; int state ; int rstate ; BUF_MEM * init_buf ; uint8_t * init_msg ; int init_num ; int init_off ; unsigned char * packet ; unsigned int packet_length ; struct ssl2_state_st * s2 ; struct ssl3_state_st * s3 ; struct dtls1_state_st * d1 ; int read_ahead ; void ( * msg_callback ) ( int write_p , int version , int content_type , const void * buf , size_t len , SSL * ssl , void * arg ) ; void * msg_callback_arg ; int hit ; X509_VERIFY_PARAM * param ; int purpose ; int trust ; struct ssl_cipher_preference_list_st * cipher_list ; STACK_OF ( SSL_CIPHER ) * cipher_list_by_id ; SSL_AEAD_CTX * aead_read_ctx ; EVP_CIPHER_CTX * enc_read_ctx ; EVP_MD_CTX * read_hash ; SSL_AEAD_CTX * aead_write_ctx ; EVP_CIPHER_CTX * enc_write_ctx ; EVP_MD_CTX * write_hash ; struct cert_st * cert ; unsigned int sid_ctx_length ; unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; SSL_SESSION * session ; GEN_SESSION_CB generate_session_id ; int verify_mode ; int ( * verify_callback ) ( int ok , X509_STORE_CTX * ctx ) ; void ( * info_callback ) ( const SSL * ssl , int type , int val ) ; char * psk_identity_hint ; unsigned int ( * psk_client_callback ) ( SSL * ssl , const char * hint , char * identity , unsigned int max_identity_len , unsigned char * psk , unsigned int max_psk_len ) ; unsigned int ( * psk_server_callback ) ( SSL * ssl , const char * identity , unsigned char * psk , unsigned int max_psk_len ) ; SSL_CTX * ctx ; int debug ; long verify_result ; CRYPTO_EX_DATA ex_data ; STACK_OF ( X509_NAME ) * client_CA ; int references ; unsigned long options ; unsigned long mode ; long max_cert_list ; int first_packet ; int client_version ; unsigned int max_send_fragment ; void ( * tlsext_debug_cb ) ( SSL * s , int client_server , int type , unsigned char * data , int len , void * arg ) ; void * tlsext_debug_arg ; char * tlsext_hostname ; char should_ack_sni ; int tlsext_ticket_expected ; size_t tlsext_ecpointformatlist_length ; uint8_t * tlsext_ecpointformatlist ; size_t tlsext_ellipticcurvelist_length ; uint16_t * tlsext_ellipticcurvelist ; TLS_SESSION_TICKET_EXT * tlsext_session_ticket ; tls_session_ticket_ext_cb_fn tls_session_ticket_ext_cb ; void * tls_session_ticket_ext_cb_arg ; tls_session_secret_cb_fn tls_session_secret_cb ; void * tls_session_secret_cb_arg ; SSL_CTX * initial_ctx ; uint8_t * next_proto_negotiated ; size_t next_proto_negotiated_len ; STACK_OF ( SRTP_PROTECTION_PROFILE ) * srtp_profiles ; SRTP_PROTECTION_PROFILE * srtp_profile ; char tlsext_channel_id_enabled ; EVP_PKEY * tlsext_channel_id_private ; char signed_cert_timestamps_enabled ; char ocsp_stapling_enabled ; unsigned char * alpn_client_proto_list ; unsigned alpn_client_proto_list_len ; int renegotiate ; char fallback_scsv ; } ; CLASS_DEF 2 struct ssl_st BASE_CLASSES { int version ; int type ; const SSL_METHOD * method ; BIO * rbio ; BIO * wbio ; BIO * bbio ; char * rbio ; char * wbio ; char * bbio ; int rwstate ; int in_handshake ; int ( * handshake_func ) ( SSL * ) ; int server ; int new_session ; int quiet_shutdown ; int shutdown ; int state ; int rstate ; BUF_MEM * init_buf ; uint8_t * init_msg ; int init_num ; int init_off ; unsigned char * packet ; unsigned int packet_length ; struct ssl2_state_st * s2 ; struct ssl3_state_st * s3 ; struct dtls1_state_st * d1 ; int read_ahead ; void ( * msg_callback ) ( int write_p , int version , int content_type , const void * buf , size_t len , SSL * ssl , void * arg ) ; void * msg_callback_arg ; int hit ; X509_VERIFY_PARAM * param ; int purpose ; int trust ; struct ssl_cipher_preference_list_st * cipher_list ; STACK_OF ( SSL_CIPHER ) * cipher_list_by_id ; SSL_AEAD_CTX * aead_read_ctx ; EVP_CIPHER_CTX * enc_read_ctx ; EVP_MD_CTX * read_hash ; SSL_AEAD_CTX * aead_write_ctx ; EVP_CIPHER_CTX * enc_write_ctx ; EVP_MD_CTX * write_hash ; struct cert_st * cert ; unsigned int sid_ctx_length ; unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; SSL_SESSION * session ; GEN_SESSION_CB generate_session_id ; int verify_mode ; int ( * verify_callback ) ( int ok , X509_STORE_CTX * ctx ) ; void ( * info_callback ) ( const SSL * ssl , int type , int val ) ; char * psk_identity_hint ; unsigned int ( * psk_client_callback ) ( SSL * ssl , const char * hint , char * identity , unsigned int max_identity_len , unsigned char * psk , unsigned int max_psk_len ) ; unsigned int ( * psk_server_callback ) ( SSL * ssl , const char * identity , unsigned char * psk , unsigned int max_psk_len ) ; SSL_CTX * ctx ; int debug ; long verify_result ; CRYPTO_EX_DATA ex_data ; STACK_OF ( X509_NAME ) * client_CA ; int references ; unsigned long options ; unsigned long mode ; long max_cert_list ; int first_packet ; int client_version ; unsigned int max_send_fragment ; void ( * tlsext_debug_cb ) ( SSL * s , int client_server , int type , unsigned char * data , int len , void * arg ) ; void * tlsext_debug_arg ; char * tlsext_hostname ; char should_ack_sni ; int tlsext_ticket_expected ; size_t tlsext_ecpointformatlist_length ; uint8_t * tlsext_ecpointformatlist ; size_t tlsext_ellipticcurvelist_length ; uint16_t * tlsext_ellipticcurvelist ; TLS_SESSION_TICKET_EXT * tlsext_session_ticket ; tls_session_ticket_ext_cb_fn tls_session_ticket_ext_cb ; void * tls_session_ticket_ext_cb_arg ; tls_session_secret_cb_fn tls_session_secret_cb ; void * tls_session_secret_cb_arg ; SSL_CTX * initial_ctx ; uint8_t * next_proto_negotiated ; size_t next_proto_negotiated_len ; STACK_OF ( SRTP_PROTECTION_PROFILE ) * srtp_profiles ; SRTP_PROTECTION_PROFILE * srtp_profile ; char tlsext_channel_id_enabled ; EVP_PKEY * tlsext_channel_id_private ; char signed_cert_timestamps_enabled ; char ocsp_stapling_enabled ; unsigned char * alpn_client_proto_list ; unsigned alpn_client_proto_list_len ; int renegotiate ; char fallback_scsv ; } CLASS_DEF 3 struct ssl_st BASE_CLASSES { int version ; int type ; const SSL_METHOD * method ; BIO * rbio ; BIO * wbio ; BIO * bbio ; char * rbio ; char * wbio ; char * bbio ; int rwstate ; int in_handshake ; int ( * handshake_func ) ( SSL * ) ; int server ; int new_session ; int quiet_shutdown ; int shutdown ; int state ; int rstate ; BUF_MEM * init_buf ; uint8_t * init_msg ; int init_num ; int init_off ; unsigned char * packet ; unsigned int packet_length ; struct ssl2_state_st * s2 ; struct ssl3_state_st * s3 ; struct dtls1_state_st * d1 ; int read_ahead ; void ( * msg_callback ) ( int write_p , int version , int content_type , const void * buf , size_t len , SSL * ssl , void * arg ) ; void * msg_callback_arg ; int hit ; X509_VERIFY_PARAM * param ; int purpose ; int trust ; struct ssl_cipher_preference_list_st * cipher_list ; STACK_OF ( SSL_CIPHER ) * cipher_list_by_id ; SSL_AEAD_CTX * aead_read_ctx ; EVP_CIPHER_CTX * enc_read_ctx ; EVP_MD_CTX * read_hash ; SSL_AEAD_CTX * aead_write_ctx ; EVP_CIPHER_CTX * enc_write_ctx ; EVP_MD_CTX * write_hash ; struct cert_st * cert ; unsigned int sid_ctx_length ; unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; SSL_SESSION * session ; GEN_SESSION_CB generate_session_id ; int verify_mode ; int ( * verify_callback ) ( int ok , X509_STORE_CTX * ctx ) ; void ( * info_callback ) ( const SSL * ssl , int type , int val ) ; char * psk_identity_hint ; unsigned int ( * psk_client_callback ) ( SSL * ssl , const char * hint , char * identity , unsigned int max_identity_len , unsigned char * psk , unsigned int max_psk_len ) ; unsigned int ( * psk_server_callback ) ( SSL * ssl , const char * identity , unsigned char * psk , unsigned int max_psk_len ) ; SSL_CTX * ctx ; int debug ; long verify_result ; CRYPTO_EX_DATA ex_data ; STACK_OF ( X509_NAME ) * client_CA ; int references ; unsigned long options ; unsigned long mode ; long max_cert_list ; int first_packet ; int client_version ; unsigned int max_send_fragment ; void ( * tlsext_debug_cb ) ( SSL * s , int client_server , int type , unsigned char * data , int len , void * arg ) ; void * tlsext_debug_arg ; char * tlsext_hostname ; char should_ack_sni ; int tlsext_ticket_expected ; size_t tlsext_ecpointformatlist_length ; uint8_t * tlsext_ecpointformatlist ; size_t tlsext_ellipticcurvelist_length ; uint16_t * tlsext_ellipticcurvelist ; TLS_SESSION_TICKET_EXT * tlsext_session_ticket ; tls_session_ticket_ext_cb_fn tls_session_ticket_ext_cb ; void * tls_session_ticket_ext_cb_arg ; tls_session_secret_cb_fn tls_session_secret_cb ; void * tls_session_secret_cb_arg ; SSL_CTX * initial_ctx ; uint8_t * next_proto_negotiated ; size_t next_proto_negotiated_len ; STACK_OF ( SRTP_PROTECTION_PROFILE ) * srtp_profiles ; SRTP_PROTECTION_PROFILE * srtp_profile ; char tlsext_channel_id_enabled ; EVP_PKEY * tlsext_channel_id_private ; char signed_cert_timestamps_enabled ; char ocsp_stapling_enabled ; unsigned char * alpn_client_proto_list ; unsigned alpn_client_proto_list_len ; int renegotiate ; char fallback_scsv ; } LEAF_NODE 4 struct CLASS_NAME 4 ssl_st LEAF_NODE 5 ssl_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int version ; int type ; const SSL_METHOD * method ; BIO * rbio ; BIO * wbio ; BIO * bbio ; char * rbio ; char * wbio ; char * bbio ; int rwstate ; int in_handshake ; int ( * handshake_func ) ( SSL * ) ; int server ; int new_session ; int quiet_shutdown ; int shutdown ; int state ; int rstate ; BUF_MEM * init_buf ; uint8_t * init_msg ; int init_num ; int init_off ; unsigned char * packet ; unsigned int packet_length ; struct ssl2_state_st * s2 ; struct ssl3_state_st * s3 ; struct dtls1_state_st * d1 ; int read_ahead ; void ( * msg_callback ) ( int write_p , int version , int content_type , const void * buf , size_t len , SSL * ssl , void * arg ) ; void * msg_callback_arg ; int hit ; X509_VERIFY_PARAM * param ; int purpose ; int trust ; struct ssl_cipher_preference_list_st * cipher_list ; STACK_OF ( SSL_CIPHER ) * cipher_list_by_id ; SSL_AEAD_CTX * aead_read_ctx ; EVP_CIPHER_CTX * enc_read_ctx ; EVP_MD_CTX * read_hash ; SSL_AEAD_CTX * aead_write_ctx ; EVP_CIPHER_CTX * enc_write_ctx ; EVP_MD_CTX * write_hash ; struct cert_st * cert ; unsigned int sid_ctx_length ; unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; SSL_SESSION * session ; GEN_SESSION_CB generate_session_id ; int verify_mode ; int ( * verify_callback ) ( int ok , X509_STORE_CTX * ctx ) ; void ( * info_callback ) ( const SSL * ssl , int type , int val ) ; char * psk_identity_hint ; unsigned int ( * psk_client_callback ) ( SSL * ssl , const char * hint , char * identity , unsigned int max_identity_len , unsigned char * psk , unsigned int max_psk_len ) ; unsigned int ( * psk_server_callback ) ( SSL * ssl , const char * identity , unsigned char * psk , unsigned int max_psk_len ) ; SSL_CTX * ctx ; int debug ; long verify_result ; CRYPTO_EX_DATA ex_data ; STACK_OF ( X509_NAME ) * client_CA ; int references ; unsigned long options ; unsigned long mode ; long max_cert_list ; int first_packet ; int client_version ; unsigned int max_send_fragment ; void ( * tlsext_debug_cb ) ( SSL * s , int client_server , int type , unsigned char * data , int len , void * arg ) ; void * tlsext_debug_arg ; char * tlsext_hostname ; char should_ack_sni ; int tlsext_ticket_expected ; size_t tlsext_ecpointformatlist_length ; uint8_t * tlsext_ecpointformatlist ; size_t tlsext_ellipticcurvelist_length ; uint16_t * tlsext_ellipticcurvelist ; TLS_SESSION_TICKET_EXT * tlsext_session_ticket ; tls_session_ticket_ext_cb_fn tls_session_ticket_ext_cb ; void * tls_session_ticket_ext_cb_arg ; tls_session_secret_cb_fn tls_session_secret_cb ; void * tls_session_secret_cb_arg ; SSL_CTX * initial_ctx ; uint8_t * next_proto_negotiated ; size_t next_proto_negotiated_len ; STACK_OF ( SRTP_PROTECTION_PROFILE ) * srtp_profiles ; SRTP_PROTECTION_PROFILE * srtp_profile ; char tlsext_channel_id_enabled ; EVP_PKEY * tlsext_channel_id_private ; char signed_cert_timestamps_enabled ; char ocsp_stapling_enabled ; unsigned char * alpn_client_proto_list ; unsigned alpn_client_proto_list_len ; int renegotiate ; char fallback_scsv ; SIMPLE_DECL 5 int version ; VAR_DECL 6 int version TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 version LEAF_NODE 8 version LEAF_NODE 6 ; SIMPLE_DECL 5 int type ; VAR_DECL 6 int type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 type LEAF_NODE 8 type LEAF_NODE 6 ; SIMPLE_DECL 5 const SSL_METHOD * method ; VAR_DECL 6 const SSL_METHOD * method TYPE 7 const SSL_METHOD * TYPE_NAME 8 const SSL_METHOD LEAF_NODE 9 const LEAF_NODE 9 SSL_METHOD POINTER 8 * LEAF_NODE 9 * NAME 7 method LEAF_NODE 8 method LEAF_NODE 6 ; SIMPLE_DECL 5 BIO * rbio ; VAR_DECL 6 BIO * rbio TYPE 7 BIO * TYPE_NAME 8 BIO LEAF_NODE 9 BIO POINTER 8 * LEAF_NODE 9 * NAME 7 rbio LEAF_NODE 8 rbio LEAF_NODE 6 ; SIMPLE_DECL 5 BIO * wbio ; VAR_DECL 6 BIO * wbio TYPE 7 BIO * TYPE_NAME 8 BIO LEAF_NODE 9 BIO POINTER 8 * LEAF_NODE 9 * NAME 7 wbio LEAF_NODE 8 wbio LEAF_NODE 6 ; SIMPLE_DECL 5 BIO * bbio ; VAR_DECL 6 BIO * bbio TYPE 7 BIO * TYPE_NAME 8 BIO LEAF_NODE 9 BIO POINTER 8 * LEAF_NODE 9 * NAME 7 bbio LEAF_NODE 8 bbio LEAF_NODE 6 ; SIMPLE_DECL 5 char * rbio ; VAR_DECL 6 char * rbio TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 rbio LEAF_NODE 8 rbio LEAF_NODE 6 ; SIMPLE_DECL 5 char * wbio ; VAR_DECL 6 char * wbio TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 wbio LEAF_NODE 8 wbio LEAF_NODE 6 ; SIMPLE_DECL 5 char * bbio ; VAR_DECL 6 char * bbio TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 bbio LEAF_NODE 8 bbio LEAF_NODE 6 ; SIMPLE_DECL 5 int rwstate ; VAR_DECL 6 int rwstate TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rwstate LEAF_NODE 8 rwstate LEAF_NODE 6 ; SIMPLE_DECL 5 int in_handshake ; VAR_DECL 6 int in_handshake TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 in_handshake LEAF_NODE 8 in_handshake LEAF_NODE 6 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 handshake_func LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 int server ; VAR_DECL 6 int server TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 server LEAF_NODE 8 server LEAF_NODE 6 ; SIMPLE_DECL 5 int new_session ; VAR_DECL 6 int new_session TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 new_session LEAF_NODE 8 new_session LEAF_NODE 6 ; SIMPLE_DECL 5 int quiet_shutdown ; VAR_DECL 6 int quiet_shutdown TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 quiet_shutdown LEAF_NODE 8 quiet_shutdown LEAF_NODE 6 ; SIMPLE_DECL 5 int shutdown ; VAR_DECL 6 int shutdown TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 shutdown LEAF_NODE 8 shutdown LEAF_NODE 6 ; SIMPLE_DECL 5 int state ; VAR_DECL 6 int state TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 int rstate ; VAR_DECL 6 int rstate TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rstate LEAF_NODE 8 rstate LEAF_NODE 6 ; SIMPLE_DECL 5 BUF_MEM * init_buf ; VAR_DECL 6 BUF_MEM * init_buf TYPE 7 BUF_MEM * TYPE_NAME 8 BUF_MEM LEAF_NODE 9 BUF_MEM POINTER 8 * LEAF_NODE 9 * NAME 7 init_buf LEAF_NODE 8 init_buf LEAF_NODE 6 ; SIMPLE_DECL 5 uint8_t * init_msg ; VAR_DECL 6 uint8_t * init_msg TYPE 7 uint8_t * TYPE_NAME 8 uint8_t LEAF_NODE 9 uint8_t POINTER 8 * LEAF_NODE 9 * NAME 7 init_msg LEAF_NODE 8 init_msg LEAF_NODE 6 ; SIMPLE_DECL 5 int init_num ; VAR_DECL 6 int init_num TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 init_num LEAF_NODE 8 init_num LEAF_NODE 6 ; SIMPLE_DECL 5 int init_off ; VAR_DECL 6 int init_off TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 init_off LEAF_NODE 8 init_off LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * packet ; VAR_DECL 6 unsigned char * packet TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 packet LEAF_NODE 8 packet LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int packet_length ; VAR_DECL 6 unsigned int packet_length TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 packet_length LEAF_NODE 8 packet_length LEAF_NODE 6 ; SIMPLE_DECL 5 struct ssl2_state_st * s2 ; VAR_DECL 6 struct ssl2_state_st * s2 TYPE 7 struct ssl2_state_st * TYPE_NAME 8 struct ssl2_state_st LEAF_NODE 9 struct LEAF_NODE 9 ssl2_state_st POINTER 8 * LEAF_NODE 9 * NAME 7 s2 LEAF_NODE 8 s2 LEAF_NODE 6 ; SIMPLE_DECL 5 struct ssl3_state_st * s3 ; VAR_DECL 6 struct ssl3_state_st * s3 TYPE 7 struct ssl3_state_st * TYPE_NAME 8 struct ssl3_state_st LEAF_NODE 9 struct LEAF_NODE 9 ssl3_state_st POINTER 8 * LEAF_NODE 9 * NAME 7 s3 LEAF_NODE 8 s3 LEAF_NODE 6 ; SIMPLE_DECL 5 struct dtls1_state_st * d1 ; VAR_DECL 6 struct dtls1_state_st * d1 TYPE 7 struct dtls1_state_st * TYPE_NAME 8 struct dtls1_state_st LEAF_NODE 9 struct LEAF_NODE 9 dtls1_state_st POINTER 8 * LEAF_NODE 9 * NAME 7 d1 LEAF_NODE 8 d1 LEAF_NODE 6 ; SIMPLE_DECL 5 int read_ahead ; VAR_DECL 6 int read_ahead TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 read_ahead LEAF_NODE 8 read_ahead LEAF_NODE 6 ; LEAF_NODE 5 void LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 msg_callback LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 int LEAF_NODE 5 write_p LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 version LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 content_type LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 void LEAF_NODE 5 * LEAF_NODE 5 buf LEAF_NODE 5 , LEAF_NODE 5 size_t LEAF_NODE 5 len LEAF_NODE 5 , LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 ssl LEAF_NODE 5 , LEAF_NODE 5 void LEAF_NODE 5 * LEAF_NODE 5 arg LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 void * msg_callback_arg ; VAR_DECL 6 void * msg_callback_arg TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 msg_callback_arg LEAF_NODE 8 msg_callback_arg LEAF_NODE 6 ; SIMPLE_DECL 5 int hit ; VAR_DECL 6 int hit TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 hit LEAF_NODE 8 hit LEAF_NODE 6 ; SIMPLE_DECL 5 X509_VERIFY_PARAM * param ; VAR_DECL 6 X509_VERIFY_PARAM * param TYPE 7 X509_VERIFY_PARAM * TYPE_NAME 8 X509_VERIFY_PARAM LEAF_NODE 9 X509_VERIFY_PARAM POINTER 8 * LEAF_NODE 9 * NAME 7 param LEAF_NODE 8 param LEAF_NODE 6 ; SIMPLE_DECL 5 int purpose ; VAR_DECL 6 int purpose TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 purpose LEAF_NODE 8 purpose LEAF_NODE 6 ; SIMPLE_DECL 5 int trust ; VAR_DECL 6 int trust TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 trust LEAF_NODE 8 trust LEAF_NODE 6 ; SIMPLE_DECL 5 struct ssl_cipher_preference_list_st * cipher_list ; VAR_DECL 6 struct ssl_cipher_preference_list_st * cipher_list TYPE 7 struct ssl_cipher_preference_list_st * TYPE_NAME 8 struct ssl_cipher_preference_list_st LEAF_NODE 9 struct LEAF_NODE 9 ssl_cipher_preference_list_st POINTER 8 * LEAF_NODE 9 * NAME 7 cipher_list LEAF_NODE 8 cipher_list LEAF_NODE 6 ; LEAF_NODE 5 STACK_OF LEAF_NODE 5 ( LEAF_NODE 5 SSL_CIPHER LEAF_NODE 5 ) LEAF_NODE 5 * LEAF_NODE 5 cipher_list_by_id LEAF_NODE 5 ; SIMPLE_DECL 5 SSL_AEAD_CTX * aead_read_ctx ; VAR_DECL 6 SSL_AEAD_CTX * aead_read_ctx TYPE 7 SSL_AEAD_CTX * TYPE_NAME 8 SSL_AEAD_CTX LEAF_NODE 9 SSL_AEAD_CTX POINTER 8 * LEAF_NODE 9 * NAME 7 aead_read_ctx LEAF_NODE 8 aead_read_ctx LEAF_NODE 6 ; SIMPLE_DECL 5 EVP_CIPHER_CTX * enc_read_ctx ; VAR_DECL 6 EVP_CIPHER_CTX * enc_read_ctx TYPE 7 EVP_CIPHER_CTX * TYPE_NAME 8 EVP_CIPHER_CTX LEAF_NODE 9 EVP_CIPHER_CTX POINTER 8 * LEAF_NODE 9 * NAME 7 enc_read_ctx LEAF_NODE 8 enc_read_ctx LEAF_NODE 6 ; SIMPLE_DECL 5 EVP_MD_CTX * read_hash ; VAR_DECL 6 EVP_MD_CTX * read_hash TYPE 7 EVP_MD_CTX * TYPE_NAME 8 EVP_MD_CTX LEAF_NODE 9 EVP_MD_CTX POINTER 8 * LEAF_NODE 9 * NAME 7 read_hash LEAF_NODE 8 read_hash LEAF_NODE 6 ; SIMPLE_DECL 5 SSL_AEAD_CTX * aead_write_ctx ; VAR_DECL 6 SSL_AEAD_CTX * aead_write_ctx TYPE 7 SSL_AEAD_CTX * TYPE_NAME 8 SSL_AEAD_CTX LEAF_NODE 9 SSL_AEAD_CTX POINTER 8 * LEAF_NODE 9 * NAME 7 aead_write_ctx LEAF_NODE 8 aead_write_ctx LEAF_NODE 6 ; SIMPLE_DECL 5 EVP_CIPHER_CTX * enc_write_ctx ; VAR_DECL 6 EVP_CIPHER_CTX * enc_write_ctx TYPE 7 EVP_CIPHER_CTX * TYPE_NAME 8 EVP_CIPHER_CTX LEAF_NODE 9 EVP_CIPHER_CTX POINTER 8 * LEAF_NODE 9 * NAME 7 enc_write_ctx LEAF_NODE 8 enc_write_ctx LEAF_NODE 6 ; SIMPLE_DECL 5 EVP_MD_CTX * write_hash ; VAR_DECL 6 EVP_MD_CTX * write_hash TYPE 7 EVP_MD_CTX * TYPE_NAME 8 EVP_MD_CTX LEAF_NODE 9 EVP_MD_CTX POINTER 8 * LEAF_NODE 9 * NAME 7 write_hash LEAF_NODE 8 write_hash LEAF_NODE 6 ; SIMPLE_DECL 5 struct cert_st * cert ; VAR_DECL 6 struct cert_st * cert TYPE 7 struct cert_st * TYPE_NAME 8 struct cert_st LEAF_NODE 9 struct LEAF_NODE 9 cert_st POINTER 8 * LEAF_NODE 9 * NAME 7 cert LEAF_NODE 8 cert LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int sid_ctx_length ; VAR_DECL 6 unsigned int sid_ctx_length TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 sid_ctx_length LEAF_NODE 8 sid_ctx_length LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; VAR_DECL 6 unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx TYPE 7 unsigned char [ SSL_MAX_SID_CTX_LENGTH ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ SSL_MAX_SID_CTX_LENGTH ] LEAF_NODE 9 [ FIELD 9 SSL_MAX_SID_CTX_LENGTH LEAF_NODE 10 SSL_MAX_SID_CTX_LENGTH LEAF_NODE 9 ] NAME 7 sid_ctx LEAF_NODE 8 sid_ctx LEAF_NODE 6 ; SIMPLE_DECL 5 SSL_SESSION * session ; VAR_DECL 6 SSL_SESSION * session TYPE 7 SSL_SESSION * TYPE_NAME 8 SSL_SESSION LEAF_NODE 9 SSL_SESSION POINTER 8 * LEAF_NODE 9 * NAME 7 session LEAF_NODE 8 session LEAF_NODE 6 ; SIMPLE_DECL 5 GEN_SESSION_CB generate_session_id ; VAR_DECL 6 GEN_SESSION_CB generate_session_id TYPE 7 GEN_SESSION_CB TYPE_NAME 8 GEN_SESSION_CB LEAF_NODE 9 GEN_SESSION_CB NAME 7 generate_session_id LEAF_NODE 8 generate_session_id LEAF_NODE 6 ; SIMPLE_DECL 5 int verify_mode ; VAR_DECL 6 int verify_mode TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 verify_mode LEAF_NODE 8 verify_mode LEAF_NODE 6 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 verify_callback LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 int LEAF_NODE 5 ok LEAF_NODE 5 , LEAF_NODE 5 X509_STORE_CTX LEAF_NODE 5 * LEAF_NODE 5 ctx LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 void LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 info_callback LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 const LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 ssl LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 type LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 val LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char * psk_identity_hint ; VAR_DECL 6 char * psk_identity_hint TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 psk_identity_hint LEAF_NODE 8 psk_identity_hint LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 psk_client_callback LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 ssl LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 hint LEAF_NODE 5 , LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 identity LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 int LEAF_NODE 5 max_identity_len LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 psk LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 int LEAF_NODE 5 max_psk_len LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 psk_server_callback LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 ssl LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 identity LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 psk LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 int LEAF_NODE 5 max_psk_len LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 SSL_CTX * ctx ; VAR_DECL 6 SSL_CTX * ctx TYPE 7 SSL_CTX * TYPE_NAME 8 SSL_CTX LEAF_NODE 9 SSL_CTX POINTER 8 * LEAF_NODE 9 * NAME 7 ctx LEAF_NODE 8 ctx LEAF_NODE 6 ; SIMPLE_DECL 5 int debug ; VAR_DECL 6 int debug TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 debug LEAF_NODE 8 debug LEAF_NODE 6 ; SIMPLE_DECL 5 long verify_result ; VAR_DECL 6 long verify_result TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 verify_result LEAF_NODE 8 verify_result LEAF_NODE 6 ; SIMPLE_DECL 5 CRYPTO_EX_DATA ex_data ; VAR_DECL 6 CRYPTO_EX_DATA ex_data TYPE 7 CRYPTO_EX_DATA TYPE_NAME 8 CRYPTO_EX_DATA LEAF_NODE 9 CRYPTO_EX_DATA NAME 7 ex_data LEAF_NODE 8 ex_data LEAF_NODE 6 ; LEAF_NODE 5 STACK_OF LEAF_NODE 5 ( LEAF_NODE 5 X509_NAME LEAF_NODE 5 ) LEAF_NODE 5 * LEAF_NODE 5 client_CA LEAF_NODE 5 ; SIMPLE_DECL 5 int references ; VAR_DECL 6 int references TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 references LEAF_NODE 8 references LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long options ; VAR_DECL 6 unsigned long options TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 options LEAF_NODE 8 options LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long mode ; VAR_DECL 6 unsigned long mode TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 mode LEAF_NODE 8 mode LEAF_NODE 6 ; SIMPLE_DECL 5 long max_cert_list ; VAR_DECL 6 long max_cert_list TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 max_cert_list LEAF_NODE 8 max_cert_list LEAF_NODE 6 ; SIMPLE_DECL 5 int first_packet ; VAR_DECL 6 int first_packet TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 first_packet LEAF_NODE 8 first_packet LEAF_NODE 6 ; SIMPLE_DECL 5 int client_version ; VAR_DECL 6 int client_version TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 client_version LEAF_NODE 8 client_version LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int max_send_fragment ; VAR_DECL 6 unsigned int max_send_fragment TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 max_send_fragment LEAF_NODE 8 max_send_fragment LEAF_NODE 6 ; LEAF_NODE 5 void LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 tlsext_debug_cb LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 s LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 client_server LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 type LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 data LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 len LEAF_NODE 5 , LEAF_NODE 5 void LEAF_NODE 5 * LEAF_NODE 5 arg LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 void * tlsext_debug_arg ; VAR_DECL 6 void * tlsext_debug_arg TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 tlsext_debug_arg LEAF_NODE 8 tlsext_debug_arg LEAF_NODE 6 ; SIMPLE_DECL 5 char * tlsext_hostname ; VAR_DECL 6 char * tlsext_hostname TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 tlsext_hostname LEAF_NODE 8 tlsext_hostname LEAF_NODE 6 ; SIMPLE_DECL 5 char should_ack_sni ; VAR_DECL 6 char should_ack_sni TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 should_ack_sni LEAF_NODE 8 should_ack_sni LEAF_NODE 6 ; SIMPLE_DECL 5 int tlsext_ticket_expected ; VAR_DECL 6 int tlsext_ticket_expected TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 tlsext_ticket_expected LEAF_NODE 8 tlsext_ticket_expected LEAF_NODE 6 ; SIMPLE_DECL 5 size_t tlsext_ecpointformatlist_length ; VAR_DECL 6 size_t tlsext_ecpointformatlist_length TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 tlsext_ecpointformatlist_length LEAF_NODE 8 tlsext_ecpointformatlist_length LEAF_NODE 6 ; SIMPLE_DECL 5 uint8_t * tlsext_ecpointformatlist ; VAR_DECL 6 uint8_t * tlsext_ecpointformatlist TYPE 7 uint8_t * TYPE_NAME 8 uint8_t LEAF_NODE 9 uint8_t POINTER 8 * LEAF_NODE 9 * NAME 7 tlsext_ecpointformatlist LEAF_NODE 8 tlsext_ecpointformatlist LEAF_NODE 6 ; SIMPLE_DECL 5 size_t tlsext_ellipticcurvelist_length ; VAR_DECL 6 size_t tlsext_ellipticcurvelist_length TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 tlsext_ellipticcurvelist_length LEAF_NODE 8 tlsext_ellipticcurvelist_length LEAF_NODE 6 ; SIMPLE_DECL 5 uint16_t * tlsext_ellipticcurvelist ; VAR_DECL 6 uint16_t * tlsext_ellipticcurvelist TYPE 7 uint16_t * TYPE_NAME 8 uint16_t LEAF_NODE 9 uint16_t POINTER 8 * LEAF_NODE 9 * NAME 7 tlsext_ellipticcurvelist LEAF_NODE 8 tlsext_ellipticcurvelist LEAF_NODE 6 ; SIMPLE_DECL 5 TLS_SESSION_TICKET_EXT * tlsext_session_ticket ; VAR_DECL 6 TLS_SESSION_TICKET_EXT * tlsext_session_ticket TYPE 7 TLS_SESSION_TICKET_EXT * TYPE_NAME 8 TLS_SESSION_TICKET_EXT LEAF_NODE 9 TLS_SESSION_TICKET_EXT POINTER 8 * LEAF_NODE 9 * NAME 7 tlsext_session_ticket LEAF_NODE 8 tlsext_session_ticket LEAF_NODE 6 ; SIMPLE_DECL 5 tls_session_ticket_ext_cb_fn tls_session_ticket_ext_cb ; VAR_DECL 6 tls_session_ticket_ext_cb_fn tls_session_ticket_ext_cb TYPE 7 tls_session_ticket_ext_cb_fn TYPE_NAME 8 tls_session_ticket_ext_cb_fn LEAF_NODE 9 tls_session_ticket_ext_cb_fn NAME 7 tls_session_ticket_ext_cb LEAF_NODE 8 tls_session_ticket_ext_cb LEAF_NODE 6 ; SIMPLE_DECL 5 void * tls_session_ticket_ext_cb_arg ; VAR_DECL 6 void * tls_session_ticket_ext_cb_arg TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 tls_session_ticket_ext_cb_arg LEAF_NODE 8 tls_session_ticket_ext_cb_arg LEAF_NODE 6 ; SIMPLE_DECL 5 tls_session_secret_cb_fn tls_session_secret_cb ; VAR_DECL 6 tls_session_secret_cb_fn tls_session_secret_cb TYPE 7 tls_session_secret_cb_fn TYPE_NAME 8 tls_session_secret_cb_fn LEAF_NODE 9 tls_session_secret_cb_fn NAME 7 tls_session_secret_cb LEAF_NODE 8 tls_session_secret_cb LEAF_NODE 6 ; SIMPLE_DECL 5 void * tls_session_secret_cb_arg ; VAR_DECL 6 void * tls_session_secret_cb_arg TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 tls_session_secret_cb_arg LEAF_NODE 8 tls_session_secret_cb_arg LEAF_NODE 6 ; SIMPLE_DECL 5 SSL_CTX * initial_ctx ; VAR_DECL 6 SSL_CTX * initial_ctx TYPE 7 SSL_CTX * TYPE_NAME 8 SSL_CTX LEAF_NODE 9 SSL_CTX POINTER 8 * LEAF_NODE 9 * NAME 7 initial_ctx LEAF_NODE 8 initial_ctx LEAF_NODE 6 ; SIMPLE_DECL 5 uint8_t * next_proto_negotiated ; VAR_DECL 6 uint8_t * next_proto_negotiated TYPE 7 uint8_t * TYPE_NAME 8 uint8_t LEAF_NODE 9 uint8_t POINTER 8 * LEAF_NODE 9 * NAME 7 next_proto_negotiated LEAF_NODE 8 next_proto_negotiated LEAF_NODE 6 ; SIMPLE_DECL 5 size_t next_proto_negotiated_len ; VAR_DECL 6 size_t next_proto_negotiated_len TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 next_proto_negotiated_len LEAF_NODE 8 next_proto_negotiated_len LEAF_NODE 6 ; LEAF_NODE 5 STACK_OF LEAF_NODE 5 ( LEAF_NODE 5 SRTP_PROTECTION_PROFILE LEAF_NODE 5 ) LEAF_NODE 5 * LEAF_NODE 5 srtp_profiles LEAF_NODE 5 ; SIMPLE_DECL 5 SRTP_PROTECTION_PROFILE * srtp_profile ; VAR_DECL 6 SRTP_PROTECTION_PROFILE * srtp_profile TYPE 7 SRTP_PROTECTION_PROFILE * TYPE_NAME 8 SRTP_PROTECTION_PROFILE LEAF_NODE 9 SRTP_PROTECTION_PROFILE POINTER 8 * LEAF_NODE 9 * NAME 7 srtp_profile LEAF_NODE 8 srtp_profile LEAF_NODE 6 ; SIMPLE_DECL 5 char tlsext_channel_id_enabled ; VAR_DECL 6 char tlsext_channel_id_enabled TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 tlsext_channel_id_enabled LEAF_NODE 8 tlsext_channel_id_enabled LEAF_NODE 6 ; SIMPLE_DECL 5 EVP_PKEY * tlsext_channel_id_private ; VAR_DECL 6 EVP_PKEY * tlsext_channel_id_private TYPE 7 EVP_PKEY * TYPE_NAME 8 EVP_PKEY LEAF_NODE 9 EVP_PKEY POINTER 8 * LEAF_NODE 9 * NAME 7 tlsext_channel_id_private LEAF_NODE 8 tlsext_channel_id_private LEAF_NODE 6 ; SIMPLE_DECL 5 char signed_cert_timestamps_enabled ; VAR_DECL 6 char signed_cert_timestamps_enabled TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 signed_cert_timestamps_enabled LEAF_NODE 8 signed_cert_timestamps_enabled LEAF_NODE 6 ; SIMPLE_DECL 5 char ocsp_stapling_enabled ; VAR_DECL 6 char ocsp_stapling_enabled TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 ocsp_stapling_enabled LEAF_NODE 8 ocsp_stapling_enabled LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * alpn_client_proto_list ; VAR_DECL 6 unsigned char * alpn_client_proto_list TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 alpn_client_proto_list LEAF_NODE 8 alpn_client_proto_list LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 alpn_client_proto_list_len LEAF_NODE 5 ; SIMPLE_DECL 5 int renegotiate ; VAR_DECL 6 int renegotiate TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 renegotiate LEAF_NODE 8 renegotiate LEAF_NODE 6 ; SIMPLE_DECL 5 char fallback_scsv ; VAR_DECL 6 char fallback_scsv TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 fallback_scsv LEAF_NODE 8 fallback_scsv LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl_st SSL ; VAR_DECL 2 struct ssl_st SSL TYPE 3 struct ssl_st TYPE_NAME 4 struct ssl_st LEAF_NODE 5 struct LEAF_NODE 5 ssl_st NAME 3 SSL LEAF_NODE 4 SSL LEAF_NODE 2 ; SIMPLE_DECL 1 long l ; VAR_DECL 2 long l TYPE 3 long TYPE_NAME 4 long LEAF_NODE 5 long NAME 3 l LEAF_NODE 4 l LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 get_server_hello LEAF_NODE 3 get_server_hello PARAMETER_LIST 2 ( SSL * s ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned char * buf ; VAR_DECL 4 unsigned char * buf TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 buf LEAF_NODE 6 buf LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * p ; VAR_DECL 4 unsigned char * p TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 4 ; SIMPLE_DECL 3 int i , int j ; INIT_DECL_LIST 4 int i , int j VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 , VAR_DECL 5 int j TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 j LEAF_NODE 7 j LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned long len ; VAR_DECL 4 unsigned long len TYPE 5 unsigned long TYPE_NAME 6 unsigned long LEAF_NODE 7 unsigned LEAF_NODE 7 long NAME 5 len LEAF_NODE 6 len LEAF_NODE 4 ; LEAF_NODE 3 STACK_OF LEAF_NODE 3 ( LEAF_NODE 3 SSL_CIPHER LEAF_NODE 3 ) LEAF_NODE 3 * LEAF_NODE 3 sk LEAF_NODE 3 = LEAF_NODE 3 NULL LEAF_NODE 3 , LEAF_NODE 3 * LEAF_NODE 3 cl LEAF_NODE 3 , EXPR_STATEMENT 3 * prio , * allow ; EXPR 4 * prio , * allow UNARY_EXPR 5 * prio UNARY_OPERATOR 6 * LEAF_NODE 7 * FIELD 6 prio LEAF_NODE 7 prio LEAF_NODE 5 , UNARY_EXPR 5 * allow UNARY_OPERATOR 6 * LEAF_NODE 7 * FIELD 6 allow LEAF_NODE 7 allow LEAF_NODE 4 ; EXPR_STATEMENT 3 buf = ( unsigned char * ) s -> init_buf -> data ; EXPR 4 buf = ( unsigned char * ) s -> init_buf -> data ASSIGN 5 buf = ( unsigned char * ) s -> init_buf -> data LVAL 6 buf FIELD 7 buf LEAF_NODE 8 buf ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( unsigned char * ) s -> init_buf -> data LEAF_NODE 7 ( TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FIELD 7 s -> init_buf -> data LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 init_buf LEAF_NODE 8 -> LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 p = buf ; EXPR 4 p = buf ASSIGN 5 p = buf LVAL 6 p FIELD 7 p LEAF_NODE 8 p ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 buf FIELD 7 buf LEAF_NODE 8 buf LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> state == SSL2_ST_GET_SERVER_HELLO_A EXPR 5 s -> state == SSL2_ST_GET_SERVER_HELLO_A FIELD 6 s -> state LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 state EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 SSL2_ST_GET_SERVER_HELLO_A LEAF_NODE 7 SSL2_ST_GET_SERVER_HELLO_A LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 i = ssl2_read ( s , ( char * ) & ( buf [ s -> init_num ] ) , 11 - s -> init_num ) ; EXPR 7 i = ssl2_read ( s , ( char * ) & ( buf [ s -> init_num ] ) , 11 - s -> init_num ) ASSIGN 8 i = ssl2_read ( s , ( char * ) & ( buf [ s -> init_num ] ) , 11 - s -> init_num ) LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ssl2_read ( s , ( char * ) & ( buf [ s -> init_num ] ) , 11 - s -> init_num ) FUNCTION_CALL 10 ssl2_read ( s , ( char * ) & ( buf [ s -> init_num ] ) , 11 - s -> init_num ) CALLEE 11 ssl2_read LEAF_NODE 12 ssl2_read LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 , ARGUMENT 11 ( char * ) & ( buf [ s -> init_num ] ) LEAF_NODE 12 ( TYPE_NAME 12 char LEAF_NODE 13 char LEAF_NODE 12 * LEAF_NODE 12 ) UNARY_EXPR 12 & ( buf [ s -> init_num ] ) UNARY_OPERATOR 13 & LEAF_NODE 14 & LEAF_NODE 13 ( FIELD 13 buf [ s -> init_num ] LEAF_NODE 14 buf LEAF_NODE 14 [ EXPR 14 s -> init_num FIELD 15 s -> init_num LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 init_num LEAF_NODE 14 ] LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 11 - s -> init_num FIELD 12 11 LEAF_NODE 13 11 LEAF_NODE 12 - FIELD 12 s -> init_num LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 init_num LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 i < ( 11 - s -> init_num ) EXPR 8 i < ( 11 - s -> init_num ) FIELD 9 i LEAF_NODE 10 i REL_OPERATOR 9 < LEAF_NODE 10 < LEAF_NODE 9 ( FIELD 9 11 LEAF_NODE 10 11 LEAF_NODE 9 - FIELD 9 s -> init_num LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 init_num LEAF_NODE 9 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return ( ssl2_part_read ( s , SSL_F_GET_SERVER_HELLO , i ) ) ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 ( ssl2_part_read ( s , SSL_F_GET_SERVER_HELLO , i ) ) EXPR 10 ( ssl2_part_read ( s , SSL_F_GET_SERVER_HELLO , i ) ) LEAF_NODE 11 ( FUNCTION_CALL 11 ssl2_part_read ( s , SSL_F_GET_SERVER_HELLO , i ) CALLEE 12 ssl2_part_read LEAF_NODE 13 ssl2_part_read LEAF_NODE 12 ( ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 , ARGUMENT 12 SSL_F_GET_SERVER_HELLO FIELD 13 SSL_F_GET_SERVER_HELLO LEAF_NODE 14 SSL_F_GET_SERVER_HELLO LEAF_NODE 12 , ARGUMENT 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 12 ) LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 6 s -> init_num = 11 ; EXPR 7 s -> init_num = 11 ASSIGN 8 s -> init_num = 11 LVAL 9 s -> init_num FIELD 10 s -> init_num LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 init_num ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 11 FIELD 10 11 LEAF_NODE 11 11 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * ( p ++ ) != SSL2_MT_SERVER_HELLO EXPR 8 * ( p ++ ) != SSL2_MT_SERVER_HELLO UNARY_EXPR 9 * ( p ++ ) UNARY_OPERATOR 10 * LEAF_NODE 11 * LEAF_NODE 10 ( FIELD 10 p ++ LEAF_NODE 11 p LEAF_NODE 11 ++ LEAF_NODE 10 ) EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 SSL2_MT_SERVER_HELLO LEAF_NODE 10 SSL2_MT_SERVER_HELLO LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 p [ - 1 ] != SSL2_MT_ERROR EXPR 11 p [ - 1 ] != SSL2_MT_ERROR FIELD 12 p [ - 1 ] LEAF_NODE 13 p LEAF_NODE 13 [ EXPR 13 - 1 UNARY_EXPR 14 - 1 UNARY_OPERATOR 15 - LEAF_NODE 16 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 13 ] EQ_OPERATOR 12 != LEAF_NODE 13 != FIELD 12 SSL2_MT_ERROR LEAF_NODE 13 SSL2_MT_ERROR LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ssl2_return_error ( s , SSL2_PE_UNDEFINED_ERROR ) ; EXPR 13 ssl2_return_error ( s , SSL2_PE_UNDEFINED_ERROR ) FUNCTION_CALL 14 ssl2_return_error ( s , SSL2_PE_UNDEFINED_ERROR ) CALLEE 15 ssl2_return_error LEAF_NODE 16 ssl2_return_error LEAF_NODE 15 ( ARGUMENT 15 s FIELD 16 s LEAF_NODE 17 s LEAF_NODE 15 , ARGUMENT 15 SSL2_PE_UNDEFINED_ERROR FIELD 16 SSL2_PE_UNDEFINED_ERROR LEAF_NODE 17 SSL2_PE_UNDEFINED_ERROR LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_READ_WRONG_PACKET_TYPE ) ; EXPR 13 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_READ_WRONG_PACKET_TYPE ) FUNCTION_CALL 14 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_READ_WRONG_PACKET_TYPE ) CALLEE 15 SSLerr LEAF_NODE 16 SSLerr LEAF_NODE 15 ( ARGUMENT 15 SSL_F_GET_SERVER_HELLO FIELD 16 SSL_F_GET_SERVER_HELLO LEAF_NODE 17 SSL_F_GET_SERVER_HELLO LEAF_NODE 15 , ARGUMENT 15 SSL_R_READ_WRONG_PACKET_TYPE FIELD 16 SSL_R_READ_WRONG_PACKET_TYPE LEAF_NODE 17 SSL_R_READ_WRONG_PACKET_TYPE LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 else LEAF_NODE 11 else STATEMENTS 10 EXPR_STATEMENT 11 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_PEER_ERROR ) ; EXPR 12 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_PEER_ERROR ) FUNCTION_CALL 13 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_PEER_ERROR ) CALLEE 14 SSLerr LEAF_NODE 15 SSLerr LEAF_NODE 14 ( ARGUMENT 14 SSL_F_GET_SERVER_HELLO FIELD 15 SSL_F_GET_SERVER_HELLO LEAF_NODE 16 SSL_F_GET_SERVER_HELLO LEAF_NODE 14 , ARGUMENT 14 SSL_R_PEER_ERROR FIELD 15 SSL_R_PEER_ERROR LEAF_NODE 16 SSL_R_PEER_ERROR LEAF_NODE 14 ) LEAF_NODE 12 ; JUMP_STATEMENT 9 return ( - 1 ) ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 ( - 1 ) EXPR 11 ( - 1 ) LEAF_NODE 12 ( UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 s -> hit = ( * ( p ++ ) ) ? 1 : 0 ; EXPR 7 s -> hit = ( * ( p ++ ) ) ? 1 : 0 ASSIGN 8 s -> hit = ( * ( p ++ ) ) ? 1 : 0 LVAL 9 s -> hit FIELD 10 s -> hit LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 hit ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( * ( p ++ ) ) ? 1 : 0 COND_EXPR 10 ( * ( p ++ ) ) ? 1 : 0 CONDITION 11 ( * ( p ++ ) ) LEAF_NODE 12 ( UNARY_EXPR 12 * ( p ++ ) UNARY_OPERATOR 13 * LEAF_NODE 14 * LEAF_NODE 13 ( FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 13 ) LEAF_NODE 12 ) LEAF_NODE 11 ? EXPR 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 : FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> hit = ( * p ) ? 1 : 0 ; EXPR 7 s -> hit = ( * p ) ? 1 : 0 ASSIGN 8 s -> hit = ( * p ) ? 1 : 0 LVAL 9 s -> hit FIELD 10 s -> hit LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 hit ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( * p ) ? 1 : 0 COND_EXPR 10 ( * p ) ? 1 : 0 CONDITION 11 ( * p ) LEAF_NODE 12 ( UNARY_EXPR 12 * p UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p LEAF_NODE 14 p LEAF_NODE 12 ) LEAF_NODE 11 ? EXPR 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 : FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ; EXPR_STATEMENT 6 p ++ ; EXPR 7 p ++ FIELD 8 p ++ LEAF_NODE 9 p LEAF_NODE 9 ++ LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> s2 -> tmp . cert_type = * ( p ++ ) ; EXPR 7 s -> s2 -> tmp . cert_type = * ( p ++ ) ASSIGN 8 s -> s2 -> tmp . cert_type = * ( p ++ ) LVAL 9 s -> s2 -> tmp . cert_type FIELD 10 s -> s2 -> tmp . cert_type LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s2 LEAF_NODE 11 -> LEAF_NODE 11 tmp LEAF_NODE 11 . LEAF_NODE 11 cert_type ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 * ( p ++ ) UNARY_EXPR 10 * ( p ++ ) UNARY_OPERATOR 11 * LEAF_NODE 12 * LEAF_NODE 11 ( FIELD 11 p ++ LEAF_NODE 12 p LEAF_NODE 12 ++ LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 n2s ( p , i ) ; EXPR 7 n2s ( p , i ) FUNCTION_CALL 8 n2s ( p , i ) CALLEE 9 n2s LEAF_NODE 10 n2s LEAF_NODE 9 ( ARGUMENT 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 , ARGUMENT 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 i < s -> version EXPR 8 i < s -> version FIELD 9 i LEAF_NODE 10 i REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 s -> version LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 version LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 s -> version = i ; EXPR 9 s -> version = i ASSIGN 10 s -> version = i LVAL 11 s -> version FIELD 12 s -> version LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 version ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 9 ; EXPR_STATEMENT 6 n2s ( p , i ) ; EXPR 7 n2s ( p , i ) FUNCTION_CALL 8 n2s ( p , i ) CALLEE 9 n2s LEAF_NODE 10 n2s LEAF_NODE 9 ( ARGUMENT 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 , ARGUMENT 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> s2 -> tmp . cert_length = i ; EXPR 7 s -> s2 -> tmp . cert_length = i ASSIGN 8 s -> s2 -> tmp . cert_length = i LVAL 9 s -> s2 -> tmp . cert_length FIELD 10 s -> s2 -> tmp . cert_length LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s2 LEAF_NODE 11 -> LEAF_NODE 11 tmp LEAF_NODE 11 . LEAF_NODE 11 cert_length ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 7 ; EXPR_STATEMENT 6 n2s ( p , i ) ; EXPR 7 n2s ( p , i ) FUNCTION_CALL 8 n2s ( p , i ) CALLEE 9 n2s LEAF_NODE 10 n2s LEAF_NODE 9 ( ARGUMENT 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 , ARGUMENT 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> s2 -> tmp . csl = i ; EXPR 7 s -> s2 -> tmp . csl = i ASSIGN 8 s -> s2 -> tmp . csl = i LVAL 9 s -> s2 -> tmp . csl FIELD 10 s -> s2 -> tmp . csl LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s2 LEAF_NODE 11 -> LEAF_NODE 11 tmp LEAF_NODE 11 . LEAF_NODE 11 csl ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 7 ; EXPR_STATEMENT 6 n2s ( p , i ) ; EXPR 7 n2s ( p , i ) FUNCTION_CALL 8 n2s ( p , i ) CALLEE 9 n2s LEAF_NODE 10 n2s LEAF_NODE 9 ( ARGUMENT 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 , ARGUMENT 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> s2 -> tmp . conn_id_length = i ; EXPR 7 s -> s2 -> tmp . conn_id_length = i ASSIGN 8 s -> s2 -> tmp . conn_id_length = i LVAL 9 s -> s2 -> tmp . conn_id_length FIELD 10 s -> s2 -> tmp . conn_id_length LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s2 LEAF_NODE 11 -> LEAF_NODE 11 tmp LEAF_NODE 11 . LEAF_NODE 11 conn_id_length ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> state = SSL2_ST_GET_SERVER_HELLO_B ; EXPR 7 s -> state = SSL2_ST_GET_SERVER_HELLO_B ASSIGN 8 s -> state = SSL2_ST_GET_SERVER_HELLO_B LVAL 9 s -> state FIELD 10 s -> state LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 state ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL2_ST_GET_SERVER_HELLO_B FIELD 10 SSL2_ST_GET_SERVER_HELLO_B LEAF_NODE 11 SSL2_ST_GET_SERVER_HELLO_B LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 len = 11 + ( unsigned long ) s -> s2 -> tmp . cert_length + ( unsigned long ) s -> s2 -> tmp . csl + ( unsigned long ) s -> s2 -> tmp . conn_id_length ; EXPR 4 len = 11 + ( unsigned long ) s -> s2 -> tmp . cert_length + ( unsigned long ) s -> s2 -> tmp . csl + ( unsigned long ) s -> s2 -> tmp . conn_id_length ASSIGN 5 len = 11 + ( unsigned long ) s -> s2 -> tmp . cert_length + ( unsigned long ) s -> s2 -> tmp . csl + ( unsigned long ) s -> s2 -> tmp . conn_id_length LVAL 6 len FIELD 7 len LEAF_NODE 8 len ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 11 + ( unsigned long ) s -> s2 -> tmp . cert_length + ( unsigned long ) s -> s2 -> tmp . csl + ( unsigned long ) s -> s2 -> tmp . conn_id_length FIELD 7 11 LEAF_NODE 8 11 LEAF_NODE 7 + LEAF_NODE 7 ( TYPE_NAME 7 unsigned long LEAF_NODE 8 unsigned LEAF_NODE 8 long LEAF_NODE 7 ) FIELD 7 s -> s2 -> tmp . cert_length LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s2 LEAF_NODE 8 -> LEAF_NODE 8 tmp LEAF_NODE 8 . LEAF_NODE 8 cert_length LEAF_NODE 7 + LEAF_NODE 7 ( TYPE_NAME 7 unsigned long LEAF_NODE 8 unsigned LEAF_NODE 8 long LEAF_NODE 7 ) FIELD 7 s -> s2 -> tmp . csl LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s2 LEAF_NODE 8 -> LEAF_NODE 8 tmp LEAF_NODE 8 . LEAF_NODE 8 csl LEAF_NODE 7 + LEAF_NODE 7 ( TYPE_NAME 7 unsigned long LEAF_NODE 8 unsigned LEAF_NODE 8 long LEAF_NODE 7 ) FIELD 7 s -> s2 -> tmp . conn_id_length LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s2 LEAF_NODE 8 -> LEAF_NODE 8 tmp LEAF_NODE 8 . LEAF_NODE 8 conn_id_length LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 len > SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER EXPR 5 len > SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER FIELD 6 len LEAF_NODE 7 len REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER LEAF_NODE 7 SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_MESSAGE_TOO_LONG ) ; EXPR 7 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_MESSAGE_TOO_LONG ) FUNCTION_CALL 8 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_MESSAGE_TOO_LONG ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_GET_SERVER_HELLO FIELD 10 SSL_F_GET_SERVER_HELLO LEAF_NODE 11 SSL_F_GET_SERVER_HELLO LEAF_NODE 9 , ARGUMENT 9 SSL_R_MESSAGE_TOO_LONG FIELD 10 SSL_R_MESSAGE_TOO_LONG LEAF_NODE 11 SSL_R_MESSAGE_TOO_LONG LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 j = ( int ) len - s -> init_num ; EXPR 4 j = ( int ) len - s -> init_num ASSIGN 5 j = ( int ) len - s -> init_num LVAL 6 j FIELD 7 j LEAF_NODE 8 j ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( int ) len - s -> init_num LEAF_NODE 7 ( TYPE_NAME 7 int LEAF_NODE 8 int LEAF_NODE 7 ) FIELD 7 len LEAF_NODE 8 len LEAF_NODE 7 - FIELD 7 s -> init_num LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 init_num LEAF_NODE 4 ; EXPR_STATEMENT 3 i = ssl2_read ( s , ( char * ) & ( buf [ s -> init_num ] ) , j ) ; EXPR 4 i = ssl2_read ( s , ( char * ) & ( buf [ s -> init_num ] ) , j ) ASSIGN 5 i = ssl2_read ( s , ( char * ) & ( buf [ s -> init_num ] ) , j ) LVAL 6 i FIELD 7 i LEAF_NODE 8 i ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ssl2_read ( s , ( char * ) & ( buf [ s -> init_num ] ) , j ) FUNCTION_CALL 7 ssl2_read ( s , ( char * ) & ( buf [ s -> init_num ] ) , j ) CALLEE 8 ssl2_read LEAF_NODE 9 ssl2_read LEAF_NODE 8 ( ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 , ARGUMENT 8 ( char * ) & ( buf [ s -> init_num ] ) LEAF_NODE 9 ( TYPE_NAME 9 char LEAF_NODE 10 char LEAF_NODE 9 * LEAF_NODE 9 ) UNARY_EXPR 9 & ( buf [ s -> init_num ] ) UNARY_OPERATOR 10 & LEAF_NODE 11 & LEAF_NODE 10 ( FIELD 10 buf [ s -> init_num ] LEAF_NODE 11 buf LEAF_NODE 11 [ EXPR 11 s -> init_num FIELD 12 s -> init_num LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 init_num LEAF_NODE 11 ] LEAF_NODE 10 ) LEAF_NODE 8 , ARGUMENT 8 j FIELD 9 j LEAF_NODE 10 j LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 i != j EXPR 5 i != j FIELD 6 i LEAF_NODE 7 i EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 j LEAF_NODE 7 j LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return ( ssl2_part_read ( s , SSL_F_GET_SERVER_HELLO , i ) ) ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 ( ssl2_part_read ( s , SSL_F_GET_SERVER_HELLO , i ) ) EXPR 7 ( ssl2_part_read ( s , SSL_F_GET_SERVER_HELLO , i ) ) LEAF_NODE 8 ( FUNCTION_CALL 8 ssl2_part_read ( s , SSL_F_GET_SERVER_HELLO , i ) CALLEE 9 ssl2_part_read LEAF_NODE 10 ssl2_part_read LEAF_NODE 9 ( ARGUMENT 9 s FIELD 10 s LEAF_NODE 11 s LEAF_NODE 9 , ARGUMENT 9 SSL_F_GET_SERVER_HELLO FIELD 10 SSL_F_GET_SERVER_HELLO LEAF_NODE 11 SSL_F_GET_SERVER_HELLO LEAF_NODE 9 , ARGUMENT 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 9 ) LEAF_NODE 8 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> msg_callback EXPR 5 s -> msg_callback FIELD 6 s -> msg_callback LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 msg_callback LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 s -> msg_callback ( 0 , s -> version , 0 , buf , ( size_t ) len , s , s -> msg_callback_arg ) ; EXPR 7 s -> msg_callback ( 0 , s -> version , 0 , buf , ( size_t ) len , s , s -> msg_callback_arg ) FUNCTION_CALL 8 s -> msg_callback ( 0 , s -> version , 0 , buf , ( size_t ) len , s , s -> msg_callback_arg ) CALLEE 9 s -> msg_callback LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 msg_callback LEAF_NODE 9 ( ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 , ARGUMENT 9 s -> version FIELD 10 s -> version LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 version LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 , ARGUMENT 9 buf FIELD 10 buf LEAF_NODE 11 buf LEAF_NODE 9 , ARGUMENT 9 ( size_t ) len LEAF_NODE 10 ( TYPE_NAME 10 size_t LEAF_NODE 11 size_t LEAF_NODE 10 ) FIELD 10 len LEAF_NODE 11 len LEAF_NODE 9 , ARGUMENT 9 s FIELD 10 s LEAF_NODE 11 s LEAF_NODE 9 , ARGUMENT 9 s -> msg_callback_arg FIELD 10 s -> msg_callback_arg LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 msg_callback_arg LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 p = buf + 11 ; EXPR 4 p = buf + 11 ASSIGN 5 p = buf + 11 LVAL 6 p FIELD 7 p LEAF_NODE 8 p ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 buf + 11 FIELD 7 buf LEAF_NODE 8 buf LEAF_NODE 7 + FIELD 7 11 LEAF_NODE 8 11 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> hit EXPR 5 s -> hit FIELD 6 s -> hit LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 hit LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> s2 -> tmp . cert_length != 0 EXPR 8 s -> s2 -> tmp . cert_length != 0 FIELD 9 s -> s2 -> tmp . cert_length LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 s2 LEAF_NODE 10 -> LEAF_NODE 10 tmp LEAF_NODE 10 . LEAF_NODE 10 cert_length EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_REUSE_CERT_LENGTH_NOT_ZERO ) ; EXPR 10 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_REUSE_CERT_LENGTH_NOT_ZERO ) FUNCTION_CALL 11 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_REUSE_CERT_LENGTH_NOT_ZERO ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_GET_SERVER_HELLO FIELD 13 SSL_F_GET_SERVER_HELLO LEAF_NODE 14 SSL_F_GET_SERVER_HELLO LEAF_NODE 12 , ARGUMENT 12 SSL_R_REUSE_CERT_LENGTH_NOT_ZERO FIELD 13 SSL_R_REUSE_CERT_LENGTH_NOT_ZERO LEAF_NODE 14 SSL_R_REUSE_CERT_LENGTH_NOT_ZERO LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return ( - 1 ) ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 ( - 1 ) EXPR 11 ( - 1 ) LEAF_NODE 12 ( UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> s2 -> tmp . cert_type != 0 EXPR 8 s -> s2 -> tmp . cert_type != 0 FIELD 9 s -> s2 -> tmp . cert_type LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 s2 LEAF_NODE 10 -> LEAF_NODE 10 tmp LEAF_NODE 10 . LEAF_NODE 10 cert_type EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! ( s -> options & SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG ) EXPR 11 ! ( s -> options & SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG ) UNARY_EXPR 12 ! ( s -> options & SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG ) UNARY_OPERATOR 13 ! LEAF_NODE 14 ! LEAF_NODE 13 ( FIELD 13 s -> options LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 options LEAF_NODE 13 & FIELD 13 SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG LEAF_NODE 14 SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG LEAF_NODE 13 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_REUSE_CERT_TYPE_NOT_ZERO ) ; EXPR 13 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_REUSE_CERT_TYPE_NOT_ZERO ) FUNCTION_CALL 14 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_REUSE_CERT_TYPE_NOT_ZERO ) CALLEE 15 SSLerr LEAF_NODE 16 SSLerr LEAF_NODE 15 ( ARGUMENT 15 SSL_F_GET_SERVER_HELLO FIELD 16 SSL_F_GET_SERVER_HELLO LEAF_NODE 17 SSL_F_GET_SERVER_HELLO LEAF_NODE 15 , ARGUMENT 15 SSL_R_REUSE_CERT_TYPE_NOT_ZERO FIELD 16 SSL_R_REUSE_CERT_TYPE_NOT_ZERO LEAF_NODE 17 SSL_R_REUSE_CERT_TYPE_NOT_ZERO LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 return ( - 1 ) ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 ( - 1 ) EXPR 14 ( - 1 ) LEAF_NODE 15 ( UNARY_EXPR 15 - 1 UNARY_OPERATOR 16 - LEAF_NODE 17 - FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> s2 -> tmp . csl != 0 EXPR 8 s -> s2 -> tmp . csl != 0 FIELD 9 s -> s2 -> tmp . csl LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 s2 LEAF_NODE 10 -> LEAF_NODE 10 tmp LEAF_NODE 10 . LEAF_NODE 10 csl EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_REUSE_CIPHER_LIST_NOT_ZERO ) ; EXPR 10 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_REUSE_CIPHER_LIST_NOT_ZERO ) FUNCTION_CALL 11 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_REUSE_CIPHER_LIST_NOT_ZERO ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_GET_SERVER_HELLO FIELD 13 SSL_F_GET_SERVER_HELLO LEAF_NODE 14 SSL_F_GET_SERVER_HELLO LEAF_NODE 12 , ARGUMENT 12 SSL_R_REUSE_CIPHER_LIST_NOT_ZERO FIELD 13 SSL_R_REUSE_CIPHER_LIST_NOT_ZERO LEAF_NODE 14 SSL_R_REUSE_CIPHER_LIST_NOT_ZERO LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return ( - 1 ) ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 ( - 1 ) EXPR 11 ( - 1 ) LEAF_NODE 12 ( UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 memset ( s -> session -> session_id , 0 , SSL_MAX_SSL_SESSION_ID_LENGTH_IN_BYTES ) ; EXPR 7 memset ( s -> session -> session_id , 0 , SSL_MAX_SSL_SESSION_ID_LENGTH_IN_BYTES ) FUNCTION_CALL 8 memset ( s -> session -> session_id , 0 , SSL_MAX_SSL_SESSION_ID_LENGTH_IN_BYTES ) CALLEE 9 memset LEAF_NODE 10 memset LEAF_NODE 9 ( ARGUMENT 9 s -> session -> session_id FIELD 10 s -> session -> session_id LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 session LEAF_NODE 11 -> LEAF_NODE 11 session_id LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 , ARGUMENT 9 SSL_MAX_SSL_SESSION_ID_LENGTH_IN_BYTES FIELD 10 SSL_MAX_SSL_SESSION_ID_LENGTH_IN_BYTES LEAF_NODE 11 SSL_MAX_SSL_SESSION_ID_LENGTH_IN_BYTES LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> session -> session_id_length = 0 ; EXPR 7 s -> session -> session_id_length = 0 ASSIGN 8 s -> session -> session_id_length = 0 LVAL 9 s -> session -> session_id_length FIELD 10 s -> session -> session_id_length LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 session LEAF_NODE 11 -> LEAF_NODE 11 session_id_length ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> session -> session_id_length > 0 EXPR 8 s -> session -> session_id_length > 0 FIELD 9 s -> session -> session_id_length LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 session LEAF_NODE 10 -> LEAF_NODE 10 session_id_length REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! ssl_get_new_session ( s , 0 ) EXPR 11 ! ssl_get_new_session ( s , 0 ) UNARY_EXPR 12 ! ssl_get_new_session ( s , 0 ) UNARY_OPERATOR 13 ! LEAF_NODE 14 ! FUNCTION_CALL 13 ssl_get_new_session ( s , 0 ) CALLEE 14 ssl_get_new_session LEAF_NODE 15 ssl_get_new_session LEAF_NODE 14 ( ARGUMENT 14 s FIELD 15 s LEAF_NODE 16 s LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ssl2_return_error ( s , SSL2_PE_UNDEFINED_ERROR ) ; EXPR 13 ssl2_return_error ( s , SSL2_PE_UNDEFINED_ERROR ) FUNCTION_CALL 14 ssl2_return_error ( s , SSL2_PE_UNDEFINED_ERROR ) CALLEE 15 ssl2_return_error LEAF_NODE 16 ssl2_return_error LEAF_NODE 15 ( ARGUMENT 15 s FIELD 16 s LEAF_NODE 17 s LEAF_NODE 15 , ARGUMENT 15 SSL2_PE_UNDEFINED_ERROR FIELD 16 SSL2_PE_UNDEFINED_ERROR LEAF_NODE 17 SSL2_PE_UNDEFINED_ERROR LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 return ( - 1 ) ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 ( - 1 ) EXPR 14 ( - 1 ) LEAF_NODE 15 ( UNARY_EXPR 15 - 1 UNARY_OPERATOR 16 - LEAF_NODE 17 - FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ssl2_set_certificate ( s , s -> s2 -> tmp . cert_type , s -> s2 -> tmp . cert_length , p ) <= 0 EXPR 8 ssl2_set_certificate ( s , s -> s2 -> tmp . cert_type , s -> s2 -> tmp . cert_length , p ) <= 0 FUNCTION_CALL 9 ssl2_set_certificate ( s , s -> s2 -> tmp . cert_type , s -> s2 -> tmp . cert_length , p ) CALLEE 10 ssl2_set_certificate LEAF_NODE 11 ssl2_set_certificate LEAF_NODE 10 ( ARGUMENT 10 s FIELD 11 s LEAF_NODE 12 s LEAF_NODE 10 , ARGUMENT 10 s -> s2 -> tmp . cert_type FIELD 11 s -> s2 -> tmp . cert_type LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 s2 LEAF_NODE 12 -> LEAF_NODE 12 tmp LEAF_NODE 12 . LEAF_NODE 12 cert_type LEAF_NODE 10 , ARGUMENT 10 s -> s2 -> tmp . cert_length FIELD 11 s -> s2 -> tmp . cert_length LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 s2 LEAF_NODE 12 -> LEAF_NODE 12 tmp LEAF_NODE 12 . LEAF_NODE 12 cert_length LEAF_NODE 10 , ARGUMENT 10 p FIELD 11 p LEAF_NODE 12 p LEAF_NODE 10 ) REL_OPERATOR 9 <= LEAF_NODE 10 <= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ssl2_return_error ( s , SSL2_PE_BAD_CERTIFICATE ) ; EXPR 10 ssl2_return_error ( s , SSL2_PE_BAD_CERTIFICATE ) FUNCTION_CALL 11 ssl2_return_error ( s , SSL2_PE_BAD_CERTIFICATE ) CALLEE 12 ssl2_return_error LEAF_NODE 13 ssl2_return_error LEAF_NODE 12 ( ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 , ARGUMENT 12 SSL2_PE_BAD_CERTIFICATE FIELD 13 SSL2_PE_BAD_CERTIFICATE LEAF_NODE 14 SSL2_PE_BAD_CERTIFICATE LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return ( - 1 ) ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 ( - 1 ) EXPR 11 ( - 1 ) LEAF_NODE 12 ( UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 p += s -> s2 -> tmp . cert_length ; EXPR 7 p += s -> s2 -> tmp . cert_length ASSIGN 8 p += s -> s2 -> tmp . cert_length LVAL 9 p FIELD 10 p LEAF_NODE 11 p ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 s -> s2 -> tmp . cert_length FIELD 10 s -> s2 -> tmp . cert_length LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s2 LEAF_NODE 11 -> LEAF_NODE 11 tmp LEAF_NODE 11 . LEAF_NODE 11 cert_length LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> s2 -> tmp . csl == 0 EXPR 8 s -> s2 -> tmp . csl == 0 FIELD 9 s -> s2 -> tmp . csl LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 s2 LEAF_NODE 10 -> LEAF_NODE 10 tmp LEAF_NODE 10 . LEAF_NODE 10 csl EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ssl2_return_error ( s , SSL2_PE_NO_CIPHER ) ; EXPR 10 ssl2_return_error ( s , SSL2_PE_NO_CIPHER ) FUNCTION_CALL 11 ssl2_return_error ( s , SSL2_PE_NO_CIPHER ) CALLEE 12 ssl2_return_error LEAF_NODE 13 ssl2_return_error LEAF_NODE 12 ( ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 , ARGUMENT 12 SSL2_PE_NO_CIPHER FIELD 13 SSL2_PE_NO_CIPHER LEAF_NODE 14 SSL2_PE_NO_CIPHER LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_NO_CIPHER_LIST ) ; EXPR 10 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_NO_CIPHER_LIST ) FUNCTION_CALL 11 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_NO_CIPHER_LIST ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_GET_SERVER_HELLO FIELD 13 SSL_F_GET_SERVER_HELLO LEAF_NODE 14 SSL_F_GET_SERVER_HELLO LEAF_NODE 12 , ARGUMENT 12 SSL_R_NO_CIPHER_LIST FIELD 13 SSL_R_NO_CIPHER_LIST LEAF_NODE 14 SSL_R_NO_CIPHER_LIST LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return ( - 1 ) ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 ( - 1 ) EXPR 11 ( - 1 ) LEAF_NODE 12 ( UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 sk = ssl_bytes_to_cipher_list ( s , p , s -> s2 -> tmp . csl , & s -> session -> cipher ) ; EXPR 7 sk = ssl_bytes_to_cipher_list ( s , p , s -> s2 -> tmp . csl , & s -> session -> cipher ) ASSIGN 8 sk = ssl_bytes_to_cipher_list ( s , p , s -> s2 -> tmp . csl , & s -> session -> cipher ) LVAL 9 sk FIELD 10 sk LEAF_NODE 11 sk ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ssl_bytes_to_cipher_list ( s , p , s -> s2 -> tmp . csl , & s -> session -> cipher ) FUNCTION_CALL 10 ssl_bytes_to_cipher_list ( s , p , s -> s2 -> tmp . csl , & s -> session -> cipher ) CALLEE 11 ssl_bytes_to_cipher_list LEAF_NODE 12 ssl_bytes_to_cipher_list LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 , ARGUMENT 11 p FIELD 12 p LEAF_NODE 13 p LEAF_NODE 11 , ARGUMENT 11 s -> s2 -> tmp . csl FIELD 12 s -> s2 -> tmp . csl LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 s2 LEAF_NODE 13 -> LEAF_NODE 13 tmp LEAF_NODE 13 . LEAF_NODE 13 csl LEAF_NODE 11 , ARGUMENT 11 & s -> session -> cipher UNARY_EXPR 12 & s -> session -> cipher UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 s -> session -> cipher LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 session LEAF_NODE 14 -> LEAF_NODE 14 cipher LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 p += s -> s2 -> tmp . csl ; EXPR 7 p += s -> s2 -> tmp . csl ASSIGN 8 p += s -> s2 -> tmp . csl LVAL 9 p FIELD 10 p LEAF_NODE 11 p ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 s -> s2 -> tmp . csl FIELD 10 s -> s2 -> tmp . csl LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s2 LEAF_NODE 11 -> LEAF_NODE 11 tmp LEAF_NODE 11 . LEAF_NODE 11 csl LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 sk == NULL EXPR 8 sk == NULL FIELD 9 sk LEAF_NODE 10 sk EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ssl2_return_error ( s , SSL2_PE_UNDEFINED_ERROR ) ; EXPR 10 ssl2_return_error ( s , SSL2_PE_UNDEFINED_ERROR ) FUNCTION_CALL 11 ssl2_return_error ( s , SSL2_PE_UNDEFINED_ERROR ) CALLEE 12 ssl2_return_error LEAF_NODE 13 ssl2_return_error LEAF_NODE 12 ( ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 , ARGUMENT 12 SSL2_PE_UNDEFINED_ERROR FIELD 13 SSL2_PE_UNDEFINED_ERROR LEAF_NODE 14 SSL2_PE_UNDEFINED_ERROR LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 SSLerr ( SSL_F_GET_SERVER_HELLO , ERR_R_MALLOC_FAILURE ) ; EXPR 10 SSLerr ( SSL_F_GET_SERVER_HELLO , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 11 SSLerr ( SSL_F_GET_SERVER_HELLO , ERR_R_MALLOC_FAILURE ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_GET_SERVER_HELLO FIELD 13 SSL_F_GET_SERVER_HELLO LEAF_NODE 14 SSL_F_GET_SERVER_HELLO LEAF_NODE 12 , ARGUMENT 12 ERR_R_MALLOC_FAILURE FIELD 13 ERR_R_MALLOC_FAILURE LEAF_NODE 14 ERR_R_MALLOC_FAILURE LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return ( - 1 ) ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 ( - 1 ) EXPR 11 ( - 1 ) LEAF_NODE 12 ( UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 ( void ) sk_SSL_CIPHER_set_cmp_func ( sk , ssl_cipher_ptr_id_cmp ) ; EXPR 7 ( void ) sk_SSL_CIPHER_set_cmp_func ( sk , ssl_cipher_ptr_id_cmp ) LEAF_NODE 8 ( TYPE_NAME 8 void LEAF_NODE 9 void LEAF_NODE 8 ) FUNCTION_CALL 8 sk_SSL_CIPHER_set_cmp_func ( sk , ssl_cipher_ptr_id_cmp ) CALLEE 9 sk_SSL_CIPHER_set_cmp_func LEAF_NODE 10 sk_SSL_CIPHER_set_cmp_func LEAF_NODE 9 ( ARGUMENT 9 sk FIELD 10 sk LEAF_NODE 11 sk LEAF_NODE 9 , ARGUMENT 9 ssl_cipher_ptr_id_cmp FIELD 10 ssl_cipher_ptr_id_cmp LEAF_NODE 11 ssl_cipher_ptr_id_cmp LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 cl = SSL_get_ciphers ( s ) ; EXPR 7 cl = SSL_get_ciphers ( s ) ASSIGN 8 cl = SSL_get_ciphers ( s ) LVAL 9 cl FIELD 10 cl LEAF_NODE 11 cl ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL_get_ciphers ( s ) FUNCTION_CALL 10 SSL_get_ciphers ( s ) CALLEE 11 SSL_get_ciphers LEAF_NODE 12 SSL_get_ciphers LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ( void ) sk_SSL_CIPHER_set_cmp_func ( cl , ssl_cipher_ptr_id_cmp ) ; EXPR 7 ( void ) sk_SSL_CIPHER_set_cmp_func ( cl , ssl_cipher_ptr_id_cmp ) LEAF_NODE 8 ( TYPE_NAME 8 void LEAF_NODE 9 void LEAF_NODE 8 ) FUNCTION_CALL 8 sk_SSL_CIPHER_set_cmp_func ( cl , ssl_cipher_ptr_id_cmp ) CALLEE 9 sk_SSL_CIPHER_set_cmp_func LEAF_NODE 10 sk_SSL_CIPHER_set_cmp_func LEAF_NODE 9 ( ARGUMENT 9 cl FIELD 10 cl LEAF_NODE 11 cl LEAF_NODE 9 , ARGUMENT 9 ssl_cipher_ptr_id_cmp FIELD 10 ssl_cipher_ptr_id_cmp LEAF_NODE 11 ssl_cipher_ptr_id_cmp LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> options & SSL_OP_CIPHER_SERVER_PREFERENCE EXPR 8 s -> options & SSL_OP_CIPHER_SERVER_PREFERENCE FIELD 9 s -> options LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 options LEAF_NODE 9 & FIELD 9 SSL_OP_CIPHER_SERVER_PREFERENCE LEAF_NODE 10 SSL_OP_CIPHER_SERVER_PREFERENCE LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 prio = sk ; EXPR 10 prio = sk ASSIGN 11 prio = sk LVAL 12 prio FIELD 13 prio LEAF_NODE 14 prio ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 sk FIELD 13 sk LEAF_NODE 14 sk LEAF_NODE 10 ; EXPR_STATEMENT 9 allow = cl ; EXPR 10 allow = cl ASSIGN 11 allow = cl LVAL 12 allow FIELD 13 allow LEAF_NODE 14 allow ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 cl FIELD 13 cl LEAF_NODE 14 cl LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 prio = cl ; EXPR 10 prio = cl ASSIGN 11 prio = cl LVAL 12 prio FIELD 13 prio LEAF_NODE 14 prio ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 cl FIELD 13 cl LEAF_NODE 14 cl LEAF_NODE 10 ; EXPR_STATEMENT 9 allow = sk ; EXPR 10 allow = sk ASSIGN 11 allow = sk LVAL 12 allow FIELD 13 allow LEAF_NODE 14 allow ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 sk FIELD 13 sk LEAF_NODE 14 sk LEAF_NODE 10 ; LEAF_NODE 8 } ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 i = 0 ; EXPR 8 i = 0 ASSIGN 9 i = 0 LVAL 10 i FIELD 11 i LEAF_NODE 12 i ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 8 ; CONDITION 7 i < sk_SSL_CIPHER_num ( prio ) EXPR 8 i < sk_SSL_CIPHER_num ( prio ) FIELD 9 i LEAF_NODE 10 i REL_OPERATOR 9 < LEAF_NODE 10 < FUNCTION_CALL 9 sk_SSL_CIPHER_num ( prio ) CALLEE 10 sk_SSL_CIPHER_num LEAF_NODE 11 sk_SSL_CIPHER_num LEAF_NODE 10 ( ARGUMENT 10 prio FIELD 11 prio LEAF_NODE 12 prio LEAF_NODE 10 ) LEAF_NODE 7 ; FOR_EXPR 7 i ++ EXPR 8 i ++ FIELD 9 i ++ LEAF_NODE 10 i LEAF_NODE 10 ++ LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 sk_SSL_CIPHER_find ( allow , sk_SSL_CIPHER_value ( prio , i ) ) >= 0 EXPR 11 sk_SSL_CIPHER_find ( allow , sk_SSL_CIPHER_value ( prio , i ) ) >= 0 FUNCTION_CALL 12 sk_SSL_CIPHER_find ( allow , sk_SSL_CIPHER_value ( prio , i ) ) CALLEE 13 sk_SSL_CIPHER_find LEAF_NODE 14 sk_SSL_CIPHER_find LEAF_NODE 13 ( ARGUMENT 13 allow FIELD 14 allow LEAF_NODE 15 allow LEAF_NODE 13 , ARGUMENT 13 sk_SSL_CIPHER_value ( prio , i ) FUNCTION_CALL 14 sk_SSL_CIPHER_value ( prio , i ) CALLEE 15 sk_SSL_CIPHER_value LEAF_NODE 16 sk_SSL_CIPHER_value LEAF_NODE 15 ( ARGUMENT 15 prio FIELD 16 prio LEAF_NODE 17 prio LEAF_NODE 15 , ARGUMENT 15 i FIELD 16 i LEAF_NODE 17 i LEAF_NODE 15 ) LEAF_NODE 13 ) REL_OPERATOR 12 >= LEAF_NODE 13 >= FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 break DESTINATION ; KEYWORD 12 break LEAF_NODE 13 break LEAF_NODE 12 DESTINATION LEAF_NODE 12 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 i >= sk_SSL_CIPHER_num ( prio ) EXPR 8 i >= sk_SSL_CIPHER_num ( prio ) FIELD 9 i LEAF_NODE 10 i REL_OPERATOR 9 >= LEAF_NODE 10 >= FUNCTION_CALL 9 sk_SSL_CIPHER_num ( prio ) CALLEE 10 sk_SSL_CIPHER_num LEAF_NODE 11 sk_SSL_CIPHER_num LEAF_NODE 10 ( ARGUMENT 10 prio FIELD 11 prio LEAF_NODE 12 prio LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ssl2_return_error ( s , SSL2_PE_NO_CIPHER ) ; EXPR 10 ssl2_return_error ( s , SSL2_PE_NO_CIPHER ) FUNCTION_CALL 11 ssl2_return_error ( s , SSL2_PE_NO_CIPHER ) CALLEE 12 ssl2_return_error LEAF_NODE 13 ssl2_return_error LEAF_NODE 12 ( ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 , ARGUMENT 12 SSL2_PE_NO_CIPHER FIELD 13 SSL2_PE_NO_CIPHER LEAF_NODE 14 SSL2_PE_NO_CIPHER LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_NO_CIPHER_MATCH ) ; EXPR 10 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_NO_CIPHER_MATCH ) FUNCTION_CALL 11 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_NO_CIPHER_MATCH ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_GET_SERVER_HELLO FIELD 13 SSL_F_GET_SERVER_HELLO LEAF_NODE 14 SSL_F_GET_SERVER_HELLO LEAF_NODE 12 , ARGUMENT 12 SSL_R_NO_CIPHER_MATCH FIELD 13 SSL_R_NO_CIPHER_MATCH LEAF_NODE 14 SSL_R_NO_CIPHER_MATCH LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return ( - 1 ) ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 ( - 1 ) EXPR 11 ( - 1 ) LEAF_NODE 12 ( UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 s -> session -> cipher = sk_SSL_CIPHER_value ( prio , i ) ; EXPR 7 s -> session -> cipher = sk_SSL_CIPHER_value ( prio , i ) ASSIGN 8 s -> session -> cipher = sk_SSL_CIPHER_value ( prio , i ) LVAL 9 s -> session -> cipher FIELD 10 s -> session -> cipher LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 session LEAF_NODE 11 -> LEAF_NODE 11 cipher ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 sk_SSL_CIPHER_value ( prio , i ) FUNCTION_CALL 10 sk_SSL_CIPHER_value ( prio , i ) CALLEE 11 sk_SSL_CIPHER_value LEAF_NODE 12 sk_SSL_CIPHER_value LEAF_NODE 11 ( ARGUMENT 11 prio FIELD 12 prio LEAF_NODE 13 prio LEAF_NODE 11 , ARGUMENT 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> session -> peer != NULL EXPR 8 s -> session -> peer != NULL FIELD 9 s -> session -> peer LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 session LEAF_NODE 10 -> LEAF_NODE 10 peer EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ssl2_return_error ( s , SSL2_PE_UNDEFINED_ERROR ) ; EXPR 10 ssl2_return_error ( s , SSL2_PE_UNDEFINED_ERROR ) FUNCTION_CALL 11 ssl2_return_error ( s , SSL2_PE_UNDEFINED_ERROR ) CALLEE 12 ssl2_return_error LEAF_NODE 13 ssl2_return_error LEAF_NODE 12 ( ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 , ARGUMENT 12 SSL2_PE_UNDEFINED_ERROR FIELD 13 SSL2_PE_UNDEFINED_ERROR LEAF_NODE 14 SSL2_PE_UNDEFINED_ERROR LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 SSLerr ( SSL_F_GET_SERVER_HELLO , ERR_R_INTERNAL_ERROR ) ; EXPR 10 SSLerr ( SSL_F_GET_SERVER_HELLO , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 11 SSLerr ( SSL_F_GET_SERVER_HELLO , ERR_R_INTERNAL_ERROR ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_GET_SERVER_HELLO FIELD 13 SSL_F_GET_SERVER_HELLO LEAF_NODE 14 SSL_F_GET_SERVER_HELLO LEAF_NODE 12 , ARGUMENT 12 ERR_R_INTERNAL_ERROR FIELD 13 ERR_R_INTERNAL_ERROR LEAF_NODE 14 ERR_R_INTERNAL_ERROR LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return ( - 1 ) ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 ( - 1 ) EXPR 11 ( - 1 ) LEAF_NODE 12 ( UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 s -> session -> peer = s -> session -> sess_cert -> peer_key ; EXPR 7 s -> session -> peer = s -> session -> sess_cert -> peer_key ASSIGN 8 s -> session -> peer = s -> session -> sess_cert -> peer_key LVAL 9 s -> session -> peer FIELD 10 s -> session -> peer LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 session LEAF_NODE 11 -> LEAF_NODE 11 peer ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 s -> session -> sess_cert -> peer_key FIELD 10 s -> session -> sess_cert -> peer_key LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 session LEAF_NODE 11 -> LEAF_NODE 11 sess_cert LEAF_NODE 11 -> LEAF_NODE 11 peer_key LEAF_NODE 7 ; EXPR_STATEMENT 6 CRYPTO_add ( & s -> session -> peer -> references , 1 , CRYPTO_LOCK_X509 ) ; EXPR 7 CRYPTO_add ( & s -> session -> peer -> references , 1 , CRYPTO_LOCK_X509 ) FUNCTION_CALL 8 CRYPTO_add ( & s -> session -> peer -> references , 1 , CRYPTO_LOCK_X509 ) CALLEE 9 CRYPTO_add LEAF_NODE 10 CRYPTO_add LEAF_NODE 9 ( ARGUMENT 9 & s -> session -> peer -> references UNARY_EXPR 10 & s -> session -> peer -> references UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 s -> session -> peer -> references LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 session LEAF_NODE 12 -> LEAF_NODE 12 peer LEAF_NODE 12 -> LEAF_NODE 12 references LEAF_NODE 9 , ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 , ARGUMENT 9 CRYPTO_LOCK_X509 FIELD 10 CRYPTO_LOCK_X509 LEAF_NODE 11 CRYPTO_LOCK_X509 LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> session -> sess_cert == NULL || s -> session -> peer != s -> session -> sess_cert -> peer_key EXPR 5 s -> session -> sess_cert == NULL || s -> session -> peer != s -> session -> sess_cert -> peer_key OR 6 s -> session -> sess_cert == NULL || s -> session -> peer != s -> session -> sess_cert -> peer_key EXPR 7 s -> session -> sess_cert == NULL FIELD 8 s -> session -> sess_cert LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 session LEAF_NODE 9 -> LEAF_NODE 9 sess_cert EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 7 || EXPR 7 s -> session -> peer != s -> session -> sess_cert -> peer_key FIELD 8 s -> session -> peer LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 session LEAF_NODE 9 -> LEAF_NODE 9 peer EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 s -> session -> sess_cert -> peer_key LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 session LEAF_NODE 9 -> LEAF_NODE 9 sess_cert LEAF_NODE 9 -> LEAF_NODE 9 peer_key LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ssl2_return_error ( s , SSL2_PE_UNDEFINED_ERROR ) ; EXPR 7 ssl2_return_error ( s , SSL2_PE_UNDEFINED_ERROR ) FUNCTION_CALL 8 ssl2_return_error ( s , SSL2_PE_UNDEFINED_ERROR ) CALLEE 9 ssl2_return_error LEAF_NODE 10 ssl2_return_error LEAF_NODE 9 ( ARGUMENT 9 s FIELD 10 s LEAF_NODE 11 s LEAF_NODE 9 , ARGUMENT 9 SSL2_PE_UNDEFINED_ERROR FIELD 10 SSL2_PE_UNDEFINED_ERROR LEAF_NODE 11 SSL2_PE_UNDEFINED_ERROR LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 SSLerr ( SSL_F_GET_SERVER_HELLO , ERR_R_INTERNAL_ERROR ) ; EXPR 7 SSLerr ( SSL_F_GET_SERVER_HELLO , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 8 SSLerr ( SSL_F_GET_SERVER_HELLO , ERR_R_INTERNAL_ERROR ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_GET_SERVER_HELLO FIELD 10 SSL_F_GET_SERVER_HELLO LEAF_NODE 11 SSL_F_GET_SERVER_HELLO LEAF_NODE 9 , ARGUMENT 9 ERR_R_INTERNAL_ERROR FIELD 10 ERR_R_INTERNAL_ERROR LEAF_NODE 11 ERR_R_INTERNAL_ERROR LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return ( - 1 ) ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 ( - 1 ) EXPR 8 ( - 1 ) LEAF_NODE 9 ( UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 s -> s2 -> conn_id_length = s -> s2 -> tmp . conn_id_length ; EXPR 4 s -> s2 -> conn_id_length = s -> s2 -> tmp . conn_id_length ASSIGN 5 s -> s2 -> conn_id_length = s -> s2 -> tmp . conn_id_length LVAL 6 s -> s2 -> conn_id_length FIELD 7 s -> s2 -> conn_id_length LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s2 LEAF_NODE 8 -> LEAF_NODE 8 conn_id_length ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 s -> s2 -> tmp . conn_id_length FIELD 7 s -> s2 -> tmp . conn_id_length LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s2 LEAF_NODE 8 -> LEAF_NODE 8 tmp LEAF_NODE 8 . LEAF_NODE 8 conn_id_length LEAF_NODE 4 ; LEAF_NODE 3 if LEAF_NODE 3 ( LEAF_NODE 3 s LEAF_NODE 3 -> LEAF_NODE 3 s2 LEAF_NODE 3 -> LEAF_NODE 3 conn_id_length LEAF_NODE 3 > LEAF_NODE 3 sizeof LEAF_NODE 3 s LEAF_NODE 3 -> LEAF_NODE 3 s2 LEAF_NODE 3 -> LEAF_NODE 3 conn_id LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 ssl2_return_error ( s , SSL2_PE_UNDEFINED_ERROR ) ; EXPR 5 ssl2_return_error ( s , SSL2_PE_UNDEFINED_ERROR ) FUNCTION_CALL 6 ssl2_return_error ( s , SSL2_PE_UNDEFINED_ERROR ) CALLEE 7 ssl2_return_error LEAF_NODE 8 ssl2_return_error LEAF_NODE 7 ( ARGUMENT 7 s FIELD 8 s LEAF_NODE 9 s LEAF_NODE 7 , ARGUMENT 7 SSL2_PE_UNDEFINED_ERROR FIELD 8 SSL2_PE_UNDEFINED_ERROR LEAF_NODE 9 SSL2_PE_UNDEFINED_ERROR LEAF_NODE 7 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_SSL2_CONNECTION_ID_TOO_LONG ) ; EXPR 5 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_SSL2_CONNECTION_ID_TOO_LONG ) FUNCTION_CALL 6 SSLerr ( SSL_F_GET_SERVER_HELLO , SSL_R_SSL2_CONNECTION_ID_TOO_LONG ) CALLEE 7 SSLerr LEAF_NODE 8 SSLerr LEAF_NODE 7 ( ARGUMENT 7 SSL_F_GET_SERVER_HELLO FIELD 8 SSL_F_GET_SERVER_HELLO LEAF_NODE 9 SSL_F_GET_SERVER_HELLO LEAF_NODE 7 , ARGUMENT 7 SSL_R_SSL2_CONNECTION_ID_TOO_LONG FIELD 8 SSL_R_SSL2_CONNECTION_ID_TOO_LONG LEAF_NODE 9 SSL_R_SSL2_CONNECTION_ID_TOO_LONG LEAF_NODE 7 ) LEAF_NODE 5 ; JUMP_STATEMENT 4 return - 1 ; KEYWORD 5 return LEAF_NODE 6 return DESTINATION 5 - 1 EXPR 6 - 1 UNARY_EXPR 7 - 1 UNARY_OPERATOR 8 - LEAF_NODE 9 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 5 ; LEAF_NODE 3 } EXPR_STATEMENT 3 memcpy ( s -> s2 -> conn_id , p , s -> s2 -> tmp . conn_id_length ) ; EXPR 4 memcpy ( s -> s2 -> conn_id , p , s -> s2 -> tmp . conn_id_length ) FUNCTION_CALL 5 memcpy ( s -> s2 -> conn_id , p , s -> s2 -> tmp . conn_id_length ) CALLEE 6 memcpy LEAF_NODE 7 memcpy LEAF_NODE 6 ( ARGUMENT 6 s -> s2 -> conn_id FIELD 7 s -> s2 -> conn_id LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s2 LEAF_NODE 8 -> LEAF_NODE 8 conn_id LEAF_NODE 6 , ARGUMENT 6 p FIELD 7 p LEAF_NODE 8 p LEAF_NODE 6 , ARGUMENT 6 s -> s2 -> tmp . conn_id_length FIELD 7 s -> s2 -> tmp . conn_id_length LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s2 LEAF_NODE 8 -> LEAF_NODE 8 tmp LEAF_NODE 8 . LEAF_NODE 8 conn_id_length LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return ( 1 ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ( 1 ) EXPR 5 ( 1 ) LEAF_NODE 6 ( FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 123, "project": "openssl_ast_vul_function_test_19", "target": 1}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 BIO_ADDR_make LEAF_NODE 3 BIO_ADDR_make PARAMETER_LIST 2 ( BIO_ADDR * ap , const struct sockaddr * sa ) LEAF_NODE 3 ( PARAMETER_DECL 3 BIO_ADDR * ap TYPE 4 BIO_ADDR * TYPE_NAME 5 BIO_ADDR LEAF_NODE 6 BIO_ADDR POINTER 5 * LEAF_NODE 6 * NAME 4 ap LEAF_NODE 5 ap LEAF_NODE 3 , PARAMETER_DECL 3 const struct sockaddr * sa TYPE 4 const struct sockaddr * TYPE_NAME 5 const struct sockaddr LEAF_NODE 6 const LEAF_NODE 6 struct LEAF_NODE 6 sockaddr POINTER 5 * LEAF_NODE 6 * NAME 4 sa LEAF_NODE 5 sa LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 sa -> sa_family == AF_INET EXPR 5 sa -> sa_family == AF_INET FIELD 6 sa -> sa_family LEAF_NODE 7 sa LEAF_NODE 7 -> LEAF_NODE 7 sa_family EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 AF_INET LEAF_NODE 7 AF_INET LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 memcpy LEAF_NODE 6 ( LEAF_NODE 6 & LEAF_NODE 6 ( LEAF_NODE 6 ap LEAF_NODE 6 -> LEAF_NODE 6 s_in LEAF_NODE 6 ) LEAF_NODE 6 , LEAF_NODE 6 sa LEAF_NODE 6 , LEAF_NODE 6 sizeof LEAF_NODE 6 ( LEAF_NODE 6 struct LEAF_NODE 6 sockaddr_in LEAF_NODE 6 ) LEAF_NODE 6 ) LEAF_NODE 6 ; JUMP_STATEMENT 6 return 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 1 EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 sa -> sa_family == AF_INET6 EXPR 5 sa -> sa_family == AF_INET6 FIELD 6 sa -> sa_family LEAF_NODE 7 sa LEAF_NODE 7 -> LEAF_NODE 7 sa_family EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 AF_INET6 LEAF_NODE 7 AF_INET6 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 memcpy LEAF_NODE 6 ( LEAF_NODE 6 & LEAF_NODE 6 ( LEAF_NODE 6 ap LEAF_NODE 6 -> LEAF_NODE 6 s_in6 LEAF_NODE 6 ) LEAF_NODE 6 , LEAF_NODE 6 sa LEAF_NODE 6 , LEAF_NODE 6 sizeof LEAF_NODE 6 ( LEAF_NODE 6 struct LEAF_NODE 6 sockaddr_in6 LEAF_NODE 6 ) LEAF_NODE 6 ) LEAF_NODE 6 ; JUMP_STATEMENT 6 return 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 1 EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 sa -> sa_family == AF_UNIX EXPR 5 sa -> sa_family == AF_UNIX FIELD 6 sa -> sa_family LEAF_NODE 7 sa LEAF_NODE 7 -> LEAF_NODE 7 sa_family EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 AF_UNIX LEAF_NODE 7 AF_UNIX LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 memcpy LEAF_NODE 6 ( LEAF_NODE 6 & LEAF_NODE 6 ( LEAF_NODE 6 ap LEAF_NODE 6 -> LEAF_NODE 6 s_un LEAF_NODE 6 ) LEAF_NODE 6 , LEAF_NODE 6 sa LEAF_NODE 6 , LEAF_NODE 6 sizeof LEAF_NODE 6 ( LEAF_NODE 6 struct LEAF_NODE 6 sockaddr_un LEAF_NODE 6 ) LEAF_NODE 6 ) LEAF_NODE 6 ; JUMP_STATEMENT 6 return 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 1 EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 124, "project": "openssl_ast_normal_function_test_120", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static BIGNUM * LEAF_NODE 3 static TYPE_NAME 3 BIGNUM LEAF_NODE 4 BIGNUM LEAF_NODE 3 * FUNCTION_NAME 2 srp_Calc_k LEAF_NODE 3 srp_Calc_k PARAMETER_LIST 2 ( BIGNUM * N , BIGNUM * g ) LEAF_NODE 3 ( PARAMETER_DECL 3 BIGNUM * N TYPE 4 BIGNUM * TYPE_NAME 5 BIGNUM LEAF_NODE 6 BIGNUM POINTER 5 * LEAF_NODE 6 * NAME 4 N LEAF_NODE 5 N LEAF_NODE 3 , PARAMETER_DECL 3 BIGNUM * g TYPE 4 BIGNUM * TYPE_NAME 5 BIGNUM LEAF_NODE 6 BIGNUM POINTER 5 * LEAF_NODE 6 * NAME 4 g LEAF_NODE 5 g LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned char [ SHA_DIGEST_LENGTH ] digest ; VAR_DECL 4 unsigned char [ SHA_DIGEST_LENGTH ] digest TYPE 5 unsigned char [ SHA_DIGEST_LENGTH ] TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char TYPE_SUFFIX 6 [ SHA_DIGEST_LENGTH ] LEAF_NODE 7 [ FIELD 7 SHA_DIGEST_LENGTH LEAF_NODE 8 SHA_DIGEST_LENGTH LEAF_NODE 7 ] NAME 5 digest LEAF_NODE 6 digest LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * tmp ; VAR_DECL 4 unsigned char * tmp TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 tmp LEAF_NODE 6 tmp LEAF_NODE 4 ; SIMPLE_DECL 3 EVP_MD_CTX ctxt ; VAR_DECL 4 EVP_MD_CTX ctxt TYPE 5 EVP_MD_CTX TYPE_NAME 6 EVP_MD_CTX LEAF_NODE 7 EVP_MD_CTX NAME 5 ctxt LEAF_NODE 6 ctxt LEAF_NODE 4 ; SIMPLE_DECL 3 int longg ; VAR_DECL 4 int longg TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 longg LEAF_NODE 6 longg LEAF_NODE 4 ; SIMPLE_DECL 3 int longN ; longN = BN_num_bytes ( N ) ; VAR_DECL 4 int longN ; longN = BN_num_bytes ( N ) TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 longN LEAF_NODE 6 longN LEAF_NODE 5 ; INIT 5 longN = BN_num_bytes ( N ) ASSIGN 6 longN = BN_num_bytes ( N ) LVAL 7 longN NAME 8 longN LEAF_NODE 9 longN ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 BN_num_bytes ( N ) FUNCTION_CALL 8 BN_num_bytes ( N ) CALLEE 9 BN_num_bytes LEAF_NODE 10 BN_num_bytes LEAF_NODE 9 ( ARGUMENT 9 N FIELD 10 N LEAF_NODE 11 N LEAF_NODE 9 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( tmp = OPENSSL_malloc ( longN ) ) == NULL EXPR 5 ( tmp = OPENSSL_malloc ( longN ) ) == NULL LEAF_NODE 6 ( ASSIGN 6 tmp = OPENSSL_malloc ( longN ) LVAL 7 tmp FIELD 8 tmp LEAF_NODE 9 tmp ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 OPENSSL_malloc ( longN ) FUNCTION_CALL 8 OPENSSL_malloc ( longN ) CALLEE 9 OPENSSL_malloc LEAF_NODE 10 OPENSSL_malloc LEAF_NODE 9 ( ARGUMENT 9 longN FIELD 10 longN LEAF_NODE 11 longN LEAF_NODE 9 ) LEAF_NODE 6 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return NULL ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 NULL EXPR 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 6 ; EXPR_STATEMENT 3 BN_bn2bin ( N , tmp ) ; EXPR 4 BN_bn2bin ( N , tmp ) FUNCTION_CALL 5 BN_bn2bin ( N , tmp ) CALLEE 6 BN_bn2bin LEAF_NODE 7 BN_bn2bin LEAF_NODE 6 ( ARGUMENT 6 N FIELD 7 N LEAF_NODE 8 N LEAF_NODE 6 , ARGUMENT 6 tmp FIELD 7 tmp LEAF_NODE 8 tmp LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_MD_CTX_init ( & ctxt ) ; EXPR 4 EVP_MD_CTX_init ( & ctxt ) FUNCTION_CALL 5 EVP_MD_CTX_init ( & ctxt ) CALLEE 6 EVP_MD_CTX_init LEAF_NODE 7 EVP_MD_CTX_init LEAF_NODE 6 ( ARGUMENT 6 & ctxt UNARY_EXPR 7 & ctxt UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 ctxt LEAF_NODE 9 ctxt LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_DigestInit_ex ( & ctxt , EVP_sha1 ( ) , NULL ) ; EXPR 4 EVP_DigestInit_ex ( & ctxt , EVP_sha1 ( ) , NULL ) FUNCTION_CALL 5 EVP_DigestInit_ex ( & ctxt , EVP_sha1 ( ) , NULL ) CALLEE 6 EVP_DigestInit_ex LEAF_NODE 7 EVP_DigestInit_ex LEAF_NODE 6 ( ARGUMENT 6 & ctxt UNARY_EXPR 7 & ctxt UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 ctxt LEAF_NODE 9 ctxt LEAF_NODE 6 , ARGUMENT 6 EVP_sha1 ( ) FUNCTION_CALL 7 EVP_sha1 ( ) CALLEE 8 EVP_sha1 LEAF_NODE 9 EVP_sha1 LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 6 , ARGUMENT 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_DigestUpdate ( & ctxt , tmp , longN ) ; EXPR 4 EVP_DigestUpdate ( & ctxt , tmp , longN ) FUNCTION_CALL 5 EVP_DigestUpdate ( & ctxt , tmp , longN ) CALLEE 6 EVP_DigestUpdate LEAF_NODE 7 EVP_DigestUpdate LEAF_NODE 6 ( ARGUMENT 6 & ctxt UNARY_EXPR 7 & ctxt UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 ctxt LEAF_NODE 9 ctxt LEAF_NODE 6 , ARGUMENT 6 tmp FIELD 7 tmp LEAF_NODE 8 tmp LEAF_NODE 6 , ARGUMENT 6 longN FIELD 7 longN LEAF_NODE 8 longN LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 memset ( tmp , 0 , longN ) ; EXPR 4 memset ( tmp , 0 , longN ) FUNCTION_CALL 5 memset ( tmp , 0 , longN ) CALLEE 6 memset LEAF_NODE 7 memset LEAF_NODE 6 ( ARGUMENT 6 tmp FIELD 7 tmp LEAF_NODE 8 tmp LEAF_NODE 6 , ARGUMENT 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 6 , ARGUMENT 6 longN FIELD 7 longN LEAF_NODE 8 longN LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 longg = BN_bn2bin ( g , tmp ) ; EXPR 4 longg = BN_bn2bin ( g , tmp ) ASSIGN 5 longg = BN_bn2bin ( g , tmp ) LVAL 6 longg FIELD 7 longg LEAF_NODE 8 longg ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 BN_bn2bin ( g , tmp ) FUNCTION_CALL 7 BN_bn2bin ( g , tmp ) CALLEE 8 BN_bn2bin LEAF_NODE 9 BN_bn2bin LEAF_NODE 8 ( ARGUMENT 8 g FIELD 9 g LEAF_NODE 10 g LEAF_NODE 8 , ARGUMENT 8 tmp FIELD 9 tmp LEAF_NODE 10 tmp LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_DigestUpdate ( & ctxt , tmp + longg , longN - longg ) ; EXPR 4 EVP_DigestUpdate ( & ctxt , tmp + longg , longN - longg ) FUNCTION_CALL 5 EVP_DigestUpdate ( & ctxt , tmp + longg , longN - longg ) CALLEE 6 EVP_DigestUpdate LEAF_NODE 7 EVP_DigestUpdate LEAF_NODE 6 ( ARGUMENT 6 & ctxt UNARY_EXPR 7 & ctxt UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 ctxt LEAF_NODE 9 ctxt LEAF_NODE 6 , ARGUMENT 6 tmp + longg FIELD 7 tmp LEAF_NODE 8 tmp LEAF_NODE 7 + FIELD 7 longg LEAF_NODE 8 longg LEAF_NODE 6 , ARGUMENT 6 longN - longg FIELD 7 longN LEAF_NODE 8 longN LEAF_NODE 7 - FIELD 7 longg LEAF_NODE 8 longg LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_DigestUpdate ( & ctxt , tmp , longg ) ; EXPR 4 EVP_DigestUpdate ( & ctxt , tmp , longg ) FUNCTION_CALL 5 EVP_DigestUpdate ( & ctxt , tmp , longg ) CALLEE 6 EVP_DigestUpdate LEAF_NODE 7 EVP_DigestUpdate LEAF_NODE 6 ( ARGUMENT 6 & ctxt UNARY_EXPR 7 & ctxt UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 ctxt LEAF_NODE 9 ctxt LEAF_NODE 6 , ARGUMENT 6 tmp FIELD 7 tmp LEAF_NODE 8 tmp LEAF_NODE 6 , ARGUMENT 6 longg FIELD 7 longg LEAF_NODE 8 longg LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 OPENSSL_free ( tmp ) ; EXPR 4 OPENSSL_free ( tmp ) FUNCTION_CALL 5 OPENSSL_free ( tmp ) CALLEE 6 OPENSSL_free LEAF_NODE 7 OPENSSL_free LEAF_NODE 6 ( ARGUMENT 6 tmp FIELD 7 tmp LEAF_NODE 8 tmp LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_DigestFinal_ex ( & ctxt , digest , NULL ) ; EXPR 4 EVP_DigestFinal_ex ( & ctxt , digest , NULL ) FUNCTION_CALL 5 EVP_DigestFinal_ex ( & ctxt , digest , NULL ) CALLEE 6 EVP_DigestFinal_ex LEAF_NODE 7 EVP_DigestFinal_ex LEAF_NODE 6 ( ARGUMENT 6 & ctxt UNARY_EXPR 7 & ctxt UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 ctxt LEAF_NODE 9 ctxt LEAF_NODE 6 , ARGUMENT 6 digest FIELD 7 digest LEAF_NODE 8 digest LEAF_NODE 6 , ARGUMENT 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_MD_CTX_cleanup ( & ctxt ) ; EXPR 4 EVP_MD_CTX_cleanup ( & ctxt ) FUNCTION_CALL 5 EVP_MD_CTX_cleanup ( & ctxt ) CALLEE 6 EVP_MD_CTX_cleanup LEAF_NODE 7 EVP_MD_CTX_cleanup LEAF_NODE 6 ( ARGUMENT 6 & ctxt UNARY_EXPR 7 & ctxt UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 ctxt LEAF_NODE 9 ctxt LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return BN_bin2bn ( digest , sizeof ( digest ) , NULL ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 BN_bin2bn ( digest , sizeof ( digest ) , NULL ) EXPR 5 BN_bin2bn ( digest , sizeof ( digest ) , NULL ) FUNCTION_CALL 6 BN_bin2bn ( digest , sizeof ( digest ) , NULL ) CALLEE 7 BN_bin2bn LEAF_NODE 8 BN_bin2bn LEAF_NODE 7 ( ARGUMENT 7 digest FIELD 8 digest LEAF_NODE 9 digest LEAF_NODE 7 , ARGUMENT 7 sizeof ( digest ) FUNCTION_CALL 8 sizeof ( digest ) CALLEE 9 sizeof LEAF_NODE 10 sizeof LEAF_NODE 9 ( ARGUMENT 9 digest FIELD 10 digest LEAF_NODE 11 digest LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 125, "project": "openssl_ast_vul_function_test_15", "target": 1}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 asn1_cb LEAF_NODE 3 asn1_cb PARAMETER_LIST 2 ( const char * elem , int len , void * bitstr ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * elem TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 elem LEAF_NODE 5 elem LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 , PARAMETER_DECL 3 void * bitstr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 bitstr LEAF_NODE 5 bitstr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 tag_exp_arg * arg ; arg = bitstr ; VAR_DECL 4 tag_exp_arg * arg ; arg = bitstr TYPE 5 tag_exp_arg * TYPE_NAME 6 tag_exp_arg LEAF_NODE 7 tag_exp_arg POINTER 6 * LEAF_NODE 7 * NAME 5 arg LEAF_NODE 6 arg LEAF_NODE 5 ; INIT 5 arg = bitstr ASSIGN 6 arg = bitstr LVAL 7 arg NAME 8 arg LEAF_NODE 9 arg ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 bitstr FIELD 8 bitstr LEAF_NODE 9 bitstr LEAF_NODE 4 ; SIMPLE_DECL 3 int i ; VAR_DECL 4 int i TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; SIMPLE_DECL 3 int utype ; VAR_DECL 4 int utype TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 utype LEAF_NODE 6 utype LEAF_NODE 4 ; SIMPLE_DECL 3 int vlen ; vlen = 0 ; VAR_DECL 4 int vlen ; vlen = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 vlen LEAF_NODE 6 vlen LEAF_NODE 5 ; INIT 5 vlen = 0 ASSIGN 6 vlen = 0 LVAL 7 vlen NAME 8 vlen LEAF_NODE 9 vlen ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 const char * p , const char * vstart ; vstart = NULL ; INIT_DECL_LIST 4 const char * p , const char * vstart ; vstart = NULL VAR_DECL 5 const char * p TYPE 6 const char * TYPE_NAME 7 const char LEAF_NODE 8 const LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 p LEAF_NODE 7 p LEAF_NODE 5 , VAR_DECL 5 const char * vstart ; vstart = NULL TYPE 6 const char * TYPE_NAME 7 const char LEAF_NODE 8 const LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 vstart LEAF_NODE 7 vstart LEAF_NODE 6 ; INIT 6 vstart = NULL ASSIGN 7 vstart = NULL LVAL 8 vstart NAME 9 vstart LEAF_NODE 10 vstart ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int tmp_tag , int tmp_class ; INIT_DECL_LIST 4 int tmp_tag , int tmp_class VAR_DECL 5 int tmp_tag TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 tmp_tag LEAF_NODE 7 tmp_tag LEAF_NODE 5 , VAR_DECL 5 int tmp_class TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 tmp_class LEAF_NODE 7 tmp_class LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 elem == NULL EXPR 5 elem == NULL FIELD 6 elem LEAF_NODE 7 elem EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return - 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 - 1 EXPR 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 6 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 , p = elem ; EXPR 5 i = 0 , p = elem ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 , ASSIGN 6 p = elem LVAL 7 p FIELD 8 p LEAF_NODE 9 p ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 elem FIELD 8 elem LEAF_NODE 9 elem LEAF_NODE 5 ; CONDITION 4 i < len EXPR 5 i < len FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 len LEAF_NODE 7 len LEAF_NODE 4 ; FOR_EXPR 4 p ++ , i ++ EXPR 5 p ++ , i ++ FIELD 6 p ++ LEAF_NODE 7 p LEAF_NODE 7 ++ LEAF_NODE 6 , FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * p == ':' EXPR 8 * p == ':' UNARY_EXPR 9 * p UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 p LEAF_NODE 11 p EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 ':' LEAF_NODE 10 ':' LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 vstart = p + 1 ; EXPR 10 vstart = p + 1 ASSIGN 11 vstart = p + 1 LVAL 12 vstart FIELD 13 vstart LEAF_NODE 14 vstart ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 p + 1 FIELD 13 p LEAF_NODE 14 p LEAF_NODE 13 + FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; EXPR_STATEMENT 9 vlen = len - ( vstart - elem ) ; EXPR 10 vlen = len - ( vstart - elem ) ASSIGN 11 vlen = len - ( vstart - elem ) LVAL 12 vlen FIELD 13 vlen LEAF_NODE 14 vlen ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 len - ( vstart - elem ) FIELD 13 len LEAF_NODE 14 len LEAF_NODE 13 - LEAF_NODE 13 ( FIELD 13 vstart LEAF_NODE 14 vstart LEAF_NODE 13 - FIELD 13 elem LEAF_NODE 14 elem LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 len = p - elem ; EXPR 10 len = p - elem ASSIGN 11 len = p - elem LVAL 12 len FIELD 13 len LEAF_NODE 14 len ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 p - elem FIELD 13 p LEAF_NODE 14 p LEAF_NODE 13 - FIELD 13 elem LEAF_NODE 14 elem LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 utype = asn1_str2tag ( elem , len ) ; EXPR 4 utype = asn1_str2tag ( elem , len ) ASSIGN 5 utype = asn1_str2tag ( elem , len ) LVAL 6 utype FIELD 7 utype LEAF_NODE 8 utype ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 asn1_str2tag ( elem , len ) FUNCTION_CALL 7 asn1_str2tag ( elem , len ) CALLEE 8 asn1_str2tag LEAF_NODE 9 asn1_str2tag LEAF_NODE 8 ( ARGUMENT 8 elem FIELD 9 elem LEAF_NODE 10 elem LEAF_NODE 8 , ARGUMENT 8 len FIELD 9 len LEAF_NODE 10 len LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 utype == - 1 EXPR 5 utype == - 1 FIELD 6 utype LEAF_NODE 7 utype EQ_OPERATOR 6 == LEAF_NODE 7 == UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASN1err ( ASN1_F_ASN1_CB , ASN1_R_UNKNOWN_TAG ) ; EXPR 7 ASN1err ( ASN1_F_ASN1_CB , ASN1_R_UNKNOWN_TAG ) FUNCTION_CALL 8 ASN1err ( ASN1_F_ASN1_CB , ASN1_R_UNKNOWN_TAG ) CALLEE 9 ASN1err LEAF_NODE 10 ASN1err LEAF_NODE 9 ( ARGUMENT 9 ASN1_F_ASN1_CB FIELD 10 ASN1_F_ASN1_CB LEAF_NODE 11 ASN1_F_ASN1_CB LEAF_NODE 9 , ARGUMENT 9 ASN1_R_UNKNOWN_TAG FIELD 10 ASN1_R_UNKNOWN_TAG LEAF_NODE 11 ASN1_R_UNKNOWN_TAG LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ERR_add_error_data ( 2 , \"tag=\" , elem ) ; EXPR 7 ERR_add_error_data ( 2 , \"tag=\" , elem ) FUNCTION_CALL 8 ERR_add_error_data ( 2 , \"tag=\" , elem ) CALLEE 9 ERR_add_error_data LEAF_NODE 10 ERR_add_error_data LEAF_NODE 9 ( ARGUMENT 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 , ARGUMENT 9 \"tag=\" FIELD 10 \"tag=\" LEAF_NODE 11 \"tag=\" LEAF_NODE 9 , ARGUMENT 9 elem FIELD 10 elem LEAF_NODE 11 elem LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ( utype & ASN1_GEN_FLAG ) EXPR 5 ! ( utype & ASN1_GEN_FLAG ) UNARY_EXPR 6 ! ( utype & ASN1_GEN_FLAG ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! LEAF_NODE 7 ( FIELD 7 utype LEAF_NODE 8 utype LEAF_NODE 7 & FIELD 7 ASN1_GEN_FLAG LEAF_NODE 8 ASN1_GEN_FLAG LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 arg -> utype = utype ; EXPR 7 arg -> utype = utype ASSIGN 8 arg -> utype = utype LVAL 9 arg -> utype FIELD 10 arg -> utype LEAF_NODE 11 arg LEAF_NODE 11 -> LEAF_NODE 11 utype ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 utype FIELD 10 utype LEAF_NODE 11 utype LEAF_NODE 7 ; EXPR_STATEMENT 6 arg -> str = vstart ; EXPR 7 arg -> str = vstart ASSIGN 8 arg -> str = vstart LVAL 9 arg -> str FIELD 10 arg -> str LEAF_NODE 11 arg LEAF_NODE 11 -> LEAF_NODE 11 str ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 vstart FIELD 10 vstart LEAF_NODE 11 vstart LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! vstart && elem [ len ] EXPR 8 ! vstart && elem [ len ] AND 9 ! vstart && elem [ len ] EXPR 10 ! vstart UNARY_EXPR 11 ! vstart UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FIELD 12 vstart LEAF_NODE 13 vstart LEAF_NODE 10 && EXPR 10 elem [ len ] FIELD 11 elem [ len ] LEAF_NODE 12 elem LEAF_NODE 12 [ EXPR 12 len FIELD 13 len LEAF_NODE 14 len LEAF_NODE 12 ] LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ASN1err ( ASN1_F_ASN1_CB , ASN1_R_MISSING_VALUE ) ; EXPR 10 ASN1err ( ASN1_F_ASN1_CB , ASN1_R_MISSING_VALUE ) FUNCTION_CALL 11 ASN1err ( ASN1_F_ASN1_CB , ASN1_R_MISSING_VALUE ) CALLEE 12 ASN1err LEAF_NODE 13 ASN1err LEAF_NODE 12 ( ARGUMENT 12 ASN1_F_ASN1_CB FIELD 13 ASN1_F_ASN1_CB LEAF_NODE 14 ASN1_F_ASN1_CB LEAF_NODE 12 , ARGUMENT 12 ASN1_R_MISSING_VALUE FIELD 13 ASN1_R_MISSING_VALUE LEAF_NODE 14 ASN1_R_MISSING_VALUE LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return - 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 - 1 EXPR 11 - 1 UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 utype EXPR 5 utype FIELD 6 utype LEAF_NODE 7 utype LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case ASN1_GEN_FLAG_IMP : LEAF_NODE 7 case LEAF_NODE 7 ASN1_GEN_FLAG_IMP LEAF_NODE 7 : SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 arg -> imp_tag != - 1 EXPR 8 arg -> imp_tag != - 1 FIELD 9 arg -> imp_tag LEAF_NODE 10 arg LEAF_NODE 10 -> LEAF_NODE 10 imp_tag EQ_OPERATOR 9 != LEAF_NODE 10 != UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ASN1err ( ASN1_F_ASN1_CB , ASN1_R_ILLEGAL_NESTED_TAGGING ) ; EXPR 10 ASN1err ( ASN1_F_ASN1_CB , ASN1_R_ILLEGAL_NESTED_TAGGING ) FUNCTION_CALL 11 ASN1err ( ASN1_F_ASN1_CB , ASN1_R_ILLEGAL_NESTED_TAGGING ) CALLEE 12 ASN1err LEAF_NODE 13 ASN1err LEAF_NODE 12 ( ARGUMENT 12 ASN1_F_ASN1_CB FIELD 13 ASN1_F_ASN1_CB LEAF_NODE 14 ASN1_F_ASN1_CB LEAF_NODE 12 , ARGUMENT 12 ASN1_R_ILLEGAL_NESTED_TAGGING FIELD 13 ASN1_R_ILLEGAL_NESTED_TAGGING LEAF_NODE 14 ASN1_R_ILLEGAL_NESTED_TAGGING LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return - 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 - 1 EXPR 11 - 1 UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! parse_tagging ( vstart , vlen , & arg -> imp_tag , & arg -> imp_class ) EXPR 8 ! parse_tagging ( vstart , vlen , & arg -> imp_tag , & arg -> imp_class ) UNARY_EXPR 9 ! parse_tagging ( vstart , vlen , & arg -> imp_tag , & arg -> imp_class ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 parse_tagging ( vstart , vlen , & arg -> imp_tag , & arg -> imp_class ) CALLEE 11 parse_tagging LEAF_NODE 12 parse_tagging LEAF_NODE 11 ( ARGUMENT 11 vstart FIELD 12 vstart LEAF_NODE 13 vstart LEAF_NODE 11 , ARGUMENT 11 vlen FIELD 12 vlen LEAF_NODE 13 vlen LEAF_NODE 11 , ARGUMENT 11 & arg -> imp_tag UNARY_EXPR 12 & arg -> imp_tag UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 arg -> imp_tag LEAF_NODE 14 arg LEAF_NODE 14 -> LEAF_NODE 14 imp_tag LEAF_NODE 11 , ARGUMENT 11 & arg -> imp_class UNARY_EXPR 12 & arg -> imp_class UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 arg -> imp_class LEAF_NODE 14 arg LEAF_NODE 14 -> LEAF_NODE 14 imp_class LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return - 1 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 - 1 EXPR 10 - 1 UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 case ASN1_GEN_FLAG_EXP : LEAF_NODE 7 case LEAF_NODE 7 ASN1_GEN_FLAG_EXP LEAF_NODE 7 : SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! parse_tagging ( vstart , vlen , & tmp_tag , & tmp_class ) EXPR 8 ! parse_tagging ( vstart , vlen , & tmp_tag , & tmp_class ) UNARY_EXPR 9 ! parse_tagging ( vstart , vlen , & tmp_tag , & tmp_class ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 parse_tagging ( vstart , vlen , & tmp_tag , & tmp_class ) CALLEE 11 parse_tagging LEAF_NODE 12 parse_tagging LEAF_NODE 11 ( ARGUMENT 11 vstart FIELD 12 vstart LEAF_NODE 13 vstart LEAF_NODE 11 , ARGUMENT 11 vlen FIELD 12 vlen LEAF_NODE 13 vlen LEAF_NODE 11 , ARGUMENT 11 & tmp_tag UNARY_EXPR 12 & tmp_tag UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 tmp_tag LEAF_NODE 14 tmp_tag LEAF_NODE 11 , ARGUMENT 11 & tmp_class UNARY_EXPR 12 & tmp_class UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 tmp_class LEAF_NODE 14 tmp_class LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return - 1 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 - 1 EXPR 10 - 1 UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! append_exp ( arg , tmp_tag , tmp_class , 1 , 0 , 0 ) EXPR 8 ! append_exp ( arg , tmp_tag , tmp_class , 1 , 0 , 0 ) UNARY_EXPR 9 ! append_exp ( arg , tmp_tag , tmp_class , 1 , 0 , 0 ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 append_exp ( arg , tmp_tag , tmp_class , 1 , 0 , 0 ) CALLEE 11 append_exp LEAF_NODE 12 append_exp LEAF_NODE 11 ( ARGUMENT 11 arg FIELD 12 arg LEAF_NODE 13 arg LEAF_NODE 11 , ARGUMENT 11 tmp_tag FIELD 12 tmp_tag LEAF_NODE 13 tmp_tag LEAF_NODE 11 , ARGUMENT 11 tmp_class FIELD 12 tmp_class LEAF_NODE 13 tmp_class LEAF_NODE 11 , ARGUMENT 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return - 1 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 - 1 EXPR 10 - 1 UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 case ASN1_GEN_FLAG_SEQWRAP : LEAF_NODE 7 case LEAF_NODE 7 ASN1_GEN_FLAG_SEQWRAP LEAF_NODE 7 : SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! append_exp ( arg , V_ASN1_SEQUENCE , V_ASN1_UNIVERSAL , 1 , 0 , 1 ) EXPR 8 ! append_exp ( arg , V_ASN1_SEQUENCE , V_ASN1_UNIVERSAL , 1 , 0 , 1 ) UNARY_EXPR 9 ! append_exp ( arg , V_ASN1_SEQUENCE , V_ASN1_UNIVERSAL , 1 , 0 , 1 ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 append_exp ( arg , V_ASN1_SEQUENCE , V_ASN1_UNIVERSAL , 1 , 0 , 1 ) CALLEE 11 append_exp LEAF_NODE 12 append_exp LEAF_NODE 11 ( ARGUMENT 11 arg FIELD 12 arg LEAF_NODE 13 arg LEAF_NODE 11 , ARGUMENT 11 V_ASN1_SEQUENCE FIELD 12 V_ASN1_SEQUENCE LEAF_NODE 13 V_ASN1_SEQUENCE LEAF_NODE 11 , ARGUMENT 11 V_ASN1_UNIVERSAL FIELD 12 V_ASN1_UNIVERSAL LEAF_NODE 13 V_ASN1_UNIVERSAL LEAF_NODE 11 , ARGUMENT 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 , ARGUMENT 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return - 1 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 - 1 EXPR 10 - 1 UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 case ASN1_GEN_FLAG_SETWRAP : LEAF_NODE 7 case LEAF_NODE 7 ASN1_GEN_FLAG_SETWRAP LEAF_NODE 7 : SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! append_exp ( arg , V_ASN1_SET , V_ASN1_UNIVERSAL , 1 , 0 , 1 ) EXPR 8 ! append_exp ( arg , V_ASN1_SET , V_ASN1_UNIVERSAL , 1 , 0 , 1 ) UNARY_EXPR 9 ! append_exp ( arg , V_ASN1_SET , V_ASN1_UNIVERSAL , 1 , 0 , 1 ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 append_exp ( arg , V_ASN1_SET , V_ASN1_UNIVERSAL , 1 , 0 , 1 ) CALLEE 11 append_exp LEAF_NODE 12 append_exp LEAF_NODE 11 ( ARGUMENT 11 arg FIELD 12 arg LEAF_NODE 13 arg LEAF_NODE 11 , ARGUMENT 11 V_ASN1_SET FIELD 12 V_ASN1_SET LEAF_NODE 13 V_ASN1_SET LEAF_NODE 11 , ARGUMENT 11 V_ASN1_UNIVERSAL FIELD 12 V_ASN1_UNIVERSAL LEAF_NODE 13 V_ASN1_UNIVERSAL LEAF_NODE 11 , ARGUMENT 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 , ARGUMENT 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return - 1 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 - 1 EXPR 10 - 1 UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 case ASN1_GEN_FLAG_BITWRAP : LEAF_NODE 7 case LEAF_NODE 7 ASN1_GEN_FLAG_BITWRAP LEAF_NODE 7 : SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! append_exp ( arg , V_ASN1_BIT_STRING , V_ASN1_UNIVERSAL , 0 , 1 , 1 ) EXPR 8 ! append_exp ( arg , V_ASN1_BIT_STRING , V_ASN1_UNIVERSAL , 0 , 1 , 1 ) UNARY_EXPR 9 ! append_exp ( arg , V_ASN1_BIT_STRING , V_ASN1_UNIVERSAL , 0 , 1 , 1 ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 append_exp ( arg , V_ASN1_BIT_STRING , V_ASN1_UNIVERSAL , 0 , 1 , 1 ) CALLEE 11 append_exp LEAF_NODE 12 append_exp LEAF_NODE 11 ( ARGUMENT 11 arg FIELD 12 arg LEAF_NODE 13 arg LEAF_NODE 11 , ARGUMENT 11 V_ASN1_BIT_STRING FIELD 12 V_ASN1_BIT_STRING LEAF_NODE 13 V_ASN1_BIT_STRING LEAF_NODE 11 , ARGUMENT 11 V_ASN1_UNIVERSAL FIELD 12 V_ASN1_UNIVERSAL LEAF_NODE 13 V_ASN1_UNIVERSAL LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 , ARGUMENT 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 , ARGUMENT 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return - 1 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 - 1 EXPR 10 - 1 UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 case ASN1_GEN_FLAG_OCTWRAP : LEAF_NODE 7 case LEAF_NODE 7 ASN1_GEN_FLAG_OCTWRAP LEAF_NODE 7 : SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! append_exp ( arg , V_ASN1_OCTET_STRING , V_ASN1_UNIVERSAL , 0 , 0 , 1 ) EXPR 8 ! append_exp ( arg , V_ASN1_OCTET_STRING , V_ASN1_UNIVERSAL , 0 , 0 , 1 ) UNARY_EXPR 9 ! append_exp ( arg , V_ASN1_OCTET_STRING , V_ASN1_UNIVERSAL , 0 , 0 , 1 ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 append_exp ( arg , V_ASN1_OCTET_STRING , V_ASN1_UNIVERSAL , 0 , 0 , 1 ) CALLEE 11 append_exp LEAF_NODE 12 append_exp LEAF_NODE 11 ( ARGUMENT 11 arg FIELD 12 arg LEAF_NODE 13 arg LEAF_NODE 11 , ARGUMENT 11 V_ASN1_OCTET_STRING FIELD 12 V_ASN1_OCTET_STRING LEAF_NODE 13 V_ASN1_OCTET_STRING LEAF_NODE 11 , ARGUMENT 11 V_ASN1_UNIVERSAL FIELD 12 V_ASN1_UNIVERSAL LEAF_NODE 13 V_ASN1_UNIVERSAL LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 , ARGUMENT 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return - 1 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 - 1 EXPR 10 - 1 UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 case ASN1_GEN_FLAG_FORMAT : LEAF_NODE 7 case LEAF_NODE 7 ASN1_GEN_FLAG_FORMAT LEAF_NODE 7 : SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! vstart EXPR 8 ! vstart UNARY_EXPR 9 ! vstart UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FIELD 10 vstart LEAF_NODE 11 vstart LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ASN1err ( ASN1_F_ASN1_CB , ASN1_R_UNKNOWN_FORMAT ) ; EXPR 10 ASN1err ( ASN1_F_ASN1_CB , ASN1_R_UNKNOWN_FORMAT ) FUNCTION_CALL 11 ASN1err ( ASN1_F_ASN1_CB , ASN1_R_UNKNOWN_FORMAT ) CALLEE 12 ASN1err LEAF_NODE 13 ASN1err LEAF_NODE 12 ( ARGUMENT 12 ASN1_F_ASN1_CB FIELD 13 ASN1_F_ASN1_CB LEAF_NODE 14 ASN1_F_ASN1_CB LEAF_NODE 12 , ARGUMENT 12 ASN1_R_UNKNOWN_FORMAT FIELD 13 ASN1_R_UNKNOWN_FORMAT LEAF_NODE 14 ASN1_R_UNKNOWN_FORMAT LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return - 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 - 1 EXPR 11 - 1 UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 strncmp ( vstart , \"ASCII\" , 5 ) == 0 EXPR 8 strncmp ( vstart , \"ASCII\" , 5 ) == 0 FUNCTION_CALL 9 strncmp ( vstart , \"ASCII\" , 5 ) CALLEE 10 strncmp LEAF_NODE 11 strncmp LEAF_NODE 10 ( ARGUMENT 10 vstart FIELD 11 vstart LEAF_NODE 12 vstart LEAF_NODE 10 , ARGUMENT 10 \"ASCII\" FIELD 11 \"ASCII\" LEAF_NODE 12 \"ASCII\" LEAF_NODE 10 , ARGUMENT 10 5 FIELD 11 5 LEAF_NODE 12 5 LEAF_NODE 10 ) EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 arg -> format = ASN1_GEN_FORMAT_ASCII ; EXPR 9 arg -> format = ASN1_GEN_FORMAT_ASCII ASSIGN 10 arg -> format = ASN1_GEN_FORMAT_ASCII LVAL 11 arg -> format FIELD 12 arg -> format LEAF_NODE 13 arg LEAF_NODE 13 -> LEAF_NODE 13 format ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ASN1_GEN_FORMAT_ASCII FIELD 12 ASN1_GEN_FORMAT_ASCII LEAF_NODE 13 ASN1_GEN_FORMAT_ASCII LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 strncmp ( vstart , \"UTF8\" , 4 ) == 0 EXPR 10 strncmp ( vstart , \"UTF8\" , 4 ) == 0 FUNCTION_CALL 11 strncmp ( vstart , \"UTF8\" , 4 ) CALLEE 12 strncmp LEAF_NODE 13 strncmp LEAF_NODE 12 ( ARGUMENT 12 vstart FIELD 13 vstart LEAF_NODE 14 vstart LEAF_NODE 12 , ARGUMENT 12 \"UTF8\" FIELD 13 \"UTF8\" LEAF_NODE 14 \"UTF8\" LEAF_NODE 12 , ARGUMENT 12 4 FIELD 13 4 LEAF_NODE 14 4 LEAF_NODE 12 ) EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ) STATEMENTS 9 EXPR_STATEMENT 10 arg -> format = ASN1_GEN_FORMAT_UTF8 ; EXPR 11 arg -> format = ASN1_GEN_FORMAT_UTF8 ASSIGN 12 arg -> format = ASN1_GEN_FORMAT_UTF8 LVAL 13 arg -> format FIELD 14 arg -> format LEAF_NODE 15 arg LEAF_NODE 15 -> LEAF_NODE 15 format ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ASN1_GEN_FORMAT_UTF8 FIELD 14 ASN1_GEN_FORMAT_UTF8 LEAF_NODE 15 ASN1_GEN_FORMAT_UTF8 LEAF_NODE 11 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 strncmp ( vstart , \"HEX\" , 3 ) == 0 EXPR 10 strncmp ( vstart , \"HEX\" , 3 ) == 0 FUNCTION_CALL 11 strncmp ( vstart , \"HEX\" , 3 ) CALLEE 12 strncmp LEAF_NODE 13 strncmp LEAF_NODE 12 ( ARGUMENT 12 vstart FIELD 13 vstart LEAF_NODE 14 vstart LEAF_NODE 12 , ARGUMENT 12 \"HEX\" FIELD 13 \"HEX\" LEAF_NODE 14 \"HEX\" LEAF_NODE 12 , ARGUMENT 12 3 FIELD 13 3 LEAF_NODE 14 3 LEAF_NODE 12 ) EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ) STATEMENTS 9 EXPR_STATEMENT 10 arg -> format = ASN1_GEN_FORMAT_HEX ; EXPR 11 arg -> format = ASN1_GEN_FORMAT_HEX ASSIGN 12 arg -> format = ASN1_GEN_FORMAT_HEX LVAL 13 arg -> format FIELD 14 arg -> format LEAF_NODE 15 arg LEAF_NODE 15 -> LEAF_NODE 15 format ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ASN1_GEN_FORMAT_HEX FIELD 14 ASN1_GEN_FORMAT_HEX LEAF_NODE 15 ASN1_GEN_FORMAT_HEX LEAF_NODE 11 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 strncmp ( vstart , \"BITLIST\" , 7 ) == 0 EXPR 10 strncmp ( vstart , \"BITLIST\" , 7 ) == 0 FUNCTION_CALL 11 strncmp ( vstart , \"BITLIST\" , 7 ) CALLEE 12 strncmp LEAF_NODE 13 strncmp LEAF_NODE 12 ( ARGUMENT 12 vstart FIELD 13 vstart LEAF_NODE 14 vstart LEAF_NODE 12 , ARGUMENT 12 \"BITLIST\" FIELD 13 \"BITLIST\" LEAF_NODE 14 \"BITLIST\" LEAF_NODE 12 , ARGUMENT 12 7 FIELD 13 7 LEAF_NODE 14 7 LEAF_NODE 12 ) EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ) STATEMENTS 9 EXPR_STATEMENT 10 arg -> format = ASN1_GEN_FORMAT_BITLIST ; EXPR 11 arg -> format = ASN1_GEN_FORMAT_BITLIST ASSIGN 12 arg -> format = ASN1_GEN_FORMAT_BITLIST LVAL 13 arg -> format FIELD 14 arg -> format LEAF_NODE 15 arg LEAF_NODE 15 -> LEAF_NODE 15 format ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ASN1_GEN_FORMAT_BITLIST FIELD 14 ASN1_GEN_FORMAT_BITLIST LEAF_NODE 15 ASN1_GEN_FORMAT_BITLIST LEAF_NODE 11 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ASN1err ( ASN1_F_ASN1_CB , ASN1_R_UNKNOWN_FORMAT ) ; EXPR 10 ASN1err ( ASN1_F_ASN1_CB , ASN1_R_UNKNOWN_FORMAT ) FUNCTION_CALL 11 ASN1err ( ASN1_F_ASN1_CB , ASN1_R_UNKNOWN_FORMAT ) CALLEE 12 ASN1err LEAF_NODE 13 ASN1err LEAF_NODE 12 ( ARGUMENT 12 ASN1_F_ASN1_CB FIELD 13 ASN1_F_ASN1_CB LEAF_NODE 14 ASN1_F_ASN1_CB LEAF_NODE 12 , ARGUMENT 12 ASN1_R_UNKNOWN_FORMAT FIELD 13 ASN1_R_UNKNOWN_FORMAT LEAF_NODE 14 ASN1_R_UNKNOWN_FORMAT LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return - 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 - 1 EXPR 11 - 1 UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 126, "project": "openssl_ast_normal_function_test_157", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 ASN1_STRING_TABLE * TYPE_NAME 3 ASN1_STRING_TABLE LEAF_NODE 4 ASN1_STRING_TABLE LEAF_NODE 3 * FUNCTION_NAME 2 ASN1_STRING_TABLE_get LEAF_NODE 3 ASN1_STRING_TABLE_get PARAMETER_LIST 2 ( int nid ) LEAF_NODE 3 ( PARAMETER_DECL 3 int nid TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 nid LEAF_NODE 5 nid LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int idx ; VAR_DECL 4 int idx TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 idx LEAF_NODE 6 idx LEAF_NODE 4 ; SIMPLE_DECL 3 ASN1_STRING_TABLE fnd ; VAR_DECL 4 ASN1_STRING_TABLE fnd TYPE 5 ASN1_STRING_TABLE TYPE_NAME 6 ASN1_STRING_TABLE LEAF_NODE 7 ASN1_STRING_TABLE NAME 5 fnd LEAF_NODE 6 fnd LEAF_NODE 4 ; EXPR_STATEMENT 3 fnd . nid = nid ; EXPR 4 fnd . nid = nid ASSIGN 5 fnd . nid = nid LVAL 6 fnd . nid FIELD 7 fnd . nid LEAF_NODE 8 fnd LEAF_NODE 8 . LEAF_NODE 8 nid ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 nid FIELD 7 nid LEAF_NODE 8 nid LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 stable EXPR 5 stable FIELD 6 stable LEAF_NODE 7 stable LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 idx = sk_ASN1_STRING_TABLE_find ( stable , & fnd ) ; EXPR 7 idx = sk_ASN1_STRING_TABLE_find ( stable , & fnd ) ASSIGN 8 idx = sk_ASN1_STRING_TABLE_find ( stable , & fnd ) LVAL 9 idx FIELD 10 idx LEAF_NODE 11 idx ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 sk_ASN1_STRING_TABLE_find ( stable , & fnd ) FUNCTION_CALL 10 sk_ASN1_STRING_TABLE_find ( stable , & fnd ) CALLEE 11 sk_ASN1_STRING_TABLE_find LEAF_NODE 12 sk_ASN1_STRING_TABLE_find LEAF_NODE 11 ( ARGUMENT 11 stable FIELD 12 stable LEAF_NODE 13 stable LEAF_NODE 11 , ARGUMENT 11 & fnd UNARY_EXPR 12 & fnd UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 fnd LEAF_NODE 14 fnd LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 idx >= 0 EXPR 8 idx >= 0 FIELD 9 idx LEAF_NODE 10 idx REL_OPERATOR 9 >= LEAF_NODE 10 >= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return sk_ASN1_STRING_TABLE_value ( stable , idx ) ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 sk_ASN1_STRING_TABLE_value ( stable , idx ) EXPR 10 sk_ASN1_STRING_TABLE_value ( stable , idx ) FUNCTION_CALL 11 sk_ASN1_STRING_TABLE_value ( stable , idx ) CALLEE 12 sk_ASN1_STRING_TABLE_value LEAF_NODE 13 sk_ASN1_STRING_TABLE_value LEAF_NODE 12 ( ARGUMENT 12 stable FIELD 13 stable LEAF_NODE 14 stable LEAF_NODE 12 , ARGUMENT 12 idx FIELD 13 idx LEAF_NODE 14 idx LEAF_NODE 12 ) LEAF_NODE 9 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return OBJ_bsearch_table ( & fnd , tbl_standard , OSSL_NELEM ( tbl_standard ) ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 OBJ_bsearch_table ( & fnd , tbl_standard , OSSL_NELEM ( tbl_standard ) ) EXPR 5 OBJ_bsearch_table ( & fnd , tbl_standard , OSSL_NELEM ( tbl_standard ) ) FUNCTION_CALL 6 OBJ_bsearch_table ( & fnd , tbl_standard , OSSL_NELEM ( tbl_standard ) ) CALLEE 7 OBJ_bsearch_table LEAF_NODE 8 OBJ_bsearch_table LEAF_NODE 7 ( ARGUMENT 7 & fnd UNARY_EXPR 8 & fnd UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 fnd LEAF_NODE 10 fnd LEAF_NODE 7 , ARGUMENT 7 tbl_standard FIELD 8 tbl_standard LEAF_NODE 9 tbl_standard LEAF_NODE 7 , ARGUMENT 7 OSSL_NELEM ( tbl_standard ) FUNCTION_CALL 8 OSSL_NELEM ( tbl_standard ) CALLEE 9 OSSL_NELEM LEAF_NODE 10 OSSL_NELEM LEAF_NODE 9 ( ARGUMENT 9 tbl_standard FIELD 10 tbl_standard LEAF_NODE 11 tbl_standard LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 127, "project": "openssl_ast_normal_function_test_12", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ssl_add_clienthello_use_srtp_ext LEAF_NODE 3 ssl_add_clienthello_use_srtp_ext PARAMETER_LIST 2 ( SSL * s , unsigned char * p , int * len , int maxlen ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * p TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 p LEAF_NODE 5 p LEAF_NODE 3 , PARAMETER_DECL 3 int * len TYPE 4 int * TYPE_NAME 5 int LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 , PARAMETER_DECL 3 int maxlen TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 maxlen LEAF_NODE 5 maxlen LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int ct ; ct = 0 ; VAR_DECL 4 int ct ; ct = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 ct LEAF_NODE 6 ct LEAF_NODE 5 ; INIT 5 ct = 0 ASSIGN 6 ct = 0 LVAL 7 ct NAME 8 ct LEAF_NODE 9 ct ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int i ; VAR_DECL 4 int i TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; EXPR_STATEMENT 3 STACK_OF ( SRTP_PROTECTION_PROFILE ) * clnt = 0 ; EXPR 4 STACK_OF ( SRTP_PROTECTION_PROFILE ) * clnt = 0 ASSIGN 5 STACK_OF ( SRTP_PROTECTION_PROFILE ) * clnt = 0 LVAL 6 STACK_OF ( SRTP_PROTECTION_PROFILE ) * clnt FUNCTION_CALL 7 STACK_OF ( SRTP_PROTECTION_PROFILE ) CALLEE 8 STACK_OF LEAF_NODE 9 STACK_OF LEAF_NODE 8 ( ARGUMENT 8 SRTP_PROTECTION_PROFILE FIELD 9 SRTP_PROTECTION_PROFILE LEAF_NODE 10 SRTP_PROTECTION_PROFILE LEAF_NODE 8 ) LEAF_NODE 7 * FIELD 7 clnt LEAF_NODE 8 clnt ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 SRTP_PROTECTION_PROFILE * prof ; VAR_DECL 4 SRTP_PROTECTION_PROFILE * prof TYPE 5 SRTP_PROTECTION_PROFILE * TYPE_NAME 6 SRTP_PROTECTION_PROFILE LEAF_NODE 7 SRTP_PROTECTION_PROFILE POINTER 6 * LEAF_NODE 7 * NAME 5 prof LEAF_NODE 6 prof LEAF_NODE 4 ; EXPR_STATEMENT 3 clnt = SSL_get_srtp_profiles ( s ) ; EXPR 4 clnt = SSL_get_srtp_profiles ( s ) ASSIGN 5 clnt = SSL_get_srtp_profiles ( s ) LVAL 6 clnt FIELD 7 clnt LEAF_NODE 8 clnt ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 SSL_get_srtp_profiles ( s ) FUNCTION_CALL 7 SSL_get_srtp_profiles ( s ) CALLEE 8 SSL_get_srtp_profiles LEAF_NODE 9 SSL_get_srtp_profiles LEAF_NODE 8 ( ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ct = sk_SRTP_PROTECTION_PROFILE_num ( clnt ) ; EXPR 4 ct = sk_SRTP_PROTECTION_PROFILE_num ( clnt ) ASSIGN 5 ct = sk_SRTP_PROTECTION_PROFILE_num ( clnt ) LVAL 6 ct FIELD 7 ct LEAF_NODE 8 ct ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 sk_SRTP_PROTECTION_PROFILE_num ( clnt ) FUNCTION_CALL 7 sk_SRTP_PROTECTION_PROFILE_num ( clnt ) CALLEE 8 sk_SRTP_PROTECTION_PROFILE_num LEAF_NODE 9 sk_SRTP_PROTECTION_PROFILE_num LEAF_NODE 8 ( ARGUMENT 8 clnt FIELD 9 clnt LEAF_NODE 10 clnt LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 p EXPR 5 p FIELD 6 p LEAF_NODE 7 p LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ct == 0 EXPR 8 ct == 0 FIELD 9 ct LEAF_NODE 10 ct EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT , SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST ) ; EXPR 10 SSLerr ( SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT , SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT , SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT FIELD 13 SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT LEAF_NODE 14 SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT LEAF_NODE 12 , ARGUMENT 12 SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST FIELD 13 SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST LEAF_NODE 14 SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 1 EXPR 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( 2 + ct * 2 + 1 ) > maxlen EXPR 8 ( 2 + ct * 2 + 1 ) > maxlen LEAF_NODE 9 ( FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 9 + FIELD 9 ct LEAF_NODE 10 ct LEAF_NODE 9 * FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 9 + FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ) REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 maxlen LEAF_NODE 10 maxlen LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT , SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG ) ; EXPR 10 SSLerr ( SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT , SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT , SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT FIELD 13 SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT LEAF_NODE 14 SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT LEAF_NODE 12 , ARGUMENT 12 SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG FIELD 13 SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG LEAF_NODE 14 SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 1 EXPR 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 s2n ( ct * 2 , p ) ; EXPR 7 s2n ( ct * 2 , p ) FUNCTION_CALL 8 s2n ( ct * 2 , p ) CALLEE 9 s2n LEAF_NODE 10 s2n LEAF_NODE 9 ( ARGUMENT 9 ct * 2 FIELD 10 ct LEAF_NODE 11 ct LEAF_NODE 10 * FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 , ARGUMENT 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 ) LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 i = 0 ; EXPR 8 i = 0 ASSIGN 9 i = 0 LVAL 10 i FIELD 11 i LEAF_NODE 12 i ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 8 ; CONDITION 7 i < ct EXPR 8 i < ct FIELD 9 i LEAF_NODE 10 i REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 ct LEAF_NODE 10 ct LEAF_NODE 7 ; FOR_EXPR 7 i ++ EXPR 8 i ++ FIELD 9 i ++ LEAF_NODE 10 i LEAF_NODE 10 ++ LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 prof = sk_SRTP_PROTECTION_PROFILE_value ( clnt , i ) ; EXPR 10 prof = sk_SRTP_PROTECTION_PROFILE_value ( clnt , i ) ASSIGN 11 prof = sk_SRTP_PROTECTION_PROFILE_value ( clnt , i ) LVAL 12 prof FIELD 13 prof LEAF_NODE 14 prof ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 sk_SRTP_PROTECTION_PROFILE_value ( clnt , i ) FUNCTION_CALL 13 sk_SRTP_PROTECTION_PROFILE_value ( clnt , i ) CALLEE 14 sk_SRTP_PROTECTION_PROFILE_value LEAF_NODE 15 sk_SRTP_PROTECTION_PROFILE_value LEAF_NODE 14 ( ARGUMENT 14 clnt FIELD 15 clnt LEAF_NODE 16 clnt LEAF_NODE 14 , ARGUMENT 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 s2n ( prof -> id , p ) ; EXPR 10 s2n ( prof -> id , p ) FUNCTION_CALL 11 s2n ( prof -> id , p ) CALLEE 12 s2n LEAF_NODE 13 s2n LEAF_NODE 12 ( ARGUMENT 12 prof -> id FIELD 13 prof -> id LEAF_NODE 14 prof LEAF_NODE 14 -> LEAF_NODE 14 id LEAF_NODE 12 , ARGUMENT 12 p FIELD 13 p LEAF_NODE 14 p LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 * p ++ = 0 ; EXPR 7 * p ++ = 0 ASSIGN 8 * p ++ = 0 LVAL 9 * p ++ UNARY_EXPR 10 * p ++ UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 p ++ LEAF_NODE 12 p LEAF_NODE 12 ++ ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 * len = 2 + ct * 2 + 1 ; EXPR 4 * len = 2 + ct * 2 + 1 ASSIGN 5 * len = 2 + ct * 2 + 1 LVAL 6 * len UNARY_EXPR 7 * len UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 len LEAF_NODE 9 len ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 2 + ct * 2 + 1 FIELD 7 2 LEAF_NODE 8 2 LEAF_NODE 7 + FIELD 7 ct LEAF_NODE 8 ct LEAF_NODE 7 * FIELD 7 2 LEAF_NODE 8 2 LEAF_NODE 7 + FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 128, "project": "openssl_ast_vul_function_test_36", "target": 1}
{"func": "SIMPLE_DECL 1 struct cert_pkey_st BASE_CLASSES { X509 * x509 ; EVP_PKEY * privatekey ; const EVP_MD * digest ; } ; CLASS_DEF 2 struct cert_pkey_st BASE_CLASSES { X509 * x509 ; EVP_PKEY * privatekey ; const EVP_MD * digest ; } CLASS_DEF 3 struct cert_pkey_st BASE_CLASSES { X509 * x509 ; EVP_PKEY * privatekey ; const EVP_MD * digest ; } LEAF_NODE 4 struct CLASS_NAME 4 cert_pkey_st LEAF_NODE 5 cert_pkey_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 X509 * x509 ; EVP_PKEY * privatekey ; const EVP_MD * digest ; SIMPLE_DECL 5 X509 * x509 ; VAR_DECL 6 X509 * x509 TYPE 7 X509 * TYPE_NAME 8 X509 LEAF_NODE 9 X509 POINTER 8 * LEAF_NODE 9 * NAME 7 x509 LEAF_NODE 8 x509 LEAF_NODE 6 ; SIMPLE_DECL 5 EVP_PKEY * privatekey ; VAR_DECL 6 EVP_PKEY * privatekey TYPE 7 EVP_PKEY * TYPE_NAME 8 EVP_PKEY LEAF_NODE 9 EVP_PKEY POINTER 8 * LEAF_NODE 9 * NAME 7 privatekey LEAF_NODE 8 privatekey LEAF_NODE 6 ; SIMPLE_DECL 5 const EVP_MD * digest ; VAR_DECL 6 const EVP_MD * digest TYPE 7 const EVP_MD * TYPE_NAME 8 const EVP_MD LEAF_NODE 9 const LEAF_NODE 9 EVP_MD POINTER 8 * LEAF_NODE 9 * NAME 7 digest LEAF_NODE 8 digest LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct cert_pkey_st CERT_PKEY ; VAR_DECL 2 struct cert_pkey_st CERT_PKEY TYPE 3 struct cert_pkey_st TYPE_NAME 4 struct cert_pkey_st LEAF_NODE 5 struct LEAF_NODE 5 cert_pkey_st NAME 3 CERT_PKEY LEAF_NODE 4 CERT_PKEY LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ssl_parse_clienthello_tlsext LEAF_NODE 3 ssl_parse_clienthello_tlsext PARAMETER_LIST 2 ( SSL * s , unsigned char * * p , unsigned char * d , int n , int * al ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * * p TYPE 4 unsigned char * * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 p LEAF_NODE 5 p LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * d TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 int n TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 n LEAF_NODE 5 n LEAF_NODE 3 , PARAMETER_DECL 3 int * al TYPE 4 int * TYPE_NAME 5 int LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 al LEAF_NODE 5 al LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned short type ; VAR_DECL 4 unsigned short type TYPE 5 unsigned short TYPE_NAME 6 unsigned short LEAF_NODE 7 unsigned LEAF_NODE 7 short NAME 5 type LEAF_NODE 6 type LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned short size ; VAR_DECL 4 unsigned short size TYPE 5 unsigned short TYPE_NAME 6 unsigned short LEAF_NODE 7 unsigned LEAF_NODE 7 short NAME 5 size LEAF_NODE 6 size LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned short len ; VAR_DECL 4 unsigned short len TYPE 5 unsigned short TYPE_NAME 6 unsigned short LEAF_NODE 7 unsigned LEAF_NODE 7 short NAME 5 len LEAF_NODE 6 len LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * data ; data = * p ; VAR_DECL 4 unsigned char * data ; data = * p TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * p ASSIGN 6 data = * p LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * p UNARY_EXPR 8 * p UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 p LEAF_NODE 10 p LEAF_NODE 4 ; SIMPLE_DECL 3 int renegotiate_seen ; renegotiate_seen = 0 ; VAR_DECL 4 int renegotiate_seen ; renegotiate_seen = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 renegotiate_seen LEAF_NODE 6 renegotiate_seen LEAF_NODE 5 ; INIT 5 renegotiate_seen = 0 ASSIGN 6 renegotiate_seen = 0 LVAL 7 renegotiate_seen NAME 8 renegotiate_seen LEAF_NODE 9 renegotiate_seen ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> servername_done = 0 ; EXPR 4 s -> servername_done = 0 ASSIGN 5 s -> servername_done = 0 LVAL 6 s -> servername_done FIELD 7 s -> servername_done LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 servername_done ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> tlsext_status_type = - 1 ; EXPR 4 s -> tlsext_status_type = - 1 ASSIGN 5 s -> tlsext_status_type = - 1 LVAL 6 s -> tlsext_status_type FIELD 7 s -> tlsext_status_type LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 tlsext_status_type ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 - 1 UNARY_EXPR 7 - 1 UNARY_OPERATOR 8 - LEAF_NODE 9 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 data >= ( d + n - 2 ) EXPR 5 data >= ( d + n - 2 ) FIELD 6 data LEAF_NODE 7 data REL_OPERATOR 6 >= LEAF_NODE 7 >= LEAF_NODE 6 ( FIELD 6 d LEAF_NODE 7 d LEAF_NODE 6 + FIELD 6 n LEAF_NODE 7 n LEAF_NODE 6 - FIELD 6 2 LEAF_NODE 7 2 LEAF_NODE 6 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto ri_check ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 ri_check LEAF_NODE 7 ri_check LEAF_NODE 6 ; EXPR_STATEMENT 3 n2s ( data , len ) ; EXPR 4 n2s ( data , len ) FUNCTION_CALL 5 n2s ( data , len ) CALLEE 6 n2s LEAF_NODE 7 n2s LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 len FIELD 7 len LEAF_NODE 8 len LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 data > ( d + n - len ) EXPR 5 data > ( d + n - len ) FIELD 6 data LEAF_NODE 7 data REL_OPERATOR 6 > LEAF_NODE 7 > LEAF_NODE 6 ( FIELD 6 d LEAF_NODE 7 d LEAF_NODE 6 + FIELD 6 n LEAF_NODE 7 n LEAF_NODE 6 - FIELD 6 len LEAF_NODE 7 len LEAF_NODE 6 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto ri_check ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 ri_check LEAF_NODE 7 ri_check LEAF_NODE 6 ; ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 data <= ( d + n - 4 ) EXPR 5 data <= ( d + n - 4 ) FIELD 6 data LEAF_NODE 7 data REL_OPERATOR 6 <= LEAF_NODE 7 <= LEAF_NODE 6 ( FIELD 6 d LEAF_NODE 7 d LEAF_NODE 6 + FIELD 6 n LEAF_NODE 7 n LEAF_NODE 6 - FIELD 6 4 LEAF_NODE 7 4 LEAF_NODE 6 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 n2s ( data , type ) ; EXPR 7 n2s ( data , type ) FUNCTION_CALL 8 n2s ( data , type ) CALLEE 9 n2s LEAF_NODE 10 n2s LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 type FIELD 10 type LEAF_NODE 11 type LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 n2s ( data , size ) ; EXPR 7 n2s ( data , size ) FUNCTION_CALL 8 n2s ( data , size ) CALLEE 9 n2s LEAF_NODE 10 n2s LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 , ARGUMENT 9 size FIELD 10 size LEAF_NODE 11 size LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 data + size > ( d + n ) EXPR 8 data + size > ( d + n ) FIELD 9 data LEAF_NODE 10 data LEAF_NODE 9 + FIELD 9 size LEAF_NODE 10 size REL_OPERATOR 9 > LEAF_NODE 10 > LEAF_NODE 9 ( FIELD 9 d LEAF_NODE 10 d LEAF_NODE 9 + FIELD 9 n LEAF_NODE 10 n LEAF_NODE 9 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 goto ri_check ; KEYWORD 9 goto LEAF_NODE 10 goto DESTINATION 9 ri_check LEAF_NODE 10 ri_check LEAF_NODE 9 ; EXPR_STATEMENT 6 fprintf ( stderr , \"Received extension type %d size %d\\n\" , type , size ) ; EXPR 7 fprintf ( stderr , \"Received extension type %d size %d\\n\" , type , size ) FUNCTION_CALL 8 fprintf ( stderr , \"Received extension type %d size %d\\n\" , type , size ) CALLEE 9 fprintf LEAF_NODE 10 fprintf LEAF_NODE 9 ( ARGUMENT 9 stderr FIELD 10 stderr LEAF_NODE 11 stderr LEAF_NODE 9 , ARGUMENT 9 \"Received extension type %d size %d\\n\" FIELD 10 \"Received extension type %d size %d\\n\" LEAF_NODE 11 \"Received extension type %d size %d\\n\" LEAF_NODE 9 , ARGUMENT 9 type FIELD 10 type LEAF_NODE 11 type LEAF_NODE 9 , ARGUMENT 9 size FIELD 10 size LEAF_NODE 11 size LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> tlsext_debug_cb EXPR 8 s -> tlsext_debug_cb FIELD 9 s -> tlsext_debug_cb LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 tlsext_debug_cb LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 s -> tlsext_debug_cb ( s , 0 , type , data , size , s -> tlsext_debug_arg ) ; EXPR 9 s -> tlsext_debug_cb ( s , 0 , type , data , size , s -> tlsext_debug_arg ) FUNCTION_CALL 10 s -> tlsext_debug_cb ( s , 0 , type , data , size , s -> tlsext_debug_arg ) CALLEE 11 s -> tlsext_debug_cb LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 tlsext_debug_cb LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 , ARGUMENT 11 type FIELD 12 type LEAF_NODE 13 type LEAF_NODE 11 , ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 , ARGUMENT 11 size FIELD 12 size LEAF_NODE 13 size LEAF_NODE 11 , ARGUMENT 11 s -> tlsext_debug_arg FIELD 12 s -> tlsext_debug_arg LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 tlsext_debug_arg LEAF_NODE 11 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 type == TLSEXT_TYPE_server_name EXPR 8 type == TLSEXT_TYPE_server_name FIELD 9 type LEAF_NODE 10 type EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 TLSEXT_TYPE_server_name LEAF_NODE 10 TLSEXT_TYPE_server_name LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SIMPLE_DECL 9 unsigned char * sdata ; VAR_DECL 10 unsigned char * sdata TYPE 11 unsigned char * TYPE_NAME 12 unsigned char LEAF_NODE 13 unsigned LEAF_NODE 13 char POINTER 12 * LEAF_NODE 13 * NAME 11 sdata LEAF_NODE 12 sdata LEAF_NODE 10 ; SIMPLE_DECL 9 int servname_type ; VAR_DECL 10 int servname_type TYPE 11 int TYPE_NAME 12 int LEAF_NODE 13 int NAME 11 servname_type LEAF_NODE 12 servname_type LEAF_NODE 10 ; SIMPLE_DECL 9 int dsize ; VAR_DECL 10 int dsize TYPE 11 int TYPE_NAME 12 int LEAF_NODE 13 int NAME 11 dsize LEAF_NODE 12 dsize LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 size < 2 EXPR 11 size < 2 FIELD 12 size LEAF_NODE 13 size REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 2 LEAF_NODE 13 2 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 * al = SSL_AD_DECODE_ERROR ; EXPR 13 * al = SSL_AD_DECODE_ERROR ASSIGN 14 * al = SSL_AD_DECODE_ERROR LVAL 15 * al UNARY_EXPR 16 * al UNARY_OPERATOR 17 * LEAF_NODE 18 * FIELD 17 al LEAF_NODE 18 al ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 SSL_AD_DECODE_ERROR FIELD 16 SSL_AD_DECODE_ERROR LEAF_NODE 17 SSL_AD_DECODE_ERROR LEAF_NODE 13 ; JUMP_STATEMENT 12 return 0 ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 0 EXPR 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 n2s ( data , dsize ) ; EXPR 10 n2s ( data , dsize ) FUNCTION_CALL 11 n2s ( data , dsize ) CALLEE 12 n2s LEAF_NODE 13 n2s LEAF_NODE 12 ( ARGUMENT 12 data FIELD 13 data LEAF_NODE 14 data LEAF_NODE 12 , ARGUMENT 12 dsize FIELD 13 dsize LEAF_NODE 14 dsize LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 size -= 2 ; EXPR 10 size -= 2 ASSIGN 11 size -= 2 LVAL 12 size FIELD 13 size LEAF_NODE 14 size ASSIGN_OP 12 -= LEAF_NODE 13 -= RVAL 12 2 FIELD 13 2 LEAF_NODE 14 2 LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 dsize > size EXPR 11 dsize > size FIELD 12 dsize LEAF_NODE 13 dsize REL_OPERATOR 12 > LEAF_NODE 13 > FIELD 12 size LEAF_NODE 13 size LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 * al = SSL_AD_DECODE_ERROR ; EXPR 13 * al = SSL_AD_DECODE_ERROR ASSIGN 14 * al = SSL_AD_DECODE_ERROR LVAL 15 * al UNARY_EXPR 16 * al UNARY_OPERATOR 17 * LEAF_NODE 18 * FIELD 17 al LEAF_NODE 18 al ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 SSL_AD_DECODE_ERROR FIELD 16 SSL_AD_DECODE_ERROR LEAF_NODE 17 SSL_AD_DECODE_ERROR LEAF_NODE 13 ; JUMP_STATEMENT 12 return 0 ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 0 EXPR 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 sdata = data ; EXPR 10 sdata = data ASSIGN 11 sdata = data LVAL 12 sdata FIELD 13 sdata LEAF_NODE 14 sdata ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 data FIELD 13 data LEAF_NODE 14 data LEAF_NODE 10 ; ITERATION 9 KEYWORD 10 while LEAF_NODE 11 while LEAF_NODE 10 ( CONDITION 10 dsize > 3 EXPR 11 dsize > 3 FIELD 12 dsize LEAF_NODE 13 dsize REL_OPERATOR 12 > LEAF_NODE 13 > FIELD 12 3 LEAF_NODE 13 3 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 servname_type = * ( sdata ++ ) ; EXPR 13 servname_type = * ( sdata ++ ) ASSIGN 14 servname_type = * ( sdata ++ ) LVAL 15 servname_type FIELD 16 servname_type LEAF_NODE 17 servname_type ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 * ( sdata ++ ) UNARY_EXPR 16 * ( sdata ++ ) UNARY_OPERATOR 17 * LEAF_NODE 18 * LEAF_NODE 17 ( FIELD 17 sdata ++ LEAF_NODE 18 sdata LEAF_NODE 18 ++ LEAF_NODE 17 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 n2s ( sdata , len ) ; EXPR 13 n2s ( sdata , len ) FUNCTION_CALL 14 n2s ( sdata , len ) CALLEE 15 n2s LEAF_NODE 16 n2s LEAF_NODE 15 ( ARGUMENT 15 sdata FIELD 16 sdata LEAF_NODE 17 sdata LEAF_NODE 15 , ARGUMENT 15 len FIELD 16 len LEAF_NODE 17 len LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 dsize -= 3 ; EXPR 13 dsize -= 3 ASSIGN 14 dsize -= 3 LVAL 15 dsize FIELD 16 dsize LEAF_NODE 17 dsize ASSIGN_OP 15 -= LEAF_NODE 16 -= RVAL 15 3 FIELD 16 3 LEAF_NODE 17 3 LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 len > dsize EXPR 14 len > dsize FIELD 15 len LEAF_NODE 16 len REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 dsize LEAF_NODE 16 dsize LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 EXPR_STATEMENT 15 * al = SSL_AD_DECODE_ERROR ; EXPR 16 * al = SSL_AD_DECODE_ERROR ASSIGN 17 * al = SSL_AD_DECODE_ERROR LVAL 18 * al UNARY_EXPR 19 * al UNARY_OPERATOR 20 * LEAF_NODE 21 * FIELD 20 al LEAF_NODE 21 al ASSIGN_OP 18 = LEAF_NODE 19 = RVAL 18 SSL_AD_DECODE_ERROR FIELD 19 SSL_AD_DECODE_ERROR LEAF_NODE 20 SSL_AD_DECODE_ERROR LEAF_NODE 16 ; JUMP_STATEMENT 15 return 0 ; KEYWORD 16 return LEAF_NODE 17 return DESTINATION 16 0 EXPR 17 0 FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 16 ; LEAF_NODE 14 } SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 s -> servername_done == 0 EXPR 14 s -> servername_done == 0 FIELD 15 s -> servername_done LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 servername_done EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 13 ) STATEMENTS 13 SELECTION 14 KEYWORD 15 switch LEAF_NODE 16 switch LEAF_NODE 15 ( CONDITION 15 servname_type EXPR 16 servname_type FIELD 17 servname_type LEAF_NODE 18 servname_type LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 LABEL 17 case TLSEXT_NAMETYPE_host_name : LEAF_NODE 18 case LEAF_NODE 18 TLSEXT_NAMETYPE_host_name LEAF_NODE 18 : SELECTION 17 KEYWORD 18 if LEAF_NODE 19 if LEAF_NODE 18 ( CONDITION 18 s -> session -> tlsext_hostname == NULL EXPR 19 s -> session -> tlsext_hostname == NULL FIELD 20 s -> session -> tlsext_hostname LEAF_NODE 21 s LEAF_NODE 21 -> LEAF_NODE 21 session LEAF_NODE 21 -> LEAF_NODE 21 tlsext_hostname EQ_OPERATOR 20 == LEAF_NODE 21 == FIELD 20 NULL LEAF_NODE 21 NULL LEAF_NODE 18 ) STATEMENTS 18 LEAF_NODE 19 { STATEMENTS 19 SELECTION 20 KEYWORD 21 if LEAF_NODE 22 if LEAF_NODE 21 ( CONDITION 21 len > TLSEXT_MAXLEN_host_name || ( ( s -> session -> tlsext_hostname = OPENSSL_malloc ( len + 1 ) ) == NULL ) EXPR 22 len > TLSEXT_MAXLEN_host_name || ( ( s -> session -> tlsext_hostname = OPENSSL_malloc ( len + 1 ) ) == NULL ) OR 23 len > TLSEXT_MAXLEN_host_name || ( ( s -> session -> tlsext_hostname = OPENSSL_malloc ( len + 1 ) ) == NULL ) EXPR 24 len > TLSEXT_MAXLEN_host_name FIELD 25 len LEAF_NODE 26 len REL_OPERATOR 25 > LEAF_NODE 26 > FIELD 25 TLSEXT_MAXLEN_host_name LEAF_NODE 26 TLSEXT_MAXLEN_host_name LEAF_NODE 24 || EXPR 24 ( ( s -> session -> tlsext_hostname = OPENSSL_malloc ( len + 1 ) ) == NULL ) LEAF_NODE 25 ( LEAF_NODE 25 ( ASSIGN 25 s -> session -> tlsext_hostname = OPENSSL_malloc ( len + 1 ) LVAL 26 s -> session -> tlsext_hostname FIELD 27 s -> session -> tlsext_hostname LEAF_NODE 28 s LEAF_NODE 28 -> LEAF_NODE 28 session LEAF_NODE 28 -> LEAF_NODE 28 tlsext_hostname ASSIGN_OP 26 = LEAF_NODE 27 = RVAL 26 OPENSSL_malloc ( len + 1 ) FUNCTION_CALL 27 OPENSSL_malloc ( len + 1 ) CALLEE 28 OPENSSL_malloc LEAF_NODE 29 OPENSSL_malloc LEAF_NODE 28 ( ARGUMENT 28 len + 1 FIELD 29 len LEAF_NODE 30 len LEAF_NODE 29 + FIELD 29 1 LEAF_NODE 30 1 LEAF_NODE 28 ) LEAF_NODE 25 ) EQ_OPERATOR 25 == LEAF_NODE 26 == FIELD 25 NULL LEAF_NODE 26 NULL LEAF_NODE 25 ) LEAF_NODE 21 ) STATEMENTS 21 LEAF_NODE 22 { STATEMENTS 22 EXPR_STATEMENT 23 * al = TLS1_AD_UNRECOGNIZED_NAME ; EXPR 24 * al = TLS1_AD_UNRECOGNIZED_NAME ASSIGN 25 * al = TLS1_AD_UNRECOGNIZED_NAME LVAL 26 * al UNARY_EXPR 27 * al UNARY_OPERATOR 28 * LEAF_NODE 29 * FIELD 28 al LEAF_NODE 29 al ASSIGN_OP 26 = LEAF_NODE 27 = RVAL 26 TLS1_AD_UNRECOGNIZED_NAME FIELD 27 TLS1_AD_UNRECOGNIZED_NAME LEAF_NODE 28 TLS1_AD_UNRECOGNIZED_NAME LEAF_NODE 24 ; JUMP_STATEMENT 23 return 0 ; KEYWORD 24 return LEAF_NODE 25 return DESTINATION 24 0 EXPR 25 0 FIELD 26 0 LEAF_NODE 27 0 LEAF_NODE 24 ; LEAF_NODE 22 } EXPR_STATEMENT 20 memcpy ( s -> session -> tlsext_hostname , sdata , len ) ; EXPR 21 memcpy ( s -> session -> tlsext_hostname , sdata , len ) FUNCTION_CALL 22 memcpy ( s -> session -> tlsext_hostname , sdata , len ) CALLEE 23 memcpy LEAF_NODE 24 memcpy LEAF_NODE 23 ( ARGUMENT 23 s -> session -> tlsext_hostname FIELD 24 s -> session -> tlsext_hostname LEAF_NODE 25 s LEAF_NODE 25 -> LEAF_NODE 25 session LEAF_NODE 25 -> LEAF_NODE 25 tlsext_hostname LEAF_NODE 23 , ARGUMENT 23 sdata FIELD 24 sdata LEAF_NODE 25 sdata LEAF_NODE 23 , ARGUMENT 23 len FIELD 24 len LEAF_NODE 25 len LEAF_NODE 23 ) LEAF_NODE 21 ; EXPR_STATEMENT 20 s -> session -> tlsext_hostname [ len ] = '\\0' ; EXPR 21 s -> session -> tlsext_hostname [ len ] = '\\0' ASSIGN 22 s -> session -> tlsext_hostname [ len ] = '\\0' LVAL 23 s -> session -> tlsext_hostname [ len ] FIELD 24 s -> session -> tlsext_hostname [ len ] LEAF_NODE 25 s LEAF_NODE 25 -> LEAF_NODE 25 session LEAF_NODE 25 -> LEAF_NODE 25 tlsext_hostname LEAF_NODE 25 [ EXPR 25 len FIELD 26 len LEAF_NODE 27 len LEAF_NODE 25 ] ASSIGN_OP 23 = LEAF_NODE 24 = RVAL 23 '\\0' FIELD 24 '\\0' LEAF_NODE 25 '\\0' LEAF_NODE 21 ; SELECTION 20 KEYWORD 21 if LEAF_NODE 22 if LEAF_NODE 21 ( CONDITION 21 strlen ( s -> session -> tlsext_hostname ) != len EXPR 22 strlen ( s -> session -> tlsext_hostname ) != len FUNCTION_CALL 23 strlen ( s -> session -> tlsext_hostname ) CALLEE 24 strlen LEAF_NODE 25 strlen LEAF_NODE 24 ( ARGUMENT 24 s -> session -> tlsext_hostname FIELD 25 s -> session -> tlsext_hostname LEAF_NODE 26 s LEAF_NODE 26 -> LEAF_NODE 26 session LEAF_NODE 26 -> LEAF_NODE 26 tlsext_hostname LEAF_NODE 24 ) EQ_OPERATOR 23 != LEAF_NODE 24 != FIELD 23 len LEAF_NODE 24 len LEAF_NODE 21 ) STATEMENTS 21 LEAF_NODE 22 { STATEMENTS 22 EXPR_STATEMENT 23 OPENSSL_free ( s -> session -> tlsext_hostname ) ; EXPR 24 OPENSSL_free ( s -> session -> tlsext_hostname ) FUNCTION_CALL 25 OPENSSL_free ( s -> session -> tlsext_hostname ) CALLEE 26 OPENSSL_free LEAF_NODE 27 OPENSSL_free LEAF_NODE 26 ( ARGUMENT 26 s -> session -> tlsext_hostname FIELD 27 s -> session -> tlsext_hostname LEAF_NODE 28 s LEAF_NODE 28 -> LEAF_NODE 28 session LEAF_NODE 28 -> LEAF_NODE 28 tlsext_hostname LEAF_NODE 26 ) LEAF_NODE 24 ; EXPR_STATEMENT 23 s -> session -> tlsext_hostname = NULL ; EXPR 24 s -> session -> tlsext_hostname = NULL ASSIGN 25 s -> session -> tlsext_hostname = NULL LVAL 26 s -> session -> tlsext_hostname FIELD 27 s -> session -> tlsext_hostname LEAF_NODE 28 s LEAF_NODE 28 -> LEAF_NODE 28 session LEAF_NODE 28 -> LEAF_NODE 28 tlsext_hostname ASSIGN_OP 26 = LEAF_NODE 27 = RVAL 26 NULL FIELD 27 NULL LEAF_NODE 28 NULL LEAF_NODE 24 ; EXPR_STATEMENT 23 * al = TLS1_AD_UNRECOGNIZED_NAME ; EXPR 24 * al = TLS1_AD_UNRECOGNIZED_NAME ASSIGN 25 * al = TLS1_AD_UNRECOGNIZED_NAME LVAL 26 * al UNARY_EXPR 27 * al UNARY_OPERATOR 28 * LEAF_NODE 29 * FIELD 28 al LEAF_NODE 29 al ASSIGN_OP 26 = LEAF_NODE 27 = RVAL 26 TLS1_AD_UNRECOGNIZED_NAME FIELD 27 TLS1_AD_UNRECOGNIZED_NAME LEAF_NODE 28 TLS1_AD_UNRECOGNIZED_NAME LEAF_NODE 24 ; JUMP_STATEMENT 23 return 0 ; KEYWORD 24 return LEAF_NODE 25 return DESTINATION 24 0 EXPR 25 0 FIELD 26 0 LEAF_NODE 27 0 LEAF_NODE 24 ; LEAF_NODE 22 } EXPR_STATEMENT 20 s -> servername_done = 1 ; EXPR 21 s -> servername_done = 1 ASSIGN 22 s -> servername_done = 1 LVAL 23 s -> servername_done FIELD 24 s -> servername_done LEAF_NODE 25 s LEAF_NODE 25 -> LEAF_NODE 25 servername_done ASSIGN_OP 23 = LEAF_NODE 24 = RVAL 23 1 FIELD 24 1 LEAF_NODE 25 1 LEAF_NODE 21 ; LEAF_NODE 19 } SELECTION 17 KEYWORD 18 else LEAF_NODE 19 else STATEMENTS 18 EXPR_STATEMENT 19 s -> servername_done = strlen ( s -> session -> tlsext_hostname ) == len && strncmp ( s -> session -> tlsext_hostname , ( char * ) sdata , len ) == 0 ; EXPR 20 s -> servername_done = strlen ( s -> session -> tlsext_hostname ) == len && strncmp ( s -> session -> tlsext_hostname , ( char * ) sdata , len ) == 0 ASSIGN 21 s -> servername_done = strlen ( s -> session -> tlsext_hostname ) == len && strncmp ( s -> session -> tlsext_hostname , ( char * ) sdata , len ) == 0 LVAL 22 s -> servername_done FIELD 23 s -> servername_done LEAF_NODE 24 s LEAF_NODE 24 -> LEAF_NODE 24 servername_done ASSIGN_OP 22 = LEAF_NODE 23 = RVAL 22 strlen ( s -> session -> tlsext_hostname ) == len && strncmp ( s -> session -> tlsext_hostname , ( char * ) sdata , len ) == 0 AND 23 strlen ( s -> session -> tlsext_hostname ) == len && strncmp ( s -> session -> tlsext_hostname , ( char * ) sdata , len ) == 0 EXPR 24 strlen ( s -> session -> tlsext_hostname ) == len FUNCTION_CALL 25 strlen ( s -> session -> tlsext_hostname ) CALLEE 26 strlen LEAF_NODE 27 strlen LEAF_NODE 26 ( ARGUMENT 26 s -> session -> tlsext_hostname FIELD 27 s -> session -> tlsext_hostname LEAF_NODE 28 s LEAF_NODE 28 -> LEAF_NODE 28 session LEAF_NODE 28 -> LEAF_NODE 28 tlsext_hostname LEAF_NODE 26 ) EQ_OPERATOR 25 == LEAF_NODE 26 == FIELD 25 len LEAF_NODE 26 len LEAF_NODE 24 && EXPR 24 strncmp ( s -> session -> tlsext_hostname , ( char * ) sdata , len ) == 0 FUNCTION_CALL 25 strncmp ( s -> session -> tlsext_hostname , ( char * ) sdata , len ) CALLEE 26 strncmp LEAF_NODE 27 strncmp LEAF_NODE 26 ( ARGUMENT 26 s -> session -> tlsext_hostname FIELD 27 s -> session -> tlsext_hostname LEAF_NODE 28 s LEAF_NODE 28 -> LEAF_NODE 28 session LEAF_NODE 28 -> LEAF_NODE 28 tlsext_hostname LEAF_NODE 26 , ARGUMENT 26 ( char * ) sdata LEAF_NODE 27 ( TYPE_NAME 27 char LEAF_NODE 28 char LEAF_NODE 27 * LEAF_NODE 27 ) FIELD 27 sdata LEAF_NODE 28 sdata LEAF_NODE 26 , ARGUMENT 26 len FIELD 27 len LEAF_NODE 28 len LEAF_NODE 26 ) EQ_OPERATOR 25 == LEAF_NODE 26 == FIELD 25 0 LEAF_NODE 26 0 LEAF_NODE 20 ; JUMP_STATEMENT 17 break DESTINATION ; KEYWORD 18 break LEAF_NODE 19 break LEAF_NODE 18 DESTINATION LEAF_NODE 18 ; LABEL 17 default : LEAF_NODE 18 default LEAF_NODE 18 : JUMP_STATEMENT 17 break DESTINATION ; KEYWORD 18 break LEAF_NODE 19 break LEAF_NODE 18 DESTINATION LEAF_NODE 18 ; LEAF_NODE 16 } EXPR_STATEMENT 12 dsize -= len ; EXPR 13 dsize -= len ASSIGN 14 dsize -= len LVAL 15 dsize FIELD 16 dsize LEAF_NODE 17 dsize ASSIGN_OP 15 -= LEAF_NODE 16 -= RVAL 15 len FIELD 16 len LEAF_NODE 17 len LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 dsize != 0 EXPR 11 dsize != 0 FIELD 12 dsize LEAF_NODE 13 dsize EQ_OPERATOR 12 != LEAF_NODE 13 != FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 * al = SSL_AD_DECODE_ERROR ; EXPR 13 * al = SSL_AD_DECODE_ERROR ASSIGN 14 * al = SSL_AD_DECODE_ERROR LVAL 15 * al UNARY_EXPR 16 * al UNARY_OPERATOR 17 * LEAF_NODE 18 * FIELD 17 al LEAF_NODE 18 al ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 SSL_AD_DECODE_ERROR FIELD 16 SSL_AD_DECODE_ERROR LEAF_NODE 17 SSL_AD_DECODE_ERROR LEAF_NODE 13 ; JUMP_STATEMENT 12 return 0 ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 0 EXPR 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 type == TLSEXT_TYPE_ec_point_formats && s -> version != DTLS1_VERSION EXPR 10 type == TLSEXT_TYPE_ec_point_formats && s -> version != DTLS1_VERSION AND 11 type == TLSEXT_TYPE_ec_point_formats && s -> version != DTLS1_VERSION EXPR 12 type == TLSEXT_TYPE_ec_point_formats FIELD 13 type LEAF_NODE 14 type EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 TLSEXT_TYPE_ec_point_formats LEAF_NODE 14 TLSEXT_TYPE_ec_point_formats LEAF_NODE 12 && EXPR 12 s -> version != DTLS1_VERSION FIELD 13 s -> version LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 version EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 DTLS1_VERSION LEAF_NODE 14 DTLS1_VERSION LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SIMPLE_DECL 11 unsigned char * sdata ; sdata = data ; VAR_DECL 12 unsigned char * sdata ; sdata = data TYPE 13 unsigned char * TYPE_NAME 14 unsigned char LEAF_NODE 15 unsigned LEAF_NODE 15 char POINTER 14 * LEAF_NODE 15 * NAME 13 sdata LEAF_NODE 14 sdata LEAF_NODE 13 ; INIT 13 sdata = data ASSIGN 14 sdata = data LVAL 15 sdata NAME 16 sdata LEAF_NODE 17 sdata ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 12 ; SIMPLE_DECL 11 int ecpointformatlist_length ; ecpointformatlist_length = * ( sdata ++ ) ; VAR_DECL 12 int ecpointformatlist_length ; ecpointformatlist_length = * ( sdata ++ ) TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 ecpointformatlist_length LEAF_NODE 14 ecpointformatlist_length LEAF_NODE 13 ; INIT 13 ecpointformatlist_length = * ( sdata ++ ) ASSIGN 14 ecpointformatlist_length = * ( sdata ++ ) LVAL 15 ecpointformatlist_length NAME 16 ecpointformatlist_length LEAF_NODE 17 ecpointformatlist_length ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 * ( sdata ++ ) UNARY_EXPR 16 * ( sdata ++ ) UNARY_OPERATOR 17 * LEAF_NODE 18 * LEAF_NODE 17 ( FIELD 17 sdata ++ LEAF_NODE 18 sdata LEAF_NODE 18 ++ LEAF_NODE 17 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ecpointformatlist_length != size - 1 EXPR 13 ecpointformatlist_length != size - 1 FIELD 14 ecpointformatlist_length LEAF_NODE 15 ecpointformatlist_length EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 size LEAF_NODE 15 size LEAF_NODE 14 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 * al = TLS1_AD_DECODE_ERROR ; EXPR 15 * al = TLS1_AD_DECODE_ERROR ASSIGN 16 * al = TLS1_AD_DECODE_ERROR LVAL 17 * al UNARY_EXPR 18 * al UNARY_OPERATOR 19 * LEAF_NODE 20 * FIELD 19 al LEAF_NODE 20 al ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 TLS1_AD_DECODE_ERROR FIELD 18 TLS1_AD_DECODE_ERROR LEAF_NODE 19 TLS1_AD_DECODE_ERROR LEAF_NODE 15 ; JUMP_STATEMENT 14 return 0 ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 0 EXPR 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 s -> session -> tlsext_ecpointformatlist_length = 0 ; EXPR 12 s -> session -> tlsext_ecpointformatlist_length = 0 ASSIGN 13 s -> session -> tlsext_ecpointformatlist_length = 0 LVAL 14 s -> session -> tlsext_ecpointformatlist_length FIELD 15 s -> session -> tlsext_ecpointformatlist_length LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 tlsext_ecpointformatlist_length ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> session -> tlsext_ecpointformatlist != NULL EXPR 13 s -> session -> tlsext_ecpointformatlist != NULL FIELD 14 s -> session -> tlsext_ecpointformatlist LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 session LEAF_NODE 15 -> LEAF_NODE 15 tlsext_ecpointformatlist EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 OPENSSL_free ( s -> session -> tlsext_ecpointformatlist ) ; EXPR 14 OPENSSL_free ( s -> session -> tlsext_ecpointformatlist ) FUNCTION_CALL 15 OPENSSL_free ( s -> session -> tlsext_ecpointformatlist ) CALLEE 16 OPENSSL_free LEAF_NODE 17 OPENSSL_free LEAF_NODE 16 ( ARGUMENT 16 s -> session -> tlsext_ecpointformatlist FIELD 17 s -> session -> tlsext_ecpointformatlist LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 session LEAF_NODE 18 -> LEAF_NODE 18 tlsext_ecpointformatlist LEAF_NODE 16 ) LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ( s -> session -> tlsext_ecpointformatlist = OPENSSL_malloc ( ecpointformatlist_length ) ) == NULL EXPR 13 ( s -> session -> tlsext_ecpointformatlist = OPENSSL_malloc ( ecpointformatlist_length ) ) == NULL LEAF_NODE 14 ( ASSIGN 14 s -> session -> tlsext_ecpointformatlist = OPENSSL_malloc ( ecpointformatlist_length ) LVAL 15 s -> session -> tlsext_ecpointformatlist FIELD 16 s -> session -> tlsext_ecpointformatlist LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 session LEAF_NODE 17 -> LEAF_NODE 17 tlsext_ecpointformatlist ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 OPENSSL_malloc ( ecpointformatlist_length ) FUNCTION_CALL 16 OPENSSL_malloc ( ecpointformatlist_length ) CALLEE 17 OPENSSL_malloc LEAF_NODE 18 OPENSSL_malloc LEAF_NODE 17 ( ARGUMENT 17 ecpointformatlist_length FIELD 18 ecpointformatlist_length LEAF_NODE 19 ecpointformatlist_length LEAF_NODE 17 ) LEAF_NODE 14 ) EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 * al = TLS1_AD_INTERNAL_ERROR ; EXPR 15 * al = TLS1_AD_INTERNAL_ERROR ASSIGN 16 * al = TLS1_AD_INTERNAL_ERROR LVAL 17 * al UNARY_EXPR 18 * al UNARY_OPERATOR 19 * LEAF_NODE 20 * FIELD 19 al LEAF_NODE 20 al ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 TLS1_AD_INTERNAL_ERROR FIELD 18 TLS1_AD_INTERNAL_ERROR LEAF_NODE 19 TLS1_AD_INTERNAL_ERROR LEAF_NODE 15 ; JUMP_STATEMENT 14 return 0 ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 0 EXPR 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 s -> session -> tlsext_ecpointformatlist_length = ecpointformatlist_length ; EXPR 12 s -> session -> tlsext_ecpointformatlist_length = ecpointformatlist_length ASSIGN 13 s -> session -> tlsext_ecpointformatlist_length = ecpointformatlist_length LVAL 14 s -> session -> tlsext_ecpointformatlist_length FIELD 15 s -> session -> tlsext_ecpointformatlist_length LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 tlsext_ecpointformatlist_length ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 ecpointformatlist_length FIELD 15 ecpointformatlist_length LEAF_NODE 16 ecpointformatlist_length LEAF_NODE 12 ; EXPR_STATEMENT 11 memcpy ( s -> session -> tlsext_ecpointformatlist , sdata , ecpointformatlist_length ) ; EXPR 12 memcpy ( s -> session -> tlsext_ecpointformatlist , sdata , ecpointformatlist_length ) FUNCTION_CALL 13 memcpy ( s -> session -> tlsext_ecpointformatlist , sdata , ecpointformatlist_length ) CALLEE 14 memcpy LEAF_NODE 15 memcpy LEAF_NODE 14 ( ARGUMENT 14 s -> session -> tlsext_ecpointformatlist FIELD 15 s -> session -> tlsext_ecpointformatlist LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 tlsext_ecpointformatlist LEAF_NODE 14 , ARGUMENT 14 sdata FIELD 15 sdata LEAF_NODE 16 sdata LEAF_NODE 14 , ARGUMENT 14 ecpointformatlist_length FIELD 15 ecpointformatlist_length LEAF_NODE 16 ecpointformatlist_length LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 fprintf ( stderr , \"ssl_parse_clienthello_tlsext s->session->tlsext_ecpointformatlist (length=%i) \" , s -> session -> tlsext_ecpointformatlist_length ) ; EXPR 12 fprintf ( stderr , \"ssl_parse_clienthello_tlsext s->session->tlsext_ecpointformatlist (length=%i) \" , s -> session -> tlsext_ecpointformatlist_length ) FUNCTION_CALL 13 fprintf ( stderr , \"ssl_parse_clienthello_tlsext s->session->tlsext_ecpointformatlist (length=%i) \" , s -> session -> tlsext_ecpointformatlist_length ) CALLEE 14 fprintf LEAF_NODE 15 fprintf LEAF_NODE 14 ( ARGUMENT 14 stderr FIELD 15 stderr LEAF_NODE 16 stderr LEAF_NODE 14 , ARGUMENT 14 \"ssl_parse_clienthello_tlsext s->session->tlsext_ecpointformatlist (length=%i) \" FIELD 15 \"ssl_parse_clienthello_tlsext s->session->tlsext_ecpointformatlist (length=%i) \" LEAF_NODE 16 \"ssl_parse_clienthello_tlsext s->session->tlsext_ecpointformatlist (length=%i) \" LEAF_NODE 14 , ARGUMENT 14 s -> session -> tlsext_ecpointformatlist_length FIELD 15 s -> session -> tlsext_ecpointformatlist_length LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 tlsext_ecpointformatlist_length LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 sdata = s -> session -> tlsext_ecpointformatlist ; EXPR 12 sdata = s -> session -> tlsext_ecpointformatlist ASSIGN 13 sdata = s -> session -> tlsext_ecpointformatlist LVAL 14 sdata FIELD 15 sdata LEAF_NODE 16 sdata ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 s -> session -> tlsext_ecpointformatlist FIELD 15 s -> session -> tlsext_ecpointformatlist LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 tlsext_ecpointformatlist LEAF_NODE 12 ; ITERATION 11 KEYWORD 12 for LEAF_NODE 13 for LEAF_NODE 12 ( FOR_INIT 12 i = 0 ; EXPR 13 i = 0 ASSIGN 14 i = 0 LVAL 15 i FIELD 16 i LEAF_NODE 17 i ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 13 ; CONDITION 12 i < s -> session -> tlsext_ecpointformatlist_length EXPR 13 i < s -> session -> tlsext_ecpointformatlist_length FIELD 14 i LEAF_NODE 15 i REL_OPERATOR 14 < LEAF_NODE 15 < FIELD 14 s -> session -> tlsext_ecpointformatlist_length LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 session LEAF_NODE 15 -> LEAF_NODE 15 tlsext_ecpointformatlist_length LEAF_NODE 12 ; FOR_EXPR 12 i ++ EXPR 13 i ++ FIELD 14 i ++ LEAF_NODE 15 i LEAF_NODE 15 ++ LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 fprintf ( stderr , \"%i \" , * ( sdata ++ ) ) ; EXPR 14 fprintf ( stderr , \"%i \" , * ( sdata ++ ) ) FUNCTION_CALL 15 fprintf ( stderr , \"%i \" , * ( sdata ++ ) ) CALLEE 16 fprintf LEAF_NODE 17 fprintf LEAF_NODE 16 ( ARGUMENT 16 stderr FIELD 17 stderr LEAF_NODE 18 stderr LEAF_NODE 16 , ARGUMENT 16 \"%i \" FIELD 17 \"%i \" LEAF_NODE 18 \"%i \" LEAF_NODE 16 , ARGUMENT 16 * ( sdata ++ ) UNARY_EXPR 17 * ( sdata ++ ) UNARY_OPERATOR 18 * LEAF_NODE 19 * LEAF_NODE 18 ( FIELD 18 sdata ++ LEAF_NODE 19 sdata LEAF_NODE 19 ++ LEAF_NODE 18 ) LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 11 fprintf ( stderr , \"\\n\" ) ; EXPR 12 fprintf ( stderr , \"\\n\" ) FUNCTION_CALL 13 fprintf ( stderr , \"\\n\" ) CALLEE 14 fprintf LEAF_NODE 15 fprintf LEAF_NODE 14 ( ARGUMENT 14 stderr FIELD 15 stderr LEAF_NODE 16 stderr LEAF_NODE 14 , ARGUMENT 14 \"\\n\" FIELD 15 \"\\n\" LEAF_NODE 16 \"\\n\" LEAF_NODE 14 ) LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 type == TLSEXT_TYPE_elliptic_curves && s -> version != DTLS1_VERSION EXPR 10 type == TLSEXT_TYPE_elliptic_curves && s -> version != DTLS1_VERSION AND 11 type == TLSEXT_TYPE_elliptic_curves && s -> version != DTLS1_VERSION EXPR 12 type == TLSEXT_TYPE_elliptic_curves FIELD 13 type LEAF_NODE 14 type EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 TLSEXT_TYPE_elliptic_curves LEAF_NODE 14 TLSEXT_TYPE_elliptic_curves LEAF_NODE 12 && EXPR 12 s -> version != DTLS1_VERSION FIELD 13 s -> version LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 version EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 DTLS1_VERSION LEAF_NODE 14 DTLS1_VERSION LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SIMPLE_DECL 11 unsigned char * sdata ; sdata = data ; VAR_DECL 12 unsigned char * sdata ; sdata = data TYPE 13 unsigned char * TYPE_NAME 14 unsigned char LEAF_NODE 15 unsigned LEAF_NODE 15 char POINTER 14 * LEAF_NODE 15 * NAME 13 sdata LEAF_NODE 14 sdata LEAF_NODE 13 ; INIT 13 sdata = data ASSIGN 14 sdata = data LVAL 15 sdata NAME 16 sdata LEAF_NODE 17 sdata ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 12 ; SIMPLE_DECL 11 int ellipticcurvelist_length ; ellipticcurvelist_length = ( * ( sdata ++ ) << 8 ) ; VAR_DECL 12 int ellipticcurvelist_length ; ellipticcurvelist_length = ( * ( sdata ++ ) << 8 ) TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 ellipticcurvelist_length LEAF_NODE 14 ellipticcurvelist_length LEAF_NODE 13 ; INIT 13 ellipticcurvelist_length = ( * ( sdata ++ ) << 8 ) ASSIGN 14 ellipticcurvelist_length = ( * ( sdata ++ ) << 8 ) LVAL 15 ellipticcurvelist_length NAME 16 ellipticcurvelist_length LEAF_NODE 17 ellipticcurvelist_length ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ( * ( sdata ++ ) << 8 ) LEAF_NODE 16 ( UNARY_EXPR 16 * ( sdata ++ ) UNARY_OPERATOR 17 * LEAF_NODE 18 * LEAF_NODE 17 ( FIELD 17 sdata ++ LEAF_NODE 18 sdata LEAF_NODE 18 ++ LEAF_NODE 17 ) LEAF_NODE 16 << FIELD 16 8 LEAF_NODE 17 8 LEAF_NODE 16 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 ellipticcurvelist_length += ( * ( sdata ++ ) ) ; EXPR 12 ellipticcurvelist_length += ( * ( sdata ++ ) ) ASSIGN 13 ellipticcurvelist_length += ( * ( sdata ++ ) ) LVAL 14 ellipticcurvelist_length FIELD 15 ellipticcurvelist_length LEAF_NODE 16 ellipticcurvelist_length ASSIGN_OP 14 += LEAF_NODE 15 += RVAL 14 ( * ( sdata ++ ) ) LEAF_NODE 15 ( UNARY_EXPR 15 * ( sdata ++ ) UNARY_OPERATOR 16 * LEAF_NODE 17 * LEAF_NODE 16 ( FIELD 16 sdata ++ LEAF_NODE 17 sdata LEAF_NODE 17 ++ LEAF_NODE 16 ) LEAF_NODE 15 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ellipticcurvelist_length != size - 2 EXPR 13 ellipticcurvelist_length != size - 2 FIELD 14 ellipticcurvelist_length LEAF_NODE 15 ellipticcurvelist_length EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 size LEAF_NODE 15 size LEAF_NODE 14 - FIELD 14 2 LEAF_NODE 15 2 LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 * al = TLS1_AD_DECODE_ERROR ; EXPR 15 * al = TLS1_AD_DECODE_ERROR ASSIGN 16 * al = TLS1_AD_DECODE_ERROR LVAL 17 * al UNARY_EXPR 18 * al UNARY_OPERATOR 19 * LEAF_NODE 20 * FIELD 19 al LEAF_NODE 20 al ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 TLS1_AD_DECODE_ERROR FIELD 18 TLS1_AD_DECODE_ERROR LEAF_NODE 19 TLS1_AD_DECODE_ERROR LEAF_NODE 15 ; JUMP_STATEMENT 14 return 0 ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 0 EXPR 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 s -> session -> tlsext_ellipticcurvelist_length = 0 ; EXPR 12 s -> session -> tlsext_ellipticcurvelist_length = 0 ASSIGN 13 s -> session -> tlsext_ellipticcurvelist_length = 0 LVAL 14 s -> session -> tlsext_ellipticcurvelist_length FIELD 15 s -> session -> tlsext_ellipticcurvelist_length LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 tlsext_ellipticcurvelist_length ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> session -> tlsext_ellipticcurvelist != NULL EXPR 13 s -> session -> tlsext_ellipticcurvelist != NULL FIELD 14 s -> session -> tlsext_ellipticcurvelist LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 session LEAF_NODE 15 -> LEAF_NODE 15 tlsext_ellipticcurvelist EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 OPENSSL_free ( s -> session -> tlsext_ellipticcurvelist ) ; EXPR 14 OPENSSL_free ( s -> session -> tlsext_ellipticcurvelist ) FUNCTION_CALL 15 OPENSSL_free ( s -> session -> tlsext_ellipticcurvelist ) CALLEE 16 OPENSSL_free LEAF_NODE 17 OPENSSL_free LEAF_NODE 16 ( ARGUMENT 16 s -> session -> tlsext_ellipticcurvelist FIELD 17 s -> session -> tlsext_ellipticcurvelist LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 session LEAF_NODE 18 -> LEAF_NODE 18 tlsext_ellipticcurvelist LEAF_NODE 16 ) LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ( s -> session -> tlsext_ellipticcurvelist = OPENSSL_malloc ( ellipticcurvelist_length ) ) == NULL EXPR 13 ( s -> session -> tlsext_ellipticcurvelist = OPENSSL_malloc ( ellipticcurvelist_length ) ) == NULL LEAF_NODE 14 ( ASSIGN 14 s -> session -> tlsext_ellipticcurvelist = OPENSSL_malloc ( ellipticcurvelist_length ) LVAL 15 s -> session -> tlsext_ellipticcurvelist FIELD 16 s -> session -> tlsext_ellipticcurvelist LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 session LEAF_NODE 17 -> LEAF_NODE 17 tlsext_ellipticcurvelist ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 OPENSSL_malloc ( ellipticcurvelist_length ) FUNCTION_CALL 16 OPENSSL_malloc ( ellipticcurvelist_length ) CALLEE 17 OPENSSL_malloc LEAF_NODE 18 OPENSSL_malloc LEAF_NODE 17 ( ARGUMENT 17 ellipticcurvelist_length FIELD 18 ellipticcurvelist_length LEAF_NODE 19 ellipticcurvelist_length LEAF_NODE 17 ) LEAF_NODE 14 ) EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 * al = TLS1_AD_INTERNAL_ERROR ; EXPR 15 * al = TLS1_AD_INTERNAL_ERROR ASSIGN 16 * al = TLS1_AD_INTERNAL_ERROR LVAL 17 * al UNARY_EXPR 18 * al UNARY_OPERATOR 19 * LEAF_NODE 20 * FIELD 19 al LEAF_NODE 20 al ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 TLS1_AD_INTERNAL_ERROR FIELD 18 TLS1_AD_INTERNAL_ERROR LEAF_NODE 19 TLS1_AD_INTERNAL_ERROR LEAF_NODE 15 ; JUMP_STATEMENT 14 return 0 ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 0 EXPR 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 s -> session -> tlsext_ellipticcurvelist_length = ellipticcurvelist_length ; EXPR 12 s -> session -> tlsext_ellipticcurvelist_length = ellipticcurvelist_length ASSIGN 13 s -> session -> tlsext_ellipticcurvelist_length = ellipticcurvelist_length LVAL 14 s -> session -> tlsext_ellipticcurvelist_length FIELD 15 s -> session -> tlsext_ellipticcurvelist_length LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 tlsext_ellipticcurvelist_length ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 ellipticcurvelist_length FIELD 15 ellipticcurvelist_length LEAF_NODE 16 ellipticcurvelist_length LEAF_NODE 12 ; EXPR_STATEMENT 11 memcpy ( s -> session -> tlsext_ellipticcurvelist , sdata , ellipticcurvelist_length ) ; EXPR 12 memcpy ( s -> session -> tlsext_ellipticcurvelist , sdata , ellipticcurvelist_length ) FUNCTION_CALL 13 memcpy ( s -> session -> tlsext_ellipticcurvelist , sdata , ellipticcurvelist_length ) CALLEE 14 memcpy LEAF_NODE 15 memcpy LEAF_NODE 14 ( ARGUMENT 14 s -> session -> tlsext_ellipticcurvelist FIELD 15 s -> session -> tlsext_ellipticcurvelist LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 tlsext_ellipticcurvelist LEAF_NODE 14 , ARGUMENT 14 sdata FIELD 15 sdata LEAF_NODE 16 sdata LEAF_NODE 14 , ARGUMENT 14 ellipticcurvelist_length FIELD 15 ellipticcurvelist_length LEAF_NODE 16 ellipticcurvelist_length LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 fprintf ( stderr , \"ssl_parse_clienthello_tlsext s->session->tlsext_ellipticcurvelist (length=%i) \" , s -> session -> tlsext_ellipticcurvelist_length ) ; EXPR 12 fprintf ( stderr , \"ssl_parse_clienthello_tlsext s->session->tlsext_ellipticcurvelist (length=%i) \" , s -> session -> tlsext_ellipticcurvelist_length ) FUNCTION_CALL 13 fprintf ( stderr , \"ssl_parse_clienthello_tlsext s->session->tlsext_ellipticcurvelist (length=%i) \" , s -> session -> tlsext_ellipticcurvelist_length ) CALLEE 14 fprintf LEAF_NODE 15 fprintf LEAF_NODE 14 ( ARGUMENT 14 stderr FIELD 15 stderr LEAF_NODE 16 stderr LEAF_NODE 14 , ARGUMENT 14 \"ssl_parse_clienthello_tlsext s->session->tlsext_ellipticcurvelist (length=%i) \" FIELD 15 \"ssl_parse_clienthello_tlsext s->session->tlsext_ellipticcurvelist (length=%i) \" LEAF_NODE 16 \"ssl_parse_clienthello_tlsext s->session->tlsext_ellipticcurvelist (length=%i) \" LEAF_NODE 14 , ARGUMENT 14 s -> session -> tlsext_ellipticcurvelist_length FIELD 15 s -> session -> tlsext_ellipticcurvelist_length LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 tlsext_ellipticcurvelist_length LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 sdata = s -> session -> tlsext_ellipticcurvelist ; EXPR 12 sdata = s -> session -> tlsext_ellipticcurvelist ASSIGN 13 sdata = s -> session -> tlsext_ellipticcurvelist LVAL 14 sdata FIELD 15 sdata LEAF_NODE 16 sdata ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 s -> session -> tlsext_ellipticcurvelist FIELD 15 s -> session -> tlsext_ellipticcurvelist LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 tlsext_ellipticcurvelist LEAF_NODE 12 ; ITERATION 11 KEYWORD 12 for LEAF_NODE 13 for LEAF_NODE 12 ( FOR_INIT 12 i = 0 ; EXPR 13 i = 0 ASSIGN 14 i = 0 LVAL 15 i FIELD 16 i LEAF_NODE 17 i ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 13 ; CONDITION 12 i < s -> session -> tlsext_ellipticcurvelist_length EXPR 13 i < s -> session -> tlsext_ellipticcurvelist_length FIELD 14 i LEAF_NODE 15 i REL_OPERATOR 14 < LEAF_NODE 15 < FIELD 14 s -> session -> tlsext_ellipticcurvelist_length LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 session LEAF_NODE 15 -> LEAF_NODE 15 tlsext_ellipticcurvelist_length LEAF_NODE 12 ; FOR_EXPR 12 i ++ EXPR 13 i ++ FIELD 14 i ++ LEAF_NODE 15 i LEAF_NODE 15 ++ LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 fprintf ( stderr , \"%i \" , * ( sdata ++ ) ) ; EXPR 14 fprintf ( stderr , \"%i \" , * ( sdata ++ ) ) FUNCTION_CALL 15 fprintf ( stderr , \"%i \" , * ( sdata ++ ) ) CALLEE 16 fprintf LEAF_NODE 17 fprintf LEAF_NODE 16 ( ARGUMENT 16 stderr FIELD 17 stderr LEAF_NODE 18 stderr LEAF_NODE 16 , ARGUMENT 16 \"%i \" FIELD 17 \"%i \" LEAF_NODE 18 \"%i \" LEAF_NODE 16 , ARGUMENT 16 * ( sdata ++ ) UNARY_EXPR 17 * ( sdata ++ ) UNARY_OPERATOR 18 * LEAF_NODE 19 * LEAF_NODE 18 ( FIELD 18 sdata ++ LEAF_NODE 19 sdata LEAF_NODE 19 ++ LEAF_NODE 18 ) LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 11 fprintf ( stderr , \"\\n\" ) ; EXPR 12 fprintf ( stderr , \"\\n\" ) FUNCTION_CALL 13 fprintf ( stderr , \"\\n\" ) CALLEE 14 fprintf LEAF_NODE 15 fprintf LEAF_NODE 14 ( ARGUMENT 14 stderr FIELD 15 stderr LEAF_NODE 16 stderr LEAF_NODE 14 , ARGUMENT 14 \"\\n\" FIELD 15 \"\\n\" LEAF_NODE 16 \"\\n\" LEAF_NODE 14 ) LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 type == TLSEXT_TYPE_opaque_prf_input && s -> version != DTLS1_VERSION EXPR 10 type == TLSEXT_TYPE_opaque_prf_input && s -> version != DTLS1_VERSION AND 11 type == TLSEXT_TYPE_opaque_prf_input && s -> version != DTLS1_VERSION EXPR 12 type == TLSEXT_TYPE_opaque_prf_input FIELD 13 type LEAF_NODE 14 type EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 TLSEXT_TYPE_opaque_prf_input LEAF_NODE 14 TLSEXT_TYPE_opaque_prf_input LEAF_NODE 12 && EXPR 12 s -> version != DTLS1_VERSION FIELD 13 s -> version LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 version EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 DTLS1_VERSION LEAF_NODE 14 DTLS1_VERSION LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SIMPLE_DECL 11 unsigned char * sdata ; sdata = data ; VAR_DECL 12 unsigned char * sdata ; sdata = data TYPE 13 unsigned char * TYPE_NAME 14 unsigned char LEAF_NODE 15 unsigned LEAF_NODE 15 char POINTER 14 * LEAF_NODE 15 * NAME 13 sdata LEAF_NODE 14 sdata LEAF_NODE 13 ; INIT 13 sdata = data ASSIGN 14 sdata = data LVAL 15 sdata NAME 16 sdata LEAF_NODE 17 sdata ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 size < 2 EXPR 13 size < 2 FIELD 14 size LEAF_NODE 15 size REL_OPERATOR 14 < LEAF_NODE 15 < FIELD 14 2 LEAF_NODE 15 2 LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 * al = SSL_AD_DECODE_ERROR ; EXPR 15 * al = SSL_AD_DECODE_ERROR ASSIGN 16 * al = SSL_AD_DECODE_ERROR LVAL 17 * al UNARY_EXPR 18 * al UNARY_OPERATOR 19 * LEAF_NODE 20 * FIELD 19 al LEAF_NODE 20 al ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 SSL_AD_DECODE_ERROR FIELD 18 SSL_AD_DECODE_ERROR LEAF_NODE 19 SSL_AD_DECODE_ERROR LEAF_NODE 15 ; JUMP_STATEMENT 14 return 0 ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 0 EXPR 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 n2s ( sdata , s -> s3 -> client_opaque_prf_input_len ) ; EXPR 12 n2s ( sdata , s -> s3 -> client_opaque_prf_input_len ) FUNCTION_CALL 13 n2s ( sdata , s -> s3 -> client_opaque_prf_input_len ) CALLEE 14 n2s LEAF_NODE 15 n2s LEAF_NODE 14 ( ARGUMENT 14 sdata FIELD 15 sdata LEAF_NODE 16 sdata LEAF_NODE 14 , ARGUMENT 14 s -> s3 -> client_opaque_prf_input_len FIELD 15 s -> s3 -> client_opaque_prf_input_len LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 s3 LEAF_NODE 16 -> LEAF_NODE 16 client_opaque_prf_input_len LEAF_NODE 14 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> s3 -> client_opaque_prf_input_len != size - 2 EXPR 13 s -> s3 -> client_opaque_prf_input_len != size - 2 FIELD 14 s -> s3 -> client_opaque_prf_input_len LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 s3 LEAF_NODE 15 -> LEAF_NODE 15 client_opaque_prf_input_len EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 size LEAF_NODE 15 size LEAF_NODE 14 - FIELD 14 2 LEAF_NODE 15 2 LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 * al = SSL_AD_DECODE_ERROR ; EXPR 15 * al = SSL_AD_DECODE_ERROR ASSIGN 16 * al = SSL_AD_DECODE_ERROR LVAL 17 * al UNARY_EXPR 18 * al UNARY_OPERATOR 19 * LEAF_NODE 20 * FIELD 19 al LEAF_NODE 20 al ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 SSL_AD_DECODE_ERROR FIELD 18 SSL_AD_DECODE_ERROR LEAF_NODE 19 SSL_AD_DECODE_ERROR LEAF_NODE 15 ; JUMP_STATEMENT 14 return 0 ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 0 EXPR 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ; LEAF_NODE 13 } SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> s3 -> client_opaque_prf_input != NULL EXPR 13 s -> s3 -> client_opaque_prf_input != NULL FIELD 14 s -> s3 -> client_opaque_prf_input LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 s3 LEAF_NODE 15 -> LEAF_NODE 15 client_opaque_prf_input EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 OPENSSL_free ( s -> s3 -> client_opaque_prf_input ) ; EXPR 14 OPENSSL_free ( s -> s3 -> client_opaque_prf_input ) FUNCTION_CALL 15 OPENSSL_free ( s -> s3 -> client_opaque_prf_input ) CALLEE 16 OPENSSL_free LEAF_NODE 17 OPENSSL_free LEAF_NODE 16 ( ARGUMENT 16 s -> s3 -> client_opaque_prf_input FIELD 17 s -> s3 -> client_opaque_prf_input LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 s3 LEAF_NODE 18 -> LEAF_NODE 18 client_opaque_prf_input LEAF_NODE 16 ) LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> s3 -> client_opaque_prf_input_len == 0 EXPR 13 s -> s3 -> client_opaque_prf_input_len == 0 FIELD 14 s -> s3 -> client_opaque_prf_input_len LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 s3 LEAF_NODE 15 -> LEAF_NODE 15 client_opaque_prf_input_len EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 s -> s3 -> client_opaque_prf_input = OPENSSL_malloc ( 1 ) ; EXPR 14 s -> s3 -> client_opaque_prf_input = OPENSSL_malloc ( 1 ) ASSIGN 15 s -> s3 -> client_opaque_prf_input = OPENSSL_malloc ( 1 ) LVAL 16 s -> s3 -> client_opaque_prf_input FIELD 17 s -> s3 -> client_opaque_prf_input LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 s3 LEAF_NODE 18 -> LEAF_NODE 18 client_opaque_prf_input ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 OPENSSL_malloc ( 1 ) FUNCTION_CALL 17 OPENSSL_malloc ( 1 ) CALLEE 18 OPENSSL_malloc LEAF_NODE 19 OPENSSL_malloc LEAF_NODE 18 ( ARGUMENT 18 1 FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ) LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 else LEAF_NODE 13 else STATEMENTS 12 EXPR_STATEMENT 13 s -> s3 -> client_opaque_prf_input = BUF_memdup ( sdata , s -> s3 -> client_opaque_prf_input_len ) ; EXPR 14 s -> s3 -> client_opaque_prf_input = BUF_memdup ( sdata , s -> s3 -> client_opaque_prf_input_len ) ASSIGN 15 s -> s3 -> client_opaque_prf_input = BUF_memdup ( sdata , s -> s3 -> client_opaque_prf_input_len ) LVAL 16 s -> s3 -> client_opaque_prf_input FIELD 17 s -> s3 -> client_opaque_prf_input LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 s3 LEAF_NODE 18 -> LEAF_NODE 18 client_opaque_prf_input ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 BUF_memdup ( sdata , s -> s3 -> client_opaque_prf_input_len ) FUNCTION_CALL 17 BUF_memdup ( sdata , s -> s3 -> client_opaque_prf_input_len ) CALLEE 18 BUF_memdup LEAF_NODE 19 BUF_memdup LEAF_NODE 18 ( ARGUMENT 18 sdata FIELD 19 sdata LEAF_NODE 20 sdata LEAF_NODE 18 , ARGUMENT 18 s -> s3 -> client_opaque_prf_input_len FIELD 19 s -> s3 -> client_opaque_prf_input_len LEAF_NODE 20 s LEAF_NODE 20 -> LEAF_NODE 20 s3 LEAF_NODE 20 -> LEAF_NODE 20 client_opaque_prf_input_len LEAF_NODE 18 ) LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> s3 -> client_opaque_prf_input == NULL EXPR 13 s -> s3 -> client_opaque_prf_input == NULL FIELD 14 s -> s3 -> client_opaque_prf_input LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 s3 LEAF_NODE 15 -> LEAF_NODE 15 client_opaque_prf_input EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 * al = TLS1_AD_INTERNAL_ERROR ; EXPR 15 * al = TLS1_AD_INTERNAL_ERROR ASSIGN 16 * al = TLS1_AD_INTERNAL_ERROR LVAL 17 * al UNARY_EXPR 18 * al UNARY_OPERATOR 19 * LEAF_NODE 20 * FIELD 19 al LEAF_NODE 20 al ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 TLS1_AD_INTERNAL_ERROR FIELD 18 TLS1_AD_INTERNAL_ERROR LEAF_NODE 19 TLS1_AD_INTERNAL_ERROR LEAF_NODE 15 ; JUMP_STATEMENT 14 return 0 ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 0 EXPR 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ; LEAF_NODE 13 } LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 type == TLSEXT_TYPE_session_ticket EXPR 10 type == TLSEXT_TYPE_session_ticket FIELD 11 type LEAF_NODE 12 type EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 TLSEXT_TYPE_session_ticket LEAF_NODE 12 TLSEXT_TYPE_session_ticket LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> tls_session_ticket_ext_cb && ! s -> tls_session_ticket_ext_cb ( s , data , size , s -> tls_session_ticket_ext_cb_arg ) EXPR 13 s -> tls_session_ticket_ext_cb && ! s -> tls_session_ticket_ext_cb ( s , data , size , s -> tls_session_ticket_ext_cb_arg ) AND 14 s -> tls_session_ticket_ext_cb && ! s -> tls_session_ticket_ext_cb ( s , data , size , s -> tls_session_ticket_ext_cb_arg ) EXPR 15 s -> tls_session_ticket_ext_cb FIELD 16 s -> tls_session_ticket_ext_cb LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 tls_session_ticket_ext_cb LEAF_NODE 15 && EXPR 15 ! s -> tls_session_ticket_ext_cb ( s , data , size , s -> tls_session_ticket_ext_cb_arg ) UNARY_EXPR 16 ! s -> tls_session_ticket_ext_cb ( s , data , size , s -> tls_session_ticket_ext_cb_arg ) UNARY_OPERATOR 17 ! LEAF_NODE 18 ! FUNCTION_CALL 17 s -> tls_session_ticket_ext_cb ( s , data , size , s -> tls_session_ticket_ext_cb_arg ) CALLEE 18 s -> tls_session_ticket_ext_cb LEAF_NODE 19 s LEAF_NODE 19 -> LEAF_NODE 19 tls_session_ticket_ext_cb LEAF_NODE 18 ( ARGUMENT 18 s FIELD 19 s LEAF_NODE 20 s LEAF_NODE 18 , ARGUMENT 18 data FIELD 19 data LEAF_NODE 20 data LEAF_NODE 18 , ARGUMENT 18 size FIELD 19 size LEAF_NODE 20 size LEAF_NODE 18 , ARGUMENT 18 s -> tls_session_ticket_ext_cb_arg FIELD 19 s -> tls_session_ticket_ext_cb_arg LEAF_NODE 20 s LEAF_NODE 20 -> LEAF_NODE 20 tls_session_ticket_ext_cb_arg LEAF_NODE 18 ) LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 * al = TLS1_AD_INTERNAL_ERROR ; EXPR 15 * al = TLS1_AD_INTERNAL_ERROR ASSIGN 16 * al = TLS1_AD_INTERNAL_ERROR LVAL 17 * al UNARY_EXPR 18 * al UNARY_OPERATOR 19 * LEAF_NODE 20 * FIELD 19 al LEAF_NODE 20 al ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 TLS1_AD_INTERNAL_ERROR FIELD 18 TLS1_AD_INTERNAL_ERROR LEAF_NODE 19 TLS1_AD_INTERNAL_ERROR LEAF_NODE 15 ; JUMP_STATEMENT 14 return 0 ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 0 EXPR 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ; LEAF_NODE 13 } LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 type == TLSEXT_TYPE_renegotiate EXPR 10 type == TLSEXT_TYPE_renegotiate FIELD 11 type LEAF_NODE 12 type EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 TLSEXT_TYPE_renegotiate LEAF_NODE 12 TLSEXT_TYPE_renegotiate LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ! ssl_parse_clienthello_renegotiate_ext ( s , data , size , al ) EXPR 13 ! ssl_parse_clienthello_renegotiate_ext ( s , data , size , al ) UNARY_EXPR 14 ! ssl_parse_clienthello_renegotiate_ext ( s , data , size , al ) UNARY_OPERATOR 15 ! LEAF_NODE 16 ! FUNCTION_CALL 15 ssl_parse_clienthello_renegotiate_ext ( s , data , size , al ) CALLEE 16 ssl_parse_clienthello_renegotiate_ext LEAF_NODE 17 ssl_parse_clienthello_renegotiate_ext LEAF_NODE 16 ( ARGUMENT 16 s FIELD 17 s LEAF_NODE 18 s LEAF_NODE 16 , ARGUMENT 16 data FIELD 17 data LEAF_NODE 18 data LEAF_NODE 16 , ARGUMENT 16 size FIELD 17 size LEAF_NODE 18 size LEAF_NODE 16 , ARGUMENT 16 al FIELD 17 al LEAF_NODE 18 al LEAF_NODE 16 ) LEAF_NODE 12 ) STATEMENTS 12 JUMP_STATEMENT 13 return 0 ; KEYWORD 14 return LEAF_NODE 15 return DESTINATION 14 0 EXPR 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 14 ; EXPR_STATEMENT 11 renegotiate_seen = 1 ; EXPR 12 renegotiate_seen = 1 ASSIGN 13 renegotiate_seen = 1 LVAL 14 renegotiate_seen FIELD 15 renegotiate_seen LEAF_NODE 16 renegotiate_seen ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 type == TLSEXT_TYPE_status_request && s -> version != DTLS1_VERSION && s -> ctx -> tlsext_status_cb EXPR 10 type == TLSEXT_TYPE_status_request && s -> version != DTLS1_VERSION && s -> ctx -> tlsext_status_cb AND 11 type == TLSEXT_TYPE_status_request && s -> version != DTLS1_VERSION && s -> ctx -> tlsext_status_cb EXPR 12 type == TLSEXT_TYPE_status_request FIELD 13 type LEAF_NODE 14 type EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 TLSEXT_TYPE_status_request LEAF_NODE 14 TLSEXT_TYPE_status_request LEAF_NODE 12 && EXPR 12 s -> version != DTLS1_VERSION && s -> ctx -> tlsext_status_cb AND 13 s -> version != DTLS1_VERSION && s -> ctx -> tlsext_status_cb EXPR 14 s -> version != DTLS1_VERSION FIELD 15 s -> version LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 version EQ_OPERATOR 15 != LEAF_NODE 16 != FIELD 15 DTLS1_VERSION LEAF_NODE 16 DTLS1_VERSION LEAF_NODE 14 && EXPR 14 s -> ctx -> tlsext_status_cb FIELD 15 s -> ctx -> tlsext_status_cb LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 ctx LEAF_NODE 16 -> LEAF_NODE 16 tlsext_status_cb LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 size < 5 EXPR 13 size < 5 FIELD 14 size LEAF_NODE 15 size REL_OPERATOR 14 < LEAF_NODE 15 < FIELD 14 5 LEAF_NODE 15 5 LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 * al = SSL_AD_DECODE_ERROR ; EXPR 15 * al = SSL_AD_DECODE_ERROR ASSIGN 16 * al = SSL_AD_DECODE_ERROR LVAL 17 * al UNARY_EXPR 18 * al UNARY_OPERATOR 19 * LEAF_NODE 20 * FIELD 19 al LEAF_NODE 20 al ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 SSL_AD_DECODE_ERROR FIELD 18 SSL_AD_DECODE_ERROR LEAF_NODE 19 SSL_AD_DECODE_ERROR LEAF_NODE 15 ; JUMP_STATEMENT 14 return 0 ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 0 EXPR 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 s -> tlsext_status_type = * data ++ ; EXPR 12 s -> tlsext_status_type = * data ++ ASSIGN 13 s -> tlsext_status_type = * data ++ LVAL 14 s -> tlsext_status_type FIELD 15 s -> tlsext_status_type LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 tlsext_status_type ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 * data ++ UNARY_EXPR 15 * data ++ UNARY_OPERATOR 16 * LEAF_NODE 17 * FIELD 16 data ++ LEAF_NODE 17 data LEAF_NODE 17 ++ LEAF_NODE 12 ; EXPR_STATEMENT 11 size -- ; EXPR 12 size -- FIELD 13 size -- LEAF_NODE 14 size LEAF_NODE 14 -- LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 s -> tlsext_status_type == TLSEXT_STATUSTYPE_ocsp EXPR 13 s -> tlsext_status_type == TLSEXT_STATUSTYPE_ocsp FIELD 14 s -> tlsext_status_type LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 tlsext_status_type EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 TLSEXT_STATUSTYPE_ocsp LEAF_NODE 15 TLSEXT_STATUSTYPE_ocsp LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 SIMPLE_DECL 14 const unsigned char * sdata ; VAR_DECL 15 const unsigned char * sdata TYPE 16 const unsigned char * TYPE_NAME 17 const unsigned char LEAF_NODE 18 const LEAF_NODE 18 unsigned LEAF_NODE 18 char POINTER 17 * LEAF_NODE 18 * NAME 16 sdata LEAF_NODE 17 sdata LEAF_NODE 15 ; SIMPLE_DECL 14 int dsize ; VAR_DECL 15 int dsize TYPE 16 int TYPE_NAME 17 int LEAF_NODE 18 int NAME 16 dsize LEAF_NODE 17 dsize LEAF_NODE 15 ; EXPR_STATEMENT 14 n2s ( data , dsize ) ; EXPR 15 n2s ( data , dsize ) FUNCTION_CALL 16 n2s ( data , dsize ) CALLEE 17 n2s LEAF_NODE 18 n2s LEAF_NODE 17 ( ARGUMENT 17 data FIELD 18 data LEAF_NODE 19 data LEAF_NODE 17 , ARGUMENT 17 dsize FIELD 18 dsize LEAF_NODE 19 dsize LEAF_NODE 17 ) LEAF_NODE 15 ; EXPR_STATEMENT 14 size -= 2 ; EXPR 15 size -= 2 ASSIGN 16 size -= 2 LVAL 17 size FIELD 18 size LEAF_NODE 19 size ASSIGN_OP 17 -= LEAF_NODE 18 -= RVAL 17 2 FIELD 18 2 LEAF_NODE 19 2 LEAF_NODE 15 ; SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 dsize > size EXPR 16 dsize > size FIELD 17 dsize LEAF_NODE 18 dsize REL_OPERATOR 17 > LEAF_NODE 18 > FIELD 17 size LEAF_NODE 18 size LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 EXPR_STATEMENT 17 * al = SSL_AD_DECODE_ERROR ; EXPR 18 * al = SSL_AD_DECODE_ERROR ASSIGN 19 * al = SSL_AD_DECODE_ERROR LVAL 20 * al UNARY_EXPR 21 * al UNARY_OPERATOR 22 * LEAF_NODE 23 * FIELD 22 al LEAF_NODE 23 al ASSIGN_OP 20 = LEAF_NODE 21 = RVAL 20 SSL_AD_DECODE_ERROR FIELD 21 SSL_AD_DECODE_ERROR LEAF_NODE 22 SSL_AD_DECODE_ERROR LEAF_NODE 18 ; JUMP_STATEMENT 17 return 0 ; KEYWORD 18 return LEAF_NODE 19 return DESTINATION 18 0 EXPR 19 0 FIELD 20 0 LEAF_NODE 21 0 LEAF_NODE 18 ; LEAF_NODE 16 } ITERATION 14 KEYWORD 15 while LEAF_NODE 16 while LEAF_NODE 15 ( CONDITION 15 dsize > 0 EXPR 16 dsize > 0 FIELD 17 dsize LEAF_NODE 18 dsize REL_OPERATOR 17 > LEAF_NODE 18 > FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 SIMPLE_DECL 17 OCSP_RESPID * id ; VAR_DECL 18 OCSP_RESPID * id TYPE 19 OCSP_RESPID * TYPE_NAME 20 OCSP_RESPID LEAF_NODE 21 OCSP_RESPID POINTER 20 * LEAF_NODE 21 * NAME 19 id LEAF_NODE 20 id LEAF_NODE 18 ; SIMPLE_DECL 17 int idsize ; VAR_DECL 18 int idsize TYPE 19 int TYPE_NAME 20 int LEAF_NODE 21 int NAME 19 idsize LEAF_NODE 20 idsize LEAF_NODE 18 ; SELECTION 17 KEYWORD 18 if LEAF_NODE 19 if LEAF_NODE 18 ( CONDITION 18 dsize < 4 EXPR 19 dsize < 4 FIELD 20 dsize LEAF_NODE 21 dsize REL_OPERATOR 20 < LEAF_NODE 21 < FIELD 20 4 LEAF_NODE 21 4 LEAF_NODE 18 ) STATEMENTS 18 LEAF_NODE 19 { STATEMENTS 19 EXPR_STATEMENT 20 * al = SSL_AD_DECODE_ERROR ; EXPR 21 * al = SSL_AD_DECODE_ERROR ASSIGN 22 * al = SSL_AD_DECODE_ERROR LVAL 23 * al UNARY_EXPR 24 * al UNARY_OPERATOR 25 * LEAF_NODE 26 * FIELD 25 al LEAF_NODE 26 al ASSIGN_OP 23 = LEAF_NODE 24 = RVAL 23 SSL_AD_DECODE_ERROR FIELD 24 SSL_AD_DECODE_ERROR LEAF_NODE 25 SSL_AD_DECODE_ERROR LEAF_NODE 21 ; JUMP_STATEMENT 20 return 0 ; KEYWORD 21 return LEAF_NODE 22 return DESTINATION 21 0 EXPR 22 0 FIELD 23 0 LEAF_NODE 24 0 LEAF_NODE 21 ; LEAF_NODE 19 } EXPR_STATEMENT 17 n2s ( data , idsize ) ; EXPR 18 n2s ( data , idsize ) FUNCTION_CALL 19 n2s ( data , idsize ) CALLEE 20 n2s LEAF_NODE 21 n2s LEAF_NODE 20 ( ARGUMENT 20 data FIELD 21 data LEAF_NODE 22 data LEAF_NODE 20 , ARGUMENT 20 idsize FIELD 21 idsize LEAF_NODE 22 idsize LEAF_NODE 20 ) LEAF_NODE 18 ; EXPR_STATEMENT 17 dsize -= 2 + idsize ; EXPR 18 dsize -= 2 + idsize ASSIGN 19 dsize -= 2 + idsize LVAL 20 dsize FIELD 21 dsize LEAF_NODE 22 dsize ASSIGN_OP 20 -= LEAF_NODE 21 -= RVAL 20 2 + idsize FIELD 21 2 LEAF_NODE 22 2 LEAF_NODE 21 + FIELD 21 idsize LEAF_NODE 22 idsize LEAF_NODE 18 ; SELECTION 17 KEYWORD 18 if LEAF_NODE 19 if LEAF_NODE 18 ( CONDITION 18 dsize < 0 EXPR 19 dsize < 0 FIELD 20 dsize LEAF_NODE 21 dsize REL_OPERATOR 20 < LEAF_NODE 21 < FIELD 20 0 LEAF_NODE 21 0 LEAF_NODE 18 ) STATEMENTS 18 LEAF_NODE 19 { STATEMENTS 19 EXPR_STATEMENT 20 * al = SSL_AD_DECODE_ERROR ; EXPR 21 * al = SSL_AD_DECODE_ERROR ASSIGN 22 * al = SSL_AD_DECODE_ERROR LVAL 23 * al UNARY_EXPR 24 * al UNARY_OPERATOR 25 * LEAF_NODE 26 * FIELD 25 al LEAF_NODE 26 al ASSIGN_OP 23 = LEAF_NODE 24 = RVAL 23 SSL_AD_DECODE_ERROR FIELD 24 SSL_AD_DECODE_ERROR LEAF_NODE 25 SSL_AD_DECODE_ERROR LEAF_NODE 21 ; JUMP_STATEMENT 20 return 0 ; KEYWORD 21 return LEAF_NODE 22 return DESTINATION 21 0 EXPR 22 0 FIELD 23 0 LEAF_NODE 24 0 LEAF_NODE 21 ; LEAF_NODE 19 } EXPR_STATEMENT 17 sdata = data ; EXPR 18 sdata = data ASSIGN 19 sdata = data LVAL 20 sdata FIELD 21 sdata LEAF_NODE 22 sdata ASSIGN_OP 20 = LEAF_NODE 21 = RVAL 20 data FIELD 21 data LEAF_NODE 22 data LEAF_NODE 18 ; EXPR_STATEMENT 17 data += idsize ; EXPR 18 data += idsize ASSIGN 19 data += idsize LVAL 20 data FIELD 21 data LEAF_NODE 22 data ASSIGN_OP 20 += LEAF_NODE 21 += RVAL 20 idsize FIELD 21 idsize LEAF_NODE 22 idsize LEAF_NODE 18 ; EXPR_STATEMENT 17 id = d2i_OCSP_RESPID ( NULL , & sdata , idsize ) ; EXPR 18 id = d2i_OCSP_RESPID ( NULL , & sdata , idsize ) ASSIGN 19 id = d2i_OCSP_RESPID ( NULL , & sdata , idsize ) LVAL 20 id FIELD 21 id LEAF_NODE 22 id ASSIGN_OP 20 = LEAF_NODE 21 = RVAL 20 d2i_OCSP_RESPID ( NULL , & sdata , idsize ) FUNCTION_CALL 21 d2i_OCSP_RESPID ( NULL , & sdata , idsize ) CALLEE 22 d2i_OCSP_RESPID LEAF_NODE 23 d2i_OCSP_RESPID LEAF_NODE 22 ( ARGUMENT 22 NULL FIELD 23 NULL LEAF_NODE 24 NULL LEAF_NODE 22 , ARGUMENT 22 & sdata UNARY_EXPR 23 & sdata UNARY_OPERATOR 24 & LEAF_NODE 25 & FIELD 24 sdata LEAF_NODE 25 sdata LEAF_NODE 22 , ARGUMENT 22 idsize FIELD 23 idsize LEAF_NODE 24 idsize LEAF_NODE 22 ) LEAF_NODE 18 ; SELECTION 17 KEYWORD 18 if LEAF_NODE 19 if LEAF_NODE 18 ( CONDITION 18 ! id EXPR 19 ! id UNARY_EXPR 20 ! id UNARY_OPERATOR 21 ! LEAF_NODE 22 ! FIELD 21 id LEAF_NODE 22 id LEAF_NODE 18 ) STATEMENTS 18 LEAF_NODE 19 { STATEMENTS 19 EXPR_STATEMENT 20 * al = SSL_AD_DECODE_ERROR ; EXPR 21 * al = SSL_AD_DECODE_ERROR ASSIGN 22 * al = SSL_AD_DECODE_ERROR LVAL 23 * al UNARY_EXPR 24 * al UNARY_OPERATOR 25 * LEAF_NODE 26 * FIELD 25 al LEAF_NODE 26 al ASSIGN_OP 23 = LEAF_NODE 24 = RVAL 23 SSL_AD_DECODE_ERROR FIELD 24 SSL_AD_DECODE_ERROR LEAF_NODE 25 SSL_AD_DECODE_ERROR LEAF_NODE 21 ; JUMP_STATEMENT 20 return 0 ; KEYWORD 21 return LEAF_NODE 22 return DESTINATION 21 0 EXPR 22 0 FIELD 23 0 LEAF_NODE 24 0 LEAF_NODE 21 ; LEAF_NODE 19 } SELECTION 17 KEYWORD 18 if LEAF_NODE 19 if LEAF_NODE 18 ( CONDITION 18 data != sdata EXPR 19 data != sdata FIELD 20 data LEAF_NODE 21 data EQ_OPERATOR 20 != LEAF_NODE 21 != FIELD 20 sdata LEAF_NODE 21 sdata LEAF_NODE 18 ) STATEMENTS 18 LEAF_NODE 19 { STATEMENTS 19 EXPR_STATEMENT 20 OCSP_RESPID_free ( id ) ; EXPR 21 OCSP_RESPID_free ( id ) FUNCTION_CALL 22 OCSP_RESPID_free ( id ) CALLEE 23 OCSP_RESPID_free LEAF_NODE 24 OCSP_RESPID_free LEAF_NODE 23 ( ARGUMENT 23 id FIELD 24 id LEAF_NODE 25 id LEAF_NODE 23 ) LEAF_NODE 21 ; EXPR_STATEMENT 20 * al = SSL_AD_DECODE_ERROR ; EXPR 21 * al = SSL_AD_DECODE_ERROR ASSIGN 22 * al = SSL_AD_DECODE_ERROR LVAL 23 * al UNARY_EXPR 24 * al UNARY_OPERATOR 25 * LEAF_NODE 26 * FIELD 25 al LEAF_NODE 26 al ASSIGN_OP 23 = LEAF_NODE 24 = RVAL 23 SSL_AD_DECODE_ERROR FIELD 24 SSL_AD_DECODE_ERROR LEAF_NODE 25 SSL_AD_DECODE_ERROR LEAF_NODE 21 ; JUMP_STATEMENT 20 return 0 ; KEYWORD 21 return LEAF_NODE 22 return DESTINATION 21 0 EXPR 22 0 FIELD 23 0 LEAF_NODE 24 0 LEAF_NODE 21 ; LEAF_NODE 19 } SELECTION 17 KEYWORD 18 if LEAF_NODE 19 if LEAF_NODE 18 ( CONDITION 18 ! s -> tlsext_ocsp_ids && ! ( s -> tlsext_ocsp_ids = sk_OCSP_RESPID_new_null ( ) ) EXPR 19 ! s -> tlsext_ocsp_ids && ! ( s -> tlsext_ocsp_ids = sk_OCSP_RESPID_new_null ( ) ) AND 20 ! s -> tlsext_ocsp_ids && ! ( s -> tlsext_ocsp_ids = sk_OCSP_RESPID_new_null ( ) ) EXPR 21 ! s -> tlsext_ocsp_ids UNARY_EXPR 22 ! s -> tlsext_ocsp_ids UNARY_OPERATOR 23 ! LEAF_NODE 24 ! FIELD 23 s -> tlsext_ocsp_ids LEAF_NODE 24 s LEAF_NODE 24 -> LEAF_NODE 24 tlsext_ocsp_ids LEAF_NODE 21 && EXPR 21 ! ( s -> tlsext_ocsp_ids = sk_OCSP_RESPID_new_null ( ) ) UNARY_EXPR 22 ! ( s -> tlsext_ocsp_ids = sk_OCSP_RESPID_new_null ( ) ) UNARY_OPERATOR 23 ! LEAF_NODE 24 ! LEAF_NODE 23 ( ASSIGN 23 s -> tlsext_ocsp_ids = sk_OCSP_RESPID_new_null ( ) LVAL 24 s -> tlsext_ocsp_ids FIELD 25 s -> tlsext_ocsp_ids LEAF_NODE 26 s LEAF_NODE 26 -> LEAF_NODE 26 tlsext_ocsp_ids ASSIGN_OP 24 = LEAF_NODE 25 = RVAL 24 sk_OCSP_RESPID_new_null ( ) FUNCTION_CALL 25 sk_OCSP_RESPID_new_null ( ) CALLEE 26 sk_OCSP_RESPID_new_null LEAF_NODE 27 sk_OCSP_RESPID_new_null LEAF_NODE 26 ( LEAF_NODE 26 ) LEAF_NODE 23 ) LEAF_NODE 18 ) STATEMENTS 18 LEAF_NODE 19 { STATEMENTS 19 EXPR_STATEMENT 20 OCSP_RESPID_free ( id ) ; EXPR 21 OCSP_RESPID_free ( id ) FUNCTION_CALL 22 OCSP_RESPID_free ( id ) CALLEE 23 OCSP_RESPID_free LEAF_NODE 24 OCSP_RESPID_free LEAF_NODE 23 ( ARGUMENT 23 id FIELD 24 id LEAF_NODE 25 id LEAF_NODE 23 ) LEAF_NODE 21 ; EXPR_STATEMENT 20 * al = SSL_AD_INTERNAL_ERROR ; EXPR 21 * al = SSL_AD_INTERNAL_ERROR ASSIGN 22 * al = SSL_AD_INTERNAL_ERROR LVAL 23 * al UNARY_EXPR 24 * al UNARY_OPERATOR 25 * LEAF_NODE 26 * FIELD 25 al LEAF_NODE 26 al ASSIGN_OP 23 = LEAF_NODE 24 = RVAL 23 SSL_AD_INTERNAL_ERROR FIELD 24 SSL_AD_INTERNAL_ERROR LEAF_NODE 25 SSL_AD_INTERNAL_ERROR LEAF_NODE 21 ; JUMP_STATEMENT 20 return 0 ; KEYWORD 21 return LEAF_NODE 22 return DESTINATION 21 0 EXPR 22 0 FIELD 23 0 LEAF_NODE 24 0 LEAF_NODE 21 ; LEAF_NODE 19 } SELECTION 17 KEYWORD 18 if LEAF_NODE 19 if LEAF_NODE 18 ( CONDITION 18 ! sk_OCSP_RESPID_push ( s -> tlsext_ocsp_ids , id ) EXPR 19 ! sk_OCSP_RESPID_push ( s -> tlsext_ocsp_ids , id ) UNARY_EXPR 20 ! sk_OCSP_RESPID_push ( s -> tlsext_ocsp_ids , id ) UNARY_OPERATOR 21 ! LEAF_NODE 22 ! FUNCTION_CALL 21 sk_OCSP_RESPID_push ( s -> tlsext_ocsp_ids , id ) CALLEE 22 sk_OCSP_RESPID_push LEAF_NODE 23 sk_OCSP_RESPID_push LEAF_NODE 22 ( ARGUMENT 22 s -> tlsext_ocsp_ids FIELD 23 s -> tlsext_ocsp_ids LEAF_NODE 24 s LEAF_NODE 24 -> LEAF_NODE 24 tlsext_ocsp_ids LEAF_NODE 22 , ARGUMENT 22 id FIELD 23 id LEAF_NODE 24 id LEAF_NODE 22 ) LEAF_NODE 18 ) STATEMENTS 18 LEAF_NODE 19 { STATEMENTS 19 EXPR_STATEMENT 20 OCSP_RESPID_free ( id ) ; EXPR 21 OCSP_RESPID_free ( id ) FUNCTION_CALL 22 OCSP_RESPID_free ( id ) CALLEE 23 OCSP_RESPID_free LEAF_NODE 24 OCSP_RESPID_free LEAF_NODE 23 ( ARGUMENT 23 id FIELD 24 id LEAF_NODE 25 id LEAF_NODE 23 ) LEAF_NODE 21 ; EXPR_STATEMENT 20 * al = SSL_AD_INTERNAL_ERROR ; EXPR 21 * al = SSL_AD_INTERNAL_ERROR ASSIGN 22 * al = SSL_AD_INTERNAL_ERROR LVAL 23 * al UNARY_EXPR 24 * al UNARY_OPERATOR 25 * LEAF_NODE 26 * FIELD 25 al LEAF_NODE 26 al ASSIGN_OP 23 = LEAF_NODE 24 = RVAL 23 SSL_AD_INTERNAL_ERROR FIELD 24 SSL_AD_INTERNAL_ERROR LEAF_NODE 25 SSL_AD_INTERNAL_ERROR LEAF_NODE 21 ; JUMP_STATEMENT 20 return 0 ; KEYWORD 21 return LEAF_NODE 22 return DESTINATION 21 0 EXPR 22 0 FIELD 23 0 LEAF_NODE 24 0 LEAF_NODE 21 ; LEAF_NODE 19 } LEAF_NODE 16 } EXPR_STATEMENT 14 n2s ( data , dsize ) ; EXPR 15 n2s ( data , dsize ) FUNCTION_CALL 16 n2s ( data , dsize ) CALLEE 17 n2s LEAF_NODE 18 n2s LEAF_NODE 17 ( ARGUMENT 17 data FIELD 18 data LEAF_NODE 19 data LEAF_NODE 17 , ARGUMENT 17 dsize FIELD 18 dsize LEAF_NODE 19 dsize LEAF_NODE 17 ) LEAF_NODE 15 ; EXPR_STATEMENT 14 size -= 2 ; EXPR 15 size -= 2 ASSIGN 16 size -= 2 LVAL 17 size FIELD 18 size LEAF_NODE 19 size ASSIGN_OP 17 -= LEAF_NODE 18 -= RVAL 17 2 FIELD 18 2 LEAF_NODE 19 2 LEAF_NODE 15 ; SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 dsize > size EXPR 16 dsize > size FIELD 17 dsize LEAF_NODE 18 dsize REL_OPERATOR 17 > LEAF_NODE 18 > FIELD 17 size LEAF_NODE 18 size LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 EXPR_STATEMENT 17 * al = SSL_AD_DECODE_ERROR ; EXPR 18 * al = SSL_AD_DECODE_ERROR ASSIGN 19 * al = SSL_AD_DECODE_ERROR LVAL 20 * al UNARY_EXPR 21 * al UNARY_OPERATOR 22 * LEAF_NODE 23 * FIELD 22 al LEAF_NODE 23 al ASSIGN_OP 20 = LEAF_NODE 21 = RVAL 20 SSL_AD_DECODE_ERROR FIELD 21 SSL_AD_DECODE_ERROR LEAF_NODE 22 SSL_AD_DECODE_ERROR LEAF_NODE 18 ; JUMP_STATEMENT 17 return 0 ; KEYWORD 18 return LEAF_NODE 19 return DESTINATION 18 0 EXPR 19 0 FIELD 20 0 LEAF_NODE 21 0 LEAF_NODE 18 ; LEAF_NODE 16 } EXPR_STATEMENT 14 sdata = data ; EXPR 15 sdata = data ASSIGN 16 sdata = data LVAL 17 sdata FIELD 18 sdata LEAF_NODE 19 sdata ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 data FIELD 18 data LEAF_NODE 19 data LEAF_NODE 15 ; SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 dsize > 0 EXPR 16 dsize > 0 FIELD 17 dsize LEAF_NODE 18 dsize REL_OPERATOR 17 > LEAF_NODE 18 > FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 EXPR_STATEMENT 17 s -> tlsext_ocsp_exts = d2i_X509_EXTENSIONS ( NULL , & sdata , dsize ) ; EXPR 18 s -> tlsext_ocsp_exts = d2i_X509_EXTENSIONS ( NULL , & sdata , dsize ) ASSIGN 19 s -> tlsext_ocsp_exts = d2i_X509_EXTENSIONS ( NULL , & sdata , dsize ) LVAL 20 s -> tlsext_ocsp_exts FIELD 21 s -> tlsext_ocsp_exts LEAF_NODE 22 s LEAF_NODE 22 -> LEAF_NODE 22 tlsext_ocsp_exts ASSIGN_OP 20 = LEAF_NODE 21 = RVAL 20 d2i_X509_EXTENSIONS ( NULL , & sdata , dsize ) FUNCTION_CALL 21 d2i_X509_EXTENSIONS ( NULL , & sdata , dsize ) CALLEE 22 d2i_X509_EXTENSIONS LEAF_NODE 23 d2i_X509_EXTENSIONS LEAF_NODE 22 ( ARGUMENT 22 NULL FIELD 23 NULL LEAF_NODE 24 NULL LEAF_NODE 22 , ARGUMENT 22 & sdata UNARY_EXPR 23 & sdata UNARY_OPERATOR 24 & LEAF_NODE 25 & FIELD 24 sdata LEAF_NODE 25 sdata LEAF_NODE 22 , ARGUMENT 22 dsize FIELD 23 dsize LEAF_NODE 24 dsize LEAF_NODE 22 ) LEAF_NODE 18 ; SELECTION 17 KEYWORD 18 if LEAF_NODE 19 if LEAF_NODE 18 ( CONDITION 18 ! s -> tlsext_ocsp_exts || ( data + dsize != sdata ) EXPR 19 ! s -> tlsext_ocsp_exts || ( data + dsize != sdata ) OR 20 ! s -> tlsext_ocsp_exts || ( data + dsize != sdata ) EXPR 21 ! s -> tlsext_ocsp_exts UNARY_EXPR 22 ! s -> tlsext_ocsp_exts UNARY_OPERATOR 23 ! LEAF_NODE 24 ! FIELD 23 s -> tlsext_ocsp_exts LEAF_NODE 24 s LEAF_NODE 24 -> LEAF_NODE 24 tlsext_ocsp_exts LEAF_NODE 21 || EXPR 21 ( data + dsize != sdata ) LEAF_NODE 22 ( FIELD 22 data LEAF_NODE 23 data LEAF_NODE 22 + FIELD 22 dsize LEAF_NODE 23 dsize EQ_OPERATOR 22 != LEAF_NODE 23 != FIELD 22 sdata LEAF_NODE 23 sdata LEAF_NODE 22 ) LEAF_NODE 18 ) STATEMENTS 18 LEAF_NODE 19 { STATEMENTS 19 EXPR_STATEMENT 20 * al = SSL_AD_DECODE_ERROR ; EXPR 21 * al = SSL_AD_DECODE_ERROR ASSIGN 22 * al = SSL_AD_DECODE_ERROR LVAL 23 * al UNARY_EXPR 24 * al UNARY_OPERATOR 25 * LEAF_NODE 26 * FIELD 25 al LEAF_NODE 26 al ASSIGN_OP 23 = LEAF_NODE 24 = RVAL 23 SSL_AD_DECODE_ERROR FIELD 24 SSL_AD_DECODE_ERROR LEAF_NODE 25 SSL_AD_DECODE_ERROR LEAF_NODE 21 ; JUMP_STATEMENT 20 return 0 ; KEYWORD 21 return LEAF_NODE 22 return DESTINATION 21 0 EXPR 22 0 FIELD 23 0 LEAF_NODE 24 0 LEAF_NODE 21 ; LEAF_NODE 19 } LEAF_NODE 16 } LEAF_NODE 13 } SELECTION 11 KEYWORD 12 else LEAF_NODE 13 else STATEMENTS 12 EXPR_STATEMENT 13 s -> tlsext_status_type = - 1 ; EXPR 14 s -> tlsext_status_type = - 1 ASSIGN 15 s -> tlsext_status_type = - 1 LVAL 16 s -> tlsext_status_type FIELD 17 s -> tlsext_status_type LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 tlsext_status_type ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 - 1 UNARY_EXPR 17 - 1 UNARY_OPERATOR 18 - LEAF_NODE 19 - FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 14 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 type == TLSEXT_TYPE_next_proto_neg && s -> s3 -> tmp . finish_md_len == 0 EXPR 10 type == TLSEXT_TYPE_next_proto_neg && s -> s3 -> tmp . finish_md_len == 0 AND 11 type == TLSEXT_TYPE_next_proto_neg && s -> s3 -> tmp . finish_md_len == 0 EXPR 12 type == TLSEXT_TYPE_next_proto_neg FIELD 13 type LEAF_NODE 14 type EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 TLSEXT_TYPE_next_proto_neg LEAF_NODE 14 TLSEXT_TYPE_next_proto_neg LEAF_NODE 12 && EXPR 12 s -> s3 -> tmp . finish_md_len == 0 FIELD 13 s -> s3 -> tmp . finish_md_len LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 s3 LEAF_NODE 14 -> LEAF_NODE 14 tmp LEAF_NODE 14 . LEAF_NODE 14 finish_md_len EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 s -> s3 -> next_proto_neg_seen = 1 ; EXPR 12 s -> s3 -> next_proto_neg_seen = 1 ASSIGN 13 s -> s3 -> next_proto_neg_seen = 1 LVAL 14 s -> s3 -> next_proto_neg_seen FIELD 15 s -> s3 -> next_proto_neg_seen LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 s3 LEAF_NODE 16 -> LEAF_NODE 16 next_proto_neg_seen ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 12 ; LEAF_NODE 10 } EXPR_STATEMENT 6 data += size ; EXPR 7 data += size ASSIGN 8 data += size LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 size FIELD 10 size LEAF_NODE 11 size LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 * p = data ; EXPR 4 * p = data ASSIGN 5 * p = data LVAL 6 * p UNARY_EXPR 7 * p UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 p LEAF_NODE 9 p ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; LABEL 3 ri_check : LEAF_NODE 4 ri_check LEAF_NODE 4 : SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! renegotiate_seen && s -> renegotiate && ! ( s -> options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION ) EXPR 5 ! renegotiate_seen && s -> renegotiate && ! ( s -> options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION ) AND 6 ! renegotiate_seen && s -> renegotiate && ! ( s -> options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION ) EXPR 7 ! renegotiate_seen UNARY_EXPR 8 ! renegotiate_seen UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 renegotiate_seen LEAF_NODE 10 renegotiate_seen LEAF_NODE 7 && EXPR 7 s -> renegotiate && ! ( s -> options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION ) AND 8 s -> renegotiate && ! ( s -> options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION ) EXPR 9 s -> renegotiate FIELD 10 s -> renegotiate LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 renegotiate LEAF_NODE 9 && EXPR 9 ! ( s -> options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION ) UNARY_EXPR 10 ! ( s -> options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION ) UNARY_OPERATOR 11 ! LEAF_NODE 12 ! LEAF_NODE 11 ( FIELD 11 s -> options LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 options LEAF_NODE 11 & FIELD 11 SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION LEAF_NODE 12 SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION LEAF_NODE 11 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 * al = SSL_AD_HANDSHAKE_FAILURE ; EXPR 7 * al = SSL_AD_HANDSHAKE_FAILURE ASSIGN 8 * al = SSL_AD_HANDSHAKE_FAILURE LVAL 9 * al UNARY_EXPR 10 * al UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 al LEAF_NODE 12 al ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL_AD_HANDSHAKE_FAILURE FIELD 10 SSL_AD_HANDSHAKE_FAILURE LEAF_NODE 11 SSL_AD_HANDSHAKE_FAILURE LEAF_NODE 7 ; EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT , SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED ) ; EXPR 7 SSLerr ( SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT , SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT , SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT FIELD 10 SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT LEAF_NODE 11 SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT LEAF_NODE 9 , ARGUMENT 9 SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED FIELD 10 SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED LEAF_NODE 11 SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 129, "project": "openssl_ast_vul_function_test_28", "target": 1}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 app_passwd LEAF_NODE 3 app_passwd PARAMETER_LIST 2 ( const char * arg1 , const char * arg2 , char * * pass1 , char * * pass2 ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * arg1 TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 arg1 LEAF_NODE 5 arg1 LEAF_NODE 3 , PARAMETER_DECL 3 const char * arg2 TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 arg2 LEAF_NODE 5 arg2 LEAF_NODE 3 , PARAMETER_DECL 3 char * * pass1 TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 pass1 LEAF_NODE 5 pass1 LEAF_NODE 3 , PARAMETER_DECL 3 char * * pass2 TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 pass2 LEAF_NODE 5 pass2 LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int same ; VAR_DECL 4 int same TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 same LEAF_NODE 6 same LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 arg2 == NULL || arg1 == NULL || strcmp ( arg1 , arg2 ) EXPR 5 arg2 == NULL || arg1 == NULL || strcmp ( arg1 , arg2 ) OR 6 arg2 == NULL || arg1 == NULL || strcmp ( arg1 , arg2 ) EXPR 7 arg2 == NULL FIELD 8 arg2 LEAF_NODE 9 arg2 EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 7 || EXPR 7 arg1 == NULL || strcmp ( arg1 , arg2 ) OR 8 arg1 == NULL || strcmp ( arg1 , arg2 ) EXPR 9 arg1 == NULL FIELD 10 arg1 LEAF_NODE 11 arg1 EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 || EXPR 9 strcmp ( arg1 , arg2 ) FUNCTION_CALL 10 strcmp ( arg1 , arg2 ) CALLEE 11 strcmp LEAF_NODE 12 strcmp LEAF_NODE 11 ( ARGUMENT 11 arg1 FIELD 12 arg1 LEAF_NODE 13 arg1 LEAF_NODE 11 , ARGUMENT 11 arg2 FIELD 12 arg2 LEAF_NODE 13 arg2 LEAF_NODE 11 ) LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 same = 0 ; EXPR 6 same = 0 ASSIGN 7 same = 0 LVAL 8 same FIELD 9 same LEAF_NODE 10 same ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 EXPR_STATEMENT 5 same = 1 ; EXPR 6 same = 1 ASSIGN 7 same = 1 LVAL 8 same FIELD 9 same LEAF_NODE 10 same ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 arg1 != NULL EXPR 5 arg1 != NULL FIELD 6 arg1 LEAF_NODE 7 arg1 EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 * pass1 = app_get_pass ( arg1 , same ) ; EXPR 7 * pass1 = app_get_pass ( arg1 , same ) ASSIGN 8 * pass1 = app_get_pass ( arg1 , same ) LVAL 9 * pass1 UNARY_EXPR 10 * pass1 UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 pass1 LEAF_NODE 12 pass1 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 app_get_pass ( arg1 , same ) FUNCTION_CALL 10 app_get_pass ( arg1 , same ) CALLEE 11 app_get_pass LEAF_NODE 12 app_get_pass LEAF_NODE 11 ( ARGUMENT 11 arg1 FIELD 12 arg1 LEAF_NODE 13 arg1 LEAF_NODE 11 , ARGUMENT 11 same FIELD 12 same LEAF_NODE 13 same LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * pass1 == NULL EXPR 8 * pass1 == NULL UNARY_EXPR 9 * pass1 UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 pass1 LEAF_NODE 11 pass1 EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return 0 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 0 EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 pass1 != NULL EXPR 7 pass1 != NULL FIELD 8 pass1 LEAF_NODE 9 pass1 EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 * pass1 = NULL ; EXPR 9 * pass1 = NULL ASSIGN 10 * pass1 = NULL LVAL 11 * pass1 UNARY_EXPR 12 * pass1 UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 pass1 LEAF_NODE 14 pass1 ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 arg2 != NULL EXPR 5 arg2 != NULL FIELD 6 arg2 LEAF_NODE 7 arg2 EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 * pass2 = app_get_pass ( arg2 , same ? 2 : 0 ) ; EXPR 7 * pass2 = app_get_pass ( arg2 , same ? 2 : 0 ) ASSIGN 8 * pass2 = app_get_pass ( arg2 , same ? 2 : 0 ) LVAL 9 * pass2 UNARY_EXPR 10 * pass2 UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 pass2 LEAF_NODE 12 pass2 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 app_get_pass ( arg2 , same ? 2 : 0 ) FUNCTION_CALL 10 app_get_pass ( arg2 , same ? 2 : 0 ) CALLEE 11 app_get_pass LEAF_NODE 12 app_get_pass LEAF_NODE 11 ( ARGUMENT 11 arg2 FIELD 12 arg2 LEAF_NODE 13 arg2 LEAF_NODE 11 , ARGUMENT 11 same ? 2 : 0 COND_EXPR 12 same ? 2 : 0 CONDITION 13 same FIELD 14 same LEAF_NODE 15 same LEAF_NODE 13 ? EXPR 13 2 FIELD 14 2 LEAF_NODE 15 2 LEAF_NODE 13 : FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * pass2 == NULL EXPR 8 * pass2 == NULL UNARY_EXPR 9 * pass2 UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 pass2 LEAF_NODE 11 pass2 EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return 0 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 0 EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 pass2 != NULL EXPR 7 pass2 != NULL FIELD 8 pass2 LEAF_NODE 9 pass2 EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 * pass2 = NULL ; EXPR 9 * pass2 = NULL ASSIGN 10 * pass2 = NULL LVAL 11 * pass2 UNARY_EXPR 12 * pass2 UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 pass2 LEAF_NODE 14 pass2 ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 9 ; LEAF_NODE 7 } JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 130, "project": "openssl_ast_normal_function_test_118", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 aria_encrypt LEAF_NODE 3 aria_encrypt PARAMETER_LIST 2 ( const unsigned char * in , unsigned char * out , const ARIA_KEY * key ) LEAF_NODE 3 ( PARAMETER_DECL 3 const unsigned char * in TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 in LEAF_NODE 5 in LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * out TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 const ARIA_KEY * key TYPE 4 const ARIA_KEY * TYPE_NAME 5 const ARIA_KEY LEAF_NODE 6 const LEAF_NODE 6 ARIA_KEY POINTER 5 * LEAF_NODE 6 * NAME 4 key LEAF_NODE 5 key LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 register SIMPLE_DECL 3 uint32_t reg0 , uint32_t reg1 , uint32_t reg2 , uint32_t reg3 ; INIT_DECL_LIST 4 uint32_t reg0 , uint32_t reg1 , uint32_t reg2 , uint32_t reg3 VAR_DECL 5 uint32_t reg0 TYPE 6 uint32_t TYPE_NAME 7 uint32_t LEAF_NODE 8 uint32_t NAME 6 reg0 LEAF_NODE 7 reg0 LEAF_NODE 5 , INIT_DECL_LIST 5 uint32_t reg1 , uint32_t reg2 , uint32_t reg3 VAR_DECL 6 uint32_t reg1 TYPE 7 uint32_t TYPE_NAME 8 uint32_t LEAF_NODE 9 uint32_t NAME 7 reg1 LEAF_NODE 8 reg1 LEAF_NODE 6 , INIT_DECL_LIST 6 uint32_t reg2 , uint32_t reg3 VAR_DECL 7 uint32_t reg2 TYPE 8 uint32_t TYPE_NAME 9 uint32_t LEAF_NODE 10 uint32_t NAME 8 reg2 LEAF_NODE 9 reg2 LEAF_NODE 7 , VAR_DECL 7 uint32_t reg3 TYPE 8 uint32_t TYPE_NAME 9 uint32_t LEAF_NODE 10 uint32_t NAME 8 reg3 LEAF_NODE 9 reg3 LEAF_NODE 4 ; SIMPLE_DECL 3 int Nr ; VAR_DECL 4 int Nr TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 Nr LEAF_NODE 6 Nr LEAF_NODE 4 ; SIMPLE_DECL 3 const ARIA_u128 * rk ; VAR_DECL 4 const ARIA_u128 * rk TYPE 5 const ARIA_u128 * TYPE_NAME 6 const ARIA_u128 LEAF_NODE 7 const LEAF_NODE 7 ARIA_u128 POINTER 6 * LEAF_NODE 7 * NAME 5 rk LEAF_NODE 6 rk LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 in == NULL || out == NULL || key == NULL EXPR 5 in == NULL || out == NULL || key == NULL OR 6 in == NULL || out == NULL || key == NULL EXPR 7 in == NULL FIELD 8 in LEAF_NODE 9 in EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 7 || EXPR 7 out == NULL || key == NULL OR 8 out == NULL || key == NULL EXPR 9 out == NULL FIELD 10 out LEAF_NODE 11 out EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 || EXPR 9 key == NULL FIELD 10 key LEAF_NODE 11 key EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 JUMP_STATEMENT 6 return DESTINATION ; KEYWORD 7 return LEAF_NODE 8 return LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 rk = key -> rd_key ; EXPR 4 rk = key -> rd_key ASSIGN 5 rk = key -> rd_key LVAL 6 rk FIELD 7 rk LEAF_NODE 8 rk ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 key -> rd_key FIELD 7 key -> rd_key LEAF_NODE 8 key LEAF_NODE 8 -> LEAF_NODE 8 rd_key LEAF_NODE 4 ; EXPR_STATEMENT 3 Nr = key -> rounds ; EXPR 4 Nr = key -> rounds ASSIGN 5 Nr = key -> rounds LVAL 6 Nr FIELD 7 Nr LEAF_NODE 8 Nr ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 key -> rounds FIELD 7 key -> rounds LEAF_NODE 8 key LEAF_NODE 8 -> LEAF_NODE 8 rounds LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 Nr != 12 && Nr != 14 && Nr != 16 EXPR 5 Nr != 12 && Nr != 14 && Nr != 16 AND 6 Nr != 12 && Nr != 14 && Nr != 16 EXPR 7 Nr != 12 FIELD 8 Nr LEAF_NODE 9 Nr EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 12 LEAF_NODE 9 12 LEAF_NODE 7 && EXPR 7 Nr != 14 && Nr != 16 AND 8 Nr != 14 && Nr != 16 EXPR 9 Nr != 14 FIELD 10 Nr LEAF_NODE 11 Nr EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 14 LEAF_NODE 11 14 LEAF_NODE 9 && EXPR 9 Nr != 16 FIELD 10 Nr LEAF_NODE 11 Nr EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 16 LEAF_NODE 11 16 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 JUMP_STATEMENT 6 return DESTINATION ; KEYWORD 7 return LEAF_NODE 8 return LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 reg0 = GET_U32_BE ( in , 0 ) ; EXPR 4 reg0 = GET_U32_BE ( in , 0 ) ASSIGN 5 reg0 = GET_U32_BE ( in , 0 ) LVAL 6 reg0 FIELD 7 reg0 LEAF_NODE 8 reg0 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 GET_U32_BE ( in , 0 ) FUNCTION_CALL 7 GET_U32_BE ( in , 0 ) CALLEE 8 GET_U32_BE LEAF_NODE 9 GET_U32_BE LEAF_NODE 8 ( ARGUMENT 8 in FIELD 9 in LEAF_NODE 10 in LEAF_NODE 8 , ARGUMENT 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 reg1 = GET_U32_BE ( in , 1 ) ; EXPR 4 reg1 = GET_U32_BE ( in , 1 ) ASSIGN 5 reg1 = GET_U32_BE ( in , 1 ) LVAL 6 reg1 FIELD 7 reg1 LEAF_NODE 8 reg1 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 GET_U32_BE ( in , 1 ) FUNCTION_CALL 7 GET_U32_BE ( in , 1 ) CALLEE 8 GET_U32_BE LEAF_NODE 9 GET_U32_BE LEAF_NODE 8 ( ARGUMENT 8 in FIELD 9 in LEAF_NODE 10 in LEAF_NODE 8 , ARGUMENT 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 reg2 = GET_U32_BE ( in , 2 ) ; EXPR 4 reg2 = GET_U32_BE ( in , 2 ) ASSIGN 5 reg2 = GET_U32_BE ( in , 2 ) LVAL 6 reg2 FIELD 7 reg2 LEAF_NODE 8 reg2 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 GET_U32_BE ( in , 2 ) FUNCTION_CALL 7 GET_U32_BE ( in , 2 ) CALLEE 8 GET_U32_BE LEAF_NODE 9 GET_U32_BE LEAF_NODE 8 ( ARGUMENT 8 in FIELD 9 in LEAF_NODE 10 in LEAF_NODE 8 , ARGUMENT 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 reg3 = GET_U32_BE ( in , 3 ) ; EXPR 4 reg3 = GET_U32_BE ( in , 3 ) ASSIGN 5 reg3 = GET_U32_BE ( in , 3 ) LVAL 6 reg3 FIELD 7 reg3 LEAF_NODE 8 reg3 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 GET_U32_BE ( in , 3 ) FUNCTION_CALL 7 GET_U32_BE ( in , 3 ) CALLEE 8 GET_U32_BE LEAF_NODE 9 GET_U32_BE LEAF_NODE 8 ( ARGUMENT 8 in FIELD 9 in LEAF_NODE 10 in LEAF_NODE 8 , ARGUMENT 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ARIA_ADD_ROUND_KEY ( rk , reg0 , reg1 , reg2 , reg3 ) ; EXPR 4 ARIA_ADD_ROUND_KEY ( rk , reg0 , reg1 , reg2 , reg3 ) FUNCTION_CALL 5 ARIA_ADD_ROUND_KEY ( rk , reg0 , reg1 , reg2 , reg3 ) CALLEE 6 ARIA_ADD_ROUND_KEY LEAF_NODE 7 ARIA_ADD_ROUND_KEY LEAF_NODE 6 ( ARGUMENT 6 rk FIELD 7 rk LEAF_NODE 8 rk LEAF_NODE 6 , ARGUMENT 6 reg0 FIELD 7 reg0 LEAF_NODE 8 reg0 LEAF_NODE 6 , ARGUMENT 6 reg1 FIELD 7 reg1 LEAF_NODE 8 reg1 LEAF_NODE 6 , ARGUMENT 6 reg2 FIELD 7 reg2 LEAF_NODE 8 reg2 LEAF_NODE 6 , ARGUMENT 6 reg3 FIELD 7 reg3 LEAF_NODE 8 reg3 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 rk ++ ; EXPR 4 rk ++ FIELD 5 rk ++ LEAF_NODE 6 rk LEAF_NODE 6 ++ LEAF_NODE 4 ; EXPR_STATEMENT 3 ARIA_SUBST_DIFF_ODD ( reg0 , reg1 , reg2 , reg3 ) ; EXPR 4 ARIA_SUBST_DIFF_ODD ( reg0 , reg1 , reg2 , reg3 ) FUNCTION_CALL 5 ARIA_SUBST_DIFF_ODD ( reg0 , reg1 , reg2 , reg3 ) CALLEE 6 ARIA_SUBST_DIFF_ODD LEAF_NODE 7 ARIA_SUBST_DIFF_ODD LEAF_NODE 6 ( ARGUMENT 6 reg0 FIELD 7 reg0 LEAF_NODE 8 reg0 LEAF_NODE 6 , ARGUMENT 6 reg1 FIELD 7 reg1 LEAF_NODE 8 reg1 LEAF_NODE 6 , ARGUMENT 6 reg2 FIELD 7 reg2 LEAF_NODE 8 reg2 LEAF_NODE 6 , ARGUMENT 6 reg3 FIELD 7 reg3 LEAF_NODE 8 reg3 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ARIA_ADD_ROUND_KEY ( rk , reg0 , reg1 , reg2 , reg3 ) ; EXPR 4 ARIA_ADD_ROUND_KEY ( rk , reg0 , reg1 , reg2 , reg3 ) FUNCTION_CALL 5 ARIA_ADD_ROUND_KEY ( rk , reg0 , reg1 , reg2 , reg3 ) CALLEE 6 ARIA_ADD_ROUND_KEY LEAF_NODE 7 ARIA_ADD_ROUND_KEY LEAF_NODE 6 ( ARGUMENT 6 rk FIELD 7 rk LEAF_NODE 8 rk LEAF_NODE 6 , ARGUMENT 6 reg0 FIELD 7 reg0 LEAF_NODE 8 reg0 LEAF_NODE 6 , ARGUMENT 6 reg1 FIELD 7 reg1 LEAF_NODE 8 reg1 LEAF_NODE 6 , ARGUMENT 6 reg2 FIELD 7 reg2 LEAF_NODE 8 reg2 LEAF_NODE 6 , ARGUMENT 6 reg3 FIELD 7 reg3 LEAF_NODE 8 reg3 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 rk ++ ; EXPR 4 rk ++ FIELD 5 rk ++ LEAF_NODE 6 rk LEAF_NODE 6 ++ LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 Nr -= 2 EXPR 5 Nr -= 2 ASSIGN 6 Nr -= 2 LVAL 7 Nr FIELD 8 Nr LEAF_NODE 9 Nr ASSIGN_OP 7 -= LEAF_NODE 8 -= RVAL 7 2 FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ARIA_SUBST_DIFF_EVEN ( reg0 , reg1 , reg2 , reg3 ) ; EXPR 7 ARIA_SUBST_DIFF_EVEN ( reg0 , reg1 , reg2 , reg3 ) FUNCTION_CALL 8 ARIA_SUBST_DIFF_EVEN ( reg0 , reg1 , reg2 , reg3 ) CALLEE 9 ARIA_SUBST_DIFF_EVEN LEAF_NODE 10 ARIA_SUBST_DIFF_EVEN LEAF_NODE 9 ( ARGUMENT 9 reg0 FIELD 10 reg0 LEAF_NODE 11 reg0 LEAF_NODE 9 , ARGUMENT 9 reg1 FIELD 10 reg1 LEAF_NODE 11 reg1 LEAF_NODE 9 , ARGUMENT 9 reg2 FIELD 10 reg2 LEAF_NODE 11 reg2 LEAF_NODE 9 , ARGUMENT 9 reg3 FIELD 10 reg3 LEAF_NODE 11 reg3 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ARIA_ADD_ROUND_KEY ( rk , reg0 , reg1 , reg2 , reg3 ) ; EXPR 7 ARIA_ADD_ROUND_KEY ( rk , reg0 , reg1 , reg2 , reg3 ) FUNCTION_CALL 8 ARIA_ADD_ROUND_KEY ( rk , reg0 , reg1 , reg2 , reg3 ) CALLEE 9 ARIA_ADD_ROUND_KEY LEAF_NODE 10 ARIA_ADD_ROUND_KEY LEAF_NODE 9 ( ARGUMENT 9 rk FIELD 10 rk LEAF_NODE 11 rk LEAF_NODE 9 , ARGUMENT 9 reg0 FIELD 10 reg0 LEAF_NODE 11 reg0 LEAF_NODE 9 , ARGUMENT 9 reg1 FIELD 10 reg1 LEAF_NODE 11 reg1 LEAF_NODE 9 , ARGUMENT 9 reg2 FIELD 10 reg2 LEAF_NODE 11 reg2 LEAF_NODE 9 , ARGUMENT 9 reg3 FIELD 10 reg3 LEAF_NODE 11 reg3 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 rk ++ ; EXPR 7 rk ++ FIELD 8 rk ++ LEAF_NODE 9 rk LEAF_NODE 9 ++ LEAF_NODE 7 ; EXPR_STATEMENT 6 ARIA_SUBST_DIFF_ODD ( reg0 , reg1 , reg2 , reg3 ) ; EXPR 7 ARIA_SUBST_DIFF_ODD ( reg0 , reg1 , reg2 , reg3 ) FUNCTION_CALL 8 ARIA_SUBST_DIFF_ODD ( reg0 , reg1 , reg2 , reg3 ) CALLEE 9 ARIA_SUBST_DIFF_ODD LEAF_NODE 10 ARIA_SUBST_DIFF_ODD LEAF_NODE 9 ( ARGUMENT 9 reg0 FIELD 10 reg0 LEAF_NODE 11 reg0 LEAF_NODE 9 , ARGUMENT 9 reg1 FIELD 10 reg1 LEAF_NODE 11 reg1 LEAF_NODE 9 , ARGUMENT 9 reg2 FIELD 10 reg2 LEAF_NODE 11 reg2 LEAF_NODE 9 , ARGUMENT 9 reg3 FIELD 10 reg3 LEAF_NODE 11 reg3 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ARIA_ADD_ROUND_KEY ( rk , reg0 , reg1 , reg2 , reg3 ) ; EXPR 7 ARIA_ADD_ROUND_KEY ( rk , reg0 , reg1 , reg2 , reg3 ) FUNCTION_CALL 8 ARIA_ADD_ROUND_KEY ( rk , reg0 , reg1 , reg2 , reg3 ) CALLEE 9 ARIA_ADD_ROUND_KEY LEAF_NODE 10 ARIA_ADD_ROUND_KEY LEAF_NODE 9 ( ARGUMENT 9 rk FIELD 10 rk LEAF_NODE 11 rk LEAF_NODE 9 , ARGUMENT 9 reg0 FIELD 10 reg0 LEAF_NODE 11 reg0 LEAF_NODE 9 , ARGUMENT 9 reg1 FIELD 10 reg1 LEAF_NODE 11 reg1 LEAF_NODE 9 , ARGUMENT 9 reg2 FIELD 10 reg2 LEAF_NODE 11 reg2 LEAF_NODE 9 , ARGUMENT 9 reg3 FIELD 10 reg3 LEAF_NODE 11 reg3 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 rk ++ ; EXPR 7 rk ++ FIELD 8 rk ++ LEAF_NODE 9 rk LEAF_NODE 9 ++ LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 reg0 = rk -> u [ 0 ] ^ MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg0 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg0 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg0 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg0 , 3 ) ] ) ) ; EXPR 4 reg0 = rk -> u [ 0 ] ^ MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg0 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg0 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg0 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg0 , 3 ) ] ) ) ASSIGN 5 reg0 = rk -> u [ 0 ] ^ MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg0 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg0 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg0 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg0 , 3 ) ] ) ) LVAL 6 reg0 FIELD 7 reg0 LEAF_NODE 8 reg0 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 rk -> u [ 0 ] ^ MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg0 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg0 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg0 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg0 , 3 ) ] ) ) FIELD 7 rk -> u [ 0 ] LEAF_NODE 8 rk LEAF_NODE 8 -> LEAF_NODE 8 u LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] LEAF_NODE 7 ^ FUNCTION_CALL 7 MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg0 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg0 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg0 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg0 , 3 ) ] ) ) CALLEE 8 MAKE_U32 LEAF_NODE 9 MAKE_U32 LEAF_NODE 8 ( ARGUMENT 8 ( uint8_t ) ( X1 [ GET_U8_BE ( reg0 , 0 ) ] ) LEAF_NODE 9 ( TYPE_NAME 9 uint8_t LEAF_NODE 10 uint8_t LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 X1 [ GET_U8_BE ( reg0 , 0 ) ] LEAF_NODE 10 X1 LEAF_NODE 10 [ EXPR 10 GET_U8_BE ( reg0 , 0 ) FUNCTION_CALL 11 GET_U8_BE ( reg0 , 0 ) CALLEE 12 GET_U8_BE LEAF_NODE 13 GET_U8_BE LEAF_NODE 12 ( ARGUMENT 12 reg0 FIELD 13 reg0 LEAF_NODE 14 reg0 LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 10 ] LEAF_NODE 9 ) LEAF_NODE 8 , ARGUMENT 8 ( uint8_t ) ( X2 [ GET_U8_BE ( reg0 , 1 ) ] >> 8 ) LEAF_NODE 9 ( TYPE_NAME 9 uint8_t LEAF_NODE 10 uint8_t LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 X2 [ GET_U8_BE ( reg0 , 1 ) ] LEAF_NODE 10 X2 LEAF_NODE 10 [ EXPR 10 GET_U8_BE ( reg0 , 1 ) FUNCTION_CALL 11 GET_U8_BE ( reg0 , 1 ) CALLEE 12 GET_U8_BE LEAF_NODE 13 GET_U8_BE LEAF_NODE 12 ( ARGUMENT 12 reg0 FIELD 13 reg0 LEAF_NODE 14 reg0 LEAF_NODE 12 , ARGUMENT 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ) LEAF_NODE 10 ] LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 8 , ARGUMENT 8 ( uint8_t ) ( S1 [ GET_U8_BE ( reg0 , 2 ) ] ) LEAF_NODE 9 ( TYPE_NAME 9 uint8_t LEAF_NODE 10 uint8_t LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 S1 [ GET_U8_BE ( reg0 , 2 ) ] LEAF_NODE 10 S1 LEAF_NODE 10 [ EXPR 10 GET_U8_BE ( reg0 , 2 ) FUNCTION_CALL 11 GET_U8_BE ( reg0 , 2 ) CALLEE 12 GET_U8_BE LEAF_NODE 13 GET_U8_BE LEAF_NODE 12 ( ARGUMENT 12 reg0 FIELD 13 reg0 LEAF_NODE 14 reg0 LEAF_NODE 12 , ARGUMENT 12 2 FIELD 13 2 LEAF_NODE 14 2 LEAF_NODE 12 ) LEAF_NODE 10 ] LEAF_NODE 9 ) LEAF_NODE 8 , ARGUMENT 8 ( uint8_t ) ( S2 [ GET_U8_BE ( reg0 , 3 ) ] ) LEAF_NODE 9 ( TYPE_NAME 9 uint8_t LEAF_NODE 10 uint8_t LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 S2 [ GET_U8_BE ( reg0 , 3 ) ] LEAF_NODE 10 S2 LEAF_NODE 10 [ EXPR 10 GET_U8_BE ( reg0 , 3 ) FUNCTION_CALL 11 GET_U8_BE ( reg0 , 3 ) CALLEE 12 GET_U8_BE LEAF_NODE 13 GET_U8_BE LEAF_NODE 12 ( ARGUMENT 12 reg0 FIELD 13 reg0 LEAF_NODE 14 reg0 LEAF_NODE 12 , ARGUMENT 12 3 FIELD 13 3 LEAF_NODE 14 3 LEAF_NODE 12 ) LEAF_NODE 10 ] LEAF_NODE 9 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 reg1 = rk -> u [ 1 ] ^ MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg1 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg1 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg1 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg1 , 3 ) ] ) ) ; EXPR 4 reg1 = rk -> u [ 1 ] ^ MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg1 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg1 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg1 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg1 , 3 ) ] ) ) ASSIGN 5 reg1 = rk -> u [ 1 ] ^ MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg1 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg1 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg1 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg1 , 3 ) ] ) ) LVAL 6 reg1 FIELD 7 reg1 LEAF_NODE 8 reg1 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 rk -> u [ 1 ] ^ MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg1 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg1 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg1 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg1 , 3 ) ] ) ) FIELD 7 rk -> u [ 1 ] LEAF_NODE 8 rk LEAF_NODE 8 -> LEAF_NODE 8 u LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] LEAF_NODE 7 ^ FUNCTION_CALL 7 MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg1 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg1 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg1 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg1 , 3 ) ] ) ) CALLEE 8 MAKE_U32 LEAF_NODE 9 MAKE_U32 LEAF_NODE 8 ( ARGUMENT 8 ( uint8_t ) ( X1 [ GET_U8_BE ( reg1 , 0 ) ] ) LEAF_NODE 9 ( TYPE_NAME 9 uint8_t LEAF_NODE 10 uint8_t LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 X1 [ GET_U8_BE ( reg1 , 0 ) ] LEAF_NODE 10 X1 LEAF_NODE 10 [ EXPR 10 GET_U8_BE ( reg1 , 0 ) FUNCTION_CALL 11 GET_U8_BE ( reg1 , 0 ) CALLEE 12 GET_U8_BE LEAF_NODE 13 GET_U8_BE LEAF_NODE 12 ( ARGUMENT 12 reg1 FIELD 13 reg1 LEAF_NODE 14 reg1 LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 10 ] LEAF_NODE 9 ) LEAF_NODE 8 , ARGUMENT 8 ( uint8_t ) ( X2 [ GET_U8_BE ( reg1 , 1 ) ] >> 8 ) LEAF_NODE 9 ( TYPE_NAME 9 uint8_t LEAF_NODE 10 uint8_t LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 X2 [ GET_U8_BE ( reg1 , 1 ) ] LEAF_NODE 10 X2 LEAF_NODE 10 [ EXPR 10 GET_U8_BE ( reg1 , 1 ) FUNCTION_CALL 11 GET_U8_BE ( reg1 , 1 ) CALLEE 12 GET_U8_BE LEAF_NODE 13 GET_U8_BE LEAF_NODE 12 ( ARGUMENT 12 reg1 FIELD 13 reg1 LEAF_NODE 14 reg1 LEAF_NODE 12 , ARGUMENT 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ) LEAF_NODE 10 ] LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 8 , ARGUMENT 8 ( uint8_t ) ( S1 [ GET_U8_BE ( reg1 , 2 ) ] ) LEAF_NODE 9 ( TYPE_NAME 9 uint8_t LEAF_NODE 10 uint8_t LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 S1 [ GET_U8_BE ( reg1 , 2 ) ] LEAF_NODE 10 S1 LEAF_NODE 10 [ EXPR 10 GET_U8_BE ( reg1 , 2 ) FUNCTION_CALL 11 GET_U8_BE ( reg1 , 2 ) CALLEE 12 GET_U8_BE LEAF_NODE 13 GET_U8_BE LEAF_NODE 12 ( ARGUMENT 12 reg1 FIELD 13 reg1 LEAF_NODE 14 reg1 LEAF_NODE 12 , ARGUMENT 12 2 FIELD 13 2 LEAF_NODE 14 2 LEAF_NODE 12 ) LEAF_NODE 10 ] LEAF_NODE 9 ) LEAF_NODE 8 , ARGUMENT 8 ( uint8_t ) ( S2 [ GET_U8_BE ( reg1 , 3 ) ] ) LEAF_NODE 9 ( TYPE_NAME 9 uint8_t LEAF_NODE 10 uint8_t LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 S2 [ GET_U8_BE ( reg1 , 3 ) ] LEAF_NODE 10 S2 LEAF_NODE 10 [ EXPR 10 GET_U8_BE ( reg1 , 3 ) FUNCTION_CALL 11 GET_U8_BE ( reg1 , 3 ) CALLEE 12 GET_U8_BE LEAF_NODE 13 GET_U8_BE LEAF_NODE 12 ( ARGUMENT 12 reg1 FIELD 13 reg1 LEAF_NODE 14 reg1 LEAF_NODE 12 , ARGUMENT 12 3 FIELD 13 3 LEAF_NODE 14 3 LEAF_NODE 12 ) LEAF_NODE 10 ] LEAF_NODE 9 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 reg2 = rk -> u [ 2 ] ^ MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg2 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg2 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg2 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg2 , 3 ) ] ) ) ; EXPR 4 reg2 = rk -> u [ 2 ] ^ MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg2 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg2 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg2 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg2 , 3 ) ] ) ) ASSIGN 5 reg2 = rk -> u [ 2 ] ^ MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg2 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg2 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg2 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg2 , 3 ) ] ) ) LVAL 6 reg2 FIELD 7 reg2 LEAF_NODE 8 reg2 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 rk -> u [ 2 ] ^ MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg2 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg2 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg2 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg2 , 3 ) ] ) ) FIELD 7 rk -> u [ 2 ] LEAF_NODE 8 rk LEAF_NODE 8 -> LEAF_NODE 8 u LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] LEAF_NODE 7 ^ FUNCTION_CALL 7 MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg2 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg2 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg2 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg2 , 3 ) ] ) ) CALLEE 8 MAKE_U32 LEAF_NODE 9 MAKE_U32 LEAF_NODE 8 ( ARGUMENT 8 ( uint8_t ) ( X1 [ GET_U8_BE ( reg2 , 0 ) ] ) LEAF_NODE 9 ( TYPE_NAME 9 uint8_t LEAF_NODE 10 uint8_t LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 X1 [ GET_U8_BE ( reg2 , 0 ) ] LEAF_NODE 10 X1 LEAF_NODE 10 [ EXPR 10 GET_U8_BE ( reg2 , 0 ) FUNCTION_CALL 11 GET_U8_BE ( reg2 , 0 ) CALLEE 12 GET_U8_BE LEAF_NODE 13 GET_U8_BE LEAF_NODE 12 ( ARGUMENT 12 reg2 FIELD 13 reg2 LEAF_NODE 14 reg2 LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 10 ] LEAF_NODE 9 ) LEAF_NODE 8 , ARGUMENT 8 ( uint8_t ) ( X2 [ GET_U8_BE ( reg2 , 1 ) ] >> 8 ) LEAF_NODE 9 ( TYPE_NAME 9 uint8_t LEAF_NODE 10 uint8_t LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 X2 [ GET_U8_BE ( reg2 , 1 ) ] LEAF_NODE 10 X2 LEAF_NODE 10 [ EXPR 10 GET_U8_BE ( reg2 , 1 ) FUNCTION_CALL 11 GET_U8_BE ( reg2 , 1 ) CALLEE 12 GET_U8_BE LEAF_NODE 13 GET_U8_BE LEAF_NODE 12 ( ARGUMENT 12 reg2 FIELD 13 reg2 LEAF_NODE 14 reg2 LEAF_NODE 12 , ARGUMENT 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ) LEAF_NODE 10 ] LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 8 , ARGUMENT 8 ( uint8_t ) ( S1 [ GET_U8_BE ( reg2 , 2 ) ] ) LEAF_NODE 9 ( TYPE_NAME 9 uint8_t LEAF_NODE 10 uint8_t LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 S1 [ GET_U8_BE ( reg2 , 2 ) ] LEAF_NODE 10 S1 LEAF_NODE 10 [ EXPR 10 GET_U8_BE ( reg2 , 2 ) FUNCTION_CALL 11 GET_U8_BE ( reg2 , 2 ) CALLEE 12 GET_U8_BE LEAF_NODE 13 GET_U8_BE LEAF_NODE 12 ( ARGUMENT 12 reg2 FIELD 13 reg2 LEAF_NODE 14 reg2 LEAF_NODE 12 , ARGUMENT 12 2 FIELD 13 2 LEAF_NODE 14 2 LEAF_NODE 12 ) LEAF_NODE 10 ] LEAF_NODE 9 ) LEAF_NODE 8 , ARGUMENT 8 ( uint8_t ) ( S2 [ GET_U8_BE ( reg2 , 3 ) ] ) LEAF_NODE 9 ( TYPE_NAME 9 uint8_t LEAF_NODE 10 uint8_t LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 S2 [ GET_U8_BE ( reg2 , 3 ) ] LEAF_NODE 10 S2 LEAF_NODE 10 [ EXPR 10 GET_U8_BE ( reg2 , 3 ) FUNCTION_CALL 11 GET_U8_BE ( reg2 , 3 ) CALLEE 12 GET_U8_BE LEAF_NODE 13 GET_U8_BE LEAF_NODE 12 ( ARGUMENT 12 reg2 FIELD 13 reg2 LEAF_NODE 14 reg2 LEAF_NODE 12 , ARGUMENT 12 3 FIELD 13 3 LEAF_NODE 14 3 LEAF_NODE 12 ) LEAF_NODE 10 ] LEAF_NODE 9 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 reg3 = rk -> u [ 3 ] ^ MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg3 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg3 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg3 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg3 , 3 ) ] ) ) ; EXPR 4 reg3 = rk -> u [ 3 ] ^ MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg3 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg3 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg3 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg3 , 3 ) ] ) ) ASSIGN 5 reg3 = rk -> u [ 3 ] ^ MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg3 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg3 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg3 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg3 , 3 ) ] ) ) LVAL 6 reg3 FIELD 7 reg3 LEAF_NODE 8 reg3 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 rk -> u [ 3 ] ^ MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg3 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg3 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg3 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg3 , 3 ) ] ) ) FIELD 7 rk -> u [ 3 ] LEAF_NODE 8 rk LEAF_NODE 8 -> LEAF_NODE 8 u LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] LEAF_NODE 7 ^ FUNCTION_CALL 7 MAKE_U32 ( ( uint8_t ) ( X1 [ GET_U8_BE ( reg3 , 0 ) ] ) , ( uint8_t ) ( X2 [ GET_U8_BE ( reg3 , 1 ) ] >> 8 ) , ( uint8_t ) ( S1 [ GET_U8_BE ( reg3 , 2 ) ] ) , ( uint8_t ) ( S2 [ GET_U8_BE ( reg3 , 3 ) ] ) ) CALLEE 8 MAKE_U32 LEAF_NODE 9 MAKE_U32 LEAF_NODE 8 ( ARGUMENT 8 ( uint8_t ) ( X1 [ GET_U8_BE ( reg3 , 0 ) ] ) LEAF_NODE 9 ( TYPE_NAME 9 uint8_t LEAF_NODE 10 uint8_t LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 X1 [ GET_U8_BE ( reg3 , 0 ) ] LEAF_NODE 10 X1 LEAF_NODE 10 [ EXPR 10 GET_U8_BE ( reg3 , 0 ) FUNCTION_CALL 11 GET_U8_BE ( reg3 , 0 ) CALLEE 12 GET_U8_BE LEAF_NODE 13 GET_U8_BE LEAF_NODE 12 ( ARGUMENT 12 reg3 FIELD 13 reg3 LEAF_NODE 14 reg3 LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 10 ] LEAF_NODE 9 ) LEAF_NODE 8 , ARGUMENT 8 ( uint8_t ) ( X2 [ GET_U8_BE ( reg3 , 1 ) ] >> 8 ) LEAF_NODE 9 ( TYPE_NAME 9 uint8_t LEAF_NODE 10 uint8_t LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 X2 [ GET_U8_BE ( reg3 , 1 ) ] LEAF_NODE 10 X2 LEAF_NODE 10 [ EXPR 10 GET_U8_BE ( reg3 , 1 ) FUNCTION_CALL 11 GET_U8_BE ( reg3 , 1 ) CALLEE 12 GET_U8_BE LEAF_NODE 13 GET_U8_BE LEAF_NODE 12 ( ARGUMENT 12 reg3 FIELD 13 reg3 LEAF_NODE 14 reg3 LEAF_NODE 12 , ARGUMENT 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ) LEAF_NODE 10 ] LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) LEAF_NODE 8 , ARGUMENT 8 ( uint8_t ) ( S1 [ GET_U8_BE ( reg3 , 2 ) ] ) LEAF_NODE 9 ( TYPE_NAME 9 uint8_t LEAF_NODE 10 uint8_t LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 S1 [ GET_U8_BE ( reg3 , 2 ) ] LEAF_NODE 10 S1 LEAF_NODE 10 [ EXPR 10 GET_U8_BE ( reg3 , 2 ) FUNCTION_CALL 11 GET_U8_BE ( reg3 , 2 ) CALLEE 12 GET_U8_BE LEAF_NODE 13 GET_U8_BE LEAF_NODE 12 ( ARGUMENT 12 reg3 FIELD 13 reg3 LEAF_NODE 14 reg3 LEAF_NODE 12 , ARGUMENT 12 2 FIELD 13 2 LEAF_NODE 14 2 LEAF_NODE 12 ) LEAF_NODE 10 ] LEAF_NODE 9 ) LEAF_NODE 8 , ARGUMENT 8 ( uint8_t ) ( S2 [ GET_U8_BE ( reg3 , 3 ) ] ) LEAF_NODE 9 ( TYPE_NAME 9 uint8_t LEAF_NODE 10 uint8_t LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 S2 [ GET_U8_BE ( reg3 , 3 ) ] LEAF_NODE 10 S2 LEAF_NODE 10 [ EXPR 10 GET_U8_BE ( reg3 , 3 ) FUNCTION_CALL 11 GET_U8_BE ( reg3 , 3 ) CALLEE 12 GET_U8_BE LEAF_NODE 13 GET_U8_BE LEAF_NODE 12 ( ARGUMENT 12 reg3 FIELD 13 reg3 LEAF_NODE 14 reg3 LEAF_NODE 12 , ARGUMENT 12 3 FIELD 13 3 LEAF_NODE 14 3 LEAF_NODE 12 ) LEAF_NODE 10 ] LEAF_NODE 9 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 PUT_U32_BE ( out , 0 , reg0 ) ; EXPR 4 PUT_U32_BE ( out , 0 , reg0 ) FUNCTION_CALL 5 PUT_U32_BE ( out , 0 , reg0 ) CALLEE 6 PUT_U32_BE LEAF_NODE 7 PUT_U32_BE LEAF_NODE 6 ( ARGUMENT 6 out FIELD 7 out LEAF_NODE 8 out LEAF_NODE 6 , ARGUMENT 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 6 , ARGUMENT 6 reg0 FIELD 7 reg0 LEAF_NODE 8 reg0 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 PUT_U32_BE ( out , 1 , reg1 ) ; EXPR 4 PUT_U32_BE ( out , 1 , reg1 ) FUNCTION_CALL 5 PUT_U32_BE ( out , 1 , reg1 ) CALLEE 6 PUT_U32_BE LEAF_NODE 7 PUT_U32_BE LEAF_NODE 6 ( ARGUMENT 6 out FIELD 7 out LEAF_NODE 8 out LEAF_NODE 6 , ARGUMENT 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 , ARGUMENT 6 reg1 FIELD 7 reg1 LEAF_NODE 8 reg1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 PUT_U32_BE ( out , 2 , reg2 ) ; EXPR 4 PUT_U32_BE ( out , 2 , reg2 ) FUNCTION_CALL 5 PUT_U32_BE ( out , 2 , reg2 ) CALLEE 6 PUT_U32_BE LEAF_NODE 7 PUT_U32_BE LEAF_NODE 6 ( ARGUMENT 6 out FIELD 7 out LEAF_NODE 8 out LEAF_NODE 6 , ARGUMENT 6 2 FIELD 7 2 LEAF_NODE 8 2 LEAF_NODE 6 , ARGUMENT 6 reg2 FIELD 7 reg2 LEAF_NODE 8 reg2 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 PUT_U32_BE ( out , 3 , reg3 ) ; EXPR 4 PUT_U32_BE ( out , 3 , reg3 ) FUNCTION_CALL 5 PUT_U32_BE ( out , 3 , reg3 ) CALLEE 6 PUT_U32_BE LEAF_NODE 7 PUT_U32_BE LEAF_NODE 6 ( ARGUMENT 6 out FIELD 7 out LEAF_NODE 8 out LEAF_NODE 6 , ARGUMENT 6 3 FIELD 7 3 LEAF_NODE 8 3 LEAF_NODE 6 , ARGUMENT 6 reg3 FIELD 7 reg3 LEAF_NODE 8 reg3 LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 131, "project": "openssl_ast_normal_function_test_143", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 CRYPTO_secure_malloc_done LEAF_NODE 3 CRYPTO_secure_malloc_done PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 secure_mem_used == 0 EXPR 5 secure_mem_used == 0 FIELD 6 secure_mem_used LEAF_NODE 7 secure_mem_used EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 sh_done ( ) ; EXPR 7 sh_done ( ) FUNCTION_CALL 8 sh_done ( ) CALLEE 9 sh_done LEAF_NODE 10 sh_done LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 secure_mem_initialized = 0 ; EXPR 7 secure_mem_initialized = 0 ASSIGN 8 secure_mem_initialized = 0 LVAL 9 secure_mem_initialized FIELD 10 secure_mem_initialized LEAF_NODE 11 secure_mem_initialized ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; EXPR_STATEMENT 6 CRYPTO_THREAD_lock_free ( sec_malloc_lock ) ; EXPR 7 CRYPTO_THREAD_lock_free ( sec_malloc_lock ) FUNCTION_CALL 8 CRYPTO_THREAD_lock_free ( sec_malloc_lock ) CALLEE 9 CRYPTO_THREAD_lock_free LEAF_NODE 10 CRYPTO_THREAD_lock_free LEAF_NODE 9 ( ARGUMENT 9 sec_malloc_lock FIELD 10 sec_malloc_lock LEAF_NODE 11 sec_malloc_lock LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 sec_malloc_lock = NULL ; EXPR 7 sec_malloc_lock = NULL ASSIGN 8 sec_malloc_lock = NULL LVAL 9 sec_malloc_lock FIELD 10 sec_malloc_lock LEAF_NODE 11 sec_malloc_lock ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; JUMP_STATEMENT 6 return 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 1 EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 132, "project": "openssl_ast_normal_function_test_54", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_BIT_STRING_check LEAF_NODE 3 ASN1_BIT_STRING_check PARAMETER_LIST 2 ( const ASN1_BIT_STRING * a , const unsigned char * flags , int flags_len ) LEAF_NODE 3 ( PARAMETER_DECL 3 const ASN1_BIT_STRING * a TYPE 4 const ASN1_BIT_STRING * TYPE_NAME 5 const ASN1_BIT_STRING LEAF_NODE 6 const LEAF_NODE 6 ASN1_BIT_STRING POINTER 5 * LEAF_NODE 6 * NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 , PARAMETER_DECL 3 const unsigned char * flags TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 flags LEAF_NODE 5 flags LEAF_NODE 3 , PARAMETER_DECL 3 int flags_len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 flags_len LEAF_NODE 5 flags_len LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int i , int ok ; INIT_DECL_LIST 4 int i , int ok VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 , VAR_DECL 5 int ok TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 ok LEAF_NODE 7 ok LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! a || ! a -> data EXPR 5 ! a || ! a -> data OR 6 ! a || ! a -> data EXPR 7 ! a UNARY_EXPR 8 ! a UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 a LEAF_NODE 10 a LEAF_NODE 7 || EXPR 7 ! a -> data UNARY_EXPR 8 ! a -> data UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 a -> data LEAF_NODE 10 a LEAF_NODE 10 -> LEAF_NODE 10 data LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 1 EXPR 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 6 ; EXPR_STATEMENT 3 ok = 1 ; EXPR 4 ok = 1 ASSIGN 5 ok = 1 LVAL 6 ok FIELD 7 ok LEAF_NODE 8 ok ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < a -> length && ok EXPR 5 i < a -> length && ok AND 6 i < a -> length && ok EXPR 7 i < a -> length FIELD 8 i LEAF_NODE 9 i REL_OPERATOR 8 < LEAF_NODE 9 < FIELD 8 a -> length LEAF_NODE 9 a LEAF_NODE 9 -> LEAF_NODE 9 length LEAF_NODE 7 && EXPR 7 ok FIELD 8 ok LEAF_NODE 9 ok LEAF_NODE 4 ; FOR_EXPR 4 ++ i EXPR 5 ++ i LEAF_NODE 6 ++ FIELD 6 i LEAF_NODE 7 i LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 unsigned char mask ; mask = i < flags_len ? ~flags [ i ] : 0xff ; VAR_DECL 7 unsigned char mask ; mask = i < flags_len ? ~flags [ i ] : 0xff TYPE 8 unsigned char TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char NAME 8 mask LEAF_NODE 9 mask LEAF_NODE 8 ; INIT 8 mask = i < flags_len ? ~flags [ i ] : 0xff ASSIGN 9 mask = i < flags_len ? ~flags [ i ] : 0xff LVAL 10 mask NAME 11 mask LEAF_NODE 12 mask ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 i < flags_len ? ~flags [ i ] : 0xff COND_EXPR 11 i < flags_len ? ~flags [ i ] : 0xff CONDITION 12 i < flags_len FIELD 13 i LEAF_NODE 14 i REL_OPERATOR 13 < LEAF_NODE 14 < FIELD 13 flags_len LEAF_NODE 14 flags_len LEAF_NODE 12 ? EXPR 12 ~flags [ i ] FIELD 13 ~flags [ i ] LEAF_NODE 14 ~flags LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] LEAF_NODE 12 : FIELD 12 0xff LEAF_NODE 13 0xff LEAF_NODE 7 ; EXPR_STATEMENT 6 ok = ( a -> data [ i ] & mask ) == 0 ; EXPR 7 ok = ( a -> data [ i ] & mask ) == 0 ASSIGN 8 ok = ( a -> data [ i ] & mask ) == 0 LVAL 9 ok FIELD 10 ok LEAF_NODE 11 ok ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( a -> data [ i ] & mask ) == 0 LEAF_NODE 10 ( FIELD 10 a -> data [ i ] LEAF_NODE 11 a LEAF_NODE 11 -> LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] LEAF_NODE 10 & FIELD 10 mask LEAF_NODE 11 mask LEAF_NODE 10 ) EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return ok ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ok EXPR 5 ok FIELD 6 ok LEAF_NODE 7 ok LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 133, "project": "openssl_ast_normal_function_test_156", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 ctr64_inc LEAF_NODE 3 ctr64_inc PARAMETER_LIST 2 ( unsigned char * counter ) LEAF_NODE 3 ( PARAMETER_DECL 3 unsigned char * counter TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 counter LEAF_NODE 5 counter LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int n ; n = 8 ; VAR_DECL 4 int n ; n = 8 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 n LEAF_NODE 6 n LEAF_NODE 5 ; INIT 5 n = 8 ASSIGN 6 n = 8 LVAL 7 n NAME 8 n LEAF_NODE 9 n ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 8 FIELD 8 8 LEAF_NODE 9 8 LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char c ; VAR_DECL 4 unsigned char c TYPE 5 unsigned char TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char NAME 5 c LEAF_NODE 6 c LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 do LEAF_NODE 5 do LEAF_NODE 4 ( CONDITION 4 n EXPR 5 n FIELD 6 n LEAF_NODE 7 n LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 -- n ; EXPR 7 -- n LEAF_NODE 8 -- FIELD 8 n LEAF_NODE 9 n LEAF_NODE 7 ; EXPR_STATEMENT 6 c = counter [ n ] ; EXPR 7 c = counter [ n ] ASSIGN 8 c = counter [ n ] LVAL 9 c FIELD 10 c LEAF_NODE 11 c ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 counter [ n ] FIELD 10 counter [ n ] LEAF_NODE 11 counter LEAF_NODE 11 [ EXPR 11 n FIELD 12 n LEAF_NODE 13 n LEAF_NODE 11 ] LEAF_NODE 7 ; EXPR_STATEMENT 6 ++ c ; EXPR 7 ++ c LEAF_NODE 8 ++ FIELD 8 c LEAF_NODE 9 c LEAF_NODE 7 ; EXPR_STATEMENT 6 counter [ n ] = c ; EXPR 7 counter [ n ] = c ASSIGN 8 counter [ n ] = c LVAL 9 counter [ n ] FIELD 10 counter [ n ] LEAF_NODE 11 counter LEAF_NODE 11 [ EXPR 11 n FIELD 12 n LEAF_NODE 13 n LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 c FIELD 10 c LEAF_NODE 11 c LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 c EXPR 8 c FIELD 9 c LEAF_NODE 10 c LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return DESTINATION ; KEYWORD 9 return LEAF_NODE 10 return LEAF_NODE 9 DESTINATION LEAF_NODE 9 ; LEAF_NODE 5 } LEAF_NODE 3 ; LEAF_NODE 2 }", "idx": 134, "project": "openssl_ast_normal_function_test_104", "target": 0}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } ; CLASS_DEF 2 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } CLASS_DEF 3 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } LEAF_NODE 4 struct CLASS_NAME 4 bio_addrinfo_st LEAF_NODE 5 bio_addrinfo_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; SIMPLE_DECL 5 int bai_family ; VAR_DECL 6 int bai_family TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_family LEAF_NODE 8 bai_family LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_socktype ; VAR_DECL 6 int bai_socktype TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_socktype LEAF_NODE 8 bai_socktype LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_protocol ; VAR_DECL 6 int bai_protocol TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_protocol LEAF_NODE 8 bai_protocol LEAF_NODE 6 ; SIMPLE_DECL 5 size_t bai_addrlen ; VAR_DECL 6 size_t bai_addrlen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 bai_addrlen LEAF_NODE 8 bai_addrlen LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr * bai_addr ; VAR_DECL 6 struct sockaddr * bai_addr TYPE 7 struct sockaddr * TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr POINTER 8 * LEAF_NODE 9 * NAME 7 bai_addr LEAF_NODE 8 bai_addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct bio_addrinfo_st * bai_next ; VAR_DECL 6 struct bio_addrinfo_st * bai_next TYPE 7 struct bio_addrinfo_st * TYPE_NAME 8 struct bio_addrinfo_st LEAF_NODE 9 struct LEAF_NODE 9 bio_addrinfo_st POINTER 8 * LEAF_NODE 9 * NAME 7 bai_next LEAF_NODE 8 bai_next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BIO_ADDRINFO ; VAR_DECL 2 struct bio_addrinfo_st BIO_ADDRINFO TYPE 3 struct bio_addrinfo_st TYPE_NAME 4 struct bio_addrinfo_st LEAF_NODE 5 struct LEAF_NODE 5 bio_addrinfo_st NAME 3 BIO_ADDRINFO LEAF_NODE 4 BIO_ADDRINFO LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t socklen_t ; VAR_DECL 2 uint32_t socklen_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 socklen_t LEAF_NODE 4 socklen_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } ; CLASS_DEF 2 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } CLASS_DEF 3 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } LEAF_NODE 4 enum CLASS_NAME 4 BIO_hostserv_priorities LEAF_NODE 5 BIO_hostserv_priorities LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV LEAF_NODE 5 BIO_PARSE_PRIO_HOST LEAF_NODE 5 , LEAF_NODE 5 BIO_PARSE_PRIO_SERV LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } ; CLASS_DEF 2 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } CLASS_DEF 3 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } LEAF_NODE 4 enum CLASS_NAME 4 BIO_lookup_type LEAF_NODE 5 BIO_lookup_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER LEAF_NODE 5 BIO_LOOKUP_CLIENT LEAF_NODE 5 , LEAF_NODE 5 BIO_LOOKUP_SERVER LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 32 ] session_id ; VAR_DECL 2 unsigned char [ 32 ] session_id TYPE 3 unsigned char [ 32 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 32 ] LEAF_NODE 5 [ FIELD 5 32 LEAF_NODE 6 32 LEAF_NODE 5 ] NAME 3 session_id LEAF_NODE 4 session_id LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 48 ] master_secret ; VAR_DECL 2 unsigned char [ 48 ] master_secret TYPE 3 unsigned char [ 48 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 48 ] LEAF_NODE 5 [ FIELD 5 48 LEAF_NODE 6 48 LEAF_NODE 5 ] NAME 3 master_secret LEAF_NODE 4 master_secret LEAF_NODE 2 ; SIMPLE_DECL 1 EVP_MD_CTX * handshake_md ; VAR_DECL 2 EVP_MD_CTX * handshake_md TYPE 3 EVP_MD_CTX * TYPE_NAME 4 EVP_MD_CTX LEAF_NODE 5 EVP_MD_CTX POINTER 4 * LEAF_NODE 5 * NAME 3 handshake_md LEAF_NODE 4 handshake_md LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 do_PRF LEAF_NODE 3 do_PRF PARAMETER_LIST 2 ( const void * seed1 , int seed1_len , const void * seed2 , int seed2_len , const void * seed3 , int seed3_len , unsigned char * out , int olen ) LEAF_NODE 3 ( PARAMETER_DECL 3 const void * seed1 TYPE 4 const void * TYPE_NAME 5 const void LEAF_NODE 6 const LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 seed1 LEAF_NODE 5 seed1 LEAF_NODE 3 , PARAMETER_DECL 3 int seed1_len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 seed1_len LEAF_NODE 5 seed1_len LEAF_NODE 3 , PARAMETER_DECL 3 const void * seed2 TYPE 4 const void * TYPE_NAME 5 const void LEAF_NODE 6 const LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 seed2 LEAF_NODE 5 seed2 LEAF_NODE 3 , PARAMETER_DECL 3 int seed2_len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 seed2_len LEAF_NODE 5 seed2_len LEAF_NODE 3 , PARAMETER_DECL 3 const void * seed3 TYPE 4 const void * TYPE_NAME 5 const void LEAF_NODE 6 const LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 seed3 LEAF_NODE 5 seed3 LEAF_NODE 3 , PARAMETER_DECL 3 int seed3_len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 seed3_len LEAF_NODE 5 seed3_len LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * out TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 int olen TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 olen LEAF_NODE 5 olen LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 EVP_PKEY_CTX * pctx ; pctx = EVP_PKEY_CTX_new_id ( EVP_PKEY_TLS1_PRF , NULL ) ; VAR_DECL 4 EVP_PKEY_CTX * pctx ; pctx = EVP_PKEY_CTX_new_id ( EVP_PKEY_TLS1_PRF , NULL ) TYPE 5 EVP_PKEY_CTX * TYPE_NAME 6 EVP_PKEY_CTX LEAF_NODE 7 EVP_PKEY_CTX POINTER 6 * LEAF_NODE 7 * NAME 5 pctx LEAF_NODE 6 pctx LEAF_NODE 5 ; INIT 5 pctx = EVP_PKEY_CTX_new_id ( EVP_PKEY_TLS1_PRF , NULL ) ASSIGN 6 pctx = EVP_PKEY_CTX_new_id ( EVP_PKEY_TLS1_PRF , NULL ) LVAL 7 pctx NAME 8 pctx LEAF_NODE 9 pctx ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 EVP_PKEY_CTX_new_id ( EVP_PKEY_TLS1_PRF , NULL ) FUNCTION_CALL 8 EVP_PKEY_CTX_new_id ( EVP_PKEY_TLS1_PRF , NULL ) CALLEE 9 EVP_PKEY_CTX_new_id LEAF_NODE 10 EVP_PKEY_CTX_new_id LEAF_NODE 9 ( ARGUMENT 9 EVP_PKEY_TLS1_PRF FIELD 10 EVP_PKEY_TLS1_PRF LEAF_NODE 11 EVP_PKEY_TLS1_PRF LEAF_NODE 9 , ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 size_t outlen ; outlen = olen ; VAR_DECL 4 size_t outlen ; outlen = olen TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 outlen LEAF_NODE 6 outlen LEAF_NODE 5 ; INIT 5 outlen = olen ASSIGN 6 outlen = olen LVAL 7 outlen NAME 8 outlen LEAF_NODE 9 outlen ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 olen FIELD 8 olen LEAF_NODE 9 olen LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_PKEY_derive_init ( pctx ) ; EXPR 4 EVP_PKEY_derive_init ( pctx ) FUNCTION_CALL 5 EVP_PKEY_derive_init ( pctx ) CALLEE 6 EVP_PKEY_derive_init LEAF_NODE 7 EVP_PKEY_derive_init LEAF_NODE 6 ( ARGUMENT 6 pctx FIELD 7 pctx LEAF_NODE 8 pctx LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_PKEY_CTX_set_tls1_prf_md ( pctx , EVP_md5_sha1 ( ) ) ; EXPR 4 EVP_PKEY_CTX_set_tls1_prf_md ( pctx , EVP_md5_sha1 ( ) ) FUNCTION_CALL 5 EVP_PKEY_CTX_set_tls1_prf_md ( pctx , EVP_md5_sha1 ( ) ) CALLEE 6 EVP_PKEY_CTX_set_tls1_prf_md LEAF_NODE 7 EVP_PKEY_CTX_set_tls1_prf_md LEAF_NODE 6 ( ARGUMENT 6 pctx FIELD 7 pctx LEAF_NODE 8 pctx LEAF_NODE 6 , ARGUMENT 6 EVP_md5_sha1 ( ) FUNCTION_CALL 7 EVP_md5_sha1 ( ) CALLEE 8 EVP_md5_sha1 LEAF_NODE 9 EVP_md5_sha1 LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_PKEY_CTX_set1_tls1_prf_secret ( pctx , master_secret , sizeof ( master_secret ) ) ; EXPR 4 EVP_PKEY_CTX_set1_tls1_prf_secret ( pctx , master_secret , sizeof ( master_secret ) ) FUNCTION_CALL 5 EVP_PKEY_CTX_set1_tls1_prf_secret ( pctx , master_secret , sizeof ( master_secret ) ) CALLEE 6 EVP_PKEY_CTX_set1_tls1_prf_secret LEAF_NODE 7 EVP_PKEY_CTX_set1_tls1_prf_secret LEAF_NODE 6 ( ARGUMENT 6 pctx FIELD 7 pctx LEAF_NODE 8 pctx LEAF_NODE 6 , ARGUMENT 6 master_secret FIELD 7 master_secret LEAF_NODE 8 master_secret LEAF_NODE 6 , ARGUMENT 6 sizeof ( master_secret ) FUNCTION_CALL 7 sizeof ( master_secret ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 master_secret FIELD 9 master_secret LEAF_NODE 10 master_secret LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_PKEY_CTX_add1_tls1_prf_seed ( pctx , seed1 , seed1_len ) ; EXPR 4 EVP_PKEY_CTX_add1_tls1_prf_seed ( pctx , seed1 , seed1_len ) FUNCTION_CALL 5 EVP_PKEY_CTX_add1_tls1_prf_seed ( pctx , seed1 , seed1_len ) CALLEE 6 EVP_PKEY_CTX_add1_tls1_prf_seed LEAF_NODE 7 EVP_PKEY_CTX_add1_tls1_prf_seed LEAF_NODE 6 ( ARGUMENT 6 pctx FIELD 7 pctx LEAF_NODE 8 pctx LEAF_NODE 6 , ARGUMENT 6 seed1 FIELD 7 seed1 LEAF_NODE 8 seed1 LEAF_NODE 6 , ARGUMENT 6 seed1_len FIELD 7 seed1_len LEAF_NODE 8 seed1_len LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_PKEY_CTX_add1_tls1_prf_seed ( pctx , seed2 , seed2_len ) ; EXPR 4 EVP_PKEY_CTX_add1_tls1_prf_seed ( pctx , seed2 , seed2_len ) FUNCTION_CALL 5 EVP_PKEY_CTX_add1_tls1_prf_seed ( pctx , seed2 , seed2_len ) CALLEE 6 EVP_PKEY_CTX_add1_tls1_prf_seed LEAF_NODE 7 EVP_PKEY_CTX_add1_tls1_prf_seed LEAF_NODE 6 ( ARGUMENT 6 pctx FIELD 7 pctx LEAF_NODE 8 pctx LEAF_NODE 6 , ARGUMENT 6 seed2 FIELD 7 seed2 LEAF_NODE 8 seed2 LEAF_NODE 6 , ARGUMENT 6 seed2_len FIELD 7 seed2_len LEAF_NODE 8 seed2_len LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_PKEY_CTX_add1_tls1_prf_seed ( pctx , seed3 , seed3_len ) ; EXPR 4 EVP_PKEY_CTX_add1_tls1_prf_seed ( pctx , seed3 , seed3_len ) FUNCTION_CALL 5 EVP_PKEY_CTX_add1_tls1_prf_seed ( pctx , seed3 , seed3_len ) CALLEE 6 EVP_PKEY_CTX_add1_tls1_prf_seed LEAF_NODE 7 EVP_PKEY_CTX_add1_tls1_prf_seed LEAF_NODE 6 ( ARGUMENT 6 pctx FIELD 7 pctx LEAF_NODE 8 pctx LEAF_NODE 6 , ARGUMENT 6 seed3 FIELD 7 seed3 LEAF_NODE 8 seed3 LEAF_NODE 6 , ARGUMENT 6 seed3_len FIELD 7 seed3_len LEAF_NODE 8 seed3_len LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_PKEY_derive ( pctx , out , & outlen ) ; EXPR 4 EVP_PKEY_derive ( pctx , out , & outlen ) FUNCTION_CALL 5 EVP_PKEY_derive ( pctx , out , & outlen ) CALLEE 6 EVP_PKEY_derive LEAF_NODE 7 EVP_PKEY_derive LEAF_NODE 6 ( ARGUMENT 6 pctx FIELD 7 pctx LEAF_NODE 8 pctx LEAF_NODE 6 , ARGUMENT 6 out FIELD 7 out LEAF_NODE 8 out LEAF_NODE 6 , ARGUMENT 6 & outlen UNARY_EXPR 7 & outlen UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 outlen LEAF_NODE 9 outlen LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_PKEY_CTX_free ( pctx ) ; EXPR 4 EVP_PKEY_CTX_free ( pctx ) FUNCTION_CALL 5 EVP_PKEY_CTX_free ( pctx ) CALLEE 6 EVP_PKEY_CTX_free LEAF_NODE 7 EVP_PKEY_CTX_free LEAF_NODE 6 ( ARGUMENT 6 pctx FIELD 7 pctx LEAF_NODE 8 pctx LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 135, "project": "openssl_ast_normal_function_test_141", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS ; VAR_DECL 2 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS TYPE 3 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } CLASS_DEF 4 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } LEAF_NODE 5 struct CLASS_NAME 5 args_st LEAF_NODE 6 args_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int size ; int argc ; char * argv ; SIMPLE_DECL 6 int size ; VAR_DECL 7 int size TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 size LEAF_NODE 9 size LEAF_NODE 7 ; SIMPLE_DECL 6 int argc ; VAR_DECL 7 int argc TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 argc LEAF_NODE 9 argc LEAF_NODE 7 ; SIMPLE_DECL 6 char * argv ; VAR_DECL 7 char * argv TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 argv LEAF_NODE 9 argv LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 ARGS LEAF_NODE 4 ARGS LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 set_cert_ex LEAF_NODE 3 set_cert_ex PARAMETER_LIST 2 ( unsigned long * flags , const char * arg ) LEAF_NODE 3 ( PARAMETER_DECL 3 unsigned long * flags TYPE 4 unsigned long * TYPE_NAME 5 unsigned long LEAF_NODE 6 unsigned LEAF_NODE 6 long POINTER 5 * LEAF_NODE 6 * NAME 4 flags LEAF_NODE 5 flags LEAF_NODE 3 , PARAMETER_DECL 3 const char * arg TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 arg LEAF_NODE 5 arg LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 static LEAF_NODE 3 const LEAF_NODE 3 NAME_EX_TBL LEAF_NODE 3 cert_tbl LEAF_NODE 3 [ LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 \"compatible\" LEAF_NODE 5 , LEAF_NODE 5 X509_FLAG_COMPAT LEAF_NODE 5 , LEAF_NODE 5 0xffffffffl LEAF_NODE 4 } LEAF_NODE 4 , LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 \"ca_default\" LEAF_NODE 5 , LEAF_NODE 5 X509_FLAG_CA LEAF_NODE 5 , LEAF_NODE 5 0xffffffffl LEAF_NODE 4 } LEAF_NODE 4 , LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 \"no_header\" LEAF_NODE 5 , LEAF_NODE 5 X509_FLAG_NO_HEADER LEAF_NODE 5 , LEAF_NODE 5 0 LEAF_NODE 4 } LEAF_NODE 4 , LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 \"no_version\" LEAF_NODE 5 , LEAF_NODE 5 X509_FLAG_NO_VERSION LEAF_NODE 5 , LEAF_NODE 5 0 LEAF_NODE 4 } LEAF_NODE 4 , LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 \"no_serial\" LEAF_NODE 5 , LEAF_NODE 5 X509_FLAG_NO_SERIAL LEAF_NODE 5 , LEAF_NODE 5 0 LEAF_NODE 4 } LEAF_NODE 4 , LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 \"no_signame\" LEAF_NODE 5 , LEAF_NODE 5 X509_FLAG_NO_SIGNAME LEAF_NODE 5 , LEAF_NODE 5 0 LEAF_NODE 4 } LEAF_NODE 4 , LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 \"no_validity\" LEAF_NODE 5 , LEAF_NODE 5 X509_FLAG_NO_VALIDITY LEAF_NODE 5 , LEAF_NODE 5 0 LEAF_NODE 4 } LEAF_NODE 4 , LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 \"no_subject\" LEAF_NODE 5 , LEAF_NODE 5 X509_FLAG_NO_SUBJECT LEAF_NODE 5 , LEAF_NODE 5 0 LEAF_NODE 4 } LEAF_NODE 4 , LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 \"no_issuer\" LEAF_NODE 5 , LEAF_NODE 5 X509_FLAG_NO_ISSUER LEAF_NODE 5 , LEAF_NODE 5 0 LEAF_NODE 4 } LEAF_NODE 4 , LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 \"no_pubkey\" LEAF_NODE 5 , LEAF_NODE 5 X509_FLAG_NO_PUBKEY LEAF_NODE 5 , LEAF_NODE 5 0 LEAF_NODE 4 } LEAF_NODE 4 , LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 \"no_extensions\" LEAF_NODE 5 , LEAF_NODE 5 X509_FLAG_NO_EXTENSIONS LEAF_NODE 5 , LEAF_NODE 5 0 LEAF_NODE 4 } LEAF_NODE 4 , LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 \"no_sigdump\" LEAF_NODE 5 , LEAF_NODE 5 X509_FLAG_NO_SIGDUMP LEAF_NODE 5 , LEAF_NODE 5 0 LEAF_NODE 4 } LEAF_NODE 4 , LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 \"no_aux\" LEAF_NODE 5 , LEAF_NODE 5 X509_FLAG_NO_AUX LEAF_NODE 5 , LEAF_NODE 5 0 LEAF_NODE 4 } LEAF_NODE 4 , LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 \"no_attributes\" LEAF_NODE 5 , LEAF_NODE 5 X509_FLAG_NO_ATTRIBUTES LEAF_NODE 5 , LEAF_NODE 5 0 LEAF_NODE 4 } LEAF_NODE 4 , LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 \"ext_default\" LEAF_NODE 5 , LEAF_NODE 5 X509V3_EXT_DEFAULT LEAF_NODE 5 , LEAF_NODE 5 X509V3_EXT_UNKNOWN_MASK LEAF_NODE 4 } LEAF_NODE 4 , LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 \"ext_error\" LEAF_NODE 5 , LEAF_NODE 5 X509V3_EXT_ERROR_UNKNOWN LEAF_NODE 5 , LEAF_NODE 5 X509V3_EXT_UNKNOWN_MASK LEAF_NODE 4 } LEAF_NODE 4 , LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 \"ext_parse\" LEAF_NODE 5 , LEAF_NODE 5 X509V3_EXT_PARSE_UNKNOWN LEAF_NODE 5 , LEAF_NODE 5 X509V3_EXT_UNKNOWN_MASK LEAF_NODE 4 } LEAF_NODE 4 , LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 \"ext_dump\" LEAF_NODE 5 , LEAF_NODE 5 X509V3_EXT_DUMP_UNKNOWN LEAF_NODE 5 , LEAF_NODE 5 X509V3_EXT_UNKNOWN_MASK LEAF_NODE 4 } LEAF_NODE 4 , LEAF_NODE 4 { STATEMENTS 4 LEAF_NODE 5 NULL LEAF_NODE 5 , LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 0 LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 3 ; JUMP_STATEMENT 3 return set_multi_opts ( flags , arg , cert_tbl ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 set_multi_opts ( flags , arg , cert_tbl ) EXPR 5 set_multi_opts ( flags , arg , cert_tbl ) FUNCTION_CALL 6 set_multi_opts ( flags , arg , cert_tbl ) CALLEE 7 set_multi_opts LEAF_NODE 8 set_multi_opts LEAF_NODE 7 ( ARGUMENT 7 flags FIELD 8 flags LEAF_NODE 9 flags LEAF_NODE 7 , ARGUMENT 7 arg FIELD 8 arg LEAF_NODE 9 arg LEAF_NODE 7 , ARGUMENT 7 cert_tbl FIELD 8 cert_tbl LEAF_NODE 9 cert_tbl LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 136, "project": "openssl_ast_normal_function_test_53", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 dtls1_clear_queues LEAF_NODE 3 dtls1_clear_queues PARAMETER_LIST 2 ( SSL * s ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 pitem * item ; item = NULL ; VAR_DECL 4 pitem * item ; item = NULL TYPE 5 pitem * TYPE_NAME 6 pitem LEAF_NODE 7 pitem POINTER 6 * LEAF_NODE 7 * NAME 5 item LEAF_NODE 6 item LEAF_NODE 5 ; INIT 5 item = NULL ASSIGN 6 item = NULL LVAL 7 item NAME 8 item LEAF_NODE 9 item ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 hm_fragment * frag ; frag = NULL ; VAR_DECL 4 hm_fragment * frag ; frag = NULL TYPE 5 hm_fragment * TYPE_NAME 6 hm_fragment LEAF_NODE 7 hm_fragment POINTER 6 * LEAF_NODE 7 * NAME 5 frag LEAF_NODE 6 frag LEAF_NODE 5 ; INIT 5 frag = NULL ASSIGN 6 frag = NULL LVAL 7 frag NAME 8 frag LEAF_NODE 9 frag ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 DTLS1_RECORD_DATA * rdata ; VAR_DECL 4 DTLS1_RECORD_DATA * rdata TYPE 5 DTLS1_RECORD_DATA * TYPE_NAME 6 DTLS1_RECORD_DATA LEAF_NODE 7 DTLS1_RECORD_DATA POINTER 6 * LEAF_NODE 7 * NAME 5 rdata LEAF_NODE 6 rdata LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 ( item = pqueue_pop ( s -> d1 -> unprocessed_rcds . q ) ) != NULL EXPR 5 ( item = pqueue_pop ( s -> d1 -> unprocessed_rcds . q ) ) != NULL LEAF_NODE 6 ( ASSIGN 6 item = pqueue_pop ( s -> d1 -> unprocessed_rcds . q ) LVAL 7 item FIELD 8 item LEAF_NODE 9 item ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 pqueue_pop ( s -> d1 -> unprocessed_rcds . q ) FUNCTION_CALL 8 pqueue_pop ( s -> d1 -> unprocessed_rcds . q ) CALLEE 9 pqueue_pop LEAF_NODE 10 pqueue_pop LEAF_NODE 9 ( ARGUMENT 9 s -> d1 -> unprocessed_rcds . q FIELD 10 s -> d1 -> unprocessed_rcds . q LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 d1 LEAF_NODE 11 -> LEAF_NODE 11 unprocessed_rcds LEAF_NODE 11 . LEAF_NODE 11 q LEAF_NODE 9 ) LEAF_NODE 6 ) EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 rdata = ( DTLS1_RECORD_DATA * ) item -> data ; EXPR 7 rdata = ( DTLS1_RECORD_DATA * ) item -> data ASSIGN 8 rdata = ( DTLS1_RECORD_DATA * ) item -> data LVAL 9 rdata FIELD 10 rdata LEAF_NODE 11 rdata ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( DTLS1_RECORD_DATA * ) item -> data LEAF_NODE 10 ( TYPE_NAME 10 DTLS1_RECORD_DATA LEAF_NODE 11 DTLS1_RECORD_DATA LEAF_NODE 10 * LEAF_NODE 10 ) FIELD 10 item -> data LEAF_NODE 11 item LEAF_NODE 11 -> LEAF_NODE 11 data LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 rdata -> rbuf . buf EXPR 8 rdata -> rbuf . buf FIELD 9 rdata -> rbuf . buf LEAF_NODE 10 rdata LEAF_NODE 10 -> LEAF_NODE 10 rbuf LEAF_NODE 10 . LEAF_NODE 10 buf LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 OPENSSL_free ( rdata -> rbuf . buf ) ; EXPR 10 OPENSSL_free ( rdata -> rbuf . buf ) FUNCTION_CALL 11 OPENSSL_free ( rdata -> rbuf . buf ) CALLEE 12 OPENSSL_free LEAF_NODE 13 OPENSSL_free LEAF_NODE 12 ( ARGUMENT 12 rdata -> rbuf . buf FIELD 13 rdata -> rbuf . buf LEAF_NODE 14 rdata LEAF_NODE 14 -> LEAF_NODE 14 rbuf LEAF_NODE 14 . LEAF_NODE 14 buf LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 OPENSSL_free ( item -> data ) ; EXPR 7 OPENSSL_free ( item -> data ) FUNCTION_CALL 8 OPENSSL_free ( item -> data ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 item -> data FIELD 10 item -> data LEAF_NODE 11 item LEAF_NODE 11 -> LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 pitem_free ( item ) ; EXPR 7 pitem_free ( item ) FUNCTION_CALL 8 pitem_free ( item ) CALLEE 9 pitem_free LEAF_NODE 10 pitem_free LEAF_NODE 9 ( ARGUMENT 9 item FIELD 10 item LEAF_NODE 11 item LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 ( item = pqueue_pop ( s -> d1 -> processed_rcds . q ) ) != NULL EXPR 5 ( item = pqueue_pop ( s -> d1 -> processed_rcds . q ) ) != NULL LEAF_NODE 6 ( ASSIGN 6 item = pqueue_pop ( s -> d1 -> processed_rcds . q ) LVAL 7 item FIELD 8 item LEAF_NODE 9 item ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 pqueue_pop ( s -> d1 -> processed_rcds . q ) FUNCTION_CALL 8 pqueue_pop ( s -> d1 -> processed_rcds . q ) CALLEE 9 pqueue_pop LEAF_NODE 10 pqueue_pop LEAF_NODE 9 ( ARGUMENT 9 s -> d1 -> processed_rcds . q FIELD 10 s -> d1 -> processed_rcds . q LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 d1 LEAF_NODE 11 -> LEAF_NODE 11 processed_rcds LEAF_NODE 11 . LEAF_NODE 11 q LEAF_NODE 9 ) LEAF_NODE 6 ) EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 rdata = ( DTLS1_RECORD_DATA * ) item -> data ; EXPR 7 rdata = ( DTLS1_RECORD_DATA * ) item -> data ASSIGN 8 rdata = ( DTLS1_RECORD_DATA * ) item -> data LVAL 9 rdata FIELD 10 rdata LEAF_NODE 11 rdata ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( DTLS1_RECORD_DATA * ) item -> data LEAF_NODE 10 ( TYPE_NAME 10 DTLS1_RECORD_DATA LEAF_NODE 11 DTLS1_RECORD_DATA LEAF_NODE 10 * LEAF_NODE 10 ) FIELD 10 item -> data LEAF_NODE 11 item LEAF_NODE 11 -> LEAF_NODE 11 data LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 rdata -> rbuf . buf EXPR 8 rdata -> rbuf . buf FIELD 9 rdata -> rbuf . buf LEAF_NODE 10 rdata LEAF_NODE 10 -> LEAF_NODE 10 rbuf LEAF_NODE 10 . LEAF_NODE 10 buf LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 OPENSSL_free ( rdata -> rbuf . buf ) ; EXPR 10 OPENSSL_free ( rdata -> rbuf . buf ) FUNCTION_CALL 11 OPENSSL_free ( rdata -> rbuf . buf ) CALLEE 12 OPENSSL_free LEAF_NODE 13 OPENSSL_free LEAF_NODE 12 ( ARGUMENT 12 rdata -> rbuf . buf FIELD 13 rdata -> rbuf . buf LEAF_NODE 14 rdata LEAF_NODE 14 -> LEAF_NODE 14 rbuf LEAF_NODE 14 . LEAF_NODE 14 buf LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 OPENSSL_free ( item -> data ) ; EXPR 7 OPENSSL_free ( item -> data ) FUNCTION_CALL 8 OPENSSL_free ( item -> data ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 item -> data FIELD 10 item -> data LEAF_NODE 11 item LEAF_NODE 11 -> LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 pitem_free ( item ) ; EXPR 7 pitem_free ( item ) FUNCTION_CALL 8 pitem_free ( item ) CALLEE 9 pitem_free LEAF_NODE 10 pitem_free LEAF_NODE 9 ( ARGUMENT 9 item FIELD 10 item LEAF_NODE 11 item LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 ( item = pqueue_pop ( s -> d1 -> buffered_messages ) ) != NULL EXPR 5 ( item = pqueue_pop ( s -> d1 -> buffered_messages ) ) != NULL LEAF_NODE 6 ( ASSIGN 6 item = pqueue_pop ( s -> d1 -> buffered_messages ) LVAL 7 item FIELD 8 item LEAF_NODE 9 item ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 pqueue_pop ( s -> d1 -> buffered_messages ) FUNCTION_CALL 8 pqueue_pop ( s -> d1 -> buffered_messages ) CALLEE 9 pqueue_pop LEAF_NODE 10 pqueue_pop LEAF_NODE 9 ( ARGUMENT 9 s -> d1 -> buffered_messages FIELD 10 s -> d1 -> buffered_messages LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 d1 LEAF_NODE 11 -> LEAF_NODE 11 buffered_messages LEAF_NODE 9 ) LEAF_NODE 6 ) EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 frag = ( hm_fragment * ) item -> data ; EXPR 7 frag = ( hm_fragment * ) item -> data ASSIGN 8 frag = ( hm_fragment * ) item -> data LVAL 9 frag FIELD 10 frag LEAF_NODE 11 frag ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( hm_fragment * ) item -> data LEAF_NODE 10 ( TYPE_NAME 10 hm_fragment LEAF_NODE 11 hm_fragment LEAF_NODE 10 * LEAF_NODE 10 ) FIELD 10 item -> data LEAF_NODE 11 item LEAF_NODE 11 -> LEAF_NODE 11 data LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_free ( frag -> fragment ) ; EXPR 7 OPENSSL_free ( frag -> fragment ) FUNCTION_CALL 8 OPENSSL_free ( frag -> fragment ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 frag -> fragment FIELD 10 frag -> fragment LEAF_NODE 11 frag LEAF_NODE 11 -> LEAF_NODE 11 fragment LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_free ( frag ) ; EXPR 7 OPENSSL_free ( frag ) FUNCTION_CALL 8 OPENSSL_free ( frag ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 frag FIELD 10 frag LEAF_NODE 11 frag LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 pitem_free ( item ) ; EXPR 7 pitem_free ( item ) FUNCTION_CALL 8 pitem_free ( item ) CALLEE 9 pitem_free LEAF_NODE 10 pitem_free LEAF_NODE 9 ( ARGUMENT 9 item FIELD 10 item LEAF_NODE 11 item LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 ( item = pqueue_pop ( s -> d1 -> sent_messages ) ) != NULL EXPR 5 ( item = pqueue_pop ( s -> d1 -> sent_messages ) ) != NULL LEAF_NODE 6 ( ASSIGN 6 item = pqueue_pop ( s -> d1 -> sent_messages ) LVAL 7 item FIELD 8 item LEAF_NODE 9 item ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 pqueue_pop ( s -> d1 -> sent_messages ) FUNCTION_CALL 8 pqueue_pop ( s -> d1 -> sent_messages ) CALLEE 9 pqueue_pop LEAF_NODE 10 pqueue_pop LEAF_NODE 9 ( ARGUMENT 9 s -> d1 -> sent_messages FIELD 10 s -> d1 -> sent_messages LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 d1 LEAF_NODE 11 -> LEAF_NODE 11 sent_messages LEAF_NODE 9 ) LEAF_NODE 6 ) EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 frag = ( hm_fragment * ) item -> data ; EXPR 7 frag = ( hm_fragment * ) item -> data ASSIGN 8 frag = ( hm_fragment * ) item -> data LVAL 9 frag FIELD 10 frag LEAF_NODE 11 frag ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( hm_fragment * ) item -> data LEAF_NODE 10 ( TYPE_NAME 10 hm_fragment LEAF_NODE 11 hm_fragment LEAF_NODE 10 * LEAF_NODE 10 ) FIELD 10 item -> data LEAF_NODE 11 item LEAF_NODE 11 -> LEAF_NODE 11 data LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_free ( frag -> fragment ) ; EXPR 7 OPENSSL_free ( frag -> fragment ) FUNCTION_CALL 8 OPENSSL_free ( frag -> fragment ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 frag -> fragment FIELD 10 frag -> fragment LEAF_NODE 11 frag LEAF_NODE 11 -> LEAF_NODE 11 fragment LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_free ( frag ) ; EXPR 7 OPENSSL_free ( frag ) FUNCTION_CALL 8 OPENSSL_free ( frag ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 frag FIELD 10 frag LEAF_NODE 11 frag LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 pitem_free ( item ) ; EXPR 7 pitem_free ( item ) FUNCTION_CALL 8 pitem_free ( item ) CALLEE 9 pitem_free LEAF_NODE 10 pitem_free LEAF_NODE 9 ( ARGUMENT 9 item FIELD 10 item LEAF_NODE 11 item LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 ( item = pqueue_pop ( s -> d1 -> buffered_app_data . q ) ) != NULL EXPR 5 ( item = pqueue_pop ( s -> d1 -> buffered_app_data . q ) ) != NULL LEAF_NODE 6 ( ASSIGN 6 item = pqueue_pop ( s -> d1 -> buffered_app_data . q ) LVAL 7 item FIELD 8 item LEAF_NODE 9 item ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 pqueue_pop ( s -> d1 -> buffered_app_data . q ) FUNCTION_CALL 8 pqueue_pop ( s -> d1 -> buffered_app_data . q ) CALLEE 9 pqueue_pop LEAF_NODE 10 pqueue_pop LEAF_NODE 9 ( ARGUMENT 9 s -> d1 -> buffered_app_data . q FIELD 10 s -> d1 -> buffered_app_data . q LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 d1 LEAF_NODE 11 -> LEAF_NODE 11 buffered_app_data LEAF_NODE 11 . LEAF_NODE 11 q LEAF_NODE 9 ) LEAF_NODE 6 ) EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 frag = ( hm_fragment * ) item -> data ; EXPR 7 frag = ( hm_fragment * ) item -> data ASSIGN 8 frag = ( hm_fragment * ) item -> data LVAL 9 frag FIELD 10 frag LEAF_NODE 11 frag ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( hm_fragment * ) item -> data LEAF_NODE 10 ( TYPE_NAME 10 hm_fragment LEAF_NODE 11 hm_fragment LEAF_NODE 10 * LEAF_NODE 10 ) FIELD 10 item -> data LEAF_NODE 11 item LEAF_NODE 11 -> LEAF_NODE 11 data LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_free ( frag -> fragment ) ; EXPR 7 OPENSSL_free ( frag -> fragment ) FUNCTION_CALL 8 OPENSSL_free ( frag -> fragment ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 frag -> fragment FIELD 10 frag -> fragment LEAF_NODE 11 frag LEAF_NODE 11 -> LEAF_NODE 11 fragment LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_free ( frag ) ; EXPR 7 OPENSSL_free ( frag ) FUNCTION_CALL 8 OPENSSL_free ( frag ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 frag FIELD 10 frag LEAF_NODE 11 frag LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 pitem_free ( item ) ; EXPR 7 pitem_free ( item ) FUNCTION_CALL 8 pitem_free ( item ) CALLEE 9 pitem_free LEAF_NODE 10 pitem_free LEAF_NODE 9 ( ARGUMENT 9 item FIELD 10 item LEAF_NODE 11 item LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 }", "idx": 137, "project": "openssl_ast_vul_function_test_35", "target": 1}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_STRING_copy LEAF_NODE 3 ASN1_STRING_copy PARAMETER_LIST 2 ( ASN1_STRING * dst , const ASN1_STRING * str ) LEAF_NODE 3 ( PARAMETER_DECL 3 ASN1_STRING * dst TYPE 4 ASN1_STRING * TYPE_NAME 5 ASN1_STRING LEAF_NODE 6 ASN1_STRING POINTER 5 * LEAF_NODE 6 * NAME 4 dst LEAF_NODE 5 dst LEAF_NODE 3 , PARAMETER_DECL 3 const ASN1_STRING * str TYPE 4 const ASN1_STRING * TYPE_NAME 5 const ASN1_STRING LEAF_NODE 6 const LEAF_NODE 6 ASN1_STRING POINTER 5 * LEAF_NODE 6 * NAME 4 str LEAF_NODE 5 str LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 str == NULL EXPR 5 str == NULL FIELD 6 str LEAF_NODE 7 str EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; EXPR_STATEMENT 3 dst -> type = str -> type ; EXPR 4 dst -> type = str -> type ASSIGN 5 dst -> type = str -> type LVAL 6 dst -> type FIELD 7 dst -> type LEAF_NODE 8 dst LEAF_NODE 8 -> LEAF_NODE 8 type ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 str -> type FIELD 7 str -> type LEAF_NODE 8 str LEAF_NODE 8 -> LEAF_NODE 8 type LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ASN1_STRING_set ( dst , str -> data , str -> length ) EXPR 5 ! ASN1_STRING_set ( dst , str -> data , str -> length ) UNARY_EXPR 6 ! ASN1_STRING_set ( dst , str -> data , str -> length ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 ASN1_STRING_set ( dst , str -> data , str -> length ) CALLEE 8 ASN1_STRING_set LEAF_NODE 9 ASN1_STRING_set LEAF_NODE 8 ( ARGUMENT 8 dst FIELD 9 dst LEAF_NODE 10 dst LEAF_NODE 8 , ARGUMENT 8 str -> data FIELD 9 str -> data LEAF_NODE 10 str LEAF_NODE 10 -> LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 str -> length FIELD 9 str -> length LEAF_NODE 10 str LEAF_NODE 10 -> LEAF_NODE 10 length LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; EXPR_STATEMENT 3 dst -> flags &= ASN1_STRING_FLAG_EMBED ; EXPR 4 dst -> flags &= ASN1_STRING_FLAG_EMBED ASSIGN 5 dst -> flags &= ASN1_STRING_FLAG_EMBED LVAL 6 dst -> flags FIELD 7 dst -> flags LEAF_NODE 8 dst LEAF_NODE 8 -> LEAF_NODE 8 flags ASSIGN_OP 6 &= LEAF_NODE 7 &= RVAL 6 ASN1_STRING_FLAG_EMBED FIELD 7 ASN1_STRING_FLAG_EMBED LEAF_NODE 8 ASN1_STRING_FLAG_EMBED LEAF_NODE 4 ; EXPR_STATEMENT 3 dst -> flags |= str -> flags & ~ASN1_STRING_FLAG_EMBED ; EXPR 4 dst -> flags |= str -> flags & ~ASN1_STRING_FLAG_EMBED ASSIGN 5 dst -> flags |= str -> flags & ~ASN1_STRING_FLAG_EMBED LVAL 6 dst -> flags FIELD 7 dst -> flags LEAF_NODE 8 dst LEAF_NODE 8 -> LEAF_NODE 8 flags ASSIGN_OP 6 |= LEAF_NODE 7 |= RVAL 6 str -> flags & ~ASN1_STRING_FLAG_EMBED FIELD 7 str -> flags LEAF_NODE 8 str LEAF_NODE 8 -> LEAF_NODE 8 flags LEAF_NODE 7 & FIELD 7 ~ASN1_STRING_FLAG_EMBED LEAF_NODE 8 ~ASN1_STRING_FLAG_EMBED LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 138, "project": "openssl_ast_normal_function_test_61", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 BIO_dgram_non_fatal_error LEAF_NODE 3 BIO_dgram_non_fatal_error PARAMETER_LIST 2 ( int err ) LEAF_NODE 3 ( PARAMETER_DECL 3 int err TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 err LEAF_NODE 5 err LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 err EXPR 5 err FIELD 6 err LEAF_NODE 7 err LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case WSAEWOULDBLOCK : LEAF_NODE 7 case LEAF_NODE 7 WSAEWOULDBLOCK LEAF_NODE 7 : LABEL 6 case EWOULDBLOCK : LEAF_NODE 7 case LEAF_NODE 7 EWOULDBLOCK LEAF_NODE 7 : LABEL 6 case EWOULDBLOCK : LEAF_NODE 7 case LEAF_NODE 7 EWOULDBLOCK LEAF_NODE 7 : LABEL 6 case EINTR : LEAF_NODE 7 case LEAF_NODE 7 EINTR LEAF_NODE 7 : LABEL 6 case EAGAIN : LEAF_NODE 7 case LEAF_NODE 7 EAGAIN LEAF_NODE 7 : LABEL 6 case EPROTO : LEAF_NODE 7 case LEAF_NODE 7 EPROTO LEAF_NODE 7 : LABEL 6 case EINPROGRESS : LEAF_NODE 7 case LEAF_NODE 7 EINPROGRESS LEAF_NODE 7 : LABEL 6 case EALREADY : LEAF_NODE 7 case LEAF_NODE 7 EALREADY LEAF_NODE 7 : JUMP_STATEMENT 6 return 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 1 EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 139, "project": "openssl_ast_normal_function_test_25", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 do_buf LEAF_NODE 3 do_buf PARAMETER_LIST 2 ( unsigned char * buf , int buflen , int type , unsigned short flags , char * quotes , char_io * io_ch , void * arg ) LEAF_NODE 3 ( PARAMETER_DECL 3 unsigned char * buf TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 buf LEAF_NODE 5 buf LEAF_NODE 3 , PARAMETER_DECL 3 int buflen TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 buflen LEAF_NODE 5 buflen LEAF_NODE 3 , PARAMETER_DECL 3 int type TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 type LEAF_NODE 5 type LEAF_NODE 3 , PARAMETER_DECL 3 unsigned short flags TYPE 4 unsigned short TYPE_NAME 5 unsigned short LEAF_NODE 6 unsigned LEAF_NODE 6 short NAME 4 flags LEAF_NODE 5 flags LEAF_NODE 3 , PARAMETER_DECL 3 char * quotes TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 quotes LEAF_NODE 5 quotes LEAF_NODE 3 , PARAMETER_DECL 3 char_io * io_ch TYPE 4 char_io * TYPE_NAME 5 char_io LEAF_NODE 6 char_io POINTER 5 * LEAF_NODE 6 * NAME 4 io_ch LEAF_NODE 5 io_ch LEAF_NODE 3 , PARAMETER_DECL 3 void * arg TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 arg LEAF_NODE 5 arg LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int i , int outlen , int len , int charwidth ; INIT_DECL_LIST 4 int i , int outlen , int len , int charwidth VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 , INIT_DECL_LIST 5 int outlen , int len , int charwidth VAR_DECL 6 int outlen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 outlen LEAF_NODE 8 outlen LEAF_NODE 6 , INIT_DECL_LIST 6 int len , int charwidth VAR_DECL 7 int len TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 len LEAF_NODE 9 len LEAF_NODE 7 , VAR_DECL 7 int charwidth TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 charwidth LEAF_NODE 9 charwidth LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned short orflags ; VAR_DECL 4 unsigned short orflags TYPE 5 unsigned short TYPE_NAME 6 unsigned short LEAF_NODE 7 unsigned LEAF_NODE 7 short NAME 5 orflags LEAF_NODE 6 orflags LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * p , unsigned char * q ; INIT_DECL_LIST 4 unsigned char * p , unsigned char * q VAR_DECL 5 unsigned char * p TYPE 6 unsigned char * TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 p LEAF_NODE 7 p LEAF_NODE 5 , VAR_DECL 5 unsigned char * q TYPE 6 unsigned char * TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 q LEAF_NODE 7 q LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned long c ; VAR_DECL 4 unsigned long c TYPE 5 unsigned long TYPE_NAME 6 unsigned long LEAF_NODE 7 unsigned LEAF_NODE 7 long NAME 5 c LEAF_NODE 6 c LEAF_NODE 4 ; EXPR_STATEMENT 3 p = buf ; EXPR 4 p = buf ASSIGN 5 p = buf LVAL 6 p FIELD 7 p LEAF_NODE 8 p ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 buf FIELD 7 buf LEAF_NODE 8 buf LEAF_NODE 4 ; EXPR_STATEMENT 3 q = buf + buflen ; EXPR 4 q = buf + buflen ASSIGN 5 q = buf + buflen LVAL 6 q FIELD 7 q LEAF_NODE 8 q ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 buf + buflen FIELD 7 buf LEAF_NODE 8 buf LEAF_NODE 7 + FIELD 7 buflen LEAF_NODE 8 buflen LEAF_NODE 4 ; EXPR_STATEMENT 3 outlen = 0 ; EXPR 4 outlen = 0 ASSIGN 5 outlen = 0 LVAL 6 outlen FIELD 7 outlen LEAF_NODE 8 outlen ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 charwidth = type & BUF_TYPE_WIDTH_MASK ; EXPR 4 charwidth = type & BUF_TYPE_WIDTH_MASK ASSIGN 5 charwidth = type & BUF_TYPE_WIDTH_MASK LVAL 6 charwidth FIELD 7 charwidth LEAF_NODE 8 charwidth ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 type & BUF_TYPE_WIDTH_MASK FIELD 7 type LEAF_NODE 8 type LEAF_NODE 7 & FIELD 7 BUF_TYPE_WIDTH_MASK LEAF_NODE 8 BUF_TYPE_WIDTH_MASK LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 charwidth EXPR 5 charwidth FIELD 6 charwidth LEAF_NODE 7 charwidth LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 4 : LEAF_NODE 7 case LEAF_NODE 7 4 LEAF_NODE 7 : SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 buflen & 3 EXPR 8 buflen & 3 FIELD 9 buflen LEAF_NODE 10 buflen LEAF_NODE 9 & FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ASN1err ( ASN1_F_DO_BUF , ASN1_R_INVALID_UNIVERSALSTRING_LENGTH ) ; EXPR 10 ASN1err ( ASN1_F_DO_BUF , ASN1_R_INVALID_UNIVERSALSTRING_LENGTH ) FUNCTION_CALL 11 ASN1err ( ASN1_F_DO_BUF , ASN1_R_INVALID_UNIVERSALSTRING_LENGTH ) CALLEE 12 ASN1err LEAF_NODE 13 ASN1err LEAF_NODE 12 ( ARGUMENT 12 ASN1_F_DO_BUF FIELD 13 ASN1_F_DO_BUF LEAF_NODE 14 ASN1_F_DO_BUF LEAF_NODE 12 , ARGUMENT 12 ASN1_R_INVALID_UNIVERSALSTRING_LENGTH FIELD 13 ASN1_R_INVALID_UNIVERSALSTRING_LENGTH LEAF_NODE 14 ASN1_R_INVALID_UNIVERSALSTRING_LENGTH LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return - 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 - 1 EXPR 11 - 1 UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 case 2 : LEAF_NODE 7 case LEAF_NODE 7 2 LEAF_NODE 7 : SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 buflen & 1 EXPR 8 buflen & 1 FIELD 9 buflen LEAF_NODE 10 buflen LEAF_NODE 9 & FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ASN1err ( ASN1_F_DO_BUF , ASN1_R_INVALID_BMPSTRING_LENGTH ) ; EXPR 10 ASN1err ( ASN1_F_DO_BUF , ASN1_R_INVALID_BMPSTRING_LENGTH ) FUNCTION_CALL 11 ASN1err ( ASN1_F_DO_BUF , ASN1_R_INVALID_BMPSTRING_LENGTH ) CALLEE 12 ASN1err LEAF_NODE 13 ASN1err LEAF_NODE 12 ( ARGUMENT 12 ASN1_F_DO_BUF FIELD 13 ASN1_F_DO_BUF LEAF_NODE 14 ASN1_F_DO_BUF LEAF_NODE 12 , ARGUMENT 12 ASN1_R_INVALID_BMPSTRING_LENGTH FIELD 13 ASN1_R_INVALID_BMPSTRING_LENGTH LEAF_NODE 14 ASN1_R_INVALID_BMPSTRING_LENGTH LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return - 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 - 1 EXPR 11 - 1 UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 p != q EXPR 5 p != q FIELD 6 p LEAF_NODE 7 p EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 q LEAF_NODE 7 q LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 p == buf && flags & ASN1_STRFLGS_ESC_2253 EXPR 8 p == buf && flags & ASN1_STRFLGS_ESC_2253 AND 9 p == buf && flags & ASN1_STRFLGS_ESC_2253 EXPR 10 p == buf FIELD 11 p LEAF_NODE 12 p EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 buf LEAF_NODE 12 buf LEAF_NODE 10 && EXPR 10 flags & ASN1_STRFLGS_ESC_2253 FIELD 11 flags LEAF_NODE 12 flags LEAF_NODE 11 & FIELD 11 ASN1_STRFLGS_ESC_2253 LEAF_NODE 12 ASN1_STRFLGS_ESC_2253 LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 orflags = CHARTYPE_FIRST_ESC_2253 ; EXPR 9 orflags = CHARTYPE_FIRST_ESC_2253 ASSIGN 10 orflags = CHARTYPE_FIRST_ESC_2253 LVAL 11 orflags FIELD 12 orflags LEAF_NODE 13 orflags ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 CHARTYPE_FIRST_ESC_2253 FIELD 12 CHARTYPE_FIRST_ESC_2253 LEAF_NODE 13 CHARTYPE_FIRST_ESC_2253 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 EXPR_STATEMENT 8 orflags = 0 ; EXPR 9 orflags = 0 ASSIGN 10 orflags = 0 LVAL 11 orflags FIELD 12 orflags LEAF_NODE 13 orflags ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 switch LEAF_NODE 8 switch LEAF_NODE 7 ( CONDITION 7 charwidth EXPR 8 charwidth FIELD 9 charwidth LEAF_NODE 10 charwidth LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 LABEL 9 case 4 : LEAF_NODE 10 case LEAF_NODE 10 4 LEAF_NODE 10 : EXPR_STATEMENT 9 c = ( ( unsigned long ) * p ++ ) << 24 ; EXPR 10 c = ( ( unsigned long ) * p ++ ) << 24 ASSIGN 11 c = ( ( unsigned long ) * p ++ ) << 24 LVAL 12 c FIELD 13 c LEAF_NODE 14 c ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( ( unsigned long ) * p ++ ) << 24 LEAF_NODE 13 ( LEAF_NODE 13 ( TYPE_NAME 13 unsigned long LEAF_NODE 14 unsigned LEAF_NODE 14 long LEAF_NODE 13 ) UNARY_EXPR 13 * p ++ UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 p ++ LEAF_NODE 15 p LEAF_NODE 15 ++ LEAF_NODE 13 ) LEAF_NODE 13 << FIELD 13 24 LEAF_NODE 14 24 LEAF_NODE 10 ; EXPR_STATEMENT 9 c |= ( ( unsigned long ) * p ++ ) << 16 ; EXPR 10 c |= ( ( unsigned long ) * p ++ ) << 16 ASSIGN 11 c |= ( ( unsigned long ) * p ++ ) << 16 LVAL 12 c FIELD 13 c LEAF_NODE 14 c ASSIGN_OP 12 |= LEAF_NODE 13 |= RVAL 12 ( ( unsigned long ) * p ++ ) << 16 LEAF_NODE 13 ( LEAF_NODE 13 ( TYPE_NAME 13 unsigned long LEAF_NODE 14 unsigned LEAF_NODE 14 long LEAF_NODE 13 ) UNARY_EXPR 13 * p ++ UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 p ++ LEAF_NODE 15 p LEAF_NODE 15 ++ LEAF_NODE 13 ) LEAF_NODE 13 << FIELD 13 16 LEAF_NODE 14 16 LEAF_NODE 10 ; EXPR_STATEMENT 9 c |= ( ( unsigned long ) * p ++ ) << 8 ; EXPR 10 c |= ( ( unsigned long ) * p ++ ) << 8 ASSIGN 11 c |= ( ( unsigned long ) * p ++ ) << 8 LVAL 12 c FIELD 13 c LEAF_NODE 14 c ASSIGN_OP 12 |= LEAF_NODE 13 |= RVAL 12 ( ( unsigned long ) * p ++ ) << 8 LEAF_NODE 13 ( LEAF_NODE 13 ( TYPE_NAME 13 unsigned long LEAF_NODE 14 unsigned LEAF_NODE 14 long LEAF_NODE 13 ) UNARY_EXPR 13 * p ++ UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 p ++ LEAF_NODE 15 p LEAF_NODE 15 ++ LEAF_NODE 13 ) LEAF_NODE 13 << FIELD 13 8 LEAF_NODE 14 8 LEAF_NODE 10 ; EXPR_STATEMENT 9 c |= * p ++ ; EXPR 10 c |= * p ++ ASSIGN 11 c |= * p ++ LVAL 12 c FIELD 13 c LEAF_NODE 14 c ASSIGN_OP 12 |= LEAF_NODE 13 |= RVAL 12 * p ++ UNARY_EXPR 13 * p ++ UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 p ++ LEAF_NODE 15 p LEAF_NODE 15 ++ LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case 2 : LEAF_NODE 10 case LEAF_NODE 10 2 LEAF_NODE 10 : EXPR_STATEMENT 9 c = ( ( unsigned long ) * p ++ ) << 8 ; EXPR 10 c = ( ( unsigned long ) * p ++ ) << 8 ASSIGN 11 c = ( ( unsigned long ) * p ++ ) << 8 LVAL 12 c FIELD 13 c LEAF_NODE 14 c ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( ( unsigned long ) * p ++ ) << 8 LEAF_NODE 13 ( LEAF_NODE 13 ( TYPE_NAME 13 unsigned long LEAF_NODE 14 unsigned LEAF_NODE 14 long LEAF_NODE 13 ) UNARY_EXPR 13 * p ++ UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 p ++ LEAF_NODE 15 p LEAF_NODE 15 ++ LEAF_NODE 13 ) LEAF_NODE 13 << FIELD 13 8 LEAF_NODE 14 8 LEAF_NODE 10 ; EXPR_STATEMENT 9 c |= * p ++ ; EXPR 10 c |= * p ++ ASSIGN 11 c |= * p ++ LVAL 12 c FIELD 13 c LEAF_NODE 14 c ASSIGN_OP 12 |= LEAF_NODE 13 |= RVAL 12 * p ++ UNARY_EXPR 13 * p ++ UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 p ++ LEAF_NODE 15 p LEAF_NODE 15 ++ LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case 1 : LEAF_NODE 10 case LEAF_NODE 10 1 LEAF_NODE 10 : EXPR_STATEMENT 9 c = * p ++ ; EXPR 10 c = * p ++ ASSIGN 11 c = * p ++ LVAL 12 c FIELD 13 c LEAF_NODE 14 c ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 * p ++ UNARY_EXPR 13 * p ++ UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 p ++ LEAF_NODE 15 p LEAF_NODE 15 ++ LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case 0 : LEAF_NODE 10 case LEAF_NODE 10 0 LEAF_NODE 10 : EXPR_STATEMENT 9 i = UTF8_getc ( p , buflen , & c ) ; EXPR 10 i = UTF8_getc ( p , buflen , & c ) ASSIGN 11 i = UTF8_getc ( p , buflen , & c ) LVAL 12 i FIELD 13 i LEAF_NODE 14 i ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 UTF8_getc ( p , buflen , & c ) FUNCTION_CALL 13 UTF8_getc ( p , buflen , & c ) CALLEE 14 UTF8_getc LEAF_NODE 15 UTF8_getc LEAF_NODE 14 ( ARGUMENT 14 p FIELD 15 p LEAF_NODE 16 p LEAF_NODE 14 , ARGUMENT 14 buflen FIELD 15 buflen LEAF_NODE 16 buflen LEAF_NODE 14 , ARGUMENT 14 & c UNARY_EXPR 15 & c UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 c LEAF_NODE 17 c LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 i < 0 EXPR 11 i < 0 FIELD 12 i LEAF_NODE 13 i REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 return - 1 ; KEYWORD 12 return LEAF_NODE 13 return DESTINATION 12 - 1 EXPR 13 - 1 UNARY_EXPR 14 - 1 UNARY_OPERATOR 15 - LEAF_NODE 16 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 12 ; EXPR_STATEMENT 9 buflen -= i ; EXPR 10 buflen -= i ASSIGN 11 buflen -= i LVAL 12 buflen FIELD 13 buflen LEAF_NODE 14 buflen ASSIGN_OP 12 -= LEAF_NODE 13 -= RVAL 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 10 ; EXPR_STATEMENT 9 p += i ; EXPR 10 p += i ASSIGN 11 p += i LVAL 12 p FIELD 13 p LEAF_NODE 14 p ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 default : LEAF_NODE 10 default LEAF_NODE 10 : JUMP_STATEMENT 9 return - 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 - 1 EXPR 11 - 1 UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 p == q && flags & ASN1_STRFLGS_ESC_2253 EXPR 8 p == q && flags & ASN1_STRFLGS_ESC_2253 AND 9 p == q && flags & ASN1_STRFLGS_ESC_2253 EXPR 10 p == q FIELD 11 p LEAF_NODE 12 p EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 q LEAF_NODE 12 q LEAF_NODE 10 && EXPR 10 flags & ASN1_STRFLGS_ESC_2253 FIELD 11 flags LEAF_NODE 12 flags LEAF_NODE 11 & FIELD 11 ASN1_STRFLGS_ESC_2253 LEAF_NODE 12 ASN1_STRFLGS_ESC_2253 LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 orflags = CHARTYPE_LAST_ESC_2253 ; EXPR 9 orflags = CHARTYPE_LAST_ESC_2253 ASSIGN 10 orflags = CHARTYPE_LAST_ESC_2253 LVAL 11 orflags FIELD 12 orflags LEAF_NODE 13 orflags ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 CHARTYPE_LAST_ESC_2253 FIELD 12 CHARTYPE_LAST_ESC_2253 LEAF_NODE 13 CHARTYPE_LAST_ESC_2253 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 type & BUF_TYPE_CONVUTF8 EXPR 8 type & BUF_TYPE_CONVUTF8 FIELD 9 type LEAF_NODE 10 type LEAF_NODE 9 & FIELD 9 BUF_TYPE_CONVUTF8 LEAF_NODE 10 BUF_TYPE_CONVUTF8 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SIMPLE_DECL 9 unsigned char [ 6 ] utfbuf ; VAR_DECL 10 unsigned char [ 6 ] utfbuf TYPE 11 unsigned char [ 6 ] TYPE_NAME 12 unsigned char LEAF_NODE 13 unsigned LEAF_NODE 13 char TYPE_SUFFIX 12 [ 6 ] LEAF_NODE 13 [ FIELD 13 6 LEAF_NODE 14 6 LEAF_NODE 13 ] NAME 11 utfbuf LEAF_NODE 12 utfbuf LEAF_NODE 10 ; SIMPLE_DECL 9 int utflen ; VAR_DECL 10 int utflen TYPE 11 int TYPE_NAME 12 int LEAF_NODE 13 int NAME 11 utflen LEAF_NODE 12 utflen LEAF_NODE 10 ; EXPR_STATEMENT 9 utflen = UTF8_putc ( utfbuf , sizeof ( utfbuf ) , c ) ; EXPR 10 utflen = UTF8_putc ( utfbuf , sizeof ( utfbuf ) , c ) ASSIGN 11 utflen = UTF8_putc ( utfbuf , sizeof ( utfbuf ) , c ) LVAL 12 utflen FIELD 13 utflen LEAF_NODE 14 utflen ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 UTF8_putc ( utfbuf , sizeof ( utfbuf ) , c ) FUNCTION_CALL 13 UTF8_putc ( utfbuf , sizeof ( utfbuf ) , c ) CALLEE 14 UTF8_putc LEAF_NODE 15 UTF8_putc LEAF_NODE 14 ( ARGUMENT 14 utfbuf FIELD 15 utfbuf LEAF_NODE 16 utfbuf LEAF_NODE 14 , ARGUMENT 14 sizeof ( utfbuf ) FUNCTION_CALL 15 sizeof ( utfbuf ) CALLEE 16 sizeof LEAF_NODE 17 sizeof LEAF_NODE 16 ( ARGUMENT 16 utfbuf FIELD 17 utfbuf LEAF_NODE 18 utfbuf LEAF_NODE 16 ) LEAF_NODE 14 , ARGUMENT 14 c FIELD 15 c LEAF_NODE 16 c LEAF_NODE 14 ) LEAF_NODE 10 ; ITERATION 9 KEYWORD 10 for LEAF_NODE 11 for LEAF_NODE 10 ( FOR_INIT 10 i = 0 ; EXPR 11 i = 0 ASSIGN 12 i = 0 LVAL 13 i FIELD 14 i LEAF_NODE 15 i ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; CONDITION 10 i < utflen EXPR 11 i < utflen FIELD 12 i LEAF_NODE 13 i REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 utflen LEAF_NODE 13 utflen LEAF_NODE 10 ; FOR_EXPR 10 i ++ EXPR 11 i ++ FIELD 12 i ++ LEAF_NODE 13 i LEAF_NODE 13 ++ LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 len = do_esc_char ( utfbuf [ i ] , flags | orflags , quotes , io_ch , arg ) ; EXPR 13 len = do_esc_char ( utfbuf [ i ] , flags | orflags , quotes , io_ch , arg ) ASSIGN 14 len = do_esc_char ( utfbuf [ i ] , flags | orflags , quotes , io_ch , arg ) LVAL 15 len FIELD 16 len LEAF_NODE 17 len ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 do_esc_char ( utfbuf [ i ] , flags | orflags , quotes , io_ch , arg ) FUNCTION_CALL 16 do_esc_char ( utfbuf [ i ] , flags | orflags , quotes , io_ch , arg ) CALLEE 17 do_esc_char LEAF_NODE 18 do_esc_char LEAF_NODE 17 ( ARGUMENT 17 utfbuf [ i ] FIELD 18 utfbuf [ i ] LEAF_NODE 19 utfbuf LEAF_NODE 19 [ EXPR 19 i FIELD 20 i LEAF_NODE 21 i LEAF_NODE 19 ] LEAF_NODE 17 , ARGUMENT 17 flags | orflags BIT_OR 18 flags | orflags BIT_OR_ELEM 19 flags FIELD 20 flags LEAF_NODE 21 flags LEAF_NODE 19 | BIT_OR_ELEM 19 orflags FIELD 20 orflags LEAF_NODE 21 orflags LEAF_NODE 17 , ARGUMENT 17 quotes FIELD 18 quotes LEAF_NODE 19 quotes LEAF_NODE 17 , ARGUMENT 17 io_ch FIELD 18 io_ch LEAF_NODE 19 io_ch LEAF_NODE 17 , ARGUMENT 17 arg FIELD 18 arg LEAF_NODE 19 arg LEAF_NODE 17 ) LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 len < 0 EXPR 14 len < 0 FIELD 15 len LEAF_NODE 16 len REL_OPERATOR 15 < LEAF_NODE 16 < FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 13 ) STATEMENTS 13 JUMP_STATEMENT 14 return - 1 ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 - 1 EXPR 16 - 1 UNARY_EXPR 17 - 1 UNARY_OPERATOR 18 - LEAF_NODE 19 - FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 15 ; EXPR_STATEMENT 12 outlen += len ; EXPR 13 outlen += len ASSIGN 14 outlen += len LVAL 15 outlen FIELD 16 outlen LEAF_NODE 17 outlen ASSIGN_OP 15 += LEAF_NODE 16 += RVAL 15 len FIELD 16 len LEAF_NODE 17 len LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 len = do_esc_char ( c , flags | orflags , quotes , io_ch , arg ) ; EXPR 10 len = do_esc_char ( c , flags | orflags , quotes , io_ch , arg ) ASSIGN 11 len = do_esc_char ( c , flags | orflags , quotes , io_ch , arg ) LVAL 12 len FIELD 13 len LEAF_NODE 14 len ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 do_esc_char ( c , flags | orflags , quotes , io_ch , arg ) FUNCTION_CALL 13 do_esc_char ( c , flags | orflags , quotes , io_ch , arg ) CALLEE 14 do_esc_char LEAF_NODE 15 do_esc_char LEAF_NODE 14 ( ARGUMENT 14 c FIELD 15 c LEAF_NODE 16 c LEAF_NODE 14 , ARGUMENT 14 flags | orflags BIT_OR 15 flags | orflags BIT_OR_ELEM 16 flags FIELD 17 flags LEAF_NODE 18 flags LEAF_NODE 16 | BIT_OR_ELEM 16 orflags FIELD 17 orflags LEAF_NODE 18 orflags LEAF_NODE 14 , ARGUMENT 14 quotes FIELD 15 quotes LEAF_NODE 16 quotes LEAF_NODE 14 , ARGUMENT 14 io_ch FIELD 15 io_ch LEAF_NODE 16 io_ch LEAF_NODE 14 , ARGUMENT 14 arg FIELD 15 arg LEAF_NODE 16 arg LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 len < 0 EXPR 11 len < 0 FIELD 12 len LEAF_NODE 13 len REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 return - 1 ; KEYWORD 12 return LEAF_NODE 13 return DESTINATION 12 - 1 EXPR 13 - 1 UNARY_EXPR 14 - 1 UNARY_OPERATOR 15 - LEAF_NODE 16 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 12 ; EXPR_STATEMENT 9 outlen += len ; EXPR 10 outlen += len ASSIGN 11 outlen += len LVAL 12 outlen FIELD 13 outlen LEAF_NODE 14 outlen ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 len FIELD 13 len LEAF_NODE 14 len LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } JUMP_STATEMENT 3 return outlen ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 outlen EXPR 5 outlen FIELD 6 outlen LEAF_NODE 7 outlen LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 140, "project": "openssl_ast_normal_function_test_59", "target": 0}
{"func": "SIMPLE_DECL 1 unsigned long global_mask ; global_mask = B_ASN1_UTF8STRING ; VAR_DECL 2 unsigned long global_mask ; global_mask = B_ASN1_UTF8STRING TYPE 3 unsigned long TYPE_NAME 4 unsigned long LEAF_NODE 5 unsigned LEAF_NODE 5 long NAME 3 global_mask LEAF_NODE 4 global_mask LEAF_NODE 3 ; INIT 3 global_mask = B_ASN1_UTF8STRING ASSIGN 4 global_mask = B_ASN1_UTF8STRING LVAL 5 global_mask NAME 6 global_mask LEAF_NODE 7 global_mask ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 B_ASN1_UTF8STRING FIELD 6 B_ASN1_UTF8STRING LEAF_NODE 7 B_ASN1_UTF8STRING LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 ASN1_STRING * TYPE_NAME 3 ASN1_STRING LEAF_NODE 4 ASN1_STRING LEAF_NODE 3 * FUNCTION_NAME 2 ASN1_STRING_set_by_NID LEAF_NODE 3 ASN1_STRING_set_by_NID PARAMETER_LIST 2 ( ASN1_STRING * * out , const unsigned char * in , int inlen , int inform , int nid ) LEAF_NODE 3 ( PARAMETER_DECL 3 ASN1_STRING * * out TYPE 4 ASN1_STRING * * TYPE_NAME 5 ASN1_STRING LEAF_NODE 6 ASN1_STRING POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 const unsigned char * in TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 in LEAF_NODE 5 in LEAF_NODE 3 , PARAMETER_DECL 3 int inlen TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 inlen LEAF_NODE 5 inlen LEAF_NODE 3 , PARAMETER_DECL 3 int inform TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 inform LEAF_NODE 5 inform LEAF_NODE 3 , PARAMETER_DECL 3 int nid TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 nid LEAF_NODE 5 nid LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 ASN1_STRING_TABLE * tbl ; VAR_DECL 4 ASN1_STRING_TABLE * tbl TYPE 5 ASN1_STRING_TABLE * TYPE_NAME 6 ASN1_STRING_TABLE LEAF_NODE 7 ASN1_STRING_TABLE POINTER 6 * LEAF_NODE 7 * NAME 5 tbl LEAF_NODE 6 tbl LEAF_NODE 4 ; SIMPLE_DECL 3 ASN1_STRING * str ; str = NULL ; VAR_DECL 4 ASN1_STRING * str ; str = NULL TYPE 5 ASN1_STRING * TYPE_NAME 6 ASN1_STRING LEAF_NODE 7 ASN1_STRING POINTER 6 * LEAF_NODE 7 * NAME 5 str LEAF_NODE 6 str LEAF_NODE 5 ; INIT 5 str = NULL ASSIGN 6 str = NULL LVAL 7 str NAME 8 str LEAF_NODE 9 str ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned long mask ; VAR_DECL 4 unsigned long mask TYPE 5 unsigned long TYPE_NAME 6 unsigned long LEAF_NODE 7 unsigned LEAF_NODE 7 long NAME 5 mask LEAF_NODE 6 mask LEAF_NODE 4 ; SIMPLE_DECL 3 int ret ; VAR_DECL 4 int ret TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 out == NULL EXPR 5 out == NULL FIELD 6 out LEAF_NODE 7 out EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 out = & str ; EXPR 6 out = & str ASSIGN 7 out = & str LVAL 8 out FIELD 9 out LEAF_NODE 10 out ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 & str UNARY_EXPR 9 & str UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 str LEAF_NODE 11 str LEAF_NODE 6 ; EXPR_STATEMENT 3 tbl = ASN1_STRING_TABLE_get ( nid ) ; EXPR 4 tbl = ASN1_STRING_TABLE_get ( nid ) ASSIGN 5 tbl = ASN1_STRING_TABLE_get ( nid ) LVAL 6 tbl FIELD 7 tbl LEAF_NODE 8 tbl ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ASN1_STRING_TABLE_get ( nid ) FUNCTION_CALL 7 ASN1_STRING_TABLE_get ( nid ) CALLEE 8 ASN1_STRING_TABLE_get LEAF_NODE 9 ASN1_STRING_TABLE_get LEAF_NODE 8 ( ARGUMENT 8 nid FIELD 9 nid LEAF_NODE 10 nid LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 tbl != NULL EXPR 5 tbl != NULL FIELD 6 tbl LEAF_NODE 7 tbl EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 mask = tbl -> mask ; EXPR 7 mask = tbl -> mask ASSIGN 8 mask = tbl -> mask LVAL 9 mask FIELD 10 mask LEAF_NODE 11 mask ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 tbl -> mask FIELD 10 tbl -> mask LEAF_NODE 11 tbl LEAF_NODE 11 -> LEAF_NODE 11 mask LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! ( tbl -> flags & STABLE_NO_MASK ) EXPR 8 ! ( tbl -> flags & STABLE_NO_MASK ) UNARY_EXPR 9 ! ( tbl -> flags & STABLE_NO_MASK ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! LEAF_NODE 10 ( FIELD 10 tbl -> flags LEAF_NODE 11 tbl LEAF_NODE 11 -> LEAF_NODE 11 flags LEAF_NODE 10 & FIELD 10 STABLE_NO_MASK LEAF_NODE 11 STABLE_NO_MASK LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 mask &= global_mask ; EXPR 9 mask &= global_mask ASSIGN 10 mask &= global_mask LVAL 11 mask FIELD 12 mask LEAF_NODE 13 mask ASSIGN_OP 11 &= LEAF_NODE 12 &= RVAL 11 global_mask FIELD 12 global_mask LEAF_NODE 13 global_mask LEAF_NODE 9 ; EXPR_STATEMENT 6 ret = ASN1_mbstring_ncopy ( out , in , inlen , inform , mask , tbl -> minsize , tbl -> maxsize ) ; EXPR 7 ret = ASN1_mbstring_ncopy ( out , in , inlen , inform , mask , tbl -> minsize , tbl -> maxsize ) ASSIGN 8 ret = ASN1_mbstring_ncopy ( out , in , inlen , inform , mask , tbl -> minsize , tbl -> maxsize ) LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ASN1_mbstring_ncopy ( out , in , inlen , inform , mask , tbl -> minsize , tbl -> maxsize ) FUNCTION_CALL 10 ASN1_mbstring_ncopy ( out , in , inlen , inform , mask , tbl -> minsize , tbl -> maxsize ) CALLEE 11 ASN1_mbstring_ncopy LEAF_NODE 12 ASN1_mbstring_ncopy LEAF_NODE 11 ( ARGUMENT 11 out FIELD 12 out LEAF_NODE 13 out LEAF_NODE 11 , ARGUMENT 11 in FIELD 12 in LEAF_NODE 13 in LEAF_NODE 11 , ARGUMENT 11 inlen FIELD 12 inlen LEAF_NODE 13 inlen LEAF_NODE 11 , ARGUMENT 11 inform FIELD 12 inform LEAF_NODE 13 inform LEAF_NODE 11 , ARGUMENT 11 mask FIELD 12 mask LEAF_NODE 13 mask LEAF_NODE 11 , ARGUMENT 11 tbl -> minsize FIELD 12 tbl -> minsize LEAF_NODE 13 tbl LEAF_NODE 13 -> LEAF_NODE 13 minsize LEAF_NODE 11 , ARGUMENT 11 tbl -> maxsize FIELD 12 tbl -> maxsize LEAF_NODE 13 tbl LEAF_NODE 13 -> LEAF_NODE 13 maxsize LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ret = ASN1_mbstring_copy ( out , in , inlen , inform , DIRSTRING_TYPE & global_mask ) ; EXPR 7 ret = ASN1_mbstring_copy ( out , in , inlen , inform , DIRSTRING_TYPE & global_mask ) ASSIGN 8 ret = ASN1_mbstring_copy ( out , in , inlen , inform , DIRSTRING_TYPE & global_mask ) LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ASN1_mbstring_copy ( out , in , inlen , inform , DIRSTRING_TYPE & global_mask ) FUNCTION_CALL 10 ASN1_mbstring_copy ( out , in , inlen , inform , DIRSTRING_TYPE & global_mask ) CALLEE 11 ASN1_mbstring_copy LEAF_NODE 12 ASN1_mbstring_copy LEAF_NODE 11 ( ARGUMENT 11 out FIELD 12 out LEAF_NODE 13 out LEAF_NODE 11 , ARGUMENT 11 in FIELD 12 in LEAF_NODE 13 in LEAF_NODE 11 , ARGUMENT 11 inlen FIELD 12 inlen LEAF_NODE 13 inlen LEAF_NODE 11 , ARGUMENT 11 inform FIELD 12 inform LEAF_NODE 13 inform LEAF_NODE 11 , ARGUMENT 11 DIRSTRING_TYPE & global_mask FIELD 12 DIRSTRING_TYPE LEAF_NODE 13 DIRSTRING_TYPE LEAF_NODE 12 & FIELD 12 global_mask LEAF_NODE 13 global_mask LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ret <= 0 EXPR 5 ret <= 0 FIELD 6 ret LEAF_NODE 7 ret REL_OPERATOR 6 <= LEAF_NODE 7 <= FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return NULL ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 NULL EXPR 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 6 ; JUMP_STATEMENT 3 return * out ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 * out EXPR 5 * out UNARY_EXPR 6 * out UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 out LEAF_NODE 8 out LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 141, "project": "openssl_ast_normal_function_test_103", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_mbstring_copy LEAF_NODE 3 ASN1_mbstring_copy PARAMETER_LIST 2 ( ASN1_STRING * * out , const unsigned char * in , int len , int inform , unsigned long mask ) LEAF_NODE 3 ( PARAMETER_DECL 3 ASN1_STRING * * out TYPE 4 ASN1_STRING * * TYPE_NAME 5 ASN1_STRING LEAF_NODE 6 ASN1_STRING POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 const unsigned char * in TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 in LEAF_NODE 5 in LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 , PARAMETER_DECL 3 int inform TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 inform LEAF_NODE 5 inform LEAF_NODE 3 , PARAMETER_DECL 3 unsigned long mask TYPE 4 unsigned long TYPE_NAME 5 unsigned long LEAF_NODE 6 unsigned LEAF_NODE 6 long NAME 4 mask LEAF_NODE 5 mask LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return ASN1_mbstring_ncopy ( out , in , len , inform , mask , 0 , 0 ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ASN1_mbstring_ncopy ( out , in , len , inform , mask , 0 , 0 ) EXPR 5 ASN1_mbstring_ncopy ( out , in , len , inform , mask , 0 , 0 ) FUNCTION_CALL 6 ASN1_mbstring_ncopy ( out , in , len , inform , mask , 0 , 0 ) CALLEE 7 ASN1_mbstring_ncopy LEAF_NODE 8 ASN1_mbstring_ncopy LEAF_NODE 7 ( ARGUMENT 7 out FIELD 8 out LEAF_NODE 9 out LEAF_NODE 7 , ARGUMENT 7 in FIELD 8 in LEAF_NODE 9 in LEAF_NODE 7 , ARGUMENT 7 len FIELD 8 len LEAF_NODE 9 len LEAF_NODE 7 , ARGUMENT 7 inform FIELD 8 inform LEAF_NODE 9 inform LEAF_NODE 7 , ARGUMENT 7 mask FIELD 8 mask LEAF_NODE 9 mask LEAF_NODE 7 , ARGUMENT 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 7 , ARGUMENT 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 142, "project": "openssl_ast_normal_function_test_0", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_digest LEAF_NODE 3 ASN1_digest PARAMETER_LIST 2 ( i2d_of_void * i2d , const EVP_MD * type , char * data , unsigned char * md , unsigned int * len ) LEAF_NODE 3 ( PARAMETER_DECL 3 i2d_of_void * i2d TYPE 4 i2d_of_void * TYPE_NAME 5 i2d_of_void LEAF_NODE 6 i2d_of_void POINTER 5 * LEAF_NODE 6 * NAME 4 i2d LEAF_NODE 5 i2d LEAF_NODE 3 , PARAMETER_DECL 3 const EVP_MD * type TYPE 4 const EVP_MD * TYPE_NAME 5 const EVP_MD LEAF_NODE 6 const LEAF_NODE 6 EVP_MD POINTER 5 * LEAF_NODE 6 * NAME 4 type LEAF_NODE 5 type LEAF_NODE 3 , PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * md TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 md LEAF_NODE 5 md LEAF_NODE 3 , PARAMETER_DECL 3 unsigned int * len TYPE 4 unsigned int * TYPE_NAME 5 unsigned int LEAF_NODE 6 unsigned LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int i ; VAR_DECL 4 int i TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * str , unsigned char * p ; INIT_DECL_LIST 4 unsigned char * str , unsigned char * p VAR_DECL 5 unsigned char * str TYPE 6 unsigned char * TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 str LEAF_NODE 7 str LEAF_NODE 5 , VAR_DECL 5 unsigned char * p TYPE 6 unsigned char * TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 p LEAF_NODE 7 p LEAF_NODE 4 ; EXPR_STATEMENT 3 i = i2d ( data , NULL ) ; EXPR 4 i = i2d ( data , NULL ) ASSIGN 5 i = i2d ( data , NULL ) LVAL 6 i FIELD 7 i LEAF_NODE 8 i ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 i2d ( data , NULL ) FUNCTION_CALL 7 i2d ( data , NULL ) CALLEE 8 i2d LEAF_NODE 9 i2d LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 , ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( str = OPENSSL_malloc ( i ) ) == NULL EXPR 5 ( str = OPENSSL_malloc ( i ) ) == NULL LEAF_NODE 6 ( ASSIGN 6 str = OPENSSL_malloc ( i ) LVAL 7 str FIELD 8 str LEAF_NODE 9 str ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 OPENSSL_malloc ( i ) FUNCTION_CALL 8 OPENSSL_malloc ( i ) CALLEE 9 OPENSSL_malloc LEAF_NODE 10 OPENSSL_malloc LEAF_NODE 9 ( ARGUMENT 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 9 ) LEAF_NODE 6 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASN1err ( ASN1_F_ASN1_DIGEST , ERR_R_MALLOC_FAILURE ) ; EXPR 7 ASN1err ( ASN1_F_ASN1_DIGEST , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 8 ASN1err ( ASN1_F_ASN1_DIGEST , ERR_R_MALLOC_FAILURE ) CALLEE 9 ASN1err LEAF_NODE 10 ASN1err LEAF_NODE 9 ( ARGUMENT 9 ASN1_F_ASN1_DIGEST FIELD 10 ASN1_F_ASN1_DIGEST LEAF_NODE 11 ASN1_F_ASN1_DIGEST LEAF_NODE 9 , ARGUMENT 9 ERR_R_MALLOC_FAILURE FIELD 10 ERR_R_MALLOC_FAILURE LEAF_NODE 11 ERR_R_MALLOC_FAILURE LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 p = str ; EXPR 4 p = str ASSIGN 5 p = str LVAL 6 p FIELD 7 p LEAF_NODE 8 p ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 str FIELD 7 str LEAF_NODE 8 str LEAF_NODE 4 ; EXPR_STATEMENT 3 i2d ( data , & p ) ; EXPR 4 i2d ( data , & p ) FUNCTION_CALL 5 i2d ( data , & p ) CALLEE 6 i2d LEAF_NODE 7 i2d LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 & p UNARY_EXPR 7 & p UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 p LEAF_NODE 9 p LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! EVP_Digest ( str , i , md , len , type , NULL ) EXPR 5 ! EVP_Digest ( str , i , md , len , type , NULL ) UNARY_EXPR 6 ! EVP_Digest ( str , i , md , len , type , NULL ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 EVP_Digest ( str , i , md , len , type , NULL ) CALLEE 8 EVP_Digest LEAF_NODE 9 EVP_Digest LEAF_NODE 8 ( ARGUMENT 8 str FIELD 9 str LEAF_NODE 10 str LEAF_NODE 8 , ARGUMENT 8 i FIELD 9 i LEAF_NODE 10 i LEAF_NODE 8 , ARGUMENT 8 md FIELD 9 md LEAF_NODE 10 md LEAF_NODE 8 , ARGUMENT 8 len FIELD 9 len LEAF_NODE 10 len LEAF_NODE 8 , ARGUMENT 8 type FIELD 9 type LEAF_NODE 10 type LEAF_NODE 8 , ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 OPENSSL_free ( str ) ; EXPR 7 OPENSSL_free ( str ) FUNCTION_CALL 8 OPENSSL_free ( str ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 str FIELD 10 str LEAF_NODE 11 str LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 OPENSSL_free ( str ) ; EXPR 4 OPENSSL_free ( str ) FUNCTION_CALL 5 OPENSSL_free ( str ) CALLEE 6 OPENSSL_free LEAF_NODE 7 OPENSSL_free LEAF_NODE 6 ( ARGUMENT 6 str FIELD 7 str LEAF_NODE 8 str LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 143, "project": "openssl_ast_normal_function_test_39", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static SUB_STATE_RETURN LEAF_NODE 3 static TYPE_NAME 3 SUB_STATE_RETURN LEAF_NODE 4 SUB_STATE_RETURN FUNCTION_NAME 2 read_state_machine LEAF_NODE 3 read_state_machine PARAMETER_LIST 2 ( SSL * s ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 OSSL_STATEM * st ; st = & s -> statem ; VAR_DECL 4 OSSL_STATEM * st ; st = & s -> statem TYPE 5 OSSL_STATEM * TYPE_NAME 6 OSSL_STATEM LEAF_NODE 7 OSSL_STATEM POINTER 6 * LEAF_NODE 7 * NAME 5 st LEAF_NODE 6 st LEAF_NODE 5 ; INIT 5 st = & s -> statem ASSIGN 6 st = & s -> statem LVAL 7 st NAME 8 st LEAF_NODE 9 st ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & s -> statem UNARY_EXPR 8 & s -> statem UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 s -> statem LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 statem LEAF_NODE 4 ; SIMPLE_DECL 3 int ret , int mt ; INIT_DECL_LIST 4 int ret , int mt VAR_DECL 5 int ret TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 ret LEAF_NODE 7 ret LEAF_NODE 5 , VAR_DECL 5 int mt TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 mt LEAF_NODE 7 mt LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned long len ; len = 0 ; VAR_DECL 4 unsigned long len ; len = 0 TYPE 5 unsigned long TYPE_NAME 6 unsigned long LEAF_NODE 7 unsigned LEAF_NODE 7 long NAME 5 len LEAF_NODE 6 len LEAF_NODE 5 ; INIT 5 len = 0 ASSIGN 6 len = 0 LVAL 7 len NAME 8 len LEAF_NODE 9 len ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; LEAF_NODE 3 int LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 transition LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 SSL LEAF_NODE 3 * LEAF_NODE 3 s LEAF_NODE 3 , LEAF_NODE 3 int LEAF_NODE 3 mt LEAF_NODE 3 ) LEAF_NODE 3 ; SIMPLE_DECL 3 PACKET pkt ; VAR_DECL 4 PACKET pkt TYPE 5 PACKET TYPE_NAME 6 PACKET LEAF_NODE 7 PACKET NAME 5 pkt LEAF_NODE 6 pkt LEAF_NODE 4 ; LEAF_NODE 3 MSG_PROCESS_RETURN EXPR_STATEMENT 3 ( * process_message ) ( SSL * s , PACKET * pkt ) ; EXPR 4 ( * process_message ) ( SSL * s , PACKET * pkt ) FUNCTION_CALL 5 ( * process_message ) ( SSL * s , PACKET * pkt ) CALLEE 6 ( * process_message ) LEAF_NODE 7 ( UNARY_EXPR 7 * process_message UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 process_message LEAF_NODE 9 process_message LEAF_NODE 7 ) LEAF_NODE 6 ( ARGUMENT 6 SSL * s FIELD 7 SSL LEAF_NODE 8 SSL LEAF_NODE 7 * FIELD 7 s LEAF_NODE 8 s LEAF_NODE 6 , ARGUMENT 6 PACKET * pkt FIELD 7 PACKET LEAF_NODE 8 PACKET LEAF_NODE 7 * FIELD 7 pkt LEAF_NODE 8 pkt LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 3 WORK_STATE LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 post_process_message LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 SSL LEAF_NODE 3 * LEAF_NODE 3 s LEAF_NODE 3 , LEAF_NODE 3 WORK_STATE LEAF_NODE 3 wst LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 unsigned LEAF_NODE 3 long EXPR_STATEMENT 3 ( * max_message_size ) ( SSL * s ) ; EXPR 4 ( * max_message_size ) ( SSL * s ) FUNCTION_CALL 5 ( * max_message_size ) ( SSL * s ) CALLEE 6 ( * max_message_size ) LEAF_NODE 7 ( UNARY_EXPR 7 * max_message_size UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 max_message_size LEAF_NODE 9 max_message_size LEAF_NODE 7 ) LEAF_NODE 6 ( ARGUMENT 6 SSL * s FIELD 7 SSL LEAF_NODE 8 SSL LEAF_NODE 7 * FIELD 7 s LEAF_NODE 8 s LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 cb LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 const LEAF_NODE 3 SSL LEAF_NODE 3 * LEAF_NODE 3 ssl LEAF_NODE 3 , LEAF_NODE 3 int LEAF_NODE 3 type LEAF_NODE 3 , LEAF_NODE 3 int LEAF_NODE 3 val LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 NULL ; EXPR 4 NULL FIELD 5 NULL LEAF_NODE 6 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 cb = get_callback ( s ) ; EXPR 4 cb = get_callback ( s ) ASSIGN 5 cb = get_callback ( s ) LVAL 6 cb FIELD 7 cb LEAF_NODE 8 cb ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 get_callback ( s ) FUNCTION_CALL 7 get_callback ( s ) CALLEE 8 get_callback LEAF_NODE 9 get_callback LEAF_NODE 8 ( ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> server EXPR 5 s -> server FIELD 6 s -> server LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 server LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 transition = ossl_statem_server_read_transition ; EXPR 7 transition = ossl_statem_server_read_transition ASSIGN 8 transition = ossl_statem_server_read_transition LVAL 9 transition FIELD 10 transition LEAF_NODE 11 transition ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ossl_statem_server_read_transition FIELD 10 ossl_statem_server_read_transition LEAF_NODE 11 ossl_statem_server_read_transition LEAF_NODE 7 ; EXPR_STATEMENT 6 process_message = ossl_statem_server_process_message ; EXPR 7 process_message = ossl_statem_server_process_message ASSIGN 8 process_message = ossl_statem_server_process_message LVAL 9 process_message FIELD 10 process_message LEAF_NODE 11 process_message ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ossl_statem_server_process_message FIELD 10 ossl_statem_server_process_message LEAF_NODE 11 ossl_statem_server_process_message LEAF_NODE 7 ; EXPR_STATEMENT 6 max_message_size = ossl_statem_server_max_message_size ; EXPR 7 max_message_size = ossl_statem_server_max_message_size ASSIGN 8 max_message_size = ossl_statem_server_max_message_size LVAL 9 max_message_size FIELD 10 max_message_size LEAF_NODE 11 max_message_size ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ossl_statem_server_max_message_size FIELD 10 ossl_statem_server_max_message_size LEAF_NODE 11 ossl_statem_server_max_message_size LEAF_NODE 7 ; EXPR_STATEMENT 6 post_process_message = ossl_statem_server_post_process_message ; EXPR 7 post_process_message = ossl_statem_server_post_process_message ASSIGN 8 post_process_message = ossl_statem_server_post_process_message LVAL 9 post_process_message FIELD 10 post_process_message LEAF_NODE 11 post_process_message ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ossl_statem_server_post_process_message FIELD 10 ossl_statem_server_post_process_message LEAF_NODE 11 ossl_statem_server_post_process_message LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 transition = ossl_statem_client_read_transition ; EXPR 7 transition = ossl_statem_client_read_transition ASSIGN 8 transition = ossl_statem_client_read_transition LVAL 9 transition FIELD 10 transition LEAF_NODE 11 transition ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ossl_statem_client_read_transition FIELD 10 ossl_statem_client_read_transition LEAF_NODE 11 ossl_statem_client_read_transition LEAF_NODE 7 ; EXPR_STATEMENT 6 process_message = ossl_statem_client_process_message ; EXPR 7 process_message = ossl_statem_client_process_message ASSIGN 8 process_message = ossl_statem_client_process_message LVAL 9 process_message FIELD 10 process_message LEAF_NODE 11 process_message ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ossl_statem_client_process_message FIELD 10 ossl_statem_client_process_message LEAF_NODE 11 ossl_statem_client_process_message LEAF_NODE 7 ; EXPR_STATEMENT 6 max_message_size = ossl_statem_client_max_message_size ; EXPR 7 max_message_size = ossl_statem_client_max_message_size ASSIGN 8 max_message_size = ossl_statem_client_max_message_size LVAL 9 max_message_size FIELD 10 max_message_size LEAF_NODE 11 max_message_size ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ossl_statem_client_max_message_size FIELD 10 ossl_statem_client_max_message_size LEAF_NODE 11 ossl_statem_client_max_message_size LEAF_NODE 7 ; EXPR_STATEMENT 6 post_process_message = ossl_statem_client_post_process_message ; EXPR 7 post_process_message = ossl_statem_client_post_process_message ASSIGN 8 post_process_message = ossl_statem_client_post_process_message LVAL 9 post_process_message FIELD 10 post_process_message LEAF_NODE 11 post_process_message ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ossl_statem_client_post_process_message FIELD 10 ossl_statem_client_post_process_message LEAF_NODE 11 ossl_statem_client_post_process_message LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 st -> read_state_first_init EXPR 5 st -> read_state_first_init FIELD 6 st -> read_state_first_init LEAF_NODE 7 st LEAF_NODE 7 -> LEAF_NODE 7 read_state_first_init LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 s -> first_packet = 1 ; EXPR 7 s -> first_packet = 1 ASSIGN 8 s -> first_packet = 1 LVAL 9 s -> first_packet FIELD 10 s -> first_packet LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 first_packet ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; EXPR_STATEMENT 6 st -> read_state_first_init = 0 ; EXPR 7 st -> read_state_first_init = 0 ASSIGN 8 st -> read_state_first_init = 0 LVAL 9 st -> read_state_first_init FIELD 10 st -> read_state_first_init LEAF_NODE 11 st LEAF_NODE 11 -> LEAF_NODE 11 read_state_first_init ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 switch LEAF_NODE 8 switch LEAF_NODE 7 ( CONDITION 7 st -> read_state EXPR 8 st -> read_state FIELD 9 st -> read_state LEAF_NODE 10 st LEAF_NODE 10 -> LEAF_NODE 10 read_state LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 LABEL 9 case READ_STATE_HEADER : LEAF_NODE 10 case LEAF_NODE 10 READ_STATE_HEADER LEAF_NODE 10 : SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 SSL_IS_DTLS ( s ) EXPR 11 SSL_IS_DTLS ( s ) FUNCTION_CALL 12 SSL_IS_DTLS ( s ) CALLEE 13 SSL_IS_DTLS LEAF_NODE 14 SSL_IS_DTLS LEAF_NODE 13 ( ARGUMENT 13 s FIELD 14 s LEAF_NODE 15 s LEAF_NODE 13 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ret = dtls_get_message ( s , & mt , & len ) ; EXPR 13 ret = dtls_get_message ( s , & mt , & len ) ASSIGN 14 ret = dtls_get_message ( s , & mt , & len ) LVAL 15 ret FIELD 16 ret LEAF_NODE 17 ret ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 dtls_get_message ( s , & mt , & len ) FUNCTION_CALL 16 dtls_get_message ( s , & mt , & len ) CALLEE 17 dtls_get_message LEAF_NODE 18 dtls_get_message LEAF_NODE 17 ( ARGUMENT 17 s FIELD 18 s LEAF_NODE 19 s LEAF_NODE 17 , ARGUMENT 17 & mt UNARY_EXPR 18 & mt UNARY_OPERATOR 19 & LEAF_NODE 20 & FIELD 19 mt LEAF_NODE 20 mt LEAF_NODE 17 , ARGUMENT 17 & len UNARY_EXPR 18 & len UNARY_OPERATOR 19 & LEAF_NODE 20 & FIELD 19 len LEAF_NODE 20 len LEAF_NODE 17 ) LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 else LEAF_NODE 11 else STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ret = tls_get_message_header ( s , & mt ) ; EXPR 13 ret = tls_get_message_header ( s , & mt ) ASSIGN 14 ret = tls_get_message_header ( s , & mt ) LVAL 15 ret FIELD 16 ret LEAF_NODE 17 ret ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 tls_get_message_header ( s , & mt ) FUNCTION_CALL 16 tls_get_message_header ( s , & mt ) CALLEE 17 tls_get_message_header LEAF_NODE 18 tls_get_message_header LEAF_NODE 17 ( ARGUMENT 17 s FIELD 18 s LEAF_NODE 19 s LEAF_NODE 17 , ARGUMENT 17 & mt UNARY_EXPR 18 & mt UNARY_OPERATOR 19 & LEAF_NODE 20 & FIELD 19 mt LEAF_NODE 20 mt LEAF_NODE 17 ) LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ret == 0 EXPR 11 ret == 0 FIELD 12 ret LEAF_NODE 13 ret EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 JUMP_STATEMENT 12 return SUB_STATE_ERROR ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 SUB_STATE_ERROR EXPR 14 SUB_STATE_ERROR FIELD 15 SUB_STATE_ERROR LEAF_NODE 16 SUB_STATE_ERROR LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 cb != NULL EXPR 11 cb != NULL FIELD 12 cb LEAF_NODE 13 cb EQ_OPERATOR 12 != LEAF_NODE 13 != FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 s -> server EXPR 14 s -> server FIELD 15 s -> server LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 server LEAF_NODE 13 ) STATEMENTS 13 EXPR_STATEMENT 14 cb ( s , SSL_CB_ACCEPT_LOOP , 1 ) ; EXPR 15 cb ( s , SSL_CB_ACCEPT_LOOP , 1 ) FUNCTION_CALL 16 cb ( s , SSL_CB_ACCEPT_LOOP , 1 ) CALLEE 17 cb LEAF_NODE 18 cb LEAF_NODE 17 ( ARGUMENT 17 s FIELD 18 s LEAF_NODE 19 s LEAF_NODE 17 , ARGUMENT 17 SSL_CB_ACCEPT_LOOP FIELD 18 SSL_CB_ACCEPT_LOOP LEAF_NODE 19 SSL_CB_ACCEPT_LOOP LEAF_NODE 17 , ARGUMENT 17 1 FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 17 ) LEAF_NODE 15 ; SELECTION 12 KEYWORD 13 else LEAF_NODE 14 else STATEMENTS 13 EXPR_STATEMENT 14 cb ( s , SSL_CB_CONNECT_LOOP , 1 ) ; EXPR 15 cb ( s , SSL_CB_CONNECT_LOOP , 1 ) FUNCTION_CALL 16 cb ( s , SSL_CB_CONNECT_LOOP , 1 ) CALLEE 17 cb LEAF_NODE 18 cb LEAF_NODE 17 ( ARGUMENT 17 s FIELD 18 s LEAF_NODE 19 s LEAF_NODE 17 , ARGUMENT 17 SSL_CB_CONNECT_LOOP FIELD 18 SSL_CB_CONNECT_LOOP LEAF_NODE 19 SSL_CB_CONNECT_LOOP LEAF_NODE 17 , ARGUMENT 17 1 FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 17 ) LEAF_NODE 15 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! transition ( s , mt ) EXPR 11 ! transition ( s , mt ) UNARY_EXPR 12 ! transition ( s , mt ) UNARY_OPERATOR 13 ! LEAF_NODE 14 ! FUNCTION_CALL 13 transition ( s , mt ) CALLEE 14 transition LEAF_NODE 15 transition LEAF_NODE 14 ( ARGUMENT 14 s FIELD 15 s LEAF_NODE 16 s LEAF_NODE 14 , ARGUMENT 14 mt FIELD 15 mt LEAF_NODE 16 mt LEAF_NODE 14 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ossl_statem_set_error ( s ) ; EXPR 13 ossl_statem_set_error ( s ) FUNCTION_CALL 14 ossl_statem_set_error ( s ) CALLEE 15 ossl_statem_set_error LEAF_NODE 16 ossl_statem_set_error LEAF_NODE 15 ( ARGUMENT 15 s FIELD 16 s LEAF_NODE 17 s LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 return SUB_STATE_ERROR ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 SUB_STATE_ERROR EXPR 14 SUB_STATE_ERROR FIELD 15 SUB_STATE_ERROR LEAF_NODE 16 SUB_STATE_ERROR LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 s -> s3 -> tmp . message_size > max_message_size ( s ) EXPR 11 s -> s3 -> tmp . message_size > max_message_size ( s ) FIELD 12 s -> s3 -> tmp . message_size LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 s3 LEAF_NODE 13 -> LEAF_NODE 13 tmp LEAF_NODE 13 . LEAF_NODE 13 message_size REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 max_message_size ( s ) CALLEE 13 max_message_size LEAF_NODE 14 max_message_size LEAF_NODE 13 ( ARGUMENT 13 s FIELD 14 s LEAF_NODE 15 s LEAF_NODE 13 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_ILLEGAL_PARAMETER ) ; EXPR 13 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_ILLEGAL_PARAMETER ) FUNCTION_CALL 14 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_ILLEGAL_PARAMETER ) CALLEE 15 ssl3_send_alert LEAF_NODE 16 ssl3_send_alert LEAF_NODE 15 ( ARGUMENT 15 s FIELD 16 s LEAF_NODE 17 s LEAF_NODE 15 , ARGUMENT 15 SSL3_AL_FATAL FIELD 16 SSL3_AL_FATAL LEAF_NODE 17 SSL3_AL_FATAL LEAF_NODE 15 , ARGUMENT 15 SSL_AD_ILLEGAL_PARAMETER FIELD 16 SSL_AD_ILLEGAL_PARAMETER LEAF_NODE 17 SSL_AD_ILLEGAL_PARAMETER LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 SSLerr ( SSL_F_READ_STATE_MACHINE , SSL_R_EXCESSIVE_MESSAGE_SIZE ) ; EXPR 13 SSLerr ( SSL_F_READ_STATE_MACHINE , SSL_R_EXCESSIVE_MESSAGE_SIZE ) FUNCTION_CALL 14 SSLerr ( SSL_F_READ_STATE_MACHINE , SSL_R_EXCESSIVE_MESSAGE_SIZE ) CALLEE 15 SSLerr LEAF_NODE 16 SSLerr LEAF_NODE 15 ( ARGUMENT 15 SSL_F_READ_STATE_MACHINE FIELD 16 SSL_F_READ_STATE_MACHINE LEAF_NODE 17 SSL_F_READ_STATE_MACHINE LEAF_NODE 15 , ARGUMENT 15 SSL_R_EXCESSIVE_MESSAGE_SIZE FIELD 16 SSL_R_EXCESSIVE_MESSAGE_SIZE LEAF_NODE 17 SSL_R_EXCESSIVE_MESSAGE_SIZE LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 return SUB_STATE_ERROR ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 SUB_STATE_ERROR EXPR 14 SUB_STATE_ERROR FIELD 15 SUB_STATE_ERROR LEAF_NODE 16 SUB_STATE_ERROR LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 st -> read_state = READ_STATE_BODY ; EXPR 10 st -> read_state = READ_STATE_BODY ASSIGN 11 st -> read_state = READ_STATE_BODY LVAL 12 st -> read_state FIELD 13 st -> read_state LEAF_NODE 14 st LEAF_NODE 14 -> LEAF_NODE 14 read_state ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 READ_STATE_BODY FIELD 13 READ_STATE_BODY LEAF_NODE 14 READ_STATE_BODY LEAF_NODE 10 ; LABEL 9 case READ_STATE_BODY : LEAF_NODE 10 case LEAF_NODE 10 READ_STATE_BODY LEAF_NODE 10 : SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! SSL_IS_DTLS ( s ) EXPR 11 ! SSL_IS_DTLS ( s ) UNARY_EXPR 12 ! SSL_IS_DTLS ( s ) UNARY_OPERATOR 13 ! LEAF_NODE 14 ! FUNCTION_CALL 13 SSL_IS_DTLS ( s ) CALLEE 14 SSL_IS_DTLS LEAF_NODE 15 SSL_IS_DTLS LEAF_NODE 14 ( ARGUMENT 14 s FIELD 15 s LEAF_NODE 16 s LEAF_NODE 14 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ret = tls_get_message_body ( s , & len ) ; EXPR 13 ret = tls_get_message_body ( s , & len ) ASSIGN 14 ret = tls_get_message_body ( s , & len ) LVAL 15 ret FIELD 16 ret LEAF_NODE 17 ret ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 tls_get_message_body ( s , & len ) FUNCTION_CALL 16 tls_get_message_body ( s , & len ) CALLEE 17 tls_get_message_body LEAF_NODE 18 tls_get_message_body LEAF_NODE 17 ( ARGUMENT 17 s FIELD 18 s LEAF_NODE 19 s LEAF_NODE 17 , ARGUMENT 17 & len UNARY_EXPR 18 & len UNARY_OPERATOR 19 & LEAF_NODE 20 & FIELD 19 len LEAF_NODE 20 len LEAF_NODE 17 ) LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 ret == 0 EXPR 14 ret == 0 FIELD 15 ret LEAF_NODE 16 ret EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 JUMP_STATEMENT 15 return SUB_STATE_ERROR ; KEYWORD 16 return LEAF_NODE 17 return DESTINATION 16 SUB_STATE_ERROR EXPR 17 SUB_STATE_ERROR FIELD 18 SUB_STATE_ERROR LEAF_NODE 19 SUB_STATE_ERROR LEAF_NODE 16 ; LEAF_NODE 14 } LEAF_NODE 11 } EXPR_STATEMENT 9 s -> first_packet = 0 ; EXPR 10 s -> first_packet = 0 ASSIGN 11 s -> first_packet = 0 LVAL 12 s -> first_packet FIELD 13 s -> first_packet LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 first_packet ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! PACKET_buf_init ( & pkt , s -> init_msg , len ) EXPR 11 ! PACKET_buf_init ( & pkt , s -> init_msg , len ) UNARY_EXPR 12 ! PACKET_buf_init ( & pkt , s -> init_msg , len ) UNARY_OPERATOR 13 ! LEAF_NODE 14 ! FUNCTION_CALL 13 PACKET_buf_init ( & pkt , s -> init_msg , len ) CALLEE 14 PACKET_buf_init LEAF_NODE 15 PACKET_buf_init LEAF_NODE 14 ( ARGUMENT 14 & pkt UNARY_EXPR 15 & pkt UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 pkt LEAF_NODE 17 pkt LEAF_NODE 14 , ARGUMENT 14 s -> init_msg FIELD 15 s -> init_msg LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 init_msg LEAF_NODE 14 , ARGUMENT 14 len FIELD 15 len LEAF_NODE 16 len LEAF_NODE 14 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_INTERNAL_ERROR ) ; EXPR 13 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_INTERNAL_ERROR ) FUNCTION_CALL 14 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_INTERNAL_ERROR ) CALLEE 15 ssl3_send_alert LEAF_NODE 16 ssl3_send_alert LEAF_NODE 15 ( ARGUMENT 15 s FIELD 16 s LEAF_NODE 17 s LEAF_NODE 15 , ARGUMENT 15 SSL3_AL_FATAL FIELD 16 SSL3_AL_FATAL LEAF_NODE 17 SSL3_AL_FATAL LEAF_NODE 15 , ARGUMENT 15 SSL_AD_INTERNAL_ERROR FIELD 16 SSL_AD_INTERNAL_ERROR LEAF_NODE 17 SSL_AD_INTERNAL_ERROR LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 SSLerr ( SSL_F_READ_STATE_MACHINE , ERR_R_INTERNAL_ERROR ) ; EXPR 13 SSLerr ( SSL_F_READ_STATE_MACHINE , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 14 SSLerr ( SSL_F_READ_STATE_MACHINE , ERR_R_INTERNAL_ERROR ) CALLEE 15 SSLerr LEAF_NODE 16 SSLerr LEAF_NODE 15 ( ARGUMENT 15 SSL_F_READ_STATE_MACHINE FIELD 16 SSL_F_READ_STATE_MACHINE LEAF_NODE 17 SSL_F_READ_STATE_MACHINE LEAF_NODE 15 , ARGUMENT 15 ERR_R_INTERNAL_ERROR FIELD 16 ERR_R_INTERNAL_ERROR LEAF_NODE 17 ERR_R_INTERNAL_ERROR LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 return SUB_STATE_ERROR ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 SUB_STATE_ERROR EXPR 14 SUB_STATE_ERROR FIELD 15 SUB_STATE_ERROR LEAF_NODE 16 SUB_STATE_ERROR LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 ret = process_message ( s , & pkt ) ; EXPR 10 ret = process_message ( s , & pkt ) ASSIGN 11 ret = process_message ( s , & pkt ) LVAL 12 ret FIELD 13 ret LEAF_NODE 14 ret ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 process_message ( s , & pkt ) FUNCTION_CALL 13 process_message ( s , & pkt ) CALLEE 14 process_message LEAF_NODE 15 process_message LEAF_NODE 14 ( ARGUMENT 14 s FIELD 15 s LEAF_NODE 16 s LEAF_NODE 14 , ARGUMENT 14 & pkt UNARY_EXPR 15 & pkt UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 pkt LEAF_NODE 17 pkt LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 s -> init_num = 0 ; EXPR 10 s -> init_num = 0 ASSIGN 11 s -> init_num = 0 LVAL 12 s -> init_num FIELD 13 s -> init_num LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 init_num ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ret == MSG_PROCESS_ERROR EXPR 11 ret == MSG_PROCESS_ERROR FIELD 12 ret LEAF_NODE 13 ret EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 MSG_PROCESS_ERROR LEAF_NODE 13 MSG_PROCESS_ERROR LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 JUMP_STATEMENT 12 return SUB_STATE_ERROR ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 SUB_STATE_ERROR EXPR 14 SUB_STATE_ERROR FIELD 15 SUB_STATE_ERROR LEAF_NODE 16 SUB_STATE_ERROR LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ret == MSG_PROCESS_FINISHED_READING EXPR 11 ret == MSG_PROCESS_FINISHED_READING FIELD 12 ret LEAF_NODE 13 ret EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 MSG_PROCESS_FINISHED_READING LEAF_NODE 13 MSG_PROCESS_FINISHED_READING LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 SSL_IS_DTLS ( s ) EXPR 14 SSL_IS_DTLS ( s ) FUNCTION_CALL 15 SSL_IS_DTLS ( s ) CALLEE 16 SSL_IS_DTLS LEAF_NODE 17 SSL_IS_DTLS LEAF_NODE 16 ( ARGUMENT 16 s FIELD 17 s LEAF_NODE 18 s LEAF_NODE 16 ) LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 EXPR_STATEMENT 15 dtls1_stop_timer ( s ) ; EXPR 16 dtls1_stop_timer ( s ) FUNCTION_CALL 17 dtls1_stop_timer ( s ) CALLEE 18 dtls1_stop_timer LEAF_NODE 19 dtls1_stop_timer LEAF_NODE 18 ( ARGUMENT 18 s FIELD 19 s LEAF_NODE 20 s LEAF_NODE 18 ) LEAF_NODE 16 ; LEAF_NODE 14 } JUMP_STATEMENT 12 return SUB_STATE_FINISHED ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 SUB_STATE_FINISHED EXPR 14 SUB_STATE_FINISHED FIELD 15 SUB_STATE_FINISHED LEAF_NODE 16 SUB_STATE_FINISHED LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ret == MSG_PROCESS_CONTINUE_PROCESSING EXPR 11 ret == MSG_PROCESS_CONTINUE_PROCESSING FIELD 12 ret LEAF_NODE 13 ret EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 MSG_PROCESS_CONTINUE_PROCESSING LEAF_NODE 13 MSG_PROCESS_CONTINUE_PROCESSING LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 st -> read_state = READ_STATE_POST_PROCESS ; EXPR 13 st -> read_state = READ_STATE_POST_PROCESS ASSIGN 14 st -> read_state = READ_STATE_POST_PROCESS LVAL 15 st -> read_state FIELD 16 st -> read_state LEAF_NODE 17 st LEAF_NODE 17 -> LEAF_NODE 17 read_state ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 READ_STATE_POST_PROCESS FIELD 16 READ_STATE_POST_PROCESS LEAF_NODE 17 READ_STATE_POST_PROCESS LEAF_NODE 13 ; EXPR_STATEMENT 12 st -> read_state_work = WORK_MORE_A ; EXPR 13 st -> read_state_work = WORK_MORE_A ASSIGN 14 st -> read_state_work = WORK_MORE_A LVAL 15 st -> read_state_work FIELD 16 st -> read_state_work LEAF_NODE 17 st LEAF_NODE 17 -> LEAF_NODE 17 read_state_work ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 WORK_MORE_A FIELD 16 WORK_MORE_A LEAF_NODE 17 WORK_MORE_A LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 else LEAF_NODE 11 else STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 st -> read_state = READ_STATE_HEADER ; EXPR 13 st -> read_state = READ_STATE_HEADER ASSIGN 14 st -> read_state = READ_STATE_HEADER LVAL 15 st -> read_state FIELD 16 st -> read_state LEAF_NODE 17 st LEAF_NODE 17 -> LEAF_NODE 17 read_state ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 READ_STATE_HEADER FIELD 16 READ_STATE_HEADER LEAF_NODE 17 READ_STATE_HEADER LEAF_NODE 13 ; LEAF_NODE 11 } JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case READ_STATE_POST_PROCESS : LEAF_NODE 10 case LEAF_NODE 10 READ_STATE_POST_PROCESS LEAF_NODE 10 : EXPR_STATEMENT 9 st -> read_state_work = post_process_message ( s , st -> read_state_work ) ; EXPR 10 st -> read_state_work = post_process_message ( s , st -> read_state_work ) ASSIGN 11 st -> read_state_work = post_process_message ( s , st -> read_state_work ) LVAL 12 st -> read_state_work FIELD 13 st -> read_state_work LEAF_NODE 14 st LEAF_NODE 14 -> LEAF_NODE 14 read_state_work ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 post_process_message ( s , st -> read_state_work ) FUNCTION_CALL 13 post_process_message ( s , st -> read_state_work ) CALLEE 14 post_process_message LEAF_NODE 15 post_process_message LEAF_NODE 14 ( ARGUMENT 14 s FIELD 15 s LEAF_NODE 16 s LEAF_NODE 14 , ARGUMENT 14 st -> read_state_work FIELD 15 st -> read_state_work LEAF_NODE 16 st LEAF_NODE 16 -> LEAF_NODE 16 read_state_work LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 switch LEAF_NODE 11 switch LEAF_NODE 10 ( CONDITION 10 st -> read_state_work EXPR 11 st -> read_state_work FIELD 12 st -> read_state_work LEAF_NODE 13 st LEAF_NODE 13 -> LEAF_NODE 13 read_state_work LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 LABEL 12 default : LEAF_NODE 13 default LEAF_NODE 13 : JUMP_STATEMENT 12 return SUB_STATE_ERROR ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 SUB_STATE_ERROR EXPR 14 SUB_STATE_ERROR FIELD 15 SUB_STATE_ERROR LEAF_NODE 16 SUB_STATE_ERROR LEAF_NODE 13 ; LABEL 12 case WORK_FINISHED_CONTINUE : LEAF_NODE 13 case LEAF_NODE 13 WORK_FINISHED_CONTINUE LEAF_NODE 13 : EXPR_STATEMENT 12 st -> read_state = READ_STATE_HEADER ; EXPR 13 st -> read_state = READ_STATE_HEADER ASSIGN 14 st -> read_state = READ_STATE_HEADER LVAL 15 st -> read_state FIELD 16 st -> read_state LEAF_NODE 17 st LEAF_NODE 17 -> LEAF_NODE 17 read_state ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 READ_STATE_HEADER FIELD 16 READ_STATE_HEADER LEAF_NODE 17 READ_STATE_HEADER LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LABEL 12 case WORK_FINISHED_STOP : LEAF_NODE 13 case LEAF_NODE 13 WORK_FINISHED_STOP LEAF_NODE 13 : SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 SSL_IS_DTLS ( s ) EXPR 14 SSL_IS_DTLS ( s ) FUNCTION_CALL 15 SSL_IS_DTLS ( s ) CALLEE 16 SSL_IS_DTLS LEAF_NODE 17 SSL_IS_DTLS LEAF_NODE 16 ( ARGUMENT 16 s FIELD 17 s LEAF_NODE 18 s LEAF_NODE 16 ) LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 EXPR_STATEMENT 15 dtls1_stop_timer ( s ) ; EXPR 16 dtls1_stop_timer ( s ) FUNCTION_CALL 17 dtls1_stop_timer ( s ) CALLEE 18 dtls1_stop_timer LEAF_NODE 19 dtls1_stop_timer LEAF_NODE 18 ( ARGUMENT 18 s FIELD 19 s LEAF_NODE 20 s LEAF_NODE 18 ) LEAF_NODE 16 ; LEAF_NODE 14 } JUMP_STATEMENT 12 return SUB_STATE_FINISHED ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 SUB_STATE_FINISHED EXPR 14 SUB_STATE_FINISHED FIELD 15 SUB_STATE_FINISHED LEAF_NODE 16 SUB_STATE_FINISHED LEAF_NODE 13 ; LEAF_NODE 11 } JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 default : LEAF_NODE 10 default LEAF_NODE 10 : EXPR_STATEMENT 9 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_INTERNAL_ERROR ) ; EXPR 10 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_INTERNAL_ERROR ) FUNCTION_CALL 11 ssl3_send_alert ( s , SSL3_AL_FATAL , SSL_AD_INTERNAL_ERROR ) CALLEE 12 ssl3_send_alert LEAF_NODE 13 ssl3_send_alert LEAF_NODE 12 ( ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 , ARGUMENT 12 SSL3_AL_FATAL FIELD 13 SSL3_AL_FATAL LEAF_NODE 14 SSL3_AL_FATAL LEAF_NODE 12 , ARGUMENT 12 SSL_AD_INTERNAL_ERROR FIELD 13 SSL_AD_INTERNAL_ERROR LEAF_NODE 14 SSL_AD_INTERNAL_ERROR LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 SSLerr ( SSL_F_READ_STATE_MACHINE , ERR_R_INTERNAL_ERROR ) ; EXPR 10 SSLerr ( SSL_F_READ_STATE_MACHINE , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 11 SSLerr ( SSL_F_READ_STATE_MACHINE , ERR_R_INTERNAL_ERROR ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_READ_STATE_MACHINE FIELD 13 SSL_F_READ_STATE_MACHINE LEAF_NODE 14 SSL_F_READ_STATE_MACHINE LEAF_NODE 12 , ARGUMENT 12 ERR_R_INTERNAL_ERROR FIELD 13 ERR_R_INTERNAL_ERROR LEAF_NODE 14 ERR_R_INTERNAL_ERROR LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ossl_statem_set_error ( s ) ; EXPR 10 ossl_statem_set_error ( s ) FUNCTION_CALL 11 ossl_statem_set_error ( s ) CALLEE 12 ossl_statem_set_error LEAF_NODE 13 ossl_statem_set_error LEAF_NODE 12 ( ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return SUB_STATE_ERROR ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 SUB_STATE_ERROR EXPR 11 SUB_STATE_ERROR FIELD 12 SUB_STATE_ERROR LEAF_NODE 13 SUB_STATE_ERROR LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } LEAF_NODE 2 }", "idx": 144, "project": "openssl_ast_vul_function_test_14", "target": 1}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 parse_tagging LEAF_NODE 3 parse_tagging PARAMETER_LIST 2 ( const char * vstart , int vlen , int * ptag , int * pclass ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * vstart TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 vstart LEAF_NODE 5 vstart LEAF_NODE 3 , PARAMETER_DECL 3 int vlen TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 vlen LEAF_NODE 5 vlen LEAF_NODE 3 , PARAMETER_DECL 3 int * ptag TYPE 4 int * TYPE_NAME 5 int LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 ptag LEAF_NODE 5 ptag LEAF_NODE 3 , PARAMETER_DECL 3 int * pclass TYPE 4 int * TYPE_NAME 5 int LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 pclass LEAF_NODE 5 pclass LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char [ 2 ] erch ; VAR_DECL 4 char [ 2 ] erch TYPE 5 char [ 2 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 2 ] LEAF_NODE 7 [ FIELD 7 2 LEAF_NODE 8 2 LEAF_NODE 7 ] NAME 5 erch LEAF_NODE 6 erch LEAF_NODE 4 ; SIMPLE_DECL 3 long tag_num ; VAR_DECL 4 long tag_num TYPE 5 long TYPE_NAME 6 long LEAF_NODE 7 long NAME 5 tag_num LEAF_NODE 6 tag_num LEAF_NODE 4 ; SIMPLE_DECL 3 char * eptr ; VAR_DECL 4 char * eptr TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 eptr LEAF_NODE 6 eptr LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! vstart EXPR 5 ! vstart UNARY_EXPR 6 ! vstart UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 vstart LEAF_NODE 8 vstart LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; EXPR_STATEMENT 3 tag_num = strtoul ( vstart , & eptr , 10 ) ; EXPR 4 tag_num = strtoul ( vstart , & eptr , 10 ) ASSIGN 5 tag_num = strtoul ( vstart , & eptr , 10 ) LVAL 6 tag_num FIELD 7 tag_num LEAF_NODE 8 tag_num ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 strtoul ( vstart , & eptr , 10 ) FUNCTION_CALL 7 strtoul ( vstart , & eptr , 10 ) CALLEE 8 strtoul LEAF_NODE 9 strtoul LEAF_NODE 8 ( ARGUMENT 8 vstart FIELD 9 vstart LEAF_NODE 10 vstart LEAF_NODE 8 , ARGUMENT 8 & eptr UNARY_EXPR 9 & eptr UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 eptr LEAF_NODE 11 eptr LEAF_NODE 8 , ARGUMENT 8 10 FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 eptr && * eptr && ( eptr > vstart + vlen ) EXPR 5 eptr && * eptr && ( eptr > vstart + vlen ) AND 6 eptr && * eptr && ( eptr > vstart + vlen ) EXPR 7 eptr FIELD 8 eptr LEAF_NODE 9 eptr LEAF_NODE 7 && EXPR 7 * eptr && ( eptr > vstart + vlen ) AND 8 * eptr && ( eptr > vstart + vlen ) EXPR 9 * eptr UNARY_EXPR 10 * eptr UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 eptr LEAF_NODE 12 eptr LEAF_NODE 9 && EXPR 9 ( eptr > vstart + vlen ) LEAF_NODE 10 ( FIELD 10 eptr LEAF_NODE 11 eptr REL_OPERATOR 10 > LEAF_NODE 11 > FIELD 10 vstart LEAF_NODE 11 vstart LEAF_NODE 10 + FIELD 10 vlen LEAF_NODE 11 vlen LEAF_NODE 10 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 tag_num < 0 EXPR 5 tag_num < 0 FIELD 6 tag_num LEAF_NODE 7 tag_num REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASN1err ( ASN1_F_PARSE_TAGGING , ASN1_R_INVALID_NUMBER ) ; EXPR 7 ASN1err ( ASN1_F_PARSE_TAGGING , ASN1_R_INVALID_NUMBER ) FUNCTION_CALL 8 ASN1err ( ASN1_F_PARSE_TAGGING , ASN1_R_INVALID_NUMBER ) CALLEE 9 ASN1err LEAF_NODE 10 ASN1err LEAF_NODE 9 ( ARGUMENT 9 ASN1_F_PARSE_TAGGING FIELD 10 ASN1_F_PARSE_TAGGING LEAF_NODE 11 ASN1_F_PARSE_TAGGING LEAF_NODE 9 , ARGUMENT 9 ASN1_R_INVALID_NUMBER FIELD 10 ASN1_R_INVALID_NUMBER LEAF_NODE 11 ASN1_R_INVALID_NUMBER LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 * ptag = tag_num ; EXPR 4 * ptag = tag_num ASSIGN 5 * ptag = tag_num LVAL 6 * ptag UNARY_EXPR 7 * ptag UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 ptag LEAF_NODE 9 ptag ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 tag_num FIELD 7 tag_num LEAF_NODE 8 tag_num LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 eptr EXPR 5 eptr FIELD 6 eptr LEAF_NODE 7 eptr LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 vlen -= eptr - vstart ; EXPR 6 vlen -= eptr - vstart ASSIGN 7 vlen -= eptr - vstart LVAL 8 vlen FIELD 9 vlen LEAF_NODE 10 vlen ASSIGN_OP 8 -= LEAF_NODE 9 -= RVAL 8 eptr - vstart FIELD 9 eptr LEAF_NODE 10 eptr LEAF_NODE 9 - FIELD 9 vstart LEAF_NODE 10 vstart LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 EXPR_STATEMENT 5 vlen = 0 ; EXPR 6 vlen = 0 ASSIGN 7 vlen = 0 LVAL 8 vlen FIELD 9 vlen LEAF_NODE 10 vlen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 vlen EXPR 5 vlen FIELD 6 vlen LEAF_NODE 7 vlen LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 switch LEAF_NODE 8 switch LEAF_NODE 7 ( CONDITION 7 * eptr EXPR 8 * eptr UNARY_EXPR 9 * eptr UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 eptr LEAF_NODE 11 eptr LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 LEAF_NODE 9 case LEAF_NODE 9 'U' LEAF_NODE 9 : EXPR_STATEMENT 9 * pclass = V_ASN1_UNIVERSAL ; EXPR 10 * pclass = V_ASN1_UNIVERSAL ASSIGN 11 * pclass = V_ASN1_UNIVERSAL LVAL 12 * pclass UNARY_EXPR 13 * pclass UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 pclass LEAF_NODE 15 pclass ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 V_ASN1_UNIVERSAL FIELD 13 V_ASN1_UNIVERSAL LEAF_NODE 14 V_ASN1_UNIVERSAL LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 9 case LEAF_NODE 9 'A' LEAF_NODE 9 : EXPR_STATEMENT 9 * pclass = V_ASN1_APPLICATION ; EXPR 10 * pclass = V_ASN1_APPLICATION ASSIGN 11 * pclass = V_ASN1_APPLICATION LVAL 12 * pclass UNARY_EXPR 13 * pclass UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 pclass LEAF_NODE 15 pclass ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 V_ASN1_APPLICATION FIELD 13 V_ASN1_APPLICATION LEAF_NODE 14 V_ASN1_APPLICATION LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 9 case LEAF_NODE 9 'P' LEAF_NODE 9 : EXPR_STATEMENT 9 * pclass = V_ASN1_PRIVATE ; EXPR 10 * pclass = V_ASN1_PRIVATE ASSIGN 11 * pclass = V_ASN1_PRIVATE LVAL 12 * pclass UNARY_EXPR 13 * pclass UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 pclass LEAF_NODE 15 pclass ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 V_ASN1_PRIVATE FIELD 13 V_ASN1_PRIVATE LEAF_NODE 14 V_ASN1_PRIVATE LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 9 case LEAF_NODE 9 'C' LEAF_NODE 9 : EXPR_STATEMENT 9 * pclass = V_ASN1_CONTEXT_SPECIFIC ; EXPR 10 * pclass = V_ASN1_CONTEXT_SPECIFIC ASSIGN 11 * pclass = V_ASN1_CONTEXT_SPECIFIC LVAL 12 * pclass UNARY_EXPR 13 * pclass UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 pclass LEAF_NODE 15 pclass ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 V_ASN1_CONTEXT_SPECIFIC FIELD 13 V_ASN1_CONTEXT_SPECIFIC LEAF_NODE 14 V_ASN1_CONTEXT_SPECIFIC LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 default : LEAF_NODE 10 default LEAF_NODE 10 : EXPR_STATEMENT 9 erch [ 0 ] = * eptr ; EXPR 10 erch [ 0 ] = * eptr ASSIGN 11 erch [ 0 ] = * eptr LVAL 12 erch [ 0 ] FIELD 13 erch [ 0 ] LEAF_NODE 14 erch LEAF_NODE 14 [ EXPR 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 * eptr UNARY_EXPR 13 * eptr UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 eptr LEAF_NODE 15 eptr LEAF_NODE 10 ; EXPR_STATEMENT 9 erch [ 1 ] = 0 ; EXPR 10 erch [ 1 ] = 0 ASSIGN 11 erch [ 1 ] = 0 LVAL 12 erch [ 1 ] FIELD 13 erch [ 1 ] LEAF_NODE 14 erch LEAF_NODE 14 [ EXPR 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 ASN1err ( ASN1_F_PARSE_TAGGING , ASN1_R_INVALID_MODIFIER ) ; EXPR 10 ASN1err ( ASN1_F_PARSE_TAGGING , ASN1_R_INVALID_MODIFIER ) FUNCTION_CALL 11 ASN1err ( ASN1_F_PARSE_TAGGING , ASN1_R_INVALID_MODIFIER ) CALLEE 12 ASN1err LEAF_NODE 13 ASN1err LEAF_NODE 12 ( ARGUMENT 12 ASN1_F_PARSE_TAGGING FIELD 13 ASN1_F_PARSE_TAGGING LEAF_NODE 14 ASN1_F_PARSE_TAGGING LEAF_NODE 12 , ARGUMENT 12 ASN1_R_INVALID_MODIFIER FIELD 13 ASN1_R_INVALID_MODIFIER LEAF_NODE 14 ASN1_R_INVALID_MODIFIER LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ERR_add_error_data ( 2 , \"Char=\" , erch ) ; EXPR 10 ERR_add_error_data ( 2 , \"Char=\" , erch ) FUNCTION_CALL 11 ERR_add_error_data ( 2 , \"Char=\" , erch ) CALLEE 12 ERR_add_error_data LEAF_NODE 13 ERR_add_error_data LEAF_NODE 12 ( ARGUMENT 12 2 FIELD 13 2 LEAF_NODE 14 2 LEAF_NODE 12 , ARGUMENT 12 \"Char=\" FIELD 13 \"Char=\" LEAF_NODE 14 \"Char=\" LEAF_NODE 12 , ARGUMENT 12 erch FIELD 13 erch LEAF_NODE 14 erch LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return 0 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 0 EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 EXPR_STATEMENT 5 * pclass = V_ASN1_CONTEXT_SPECIFIC ; EXPR 6 * pclass = V_ASN1_CONTEXT_SPECIFIC ASSIGN 7 * pclass = V_ASN1_CONTEXT_SPECIFIC LVAL 8 * pclass UNARY_EXPR 9 * pclass UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 pclass LEAF_NODE 11 pclass ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 V_ASN1_CONTEXT_SPECIFIC FIELD 9 V_ASN1_CONTEXT_SPECIFIC LEAF_NODE 10 V_ASN1_CONTEXT_SPECIFIC LEAF_NODE 6 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 145, "project": "openssl_ast_normal_function_test_51", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 asn1_print_info LEAF_NODE 3 asn1_print_info PARAMETER_LIST 2 ( BIO * bp , int tag , int xclass , int constructed , int indent ) LEAF_NODE 3 ( PARAMETER_DECL 3 BIO * bp TYPE 4 BIO * TYPE_NAME 5 BIO LEAF_NODE 6 BIO POINTER 5 * LEAF_NODE 6 * NAME 4 bp LEAF_NODE 5 bp LEAF_NODE 3 , PARAMETER_DECL 3 int tag TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 tag LEAF_NODE 5 tag LEAF_NODE 3 , PARAMETER_DECL 3 int xclass TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 xclass LEAF_NODE 5 xclass LEAF_NODE 3 , PARAMETER_DECL 3 int constructed TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 constructed LEAF_NODE 5 constructed LEAF_NODE 3 , PARAMETER_DECL 3 int indent TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 indent LEAF_NODE 5 indent LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 static SIMPLE_DECL 3 const char [ ] fmt ; fmt = \"%-18s\" ; VAR_DECL 4 const char [ ] fmt ; fmt = \"%-18s\" TYPE 5 const char [ ] TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char TYPE_SUFFIX 6 [ ] LEAF_NODE 7 [ LEAF_NODE 7 ] NAME 5 fmt LEAF_NODE 6 fmt LEAF_NODE 5 ; INIT 5 fmt = \"%-18s\" ASSIGN 6 fmt = \"%-18s\" LVAL 7 fmt NAME 8 fmt LEAF_NODE 9 fmt ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 \"%-18s\" FIELD 8 \"%-18s\" LEAF_NODE 9 \"%-18s\" LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 128 ] str ; VAR_DECL 4 char [ 128 ] str TYPE 5 char [ 128 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 128 ] LEAF_NODE 7 [ FIELD 7 128 LEAF_NODE 8 128 LEAF_NODE 7 ] NAME 5 str LEAF_NODE 6 str LEAF_NODE 4 ; SIMPLE_DECL 3 const char * p ; VAR_DECL 4 const char * p TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 constructed & V_ASN1_CONSTRUCTED EXPR 5 constructed & V_ASN1_CONSTRUCTED FIELD 6 constructed LEAF_NODE 7 constructed LEAF_NODE 6 & FIELD 6 V_ASN1_CONSTRUCTED LEAF_NODE 7 V_ASN1_CONSTRUCTED LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 p = \"cons: \" ; EXPR 6 p = \"cons: \" ASSIGN 7 p = \"cons: \" LVAL 8 p FIELD 9 p LEAF_NODE 10 p ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"cons: \" FIELD 9 \"cons: \" LEAF_NODE 10 \"cons: \" LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 EXPR_STATEMENT 5 p = \"prim: \" ; EXPR 6 p = \"prim: \" ASSIGN 7 p = \"prim: \" LVAL 8 p FIELD 9 p LEAF_NODE 10 p ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"prim: \" FIELD 9 \"prim: \" LEAF_NODE 10 \"prim: \" LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 BIO_write ( bp , p , 6 ) < 6 EXPR 5 BIO_write ( bp , p , 6 ) < 6 FUNCTION_CALL 6 BIO_write ( bp , p , 6 ) CALLEE 7 BIO_write LEAF_NODE 8 BIO_write LEAF_NODE 7 ( ARGUMENT 7 bp FIELD 8 bp LEAF_NODE 9 bp LEAF_NODE 7 , ARGUMENT 7 p FIELD 8 p LEAF_NODE 9 p LEAF_NODE 7 , ARGUMENT 7 6 FIELD 8 6 LEAF_NODE 9 6 LEAF_NODE 7 ) REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 6 LEAF_NODE 7 6 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto err ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 err LEAF_NODE 7 err LEAF_NODE 6 ; EXPR_STATEMENT 3 BIO_indent ( bp , indent , 128 ) ; EXPR 4 BIO_indent ( bp , indent , 128 ) FUNCTION_CALL 5 BIO_indent ( bp , indent , 128 ) CALLEE 6 BIO_indent LEAF_NODE 7 BIO_indent LEAF_NODE 6 ( ARGUMENT 6 bp FIELD 7 bp LEAF_NODE 8 bp LEAF_NODE 6 , ARGUMENT 6 indent FIELD 7 indent LEAF_NODE 8 indent LEAF_NODE 6 , ARGUMENT 6 128 FIELD 7 128 LEAF_NODE 8 128 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 p = str ; EXPR 4 p = str ASSIGN 5 p = str LVAL 6 p FIELD 7 p LEAF_NODE 8 p ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 str FIELD 7 str LEAF_NODE 8 str LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( xclass & V_ASN1_PRIVATE ) == V_ASN1_PRIVATE EXPR 5 ( xclass & V_ASN1_PRIVATE ) == V_ASN1_PRIVATE LEAF_NODE 6 ( FIELD 6 xclass LEAF_NODE 7 xclass LEAF_NODE 6 & FIELD 6 V_ASN1_PRIVATE LEAF_NODE 7 V_ASN1_PRIVATE LEAF_NODE 6 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 V_ASN1_PRIVATE LEAF_NODE 7 V_ASN1_PRIVATE LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 BIO_snprintf ( str , sizeof ( str ) , \"priv [ %d ] \" , tag ) ; EXPR 6 BIO_snprintf ( str , sizeof ( str ) , \"priv [ %d ] \" , tag ) FUNCTION_CALL 7 BIO_snprintf ( str , sizeof ( str ) , \"priv [ %d ] \" , tag ) CALLEE 8 BIO_snprintf LEAF_NODE 9 BIO_snprintf LEAF_NODE 8 ( ARGUMENT 8 str FIELD 9 str LEAF_NODE 10 str LEAF_NODE 8 , ARGUMENT 8 sizeof ( str ) FUNCTION_CALL 9 sizeof ( str ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 str FIELD 11 str LEAF_NODE 12 str LEAF_NODE 10 ) LEAF_NODE 8 , ARGUMENT 8 \"priv [ %d ] \" FIELD 9 \"priv [ %d ] \" LEAF_NODE 10 \"priv [ %d ] \" LEAF_NODE 8 , ARGUMENT 8 tag FIELD 9 tag LEAF_NODE 10 tag LEAF_NODE 8 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ( xclass & V_ASN1_CONTEXT_SPECIFIC ) == V_ASN1_CONTEXT_SPECIFIC EXPR 7 ( xclass & V_ASN1_CONTEXT_SPECIFIC ) == V_ASN1_CONTEXT_SPECIFIC LEAF_NODE 8 ( FIELD 8 xclass LEAF_NODE 9 xclass LEAF_NODE 8 & FIELD 8 V_ASN1_CONTEXT_SPECIFIC LEAF_NODE 9 V_ASN1_CONTEXT_SPECIFIC LEAF_NODE 8 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 V_ASN1_CONTEXT_SPECIFIC LEAF_NODE 9 V_ASN1_CONTEXT_SPECIFIC LEAF_NODE 6 ) STATEMENTS 6 EXPR_STATEMENT 7 BIO_snprintf ( str , sizeof ( str ) , \"cont [ %d ]\" , tag ) ; EXPR 8 BIO_snprintf ( str , sizeof ( str ) , \"cont [ %d ]\" , tag ) FUNCTION_CALL 9 BIO_snprintf ( str , sizeof ( str ) , \"cont [ %d ]\" , tag ) CALLEE 10 BIO_snprintf LEAF_NODE 11 BIO_snprintf LEAF_NODE 10 ( ARGUMENT 10 str FIELD 11 str LEAF_NODE 12 str LEAF_NODE 10 , ARGUMENT 10 sizeof ( str ) FUNCTION_CALL 11 sizeof ( str ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 str FIELD 13 str LEAF_NODE 14 str LEAF_NODE 12 ) LEAF_NODE 10 , ARGUMENT 10 \"cont [ %d ]\" FIELD 11 \"cont [ %d ]\" LEAF_NODE 12 \"cont [ %d ]\" LEAF_NODE 10 , ARGUMENT 10 tag FIELD 11 tag LEAF_NODE 12 tag LEAF_NODE 10 ) LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ( xclass & V_ASN1_APPLICATION ) == V_ASN1_APPLICATION EXPR 7 ( xclass & V_ASN1_APPLICATION ) == V_ASN1_APPLICATION LEAF_NODE 8 ( FIELD 8 xclass LEAF_NODE 9 xclass LEAF_NODE 8 & FIELD 8 V_ASN1_APPLICATION LEAF_NODE 9 V_ASN1_APPLICATION LEAF_NODE 8 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 V_ASN1_APPLICATION LEAF_NODE 9 V_ASN1_APPLICATION LEAF_NODE 6 ) STATEMENTS 6 EXPR_STATEMENT 7 BIO_snprintf ( str , sizeof ( str ) , \"appl [ %d ]\" , tag ) ; EXPR 8 BIO_snprintf ( str , sizeof ( str ) , \"appl [ %d ]\" , tag ) FUNCTION_CALL 9 BIO_snprintf ( str , sizeof ( str ) , \"appl [ %d ]\" , tag ) CALLEE 10 BIO_snprintf LEAF_NODE 11 BIO_snprintf LEAF_NODE 10 ( ARGUMENT 10 str FIELD 11 str LEAF_NODE 12 str LEAF_NODE 10 , ARGUMENT 10 sizeof ( str ) FUNCTION_CALL 11 sizeof ( str ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 str FIELD 13 str LEAF_NODE 14 str LEAF_NODE 12 ) LEAF_NODE 10 , ARGUMENT 10 \"appl [ %d ]\" FIELD 11 \"appl [ %d ]\" LEAF_NODE 12 \"appl [ %d ]\" LEAF_NODE 10 , ARGUMENT 10 tag FIELD 11 tag LEAF_NODE 12 tag LEAF_NODE 10 ) LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 tag > 30 EXPR 7 tag > 30 FIELD 8 tag LEAF_NODE 9 tag REL_OPERATOR 8 > LEAF_NODE 9 > FIELD 8 30 LEAF_NODE 9 30 LEAF_NODE 6 ) STATEMENTS 6 EXPR_STATEMENT 7 BIO_snprintf ( str , sizeof ( str ) , \"<ASN1 %d>\" , tag ) ; EXPR 8 BIO_snprintf ( str , sizeof ( str ) , \"<ASN1 %d>\" , tag ) FUNCTION_CALL 9 BIO_snprintf ( str , sizeof ( str ) , \"<ASN1 %d>\" , tag ) CALLEE 10 BIO_snprintf LEAF_NODE 11 BIO_snprintf LEAF_NODE 10 ( ARGUMENT 10 str FIELD 11 str LEAF_NODE 12 str LEAF_NODE 10 , ARGUMENT 10 sizeof ( str ) FUNCTION_CALL 11 sizeof ( str ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 str FIELD 13 str LEAF_NODE 14 str LEAF_NODE 12 ) LEAF_NODE 10 , ARGUMENT 10 \"<ASN1 %d>\" FIELD 11 \"<ASN1 %d>\" LEAF_NODE 12 \"<ASN1 %d>\" LEAF_NODE 10 , ARGUMENT 10 tag FIELD 11 tag LEAF_NODE 12 tag LEAF_NODE 10 ) LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 EXPR_STATEMENT 5 p = ASN1_tag2str ( tag ) ; EXPR 6 p = ASN1_tag2str ( tag ) ASSIGN 7 p = ASN1_tag2str ( tag ) LVAL 8 p FIELD 9 p LEAF_NODE 10 p ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ASN1_tag2str ( tag ) FUNCTION_CALL 9 ASN1_tag2str ( tag ) CALLEE 10 ASN1_tag2str LEAF_NODE 11 ASN1_tag2str LEAF_NODE 10 ( ARGUMENT 10 tag FIELD 11 tag LEAF_NODE 12 tag LEAF_NODE 10 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 BIO_printf ( bp , fmt , p ) <= 0 EXPR 5 BIO_printf ( bp , fmt , p ) <= 0 FUNCTION_CALL 6 BIO_printf ( bp , fmt , p ) CALLEE 7 BIO_printf LEAF_NODE 8 BIO_printf LEAF_NODE 7 ( ARGUMENT 7 bp FIELD 8 bp LEAF_NODE 9 bp LEAF_NODE 7 , ARGUMENT 7 fmt FIELD 8 fmt LEAF_NODE 9 fmt LEAF_NODE 7 , ARGUMENT 7 p FIELD 8 p LEAF_NODE 9 p LEAF_NODE 7 ) REL_OPERATOR 6 <= LEAF_NODE 7 <= FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto err ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 err LEAF_NODE 7 err LEAF_NODE 6 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LABEL 3 err : LEAF_NODE 4 err LEAF_NODE 4 : JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 146, "project": "openssl_ast_normal_function_test_63", "target": 0}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } ; CLASS_DEF 2 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } CLASS_DEF 3 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } LEAF_NODE 4 struct CLASS_NAME 4 bio_addrinfo_st LEAF_NODE 5 bio_addrinfo_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; SIMPLE_DECL 5 int bai_family ; VAR_DECL 6 int bai_family TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_family LEAF_NODE 8 bai_family LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_socktype ; VAR_DECL 6 int bai_socktype TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_socktype LEAF_NODE 8 bai_socktype LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_protocol ; VAR_DECL 6 int bai_protocol TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_protocol LEAF_NODE 8 bai_protocol LEAF_NODE 6 ; SIMPLE_DECL 5 size_t bai_addrlen ; VAR_DECL 6 size_t bai_addrlen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 bai_addrlen LEAF_NODE 8 bai_addrlen LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr * bai_addr ; VAR_DECL 6 struct sockaddr * bai_addr TYPE 7 struct sockaddr * TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr POINTER 8 * LEAF_NODE 9 * NAME 7 bai_addr LEAF_NODE 8 bai_addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct bio_addrinfo_st * bai_next ; VAR_DECL 6 struct bio_addrinfo_st * bai_next TYPE 7 struct bio_addrinfo_st * TYPE_NAME 8 struct bio_addrinfo_st LEAF_NODE 9 struct LEAF_NODE 9 bio_addrinfo_st POINTER 8 * LEAF_NODE 9 * NAME 7 bai_next LEAF_NODE 8 bai_next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BIO_ADDRINFO ; VAR_DECL 2 struct bio_addrinfo_st BIO_ADDRINFO TYPE 3 struct bio_addrinfo_st TYPE_NAME 4 struct bio_addrinfo_st LEAF_NODE 5 struct LEAF_NODE 5 bio_addrinfo_st NAME 3 BIO_ADDRINFO LEAF_NODE 4 BIO_ADDRINFO LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t socklen_t ; VAR_DECL 2 uint32_t socklen_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 socklen_t LEAF_NODE 4 socklen_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } ; CLASS_DEF 2 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } CLASS_DEF 3 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } LEAF_NODE 4 enum CLASS_NAME 4 BIO_hostserv_priorities LEAF_NODE 5 BIO_hostserv_priorities LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV LEAF_NODE 5 BIO_PARSE_PRIO_HOST LEAF_NODE 5 , LEAF_NODE 5 BIO_PARSE_PRIO_SERV LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } ; CLASS_DEF 2 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } CLASS_DEF 3 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } LEAF_NODE 4 enum CLASS_NAME 4 BIO_lookup_type LEAF_NODE 5 BIO_lookup_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER LEAF_NODE 5 BIO_LOOKUP_CLIENT LEAF_NODE 5 , LEAF_NODE 5 BIO_LOOKUP_SERVER LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 32 ] session_id ; VAR_DECL 2 unsigned char [ 32 ] session_id TYPE 3 unsigned char [ 32 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 32 ] LEAF_NODE 5 [ FIELD 5 32 LEAF_NODE 6 32 LEAF_NODE 5 ] NAME 3 session_id LEAF_NODE 4 session_id LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 48 ] master_secret ; VAR_DECL 2 unsigned char [ 48 ] master_secret TYPE 3 unsigned char [ 48 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 48 ] LEAF_NODE 5 [ FIELD 5 48 LEAF_NODE 6 48 LEAF_NODE 5 ] NAME 3 master_secret LEAF_NODE 4 master_secret LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ SSL3_RANDOM_SIZE ] client_random ; VAR_DECL 2 unsigned char [ SSL3_RANDOM_SIZE ] client_random TYPE 3 unsigned char [ SSL3_RANDOM_SIZE ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ SSL3_RANDOM_SIZE ] LEAF_NODE 5 [ FIELD 5 SSL3_RANDOM_SIZE LEAF_NODE 6 SSL3_RANDOM_SIZE LEAF_NODE 5 ] NAME 3 client_random LEAF_NODE 4 client_random LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ SSL3_RANDOM_SIZE ] server_random ; VAR_DECL 2 unsigned char [ SSL3_RANDOM_SIZE ] server_random TYPE 3 unsigned char [ SSL3_RANDOM_SIZE ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ SSL3_RANDOM_SIZE ] LEAF_NODE 5 [ FIELD 5 SSL3_RANDOM_SIZE LEAF_NODE 6 SSL3_RANDOM_SIZE LEAF_NODE 5 ] NAME 3 server_random LEAF_NODE 4 server_random LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 104 ] key_block ; VAR_DECL 2 unsigned char [ 104 ] key_block TYPE 3 unsigned char [ 104 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 104 ] LEAF_NODE 5 [ FIELD 5 104 LEAF_NODE 6 104 LEAF_NODE 5 ] NAME 3 key_block LEAF_NODE 4 key_block LEAF_NODE 2 ; SIMPLE_DECL 1 EVP_MD_CTX * handshake_md ; VAR_DECL 2 EVP_MD_CTX * handshake_md TYPE 3 EVP_MD_CTX * TYPE_NAME 4 EVP_MD_CTX LEAF_NODE 5 EVP_MD_CTX POINTER 4 * LEAF_NODE 5 * NAME 3 handshake_md LEAF_NODE 4 handshake_md LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } PACKET ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } PACKET TYPE 3 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { const unsigned char * curr ; size_t remaining ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 const unsigned char * curr ; size_t remaining ; SIMPLE_DECL 6 const unsigned char * curr ; VAR_DECL 7 const unsigned char * curr TYPE 8 const unsigned char * TYPE_NAME 9 const unsigned char LEAF_NODE 10 const LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 curr LEAF_NODE 9 curr LEAF_NODE 7 ; SIMPLE_DECL 6 size_t remaining ; VAR_DECL 7 size_t remaining TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 remaining LEAF_NODE 9 remaining LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 PACKET LEAF_NODE 4 PACKET LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_in ; bio_in = NULL ; VAR_DECL 2 BIO * bio_in ; bio_in = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_in LEAF_NODE 4 bio_in LEAF_NODE 3 ; INIT 3 bio_in = NULL ASSIGN 4 bio_in = NULL LVAL 5 bio_in NAME 6 bio_in LEAF_NODE 7 bio_in ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_out ; bio_out = NULL ; VAR_DECL 2 BIO * bio_out ; bio_out = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_out LEAF_NODE 4 bio_out LEAF_NODE 3 ; INIT 3 bio_out = NULL ASSIGN 4 bio_out = NULL LVAL 5 bio_out NAME 6 bio_out LEAF_NODE 7 bio_out ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_flush_stderr LEAF_NODE 3 test_flush_stderr PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return BIO_flush ( bio_err ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 BIO_flush ( bio_err ) EXPR 5 BIO_flush ( bio_err ) FUNCTION_CALL 6 BIO_flush ( bio_err ) CALLEE 7 BIO_flush LEAF_NODE 8 BIO_flush LEAF_NODE 7 ( ARGUMENT 7 bio_err FIELD 8 bio_err LEAF_NODE 9 bio_err LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 147, "project": "openssl_ast_normal_function_test_102", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 enum r_range BASE_CLASSES { OPT_R_ENUM } ; CLASS_DEF 2 enum r_range BASE_CLASSES { OPT_R_ENUM } CLASS_DEF 3 enum r_range BASE_CLASSES { OPT_R_ENUM } LEAF_NODE 4 enum CLASS_NAME 4 r_range LEAF_NODE 5 r_range LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPT_R_ENUM LEAF_NODE 5 OPT_R_ENUM LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 opt_rand LEAF_NODE 3 opt_rand PARAMETER_LIST 2 ( int opt ) LEAF_NODE 3 ( PARAMETER_DECL 3 int opt TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 opt LEAF_NODE 5 opt LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 ( enum r_range ) opt EXPR 5 ( enum r_range ) opt LEAF_NODE 6 ( TYPE_NAME 6 enum r_range LEAF_NODE 7 enum LEAF_NODE 7 r_range LEAF_NODE 6 ) FIELD 6 opt LEAF_NODE 7 opt LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case OPT_R__FIRST : LEAF_NODE 7 case LEAF_NODE 7 OPT_R__FIRST LEAF_NODE 7 : LABEL 6 case OPT_R__LAST : LEAF_NODE 7 case LEAF_NODE 7 OPT_R__LAST LEAF_NODE 7 : JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 case OPT_R_RAND : LEAF_NODE 7 case LEAF_NODE 7 OPT_R_RAND LEAF_NODE 7 : JUMP_STATEMENT 6 return loadfiles ( opt_arg ( ) ) ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 loadfiles ( opt_arg ( ) ) EXPR 8 loadfiles ( opt_arg ( ) ) FUNCTION_CALL 9 loadfiles ( opt_arg ( ) ) CALLEE 10 loadfiles LEAF_NODE 11 loadfiles LEAF_NODE 10 ( ARGUMENT 10 opt_arg ( ) FUNCTION_CALL 11 opt_arg ( ) CALLEE 12 opt_arg LEAF_NODE 13 opt_arg LEAF_NODE 12 ( LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 case OPT_R_WRITERAND : LEAF_NODE 7 case LEAF_NODE 7 OPT_R_WRITERAND LEAF_NODE 7 : EXPR_STATEMENT 6 OPENSSL_free ( save_rand_file ) ; EXPR 7 OPENSSL_free ( save_rand_file ) FUNCTION_CALL 8 OPENSSL_free ( save_rand_file ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 save_rand_file FIELD 10 save_rand_file LEAF_NODE 11 save_rand_file LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 save_rand_file = OPENSSL_strdup ( opt_arg ( ) ) ; EXPR 7 save_rand_file = OPENSSL_strdup ( opt_arg ( ) ) ASSIGN 8 save_rand_file = OPENSSL_strdup ( opt_arg ( ) ) LVAL 9 save_rand_file FIELD 10 save_rand_file LEAF_NODE 11 save_rand_file ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 OPENSSL_strdup ( opt_arg ( ) ) FUNCTION_CALL 10 OPENSSL_strdup ( opt_arg ( ) ) CALLEE 11 OPENSSL_strdup LEAF_NODE 12 OPENSSL_strdup LEAF_NODE 11 ( ARGUMENT 11 opt_arg ( ) FUNCTION_CALL 12 opt_arg ( ) CALLEE 13 opt_arg LEAF_NODE 14 opt_arg LEAF_NODE 13 ( LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 148, "project": "openssl_ast_normal_function_test_71", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 rot19r LEAF_NODE 3 rot19r PARAMETER_LIST 2 ( ARIA_u128 * o , const ARIA_u128 * xor , const ARIA_u128 * z ) LEAF_NODE 3 ( PARAMETER_DECL 3 ARIA_u128 * o TYPE 4 ARIA_u128 * TYPE_NAME 5 ARIA_u128 LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 o LEAF_NODE 5 o LEAF_NODE 3 , PARAMETER_DECL 3 const ARIA_u128 * xor TYPE 4 const ARIA_u128 * TYPE_NAME 5 const ARIA_u128 LEAF_NODE 6 const LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 xor LEAF_NODE 5 xor LEAF_NODE 3 , PARAMETER_DECL 3 const ARIA_u128 * z TYPE 4 const ARIA_u128 * TYPE_NAME 5 const ARIA_u128 LEAF_NODE 6 const LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 z LEAF_NODE 5 z LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 rotnr ( 19 , o , xor , z ) ; EXPR 4 rotnr ( 19 , o , xor , z ) FUNCTION_CALL 5 rotnr ( 19 , o , xor , z ) CALLEE 6 rotnr LEAF_NODE 7 rotnr LEAF_NODE 6 ( ARGUMENT 6 19 FIELD 7 19 LEAF_NODE 8 19 LEAF_NODE 6 , ARGUMENT 6 o FIELD 7 o LEAF_NODE 8 o LEAF_NODE 6 , ARGUMENT 6 xor FIELD 7 xor LEAF_NODE 8 xor LEAF_NODE 6 , ARGUMENT 6 z FIELD 7 z LEAF_NODE 8 z LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 149, "project": "openssl_ast_normal_function_test_9", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_UTCTIME_set_string LEAF_NODE 3 ASN1_UTCTIME_set_string PARAMETER_LIST 2 ( ASN1_UTCTIME * s , const char * str ) LEAF_NODE 3 ( PARAMETER_DECL 3 ASN1_UTCTIME * s TYPE 4 ASN1_UTCTIME * TYPE_NAME 5 ASN1_UTCTIME LEAF_NODE 6 ASN1_UTCTIME POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 const char * str TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 str LEAF_NODE 5 str LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 ASN1_UTCTIME t ; VAR_DECL 4 ASN1_UTCTIME t TYPE 5 ASN1_UTCTIME TYPE_NAME 6 ASN1_UTCTIME LEAF_NODE 7 ASN1_UTCTIME NAME 5 t LEAF_NODE 6 t LEAF_NODE 4 ; EXPR_STATEMENT 3 t . type = V_ASN1_UTCTIME ; EXPR 4 t . type = V_ASN1_UTCTIME ASSIGN 5 t . type = V_ASN1_UTCTIME LVAL 6 t . type FIELD 7 t . type LEAF_NODE 8 t LEAF_NODE 8 . LEAF_NODE 8 type ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 V_ASN1_UTCTIME FIELD 7 V_ASN1_UTCTIME LEAF_NODE 8 V_ASN1_UTCTIME LEAF_NODE 4 ; EXPR_STATEMENT 3 t . length = strlen ( str ) ; EXPR 4 t . length = strlen ( str ) ASSIGN 5 t . length = strlen ( str ) LVAL 6 t . length FIELD 7 t . length LEAF_NODE 8 t LEAF_NODE 8 . LEAF_NODE 8 length ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 strlen ( str ) FUNCTION_CALL 7 strlen ( str ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 str FIELD 9 str LEAF_NODE 10 str LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 t . data = ( unsigned char * ) str ; EXPR 4 t . data = ( unsigned char * ) str ASSIGN 5 t . data = ( unsigned char * ) str LVAL 6 t . data FIELD 7 t . data LEAF_NODE 8 t LEAF_NODE 8 . LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( unsigned char * ) str LEAF_NODE 7 ( TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FIELD 7 str LEAF_NODE 8 str LEAF_NODE 4 ; EXPR_STATEMENT 3 t . flags = 0 ; EXPR 4 t . flags = 0 ASSIGN 5 t . flags = 0 LVAL 6 t . flags FIELD 7 t . flags LEAF_NODE 8 t LEAF_NODE 8 . LEAF_NODE 8 flags ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ASN1_UTCTIME_check ( & t ) EXPR 5 ! ASN1_UTCTIME_check ( & t ) UNARY_EXPR 6 ! ASN1_UTCTIME_check ( & t ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 ASN1_UTCTIME_check ( & t ) CALLEE 8 ASN1_UTCTIME_check LEAF_NODE 9 ASN1_UTCTIME_check LEAF_NODE 8 ( ARGUMENT 8 & t UNARY_EXPR 9 & t UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 t LEAF_NODE 11 t LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s != NULL && ! ASN1_STRING_copy ( s , & t ) EXPR 5 s != NULL && ! ASN1_STRING_copy ( s , & t ) AND 6 s != NULL && ! ASN1_STRING_copy ( s , & t ) EXPR 7 s != NULL FIELD 8 s LEAF_NODE 9 s EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 7 && EXPR 7 ! ASN1_STRING_copy ( s , & t ) UNARY_EXPR 8 ! ASN1_STRING_copy ( s , & t ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 ASN1_STRING_copy ( s , & t ) CALLEE 10 ASN1_STRING_copy LEAF_NODE 11 ASN1_STRING_copy LEAF_NODE 10 ( ARGUMENT 10 s FIELD 11 s LEAF_NODE 12 s LEAF_NODE 10 , ARGUMENT 10 & t UNARY_EXPR 11 & t UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 t LEAF_NODE 13 t LEAF_NODE 10 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 150, "project": "openssl_ast_normal_function_test_47", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 i2a_ASN1_OBJECT LEAF_NODE 3 i2a_ASN1_OBJECT PARAMETER_LIST 2 ( BIO * bp , const ASN1_OBJECT * a ) LEAF_NODE 3 ( PARAMETER_DECL 3 BIO * bp TYPE 4 BIO * TYPE_NAME 5 BIO LEAF_NODE 6 BIO POINTER 5 * LEAF_NODE 6 * NAME 4 bp LEAF_NODE 5 bp LEAF_NODE 3 , PARAMETER_DECL 3 const ASN1_OBJECT * a TYPE 4 const ASN1_OBJECT * TYPE_NAME 5 const ASN1_OBJECT LEAF_NODE 6 const LEAF_NODE 6 ASN1_OBJECT POINTER 5 * LEAF_NODE 6 * NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char [ 80 ] buf , char * p ; p = buf ; INIT_DECL_LIST 4 char [ 80 ] buf , char * p ; p = buf VAR_DECL 5 char [ 80 ] buf TYPE 6 char [ 80 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 80 ] LEAF_NODE 8 [ FIELD 8 80 LEAF_NODE 9 80 LEAF_NODE 8 ] NAME 6 buf LEAF_NODE 7 buf LEAF_NODE 5 , VAR_DECL 5 char * p ; p = buf TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 p LEAF_NODE 7 p LEAF_NODE 6 ; INIT 6 p = buf ASSIGN 7 p = buf LVAL 8 p NAME 9 p LEAF_NODE 10 p ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 buf FIELD 9 buf LEAF_NODE 10 buf LEAF_NODE 4 ; SIMPLE_DECL 3 int i ; VAR_DECL 4 int i TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( a == NULL ) || ( a -> data == NULL ) EXPR 5 ( a == NULL ) || ( a -> data == NULL ) OR 6 ( a == NULL ) || ( a -> data == NULL ) EXPR 7 ( a == NULL ) LEAF_NODE 8 ( FIELD 8 a LEAF_NODE 9 a EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 8 ) LEAF_NODE 7 || EXPR 7 ( a -> data == NULL ) LEAF_NODE 8 ( FIELD 8 a -> data LEAF_NODE 9 a LEAF_NODE 9 -> LEAF_NODE 9 data EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return BIO_write ( bp , \"NULL\" , 4 ) ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 BIO_write ( bp , \"NULL\" , 4 ) EXPR 7 BIO_write ( bp , \"NULL\" , 4 ) FUNCTION_CALL 8 BIO_write ( bp , \"NULL\" , 4 ) CALLEE 9 BIO_write LEAF_NODE 10 BIO_write LEAF_NODE 9 ( ARGUMENT 9 bp FIELD 10 bp LEAF_NODE 11 bp LEAF_NODE 9 , ARGUMENT 9 \"NULL\" FIELD 10 \"NULL\" LEAF_NODE 11 \"NULL\" LEAF_NODE 9 , ARGUMENT 9 4 FIELD 10 4 LEAF_NODE 11 4 LEAF_NODE 9 ) LEAF_NODE 6 ; EXPR_STATEMENT 3 i = i2t_ASN1_OBJECT ( buf , sizeof ( buf ) , a ) ; EXPR 4 i = i2t_ASN1_OBJECT ( buf , sizeof ( buf ) , a ) ASSIGN 5 i = i2t_ASN1_OBJECT ( buf , sizeof ( buf ) , a ) LVAL 6 i FIELD 7 i LEAF_NODE 8 i ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 i2t_ASN1_OBJECT ( buf , sizeof ( buf ) , a ) FUNCTION_CALL 7 i2t_ASN1_OBJECT ( buf , sizeof ( buf ) , a ) CALLEE 8 i2t_ASN1_OBJECT LEAF_NODE 9 i2t_ASN1_OBJECT LEAF_NODE 8 ( ARGUMENT 8 buf FIELD 9 buf LEAF_NODE 10 buf LEAF_NODE 8 , ARGUMENT 8 sizeof ( buf ) FUNCTION_CALL 9 sizeof ( buf ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 buf FIELD 11 buf LEAF_NODE 12 buf LEAF_NODE 10 ) LEAF_NODE 8 , ARGUMENT 8 a FIELD 9 a LEAF_NODE 10 a LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 i > ( int ) ( sizeof ( buf ) - 1 ) EXPR 5 i > ( int ) ( sizeof ( buf ) - 1 ) FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 > LEAF_NODE 7 > LEAF_NODE 6 ( TYPE_NAME 6 int LEAF_NODE 7 int LEAF_NODE 6 ) LEAF_NODE 6 ( FUNCTION_CALL 6 sizeof ( buf ) CALLEE 7 sizeof LEAF_NODE 8 sizeof LEAF_NODE 7 ( ARGUMENT 7 buf FIELD 8 buf LEAF_NODE 9 buf LEAF_NODE 7 ) LEAF_NODE 6 - FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 6 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( p = OPENSSL_malloc ( i + 1 ) ) == NULL EXPR 8 ( p = OPENSSL_malloc ( i + 1 ) ) == NULL LEAF_NODE 9 ( ASSIGN 9 p = OPENSSL_malloc ( i + 1 ) LVAL 10 p FIELD 11 p LEAF_NODE 12 p ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 OPENSSL_malloc ( i + 1 ) FUNCTION_CALL 11 OPENSSL_malloc ( i + 1 ) CALLEE 12 OPENSSL_malloc LEAF_NODE 13 OPENSSL_malloc LEAF_NODE 12 ( ARGUMENT 12 i + 1 FIELD 13 i LEAF_NODE 14 i LEAF_NODE 13 + FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ) LEAF_NODE 9 ) EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ASN1err ( ASN1_F_I2A_ASN1_OBJECT , ERR_R_MALLOC_FAILURE ) ; EXPR 10 ASN1err ( ASN1_F_I2A_ASN1_OBJECT , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 11 ASN1err ( ASN1_F_I2A_ASN1_OBJECT , ERR_R_MALLOC_FAILURE ) CALLEE 12 ASN1err LEAF_NODE 13 ASN1err LEAF_NODE 12 ( ARGUMENT 12 ASN1_F_I2A_ASN1_OBJECT FIELD 13 ASN1_F_I2A_ASN1_OBJECT LEAF_NODE 14 ASN1_F_I2A_ASN1_OBJECT LEAF_NODE 12 , ARGUMENT 12 ERR_R_MALLOC_FAILURE FIELD 13 ERR_R_MALLOC_FAILURE LEAF_NODE 14 ERR_R_MALLOC_FAILURE LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return - 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 - 1 EXPR 11 - 1 UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 i2t_ASN1_OBJECT ( p , i + 1 , a ) ; EXPR 7 i2t_ASN1_OBJECT ( p , i + 1 , a ) FUNCTION_CALL 8 i2t_ASN1_OBJECT ( p , i + 1 , a ) CALLEE 9 i2t_ASN1_OBJECT LEAF_NODE 10 i2t_ASN1_OBJECT LEAF_NODE 9 ( ARGUMENT 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 , ARGUMENT 9 i + 1 FIELD 10 i LEAF_NODE 11 i LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 , ARGUMENT 9 a FIELD 10 a LEAF_NODE 11 a LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 i <= 0 EXPR 5 i <= 0 FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 <= LEAF_NODE 7 <= FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 i = BIO_write ( bp , \"<INVALID>\" , 9 ) ; EXPR 7 i = BIO_write ( bp , \"<INVALID>\" , 9 ) ASSIGN 8 i = BIO_write ( bp , \"<INVALID>\" , 9 ) LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 BIO_write ( bp , \"<INVALID>\" , 9 ) FUNCTION_CALL 10 BIO_write ( bp , \"<INVALID>\" , 9 ) CALLEE 11 BIO_write LEAF_NODE 12 BIO_write LEAF_NODE 11 ( ARGUMENT 11 bp FIELD 12 bp LEAF_NODE 13 bp LEAF_NODE 11 , ARGUMENT 11 \"<INVALID>\" FIELD 12 \"<INVALID>\" LEAF_NODE 13 \"<INVALID>\" LEAF_NODE 11 , ARGUMENT 11 9 FIELD 12 9 LEAF_NODE 13 9 LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 i += BIO_dump ( bp , ( const char * ) a -> data , a -> length ) ; EXPR 7 i += BIO_dump ( bp , ( const char * ) a -> data , a -> length ) ASSIGN 8 i += BIO_dump ( bp , ( const char * ) a -> data , a -> length ) LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 BIO_dump ( bp , ( const char * ) a -> data , a -> length ) FUNCTION_CALL 10 BIO_dump ( bp , ( const char * ) a -> data , a -> length ) CALLEE 11 BIO_dump LEAF_NODE 12 BIO_dump LEAF_NODE 11 ( ARGUMENT 11 bp FIELD 12 bp LEAF_NODE 13 bp LEAF_NODE 11 , ARGUMENT 11 ( const char * ) a -> data LEAF_NODE 12 ( TYPE_NAME 12 const char LEAF_NODE 13 const LEAF_NODE 13 char LEAF_NODE 12 * LEAF_NODE 12 ) FIELD 12 a -> data LEAF_NODE 13 a LEAF_NODE 13 -> LEAF_NODE 13 data LEAF_NODE 11 , ARGUMENT 11 a -> length FIELD 12 a -> length LEAF_NODE 13 a LEAF_NODE 13 -> LEAF_NODE 13 length LEAF_NODE 11 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return i ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 i EXPR 8 i FIELD 9 i LEAF_NODE 10 i LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 BIO_write ( bp , p , i ) ; EXPR 4 BIO_write ( bp , p , i ) FUNCTION_CALL 5 BIO_write ( bp , p , i ) CALLEE 6 BIO_write LEAF_NODE 7 BIO_write LEAF_NODE 6 ( ARGUMENT 6 bp FIELD 7 bp LEAF_NODE 8 bp LEAF_NODE 6 , ARGUMENT 6 p FIELD 7 p LEAF_NODE 8 p LEAF_NODE 6 , ARGUMENT 6 i FIELD 7 i LEAF_NODE 8 i LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 p != buf EXPR 5 p != buf FIELD 6 p LEAF_NODE 7 p EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 buf LEAF_NODE 7 buf LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 OPENSSL_free ( p ) ; EXPR 6 OPENSSL_free ( p ) FUNCTION_CALL 7 OPENSSL_free ( p ) CALLEE 8 OPENSSL_free LEAF_NODE 9 OPENSSL_free LEAF_NODE 8 ( ARGUMENT 8 p FIELD 9 p LEAF_NODE 10 p LEAF_NODE 8 ) LEAF_NODE 6 ; JUMP_STATEMENT 3 return i ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 i EXPR 5 i FIELD 6 i LEAF_NODE 7 i LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 151, "project": "openssl_ast_normal_function_test_1", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 BIO * TYPE_NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 3 * FUNCTION_NAME 2 bio_open_default LEAF_NODE 3 bio_open_default PARAMETER_LIST 2 ( const char * filename , char mode , int format ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * filename TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 filename LEAF_NODE 5 filename LEAF_NODE 3 , PARAMETER_DECL 3 char mode TYPE 4 char TYPE_NAME 5 char LEAF_NODE 6 char NAME 4 mode LEAF_NODE 5 mode LEAF_NODE 3 , PARAMETER_DECL 3 int format TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 format LEAF_NODE 5 format LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return bio_open_default_ ( filename , mode , format , 0 ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 bio_open_default_ ( filename , mode , format , 0 ) EXPR 5 bio_open_default_ ( filename , mode , format , 0 ) FUNCTION_CALL 6 bio_open_default_ ( filename , mode , format , 0 ) CALLEE 7 bio_open_default_ LEAF_NODE 8 bio_open_default_ LEAF_NODE 7 ( ARGUMENT 7 filename FIELD 8 filename LEAF_NODE 9 filename LEAF_NODE 7 , ARGUMENT 7 mode FIELD 8 mode LEAF_NODE 9 mode LEAF_NODE 7 , ARGUMENT 7 format FIELD 8 format LEAF_NODE 9 format LEAF_NODE 7 , ARGUMENT 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 152, "project": "openssl_ast_normal_function_test_155", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASYNC_pause_job LEAF_NODE 3 ASYNC_pause_job PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 ASYNC_JOB * job ; VAR_DECL 4 ASYNC_JOB * job TYPE 5 ASYNC_JOB * TYPE_NAME 6 ASYNC_JOB LEAF_NODE 7 ASYNC_JOB POINTER 6 * LEAF_NODE 7 * NAME 5 job LEAF_NODE 6 job LEAF_NODE 4 ; SIMPLE_DECL 3 async_ctx * ctx ; ctx = async_get_ctx ( ) ; VAR_DECL 4 async_ctx * ctx ; ctx = async_get_ctx ( ) TYPE 5 async_ctx * TYPE_NAME 6 async_ctx LEAF_NODE 7 async_ctx POINTER 6 * LEAF_NODE 7 * NAME 5 ctx LEAF_NODE 6 ctx LEAF_NODE 5 ; INIT 5 ctx = async_get_ctx ( ) ASSIGN 6 ctx = async_get_ctx ( ) LVAL 7 ctx NAME 8 ctx LEAF_NODE 9 ctx ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 async_get_ctx ( ) FUNCTION_CALL 8 async_get_ctx ( ) CALLEE 9 async_get_ctx LEAF_NODE 10 async_get_ctx LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ctx == NULL || ctx -> currjob == NULL || ctx -> blocked EXPR 5 ctx == NULL || ctx -> currjob == NULL || ctx -> blocked OR 6 ctx == NULL || ctx -> currjob == NULL || ctx -> blocked EXPR 7 ctx == NULL FIELD 8 ctx LEAF_NODE 9 ctx EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 7 || EXPR 7 ctx -> currjob == NULL || ctx -> blocked OR 8 ctx -> currjob == NULL || ctx -> blocked EXPR 9 ctx -> currjob == NULL FIELD 10 ctx -> currjob LEAF_NODE 11 ctx LEAF_NODE 11 -> LEAF_NODE 11 currjob EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 || EXPR 9 ctx -> blocked FIELD 10 ctx -> blocked LEAF_NODE 11 ctx LEAF_NODE 11 -> LEAF_NODE 11 blocked LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 JUMP_STATEMENT 6 return 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 1 EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 job = ctx -> currjob ; EXPR 4 job = ctx -> currjob ASSIGN 5 job = ctx -> currjob LVAL 6 job FIELD 7 job LEAF_NODE 8 job ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ctx -> currjob FIELD 7 ctx -> currjob LEAF_NODE 8 ctx LEAF_NODE 8 -> LEAF_NODE 8 currjob LEAF_NODE 4 ; EXPR_STATEMENT 3 job -> status = ASYNC_JOB_PAUSING ; EXPR 4 job -> status = ASYNC_JOB_PAUSING ASSIGN 5 job -> status = ASYNC_JOB_PAUSING LVAL 6 job -> status FIELD 7 job -> status LEAF_NODE 8 job LEAF_NODE 8 -> LEAF_NODE 8 status ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ASYNC_JOB_PAUSING FIELD 7 ASYNC_JOB_PAUSING LEAF_NODE 8 ASYNC_JOB_PAUSING LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! async_fibre_swapcontext ( & job -> fibrectx , & ctx -> dispatcher , 1 ) EXPR 5 ! async_fibre_swapcontext ( & job -> fibrectx , & ctx -> dispatcher , 1 ) UNARY_EXPR 6 ! async_fibre_swapcontext ( & job -> fibrectx , & ctx -> dispatcher , 1 ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 async_fibre_swapcontext ( & job -> fibrectx , & ctx -> dispatcher , 1 ) CALLEE 8 async_fibre_swapcontext LEAF_NODE 9 async_fibre_swapcontext LEAF_NODE 8 ( ARGUMENT 8 & job -> fibrectx UNARY_EXPR 9 & job -> fibrectx UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 job -> fibrectx LEAF_NODE 11 job LEAF_NODE 11 -> LEAF_NODE 11 fibrectx LEAF_NODE 8 , ARGUMENT 8 & ctx -> dispatcher UNARY_EXPR 9 & ctx -> dispatcher UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 ctx -> dispatcher LEAF_NODE 11 ctx LEAF_NODE 11 -> LEAF_NODE 11 dispatcher LEAF_NODE 8 , ARGUMENT 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASYNCerr ( ASYNC_F_ASYNC_PAUSE_JOB , ASYNC_R_FAILED_TO_SWAP_CONTEXT ) ; EXPR 7 ASYNCerr ( ASYNC_F_ASYNC_PAUSE_JOB , ASYNC_R_FAILED_TO_SWAP_CONTEXT ) FUNCTION_CALL 8 ASYNCerr ( ASYNC_F_ASYNC_PAUSE_JOB , ASYNC_R_FAILED_TO_SWAP_CONTEXT ) CALLEE 9 ASYNCerr LEAF_NODE 10 ASYNCerr LEAF_NODE 9 ( ARGUMENT 9 ASYNC_F_ASYNC_PAUSE_JOB FIELD 10 ASYNC_F_ASYNC_PAUSE_JOB LEAF_NODE 11 ASYNC_F_ASYNC_PAUSE_JOB LEAF_NODE 9 , ARGUMENT 9 ASYNC_R_FAILED_TO_SWAP_CONTEXT FIELD 10 ASYNC_R_FAILED_TO_SWAP_CONTEXT LEAF_NODE 11 ASYNC_R_FAILED_TO_SWAP_CONTEXT LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 async_wait_ctx_reset_counts ( job -> waitctx ) ; EXPR 4 async_wait_ctx_reset_counts ( job -> waitctx ) FUNCTION_CALL 5 async_wait_ctx_reset_counts ( job -> waitctx ) CALLEE 6 async_wait_ctx_reset_counts LEAF_NODE 7 async_wait_ctx_reset_counts LEAF_NODE 6 ( ARGUMENT 6 job -> waitctx FIELD 7 job -> waitctx LEAF_NODE 8 job LEAF_NODE 8 -> LEAF_NODE 8 waitctx LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 153, "project": "openssl_ast_normal_function_test_144", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; SIMPLE_DECL 1 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } ; CLASS_DEF 2 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } CLASS_DEF 3 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } LEAF_NODE 4 struct CLASS_NAME 4 testdata LEAF_NODE 5 testdata LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; SIMPLE_DECL 5 char * data ; VAR_DECL 6 char * data TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 int type ; VAR_DECL 6 int type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 type LEAF_NODE 8 type LEAF_NODE 6 ; SIMPLE_DECL 5 int expected_type ; VAR_DECL 6 int expected_type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 expected_type LEAF_NODE 8 expected_type LEAF_NODE 6 ; SIMPLE_DECL 5 int check_result ; VAR_DECL 6 int check_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 check_result LEAF_NODE 8 check_result LEAF_NODE 6 ; SIMPLE_DECL 5 time_t t ; VAR_DECL 6 time_t t TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 t LEAF_NODE 8 t LEAF_NODE 6 ; SIMPLE_DECL 5 int cmp_result ; VAR_DECL 6 int cmp_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 cmp_result LEAF_NODE 8 cmp_result LEAF_NODE 6 ; SIMPLE_DECL 5 int convert_result ; VAR_DECL 6 int convert_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 convert_result LEAF_NODE 8 convert_result LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } ; CLASS_DEF 2 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } CLASS_DEF 3 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } LEAF_NODE 4 struct CLASS_NAME 4 compare_testdata LEAF_NODE 5 compare_testdata LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; SIMPLE_DECL 5 ASN1_TIME t1 ; VAR_DECL 6 ASN1_TIME t1 TYPE 7 ASN1_TIME TYPE_NAME 8 ASN1_TIME LEAF_NODE 9 ASN1_TIME NAME 7 t1 LEAF_NODE 8 t1 LEAF_NODE 6 ; SIMPLE_DECL 5 ASN1_TIME t2 ; VAR_DECL 6 ASN1_TIME t2 TYPE 7 ASN1_TIME TYPE_NAME 8 ASN1_TIME LEAF_NODE 9 ASN1_TIME NAME 7 t2 LEAF_NODE 8 t2 LEAF_NODE 6 ; SIMPLE_DECL 5 int result ; VAR_DECL 6 int result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 result LEAF_NODE 8 result LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TODAY_GEN_STR ; TODAY_GEN_STR = \"20170825000000Z\" ; VAR_DECL 2 unsigned char [ ] TODAY_GEN_STR ; TODAY_GEN_STR = \"20170825000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TODAY_GEN_STR LEAF_NODE 4 TODAY_GEN_STR LEAF_NODE 3 ; INIT 3 TODAY_GEN_STR = \"20170825000000Z\" ASSIGN 4 TODAY_GEN_STR = \"20170825000000Z\" LVAL 5 TODAY_GEN_STR NAME 6 TODAY_GEN_STR LEAF_NODE 7 TODAY_GEN_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"20170825000000Z\" FIELD 6 \"20170825000000Z\" LEAF_NODE 7 \"20170825000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TOMORROW_GEN_STR ; TOMORROW_GEN_STR = \"20170826000000Z\" ; VAR_DECL 2 unsigned char [ ] TOMORROW_GEN_STR ; TOMORROW_GEN_STR = \"20170826000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TOMORROW_GEN_STR LEAF_NODE 4 TOMORROW_GEN_STR LEAF_NODE 3 ; INIT 3 TOMORROW_GEN_STR = \"20170826000000Z\" ASSIGN 4 TOMORROW_GEN_STR = \"20170826000000Z\" LVAL 5 TOMORROW_GEN_STR NAME 6 TOMORROW_GEN_STR LEAF_NODE 7 TOMORROW_GEN_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"20170826000000Z\" FIELD 6 \"20170826000000Z\" LEAF_NODE 7 \"20170826000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TODAY_UTC_STR ; TODAY_UTC_STR = \"170825000000Z\" ; VAR_DECL 2 unsigned char [ ] TODAY_UTC_STR ; TODAY_UTC_STR = \"170825000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TODAY_UTC_STR LEAF_NODE 4 TODAY_UTC_STR LEAF_NODE 3 ; INIT 3 TODAY_UTC_STR = \"170825000000Z\" ASSIGN 4 TODAY_UTC_STR = \"170825000000Z\" LVAL 5 TODAY_UTC_STR NAME 6 TODAY_UTC_STR LEAF_NODE 7 TODAY_UTC_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"170825000000Z\" FIELD 6 \"170825000000Z\" LEAF_NODE 7 \"170825000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TOMORROW_UTC_STR ; TOMORROW_UTC_STR = \"170826000000Z\" ; VAR_DECL 2 unsigned char [ ] TOMORROW_UTC_STR ; TOMORROW_UTC_STR = \"170826000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TOMORROW_UTC_STR LEAF_NODE 4 TOMORROW_UTC_STR LEAF_NODE 3 ; INIT 3 TOMORROW_UTC_STR = \"170826000000Z\" ASSIGN 4 TOMORROW_UTC_STR = \"170826000000Z\" LVAL 5 TOMORROW_UTC_STR NAME 6 TOMORROW_UTC_STR LEAF_NODE 7 TOMORROW_UTC_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"170826000000Z\" FIELD 6 \"170826000000Z\" LEAF_NODE 7 \"170826000000Z\" LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_pos LEAF_NODE 3 test_table_pos PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_pos , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_pos , idx ) EXPR 5 test_table ( tbl_testdata_pos , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_pos , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_pos FIELD 8 tbl_testdata_pos LEAF_NODE 9 tbl_testdata_pos LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_neg LEAF_NODE 3 test_table_neg PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_neg , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_neg , idx ) EXPR 5 test_table ( tbl_testdata_neg , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_neg , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_neg FIELD 8 tbl_testdata_neg LEAF_NODE 9 tbl_testdata_neg LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_pos_64bit LEAF_NODE 3 test_table_pos_64bit PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_pos_64bit , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_pos_64bit , idx ) EXPR 5 test_table ( tbl_testdata_pos_64bit , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_pos_64bit , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_pos_64bit FIELD 8 tbl_testdata_pos_64bit LEAF_NODE 9 tbl_testdata_pos_64bit LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_neg_64bit LEAF_NODE 3 test_table_neg_64bit PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_neg_64bit , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_neg_64bit , idx ) EXPR 5 test_table ( tbl_testdata_neg_64bit , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_neg_64bit , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_neg_64bit FIELD 8 tbl_testdata_neg_64bit LEAF_NODE 9 tbl_testdata_neg_64bit LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_compare LEAF_NODE 3 test_table_compare PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct compare_testdata * td ; td = & tbl_compare_testdata [ idx ] ; VAR_DECL 4 struct compare_testdata * td ; td = & tbl_compare_testdata [ idx ] TYPE 5 struct compare_testdata * TYPE_NAME 6 struct compare_testdata LEAF_NODE 7 struct LEAF_NODE 7 compare_testdata POINTER 6 * LEAF_NODE 7 * NAME 5 td LEAF_NODE 6 td LEAF_NODE 5 ; INIT 5 td = & tbl_compare_testdata [ idx ] ASSIGN 6 td = & tbl_compare_testdata [ idx ] LVAL 7 td NAME 8 td LEAF_NODE 9 td ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & tbl_compare_testdata [ idx ] UNARY_EXPR 8 & tbl_compare_testdata [ idx ] UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 tbl_compare_testdata [ idx ] LEAF_NODE 10 tbl_compare_testdata LEAF_NODE 10 [ EXPR 10 idx FIELD 11 idx LEAF_NODE 12 idx LEAF_NODE 10 ] LEAF_NODE 4 ; JUMP_STATEMENT 3 return TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) EXPR 5 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) FUNCTION_CALL 6 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) CALLEE 7 TEST_int_eq LEAF_NODE 8 TEST_int_eq LEAF_NODE 7 ( ARGUMENT 7 ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) FUNCTION_CALL 8 ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) CALLEE 9 ASN1_TIME_compare LEAF_NODE 10 ASN1_TIME_compare LEAF_NODE 9 ( ARGUMENT 9 & td -> t1 UNARY_EXPR 10 & td -> t1 UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 td -> t1 LEAF_NODE 12 td LEAF_NODE 12 -> LEAF_NODE 12 t1 LEAF_NODE 9 , ARGUMENT 9 & td -> t2 UNARY_EXPR 10 & td -> t2 UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 td -> t2 LEAF_NODE 12 td LEAF_NODE 12 -> LEAF_NODE 12 t2 LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 td -> result FIELD 8 td -> result LEAF_NODE 9 td LEAF_NODE 9 -> LEAF_NODE 9 result LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 asn1parse_main LEAF_NODE 3 asn1parse_main PARAMETER_LIST 2 ( int argc , char * * argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * * argv TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 ASN1_TYPE * at ; at = NULL ; VAR_DECL 4 ASN1_TYPE * at ; at = NULL TYPE 5 ASN1_TYPE * TYPE_NAME 6 ASN1_TYPE LEAF_NODE 7 ASN1_TYPE POINTER 6 * LEAF_NODE 7 * NAME 5 at LEAF_NODE 6 at LEAF_NODE 5 ; INIT 5 at = NULL ASSIGN 6 at = NULL LVAL 7 at NAME 8 at LEAF_NODE 9 at ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 BIO * in ; in = NULL , BIO * b64 ; b64 = NULL , BIO * derout ; derout = NULL ; INIT_DECL_LIST 4 BIO * in ; in = NULL , BIO * b64 ; b64 = NULL , BIO * derout ; derout = NULL VAR_DECL 5 BIO * in ; in = NULL TYPE 6 BIO * TYPE_NAME 7 BIO LEAF_NODE 8 BIO POINTER 7 * LEAF_NODE 8 * NAME 6 in LEAF_NODE 7 in LEAF_NODE 6 ; INIT 6 in = NULL ASSIGN 7 in = NULL LVAL 8 in NAME 9 in LEAF_NODE 10 in ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 5 , INIT_DECL_LIST 5 BIO * b64 ; b64 = NULL , BIO * derout ; derout = NULL VAR_DECL 6 BIO * b64 ; b64 = NULL TYPE 7 BIO * TYPE_NAME 8 BIO LEAF_NODE 9 BIO POINTER 8 * LEAF_NODE 9 * NAME 7 b64 LEAF_NODE 8 b64 LEAF_NODE 7 ; INIT 7 b64 = NULL ASSIGN 8 b64 = NULL LVAL 9 b64 NAME 10 b64 LEAF_NODE 11 b64 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 6 , VAR_DECL 6 BIO * derout ; derout = NULL TYPE 7 BIO * TYPE_NAME 8 BIO LEAF_NODE 9 BIO POINTER 8 * LEAF_NODE 9 * NAME 7 derout LEAF_NODE 8 derout LEAF_NODE 7 ; INIT 7 derout = NULL ASSIGN 8 derout = NULL LVAL 9 derout NAME 10 derout LEAF_NODE 11 derout ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 BUF_MEM * buf ; buf = NULL ; VAR_DECL 4 BUF_MEM * buf ; buf = NULL TYPE 5 BUF_MEM * TYPE_NAME 6 BUF_MEM LEAF_NODE 7 BUF_MEM POINTER 6 * LEAF_NODE 7 * NAME 5 buf LEAF_NODE 6 buf LEAF_NODE 5 ; INIT 5 buf = NULL ASSIGN 6 buf = NULL LVAL 7 buf NAME 8 buf LEAF_NODE 9 buf ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 STACK_OF ( OPENSSL_STRING ) * osk = NULL ; EXPR 4 STACK_OF ( OPENSSL_STRING ) * osk = NULL ASSIGN 5 STACK_OF ( OPENSSL_STRING ) * osk = NULL LVAL 6 STACK_OF ( OPENSSL_STRING ) * osk FUNCTION_CALL 7 STACK_OF ( OPENSSL_STRING ) CALLEE 8 STACK_OF LEAF_NODE 9 STACK_OF LEAF_NODE 8 ( ARGUMENT 8 OPENSSL_STRING FIELD 9 OPENSSL_STRING LEAF_NODE 10 OPENSSL_STRING LEAF_NODE 8 ) LEAF_NODE 7 * FIELD 7 osk LEAF_NODE 8 osk ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 char * genstr ; genstr = NULL , char * genconf ; genconf = NULL ; INIT_DECL_LIST 4 char * genstr ; genstr = NULL , char * genconf ; genconf = NULL VAR_DECL 5 char * genstr ; genstr = NULL TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 genstr LEAF_NODE 7 genstr LEAF_NODE 6 ; INIT 6 genstr = NULL ASSIGN 7 genstr = NULL LVAL 8 genstr NAME 9 genstr LEAF_NODE 10 genstr ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 5 , VAR_DECL 5 char * genconf ; genconf = NULL TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 genconf LEAF_NODE 7 genconf LEAF_NODE 6 ; INIT 6 genconf = NULL ASSIGN 7 genconf = NULL LVAL 8 genconf NAME 9 genconf LEAF_NODE 10 genconf ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 char * infile ; infile = NULL , char * oidfile ; oidfile = NULL , char * derfile ; derfile = NULL ; INIT_DECL_LIST 4 char * infile ; infile = NULL , char * oidfile ; oidfile = NULL , char * derfile ; derfile = NULL VAR_DECL 5 char * infile ; infile = NULL TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 infile LEAF_NODE 7 infile LEAF_NODE 6 ; INIT 6 infile = NULL ASSIGN 7 infile = NULL LVAL 8 infile NAME 9 infile LEAF_NODE 10 infile ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 5 , INIT_DECL_LIST 5 char * oidfile ; oidfile = NULL , char * derfile ; derfile = NULL VAR_DECL 6 char * oidfile ; oidfile = NULL TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 oidfile LEAF_NODE 8 oidfile LEAF_NODE 7 ; INIT 7 oidfile = NULL ASSIGN 8 oidfile = NULL LVAL 9 oidfile NAME 10 oidfile LEAF_NODE 11 oidfile ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 6 , VAR_DECL 6 char * derfile ; derfile = NULL TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 derfile LEAF_NODE 8 derfile LEAF_NODE 7 ; INIT 7 derfile = NULL ASSIGN 8 derfile = NULL LVAL 9 derfile NAME 10 derfile LEAF_NODE 11 derfile ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * str ; str = NULL ; VAR_DECL 4 unsigned char * str ; str = NULL TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 str LEAF_NODE 6 str LEAF_NODE 5 ; INIT 5 str = NULL ASSIGN 6 str = NULL LVAL 7 str NAME 8 str LEAF_NODE 9 str ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 char * name ; name = NULL , char * header ; header = NULL , char * prog ; INIT_DECL_LIST 4 char * name ; name = NULL , char * header ; header = NULL , char * prog VAR_DECL 5 char * name ; name = NULL TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 name LEAF_NODE 7 name LEAF_NODE 6 ; INIT 6 name = NULL ASSIGN 7 name = NULL LVAL 8 name NAME 9 name LEAF_NODE 10 name ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 5 , INIT_DECL_LIST 5 char * header ; header = NULL , char * prog VAR_DECL 6 char * header ; header = NULL TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 header LEAF_NODE 8 header LEAF_NODE 7 ; INIT 7 header = NULL ASSIGN 8 header = NULL LVAL 9 header NAME 10 header LEAF_NODE 11 header ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 6 , VAR_DECL 6 char * prog TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 prog LEAF_NODE 8 prog LEAF_NODE 4 ; SIMPLE_DECL 3 const unsigned char * ctmpbuf ; VAR_DECL 4 const unsigned char * ctmpbuf TYPE 5 const unsigned char * TYPE_NAME 6 const unsigned char LEAF_NODE 7 const LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 ctmpbuf LEAF_NODE 6 ctmpbuf LEAF_NODE 4 ; SIMPLE_DECL 3 int indent ; indent = 0 , int noout ; noout = 0 , int dump ; dump = 0 , int strictpem ; strictpem = 0 , int informat ; informat = FORMAT_PEM ; INIT_DECL_LIST 4 int indent ; indent = 0 , int noout ; noout = 0 , int dump ; dump = 0 , int strictpem ; strictpem = 0 , int informat ; informat = FORMAT_PEM VAR_DECL 5 int indent ; indent = 0 TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 indent LEAF_NODE 7 indent LEAF_NODE 6 ; INIT 6 indent = 0 ASSIGN 7 indent = 0 LVAL 8 indent NAME 9 indent LEAF_NODE 10 indent ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 5 , INIT_DECL_LIST 5 int noout ; noout = 0 , int dump ; dump = 0 , int strictpem ; strictpem = 0 , int informat ; informat = FORMAT_PEM VAR_DECL 6 int noout ; noout = 0 TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 noout LEAF_NODE 8 noout LEAF_NODE 7 ; INIT 7 noout = 0 ASSIGN 8 noout = 0 LVAL 9 noout NAME 10 noout LEAF_NODE 11 noout ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 6 , INIT_DECL_LIST 6 int dump ; dump = 0 , int strictpem ; strictpem = 0 , int informat ; informat = FORMAT_PEM VAR_DECL 7 int dump ; dump = 0 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 dump LEAF_NODE 9 dump LEAF_NODE 8 ; INIT 8 dump = 0 ASSIGN 9 dump = 0 LVAL 10 dump NAME 11 dump LEAF_NODE 12 dump ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 , INIT_DECL_LIST 7 int strictpem ; strictpem = 0 , int informat ; informat = FORMAT_PEM VAR_DECL 8 int strictpem ; strictpem = 0 TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 strictpem LEAF_NODE 10 strictpem LEAF_NODE 9 ; INIT 9 strictpem = 0 ASSIGN 10 strictpem = 0 LVAL 11 strictpem NAME 12 strictpem LEAF_NODE 13 strictpem ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 8 , VAR_DECL 8 int informat ; informat = FORMAT_PEM TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 informat LEAF_NODE 10 informat LEAF_NODE 9 ; INIT 9 informat = FORMAT_PEM ASSIGN 10 informat = FORMAT_PEM LVAL 11 informat NAME 12 informat LEAF_NODE 13 informat ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 FORMAT_PEM FIELD 12 FORMAT_PEM LEAF_NODE 13 FORMAT_PEM LEAF_NODE 4 ; SIMPLE_DECL 3 int offset ; offset = 0 , int ret ; ret = 1 , int i , int j ; INIT_DECL_LIST 4 int offset ; offset = 0 , int ret ; ret = 1 , int i , int j VAR_DECL 5 int offset ; offset = 0 TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 offset LEAF_NODE 7 offset LEAF_NODE 6 ; INIT 6 offset = 0 ASSIGN 7 offset = 0 LVAL 8 offset NAME 9 offset LEAF_NODE 10 offset ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 5 , INIT_DECL_LIST 5 int ret ; ret = 1 , int i , int j VAR_DECL 6 int ret ; ret = 1 TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ret LEAF_NODE 8 ret LEAF_NODE 7 ; INIT 7 ret = 1 ASSIGN 8 ret = 1 LVAL 9 ret NAME 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 6 , INIT_DECL_LIST 6 int i , int j VAR_DECL 7 int i TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 i LEAF_NODE 9 i LEAF_NODE 7 , VAR_DECL 7 int j TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 j LEAF_NODE 9 j LEAF_NODE 4 ; SIMPLE_DECL 3 long num , long tmplen ; INIT_DECL_LIST 4 long num , long tmplen VAR_DECL 5 long num TYPE 6 long TYPE_NAME 7 long LEAF_NODE 8 long NAME 6 num LEAF_NODE 7 num LEAF_NODE 5 , VAR_DECL 5 long tmplen TYPE 6 long TYPE_NAME 7 long LEAF_NODE 8 long NAME 6 tmplen LEAF_NODE 7 tmplen LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * tmpbuf ; VAR_DECL 4 unsigned char * tmpbuf TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 tmpbuf LEAF_NODE 6 tmpbuf LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int length ; length = 0 ; VAR_DECL 4 unsigned int length ; length = 0 TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 length LEAF_NODE 6 length LEAF_NODE 5 ; INIT 5 length = 0 ASSIGN 6 length = 0 LVAL 7 length NAME 8 length LEAF_NODE 9 length ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 OPTION_CHOICE o ; VAR_DECL 4 OPTION_CHOICE o TYPE 5 OPTION_CHOICE TYPE_NAME 6 OPTION_CHOICE LEAF_NODE 7 OPTION_CHOICE NAME 5 o LEAF_NODE 6 o LEAF_NODE 4 ; SIMPLE_DECL 3 const ASN1_ITEM * it ; it = NULL ; VAR_DECL 4 const ASN1_ITEM * it ; it = NULL TYPE 5 const ASN1_ITEM * TYPE_NAME 6 const ASN1_ITEM LEAF_NODE 7 const LEAF_NODE 7 ASN1_ITEM POINTER 6 * LEAF_NODE 7 * NAME 5 it LEAF_NODE 6 it LEAF_NODE 5 ; INIT 5 it = NULL ASSIGN 6 it = NULL LVAL 7 it NAME 8 it LEAF_NODE 9 it ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 prog = opt_init ( argc , argv , asn1parse_options ) ; EXPR 4 prog = opt_init ( argc , argv , asn1parse_options ) ASSIGN 5 prog = opt_init ( argc , argv , asn1parse_options ) LVAL 6 prog FIELD 7 prog LEAF_NODE 8 prog ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 opt_init ( argc , argv , asn1parse_options ) FUNCTION_CALL 7 opt_init ( argc , argv , asn1parse_options ) CALLEE 8 opt_init LEAF_NODE 9 opt_init LEAF_NODE 8 ( ARGUMENT 8 argc FIELD 9 argc LEAF_NODE 10 argc LEAF_NODE 8 , ARGUMENT 8 argv FIELD 9 argv LEAF_NODE 10 argv LEAF_NODE 8 , ARGUMENT 8 asn1parse_options FIELD 9 asn1parse_options LEAF_NODE 10 asn1parse_options LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( osk = sk_OPENSSL_STRING_new_null ( ) ) == NULL EXPR 5 ( osk = sk_OPENSSL_STRING_new_null ( ) ) == NULL LEAF_NODE 6 ( ASSIGN 6 osk = sk_OPENSSL_STRING_new_null ( ) LVAL 7 osk FIELD 8 osk LEAF_NODE 9 osk ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 sk_OPENSSL_STRING_new_null ( ) FUNCTION_CALL 8 sk_OPENSSL_STRING_new_null ( ) CALLEE 9 sk_OPENSSL_STRING_new_null LEAF_NODE 10 sk_OPENSSL_STRING_new_null LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 6 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 BIO_printf ( bio_err , \"%s: Memory allocation failure\\n\" , prog ) ; EXPR 7 BIO_printf ( bio_err , \"%s: Memory allocation failure\\n\" , prog ) FUNCTION_CALL 8 BIO_printf ( bio_err , \"%s: Memory allocation failure\\n\" , prog ) CALLEE 9 BIO_printf LEAF_NODE 10 BIO_printf LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 , ARGUMENT 9 \"%s: Memory allocation failure\\n\" FIELD 10 \"%s: Memory allocation failure\\n\" LEAF_NODE 11 \"%s: Memory allocation failure\\n\" LEAF_NODE 9 , ARGUMENT 9 prog FIELD 10 prog LEAF_NODE 11 prog LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto end ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 end LEAF_NODE 8 end LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 ( o = opt_next ( ) ) != OPT_EOF EXPR 5 ( o = opt_next ( ) ) != OPT_EOF LEAF_NODE 6 ( ASSIGN 6 o = opt_next ( ) LVAL 7 o FIELD 8 o LEAF_NODE 9 o ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 opt_next ( ) FUNCTION_CALL 8 opt_next ( ) CALLEE 9 opt_next LEAF_NODE 10 opt_next LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 6 ) EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 OPT_EOF LEAF_NODE 7 OPT_EOF LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 switch LEAF_NODE 8 switch LEAF_NODE 7 ( CONDITION 7 o EXPR 8 o FIELD 9 o LEAF_NODE 10 o LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 LABEL 9 case OPT_EOF : LEAF_NODE 10 case LEAF_NODE 10 OPT_EOF LEAF_NODE 10 : LABEL 9 case OPT_ERR : LEAF_NODE 10 case LEAF_NODE 10 OPT_ERR LEAF_NODE 10 : LABEL 9 opthelp : LEAF_NODE 10 opthelp LEAF_NODE 10 : EXPR_STATEMENT 9 BIO_printf ( bio_err , \"%s: Use -help for summary.\\n\" , prog ) ; EXPR 10 BIO_printf ( bio_err , \"%s: Use -help for summary.\\n\" , prog ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"%s: Use -help for summary.\\n\" , prog ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"%s: Use -help for summary.\\n\" FIELD 13 \"%s: Use -help for summary.\\n\" LEAF_NODE 14 \"%s: Use -help for summary.\\n\" LEAF_NODE 12 , ARGUMENT 12 prog FIELD 13 prog LEAF_NODE 14 prog LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto end ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 end LEAF_NODE 11 end LEAF_NODE 10 ; LABEL 9 case OPT_HELP : LEAF_NODE 10 case LEAF_NODE 10 OPT_HELP LEAF_NODE 10 : EXPR_STATEMENT 9 opt_help ( asn1parse_options ) ; EXPR 10 opt_help ( asn1parse_options ) FUNCTION_CALL 11 opt_help ( asn1parse_options ) CALLEE 12 opt_help LEAF_NODE 13 opt_help LEAF_NODE 12 ( ARGUMENT 12 asn1parse_options FIELD 13 asn1parse_options LEAF_NODE 14 asn1parse_options LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ret = 0 ; EXPR 10 ret = 0 ASSIGN 11 ret = 0 LVAL 12 ret FIELD 13 ret LEAF_NODE 14 ret ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; JUMP_STATEMENT 9 goto end ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 end LEAF_NODE 11 end LEAF_NODE 10 ; LABEL 9 case OPT_INFORM : LEAF_NODE 10 case LEAF_NODE 10 OPT_INFORM LEAF_NODE 10 : SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! opt_format ( opt_arg ( ) , OPT_FMT_PEMDER , & informat ) EXPR 11 ! opt_format ( opt_arg ( ) , OPT_FMT_PEMDER , & informat ) UNARY_EXPR 12 ! opt_format ( opt_arg ( ) , OPT_FMT_PEMDER , & informat ) UNARY_OPERATOR 13 ! LEAF_NODE 14 ! FUNCTION_CALL 13 opt_format ( opt_arg ( ) , OPT_FMT_PEMDER , & informat ) CALLEE 14 opt_format LEAF_NODE 15 opt_format LEAF_NODE 14 ( ARGUMENT 14 opt_arg ( ) FUNCTION_CALL 15 opt_arg ( ) CALLEE 16 opt_arg LEAF_NODE 17 opt_arg LEAF_NODE 16 ( LEAF_NODE 16 ) LEAF_NODE 14 , ARGUMENT 14 OPT_FMT_PEMDER FIELD 15 OPT_FMT_PEMDER LEAF_NODE 16 OPT_FMT_PEMDER LEAF_NODE 14 , ARGUMENT 14 & informat UNARY_EXPR 15 & informat UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 informat LEAF_NODE 17 informat LEAF_NODE 14 ) LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 goto opthelp ; KEYWORD 12 goto LEAF_NODE 13 goto DESTINATION 12 opthelp LEAF_NODE 13 opthelp LEAF_NODE 12 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case OPT_IN : LEAF_NODE 10 case LEAF_NODE 10 OPT_IN LEAF_NODE 10 : EXPR_STATEMENT 9 infile = opt_arg ( ) ; EXPR 10 infile = opt_arg ( ) ASSIGN 11 infile = opt_arg ( ) LVAL 12 infile FIELD 13 infile LEAF_NODE 14 infile ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 opt_arg ( ) FUNCTION_CALL 13 opt_arg ( ) CALLEE 14 opt_arg LEAF_NODE 15 opt_arg LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case OPT_OUT : LEAF_NODE 10 case LEAF_NODE 10 OPT_OUT LEAF_NODE 10 : EXPR_STATEMENT 9 derfile = opt_arg ( ) ; EXPR 10 derfile = opt_arg ( ) ASSIGN 11 derfile = opt_arg ( ) LVAL 12 derfile FIELD 13 derfile LEAF_NODE 14 derfile ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 opt_arg ( ) FUNCTION_CALL 13 opt_arg ( ) CALLEE 14 opt_arg LEAF_NODE 15 opt_arg LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case OPT_INDENT : LEAF_NODE 10 case LEAF_NODE 10 OPT_INDENT LEAF_NODE 10 : EXPR_STATEMENT 9 indent = 1 ; EXPR 10 indent = 1 ASSIGN 11 indent = 1 LVAL 12 indent FIELD 13 indent LEAF_NODE 14 indent ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case OPT_NOOUT : LEAF_NODE 10 case LEAF_NODE 10 OPT_NOOUT LEAF_NODE 10 : EXPR_STATEMENT 9 noout = 1 ; EXPR 10 noout = 1 ASSIGN 11 noout = 1 LVAL 12 noout FIELD 13 noout LEAF_NODE 14 noout ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case OPT_OID : LEAF_NODE 10 case LEAF_NODE 10 OPT_OID LEAF_NODE 10 : EXPR_STATEMENT 9 oidfile = opt_arg ( ) ; EXPR 10 oidfile = opt_arg ( ) ASSIGN 11 oidfile = opt_arg ( ) LVAL 12 oidfile FIELD 13 oidfile LEAF_NODE 14 oidfile ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 opt_arg ( ) FUNCTION_CALL 13 opt_arg ( ) CALLEE 14 opt_arg LEAF_NODE 15 opt_arg LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case OPT_OFFSET : LEAF_NODE 10 case LEAF_NODE 10 OPT_OFFSET LEAF_NODE 10 : EXPR_STATEMENT 9 offset = strtol ( opt_arg ( ) , NULL , 0 ) ; EXPR 10 offset = strtol ( opt_arg ( ) , NULL , 0 ) ASSIGN 11 offset = strtol ( opt_arg ( ) , NULL , 0 ) LVAL 12 offset FIELD 13 offset LEAF_NODE 14 offset ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 strtol ( opt_arg ( ) , NULL , 0 ) FUNCTION_CALL 13 strtol ( opt_arg ( ) , NULL , 0 ) CALLEE 14 strtol LEAF_NODE 15 strtol LEAF_NODE 14 ( ARGUMENT 14 opt_arg ( ) FUNCTION_CALL 15 opt_arg ( ) CALLEE 16 opt_arg LEAF_NODE 17 opt_arg LEAF_NODE 16 ( LEAF_NODE 16 ) LEAF_NODE 14 , ARGUMENT 14 NULL FIELD 15 NULL LEAF_NODE 16 NULL LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case OPT_LENGTH : LEAF_NODE 10 case LEAF_NODE 10 OPT_LENGTH LEAF_NODE 10 : EXPR_STATEMENT 9 length = strtol ( opt_arg ( ) , NULL , 0 ) ; EXPR 10 length = strtol ( opt_arg ( ) , NULL , 0 ) ASSIGN 11 length = strtol ( opt_arg ( ) , NULL , 0 ) LVAL 12 length FIELD 13 length LEAF_NODE 14 length ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 strtol ( opt_arg ( ) , NULL , 0 ) FUNCTION_CALL 13 strtol ( opt_arg ( ) , NULL , 0 ) CALLEE 14 strtol LEAF_NODE 15 strtol LEAF_NODE 14 ( ARGUMENT 14 opt_arg ( ) FUNCTION_CALL 15 opt_arg ( ) CALLEE 16 opt_arg LEAF_NODE 17 opt_arg LEAF_NODE 16 ( LEAF_NODE 16 ) LEAF_NODE 14 , ARGUMENT 14 NULL FIELD 15 NULL LEAF_NODE 16 NULL LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case OPT_DUMP : LEAF_NODE 10 case LEAF_NODE 10 OPT_DUMP LEAF_NODE 10 : EXPR_STATEMENT 9 dump = - 1 ; EXPR 10 dump = - 1 ASSIGN 11 dump = - 1 LVAL 12 dump FIELD 13 dump LEAF_NODE 14 dump ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 - 1 UNARY_EXPR 13 - 1 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case OPT_DLIMIT : LEAF_NODE 10 case LEAF_NODE 10 OPT_DLIMIT LEAF_NODE 10 : EXPR_STATEMENT 9 dump = strtol ( opt_arg ( ) , NULL , 0 ) ; EXPR 10 dump = strtol ( opt_arg ( ) , NULL , 0 ) ASSIGN 11 dump = strtol ( opt_arg ( ) , NULL , 0 ) LVAL 12 dump FIELD 13 dump LEAF_NODE 14 dump ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 strtol ( opt_arg ( ) , NULL , 0 ) FUNCTION_CALL 13 strtol ( opt_arg ( ) , NULL , 0 ) CALLEE 14 strtol LEAF_NODE 15 strtol LEAF_NODE 14 ( ARGUMENT 14 opt_arg ( ) FUNCTION_CALL 15 opt_arg ( ) CALLEE 16 opt_arg LEAF_NODE 17 opt_arg LEAF_NODE 16 ( LEAF_NODE 16 ) LEAF_NODE 14 , ARGUMENT 14 NULL FIELD 15 NULL LEAF_NODE 16 NULL LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case OPT_STRPARSE : LEAF_NODE 10 case LEAF_NODE 10 OPT_STRPARSE LEAF_NODE 10 : EXPR_STATEMENT 9 sk_OPENSSL_STRING_push ( osk , opt_arg ( ) ) ; EXPR 10 sk_OPENSSL_STRING_push ( osk , opt_arg ( ) ) FUNCTION_CALL 11 sk_OPENSSL_STRING_push ( osk , opt_arg ( ) ) CALLEE 12 sk_OPENSSL_STRING_push LEAF_NODE 13 sk_OPENSSL_STRING_push LEAF_NODE 12 ( ARGUMENT 12 osk FIELD 13 osk LEAF_NODE 14 osk LEAF_NODE 12 , ARGUMENT 12 opt_arg ( ) FUNCTION_CALL 13 opt_arg ( ) CALLEE 14 opt_arg LEAF_NODE 15 opt_arg LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case OPT_GENSTR : LEAF_NODE 10 case LEAF_NODE 10 OPT_GENSTR LEAF_NODE 10 : EXPR_STATEMENT 9 genstr = opt_arg ( ) ; EXPR 10 genstr = opt_arg ( ) ASSIGN 11 genstr = opt_arg ( ) LVAL 12 genstr FIELD 13 genstr LEAF_NODE 14 genstr ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 opt_arg ( ) FUNCTION_CALL 13 opt_arg ( ) CALLEE 14 opt_arg LEAF_NODE 15 opt_arg LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case OPT_GENCONF : LEAF_NODE 10 case LEAF_NODE 10 OPT_GENCONF LEAF_NODE 10 : EXPR_STATEMENT 9 genconf = opt_arg ( ) ; EXPR 10 genconf = opt_arg ( ) ASSIGN 11 genconf = opt_arg ( ) LVAL 12 genconf FIELD 13 genconf LEAF_NODE 14 genconf ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 opt_arg ( ) FUNCTION_CALL 13 opt_arg ( ) CALLEE 14 opt_arg LEAF_NODE 15 opt_arg LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case OPT_STRICTPEM : LEAF_NODE 10 case LEAF_NODE 10 OPT_STRICTPEM LEAF_NODE 10 : EXPR_STATEMENT 9 strictpem = 1 ; EXPR 10 strictpem = 1 ASSIGN 11 strictpem = 1 LVAL 12 strictpem FIELD 13 strictpem LEAF_NODE 14 strictpem ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; EXPR_STATEMENT 9 informat = FORMAT_PEM ; EXPR 10 informat = FORMAT_PEM ASSIGN 11 informat = FORMAT_PEM LVAL 12 informat FIELD 13 informat LEAF_NODE 14 informat ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 FORMAT_PEM FIELD 13 FORMAT_PEM LEAF_NODE 14 FORMAT_PEM LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case OPT_ITEM : LEAF_NODE 10 case LEAF_NODE 10 OPT_ITEM LEAF_NODE 10 : EXPR_STATEMENT 9 it = ASN1_ITEM_lookup ( opt_arg ( ) ) ; EXPR 10 it = ASN1_ITEM_lookup ( opt_arg ( ) ) ASSIGN 11 it = ASN1_ITEM_lookup ( opt_arg ( ) ) LVAL 12 it FIELD 13 it LEAF_NODE 14 it ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ASN1_ITEM_lookup ( opt_arg ( ) ) FUNCTION_CALL 13 ASN1_ITEM_lookup ( opt_arg ( ) ) CALLEE 14 ASN1_ITEM_lookup LEAF_NODE 15 ASN1_ITEM_lookup LEAF_NODE 14 ( ARGUMENT 14 opt_arg ( ) FUNCTION_CALL 15 opt_arg ( ) CALLEE 16 opt_arg LEAF_NODE 17 opt_arg LEAF_NODE 16 ( LEAF_NODE 16 ) LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 it == NULL EXPR 11 it == NULL FIELD 12 it LEAF_NODE 13 it EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 SIMPLE_DECL 12 size_t tmp ; VAR_DECL 13 size_t tmp TYPE 14 size_t TYPE_NAME 15 size_t LEAF_NODE 16 size_t NAME 14 tmp LEAF_NODE 15 tmp LEAF_NODE 13 ; EXPR_STATEMENT 12 BIO_printf ( bio_err , \"Unknown item name %s\\n\" , opt_arg ( ) ) ; EXPR 13 BIO_printf ( bio_err , \"Unknown item name %s\\n\" , opt_arg ( ) ) FUNCTION_CALL 14 BIO_printf ( bio_err , \"Unknown item name %s\\n\" , opt_arg ( ) ) CALLEE 15 BIO_printf LEAF_NODE 16 BIO_printf LEAF_NODE 15 ( ARGUMENT 15 bio_err FIELD 16 bio_err LEAF_NODE 17 bio_err LEAF_NODE 15 , ARGUMENT 15 \"Unknown item name %s\\n\" FIELD 16 \"Unknown item name %s\\n\" LEAF_NODE 17 \"Unknown item name %s\\n\" LEAF_NODE 15 , ARGUMENT 15 opt_arg ( ) FUNCTION_CALL 16 opt_arg ( ) CALLEE 17 opt_arg LEAF_NODE 18 opt_arg LEAF_NODE 17 ( LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 BIO_puts ( bio_err , \"Supported types:\\n\" ) ; EXPR 13 BIO_puts ( bio_err , \"Supported types:\\n\" ) FUNCTION_CALL 14 BIO_puts ( bio_err , \"Supported types:\\n\" ) CALLEE 15 BIO_puts LEAF_NODE 16 BIO_puts LEAF_NODE 15 ( ARGUMENT 15 bio_err FIELD 16 bio_err LEAF_NODE 17 bio_err LEAF_NODE 15 , ARGUMENT 15 \"Supported types:\\n\" FIELD 16 \"Supported types:\\n\" LEAF_NODE 17 \"Supported types:\\n\" LEAF_NODE 15 ) LEAF_NODE 13 ; ITERATION 12 KEYWORD 13 for LEAF_NODE 14 for LEAF_NODE 13 ( FOR_INIT 13 tmp = 0 ; EXPR 14 tmp = 0 ASSIGN 15 tmp = 0 LVAL 16 tmp FIELD 17 tmp LEAF_NODE 18 tmp ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 14 ; LEAF_NODE 13 CONDITION LEAF_NODE 13 ; FOR_EXPR 13 tmp ++ EXPR 14 tmp ++ FIELD 15 tmp ++ LEAF_NODE 16 tmp LEAF_NODE 16 ++ LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 EXPR_STATEMENT 15 it = ASN1_ITEM_get ( tmp ) ; EXPR 16 it = ASN1_ITEM_get ( tmp ) ASSIGN 17 it = ASN1_ITEM_get ( tmp ) LVAL 18 it FIELD 19 it LEAF_NODE 20 it ASSIGN_OP 18 = LEAF_NODE 19 = RVAL 18 ASN1_ITEM_get ( tmp ) FUNCTION_CALL 19 ASN1_ITEM_get ( tmp ) CALLEE 20 ASN1_ITEM_get LEAF_NODE 21 ASN1_ITEM_get LEAF_NODE 20 ( ARGUMENT 20 tmp FIELD 21 tmp LEAF_NODE 22 tmp LEAF_NODE 20 ) LEAF_NODE 16 ; SELECTION 15 KEYWORD 16 if LEAF_NODE 17 if LEAF_NODE 16 ( CONDITION 16 it == NULL EXPR 17 it == NULL FIELD 18 it LEAF_NODE 19 it EQ_OPERATOR 18 == LEAF_NODE 19 == FIELD 18 NULL LEAF_NODE 19 NULL LEAF_NODE 16 ) STATEMENTS 16 JUMP_STATEMENT 17 break DESTINATION ; KEYWORD 18 break LEAF_NODE 19 break LEAF_NODE 18 DESTINATION LEAF_NODE 18 ; EXPR_STATEMENT 15 BIO_printf ( bio_err , \" %s\\n\" , it -> sname ) ; EXPR 16 BIO_printf ( bio_err , \" %s\\n\" , it -> sname ) FUNCTION_CALL 17 BIO_printf ( bio_err , \" %s\\n\" , it -> sname ) CALLEE 18 BIO_printf LEAF_NODE 19 BIO_printf LEAF_NODE 18 ( ARGUMENT 18 bio_err FIELD 19 bio_err LEAF_NODE 20 bio_err LEAF_NODE 18 , ARGUMENT 18 \" %s\\n\" FIELD 19 \" %s\\n\" LEAF_NODE 20 \" %s\\n\" LEAF_NODE 18 , ARGUMENT 18 it -> sname FIELD 19 it -> sname LEAF_NODE 20 it LEAF_NODE 20 -> LEAF_NODE 20 sname LEAF_NODE 18 ) LEAF_NODE 16 ; LEAF_NODE 14 } JUMP_STATEMENT 12 goto end ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 end LEAF_NODE 14 end LEAF_NODE 13 ; LEAF_NODE 11 } JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 argc = opt_num_rest ( ) ; EXPR 4 argc = opt_num_rest ( ) ASSIGN 5 argc = opt_num_rest ( ) LVAL 6 argc FIELD 7 argc LEAF_NODE 8 argc ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 opt_num_rest ( ) FUNCTION_CALL 7 opt_num_rest ( ) CALLEE 8 opt_num_rest LEAF_NODE 9 opt_num_rest LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 argc != 0 EXPR 5 argc != 0 FIELD 6 argc LEAF_NODE 7 argc EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto opthelp ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 opthelp LEAF_NODE 7 opthelp LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 oidfile != NULL EXPR 5 oidfile != NULL FIELD 6 oidfile LEAF_NODE 7 oidfile EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 in = bio_open_default ( oidfile , 'r' , FORMAT_TEXT ) ; EXPR 7 in = bio_open_default ( oidfile , 'r' , FORMAT_TEXT ) ASSIGN 8 in = bio_open_default ( oidfile , 'r' , FORMAT_TEXT ) LVAL 9 in FIELD 10 in LEAF_NODE 11 in ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 bio_open_default ( oidfile , 'r' , FORMAT_TEXT ) FUNCTION_CALL 10 bio_open_default ( oidfile , 'r' , FORMAT_TEXT ) CALLEE 11 bio_open_default LEAF_NODE 12 bio_open_default LEAF_NODE 11 ( ARGUMENT 11 oidfile FIELD 12 oidfile LEAF_NODE 13 oidfile LEAF_NODE 11 , ARGUMENT 11 'r' FIELD 12 'r' LEAF_NODE 13 'r' LEAF_NODE 11 , ARGUMENT 11 FORMAT_TEXT FIELD 12 FORMAT_TEXT LEAF_NODE 13 FORMAT_TEXT LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 in == NULL EXPR 8 in == NULL FIELD 9 in LEAF_NODE 10 in EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 goto end ; KEYWORD 9 goto LEAF_NODE 10 goto DESTINATION 9 end LEAF_NODE 10 end LEAF_NODE 9 ; EXPR_STATEMENT 6 OBJ_create_objects ( in ) ; EXPR 7 OBJ_create_objects ( in ) FUNCTION_CALL 8 OBJ_create_objects ( in ) CALLEE 9 OBJ_create_objects LEAF_NODE 10 OBJ_create_objects LEAF_NODE 9 ( ARGUMENT 9 in FIELD 10 in LEAF_NODE 11 in LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 BIO_free ( in ) ; EXPR 7 BIO_free ( in ) FUNCTION_CALL 8 BIO_free ( in ) CALLEE 9 BIO_free LEAF_NODE 10 BIO_free LEAF_NODE 9 ( ARGUMENT 9 in FIELD 10 in LEAF_NODE 11 in LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( in = bio_open_default ( infile , 'r' , informat ) ) == NULL EXPR 5 ( in = bio_open_default ( infile , 'r' , informat ) ) == NULL LEAF_NODE 6 ( ASSIGN 6 in = bio_open_default ( infile , 'r' , informat ) LVAL 7 in FIELD 8 in LEAF_NODE 9 in ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 bio_open_default ( infile , 'r' , informat ) FUNCTION_CALL 8 bio_open_default ( infile , 'r' , informat ) CALLEE 9 bio_open_default LEAF_NODE 10 bio_open_default LEAF_NODE 9 ( ARGUMENT 9 infile FIELD 10 infile LEAF_NODE 11 infile LEAF_NODE 9 , ARGUMENT 9 'r' FIELD 10 'r' LEAF_NODE 11 'r' LEAF_NODE 9 , ARGUMENT 9 informat FIELD 10 informat LEAF_NODE 11 informat LEAF_NODE 9 ) LEAF_NODE 6 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto end ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 end LEAF_NODE 7 end LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 derfile && ( derout = bio_open_default ( derfile , 'w' , FORMAT_ASN1 ) ) == NULL EXPR 5 derfile && ( derout = bio_open_default ( derfile , 'w' , FORMAT_ASN1 ) ) == NULL AND 6 derfile && ( derout = bio_open_default ( derfile , 'w' , FORMAT_ASN1 ) ) == NULL EXPR 7 derfile FIELD 8 derfile LEAF_NODE 9 derfile LEAF_NODE 7 && EXPR 7 ( derout = bio_open_default ( derfile , 'w' , FORMAT_ASN1 ) ) == NULL LEAF_NODE 8 ( ASSIGN 8 derout = bio_open_default ( derfile , 'w' , FORMAT_ASN1 ) LVAL 9 derout FIELD 10 derout LEAF_NODE 11 derout ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 bio_open_default ( derfile , 'w' , FORMAT_ASN1 ) FUNCTION_CALL 10 bio_open_default ( derfile , 'w' , FORMAT_ASN1 ) CALLEE 11 bio_open_default LEAF_NODE 12 bio_open_default LEAF_NODE 11 ( ARGUMENT 11 derfile FIELD 12 derfile LEAF_NODE 13 derfile LEAF_NODE 11 , ARGUMENT 11 'w' FIELD 12 'w' LEAF_NODE 13 'w' LEAF_NODE 11 , ARGUMENT 11 FORMAT_ASN1 FIELD 12 FORMAT_ASN1 LEAF_NODE 13 FORMAT_ASN1 LEAF_NODE 11 ) LEAF_NODE 8 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto end ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 end LEAF_NODE 7 end LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 strictpem EXPR 5 strictpem FIELD 6 strictpem LEAF_NODE 7 strictpem LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 PEM_read_bio ( in , & name , & header , & str , & num ) != 1 EXPR 8 PEM_read_bio ( in , & name , & header , & str , & num ) != 1 FUNCTION_CALL 9 PEM_read_bio ( in , & name , & header , & str , & num ) CALLEE 10 PEM_read_bio LEAF_NODE 11 PEM_read_bio LEAF_NODE 10 ( ARGUMENT 10 in FIELD 11 in LEAF_NODE 12 in LEAF_NODE 10 , ARGUMENT 10 & name UNARY_EXPR 11 & name UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 name LEAF_NODE 13 name LEAF_NODE 10 , ARGUMENT 10 & header UNARY_EXPR 11 & header UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 header LEAF_NODE 13 header LEAF_NODE 10 , ARGUMENT 10 & str UNARY_EXPR 11 & str UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 str LEAF_NODE 13 str LEAF_NODE 10 , ARGUMENT 10 & num UNARY_EXPR 11 & num UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 num LEAF_NODE 13 num LEAF_NODE 10 ) EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_printf ( bio_err , \"Error reading PEM file\\n\" ) ; EXPR 10 BIO_printf ( bio_err , \"Error reading PEM file\\n\" ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"Error reading PEM file\\n\" ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"Error reading PEM file\\n\" FIELD 13 \"Error reading PEM file\\n\" LEAF_NODE 14 \"Error reading PEM file\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ERR_print_errors ( bio_err ) ; EXPR 10 ERR_print_errors ( bio_err ) FUNCTION_CALL 11 ERR_print_errors ( bio_err ) CALLEE 12 ERR_print_errors LEAF_NODE 13 ERR_print_errors LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto end ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 end LEAF_NODE 11 end LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( buf = BUF_MEM_new ( ) ) == NULL EXPR 8 ( buf = BUF_MEM_new ( ) ) == NULL LEAF_NODE 9 ( ASSIGN 9 buf = BUF_MEM_new ( ) LVAL 10 buf FIELD 11 buf LEAF_NODE 12 buf ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 BUF_MEM_new ( ) FUNCTION_CALL 11 BUF_MEM_new ( ) CALLEE 12 BUF_MEM_new LEAF_NODE 13 BUF_MEM_new LEAF_NODE 12 ( LEAF_NODE 12 ) LEAF_NODE 9 ) EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 goto end ; KEYWORD 9 goto LEAF_NODE 10 goto DESTINATION 9 end LEAF_NODE 10 end LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! BUF_MEM_grow ( buf , BUFSIZ * 8 ) EXPR 8 ! BUF_MEM_grow ( buf , BUFSIZ * 8 ) UNARY_EXPR 9 ! BUF_MEM_grow ( buf , BUFSIZ * 8 ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 BUF_MEM_grow ( buf , BUFSIZ * 8 ) CALLEE 11 BUF_MEM_grow LEAF_NODE 12 BUF_MEM_grow LEAF_NODE 11 ( ARGUMENT 11 buf FIELD 12 buf LEAF_NODE 13 buf LEAF_NODE 11 , ARGUMENT 11 BUFSIZ * 8 FIELD 12 BUFSIZ LEAF_NODE 13 BUFSIZ LEAF_NODE 12 * FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 goto end ; KEYWORD 9 goto LEAF_NODE 10 goto DESTINATION 9 end LEAF_NODE 10 end LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 genstr || genconf EXPR 8 genstr || genconf OR 9 genstr || genconf EXPR 10 genstr FIELD 11 genstr LEAF_NODE 12 genstr LEAF_NODE 10 || EXPR 10 genconf FIELD 11 genconf LEAF_NODE 12 genconf LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 num = do_generate ( genstr , genconf , buf ) ; EXPR 10 num = do_generate ( genstr , genconf , buf ) ASSIGN 11 num = do_generate ( genstr , genconf , buf ) LVAL 12 num FIELD 13 num LEAF_NODE 14 num ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 do_generate ( genstr , genconf , buf ) FUNCTION_CALL 13 do_generate ( genstr , genconf , buf ) CALLEE 14 do_generate LEAF_NODE 15 do_generate LEAF_NODE 14 ( ARGUMENT 14 genstr FIELD 15 genstr LEAF_NODE 16 genstr LEAF_NODE 14 , ARGUMENT 14 genconf FIELD 15 genconf LEAF_NODE 16 genconf LEAF_NODE 14 , ARGUMENT 14 buf FIELD 15 buf LEAF_NODE 16 buf LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 num < 0 EXPR 11 num < 0 FIELD 12 num LEAF_NODE 13 num REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ERR_print_errors ( bio_err ) ; EXPR 13 ERR_print_errors ( bio_err ) FUNCTION_CALL 14 ERR_print_errors ( bio_err ) CALLEE 15 ERR_print_errors LEAF_NODE 16 ERR_print_errors LEAF_NODE 15 ( ARGUMENT 15 bio_err FIELD 16 bio_err LEAF_NODE 17 bio_err LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 goto end ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 end LEAF_NODE 14 end LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 informat == FORMAT_PEM EXPR 11 informat == FORMAT_PEM FIELD 12 informat LEAF_NODE 13 informat EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 FORMAT_PEM LEAF_NODE 13 FORMAT_PEM LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 SIMPLE_DECL 12 BIO * tmp ; VAR_DECL 13 BIO * tmp TYPE 14 BIO * TYPE_NAME 15 BIO LEAF_NODE 16 BIO POINTER 15 * LEAF_NODE 16 * NAME 14 tmp LEAF_NODE 15 tmp LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 ( b64 = BIO_new ( BIO_f_base64 ( ) ) ) == NULL EXPR 14 ( b64 = BIO_new ( BIO_f_base64 ( ) ) ) == NULL LEAF_NODE 15 ( ASSIGN 15 b64 = BIO_new ( BIO_f_base64 ( ) ) LVAL 16 b64 FIELD 17 b64 LEAF_NODE 18 b64 ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 BIO_new ( BIO_f_base64 ( ) ) FUNCTION_CALL 17 BIO_new ( BIO_f_base64 ( ) ) CALLEE 18 BIO_new LEAF_NODE 19 BIO_new LEAF_NODE 18 ( ARGUMENT 18 BIO_f_base64 ( ) FUNCTION_CALL 19 BIO_f_base64 ( ) CALLEE 20 BIO_f_base64 LEAF_NODE 21 BIO_f_base64 LEAF_NODE 20 ( LEAF_NODE 20 ) LEAF_NODE 18 ) LEAF_NODE 15 ) EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 NULL LEAF_NODE 16 NULL LEAF_NODE 13 ) STATEMENTS 13 JUMP_STATEMENT 14 goto end ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 end LEAF_NODE 16 end LEAF_NODE 15 ; EXPR_STATEMENT 12 BIO_push ( b64 , in ) ; EXPR 13 BIO_push ( b64 , in ) FUNCTION_CALL 14 BIO_push ( b64 , in ) CALLEE 15 BIO_push LEAF_NODE 16 BIO_push LEAF_NODE 15 ( ARGUMENT 15 b64 FIELD 16 b64 LEAF_NODE 17 b64 LEAF_NODE 15 , ARGUMENT 15 in FIELD 16 in LEAF_NODE 17 in LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 tmp = in ; EXPR 13 tmp = in ASSIGN 14 tmp = in LVAL 15 tmp FIELD 16 tmp LEAF_NODE 17 tmp ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 in FIELD 16 in LEAF_NODE 17 in LEAF_NODE 13 ; EXPR_STATEMENT 12 in = b64 ; EXPR 13 in = b64 ASSIGN 14 in = b64 LVAL 15 in FIELD 16 in LEAF_NODE 17 in ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 b64 FIELD 16 b64 LEAF_NODE 17 b64 LEAF_NODE 13 ; EXPR_STATEMENT 12 b64 = tmp ; EXPR 13 b64 = tmp ASSIGN 14 b64 = tmp LVAL 15 b64 FIELD 16 b64 LEAF_NODE 17 b64 ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 tmp FIELD 16 tmp LEAF_NODE 17 tmp LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 num = 0 ; EXPR 10 num = 0 ASSIGN 11 num = 0 LVAL 12 num FIELD 13 num LEAF_NODE 14 num ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; ITERATION 9 KEYWORD 10 for LEAF_NODE 11 for LEAF_NODE 10 ( FOR_INIT 10 ; LEAF_NODE 11 ; LEAF_NODE 10 CONDITION LEAF_NODE 10 ; LEAF_NODE 10 FOR_EXPR LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 ! BUF_MEM_grow ( buf , num + BUFSIZ ) EXPR 14 ! BUF_MEM_grow ( buf , num + BUFSIZ ) UNARY_EXPR 15 ! BUF_MEM_grow ( buf , num + BUFSIZ ) UNARY_OPERATOR 16 ! LEAF_NODE 17 ! FUNCTION_CALL 16 BUF_MEM_grow ( buf , num + BUFSIZ ) CALLEE 17 BUF_MEM_grow LEAF_NODE 18 BUF_MEM_grow LEAF_NODE 17 ( ARGUMENT 17 buf FIELD 18 buf LEAF_NODE 19 buf LEAF_NODE 17 , ARGUMENT 17 num + BUFSIZ FIELD 18 num LEAF_NODE 19 num LEAF_NODE 18 + FIELD 18 BUFSIZ LEAF_NODE 19 BUFSIZ LEAF_NODE 17 ) LEAF_NODE 13 ) STATEMENTS 13 JUMP_STATEMENT 14 goto end ; KEYWORD 15 goto LEAF_NODE 16 goto DESTINATION 15 end LEAF_NODE 16 end LEAF_NODE 15 ; EXPR_STATEMENT 12 i = BIO_read ( in , & ( buf -> data [ num ] ) , BUFSIZ ) ; EXPR 13 i = BIO_read ( in , & ( buf -> data [ num ] ) , BUFSIZ ) ASSIGN 14 i = BIO_read ( in , & ( buf -> data [ num ] ) , BUFSIZ ) LVAL 15 i FIELD 16 i LEAF_NODE 17 i ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 BIO_read ( in , & ( buf -> data [ num ] ) , BUFSIZ ) FUNCTION_CALL 16 BIO_read ( in , & ( buf -> data [ num ] ) , BUFSIZ ) CALLEE 17 BIO_read LEAF_NODE 18 BIO_read LEAF_NODE 17 ( ARGUMENT 17 in FIELD 18 in LEAF_NODE 19 in LEAF_NODE 17 , ARGUMENT 17 & ( buf -> data [ num ] ) UNARY_EXPR 18 & ( buf -> data [ num ] ) UNARY_OPERATOR 19 & LEAF_NODE 20 & LEAF_NODE 19 ( FIELD 19 buf -> data [ num ] LEAF_NODE 20 buf LEAF_NODE 20 -> LEAF_NODE 20 data LEAF_NODE 20 [ EXPR 20 num FIELD 21 num LEAF_NODE 22 num LEAF_NODE 20 ] LEAF_NODE 19 ) LEAF_NODE 17 , ARGUMENT 17 BUFSIZ FIELD 18 BUFSIZ LEAF_NODE 19 BUFSIZ LEAF_NODE 17 ) LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 i <= 0 EXPR 14 i <= 0 FIELD 15 i LEAF_NODE 16 i REL_OPERATOR 15 <= LEAF_NODE 16 <= FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 13 ) STATEMENTS 13 JUMP_STATEMENT 14 break DESTINATION ; KEYWORD 15 break LEAF_NODE 16 break LEAF_NODE 15 DESTINATION LEAF_NODE 15 ; EXPR_STATEMENT 12 num += i ; EXPR 13 num += i ASSIGN 14 num += i LVAL 15 num FIELD 16 num LEAF_NODE 17 num ASSIGN_OP 15 += LEAF_NODE 16 += RVAL 15 i FIELD 16 i LEAF_NODE 17 i LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } EXPR_STATEMENT 6 str = ( unsigned char * ) buf -> data ; EXPR 7 str = ( unsigned char * ) buf -> data ASSIGN 8 str = ( unsigned char * ) buf -> data LVAL 9 str FIELD 10 str LEAF_NODE 11 str ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( unsigned char * ) buf -> data LEAF_NODE 10 ( TYPE_NAME 10 unsigned char LEAF_NODE 11 unsigned LEAF_NODE 11 char LEAF_NODE 10 * LEAF_NODE 10 ) FIELD 10 buf -> data LEAF_NODE 11 buf LEAF_NODE 11 -> LEAF_NODE 11 data LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 sk_OPENSSL_STRING_num ( osk ) EXPR 5 sk_OPENSSL_STRING_num ( osk ) FUNCTION_CALL 6 sk_OPENSSL_STRING_num ( osk ) CALLEE 7 sk_OPENSSL_STRING_num LEAF_NODE 8 sk_OPENSSL_STRING_num LEAF_NODE 7 ( ARGUMENT 7 osk FIELD 8 osk LEAF_NODE 9 osk LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 tmpbuf = str ; EXPR 7 tmpbuf = str ASSIGN 8 tmpbuf = str LVAL 9 tmpbuf FIELD 10 tmpbuf LEAF_NODE 11 tmpbuf ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 str FIELD 10 str LEAF_NODE 11 str LEAF_NODE 7 ; EXPR_STATEMENT 6 tmplen = num ; EXPR 7 tmplen = num ASSIGN 8 tmplen = num LVAL 9 tmplen FIELD 10 tmplen LEAF_NODE 11 tmplen ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 num FIELD 10 num LEAF_NODE 11 num LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 i = 0 ; EXPR 8 i = 0 ASSIGN 9 i = 0 LVAL 10 i FIELD 11 i LEAF_NODE 12 i ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 8 ; CONDITION 7 i < sk_OPENSSL_STRING_num ( osk ) EXPR 8 i < sk_OPENSSL_STRING_num ( osk ) FIELD 9 i LEAF_NODE 10 i REL_OPERATOR 9 < LEAF_NODE 10 < FUNCTION_CALL 9 sk_OPENSSL_STRING_num ( osk ) CALLEE 10 sk_OPENSSL_STRING_num LEAF_NODE 11 sk_OPENSSL_STRING_num LEAF_NODE 10 ( ARGUMENT 10 osk FIELD 11 osk LEAF_NODE 12 osk LEAF_NODE 10 ) LEAF_NODE 7 ; FOR_EXPR 7 i ++ EXPR 8 i ++ FIELD 9 i ++ LEAF_NODE 10 i LEAF_NODE 10 ++ LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SIMPLE_DECL 9 ASN1_TYPE * atmp ; VAR_DECL 10 ASN1_TYPE * atmp TYPE 11 ASN1_TYPE * TYPE_NAME 12 ASN1_TYPE LEAF_NODE 13 ASN1_TYPE POINTER 12 * LEAF_NODE 13 * NAME 11 atmp LEAF_NODE 12 atmp LEAF_NODE 10 ; SIMPLE_DECL 9 int typ ; VAR_DECL 10 int typ TYPE 11 int TYPE_NAME 12 int LEAF_NODE 13 int NAME 11 typ LEAF_NODE 12 typ LEAF_NODE 10 ; EXPR_STATEMENT 9 j = strtol ( sk_OPENSSL_STRING_value ( osk , i ) , NULL , 0 ) ; EXPR 10 j = strtol ( sk_OPENSSL_STRING_value ( osk , i ) , NULL , 0 ) ASSIGN 11 j = strtol ( sk_OPENSSL_STRING_value ( osk , i ) , NULL , 0 ) LVAL 12 j FIELD 13 j LEAF_NODE 14 j ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 strtol ( sk_OPENSSL_STRING_value ( osk , i ) , NULL , 0 ) FUNCTION_CALL 13 strtol ( sk_OPENSSL_STRING_value ( osk , i ) , NULL , 0 ) CALLEE 14 strtol LEAF_NODE 15 strtol LEAF_NODE 14 ( ARGUMENT 14 sk_OPENSSL_STRING_value ( osk , i ) FUNCTION_CALL 15 sk_OPENSSL_STRING_value ( osk , i ) CALLEE 16 sk_OPENSSL_STRING_value LEAF_NODE 17 sk_OPENSSL_STRING_value LEAF_NODE 16 ( ARGUMENT 16 osk FIELD 17 osk LEAF_NODE 18 osk LEAF_NODE 16 , ARGUMENT 16 i FIELD 17 i LEAF_NODE 18 i LEAF_NODE 16 ) LEAF_NODE 14 , ARGUMENT 14 NULL FIELD 15 NULL LEAF_NODE 16 NULL LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 j <= 0 || j >= tmplen EXPR 11 j <= 0 || j >= tmplen OR 12 j <= 0 || j >= tmplen EXPR 13 j <= 0 FIELD 14 j LEAF_NODE 15 j REL_OPERATOR 14 <= LEAF_NODE 15 <= FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 13 || EXPR 13 j >= tmplen FIELD 14 j LEAF_NODE 15 j REL_OPERATOR 14 >= LEAF_NODE 15 >= FIELD 14 tmplen LEAF_NODE 15 tmplen LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 BIO_printf ( bio_err , \"'%s' is out of range\\n\" , sk_OPENSSL_STRING_value ( osk , i ) ) ; EXPR 13 BIO_printf ( bio_err , \"'%s' is out of range\\n\" , sk_OPENSSL_STRING_value ( osk , i ) ) FUNCTION_CALL 14 BIO_printf ( bio_err , \"'%s' is out of range\\n\" , sk_OPENSSL_STRING_value ( osk , i ) ) CALLEE 15 BIO_printf LEAF_NODE 16 BIO_printf LEAF_NODE 15 ( ARGUMENT 15 bio_err FIELD 16 bio_err LEAF_NODE 17 bio_err LEAF_NODE 15 , ARGUMENT 15 \"'%s' is out of range\\n\" FIELD 16 \"'%s' is out of range\\n\" LEAF_NODE 17 \"'%s' is out of range\\n\" LEAF_NODE 15 , ARGUMENT 15 sk_OPENSSL_STRING_value ( osk , i ) FUNCTION_CALL 16 sk_OPENSSL_STRING_value ( osk , i ) CALLEE 17 sk_OPENSSL_STRING_value LEAF_NODE 18 sk_OPENSSL_STRING_value LEAF_NODE 17 ( ARGUMENT 17 osk FIELD 18 osk LEAF_NODE 19 osk LEAF_NODE 17 , ARGUMENT 17 i FIELD 18 i LEAF_NODE 19 i LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 continue DESTINATION ; KEYWORD 13 continue LEAF_NODE 14 continue LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 tmpbuf += j ; EXPR 10 tmpbuf += j ASSIGN 11 tmpbuf += j LVAL 12 tmpbuf FIELD 13 tmpbuf LEAF_NODE 14 tmpbuf ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 j FIELD 13 j LEAF_NODE 14 j LEAF_NODE 10 ; EXPR_STATEMENT 9 tmplen -= j ; EXPR 10 tmplen -= j ASSIGN 11 tmplen -= j LVAL 12 tmplen FIELD 13 tmplen LEAF_NODE 14 tmplen ASSIGN_OP 12 -= LEAF_NODE 13 -= RVAL 12 j FIELD 13 j LEAF_NODE 14 j LEAF_NODE 10 ; EXPR_STATEMENT 9 atmp = at ; EXPR 10 atmp = at ASSIGN 11 atmp = at LVAL 12 atmp FIELD 13 atmp LEAF_NODE 14 atmp ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 at FIELD 13 at LEAF_NODE 14 at LEAF_NODE 10 ; EXPR_STATEMENT 9 ctmpbuf = tmpbuf ; EXPR 10 ctmpbuf = tmpbuf ASSIGN 11 ctmpbuf = tmpbuf LVAL 12 ctmpbuf FIELD 13 ctmpbuf LEAF_NODE 14 ctmpbuf ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 tmpbuf FIELD 13 tmpbuf LEAF_NODE 14 tmpbuf LEAF_NODE 10 ; EXPR_STATEMENT 9 at = d2i_ASN1_TYPE ( NULL , & ctmpbuf , tmplen ) ; EXPR 10 at = d2i_ASN1_TYPE ( NULL , & ctmpbuf , tmplen ) ASSIGN 11 at = d2i_ASN1_TYPE ( NULL , & ctmpbuf , tmplen ) LVAL 12 at FIELD 13 at LEAF_NODE 14 at ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 d2i_ASN1_TYPE ( NULL , & ctmpbuf , tmplen ) FUNCTION_CALL 13 d2i_ASN1_TYPE ( NULL , & ctmpbuf , tmplen ) CALLEE 14 d2i_ASN1_TYPE LEAF_NODE 15 d2i_ASN1_TYPE LEAF_NODE 14 ( ARGUMENT 14 NULL FIELD 15 NULL LEAF_NODE 16 NULL LEAF_NODE 14 , ARGUMENT 14 & ctmpbuf UNARY_EXPR 15 & ctmpbuf UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 ctmpbuf LEAF_NODE 17 ctmpbuf LEAF_NODE 14 , ARGUMENT 14 tmplen FIELD 15 tmplen LEAF_NODE 16 tmplen LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ASN1_TYPE_free ( atmp ) ; EXPR 10 ASN1_TYPE_free ( atmp ) FUNCTION_CALL 11 ASN1_TYPE_free ( atmp ) CALLEE 12 ASN1_TYPE_free LEAF_NODE 13 ASN1_TYPE_free LEAF_NODE 12 ( ARGUMENT 12 atmp FIELD 13 atmp LEAF_NODE 14 atmp LEAF_NODE 12 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! at EXPR 11 ! at UNARY_EXPR 12 ! at UNARY_OPERATOR 13 ! LEAF_NODE 14 ! FIELD 13 at LEAF_NODE 14 at LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 BIO_printf ( bio_err , \"Error parsing structure\\n\" ) ; EXPR 13 BIO_printf ( bio_err , \"Error parsing structure\\n\" ) FUNCTION_CALL 14 BIO_printf ( bio_err , \"Error parsing structure\\n\" ) CALLEE 15 BIO_printf LEAF_NODE 16 BIO_printf LEAF_NODE 15 ( ARGUMENT 15 bio_err FIELD 16 bio_err LEAF_NODE 17 bio_err LEAF_NODE 15 , ARGUMENT 15 \"Error parsing structure\\n\" FIELD 16 \"Error parsing structure\\n\" LEAF_NODE 17 \"Error parsing structure\\n\" LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 ERR_print_errors ( bio_err ) ; EXPR 13 ERR_print_errors ( bio_err ) FUNCTION_CALL 14 ERR_print_errors ( bio_err ) CALLEE 15 ERR_print_errors LEAF_NODE 16 ERR_print_errors LEAF_NODE 15 ( ARGUMENT 15 bio_err FIELD 16 bio_err LEAF_NODE 17 bio_err LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 goto end ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 end LEAF_NODE 14 end LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 typ = ASN1_TYPE_get ( at ) ; EXPR 10 typ = ASN1_TYPE_get ( at ) ASSIGN 11 typ = ASN1_TYPE_get ( at ) LVAL 12 typ FIELD 13 typ LEAF_NODE 14 typ ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ASN1_TYPE_get ( at ) FUNCTION_CALL 13 ASN1_TYPE_get ( at ) CALLEE 14 ASN1_TYPE_get LEAF_NODE 15 ASN1_TYPE_get LEAF_NODE 14 ( ARGUMENT 14 at FIELD 15 at LEAF_NODE 16 at LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ( typ == V_ASN1_OBJECT ) || ( typ == V_ASN1_BOOLEAN ) || ( typ == V_ASN1_NULL ) EXPR 11 ( typ == V_ASN1_OBJECT ) || ( typ == V_ASN1_BOOLEAN ) || ( typ == V_ASN1_NULL ) OR 12 ( typ == V_ASN1_OBJECT ) || ( typ == V_ASN1_BOOLEAN ) || ( typ == V_ASN1_NULL ) EXPR 13 ( typ == V_ASN1_OBJECT ) LEAF_NODE 14 ( FIELD 14 typ LEAF_NODE 15 typ EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 V_ASN1_OBJECT LEAF_NODE 15 V_ASN1_OBJECT LEAF_NODE 14 ) LEAF_NODE 13 || EXPR 13 ( typ == V_ASN1_BOOLEAN ) || ( typ == V_ASN1_NULL ) OR 14 ( typ == V_ASN1_BOOLEAN ) || ( typ == V_ASN1_NULL ) EXPR 15 ( typ == V_ASN1_BOOLEAN ) LEAF_NODE 16 ( FIELD 16 typ LEAF_NODE 17 typ EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 V_ASN1_BOOLEAN LEAF_NODE 17 V_ASN1_BOOLEAN LEAF_NODE 16 ) LEAF_NODE 15 || EXPR 15 ( typ == V_ASN1_NULL ) LEAF_NODE 16 ( FIELD 16 typ LEAF_NODE 17 typ EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 V_ASN1_NULL LEAF_NODE 17 V_ASN1_NULL LEAF_NODE 16 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 BIO_printf ( bio_err , \"Can't parse %s type\\n\" , ASN1_tag2str ( typ ) ) ; EXPR 13 BIO_printf ( bio_err , \"Can't parse %s type\\n\" , ASN1_tag2str ( typ ) ) FUNCTION_CALL 14 BIO_printf ( bio_err , \"Can't parse %s type\\n\" , ASN1_tag2str ( typ ) ) CALLEE 15 BIO_printf LEAF_NODE 16 BIO_printf LEAF_NODE 15 ( ARGUMENT 15 bio_err FIELD 16 bio_err LEAF_NODE 17 bio_err LEAF_NODE 15 , ARGUMENT 15 \"Can't parse %s type\\n\" FIELD 16 \"Can't parse %s type\\n\" LEAF_NODE 17 \"Can't parse %s type\\n\" LEAF_NODE 15 , ARGUMENT 15 ASN1_tag2str ( typ ) FUNCTION_CALL 16 ASN1_tag2str ( typ ) CALLEE 17 ASN1_tag2str LEAF_NODE 18 ASN1_tag2str LEAF_NODE 17 ( ARGUMENT 17 typ FIELD 18 typ LEAF_NODE 19 typ LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 ERR_print_errors ( bio_err ) ; EXPR 13 ERR_print_errors ( bio_err ) FUNCTION_CALL 14 ERR_print_errors ( bio_err ) CALLEE 15 ERR_print_errors LEAF_NODE 16 ERR_print_errors LEAF_NODE 15 ( ARGUMENT 15 bio_err FIELD 16 bio_err LEAF_NODE 17 bio_err LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 goto end ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 end LEAF_NODE 14 end LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 tmpbuf = at -> value . asn1_string -> data ; EXPR 10 tmpbuf = at -> value . asn1_string -> data ASSIGN 11 tmpbuf = at -> value . asn1_string -> data LVAL 12 tmpbuf FIELD 13 tmpbuf LEAF_NODE 14 tmpbuf ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 at -> value . asn1_string -> data FIELD 13 at -> value . asn1_string -> data LEAF_NODE 14 at LEAF_NODE 14 -> LEAF_NODE 14 value LEAF_NODE 14 . LEAF_NODE 14 asn1_string LEAF_NODE 14 -> LEAF_NODE 14 data LEAF_NODE 10 ; EXPR_STATEMENT 9 tmplen = at -> value . asn1_string -> length ; EXPR 10 tmplen = at -> value . asn1_string -> length ASSIGN 11 tmplen = at -> value . asn1_string -> length LVAL 12 tmplen FIELD 13 tmplen LEAF_NODE 14 tmplen ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 at -> value . asn1_string -> length FIELD 13 at -> value . asn1_string -> length LEAF_NODE 14 at LEAF_NODE 14 -> LEAF_NODE 14 value LEAF_NODE 14 . LEAF_NODE 14 asn1_string LEAF_NODE 14 -> LEAF_NODE 14 length LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 str = tmpbuf ; EXPR 7 str = tmpbuf ASSIGN 8 str = tmpbuf LVAL 9 str FIELD 10 str LEAF_NODE 11 str ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 tmpbuf FIELD 10 tmpbuf LEAF_NODE 11 tmpbuf LEAF_NODE 7 ; EXPR_STATEMENT 6 num = tmplen ; EXPR 7 num = tmplen ASSIGN 8 num = tmplen LVAL 9 num FIELD 10 num LEAF_NODE 11 num ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 tmplen FIELD 10 tmplen LEAF_NODE 11 tmplen LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 offset < 0 || offset >= num EXPR 5 offset < 0 || offset >= num OR 6 offset < 0 || offset >= num EXPR 7 offset < 0 FIELD 8 offset LEAF_NODE 9 offset REL_OPERATOR 8 < LEAF_NODE 9 < FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 7 || EXPR 7 offset >= num FIELD 8 offset LEAF_NODE 9 offset REL_OPERATOR 8 >= LEAF_NODE 9 >= FIELD 8 num LEAF_NODE 9 num LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 BIO_printf ( bio_err , \"Error: offset out of range\\n\" ) ; EXPR 7 BIO_printf ( bio_err , \"Error: offset out of range\\n\" ) FUNCTION_CALL 8 BIO_printf ( bio_err , \"Error: offset out of range\\n\" ) CALLEE 9 BIO_printf LEAF_NODE 10 BIO_printf LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 , ARGUMENT 9 \"Error: offset out of range\\n\" FIELD 10 \"Error: offset out of range\\n\" LEAF_NODE 11 \"Error: offset out of range\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto end ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 end LEAF_NODE 8 end LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 num -= offset ; EXPR 4 num -= offset ASSIGN 5 num -= offset LVAL 6 num FIELD 7 num LEAF_NODE 8 num ASSIGN_OP 6 -= LEAF_NODE 7 -= RVAL 6 offset FIELD 7 offset LEAF_NODE 8 offset LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 length == 0 || length > ( unsigned int ) num EXPR 5 length == 0 || length > ( unsigned int ) num OR 6 length == 0 || length > ( unsigned int ) num EXPR 7 length == 0 FIELD 8 length LEAF_NODE 9 length EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 7 || EXPR 7 length > ( unsigned int ) num FIELD 8 length LEAF_NODE 9 length REL_OPERATOR 8 > LEAF_NODE 9 > LEAF_NODE 8 ( TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int LEAF_NODE 8 ) FIELD 8 num LEAF_NODE 9 num LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 length = ( unsigned int ) num ; EXPR 6 length = ( unsigned int ) num ASSIGN 7 length = ( unsigned int ) num LVAL 8 length FIELD 9 length LEAF_NODE 10 length ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( unsigned int ) num LEAF_NODE 9 ( TYPE_NAME 9 unsigned int LEAF_NODE 10 unsigned LEAF_NODE 10 int LEAF_NODE 9 ) FIELD 9 num LEAF_NODE 10 num LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 derout != NULL EXPR 5 derout != NULL FIELD 6 derout LEAF_NODE 7 derout EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 BIO_write ( derout , str + offset , length ) != ( int ) length EXPR 8 BIO_write ( derout , str + offset , length ) != ( int ) length FUNCTION_CALL 9 BIO_write ( derout , str + offset , length ) CALLEE 10 BIO_write LEAF_NODE 11 BIO_write LEAF_NODE 10 ( ARGUMENT 10 derout FIELD 11 derout LEAF_NODE 12 derout LEAF_NODE 10 , ARGUMENT 10 str + offset FIELD 11 str LEAF_NODE 12 str LEAF_NODE 11 + FIELD 11 offset LEAF_NODE 12 offset LEAF_NODE 10 , ARGUMENT 10 length FIELD 11 length LEAF_NODE 12 length LEAF_NODE 10 ) EQ_OPERATOR 9 != LEAF_NODE 10 != LEAF_NODE 9 ( TYPE_NAME 9 int LEAF_NODE 10 int LEAF_NODE 9 ) FIELD 9 length LEAF_NODE 10 length LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_printf ( bio_err , \"Error writing output\\n\" ) ; EXPR 10 BIO_printf ( bio_err , \"Error writing output\\n\" ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"Error writing output\\n\" ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"Error writing output\\n\" FIELD 13 \"Error writing output\\n\" LEAF_NODE 14 \"Error writing output\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ERR_print_errors ( bio_err ) ; EXPR 10 ERR_print_errors ( bio_err ) FUNCTION_CALL 11 ERR_print_errors ( bio_err ) CALLEE 12 ERR_print_errors LEAF_NODE 13 ERR_print_errors LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto end ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 end LEAF_NODE 11 end LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! noout EXPR 5 ! noout UNARY_EXPR 6 ! noout UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 noout LEAF_NODE 8 noout LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 const unsigned char * p ; p = str + offset ; VAR_DECL 7 const unsigned char * p ; p = str + offset TYPE 8 const unsigned char * TYPE_NAME 9 const unsigned char LEAF_NODE 10 const LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 p LEAF_NODE 9 p LEAF_NODE 8 ; INIT 8 p = str + offset ASSIGN 9 p = str + offset LVAL 10 p NAME 11 p LEAF_NODE 12 p ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 str + offset FIELD 11 str LEAF_NODE 12 str LEAF_NODE 11 + FIELD 11 offset LEAF_NODE 12 offset LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 it != NULL EXPR 8 it != NULL FIELD 9 it LEAF_NODE 10 it EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SIMPLE_DECL 9 ASN1_VALUE * value ; value = ASN1_item_d2i ( NULL , & p , length , it ) ; VAR_DECL 10 ASN1_VALUE * value ; value = ASN1_item_d2i ( NULL , & p , length , it ) TYPE 11 ASN1_VALUE * TYPE_NAME 12 ASN1_VALUE LEAF_NODE 13 ASN1_VALUE POINTER 12 * LEAF_NODE 13 * NAME 11 value LEAF_NODE 12 value LEAF_NODE 11 ; INIT 11 value = ASN1_item_d2i ( NULL , & p , length , it ) ASSIGN 12 value = ASN1_item_d2i ( NULL , & p , length , it ) LVAL 13 value NAME 14 value LEAF_NODE 15 value ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ASN1_item_d2i ( NULL , & p , length , it ) FUNCTION_CALL 14 ASN1_item_d2i ( NULL , & p , length , it ) CALLEE 15 ASN1_item_d2i LEAF_NODE 16 ASN1_item_d2i LEAF_NODE 15 ( ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 , ARGUMENT 15 & p UNARY_EXPR 16 & p UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 p LEAF_NODE 18 p LEAF_NODE 15 , ARGUMENT 15 length FIELD 16 length LEAF_NODE 17 length LEAF_NODE 15 , ARGUMENT 15 it FIELD 16 it LEAF_NODE 17 it LEAF_NODE 15 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 value == NULL EXPR 11 value == NULL FIELD 12 value LEAF_NODE 13 value EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 BIO_printf ( bio_err , \"Error parsing item %s\\n\" , it -> sname ) ; EXPR 13 BIO_printf ( bio_err , \"Error parsing item %s\\n\" , it -> sname ) FUNCTION_CALL 14 BIO_printf ( bio_err , \"Error parsing item %s\\n\" , it -> sname ) CALLEE 15 BIO_printf LEAF_NODE 16 BIO_printf LEAF_NODE 15 ( ARGUMENT 15 bio_err FIELD 16 bio_err LEAF_NODE 17 bio_err LEAF_NODE 15 , ARGUMENT 15 \"Error parsing item %s\\n\" FIELD 16 \"Error parsing item %s\\n\" LEAF_NODE 17 \"Error parsing item %s\\n\" LEAF_NODE 15 , ARGUMENT 15 it -> sname FIELD 16 it -> sname LEAF_NODE 17 it LEAF_NODE 17 -> LEAF_NODE 17 sname LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 ERR_print_errors ( bio_err ) ; EXPR 13 ERR_print_errors ( bio_err ) FUNCTION_CALL 14 ERR_print_errors ( bio_err ) CALLEE 15 ERR_print_errors LEAF_NODE 16 ERR_print_errors LEAF_NODE 15 ( ARGUMENT 15 bio_err FIELD 16 bio_err LEAF_NODE 17 bio_err LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 goto end ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 end LEAF_NODE 14 end LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 ASN1_item_print ( bio_out , value , 0 , it , NULL ) ; EXPR 10 ASN1_item_print ( bio_out , value , 0 , it , NULL ) FUNCTION_CALL 11 ASN1_item_print ( bio_out , value , 0 , it , NULL ) CALLEE 12 ASN1_item_print LEAF_NODE 13 ASN1_item_print LEAF_NODE 12 ( ARGUMENT 12 bio_out FIELD 13 bio_out LEAF_NODE 14 bio_out LEAF_NODE 12 , ARGUMENT 12 value FIELD 13 value LEAF_NODE 14 value LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 , ARGUMENT 12 it FIELD 13 it LEAF_NODE 14 it LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ASN1_item_free ( value , it ) ; EXPR 10 ASN1_item_free ( value , it ) FUNCTION_CALL 11 ASN1_item_free ( value , it ) CALLEE 12 ASN1_item_free LEAF_NODE 13 ASN1_item_free LEAF_NODE 12 ( ARGUMENT 12 value FIELD 13 value LEAF_NODE 14 value LEAF_NODE 12 , ARGUMENT 12 it FIELD 13 it LEAF_NODE 14 it LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! ASN1_parse_dump ( bio_out , p , length , indent , dump ) EXPR 11 ! ASN1_parse_dump ( bio_out , p , length , indent , dump ) UNARY_EXPR 12 ! ASN1_parse_dump ( bio_out , p , length , indent , dump ) UNARY_OPERATOR 13 ! LEAF_NODE 14 ! FUNCTION_CALL 13 ASN1_parse_dump ( bio_out , p , length , indent , dump ) CALLEE 14 ASN1_parse_dump LEAF_NODE 15 ASN1_parse_dump LEAF_NODE 14 ( ARGUMENT 14 bio_out FIELD 15 bio_out LEAF_NODE 16 bio_out LEAF_NODE 14 , ARGUMENT 14 p FIELD 15 p LEAF_NODE 16 p LEAF_NODE 14 , ARGUMENT 14 length FIELD 15 length LEAF_NODE 16 length LEAF_NODE 14 , ARGUMENT 14 indent FIELD 15 indent LEAF_NODE 16 indent LEAF_NODE 14 , ARGUMENT 14 dump FIELD 15 dump LEAF_NODE 16 dump LEAF_NODE 14 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ERR_print_errors ( bio_err ) ; EXPR 13 ERR_print_errors ( bio_err ) FUNCTION_CALL 14 ERR_print_errors ( bio_err ) CALLEE 15 ERR_print_errors LEAF_NODE 16 ERR_print_errors LEAF_NODE 15 ( ARGUMENT 15 bio_err FIELD 16 bio_err LEAF_NODE 17 bio_err LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 goto end ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 end LEAF_NODE 14 end LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 ret = 0 ; EXPR 4 ret = 0 ASSIGN 5 ret = 0 LVAL 6 ret FIELD 7 ret LEAF_NODE 8 ret ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; LABEL 3 end : LEAF_NODE 4 end LEAF_NODE 4 : EXPR_STATEMENT 3 BIO_free ( derout ) ; EXPR 4 BIO_free ( derout ) FUNCTION_CALL 5 BIO_free ( derout ) CALLEE 6 BIO_free LEAF_NODE 7 BIO_free LEAF_NODE 6 ( ARGUMENT 6 derout FIELD 7 derout LEAF_NODE 8 derout LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 BIO_free ( in ) ; EXPR 4 BIO_free ( in ) FUNCTION_CALL 5 BIO_free ( in ) CALLEE 6 BIO_free LEAF_NODE 7 BIO_free LEAF_NODE 6 ( ARGUMENT 6 in FIELD 7 in LEAF_NODE 8 in LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 BIO_free ( b64 ) ; EXPR 4 BIO_free ( b64 ) FUNCTION_CALL 5 BIO_free ( b64 ) CALLEE 6 BIO_free LEAF_NODE 7 BIO_free LEAF_NODE 6 ( ARGUMENT 6 b64 FIELD 7 b64 LEAF_NODE 8 b64 LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ret != 0 EXPR 5 ret != 0 FIELD 6 ret LEAF_NODE 7 ret EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 ERR_print_errors ( bio_err ) ; EXPR 6 ERR_print_errors ( bio_err ) FUNCTION_CALL 7 ERR_print_errors ( bio_err ) CALLEE 8 ERR_print_errors LEAF_NODE 9 ERR_print_errors LEAF_NODE 8 ( ARGUMENT 8 bio_err FIELD 9 bio_err LEAF_NODE 10 bio_err LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 3 BUF_MEM_free ( buf ) ; EXPR 4 BUF_MEM_free ( buf ) FUNCTION_CALL 5 BUF_MEM_free ( buf ) CALLEE 6 BUF_MEM_free LEAF_NODE 7 BUF_MEM_free LEAF_NODE 6 ( ARGUMENT 6 buf FIELD 7 buf LEAF_NODE 8 buf LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 OPENSSL_free ( name ) ; EXPR 4 OPENSSL_free ( name ) FUNCTION_CALL 5 OPENSSL_free ( name ) CALLEE 6 OPENSSL_free LEAF_NODE 7 OPENSSL_free LEAF_NODE 6 ( ARGUMENT 6 name FIELD 7 name LEAF_NODE 8 name LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 OPENSSL_free ( header ) ; EXPR 4 OPENSSL_free ( header ) FUNCTION_CALL 5 OPENSSL_free ( header ) CALLEE 6 OPENSSL_free LEAF_NODE 7 OPENSSL_free LEAF_NODE 6 ( ARGUMENT 6 header FIELD 7 header LEAF_NODE 8 header LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 strictpem EXPR 5 strictpem FIELD 6 strictpem LEAF_NODE 7 strictpem LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 OPENSSL_free ( str ) ; EXPR 6 OPENSSL_free ( str ) FUNCTION_CALL 7 OPENSSL_free ( str ) CALLEE 8 OPENSSL_free LEAF_NODE 9 OPENSSL_free LEAF_NODE 8 ( ARGUMENT 8 str FIELD 9 str LEAF_NODE 10 str LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 3 ASN1_TYPE_free ( at ) ; EXPR 4 ASN1_TYPE_free ( at ) FUNCTION_CALL 5 ASN1_TYPE_free ( at ) CALLEE 6 ASN1_TYPE_free LEAF_NODE 7 ASN1_TYPE_free LEAF_NODE 6 ( ARGUMENT 6 at FIELD 7 at LEAF_NODE 8 at LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 sk_OPENSSL_STRING_free ( osk ) ; EXPR 4 sk_OPENSSL_STRING_free ( osk ) FUNCTION_CALL 5 sk_OPENSSL_STRING_free ( osk ) CALLEE 6 sk_OPENSSL_STRING_free LEAF_NODE 7 sk_OPENSSL_STRING_free LEAF_NODE 6 ( ARGUMENT 6 osk FIELD 7 osk LEAF_NODE 8 osk LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return ret ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ret EXPR 5 ret FIELD 6 ret LEAF_NODE 7 ret LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 154, "project": "openssl_ast_normal_function_test_137", "target": 0}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } ; CLASS_DEF 2 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } CLASS_DEF 3 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } LEAF_NODE 4 struct CLASS_NAME 4 bio_addrinfo_st LEAF_NODE 5 bio_addrinfo_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; SIMPLE_DECL 5 int bai_family ; VAR_DECL 6 int bai_family TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_family LEAF_NODE 8 bai_family LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_socktype ; VAR_DECL 6 int bai_socktype TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_socktype LEAF_NODE 8 bai_socktype LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_protocol ; VAR_DECL 6 int bai_protocol TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_protocol LEAF_NODE 8 bai_protocol LEAF_NODE 6 ; SIMPLE_DECL 5 size_t bai_addrlen ; VAR_DECL 6 size_t bai_addrlen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 bai_addrlen LEAF_NODE 8 bai_addrlen LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr * bai_addr ; VAR_DECL 6 struct sockaddr * bai_addr TYPE 7 struct sockaddr * TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr POINTER 8 * LEAF_NODE 9 * NAME 7 bai_addr LEAF_NODE 8 bai_addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct bio_addrinfo_st * bai_next ; VAR_DECL 6 struct bio_addrinfo_st * bai_next TYPE 7 struct bio_addrinfo_st * TYPE_NAME 8 struct bio_addrinfo_st LEAF_NODE 9 struct LEAF_NODE 9 bio_addrinfo_st POINTER 8 * LEAF_NODE 9 * NAME 7 bai_next LEAF_NODE 8 bai_next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BIO_ADDRINFO ; VAR_DECL 2 struct bio_addrinfo_st BIO_ADDRINFO TYPE 3 struct bio_addrinfo_st TYPE_NAME 4 struct bio_addrinfo_st LEAF_NODE 5 struct LEAF_NODE 5 bio_addrinfo_st NAME 3 BIO_ADDRINFO LEAF_NODE 4 BIO_ADDRINFO LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t socklen_t ; VAR_DECL 2 uint32_t socklen_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 socklen_t LEAF_NODE 4 socklen_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } ; CLASS_DEF 2 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } CLASS_DEF 3 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } LEAF_NODE 4 enum CLASS_NAME 4 BIO_hostserv_priorities LEAF_NODE 5 BIO_hostserv_priorities LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV LEAF_NODE 5 BIO_PARSE_PRIO_HOST LEAF_NODE 5 , LEAF_NODE 5 BIO_PARSE_PRIO_SERV LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } ; CLASS_DEF 2 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } CLASS_DEF 3 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } LEAF_NODE 4 enum CLASS_NAME 4 BIO_lookup_type LEAF_NODE 5 BIO_lookup_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER LEAF_NODE 5 BIO_LOOKUP_CLIENT LEAF_NODE 5 , LEAF_NODE 5 BIO_LOOKUP_SERVER LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 32 ] session_id ; VAR_DECL 2 unsigned char [ 32 ] session_id TYPE 3 unsigned char [ 32 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 32 ] LEAF_NODE 5 [ FIELD 5 32 LEAF_NODE 6 32 LEAF_NODE 5 ] NAME 3 session_id LEAF_NODE 4 session_id LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 48 ] master_secret ; VAR_DECL 2 unsigned char [ 48 ] master_secret TYPE 3 unsigned char [ 48 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 48 ] LEAF_NODE 5 [ FIELD 5 48 LEAF_NODE 6 48 LEAF_NODE 5 ] NAME 3 master_secret LEAF_NODE 4 master_secret LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ SSL3_RANDOM_SIZE ] client_random ; VAR_DECL 2 unsigned char [ SSL3_RANDOM_SIZE ] client_random TYPE 3 unsigned char [ SSL3_RANDOM_SIZE ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ SSL3_RANDOM_SIZE ] LEAF_NODE 5 [ FIELD 5 SSL3_RANDOM_SIZE LEAF_NODE 6 SSL3_RANDOM_SIZE LEAF_NODE 5 ] NAME 3 client_random LEAF_NODE 4 client_random LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ SSL3_RANDOM_SIZE ] server_random ; VAR_DECL 2 unsigned char [ SSL3_RANDOM_SIZE ] server_random TYPE 3 unsigned char [ SSL3_RANDOM_SIZE ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ SSL3_RANDOM_SIZE ] LEAF_NODE 5 [ FIELD 5 SSL3_RANDOM_SIZE LEAF_NODE 6 SSL3_RANDOM_SIZE LEAF_NODE 5 ] NAME 3 server_random LEAF_NODE 4 server_random LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 104 ] key_block ; VAR_DECL 2 unsigned char [ 104 ] key_block TYPE 3 unsigned char [ 104 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 104 ] LEAF_NODE 5 [ FIELD 5 104 LEAF_NODE 6 104 LEAF_NODE 5 ] NAME 3 key_block LEAF_NODE 4 key_block LEAF_NODE 2 ; SIMPLE_DECL 1 EVP_MD_CTX * handshake_md ; VAR_DECL 2 EVP_MD_CTX * handshake_md TYPE 3 EVP_MD_CTX * TYPE_NAME 4 EVP_MD_CTX LEAF_NODE 5 EVP_MD_CTX POINTER 4 * LEAF_NODE 5 * NAME 3 handshake_md LEAF_NODE 4 handshake_md LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 send_finished LEAF_NODE 3 send_finished PARAMETER_LIST 2 ( SSL * s , BIO * rbio ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 BIO * rbio TYPE 4 BIO * TYPE_NAME 5 BIO LEAF_NODE 6 BIO POINTER 5 * LEAF_NODE 6 * NAME 4 rbio LEAF_NODE 5 rbio LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 static LEAF_NODE 3 unsigned LEAF_NODE 3 char LEAF_NODE 3 finished_msg LEAF_NODE 3 [ LEAF_NODE 3 DTLS1_HM_HEADER_LENGTH LEAF_NODE 3 + LEAF_NODE 3 TLS1_FINISH_MAC_LENGTH LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 0x14 LEAF_NODE 4 , LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 4 0x0c LEAF_NODE 4 , LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 4 0x03 LEAF_NODE 4 , LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 4 0x0c LEAF_NODE 4 , LEAF_NODE 3 } LEAF_NODE 3 ; SIMPLE_DECL 3 unsigned char [ EVP_MAX_MD_SIZE ] handshake_hash ; VAR_DECL 4 unsigned char [ EVP_MAX_MD_SIZE ] handshake_hash TYPE 5 unsigned char [ EVP_MAX_MD_SIZE ] TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char TYPE_SUFFIX 6 [ EVP_MAX_MD_SIZE ] LEAF_NODE 7 [ FIELD 7 EVP_MAX_MD_SIZE LEAF_NODE 8 EVP_MAX_MD_SIZE LEAF_NODE 7 ] NAME 5 handshake_hash LEAF_NODE 6 handshake_hash LEAF_NODE 4 ; EXPR_STATEMENT 3 do_PRF ( TLS_MD_KEY_EXPANSION_CONST , TLS_MD_KEY_EXPANSION_CONST_SIZE , server_random , SSL3_RANDOM_SIZE , client_random , SSL3_RANDOM_SIZE , key_block , sizeof ( key_block ) ) ; EXPR 4 do_PRF ( TLS_MD_KEY_EXPANSION_CONST , TLS_MD_KEY_EXPANSION_CONST_SIZE , server_random , SSL3_RANDOM_SIZE , client_random , SSL3_RANDOM_SIZE , key_block , sizeof ( key_block ) ) FUNCTION_CALL 5 do_PRF ( TLS_MD_KEY_EXPANSION_CONST , TLS_MD_KEY_EXPANSION_CONST_SIZE , server_random , SSL3_RANDOM_SIZE , client_random , SSL3_RANDOM_SIZE , key_block , sizeof ( key_block ) ) CALLEE 6 do_PRF LEAF_NODE 7 do_PRF LEAF_NODE 6 ( ARGUMENT 6 TLS_MD_KEY_EXPANSION_CONST FIELD 7 TLS_MD_KEY_EXPANSION_CONST LEAF_NODE 8 TLS_MD_KEY_EXPANSION_CONST LEAF_NODE 6 , ARGUMENT 6 TLS_MD_KEY_EXPANSION_CONST_SIZE FIELD 7 TLS_MD_KEY_EXPANSION_CONST_SIZE LEAF_NODE 8 TLS_MD_KEY_EXPANSION_CONST_SIZE LEAF_NODE 6 , ARGUMENT 6 server_random FIELD 7 server_random LEAF_NODE 8 server_random LEAF_NODE 6 , ARGUMENT 6 SSL3_RANDOM_SIZE FIELD 7 SSL3_RANDOM_SIZE LEAF_NODE 8 SSL3_RANDOM_SIZE LEAF_NODE 6 , ARGUMENT 6 client_random FIELD 7 client_random LEAF_NODE 8 client_random LEAF_NODE 6 , ARGUMENT 6 SSL3_RANDOM_SIZE FIELD 7 SSL3_RANDOM_SIZE LEAF_NODE 8 SSL3_RANDOM_SIZE LEAF_NODE 6 , ARGUMENT 6 key_block FIELD 7 key_block LEAF_NODE 8 key_block LEAF_NODE 6 , ARGUMENT 6 sizeof ( key_block ) FUNCTION_CALL 7 sizeof ( key_block ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 key_block FIELD 9 key_block LEAF_NODE 10 key_block LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! EVP_DigestFinal_ex ( handshake_md , handshake_hash , NULL ) EXPR 5 ! EVP_DigestFinal_ex ( handshake_md , handshake_hash , NULL ) UNARY_EXPR 6 ! EVP_DigestFinal_ex ( handshake_md , handshake_hash , NULL ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 EVP_DigestFinal_ex ( handshake_md , handshake_hash , NULL ) CALLEE 8 EVP_DigestFinal_ex LEAF_NODE 9 EVP_DigestFinal_ex LEAF_NODE 8 ( ARGUMENT 8 handshake_md FIELD 9 handshake_md LEAF_NODE 10 handshake_md LEAF_NODE 8 , ARGUMENT 8 handshake_hash FIELD 9 handshake_hash LEAF_NODE 10 handshake_hash LEAF_NODE 8 , ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; EXPR_STATEMENT 3 do_PRF ( TLS_MD_SERVER_FINISH_CONST , TLS_MD_SERVER_FINISH_CONST_SIZE , handshake_hash , EVP_MD_CTX_size ( handshake_md ) , NULL , 0 , finished_msg + DTLS1_HM_HEADER_LENGTH , TLS1_FINISH_MAC_LENGTH ) ; EXPR 4 do_PRF ( TLS_MD_SERVER_FINISH_CONST , TLS_MD_SERVER_FINISH_CONST_SIZE , handshake_hash , EVP_MD_CTX_size ( handshake_md ) , NULL , 0 , finished_msg + DTLS1_HM_HEADER_LENGTH , TLS1_FINISH_MAC_LENGTH ) FUNCTION_CALL 5 do_PRF ( TLS_MD_SERVER_FINISH_CONST , TLS_MD_SERVER_FINISH_CONST_SIZE , handshake_hash , EVP_MD_CTX_size ( handshake_md ) , NULL , 0 , finished_msg + DTLS1_HM_HEADER_LENGTH , TLS1_FINISH_MAC_LENGTH ) CALLEE 6 do_PRF LEAF_NODE 7 do_PRF LEAF_NODE 6 ( ARGUMENT 6 TLS_MD_SERVER_FINISH_CONST FIELD 7 TLS_MD_SERVER_FINISH_CONST LEAF_NODE 8 TLS_MD_SERVER_FINISH_CONST LEAF_NODE 6 , ARGUMENT 6 TLS_MD_SERVER_FINISH_CONST_SIZE FIELD 7 TLS_MD_SERVER_FINISH_CONST_SIZE LEAF_NODE 8 TLS_MD_SERVER_FINISH_CONST_SIZE LEAF_NODE 6 , ARGUMENT 6 handshake_hash FIELD 7 handshake_hash LEAF_NODE 8 handshake_hash LEAF_NODE 6 , ARGUMENT 6 EVP_MD_CTX_size ( handshake_md ) FUNCTION_CALL 7 EVP_MD_CTX_size ( handshake_md ) CALLEE 8 EVP_MD_CTX_size LEAF_NODE 9 EVP_MD_CTX_size LEAF_NODE 8 ( ARGUMENT 8 handshake_md FIELD 9 handshake_md LEAF_NODE 10 handshake_md LEAF_NODE 8 ) LEAF_NODE 6 , ARGUMENT 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 , ARGUMENT 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 6 , ARGUMENT 6 finished_msg + DTLS1_HM_HEADER_LENGTH FIELD 7 finished_msg LEAF_NODE 8 finished_msg LEAF_NODE 7 + FIELD 7 DTLS1_HM_HEADER_LENGTH LEAF_NODE 8 DTLS1_HM_HEADER_LENGTH LEAF_NODE 6 , ARGUMENT 6 TLS1_FINISH_MAC_LENGTH FIELD 7 TLS1_FINISH_MAC_LENGTH LEAF_NODE 8 TLS1_FINISH_MAC_LENGTH LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return send_record ( rbio , SSL3_RT_HANDSHAKE , 0 , finished_msg , sizeof ( finished_msg ) ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 send_record ( rbio , SSL3_RT_HANDSHAKE , 0 , finished_msg , sizeof ( finished_msg ) ) EXPR 5 send_record ( rbio , SSL3_RT_HANDSHAKE , 0 , finished_msg , sizeof ( finished_msg ) ) FUNCTION_CALL 6 send_record ( rbio , SSL3_RT_HANDSHAKE , 0 , finished_msg , sizeof ( finished_msg ) ) CALLEE 7 send_record LEAF_NODE 8 send_record LEAF_NODE 7 ( ARGUMENT 7 rbio FIELD 8 rbio LEAF_NODE 9 rbio LEAF_NODE 7 , ARGUMENT 7 SSL3_RT_HANDSHAKE FIELD 8 SSL3_RT_HANDSHAKE LEAF_NODE 9 SSL3_RT_HANDSHAKE LEAF_NODE 7 , ARGUMENT 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 7 , ARGUMENT 7 finished_msg FIELD 8 finished_msg LEAF_NODE 9 finished_msg LEAF_NODE 7 , ARGUMENT 7 sizeof ( finished_msg ) FUNCTION_CALL 8 sizeof ( finished_msg ) CALLEE 9 sizeof LEAF_NODE 10 sizeof LEAF_NODE 9 ( ARGUMENT 9 finished_msg FIELD 10 finished_msg LEAF_NODE 11 finished_msg LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 155, "project": "openssl_ast_normal_function_test_87", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 ASN1_OBJECT * TYPE_NAME 3 ASN1_OBJECT LEAF_NODE 4 ASN1_OBJECT LEAF_NODE 3 * FUNCTION_NAME 2 ASN1_OBJECT_create LEAF_NODE 3 ASN1_OBJECT_create PARAMETER_LIST 2 ( int nid , unsigned char * data , int len , const char * sn , const char * ln ) LEAF_NODE 3 ( PARAMETER_DECL 3 int nid TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 nid LEAF_NODE 5 nid LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * data TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 , PARAMETER_DECL 3 const char * sn TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 sn LEAF_NODE 5 sn LEAF_NODE 3 , PARAMETER_DECL 3 const char * ln TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 ln LEAF_NODE 5 ln LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 ASN1_OBJECT o ; VAR_DECL 4 ASN1_OBJECT o TYPE 5 ASN1_OBJECT TYPE_NAME 6 ASN1_OBJECT LEAF_NODE 7 ASN1_OBJECT NAME 5 o LEAF_NODE 6 o LEAF_NODE 4 ; EXPR_STATEMENT 3 o . sn = sn ; EXPR 4 o . sn = sn ASSIGN 5 o . sn = sn LVAL 6 o . sn FIELD 7 o . sn LEAF_NODE 8 o LEAF_NODE 8 . LEAF_NODE 8 sn ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 sn FIELD 7 sn LEAF_NODE 8 sn LEAF_NODE 4 ; EXPR_STATEMENT 3 o . ln = ln ; EXPR 4 o . ln = ln ASSIGN 5 o . ln = ln LVAL 6 o . ln FIELD 7 o . ln LEAF_NODE 8 o LEAF_NODE 8 . LEAF_NODE 8 ln ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ln FIELD 7 ln LEAF_NODE 8 ln LEAF_NODE 4 ; EXPR_STATEMENT 3 o . data = data ; EXPR 4 o . data = data ASSIGN 5 o . data = data LVAL 6 o . data FIELD 7 o . data LEAF_NODE 8 o LEAF_NODE 8 . LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 o . nid = nid ; EXPR 4 o . nid = nid ASSIGN 5 o . nid = nid LVAL 6 o . nid FIELD 7 o . nid LEAF_NODE 8 o LEAF_NODE 8 . LEAF_NODE 8 nid ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 nid FIELD 7 nid LEAF_NODE 8 nid LEAF_NODE 4 ; EXPR_STATEMENT 3 o . length = len ; EXPR 4 o . length = len ASSIGN 5 o . length = len LVAL 6 o . length FIELD 7 o . length LEAF_NODE 8 o LEAF_NODE 8 . LEAF_NODE 8 length ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 len FIELD 7 len LEAF_NODE 8 len LEAF_NODE 4 ; EXPR_STATEMENT 3 o . flags = ASN1_OBJECT_FLAG_DYNAMIC | ASN1_OBJECT_FLAG_DYNAMIC_STRINGS | ASN1_OBJECT_FLAG_DYNAMIC_DATA ; EXPR 4 o . flags = ASN1_OBJECT_FLAG_DYNAMIC | ASN1_OBJECT_FLAG_DYNAMIC_STRINGS | ASN1_OBJECT_FLAG_DYNAMIC_DATA ASSIGN 5 o . flags = ASN1_OBJECT_FLAG_DYNAMIC | ASN1_OBJECT_FLAG_DYNAMIC_STRINGS | ASN1_OBJECT_FLAG_DYNAMIC_DATA LVAL 6 o . flags FIELD 7 o . flags LEAF_NODE 8 o LEAF_NODE 8 . LEAF_NODE 8 flags ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ASN1_OBJECT_FLAG_DYNAMIC | ASN1_OBJECT_FLAG_DYNAMIC_STRINGS | ASN1_OBJECT_FLAG_DYNAMIC_DATA BIT_OR 7 ASN1_OBJECT_FLAG_DYNAMIC | ASN1_OBJECT_FLAG_DYNAMIC_STRINGS | ASN1_OBJECT_FLAG_DYNAMIC_DATA BIT_OR_ELEM 8 ASN1_OBJECT_FLAG_DYNAMIC FIELD 9 ASN1_OBJECT_FLAG_DYNAMIC LEAF_NODE 10 ASN1_OBJECT_FLAG_DYNAMIC LEAF_NODE 8 | BIT_OR_ELEM 8 ASN1_OBJECT_FLAG_DYNAMIC_STRINGS | ASN1_OBJECT_FLAG_DYNAMIC_DATA BIT_OR 9 ASN1_OBJECT_FLAG_DYNAMIC_STRINGS | ASN1_OBJECT_FLAG_DYNAMIC_DATA BIT_OR_ELEM 10 ASN1_OBJECT_FLAG_DYNAMIC_STRINGS FIELD 11 ASN1_OBJECT_FLAG_DYNAMIC_STRINGS LEAF_NODE 12 ASN1_OBJECT_FLAG_DYNAMIC_STRINGS LEAF_NODE 10 | BIT_OR_ELEM 10 ASN1_OBJECT_FLAG_DYNAMIC_DATA FIELD 11 ASN1_OBJECT_FLAG_DYNAMIC_DATA LEAF_NODE 12 ASN1_OBJECT_FLAG_DYNAMIC_DATA LEAF_NODE 4 ; JUMP_STATEMENT 3 return OBJ_dup ( & o ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 OBJ_dup ( & o ) EXPR 5 OBJ_dup ( & o ) FUNCTION_CALL 6 OBJ_dup ( & o ) CALLEE 7 OBJ_dup LEAF_NODE 8 OBJ_dup LEAF_NODE 7 ( ARGUMENT 7 & o UNARY_EXPR 8 & o UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 o LEAF_NODE 10 o LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 156, "project": "openssl_ast_normal_function_test_101", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 st_free LEAF_NODE 3 st_free PARAMETER_LIST 2 ( ASN1_STRING_TABLE * tbl ) LEAF_NODE 3 ( PARAMETER_DECL 3 ASN1_STRING_TABLE * tbl TYPE 4 ASN1_STRING_TABLE * TYPE_NAME 5 ASN1_STRING_TABLE LEAF_NODE 6 ASN1_STRING_TABLE POINTER 5 * LEAF_NODE 6 * NAME 4 tbl LEAF_NODE 5 tbl LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 tbl -> flags & STABLE_FLAGS_MALLOC EXPR 5 tbl -> flags & STABLE_FLAGS_MALLOC FIELD 6 tbl -> flags LEAF_NODE 7 tbl LEAF_NODE 7 -> LEAF_NODE 7 flags LEAF_NODE 6 & FIELD 6 STABLE_FLAGS_MALLOC LEAF_NODE 7 STABLE_FLAGS_MALLOC LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 OPENSSL_free ( tbl ) ; EXPR 6 OPENSSL_free ( tbl ) FUNCTION_CALL 7 OPENSSL_free ( tbl ) CALLEE 8 OPENSSL_free LEAF_NODE 9 OPENSSL_free LEAF_NODE 8 ( ARGUMENT 8 tbl FIELD 9 tbl LEAF_NODE 10 tbl LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 2 }", "idx": 157, "project": "openssl_ast_normal_function_test_123", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 ssl_check_for_safari LEAF_NODE 3 ssl_check_for_safari PARAMETER_LIST 2 ( SSL * s , const unsigned char * data , const unsigned char * limit ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 const unsigned char * data TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 , PARAMETER_DECL 3 const unsigned char * limit TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 limit LEAF_NODE 5 limit LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned short type , unsigned short size ; INIT_DECL_LIST 4 unsigned short type , unsigned short size VAR_DECL 5 unsigned short type TYPE 6 unsigned short TYPE_NAME 7 unsigned short LEAF_NODE 8 unsigned LEAF_NODE 8 short NAME 6 type LEAF_NODE 7 type LEAF_NODE 5 , VAR_DECL 5 unsigned short size TYPE 6 unsigned short TYPE_NAME 7 unsigned short LEAF_NODE 8 unsigned LEAF_NODE 8 short NAME 6 size LEAF_NODE 7 size LEAF_NODE 4 ; LEAF_NODE 3 static LEAF_NODE 3 const LEAF_NODE 3 unsigned LEAF_NODE 3 char LEAF_NODE 3 kSafariExtensionsBlock LEAF_NODE 3 [ LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 4 0x0a LEAF_NODE 4 , LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 4 0x08 LEAF_NODE 4 , LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 4 0x06 LEAF_NODE 4 , LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 4 0x17 LEAF_NODE 4 , LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 4 0x18 LEAF_NODE 4 , LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 4 0x19 LEAF_NODE 4 , LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 4 0x0b LEAF_NODE 4 , LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 4 0x02 LEAF_NODE 4 , LEAF_NODE 4 0x01 LEAF_NODE 4 , LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 3 } LEAF_NODE 3 ; LEAF_NODE 3 static LEAF_NODE 3 const LEAF_NODE 3 unsigned LEAF_NODE 3 char LEAF_NODE 3 kSafariTLS12ExtensionsBlock LEAF_NODE 3 [ LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 4 0x0d LEAF_NODE 4 , LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 4 0x0c LEAF_NODE 4 , LEAF_NODE 4 0x00 LEAF_NODE 4 , LEAF_NODE 4 0x0a LEAF_NODE 4 , LEAF_NODE 4 0x05 LEAF_NODE 4 , LEAF_NODE 4 0x01 LEAF_NODE 4 , LEAF_NODE 4 0x04 LEAF_NODE 4 , LEAF_NODE 4 0x01 LEAF_NODE 4 , LEAF_NODE 4 0x02 LEAF_NODE 4 , LEAF_NODE 4 0x01 LEAF_NODE 4 , LEAF_NODE 4 0x04 LEAF_NODE 4 , LEAF_NODE 4 0x03 LEAF_NODE 4 , LEAF_NODE 4 0x02 LEAF_NODE 4 , LEAF_NODE 4 0x03 LEAF_NODE 4 , LEAF_NODE 3 } LEAF_NODE 3 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 data >= ( limit - 2 ) EXPR 5 data >= ( limit - 2 ) FIELD 6 data LEAF_NODE 7 data REL_OPERATOR 6 >= LEAF_NODE 7 >= LEAF_NODE 6 ( FIELD 6 limit LEAF_NODE 7 limit LEAF_NODE 6 - FIELD 6 2 LEAF_NODE 7 2 LEAF_NODE 6 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return DESTINATION ; KEYWORD 6 return LEAF_NODE 7 return LEAF_NODE 6 DESTINATION LEAF_NODE 6 ; EXPR_STATEMENT 3 data += 2 ; EXPR 4 data += 2 ASSIGN 5 data += 2 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 += LEAF_NODE 7 += RVAL 6 2 FIELD 7 2 LEAF_NODE 8 2 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 data > ( limit - 4 ) EXPR 5 data > ( limit - 4 ) FIELD 6 data LEAF_NODE 7 data REL_OPERATOR 6 > LEAF_NODE 7 > LEAF_NODE 6 ( FIELD 6 limit LEAF_NODE 7 limit LEAF_NODE 6 - FIELD 6 4 LEAF_NODE 7 4 LEAF_NODE 6 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return DESTINATION ; KEYWORD 6 return LEAF_NODE 7 return LEAF_NODE 6 DESTINATION LEAF_NODE 6 ; EXPR_STATEMENT 3 n2s ( data , type ) ; EXPR 4 n2s ( data , type ) FUNCTION_CALL 5 n2s ( data , type ) CALLEE 6 n2s LEAF_NODE 7 n2s LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 type FIELD 7 type LEAF_NODE 8 type LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 n2s ( data , size ) ; EXPR 4 n2s ( data , size ) FUNCTION_CALL 5 n2s ( data , size ) CALLEE 6 n2s LEAF_NODE 7 n2s LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 size FIELD 7 size LEAF_NODE 8 size LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 type != TLSEXT_TYPE_server_name EXPR 5 type != TLSEXT_TYPE_server_name FIELD 6 type LEAF_NODE 7 type EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 TLSEXT_TYPE_server_name LEAF_NODE 7 TLSEXT_TYPE_server_name LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return DESTINATION ; KEYWORD 6 return LEAF_NODE 7 return LEAF_NODE 6 DESTINATION LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 data + size > limit EXPR 5 data + size > limit FIELD 6 data LEAF_NODE 7 data LEAF_NODE 6 + FIELD 6 size LEAF_NODE 7 size REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 limit LEAF_NODE 7 limit LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return DESTINATION ; KEYWORD 6 return LEAF_NODE 7 return LEAF_NODE 6 DESTINATION LEAF_NODE 6 ; EXPR_STATEMENT 3 data += size ; EXPR 4 data += size ASSIGN 5 data += size LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 += LEAF_NODE 7 += RVAL 6 size FIELD 7 size LEAF_NODE 8 size LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 TLS1_get_client_version ( s ) >= TLS1_2_VERSION EXPR 5 TLS1_get_client_version ( s ) >= TLS1_2_VERSION FUNCTION_CALL 6 TLS1_get_client_version ( s ) CALLEE 7 TLS1_get_client_version LEAF_NODE 8 TLS1_get_client_version LEAF_NODE 7 ( ARGUMENT 7 s FIELD 8 s LEAF_NODE 9 s LEAF_NODE 7 ) REL_OPERATOR 6 >= LEAF_NODE 7 >= FIELD 6 TLS1_2_VERSION LEAF_NODE 7 TLS1_2_VERSION LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 const size_t len1 ; len1 = sizeof ( kSafariExtensionsBlock ) ; VAR_DECL 7 const size_t len1 ; len1 = sizeof ( kSafariExtensionsBlock ) TYPE 8 const size_t TYPE_NAME 9 const size_t LEAF_NODE 10 const LEAF_NODE 10 size_t NAME 8 len1 LEAF_NODE 9 len1 LEAF_NODE 8 ; INIT 8 len1 = sizeof ( kSafariExtensionsBlock ) ASSIGN 9 len1 = sizeof ( kSafariExtensionsBlock ) LVAL 10 len1 NAME 11 len1 LEAF_NODE 12 len1 ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 sizeof ( kSafariExtensionsBlock ) FUNCTION_CALL 11 sizeof ( kSafariExtensionsBlock ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 kSafariExtensionsBlock FIELD 13 kSafariExtensionsBlock LEAF_NODE 14 kSafariExtensionsBlock LEAF_NODE 12 ) LEAF_NODE 7 ; SIMPLE_DECL 6 const size_t len2 ; len2 = sizeof ( kSafariTLS12ExtensionsBlock ) ; VAR_DECL 7 const size_t len2 ; len2 = sizeof ( kSafariTLS12ExtensionsBlock ) TYPE 8 const size_t TYPE_NAME 9 const size_t LEAF_NODE 10 const LEAF_NODE 10 size_t NAME 8 len2 LEAF_NODE 9 len2 LEAF_NODE 8 ; INIT 8 len2 = sizeof ( kSafariTLS12ExtensionsBlock ) ASSIGN 9 len2 = sizeof ( kSafariTLS12ExtensionsBlock ) LVAL 10 len2 NAME 11 len2 LEAF_NODE 12 len2 ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 sizeof ( kSafariTLS12ExtensionsBlock ) FUNCTION_CALL 11 sizeof ( kSafariTLS12ExtensionsBlock ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 kSafariTLS12ExtensionsBlock FIELD 13 kSafariTLS12ExtensionsBlock LEAF_NODE 14 kSafariTLS12ExtensionsBlock LEAF_NODE 12 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 data + len1 + len2 != limit EXPR 8 data + len1 + len2 != limit FIELD 9 data LEAF_NODE 10 data LEAF_NODE 9 + FIELD 9 len1 LEAF_NODE 10 len1 LEAF_NODE 9 + FIELD 9 len2 LEAF_NODE 10 len2 EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 limit LEAF_NODE 10 limit LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return DESTINATION ; KEYWORD 9 return LEAF_NODE 10 return LEAF_NODE 9 DESTINATION LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 memcmp ( data , kSafariExtensionsBlock , len1 ) != 0 EXPR 8 memcmp ( data , kSafariExtensionsBlock , len1 ) != 0 FUNCTION_CALL 9 memcmp ( data , kSafariExtensionsBlock , len1 ) CALLEE 10 memcmp LEAF_NODE 11 memcmp LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 , ARGUMENT 10 kSafariExtensionsBlock FIELD 11 kSafariExtensionsBlock LEAF_NODE 12 kSafariExtensionsBlock LEAF_NODE 10 , ARGUMENT 10 len1 FIELD 11 len1 LEAF_NODE 12 len1 LEAF_NODE 10 ) EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return DESTINATION ; KEYWORD 9 return LEAF_NODE 10 return LEAF_NODE 9 DESTINATION LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 memcmp ( data + len1 , kSafariTLS12ExtensionsBlock , len2 ) != 0 EXPR 8 memcmp ( data + len1 , kSafariTLS12ExtensionsBlock , len2 ) != 0 FUNCTION_CALL 9 memcmp ( data + len1 , kSafariTLS12ExtensionsBlock , len2 ) CALLEE 10 memcmp LEAF_NODE 11 memcmp LEAF_NODE 10 ( ARGUMENT 10 data + len1 FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 len1 LEAF_NODE 12 len1 LEAF_NODE 10 , ARGUMENT 10 kSafariTLS12ExtensionsBlock FIELD 11 kSafariTLS12ExtensionsBlock LEAF_NODE 12 kSafariTLS12ExtensionsBlock LEAF_NODE 10 , ARGUMENT 10 len2 FIELD 11 len2 LEAF_NODE 12 len2 LEAF_NODE 10 ) EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return DESTINATION ; KEYWORD 9 return LEAF_NODE 10 return LEAF_NODE 9 DESTINATION LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 const size_t len ; len = sizeof ( kSafariExtensionsBlock ) ; VAR_DECL 7 const size_t len ; len = sizeof ( kSafariExtensionsBlock ) TYPE 8 const size_t TYPE_NAME 9 const size_t LEAF_NODE 10 const LEAF_NODE 10 size_t NAME 8 len LEAF_NODE 9 len LEAF_NODE 8 ; INIT 8 len = sizeof ( kSafariExtensionsBlock ) ASSIGN 9 len = sizeof ( kSafariExtensionsBlock ) LVAL 10 len NAME 11 len LEAF_NODE 12 len ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 sizeof ( kSafariExtensionsBlock ) FUNCTION_CALL 11 sizeof ( kSafariExtensionsBlock ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 kSafariExtensionsBlock FIELD 13 kSafariExtensionsBlock LEAF_NODE 14 kSafariExtensionsBlock LEAF_NODE 12 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 data + len != limit EXPR 8 data + len != limit FIELD 9 data LEAF_NODE 10 data LEAF_NODE 9 + FIELD 9 len LEAF_NODE 10 len EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 limit LEAF_NODE 10 limit LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return DESTINATION ; KEYWORD 9 return LEAF_NODE 10 return LEAF_NODE 9 DESTINATION LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 memcmp ( data , kSafariExtensionsBlock , len ) != 0 EXPR 8 memcmp ( data , kSafariExtensionsBlock , len ) != 0 FUNCTION_CALL 9 memcmp ( data , kSafariExtensionsBlock , len ) CALLEE 10 memcmp LEAF_NODE 11 memcmp LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 , ARGUMENT 10 kSafariExtensionsBlock FIELD 11 kSafariExtensionsBlock LEAF_NODE 12 kSafariExtensionsBlock LEAF_NODE 10 , ARGUMENT 10 len FIELD 11 len LEAF_NODE 12 len LEAF_NODE 10 ) EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return DESTINATION ; KEYWORD 9 return LEAF_NODE 10 return LEAF_NODE 9 DESTINATION LEAF_NODE 9 ; LEAF_NODE 5 } EXPR_STATEMENT 3 s -> s3 -> is_probably_safari = 1 ; EXPR 4 s -> s3 -> is_probably_safari = 1 ASSIGN 5 s -> s3 -> is_probably_safari = 1 LVAL 6 s -> s3 -> is_probably_safari FIELD 7 s -> s3 -> is_probably_safari LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s3 LEAF_NODE 8 -> LEAF_NODE 8 is_probably_safari ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 158, "project": "openssl_ast_vul_function_test_2", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 AES_cfb8_encrypt LEAF_NODE 3 AES_cfb8_encrypt PARAMETER_LIST 2 ( const unsigned char * in , unsigned char * out , size_t length , const AES_KEY * key , unsigned char * ivec , int * num , const int enc ) LEAF_NODE 3 ( PARAMETER_DECL 3 const unsigned char * in TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 in LEAF_NODE 5 in LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * out TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 size_t length TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 length LEAF_NODE 5 length LEAF_NODE 3 , PARAMETER_DECL 3 const AES_KEY * key TYPE 4 const AES_KEY * TYPE_NAME 5 const AES_KEY LEAF_NODE 6 const LEAF_NODE 6 AES_KEY POINTER 5 * LEAF_NODE 6 * NAME 4 key LEAF_NODE 5 key LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * ivec TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 ivec LEAF_NODE 5 ivec LEAF_NODE 3 , PARAMETER_DECL 3 int * num TYPE 4 int * TYPE_NAME 5 int LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 num LEAF_NODE 5 num LEAF_NODE 3 , PARAMETER_DECL 3 const int enc TYPE 4 const int TYPE_NAME 5 const int LEAF_NODE 6 const LEAF_NODE 6 int NAME 4 enc LEAF_NODE 5 enc LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CRYPTO_cfb128_8_encrypt ( in , out , length , key , ivec , num , enc , ( block128_f ) AES_encrypt ) ; EXPR 4 CRYPTO_cfb128_8_encrypt ( in , out , length , key , ivec , num , enc , ( block128_f ) AES_encrypt ) FUNCTION_CALL 5 CRYPTO_cfb128_8_encrypt ( in , out , length , key , ivec , num , enc , ( block128_f ) AES_encrypt ) CALLEE 6 CRYPTO_cfb128_8_encrypt LEAF_NODE 7 CRYPTO_cfb128_8_encrypt LEAF_NODE 6 ( ARGUMENT 6 in FIELD 7 in LEAF_NODE 8 in LEAF_NODE 6 , ARGUMENT 6 out FIELD 7 out LEAF_NODE 8 out LEAF_NODE 6 , ARGUMENT 6 length FIELD 7 length LEAF_NODE 8 length LEAF_NODE 6 , ARGUMENT 6 key FIELD 7 key LEAF_NODE 8 key LEAF_NODE 6 , ARGUMENT 6 ivec FIELD 7 ivec LEAF_NODE 8 ivec LEAF_NODE 6 , ARGUMENT 6 num FIELD 7 num LEAF_NODE 8 num LEAF_NODE 6 , ARGUMENT 6 enc FIELD 7 enc LEAF_NODE 8 enc LEAF_NODE 6 , ARGUMENT 6 ( block128_f ) AES_encrypt LEAF_NODE 7 ( TYPE_NAME 7 block128_f LEAF_NODE 8 block128_f LEAF_NODE 7 ) FIELD 7 AES_encrypt LEAF_NODE 8 AES_encrypt LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 159, "project": "openssl_ast_normal_function_test_10", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS ; VAR_DECL 2 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS TYPE 3 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } CLASS_DEF 4 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } LEAF_NODE 5 struct CLASS_NAME 5 args_st LEAF_NODE 6 args_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int size ; int argc ; char * argv ; SIMPLE_DECL 6 int size ; VAR_DECL 7 int size TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 size LEAF_NODE 9 size LEAF_NODE 7 ; SIMPLE_DECL 6 int argc ; VAR_DECL 7 int argc TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 argc LEAF_NODE 9 argc LEAF_NODE 7 ; SIMPLE_DECL 6 char * argv ; VAR_DECL 7 char * argv TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 argv LEAF_NODE 9 argv LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 ARGS LEAF_NODE 4 ARGS LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned long nmflag ; nmflag = 0 ; VAR_DECL 2 unsigned long nmflag ; nmflag = 0 TYPE 3 unsigned long TYPE_NAME 4 unsigned long LEAF_NODE 5 unsigned LEAF_NODE 5 long NAME 3 nmflag LEAF_NODE 4 nmflag LEAF_NODE 3 ; INIT 3 nmflag = 0 ASSIGN 4 nmflag = 0 LVAL 5 nmflag NAME 6 nmflag LEAF_NODE 7 nmflag ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 a LEAF_NODE 3 a PARAMETER_LIST 2 ( ARIA_u128 * y , const ARIA_u128 * x ) LEAF_NODE 3 ( PARAMETER_DECL 3 ARIA_u128 * y TYPE 4 ARIA_u128 * TYPE_NAME 5 ARIA_u128 LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 y LEAF_NODE 5 y LEAF_NODE 3 , PARAMETER_DECL 3 const ARIA_u128 * x TYPE 4 const ARIA_u128 * TYPE_NAME 5 const ARIA_u128 LEAF_NODE 6 const LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 x LEAF_NODE 5 x LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 y -> c [ 0 ] = x -> c [ 3 ] ^ x -> c [ 4 ] ^ x -> c [ 6 ] ^ x -> c [ 8 ] ^ x -> c [ 9 ] ^ x -> c [ 13 ] ^ x -> c [ 14 ] ; EXPR 4 y -> c [ 0 ] = x -> c [ 3 ] ^ x -> c [ 4 ] ^ x -> c [ 6 ] ^ x -> c [ 8 ] ^ x -> c [ 9 ] ^ x -> c [ 13 ] ^ x -> c [ 14 ] ASSIGN 5 y -> c [ 0 ] = x -> c [ 3 ] ^ x -> c [ 4 ] ^ x -> c [ 6 ] ^ x -> c [ 8 ] ^ x -> c [ 9 ] ^ x -> c [ 13 ] ^ x -> c [ 14 ] LVAL 6 y -> c [ 0 ] FIELD 7 y -> c [ 0 ] LEAF_NODE 8 y LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 x -> c [ 3 ] ^ x -> c [ 4 ] ^ x -> c [ 6 ] ^ x -> c [ 8 ] ^ x -> c [ 9 ] ^ x -> c [ 13 ] ^ x -> c [ 14 ] FIELD 7 x -> c [ 3 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 4 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 4 FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 6 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 6 FIELD 9 6 LEAF_NODE 10 6 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 8 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 8 FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 9 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 9 FIELD 9 9 LEAF_NODE 10 9 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 13 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 13 FIELD 9 13 LEAF_NODE 10 13 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 14 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 14 FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 y -> c [ 1 ] = x -> c [ 2 ] ^ x -> c [ 5 ] ^ x -> c [ 7 ] ^ x -> c [ 8 ] ^ x -> c [ 9 ] ^ x -> c [ 12 ] ^ x -> c [ 15 ] ; EXPR 4 y -> c [ 1 ] = x -> c [ 2 ] ^ x -> c [ 5 ] ^ x -> c [ 7 ] ^ x -> c [ 8 ] ^ x -> c [ 9 ] ^ x -> c [ 12 ] ^ x -> c [ 15 ] ASSIGN 5 y -> c [ 1 ] = x -> c [ 2 ] ^ x -> c [ 5 ] ^ x -> c [ 7 ] ^ x -> c [ 8 ] ^ x -> c [ 9 ] ^ x -> c [ 12 ] ^ x -> c [ 15 ] LVAL 6 y -> c [ 1 ] FIELD 7 y -> c [ 1 ] LEAF_NODE 8 y LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 x -> c [ 2 ] ^ x -> c [ 5 ] ^ x -> c [ 7 ] ^ x -> c [ 8 ] ^ x -> c [ 9 ] ^ x -> c [ 12 ] ^ x -> c [ 15 ] FIELD 7 x -> c [ 2 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 5 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 5 FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 7 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 7 FIELD 9 7 LEAF_NODE 10 7 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 8 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 8 FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 9 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 9 FIELD 9 9 LEAF_NODE 10 9 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 12 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 12 FIELD 9 12 LEAF_NODE 10 12 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 15 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 15 FIELD 9 15 LEAF_NODE 10 15 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 y -> c [ 2 ] = x -> c [ 1 ] ^ x -> c [ 4 ] ^ x -> c [ 6 ] ^ x -> c [ 10 ] ^ x -> c [ 11 ] ^ x -> c [ 12 ] ^ x -> c [ 15 ] ; EXPR 4 y -> c [ 2 ] = x -> c [ 1 ] ^ x -> c [ 4 ] ^ x -> c [ 6 ] ^ x -> c [ 10 ] ^ x -> c [ 11 ] ^ x -> c [ 12 ] ^ x -> c [ 15 ] ASSIGN 5 y -> c [ 2 ] = x -> c [ 1 ] ^ x -> c [ 4 ] ^ x -> c [ 6 ] ^ x -> c [ 10 ] ^ x -> c [ 11 ] ^ x -> c [ 12 ] ^ x -> c [ 15 ] LVAL 6 y -> c [ 2 ] FIELD 7 y -> c [ 2 ] LEAF_NODE 8 y LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 x -> c [ 1 ] ^ x -> c [ 4 ] ^ x -> c [ 6 ] ^ x -> c [ 10 ] ^ x -> c [ 11 ] ^ x -> c [ 12 ] ^ x -> c [ 15 ] FIELD 7 x -> c [ 1 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 4 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 4 FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 6 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 6 FIELD 9 6 LEAF_NODE 10 6 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 10 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 10 FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 11 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 11 FIELD 9 11 LEAF_NODE 10 11 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 12 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 12 FIELD 9 12 LEAF_NODE 10 12 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 15 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 15 FIELD 9 15 LEAF_NODE 10 15 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 y -> c [ 3 ] = x -> c [ 0 ] ^ x -> c [ 5 ] ^ x -> c [ 7 ] ^ x -> c [ 10 ] ^ x -> c [ 11 ] ^ x -> c [ 13 ] ^ x -> c [ 14 ] ; EXPR 4 y -> c [ 3 ] = x -> c [ 0 ] ^ x -> c [ 5 ] ^ x -> c [ 7 ] ^ x -> c [ 10 ] ^ x -> c [ 11 ] ^ x -> c [ 13 ] ^ x -> c [ 14 ] ASSIGN 5 y -> c [ 3 ] = x -> c [ 0 ] ^ x -> c [ 5 ] ^ x -> c [ 7 ] ^ x -> c [ 10 ] ^ x -> c [ 11 ] ^ x -> c [ 13 ] ^ x -> c [ 14 ] LVAL 6 y -> c [ 3 ] FIELD 7 y -> c [ 3 ] LEAF_NODE 8 y LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 x -> c [ 0 ] ^ x -> c [ 5 ] ^ x -> c [ 7 ] ^ x -> c [ 10 ] ^ x -> c [ 11 ] ^ x -> c [ 13 ] ^ x -> c [ 14 ] FIELD 7 x -> c [ 0 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 5 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 5 FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 7 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 7 FIELD 9 7 LEAF_NODE 10 7 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 10 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 10 FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 11 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 11 FIELD 9 11 LEAF_NODE 10 11 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 13 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 13 FIELD 9 13 LEAF_NODE 10 13 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 14 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 14 FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 y -> c [ 4 ] = x -> c [ 0 ] ^ x -> c [ 2 ] ^ x -> c [ 5 ] ^ x -> c [ 8 ] ^ x -> c [ 11 ] ^ x -> c [ 14 ] ^ x -> c [ 15 ] ; EXPR 4 y -> c [ 4 ] = x -> c [ 0 ] ^ x -> c [ 2 ] ^ x -> c [ 5 ] ^ x -> c [ 8 ] ^ x -> c [ 11 ] ^ x -> c [ 14 ] ^ x -> c [ 15 ] ASSIGN 5 y -> c [ 4 ] = x -> c [ 0 ] ^ x -> c [ 2 ] ^ x -> c [ 5 ] ^ x -> c [ 8 ] ^ x -> c [ 11 ] ^ x -> c [ 14 ] ^ x -> c [ 15 ] LVAL 6 y -> c [ 4 ] FIELD 7 y -> c [ 4 ] LEAF_NODE 8 y LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 4 FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 x -> c [ 0 ] ^ x -> c [ 2 ] ^ x -> c [ 5 ] ^ x -> c [ 8 ] ^ x -> c [ 11 ] ^ x -> c [ 14 ] ^ x -> c [ 15 ] FIELD 7 x -> c [ 0 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 2 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 5 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 5 FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 8 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 8 FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 11 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 11 FIELD 9 11 LEAF_NODE 10 11 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 14 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 14 FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 15 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 15 FIELD 9 15 LEAF_NODE 10 15 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 y -> c [ 5 ] = x -> c [ 1 ] ^ x -> c [ 3 ] ^ x -> c [ 4 ] ^ x -> c [ 9 ] ^ x -> c [ 10 ] ^ x -> c [ 14 ] ^ x -> c [ 15 ] ; EXPR 4 y -> c [ 5 ] = x -> c [ 1 ] ^ x -> c [ 3 ] ^ x -> c [ 4 ] ^ x -> c [ 9 ] ^ x -> c [ 10 ] ^ x -> c [ 14 ] ^ x -> c [ 15 ] ASSIGN 5 y -> c [ 5 ] = x -> c [ 1 ] ^ x -> c [ 3 ] ^ x -> c [ 4 ] ^ x -> c [ 9 ] ^ x -> c [ 10 ] ^ x -> c [ 14 ] ^ x -> c [ 15 ] LVAL 6 y -> c [ 5 ] FIELD 7 y -> c [ 5 ] LEAF_NODE 8 y LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 5 FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 x -> c [ 1 ] ^ x -> c [ 3 ] ^ x -> c [ 4 ] ^ x -> c [ 9 ] ^ x -> c [ 10 ] ^ x -> c [ 14 ] ^ x -> c [ 15 ] FIELD 7 x -> c [ 1 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 3 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 4 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 4 FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 9 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 9 FIELD 9 9 LEAF_NODE 10 9 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 10 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 10 FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 14 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 14 FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 15 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 15 FIELD 9 15 LEAF_NODE 10 15 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 y -> c [ 6 ] = x -> c [ 0 ] ^ x -> c [ 2 ] ^ x -> c [ 7 ] ^ x -> c [ 9 ] ^ x -> c [ 10 ] ^ x -> c [ 12 ] ^ x -> c [ 13 ] ; EXPR 4 y -> c [ 6 ] = x -> c [ 0 ] ^ x -> c [ 2 ] ^ x -> c [ 7 ] ^ x -> c [ 9 ] ^ x -> c [ 10 ] ^ x -> c [ 12 ] ^ x -> c [ 13 ] ASSIGN 5 y -> c [ 6 ] = x -> c [ 0 ] ^ x -> c [ 2 ] ^ x -> c [ 7 ] ^ x -> c [ 9 ] ^ x -> c [ 10 ] ^ x -> c [ 12 ] ^ x -> c [ 13 ] LVAL 6 y -> c [ 6 ] FIELD 7 y -> c [ 6 ] LEAF_NODE 8 y LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 6 FIELD 9 6 LEAF_NODE 10 6 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 x -> c [ 0 ] ^ x -> c [ 2 ] ^ x -> c [ 7 ] ^ x -> c [ 9 ] ^ x -> c [ 10 ] ^ x -> c [ 12 ] ^ x -> c [ 13 ] FIELD 7 x -> c [ 0 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 2 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 7 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 7 FIELD 9 7 LEAF_NODE 10 7 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 9 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 9 FIELD 9 9 LEAF_NODE 10 9 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 10 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 10 FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 12 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 12 FIELD 9 12 LEAF_NODE 10 12 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 13 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 13 FIELD 9 13 LEAF_NODE 10 13 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 y -> c [ 7 ] = x -> c [ 1 ] ^ x -> c [ 3 ] ^ x -> c [ 6 ] ^ x -> c [ 8 ] ^ x -> c [ 11 ] ^ x -> c [ 12 ] ^ x -> c [ 13 ] ; EXPR 4 y -> c [ 7 ] = x -> c [ 1 ] ^ x -> c [ 3 ] ^ x -> c [ 6 ] ^ x -> c [ 8 ] ^ x -> c [ 11 ] ^ x -> c [ 12 ] ^ x -> c [ 13 ] ASSIGN 5 y -> c [ 7 ] = x -> c [ 1 ] ^ x -> c [ 3 ] ^ x -> c [ 6 ] ^ x -> c [ 8 ] ^ x -> c [ 11 ] ^ x -> c [ 12 ] ^ x -> c [ 13 ] LVAL 6 y -> c [ 7 ] FIELD 7 y -> c [ 7 ] LEAF_NODE 8 y LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 7 FIELD 9 7 LEAF_NODE 10 7 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 x -> c [ 1 ] ^ x -> c [ 3 ] ^ x -> c [ 6 ] ^ x -> c [ 8 ] ^ x -> c [ 11 ] ^ x -> c [ 12 ] ^ x -> c [ 13 ] FIELD 7 x -> c [ 1 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 3 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 6 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 6 FIELD 9 6 LEAF_NODE 10 6 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 8 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 8 FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 11 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 11 FIELD 9 11 LEAF_NODE 10 11 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 12 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 12 FIELD 9 12 LEAF_NODE 10 12 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 13 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 13 FIELD 9 13 LEAF_NODE 10 13 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 y -> c [ 8 ] = x -> c [ 0 ] ^ x -> c [ 1 ] ^ x -> c [ 4 ] ^ x -> c [ 7 ] ^ x -> c [ 10 ] ^ x -> c [ 13 ] ^ x -> c [ 15 ] ; EXPR 4 y -> c [ 8 ] = x -> c [ 0 ] ^ x -> c [ 1 ] ^ x -> c [ 4 ] ^ x -> c [ 7 ] ^ x -> c [ 10 ] ^ x -> c [ 13 ] ^ x -> c [ 15 ] ASSIGN 5 y -> c [ 8 ] = x -> c [ 0 ] ^ x -> c [ 1 ] ^ x -> c [ 4 ] ^ x -> c [ 7 ] ^ x -> c [ 10 ] ^ x -> c [ 13 ] ^ x -> c [ 15 ] LVAL 6 y -> c [ 8 ] FIELD 7 y -> c [ 8 ] LEAF_NODE 8 y LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 8 FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 x -> c [ 0 ] ^ x -> c [ 1 ] ^ x -> c [ 4 ] ^ x -> c [ 7 ] ^ x -> c [ 10 ] ^ x -> c [ 13 ] ^ x -> c [ 15 ] FIELD 7 x -> c [ 0 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 1 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 4 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 4 FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 7 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 7 FIELD 9 7 LEAF_NODE 10 7 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 10 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 10 FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 13 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 13 FIELD 9 13 LEAF_NODE 10 13 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 15 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 15 FIELD 9 15 LEAF_NODE 10 15 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 y -> c [ 9 ] = x -> c [ 0 ] ^ x -> c [ 1 ] ^ x -> c [ 5 ] ^ x -> c [ 6 ] ^ x -> c [ 11 ] ^ x -> c [ 12 ] ^ x -> c [ 14 ] ; EXPR 4 y -> c [ 9 ] = x -> c [ 0 ] ^ x -> c [ 1 ] ^ x -> c [ 5 ] ^ x -> c [ 6 ] ^ x -> c [ 11 ] ^ x -> c [ 12 ] ^ x -> c [ 14 ] ASSIGN 5 y -> c [ 9 ] = x -> c [ 0 ] ^ x -> c [ 1 ] ^ x -> c [ 5 ] ^ x -> c [ 6 ] ^ x -> c [ 11 ] ^ x -> c [ 12 ] ^ x -> c [ 14 ] LVAL 6 y -> c [ 9 ] FIELD 7 y -> c [ 9 ] LEAF_NODE 8 y LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 9 FIELD 9 9 LEAF_NODE 10 9 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 x -> c [ 0 ] ^ x -> c [ 1 ] ^ x -> c [ 5 ] ^ x -> c [ 6 ] ^ x -> c [ 11 ] ^ x -> c [ 12 ] ^ x -> c [ 14 ] FIELD 7 x -> c [ 0 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 1 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 5 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 5 FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 6 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 6 FIELD 9 6 LEAF_NODE 10 6 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 11 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 11 FIELD 9 11 LEAF_NODE 10 11 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 12 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 12 FIELD 9 12 LEAF_NODE 10 12 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 14 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 14 FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 y -> c [ 10 ] = x -> c [ 2 ] ^ x -> c [ 3 ] ^ x -> c [ 5 ] ^ x -> c [ 6 ] ^ x -> c [ 8 ] ^ x -> c [ 13 ] ^ x -> c [ 15 ] ; EXPR 4 y -> c [ 10 ] = x -> c [ 2 ] ^ x -> c [ 3 ] ^ x -> c [ 5 ] ^ x -> c [ 6 ] ^ x -> c [ 8 ] ^ x -> c [ 13 ] ^ x -> c [ 15 ] ASSIGN 5 y -> c [ 10 ] = x -> c [ 2 ] ^ x -> c [ 3 ] ^ x -> c [ 5 ] ^ x -> c [ 6 ] ^ x -> c [ 8 ] ^ x -> c [ 13 ] ^ x -> c [ 15 ] LVAL 6 y -> c [ 10 ] FIELD 7 y -> c [ 10 ] LEAF_NODE 8 y LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 10 FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 x -> c [ 2 ] ^ x -> c [ 3 ] ^ x -> c [ 5 ] ^ x -> c [ 6 ] ^ x -> c [ 8 ] ^ x -> c [ 13 ] ^ x -> c [ 15 ] FIELD 7 x -> c [ 2 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 3 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 5 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 5 FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 6 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 6 FIELD 9 6 LEAF_NODE 10 6 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 8 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 8 FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 13 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 13 FIELD 9 13 LEAF_NODE 10 13 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 15 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 15 FIELD 9 15 LEAF_NODE 10 15 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 y -> c [ 11 ] = x -> c [ 2 ] ^ x -> c [ 3 ] ^ x -> c [ 4 ] ^ x -> c [ 7 ] ^ x -> c [ 9 ] ^ x -> c [ 12 ] ^ x -> c [ 14 ] ; EXPR 4 y -> c [ 11 ] = x -> c [ 2 ] ^ x -> c [ 3 ] ^ x -> c [ 4 ] ^ x -> c [ 7 ] ^ x -> c [ 9 ] ^ x -> c [ 12 ] ^ x -> c [ 14 ] ASSIGN 5 y -> c [ 11 ] = x -> c [ 2 ] ^ x -> c [ 3 ] ^ x -> c [ 4 ] ^ x -> c [ 7 ] ^ x -> c [ 9 ] ^ x -> c [ 12 ] ^ x -> c [ 14 ] LVAL 6 y -> c [ 11 ] FIELD 7 y -> c [ 11 ] LEAF_NODE 8 y LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 11 FIELD 9 11 LEAF_NODE 10 11 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 x -> c [ 2 ] ^ x -> c [ 3 ] ^ x -> c [ 4 ] ^ x -> c [ 7 ] ^ x -> c [ 9 ] ^ x -> c [ 12 ] ^ x -> c [ 14 ] FIELD 7 x -> c [ 2 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 3 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 4 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 4 FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 7 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 7 FIELD 9 7 LEAF_NODE 10 7 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 9 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 9 FIELD 9 9 LEAF_NODE 10 9 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 12 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 12 FIELD 9 12 LEAF_NODE 10 12 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 14 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 14 FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 y -> c [ 12 ] = x -> c [ 1 ] ^ x -> c [ 2 ] ^ x -> c [ 6 ] ^ x -> c [ 7 ] ^ x -> c [ 9 ] ^ x -> c [ 11 ] ^ x -> c [ 12 ] ; EXPR 4 y -> c [ 12 ] = x -> c [ 1 ] ^ x -> c [ 2 ] ^ x -> c [ 6 ] ^ x -> c [ 7 ] ^ x -> c [ 9 ] ^ x -> c [ 11 ] ^ x -> c [ 12 ] ASSIGN 5 y -> c [ 12 ] = x -> c [ 1 ] ^ x -> c [ 2 ] ^ x -> c [ 6 ] ^ x -> c [ 7 ] ^ x -> c [ 9 ] ^ x -> c [ 11 ] ^ x -> c [ 12 ] LVAL 6 y -> c [ 12 ] FIELD 7 y -> c [ 12 ] LEAF_NODE 8 y LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 12 FIELD 9 12 LEAF_NODE 10 12 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 x -> c [ 1 ] ^ x -> c [ 2 ] ^ x -> c [ 6 ] ^ x -> c [ 7 ] ^ x -> c [ 9 ] ^ x -> c [ 11 ] ^ x -> c [ 12 ] FIELD 7 x -> c [ 1 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 2 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 6 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 6 FIELD 9 6 LEAF_NODE 10 6 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 7 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 7 FIELD 9 7 LEAF_NODE 10 7 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 9 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 9 FIELD 9 9 LEAF_NODE 10 9 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 11 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 11 FIELD 9 11 LEAF_NODE 10 11 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 12 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 12 FIELD 9 12 LEAF_NODE 10 12 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 y -> c [ 13 ] = x -> c [ 0 ] ^ x -> c [ 3 ] ^ x -> c [ 6 ] ^ x -> c [ 7 ] ^ x -> c [ 8 ] ^ x -> c [ 10 ] ^ x -> c [ 13 ] ; EXPR 4 y -> c [ 13 ] = x -> c [ 0 ] ^ x -> c [ 3 ] ^ x -> c [ 6 ] ^ x -> c [ 7 ] ^ x -> c [ 8 ] ^ x -> c [ 10 ] ^ x -> c [ 13 ] ASSIGN 5 y -> c [ 13 ] = x -> c [ 0 ] ^ x -> c [ 3 ] ^ x -> c [ 6 ] ^ x -> c [ 7 ] ^ x -> c [ 8 ] ^ x -> c [ 10 ] ^ x -> c [ 13 ] LVAL 6 y -> c [ 13 ] FIELD 7 y -> c [ 13 ] LEAF_NODE 8 y LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 13 FIELD 9 13 LEAF_NODE 10 13 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 x -> c [ 0 ] ^ x -> c [ 3 ] ^ x -> c [ 6 ] ^ x -> c [ 7 ] ^ x -> c [ 8 ] ^ x -> c [ 10 ] ^ x -> c [ 13 ] FIELD 7 x -> c [ 0 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 3 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 6 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 6 FIELD 9 6 LEAF_NODE 10 6 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 7 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 7 FIELD 9 7 LEAF_NODE 10 7 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 8 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 8 FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 10 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 10 FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 13 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 13 FIELD 9 13 LEAF_NODE 10 13 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 y -> c [ 14 ] = x -> c [ 0 ] ^ x -> c [ 3 ] ^ x -> c [ 4 ] ^ x -> c [ 5 ] ^ x -> c [ 9 ] ^ x -> c [ 11 ] ^ x -> c [ 14 ] ; EXPR 4 y -> c [ 14 ] = x -> c [ 0 ] ^ x -> c [ 3 ] ^ x -> c [ 4 ] ^ x -> c [ 5 ] ^ x -> c [ 9 ] ^ x -> c [ 11 ] ^ x -> c [ 14 ] ASSIGN 5 y -> c [ 14 ] = x -> c [ 0 ] ^ x -> c [ 3 ] ^ x -> c [ 4 ] ^ x -> c [ 5 ] ^ x -> c [ 9 ] ^ x -> c [ 11 ] ^ x -> c [ 14 ] LVAL 6 y -> c [ 14 ] FIELD 7 y -> c [ 14 ] LEAF_NODE 8 y LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 14 FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 x -> c [ 0 ] ^ x -> c [ 3 ] ^ x -> c [ 4 ] ^ x -> c [ 5 ] ^ x -> c [ 9 ] ^ x -> c [ 11 ] ^ x -> c [ 14 ] FIELD 7 x -> c [ 0 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 3 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 4 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 4 FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 5 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 5 FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 9 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 9 FIELD 9 9 LEAF_NODE 10 9 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 11 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 11 FIELD 9 11 LEAF_NODE 10 11 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 14 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 14 FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 y -> c [ 15 ] = x -> c [ 1 ] ^ x -> c [ 2 ] ^ x -> c [ 4 ] ^ x -> c [ 5 ] ^ x -> c [ 8 ] ^ x -> c [ 10 ] ^ x -> c [ 15 ] ; EXPR 4 y -> c [ 15 ] = x -> c [ 1 ] ^ x -> c [ 2 ] ^ x -> c [ 4 ] ^ x -> c [ 5 ] ^ x -> c [ 8 ] ^ x -> c [ 10 ] ^ x -> c [ 15 ] ASSIGN 5 y -> c [ 15 ] = x -> c [ 1 ] ^ x -> c [ 2 ] ^ x -> c [ 4 ] ^ x -> c [ 5 ] ^ x -> c [ 8 ] ^ x -> c [ 10 ] ^ x -> c [ 15 ] LVAL 6 y -> c [ 15 ] FIELD 7 y -> c [ 15 ] LEAF_NODE 8 y LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 15 FIELD 9 15 LEAF_NODE 10 15 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 x -> c [ 1 ] ^ x -> c [ 2 ] ^ x -> c [ 4 ] ^ x -> c [ 5 ] ^ x -> c [ 8 ] ^ x -> c [ 10 ] ^ x -> c [ 15 ] FIELD 7 x -> c [ 1 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 2 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 4 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 4 FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 5 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 5 FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 8 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 8 FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 10 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 10 FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 x -> c [ 15 ] LEAF_NODE 8 x LEAF_NODE 8 -> LEAF_NODE 8 c LEAF_NODE 8 [ EXPR 8 15 FIELD 9 15 LEAF_NODE 10 15 LEAF_NODE 8 ] LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 160, "project": "openssl_ast_normal_function_test_100", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static const SSL_METHOD * LEAF_NODE 3 static TYPE_NAME 3 const SSL_METHOD LEAF_NODE 4 const LEAF_NODE 4 SSL_METHOD LEAF_NODE 3 * FUNCTION_NAME 2 ssl23_get_server_method LEAF_NODE 3 ssl23_get_server_method PARAMETER_LIST 2 ( int ver ) LEAF_NODE 3 ( PARAMETER_DECL 3 int ver TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 ver LEAF_NODE 5 ver LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ver == SSL2_VERSION EXPR 5 ver == SSL2_VERSION FIELD 6 ver LEAF_NODE 7 ver EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 SSL2_VERSION LEAF_NODE 7 SSL2_VERSION LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return ( SSLv2_server_method ( ) ) ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 ( SSLv2_server_method ( ) ) EXPR 7 ( SSLv2_server_method ( ) ) LEAF_NODE 8 ( FUNCTION_CALL 8 SSLv2_server_method ( ) CALLEE 9 SSLv2_server_method LEAF_NODE 10 SSLv2_server_method LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 8 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ver == SSL3_VERSION EXPR 5 ver == SSL3_VERSION FIELD 6 ver LEAF_NODE 7 ver EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 SSL3_VERSION LEAF_NODE 7 SSL3_VERSION LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return ( SSLv3_server_method ( ) ) ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 ( SSLv3_server_method ( ) ) EXPR 7 ( SSLv3_server_method ( ) ) LEAF_NODE 8 ( FUNCTION_CALL 8 SSLv3_server_method ( ) CALLEE 9 SSLv3_server_method LEAF_NODE 10 SSLv3_server_method LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 8 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ver == TLS1_VERSION EXPR 7 ver == TLS1_VERSION FIELD 8 ver LEAF_NODE 9 ver EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 TLS1_VERSION LEAF_NODE 9 TLS1_VERSION LEAF_NODE 6 ) STATEMENTS 6 JUMP_STATEMENT 7 return ( TLSv1_server_method ( ) ) ; KEYWORD 8 return LEAF_NODE 9 return DESTINATION 8 ( TLSv1_server_method ( ) ) EXPR 9 ( TLSv1_server_method ( ) ) LEAF_NODE 10 ( FUNCTION_CALL 10 TLSv1_server_method ( ) CALLEE 11 TLSv1_server_method LEAF_NODE 12 TLSv1_server_method LEAF_NODE 11 ( LEAF_NODE 11 ) LEAF_NODE 10 ) LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ver == TLS1_1_VERSION EXPR 7 ver == TLS1_1_VERSION FIELD 8 ver LEAF_NODE 9 ver EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 TLS1_1_VERSION LEAF_NODE 9 TLS1_1_VERSION LEAF_NODE 6 ) STATEMENTS 6 JUMP_STATEMENT 7 return ( TLSv1_1_server_method ( ) ) ; KEYWORD 8 return LEAF_NODE 9 return DESTINATION 8 ( TLSv1_1_server_method ( ) ) EXPR 9 ( TLSv1_1_server_method ( ) ) LEAF_NODE 10 ( FUNCTION_CALL 10 TLSv1_1_server_method ( ) CALLEE 11 TLSv1_1_server_method LEAF_NODE 12 TLSv1_1_server_method LEAF_NODE 11 ( LEAF_NODE 11 ) LEAF_NODE 10 ) LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ver == TLS1_2_VERSION EXPR 7 ver == TLS1_2_VERSION FIELD 8 ver LEAF_NODE 9 ver EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 TLS1_2_VERSION LEAF_NODE 9 TLS1_2_VERSION LEAF_NODE 6 ) STATEMENTS 6 JUMP_STATEMENT 7 return ( TLSv1_2_server_method ( ) ) ; KEYWORD 8 return LEAF_NODE 9 return DESTINATION 8 ( TLSv1_2_server_method ( ) ) EXPR 9 ( TLSv1_2_server_method ( ) ) LEAF_NODE 10 ( FUNCTION_CALL 10 TLSv1_2_server_method ( ) CALLEE 11 TLSv1_2_server_method LEAF_NODE 12 TLSv1_2_server_method LEAF_NODE 11 ( LEAF_NODE 11 ) LEAF_NODE 10 ) LEAF_NODE 8 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 return LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 2 }", "idx": 161, "project": "openssl_ast_vul_function_test_31", "target": 1}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } ; CLASS_DEF 2 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } CLASS_DEF 3 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } LEAF_NODE 4 struct CLASS_NAME 4 bio_addrinfo_st LEAF_NODE 5 bio_addrinfo_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; SIMPLE_DECL 5 int bai_family ; VAR_DECL 6 int bai_family TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_family LEAF_NODE 8 bai_family LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_socktype ; VAR_DECL 6 int bai_socktype TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_socktype LEAF_NODE 8 bai_socktype LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_protocol ; VAR_DECL 6 int bai_protocol TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_protocol LEAF_NODE 8 bai_protocol LEAF_NODE 6 ; SIMPLE_DECL 5 size_t bai_addrlen ; VAR_DECL 6 size_t bai_addrlen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 bai_addrlen LEAF_NODE 8 bai_addrlen LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr * bai_addr ; VAR_DECL 6 struct sockaddr * bai_addr TYPE 7 struct sockaddr * TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr POINTER 8 * LEAF_NODE 9 * NAME 7 bai_addr LEAF_NODE 8 bai_addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct bio_addrinfo_st * bai_next ; VAR_DECL 6 struct bio_addrinfo_st * bai_next TYPE 7 struct bio_addrinfo_st * TYPE_NAME 8 struct bio_addrinfo_st LEAF_NODE 9 struct LEAF_NODE 9 bio_addrinfo_st POINTER 8 * LEAF_NODE 9 * NAME 7 bai_next LEAF_NODE 8 bai_next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BIO_ADDRINFO ; VAR_DECL 2 struct bio_addrinfo_st BIO_ADDRINFO TYPE 3 struct bio_addrinfo_st TYPE_NAME 4 struct bio_addrinfo_st LEAF_NODE 5 struct LEAF_NODE 5 bio_addrinfo_st NAME 3 BIO_ADDRINFO LEAF_NODE 4 BIO_ADDRINFO LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t socklen_t ; VAR_DECL 2 uint32_t socklen_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 socklen_t LEAF_NODE 4 socklen_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } ; CLASS_DEF 2 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } CLASS_DEF 3 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } LEAF_NODE 4 enum CLASS_NAME 4 BIO_lookup_type LEAF_NODE 5 BIO_lookup_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER LEAF_NODE 5 BIO_LOOKUP_CLIENT LEAF_NODE 5 , LEAF_NODE 5 BIO_LOOKUP_SERVER LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 BIO_lookup LEAF_NODE 3 BIO_lookup PARAMETER_LIST 2 ( const char * host , const char * service , enum BIO_lookup_type lookup_type , int family , int socktype , BIO_ADDRINFO * * res ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * host TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 host LEAF_NODE 5 host LEAF_NODE 3 , PARAMETER_DECL 3 const char * service TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 service LEAF_NODE 5 service LEAF_NODE 3 , PARAMETER_DECL 3 enum BIO_lookup_type lookup_type TYPE 4 enum BIO_lookup_type TYPE_NAME 5 enum BIO_lookup_type LEAF_NODE 6 enum LEAF_NODE 6 BIO_lookup_type NAME 4 lookup_type LEAF_NODE 5 lookup_type LEAF_NODE 3 , PARAMETER_DECL 3 int family TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 family LEAF_NODE 5 family LEAF_NODE 3 , PARAMETER_DECL 3 int socktype TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 socktype LEAF_NODE 5 socktype LEAF_NODE 3 , PARAMETER_DECL 3 BIO_ADDRINFO * * res TYPE 4 BIO_ADDRINFO * * TYPE_NAME 5 BIO_ADDRINFO LEAF_NODE 6 BIO_ADDRINFO POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 res LEAF_NODE 5 res LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return BIO_lookup_ex ( host , service , lookup_type , family , socktype , 0 , res ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 BIO_lookup_ex ( host , service , lookup_type , family , socktype , 0 , res ) EXPR 5 BIO_lookup_ex ( host , service , lookup_type , family , socktype , 0 , res ) FUNCTION_CALL 6 BIO_lookup_ex ( host , service , lookup_type , family , socktype , 0 , res ) CALLEE 7 BIO_lookup_ex LEAF_NODE 8 BIO_lookup_ex LEAF_NODE 7 ( ARGUMENT 7 host FIELD 8 host LEAF_NODE 9 host LEAF_NODE 7 , ARGUMENT 7 service FIELD 8 service LEAF_NODE 9 service LEAF_NODE 7 , ARGUMENT 7 lookup_type FIELD 8 lookup_type LEAF_NODE 9 lookup_type LEAF_NODE 7 , ARGUMENT 7 family FIELD 8 family LEAF_NODE 9 family LEAF_NODE 7 , ARGUMENT 7 socktype FIELD 8 socktype LEAF_NODE 9 socktype LEAF_NODE 7 , ARGUMENT 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 7 , ARGUMENT 7 res FIELD 8 res LEAF_NODE 9 res LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 162, "project": "openssl_ast_normal_function_test_89", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_item_i2d_bio LEAF_NODE 3 ASN1_item_i2d_bio PARAMETER_LIST 2 ( const ASN1_ITEM * it , BIO * out , void * x ) LEAF_NODE 3 ( PARAMETER_DECL 3 const ASN1_ITEM * it TYPE 4 const ASN1_ITEM * TYPE_NAME 5 const ASN1_ITEM LEAF_NODE 6 const LEAF_NODE 6 ASN1_ITEM POINTER 5 * LEAF_NODE 6 * NAME 4 it LEAF_NODE 5 it LEAF_NODE 3 , PARAMETER_DECL 3 BIO * out TYPE 4 BIO * TYPE_NAME 5 BIO LEAF_NODE 6 BIO POINTER 5 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 void * x TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 x LEAF_NODE 5 x LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned char * b ; b = NULL ; VAR_DECL 4 unsigned char * b ; b = NULL TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 b LEAF_NODE 6 b LEAF_NODE 5 ; INIT 5 b = NULL ASSIGN 6 b = NULL LVAL 7 b NAME 8 b LEAF_NODE 9 b ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int i , int j ; j = 0 , int n , int ret ; ret = 1 ; INIT_DECL_LIST 4 int i , int j ; j = 0 , int n , int ret ; ret = 1 VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 , INIT_DECL_LIST 5 int j ; j = 0 , int n , int ret ; ret = 1 VAR_DECL 6 int j ; j = 0 TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 j LEAF_NODE 8 j LEAF_NODE 7 ; INIT 7 j = 0 ASSIGN 8 j = 0 LVAL 9 j NAME 10 j LEAF_NODE 11 j ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 6 , INIT_DECL_LIST 6 int n , int ret ; ret = 1 VAR_DECL 7 int n TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 n LEAF_NODE 9 n LEAF_NODE 7 , VAR_DECL 7 int ret ; ret = 1 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 ret LEAF_NODE 9 ret LEAF_NODE 8 ; INIT 8 ret = 1 ASSIGN 9 ret = 1 LVAL 10 ret NAME 11 ret LEAF_NODE 12 ret ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 1 FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 n = ASN1_item_i2d ( x , & b , it ) ; EXPR 4 n = ASN1_item_i2d ( x , & b , it ) ASSIGN 5 n = ASN1_item_i2d ( x , & b , it ) LVAL 6 n FIELD 7 n LEAF_NODE 8 n ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ASN1_item_i2d ( x , & b , it ) FUNCTION_CALL 7 ASN1_item_i2d ( x , & b , it ) CALLEE 8 ASN1_item_i2d LEAF_NODE 9 ASN1_item_i2d LEAF_NODE 8 ( ARGUMENT 8 x FIELD 9 x LEAF_NODE 10 x LEAF_NODE 8 , ARGUMENT 8 & b UNARY_EXPR 9 & b UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 b LEAF_NODE 11 b LEAF_NODE 8 , ARGUMENT 8 it FIELD 9 it LEAF_NODE 10 it LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 b == NULL EXPR 5 b == NULL FIELD 6 b LEAF_NODE 7 b EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASN1err ( ASN1_F_ASN1_ITEM_I2D_BIO , ERR_R_MALLOC_FAILURE ) ; EXPR 7 ASN1err ( ASN1_F_ASN1_ITEM_I2D_BIO , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 8 ASN1err ( ASN1_F_ASN1_ITEM_I2D_BIO , ERR_R_MALLOC_FAILURE ) CALLEE 9 ASN1err LEAF_NODE 10 ASN1err LEAF_NODE 9 ( ARGUMENT 9 ASN1_F_ASN1_ITEM_I2D_BIO FIELD 10 ASN1_F_ASN1_ITEM_I2D_BIO LEAF_NODE 11 ASN1_F_ASN1_ITEM_I2D_BIO LEAF_NODE 9 , ARGUMENT 9 ERR_R_MALLOC_FAILURE FIELD 10 ERR_R_MALLOC_FAILURE LEAF_NODE 11 ERR_R_MALLOC_FAILURE LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; LEAF_NODE 4 CONDITION LEAF_NODE 4 ; LEAF_NODE 4 FOR_EXPR LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 i = BIO_write ( out , & ( b [ j ] ) , n ) ; EXPR 7 i = BIO_write ( out , & ( b [ j ] ) , n ) ASSIGN 8 i = BIO_write ( out , & ( b [ j ] ) , n ) LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 BIO_write ( out , & ( b [ j ] ) , n ) FUNCTION_CALL 10 BIO_write ( out , & ( b [ j ] ) , n ) CALLEE 11 BIO_write LEAF_NODE 12 BIO_write LEAF_NODE 11 ( ARGUMENT 11 out FIELD 12 out LEAF_NODE 13 out LEAF_NODE 11 , ARGUMENT 11 & ( b [ j ] ) UNARY_EXPR 12 & ( b [ j ] ) UNARY_OPERATOR 13 & LEAF_NODE 14 & LEAF_NODE 13 ( FIELD 13 b [ j ] LEAF_NODE 14 b LEAF_NODE 14 [ EXPR 14 j FIELD 15 j LEAF_NODE 16 j LEAF_NODE 14 ] LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 n FIELD 12 n LEAF_NODE 13 n LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 i == n EXPR 8 i == n FIELD 9 i LEAF_NODE 10 i EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 n LEAF_NODE 10 n LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 break DESTINATION ; KEYWORD 9 break LEAF_NODE 10 break LEAF_NODE 9 DESTINATION LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 i <= 0 EXPR 8 i <= 0 FIELD 9 i LEAF_NODE 10 i REL_OPERATOR 9 <= LEAF_NODE 10 <= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ret = 0 ; EXPR 10 ret = 0 ASSIGN 11 ret = 0 LVAL 12 ret FIELD 13 ret LEAF_NODE 14 ret ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 j += i ; EXPR 7 j += i ASSIGN 8 j += i LVAL 9 j FIELD 10 j LEAF_NODE 11 j ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 7 ; EXPR_STATEMENT 6 n -= i ; EXPR 7 n -= i ASSIGN 8 n -= i LVAL 9 n FIELD 10 n LEAF_NODE 11 n ASSIGN_OP 9 -= LEAF_NODE 10 -= RVAL 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 OPENSSL_free ( b ) ; EXPR 4 OPENSSL_free ( b ) FUNCTION_CALL 5 OPENSSL_free ( b ) CALLEE 6 OPENSSL_free LEAF_NODE 7 OPENSSL_free LEAF_NODE 6 ( ARGUMENT 6 b FIELD 7 b LEAF_NODE 8 b LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return ret ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ret EXPR 5 ret FIELD 6 ret LEAF_NODE 7 ret LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 163, "project": "openssl_ast_normal_function_test_74", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ssl2_generate_key_material LEAF_NODE 3 ssl2_generate_key_material PARAMETER_LIST 2 ( SSL * s ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned int i ; VAR_DECL 4 unsigned int i TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; SIMPLE_DECL 3 EVP_MD_CTX ctx ; VAR_DECL 4 EVP_MD_CTX ctx TYPE 5 EVP_MD_CTX TYPE_NAME 6 EVP_MD_CTX LEAF_NODE 7 EVP_MD_CTX NAME 5 ctx LEAF_NODE 6 ctx LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * km ; VAR_DECL 4 unsigned char * km TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 km LEAF_NODE 6 km LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char c ; c = '0' ; VAR_DECL 4 unsigned char c ; c = '0' TYPE 5 unsigned char TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char NAME 5 c LEAF_NODE 6 c LEAF_NODE 5 ; INIT 5 c = '0' ASSIGN 6 c = '0' LVAL 7 c NAME 8 c LEAF_NODE 9 c ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 '0' FIELD 8 '0' LEAF_NODE 9 '0' LEAF_NODE 4 ; SIMPLE_DECL 3 const EVP_MD * md5 ; VAR_DECL 4 const EVP_MD * md5 TYPE 5 const EVP_MD * TYPE_NAME 6 const EVP_MD LEAF_NODE 7 const LEAF_NODE 7 EVP_MD POINTER 6 * LEAF_NODE 7 * NAME 5 md5 LEAF_NODE 6 md5 LEAF_NODE 4 ; EXPR_STATEMENT 3 md5 = EVP_md5 ( ) ; EXPR 4 md5 = EVP_md5 ( ) ASSIGN 5 md5 = EVP_md5 ( ) LVAL 6 md5 FIELD 7 md5 LEAF_NODE 8 md5 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 EVP_md5 ( ) FUNCTION_CALL 7 EVP_md5 ( ) CALLEE 8 EVP_md5 LEAF_NODE 9 EVP_md5 LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 c = os_toascii [ '0' ] ; EXPR 4 c = os_toascii [ '0' ] ASSIGN 5 c = os_toascii [ '0' ] LVAL 6 c FIELD 7 c LEAF_NODE 8 c ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 os_toascii [ '0' ] FIELD 7 os_toascii [ '0' ] LEAF_NODE 8 os_toascii LEAF_NODE 8 [ EXPR 8 '0' FIELD 9 '0' LEAF_NODE 10 '0' LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_MD_CTX_init ( & ctx ) ; EXPR 4 EVP_MD_CTX_init ( & ctx ) FUNCTION_CALL 5 EVP_MD_CTX_init ( & ctx ) CALLEE 6 EVP_MD_CTX_init LEAF_NODE 7 EVP_MD_CTX_init LEAF_NODE 6 ( ARGUMENT 6 & ctx UNARY_EXPR 7 & ctx UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 ctx LEAF_NODE 9 ctx LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 km = s -> s2 -> key_material ; EXPR 4 km = s -> s2 -> key_material ASSIGN 5 km = s -> s2 -> key_material LVAL 6 km FIELD 7 km LEAF_NODE 8 km ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 s -> s2 -> key_material FIELD 7 s -> s2 -> key_material LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s2 LEAF_NODE 8 -> LEAF_NODE 8 key_material LEAF_NODE 4 ; LEAF_NODE 3 if LEAF_NODE 3 ( LEAF_NODE 3 s LEAF_NODE 3 -> LEAF_NODE 3 session LEAF_NODE 3 -> LEAF_NODE 3 master_key_length LEAF_NODE 3 < LEAF_NODE 3 0 LEAF_NODE 3 || LEAF_NODE 3 s LEAF_NODE 3 -> LEAF_NODE 3 session LEAF_NODE 3 -> LEAF_NODE 3 master_key_length LEAF_NODE 3 > LEAF_NODE 3 ( LEAF_NODE 3 int LEAF_NODE 3 ) LEAF_NODE 3 sizeof LEAF_NODE 3 ( LEAF_NODE 3 s LEAF_NODE 3 -> LEAF_NODE 3 session LEAF_NODE 3 -> LEAF_NODE 3 master_key LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 EXPR_STATEMENT 4 SSLerr ( SSL_F_SSL2_GENERATE_KEY_MATERIAL , ERR_R_INTERNAL_ERROR ) ; EXPR 5 SSLerr ( SSL_F_SSL2_GENERATE_KEY_MATERIAL , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 6 SSLerr ( SSL_F_SSL2_GENERATE_KEY_MATERIAL , ERR_R_INTERNAL_ERROR ) CALLEE 7 SSLerr LEAF_NODE 8 SSLerr LEAF_NODE 7 ( ARGUMENT 7 SSL_F_SSL2_GENERATE_KEY_MATERIAL FIELD 8 SSL_F_SSL2_GENERATE_KEY_MATERIAL LEAF_NODE 9 SSL_F_SSL2_GENERATE_KEY_MATERIAL LEAF_NODE 7 , ARGUMENT 7 ERR_R_INTERNAL_ERROR FIELD 8 ERR_R_INTERNAL_ERROR LEAF_NODE 9 ERR_R_INTERNAL_ERROR LEAF_NODE 7 ) LEAF_NODE 5 ; JUMP_STATEMENT 4 return 0 ; KEYWORD 5 return LEAF_NODE 6 return DESTINATION 5 0 EXPR 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 5 ; LEAF_NODE 3 } ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < s -> s2 -> key_material_length EXPR 5 i < s -> s2 -> key_material_length FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 s -> s2 -> key_material_length LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 s2 LEAF_NODE 7 -> LEAF_NODE 7 key_material_length LEAF_NODE 4 ; FOR_EXPR 4 i += EVP_MD_size ( md5 ) EXPR 5 i += EVP_MD_size ( md5 ) ASSIGN 6 i += EVP_MD_size ( md5 ) LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 += LEAF_NODE 8 += RVAL 7 EVP_MD_size ( md5 ) FUNCTION_CALL 8 EVP_MD_size ( md5 ) CALLEE 9 EVP_MD_size LEAF_NODE 10 EVP_MD_size LEAF_NODE 9 ( ARGUMENT 9 md5 FIELD 10 md5 LEAF_NODE 11 md5 LEAF_NODE 9 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( ( km - s -> s2 -> key_material ) + EVP_MD_size ( md5 ) ) > ( int ) sizeof ( s -> s2 -> key_material ) EXPR 8 ( ( km - s -> s2 -> key_material ) + EVP_MD_size ( md5 ) ) > ( int ) sizeof ( s -> s2 -> key_material ) LEAF_NODE 9 ( LEAF_NODE 9 ( FIELD 9 km LEAF_NODE 10 km LEAF_NODE 9 - FIELD 9 s -> s2 -> key_material LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 s2 LEAF_NODE 10 -> LEAF_NODE 10 key_material LEAF_NODE 9 ) LEAF_NODE 9 + FUNCTION_CALL 9 EVP_MD_size ( md5 ) CALLEE 10 EVP_MD_size LEAF_NODE 11 EVP_MD_size LEAF_NODE 10 ( ARGUMENT 10 md5 FIELD 11 md5 LEAF_NODE 12 md5 LEAF_NODE 10 ) LEAF_NODE 9 ) REL_OPERATOR 9 > LEAF_NODE 10 > LEAF_NODE 9 ( TYPE_NAME 9 int LEAF_NODE 10 int LEAF_NODE 9 ) FUNCTION_CALL 9 sizeof ( s -> s2 -> key_material ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 s -> s2 -> key_material FIELD 11 s -> s2 -> key_material LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 s2 LEAF_NODE 12 -> LEAF_NODE 12 key_material LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL2_GENERATE_KEY_MATERIAL , ERR_R_INTERNAL_ERROR ) ; EXPR 10 SSLerr ( SSL_F_SSL2_GENERATE_KEY_MATERIAL , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL2_GENERATE_KEY_MATERIAL , ERR_R_INTERNAL_ERROR ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL2_GENERATE_KEY_MATERIAL FIELD 13 SSL_F_SSL2_GENERATE_KEY_MATERIAL LEAF_NODE 14 SSL_F_SSL2_GENERATE_KEY_MATERIAL LEAF_NODE 12 , ARGUMENT 12 ERR_R_INTERNAL_ERROR FIELD 13 ERR_R_INTERNAL_ERROR LEAF_NODE 14 ERR_R_INTERNAL_ERROR LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return 0 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 0 EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 EVP_DigestInit_ex ( & ctx , md5 , NULL ) ; EXPR 7 EVP_DigestInit_ex ( & ctx , md5 , NULL ) FUNCTION_CALL 8 EVP_DigestInit_ex ( & ctx , md5 , NULL ) CALLEE 9 EVP_DigestInit_ex LEAF_NODE 10 EVP_DigestInit_ex LEAF_NODE 9 ( ARGUMENT 9 & ctx UNARY_EXPR 10 & ctx UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 ctx LEAF_NODE 12 ctx LEAF_NODE 9 , ARGUMENT 9 md5 FIELD 10 md5 LEAF_NODE 11 md5 LEAF_NODE 9 , ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_assert ( s -> session -> master_key_length >= 0 && s -> session -> master_key_length <= ( int ) sizeof ( s -> session -> master_key ) ) ; EXPR 7 OPENSSL_assert ( s -> session -> master_key_length >= 0 && s -> session -> master_key_length <= ( int ) sizeof ( s -> session -> master_key ) ) FUNCTION_CALL 8 OPENSSL_assert ( s -> session -> master_key_length >= 0 && s -> session -> master_key_length <= ( int ) sizeof ( s -> session -> master_key ) ) CALLEE 9 OPENSSL_assert LEAF_NODE 10 OPENSSL_assert LEAF_NODE 9 ( ARGUMENT 9 s -> session -> master_key_length >= 0 && s -> session -> master_key_length <= ( int ) sizeof ( s -> session -> master_key ) AND 10 s -> session -> master_key_length >= 0 && s -> session -> master_key_length <= ( int ) sizeof ( s -> session -> master_key ) EXPR 11 s -> session -> master_key_length >= 0 FIELD 12 s -> session -> master_key_length LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 session LEAF_NODE 13 -> LEAF_NODE 13 master_key_length REL_OPERATOR 12 >= LEAF_NODE 13 >= FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 && EXPR 11 s -> session -> master_key_length <= ( int ) sizeof ( s -> session -> master_key ) FIELD 12 s -> session -> master_key_length LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 session LEAF_NODE 13 -> LEAF_NODE 13 master_key_length REL_OPERATOR 12 <= LEAF_NODE 13 <= LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) FUNCTION_CALL 12 sizeof ( s -> session -> master_key ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 s -> session -> master_key FIELD 14 s -> session -> master_key LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 session LEAF_NODE 15 -> LEAF_NODE 15 master_key LEAF_NODE 13 ) LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 EVP_DigestUpdate ( & ctx , s -> session -> master_key , s -> session -> master_key_length ) ; EXPR 7 EVP_DigestUpdate ( & ctx , s -> session -> master_key , s -> session -> master_key_length ) FUNCTION_CALL 8 EVP_DigestUpdate ( & ctx , s -> session -> master_key , s -> session -> master_key_length ) CALLEE 9 EVP_DigestUpdate LEAF_NODE 10 EVP_DigestUpdate LEAF_NODE 9 ( ARGUMENT 9 & ctx UNARY_EXPR 10 & ctx UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 ctx LEAF_NODE 12 ctx LEAF_NODE 9 , ARGUMENT 9 s -> session -> master_key FIELD 10 s -> session -> master_key LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 session LEAF_NODE 11 -> LEAF_NODE 11 master_key LEAF_NODE 9 , ARGUMENT 9 s -> session -> master_key_length FIELD 10 s -> session -> master_key_length LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 session LEAF_NODE 11 -> LEAF_NODE 11 master_key_length LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 EVP_DigestUpdate ( & ctx , & c , 1 ) ; EXPR 7 EVP_DigestUpdate ( & ctx , & c , 1 ) FUNCTION_CALL 8 EVP_DigestUpdate ( & ctx , & c , 1 ) CALLEE 9 EVP_DigestUpdate LEAF_NODE 10 EVP_DigestUpdate LEAF_NODE 9 ( ARGUMENT 9 & ctx UNARY_EXPR 10 & ctx UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 ctx LEAF_NODE 12 ctx LEAF_NODE 9 , ARGUMENT 9 & c UNARY_EXPR 10 & c UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 c LEAF_NODE 12 c LEAF_NODE 9 , ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 c ++ ; EXPR 7 c ++ FIELD 8 c ++ LEAF_NODE 9 c LEAF_NODE 9 ++ LEAF_NODE 7 ; EXPR_STATEMENT 6 EVP_DigestUpdate ( & ctx , s -> s2 -> challenge , s -> s2 -> challenge_length ) ; EXPR 7 EVP_DigestUpdate ( & ctx , s -> s2 -> challenge , s -> s2 -> challenge_length ) FUNCTION_CALL 8 EVP_DigestUpdate ( & ctx , s -> s2 -> challenge , s -> s2 -> challenge_length ) CALLEE 9 EVP_DigestUpdate LEAF_NODE 10 EVP_DigestUpdate LEAF_NODE 9 ( ARGUMENT 9 & ctx UNARY_EXPR 10 & ctx UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 ctx LEAF_NODE 12 ctx LEAF_NODE 9 , ARGUMENT 9 s -> s2 -> challenge FIELD 10 s -> s2 -> challenge LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s2 LEAF_NODE 11 -> LEAF_NODE 11 challenge LEAF_NODE 9 , ARGUMENT 9 s -> s2 -> challenge_length FIELD 10 s -> s2 -> challenge_length LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s2 LEAF_NODE 11 -> LEAF_NODE 11 challenge_length LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 EVP_DigestUpdate ( & ctx , s -> s2 -> conn_id , s -> s2 -> conn_id_length ) ; EXPR 7 EVP_DigestUpdate ( & ctx , s -> s2 -> conn_id , s -> s2 -> conn_id_length ) FUNCTION_CALL 8 EVP_DigestUpdate ( & ctx , s -> s2 -> conn_id , s -> s2 -> conn_id_length ) CALLEE 9 EVP_DigestUpdate LEAF_NODE 10 EVP_DigestUpdate LEAF_NODE 9 ( ARGUMENT 9 & ctx UNARY_EXPR 10 & ctx UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 ctx LEAF_NODE 12 ctx LEAF_NODE 9 , ARGUMENT 9 s -> s2 -> conn_id FIELD 10 s -> s2 -> conn_id LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s2 LEAF_NODE 11 -> LEAF_NODE 11 conn_id LEAF_NODE 9 , ARGUMENT 9 s -> s2 -> conn_id_length FIELD 10 s -> s2 -> conn_id_length LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s2 LEAF_NODE 11 -> LEAF_NODE 11 conn_id_length LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 EVP_DigestFinal_ex ( & ctx , km , NULL ) ; EXPR 7 EVP_DigestFinal_ex ( & ctx , km , NULL ) FUNCTION_CALL 8 EVP_DigestFinal_ex ( & ctx , km , NULL ) CALLEE 9 EVP_DigestFinal_ex LEAF_NODE 10 EVP_DigestFinal_ex LEAF_NODE 9 ( ARGUMENT 9 & ctx UNARY_EXPR 10 & ctx UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 ctx LEAF_NODE 12 ctx LEAF_NODE 9 , ARGUMENT 9 km FIELD 10 km LEAF_NODE 11 km LEAF_NODE 9 , ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 km += EVP_MD_size ( md5 ) ; EXPR 7 km += EVP_MD_size ( md5 ) ASSIGN 8 km += EVP_MD_size ( md5 ) LVAL 9 km FIELD 10 km LEAF_NODE 11 km ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 EVP_MD_size ( md5 ) FUNCTION_CALL 10 EVP_MD_size ( md5 ) CALLEE 11 EVP_MD_size LEAF_NODE 12 EVP_MD_size LEAF_NODE 11 ( ARGUMENT 11 md5 FIELD 12 md5 LEAF_NODE 13 md5 LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 EVP_MD_CTX_cleanup ( & ctx ) ; EXPR 4 EVP_MD_CTX_cleanup ( & ctx ) FUNCTION_CALL 5 EVP_MD_CTX_cleanup ( & ctx ) CALLEE 6 EVP_MD_CTX_cleanup LEAF_NODE 7 EVP_MD_CTX_cleanup LEAF_NODE 6 ( ARGUMENT 6 & ctx UNARY_EXPR 7 & ctx UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 ctx LEAF_NODE 9 ctx LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 164, "project": "openssl_ast_vul_function_test_30", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 rot31r LEAF_NODE 3 rot31r PARAMETER_LIST 2 ( ARIA_u128 * o , const ARIA_u128 * xor , const ARIA_u128 * z ) LEAF_NODE 3 ( PARAMETER_DECL 3 ARIA_u128 * o TYPE 4 ARIA_u128 * TYPE_NAME 5 ARIA_u128 LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 o LEAF_NODE 5 o LEAF_NODE 3 , PARAMETER_DECL 3 const ARIA_u128 * xor TYPE 4 const ARIA_u128 * TYPE_NAME 5 const ARIA_u128 LEAF_NODE 6 const LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 xor LEAF_NODE 5 xor LEAF_NODE 3 , PARAMETER_DECL 3 const ARIA_u128 * z TYPE 4 const ARIA_u128 * TYPE_NAME 5 const ARIA_u128 LEAF_NODE 6 const LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 z LEAF_NODE 5 z LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 rotnr ( 31 , o , xor , z ) ; EXPR 4 rotnr ( 31 , o , xor , z ) FUNCTION_CALL 5 rotnr ( 31 , o , xor , z ) CALLEE 6 rotnr LEAF_NODE 7 rotnr LEAF_NODE 6 ( ARGUMENT 6 31 FIELD 7 31 LEAF_NODE 8 31 LEAF_NODE 6 , ARGUMENT 6 o FIELD 7 o LEAF_NODE 8 o LEAF_NODE 6 , ARGUMENT 6 xor FIELD 7 xor LEAF_NODE 8 xor LEAF_NODE 6 , ARGUMENT 6 z FIELD 7 z LEAF_NODE 8 z LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 165, "project": "openssl_ast_normal_function_test_24", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 BIO * TYPE_NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 3 * FUNCTION_NAME 2 bio_open_default_quiet LEAF_NODE 3 bio_open_default_quiet PARAMETER_LIST 2 ( const char * filename , char mode , int format ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * filename TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 filename LEAF_NODE 5 filename LEAF_NODE 3 , PARAMETER_DECL 3 char mode TYPE 4 char TYPE_NAME 5 char LEAF_NODE 6 char NAME 4 mode LEAF_NODE 5 mode LEAF_NODE 3 , PARAMETER_DECL 3 int format TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 format LEAF_NODE 5 format LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return bio_open_default_ ( filename , mode , format , 1 ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 bio_open_default_ ( filename , mode , format , 1 ) EXPR 5 bio_open_default_ ( filename , mode , format , 1 ) FUNCTION_CALL 6 bio_open_default_ ( filename , mode , format , 1 ) CALLEE 7 bio_open_default_ LEAF_NODE 8 bio_open_default_ LEAF_NODE 7 ( ARGUMENT 7 filename FIELD 8 filename LEAF_NODE 9 filename LEAF_NODE 7 , ARGUMENT 7 mode FIELD 8 mode LEAF_NODE 9 mode LEAF_NODE 7 , ARGUMENT 7 format FIELD 8 format LEAF_NODE 9 format LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 166, "project": "openssl_ast_normal_function_test_83", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS ; VAR_DECL 2 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS TYPE 3 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } CLASS_DEF 4 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } LEAF_NODE 5 struct CLASS_NAME 5 args_st LEAF_NODE 6 args_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int size ; int argc ; char * argv ; SIMPLE_DECL 6 int size ; VAR_DECL 7 int size TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 size LEAF_NODE 9 size LEAF_NODE 7 ; SIMPLE_DECL 6 int argc ; VAR_DECL 7 int argc TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 argc LEAF_NODE 9 argc LEAF_NODE 7 ; SIMPLE_DECL 6 char * argv ; VAR_DECL 7 char * argv TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 argv LEAF_NODE 9 argv LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 ARGS LEAF_NODE 4 ARGS LEAF_NODE 2 ; SIMPLE_DECL 1 X509_POLICY_NODE * node ; VAR_DECL 2 X509_POLICY_NODE * node TYPE 3 X509_POLICY_NODE * TYPE_NAME 4 X509_POLICY_NODE LEAF_NODE 5 X509_POLICY_NODE POINTER 4 * LEAF_NODE 5 * NAME 3 node LEAF_NODE 4 node LEAF_NODE 2 ; SIMPLE_DECL 1 int i ; VAR_DECL 2 int i TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 i LEAF_NODE 4 i LEAF_NODE 2 ;", "idx": 167, "project": "openssl_ast_normal_function_test_96", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static unsigned int LEAF_NODE 3 static TYPE_NAME 3 unsigned int LEAF_NODE 4 unsigned LEAF_NODE 4 int FUNCTION_NAME 2 read_ledword LEAF_NODE 3 read_ledword PARAMETER_LIST 2 ( const unsigned char * * in ) LEAF_NODE 3 ( PARAMETER_DECL 3 const unsigned char * * in TYPE 4 const unsigned char * * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 in LEAF_NODE 5 in LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 const unsigned char * p ; p = * in ; VAR_DECL 4 const unsigned char * p ; p = * in TYPE 5 const unsigned char * TYPE_NAME 6 const unsigned char LEAF_NODE 7 const LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 5 ; INIT 5 p = * in ASSIGN 6 p = * in LVAL 7 p NAME 8 p LEAF_NODE 9 p ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * in UNARY_EXPR 8 * in UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 in LEAF_NODE 10 in LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int ret ; VAR_DECL 4 unsigned int ret TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 4 ; EXPR_STATEMENT 3 ret = * p ++ ; EXPR 4 ret = * p ++ ASSIGN 5 ret = * p ++ LVAL 6 ret FIELD 7 ret LEAF_NODE 8 ret ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 * p ++ UNARY_EXPR 7 * p ++ UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 p ++ LEAF_NODE 9 p LEAF_NODE 9 ++ LEAF_NODE 4 ; EXPR_STATEMENT 3 ret |= ( * p ++ << 8 ) ; EXPR 4 ret |= ( * p ++ << 8 ) ASSIGN 5 ret |= ( * p ++ << 8 ) LVAL 6 ret FIELD 7 ret LEAF_NODE 8 ret ASSIGN_OP 6 |= LEAF_NODE 7 |= RVAL 6 ( * p ++ << 8 ) LEAF_NODE 7 ( UNARY_EXPR 7 * p ++ UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 p ++ LEAF_NODE 9 p LEAF_NODE 9 ++ LEAF_NODE 7 << FIELD 7 8 LEAF_NODE 8 8 LEAF_NODE 7 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ret |= ( * p ++ << 16 ) ; EXPR 4 ret |= ( * p ++ << 16 ) ASSIGN 5 ret |= ( * p ++ << 16 ) LVAL 6 ret FIELD 7 ret LEAF_NODE 8 ret ASSIGN_OP 6 |= LEAF_NODE 7 |= RVAL 6 ( * p ++ << 16 ) LEAF_NODE 7 ( UNARY_EXPR 7 * p ++ UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 p ++ LEAF_NODE 9 p LEAF_NODE 9 ++ LEAF_NODE 7 << FIELD 7 16 LEAF_NODE 8 16 LEAF_NODE 7 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ret |= ( * p ++ << 24 ) ; EXPR 4 ret |= ( * p ++ << 24 ) ASSIGN 5 ret |= ( * p ++ << 24 ) LVAL 6 ret FIELD 7 ret LEAF_NODE 8 ret ASSIGN_OP 6 |= LEAF_NODE 7 |= RVAL 6 ( * p ++ << 24 ) LEAF_NODE 7 ( UNARY_EXPR 7 * p ++ UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 p ++ LEAF_NODE 9 p LEAF_NODE 9 ++ LEAF_NODE 7 << FIELD 7 24 LEAF_NODE 8 24 LEAF_NODE 7 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 * in = p ; EXPR 4 * in = p ASSIGN 5 * in = p LVAL 6 * in UNARY_EXPR 7 * in UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 in LEAF_NODE 9 in ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 p FIELD 7 p LEAF_NODE 8 p LEAF_NODE 4 ; JUMP_STATEMENT 3 return ret ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ret EXPR 5 ret FIELD 6 ret LEAF_NODE 7 ret LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 168, "project": "openssl_ast_normal_function_test_58", "target": 0}
{"func": "SIMPLE_DECL 1 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } ; CLASS_DEF 2 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } CLASS_DEF 3 struct async_ctrs BASE_CLASSES { unsigned int rctr ; unsigned int wctr ; } LEAF_NODE 4 struct CLASS_NAME 4 async_ctrs LEAF_NODE 5 async_ctrs LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned int rctr ; unsigned int wctr ; SIMPLE_DECL 5 unsigned int rctr ; VAR_DECL 6 unsigned int rctr TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rctr LEAF_NODE 8 rctr LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int wctr ; VAR_DECL 6 unsigned int wctr TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 wctr LEAF_NODE 8 wctr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * * argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * * argv TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ASYNC_is_capable ( ) EXPR 5 ! ASYNC_is_capable ( ) UNARY_EXPR 6 ! ASYNC_is_capable ( ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 ASYNC_is_capable ( ) CALLEE 8 ASYNC_is_capable LEAF_NODE 9 ASYNC_is_capable LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 fprintf ( stderr , \"OpenSSL build is not ASYNC capable - skipping async tests\\n\" ) ; EXPR 7 fprintf ( stderr , \"OpenSSL build is not ASYNC capable - skipping async tests\\n\" ) FUNCTION_CALL 8 fprintf ( stderr , \"OpenSSL build is not ASYNC capable - skipping async tests\\n\" ) CALLEE 9 fprintf LEAF_NODE 10 fprintf LEAF_NODE 9 ( ARGUMENT 9 stderr FIELD 10 stderr LEAF_NODE 11 stderr LEAF_NODE 9 , ARGUMENT 9 \"OpenSSL build is not ASYNC capable - skipping async tests\\n\" FIELD 10 \"OpenSSL build is not ASYNC capable - skipping async tests\\n\" LEAF_NODE 11 \"OpenSSL build is not ASYNC capable - skipping async tests\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 CRYPTO_set_mem_debug ( 1 ) ; EXPR 7 CRYPTO_set_mem_debug ( 1 ) FUNCTION_CALL 8 CRYPTO_set_mem_debug ( 1 ) CALLEE 9 CRYPTO_set_mem_debug LEAF_NODE 10 CRYPTO_set_mem_debug LEAF_NODE 9 ( ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 CRYPTO_mem_ctrl ( CRYPTO_MEM_CHECK_ON ) ; EXPR 7 CRYPTO_mem_ctrl ( CRYPTO_MEM_CHECK_ON ) FUNCTION_CALL 8 CRYPTO_mem_ctrl ( CRYPTO_MEM_CHECK_ON ) CALLEE 9 CRYPTO_mem_ctrl LEAF_NODE 10 CRYPTO_mem_ctrl LEAF_NODE 9 ( ARGUMENT 9 CRYPTO_MEM_CHECK_ON FIELD 10 CRYPTO_MEM_CHECK_ON LEAF_NODE 11 CRYPTO_MEM_CHECK_ON LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! test_ASYNC_init_thread ( ) || ! test_ASYNC_start_job ( ) || ! test_ASYNC_get_current_job ( ) || ! test_ASYNC_WAIT_CTX_get_all_fds ( ) || ! test_ASYNC_block_pause ( ) EXPR 8 ! test_ASYNC_init_thread ( ) || ! test_ASYNC_start_job ( ) || ! test_ASYNC_get_current_job ( ) || ! test_ASYNC_WAIT_CTX_get_all_fds ( ) || ! test_ASYNC_block_pause ( ) OR 9 ! test_ASYNC_init_thread ( ) || ! test_ASYNC_start_job ( ) || ! test_ASYNC_get_current_job ( ) || ! test_ASYNC_WAIT_CTX_get_all_fds ( ) || ! test_ASYNC_block_pause ( ) EXPR 10 ! test_ASYNC_init_thread ( ) UNARY_EXPR 11 ! test_ASYNC_init_thread ( ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 test_ASYNC_init_thread ( ) CALLEE 13 test_ASYNC_init_thread LEAF_NODE 14 test_ASYNC_init_thread LEAF_NODE 13 ( LEAF_NODE 13 ) LEAF_NODE 10 || EXPR 10 ! test_ASYNC_start_job ( ) || ! test_ASYNC_get_current_job ( ) || ! test_ASYNC_WAIT_CTX_get_all_fds ( ) || ! test_ASYNC_block_pause ( ) OR 11 ! test_ASYNC_start_job ( ) || ! test_ASYNC_get_current_job ( ) || ! test_ASYNC_WAIT_CTX_get_all_fds ( ) || ! test_ASYNC_block_pause ( ) EXPR 12 ! test_ASYNC_start_job ( ) UNARY_EXPR 13 ! test_ASYNC_start_job ( ) UNARY_OPERATOR 14 ! LEAF_NODE 15 ! FUNCTION_CALL 14 test_ASYNC_start_job ( ) CALLEE 15 test_ASYNC_start_job LEAF_NODE 16 test_ASYNC_start_job LEAF_NODE 15 ( LEAF_NODE 15 ) LEAF_NODE 12 || EXPR 12 ! test_ASYNC_get_current_job ( ) || ! test_ASYNC_WAIT_CTX_get_all_fds ( ) || ! test_ASYNC_block_pause ( ) OR 13 ! test_ASYNC_get_current_job ( ) || ! test_ASYNC_WAIT_CTX_get_all_fds ( ) || ! test_ASYNC_block_pause ( ) EXPR 14 ! test_ASYNC_get_current_job ( ) UNARY_EXPR 15 ! test_ASYNC_get_current_job ( ) UNARY_OPERATOR 16 ! LEAF_NODE 17 ! FUNCTION_CALL 16 test_ASYNC_get_current_job ( ) CALLEE 17 test_ASYNC_get_current_job LEAF_NODE 18 test_ASYNC_get_current_job LEAF_NODE 17 ( LEAF_NODE 17 ) LEAF_NODE 14 || EXPR 14 ! test_ASYNC_WAIT_CTX_get_all_fds ( ) || ! test_ASYNC_block_pause ( ) OR 15 ! test_ASYNC_WAIT_CTX_get_all_fds ( ) || ! test_ASYNC_block_pause ( ) EXPR 16 ! test_ASYNC_WAIT_CTX_get_all_fds ( ) UNARY_EXPR 17 ! test_ASYNC_WAIT_CTX_get_all_fds ( ) UNARY_OPERATOR 18 ! LEAF_NODE 19 ! FUNCTION_CALL 18 test_ASYNC_WAIT_CTX_get_all_fds ( ) CALLEE 19 test_ASYNC_WAIT_CTX_get_all_fds LEAF_NODE 20 test_ASYNC_WAIT_CTX_get_all_fds LEAF_NODE 19 ( LEAF_NODE 19 ) LEAF_NODE 16 || EXPR 16 ! test_ASYNC_block_pause ( ) UNARY_EXPR 17 ! test_ASYNC_block_pause ( ) UNARY_OPERATOR 18 ! LEAF_NODE 19 ! FUNCTION_CALL 18 test_ASYNC_block_pause ( ) CALLEE 19 test_ASYNC_block_pause LEAF_NODE 20 test_ASYNC_block_pause LEAF_NODE 19 ( LEAF_NODE 19 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 JUMP_STATEMENT 9 return 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 1 EXPR 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 printf ( \"PASS\\n\" ) ; EXPR 4 printf ( \"PASS\\n\" ) FUNCTION_CALL 5 printf ( \"PASS\\n\" ) CALLEE 6 printf LEAF_NODE 7 printf LEAF_NODE 6 ( ARGUMENT 6 \"PASS\\n\" FIELD 7 \"PASS\\n\" LEAF_NODE 8 \"PASS\\n\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 169, "project": "openssl_ast_normal_function_test_172", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 FO LEAF_NODE 3 FO PARAMETER_LIST 2 ( ARIA_u128 * o , const ARIA_u128 * d , const ARIA_u128 * rk ) LEAF_NODE 3 ( PARAMETER_DECL 3 ARIA_u128 * o TYPE 4 ARIA_u128 * TYPE_NAME 5 ARIA_u128 LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 o LEAF_NODE 5 o LEAF_NODE 3 , PARAMETER_DECL 3 const ARIA_u128 * d TYPE 4 const ARIA_u128 * TYPE_NAME 5 const ARIA_u128 LEAF_NODE 6 const LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 const ARIA_u128 * rk TYPE 4 const ARIA_u128 * TYPE_NAME 5 const ARIA_u128 LEAF_NODE 6 const LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 rk LEAF_NODE 5 rk LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 ARIA_u128 y ; VAR_DECL 4 ARIA_u128 y TYPE 5 ARIA_u128 TYPE_NAME 6 ARIA_u128 LEAF_NODE 7 ARIA_u128 NAME 5 y LEAF_NODE 6 y LEAF_NODE 4 ; EXPR_STATEMENT 3 sl1 ( & y , d , rk ) ; EXPR 4 sl1 ( & y , d , rk ) FUNCTION_CALL 5 sl1 ( & y , d , rk ) CALLEE 6 sl1 LEAF_NODE 7 sl1 LEAF_NODE 6 ( ARGUMENT 6 & y UNARY_EXPR 7 & y UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 y LEAF_NODE 9 y LEAF_NODE 6 , ARGUMENT 6 d FIELD 7 d LEAF_NODE 8 d LEAF_NODE 6 , ARGUMENT 6 rk FIELD 7 rk LEAF_NODE 8 rk LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 a ( o , & y ) ; EXPR 4 a ( o , & y ) FUNCTION_CALL 5 a ( o , & y ) CALLEE 6 a LEAF_NODE 7 a LEAF_NODE 6 ( ARGUMENT 6 o FIELD 7 o LEAF_NODE 8 o LEAF_NODE 6 , ARGUMENT 6 & y UNARY_EXPR 7 & y UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 y LEAF_NODE 9 y LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 170, "project": "openssl_ast_normal_function_test_49", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static char * LEAF_NODE 3 static TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 app_get_pass LEAF_NODE 3 app_get_pass PARAMETER_LIST 2 ( const char * arg , int keepbio ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * arg TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 arg LEAF_NODE 5 arg LEAF_NODE 3 , PARAMETER_DECL 3 int keepbio TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 keepbio LEAF_NODE 5 keepbio LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * tmp , char [ APP_PASS_LEN ] tpass ; INIT_DECL_LIST 4 char * tmp , char [ APP_PASS_LEN ] tpass VAR_DECL 5 char * tmp TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 tmp LEAF_NODE 7 tmp LEAF_NODE 5 , VAR_DECL 5 char [ APP_PASS_LEN ] tpass TYPE 6 char [ APP_PASS_LEN ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ APP_PASS_LEN ] LEAF_NODE 8 [ FIELD 8 APP_PASS_LEN LEAF_NODE 9 APP_PASS_LEN LEAF_NODE 8 ] NAME 6 tpass LEAF_NODE 7 tpass LEAF_NODE 4 ; LEAF_NODE 3 static SIMPLE_DECL 3 BIO * pwdbio ; pwdbio = NULL ; VAR_DECL 4 BIO * pwdbio ; pwdbio = NULL TYPE 5 BIO * TYPE_NAME 6 BIO LEAF_NODE 7 BIO POINTER 6 * LEAF_NODE 7 * NAME 5 pwdbio LEAF_NODE 6 pwdbio LEAF_NODE 5 ; INIT 5 pwdbio = NULL ASSIGN 6 pwdbio = NULL LVAL 7 pwdbio NAME 8 pwdbio LEAF_NODE 9 pwdbio ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int i ; VAR_DECL 4 int i TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 strncmp ( arg , \"pass:\" , 5 ) == 0 EXPR 5 strncmp ( arg , \"pass:\" , 5 ) == 0 FUNCTION_CALL 6 strncmp ( arg , \"pass:\" , 5 ) CALLEE 7 strncmp LEAF_NODE 8 strncmp LEAF_NODE 7 ( ARGUMENT 7 arg FIELD 8 arg LEAF_NODE 9 arg LEAF_NODE 7 , ARGUMENT 7 \"pass:\" FIELD 8 \"pass:\" LEAF_NODE 9 \"pass:\" LEAF_NODE 7 , ARGUMENT 7 5 FIELD 8 5 LEAF_NODE 9 5 LEAF_NODE 7 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return OPENSSL_strdup ( arg + 5 ) ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 OPENSSL_strdup ( arg + 5 ) EXPR 7 OPENSSL_strdup ( arg + 5 ) FUNCTION_CALL 8 OPENSSL_strdup ( arg + 5 ) CALLEE 9 OPENSSL_strdup LEAF_NODE 10 OPENSSL_strdup LEAF_NODE 9 ( ARGUMENT 9 arg + 5 FIELD 10 arg LEAF_NODE 11 arg LEAF_NODE 10 + FIELD 10 5 LEAF_NODE 11 5 LEAF_NODE 9 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 strncmp ( arg , \"env:\" , 4 ) == 0 EXPR 5 strncmp ( arg , \"env:\" , 4 ) == 0 FUNCTION_CALL 6 strncmp ( arg , \"env:\" , 4 ) CALLEE 7 strncmp LEAF_NODE 8 strncmp LEAF_NODE 7 ( ARGUMENT 7 arg FIELD 8 arg LEAF_NODE 9 arg LEAF_NODE 7 , ARGUMENT 7 \"env:\" FIELD 8 \"env:\" LEAF_NODE 9 \"env:\" LEAF_NODE 7 , ARGUMENT 7 4 FIELD 8 4 LEAF_NODE 9 4 LEAF_NODE 7 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 tmp = getenv ( arg + 4 ) ; EXPR 7 tmp = getenv ( arg + 4 ) ASSIGN 8 tmp = getenv ( arg + 4 ) LVAL 9 tmp FIELD 10 tmp LEAF_NODE 11 tmp ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 getenv ( arg + 4 ) FUNCTION_CALL 10 getenv ( arg + 4 ) CALLEE 11 getenv LEAF_NODE 12 getenv LEAF_NODE 11 ( ARGUMENT 11 arg + 4 FIELD 12 arg LEAF_NODE 13 arg LEAF_NODE 12 + FIELD 12 4 LEAF_NODE 13 4 LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 tmp == NULL EXPR 8 tmp == NULL FIELD 9 tmp LEAF_NODE 10 tmp EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_printf ( bio_err , \"Can't read environment variable %s\\n\" , arg + 4 ) ; EXPR 10 BIO_printf ( bio_err , \"Can't read environment variable %s\\n\" , arg + 4 ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"Can't read environment variable %s\\n\" , arg + 4 ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"Can't read environment variable %s\\n\" FIELD 13 \"Can't read environment variable %s\\n\" LEAF_NODE 14 \"Can't read environment variable %s\\n\" LEAF_NODE 12 , ARGUMENT 12 arg + 4 FIELD 13 arg LEAF_NODE 14 arg LEAF_NODE 13 + FIELD 13 4 LEAF_NODE 14 4 LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return NULL ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 NULL EXPR 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 10 ; LEAF_NODE 8 } JUMP_STATEMENT 6 return OPENSSL_strdup ( tmp ) ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 OPENSSL_strdup ( tmp ) EXPR 8 OPENSSL_strdup ( tmp ) FUNCTION_CALL 9 OPENSSL_strdup ( tmp ) CALLEE 10 OPENSSL_strdup LEAF_NODE 11 OPENSSL_strdup LEAF_NODE 10 ( ARGUMENT 10 tmp FIELD 11 tmp LEAF_NODE 12 tmp LEAF_NODE 10 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! keepbio || pwdbio == NULL EXPR 5 ! keepbio || pwdbio == NULL OR 6 ! keepbio || pwdbio == NULL EXPR 7 ! keepbio UNARY_EXPR 8 ! keepbio UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 keepbio LEAF_NODE 10 keepbio LEAF_NODE 7 || EXPR 7 pwdbio == NULL FIELD 8 pwdbio LEAF_NODE 9 pwdbio EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 strncmp ( arg , \"file:\" , 5 ) == 0 EXPR 8 strncmp ( arg , \"file:\" , 5 ) == 0 FUNCTION_CALL 9 strncmp ( arg , \"file:\" , 5 ) CALLEE 10 strncmp LEAF_NODE 11 strncmp LEAF_NODE 10 ( ARGUMENT 10 arg FIELD 11 arg LEAF_NODE 12 arg LEAF_NODE 10 , ARGUMENT 10 \"file:\" FIELD 11 \"file:\" LEAF_NODE 12 \"file:\" LEAF_NODE 10 , ARGUMENT 10 5 FIELD 11 5 LEAF_NODE 12 5 LEAF_NODE 10 ) EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 pwdbio = BIO_new_file ( arg + 5 , \"r\" ) ; EXPR 10 pwdbio = BIO_new_file ( arg + 5 , \"r\" ) ASSIGN 11 pwdbio = BIO_new_file ( arg + 5 , \"r\" ) LVAL 12 pwdbio FIELD 13 pwdbio LEAF_NODE 14 pwdbio ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 BIO_new_file ( arg + 5 , \"r\" ) FUNCTION_CALL 13 BIO_new_file ( arg + 5 , \"r\" ) CALLEE 14 BIO_new_file LEAF_NODE 15 BIO_new_file LEAF_NODE 14 ( ARGUMENT 14 arg + 5 FIELD 15 arg LEAF_NODE 16 arg LEAF_NODE 15 + FIELD 15 5 LEAF_NODE 16 5 LEAF_NODE 14 , ARGUMENT 14 \"r\" FIELD 15 \"r\" LEAF_NODE 16 \"r\" LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 pwdbio == NULL EXPR 11 pwdbio == NULL FIELD 12 pwdbio LEAF_NODE 13 pwdbio EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 BIO_printf ( bio_err , \"Can't open file %s\\n\" , arg + 5 ) ; EXPR 13 BIO_printf ( bio_err , \"Can't open file %s\\n\" , arg + 5 ) FUNCTION_CALL 14 BIO_printf ( bio_err , \"Can't open file %s\\n\" , arg + 5 ) CALLEE 15 BIO_printf LEAF_NODE 16 BIO_printf LEAF_NODE 15 ( ARGUMENT 15 bio_err FIELD 16 bio_err LEAF_NODE 17 bio_err LEAF_NODE 15 , ARGUMENT 15 \"Can't open file %s\\n\" FIELD 16 \"Can't open file %s\\n\" LEAF_NODE 17 \"Can't open file %s\\n\" LEAF_NODE 15 , ARGUMENT 15 arg + 5 FIELD 16 arg LEAF_NODE 17 arg LEAF_NODE 16 + FIELD 16 5 LEAF_NODE 17 5 LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 return NULL ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 NULL EXPR 14 NULL FIELD 15 NULL LEAF_NODE 16 NULL LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 strncmp ( arg , \"fd:\" , 3 ) == 0 EXPR 10 strncmp ( arg , \"fd:\" , 3 ) == 0 FUNCTION_CALL 11 strncmp ( arg , \"fd:\" , 3 ) CALLEE 12 strncmp LEAF_NODE 13 strncmp LEAF_NODE 12 ( ARGUMENT 12 arg FIELD 13 arg LEAF_NODE 14 arg LEAF_NODE 12 , ARGUMENT 12 \"fd:\" FIELD 13 \"fd:\" LEAF_NODE 14 \"fd:\" LEAF_NODE 12 , ARGUMENT 12 3 FIELD 13 3 LEAF_NODE 14 3 LEAF_NODE 12 ) EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SIMPLE_DECL 11 BIO * btmp ; VAR_DECL 12 BIO * btmp TYPE 13 BIO * TYPE_NAME 14 BIO LEAF_NODE 15 BIO POINTER 14 * LEAF_NODE 15 * NAME 13 btmp LEAF_NODE 14 btmp LEAF_NODE 12 ; EXPR_STATEMENT 11 i = atoi ( arg + 3 ) ; EXPR 12 i = atoi ( arg + 3 ) ASSIGN 13 i = atoi ( arg + 3 ) LVAL 14 i FIELD 15 i LEAF_NODE 16 i ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 atoi ( arg + 3 ) FUNCTION_CALL 15 atoi ( arg + 3 ) CALLEE 16 atoi LEAF_NODE 17 atoi LEAF_NODE 16 ( ARGUMENT 16 arg + 3 FIELD 17 arg LEAF_NODE 18 arg LEAF_NODE 17 + FIELD 17 3 LEAF_NODE 18 3 LEAF_NODE 16 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 i >= 0 EXPR 13 i >= 0 FIELD 14 i LEAF_NODE 15 i REL_OPERATOR 14 >= LEAF_NODE 15 >= FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 pwdbio = BIO_new_fd ( i , BIO_NOCLOSE ) ; EXPR 14 pwdbio = BIO_new_fd ( i , BIO_NOCLOSE ) ASSIGN 15 pwdbio = BIO_new_fd ( i , BIO_NOCLOSE ) LVAL 16 pwdbio FIELD 17 pwdbio LEAF_NODE 18 pwdbio ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 BIO_new_fd ( i , BIO_NOCLOSE ) FUNCTION_CALL 17 BIO_new_fd ( i , BIO_NOCLOSE ) CALLEE 18 BIO_new_fd LEAF_NODE 19 BIO_new_fd LEAF_NODE 18 ( ARGUMENT 18 i FIELD 19 i LEAF_NODE 20 i LEAF_NODE 18 , ARGUMENT 18 BIO_NOCLOSE FIELD 19 BIO_NOCLOSE LEAF_NODE 20 BIO_NOCLOSE LEAF_NODE 18 ) LEAF_NODE 14 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ( i < 0 ) || ! pwdbio EXPR 13 ( i < 0 ) || ! pwdbio OR 14 ( i < 0 ) || ! pwdbio EXPR 15 ( i < 0 ) LEAF_NODE 16 ( FIELD 16 i LEAF_NODE 17 i REL_OPERATOR 16 < LEAF_NODE 17 < FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 16 ) LEAF_NODE 15 || EXPR 15 ! pwdbio UNARY_EXPR 16 ! pwdbio UNARY_OPERATOR 17 ! LEAF_NODE 18 ! FIELD 17 pwdbio LEAF_NODE 18 pwdbio LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 BIO_printf ( bio_err , \"Can't access file descriptor %s\\n\" , arg + 3 ) ; EXPR 15 BIO_printf ( bio_err , \"Can't access file descriptor %s\\n\" , arg + 3 ) FUNCTION_CALL 16 BIO_printf ( bio_err , \"Can't access file descriptor %s\\n\" , arg + 3 ) CALLEE 17 BIO_printf LEAF_NODE 18 BIO_printf LEAF_NODE 17 ( ARGUMENT 17 bio_err FIELD 18 bio_err LEAF_NODE 19 bio_err LEAF_NODE 17 , ARGUMENT 17 \"Can't access file descriptor %s\\n\" FIELD 18 \"Can't access file descriptor %s\\n\" LEAF_NODE 19 \"Can't access file descriptor %s\\n\" LEAF_NODE 17 , ARGUMENT 17 arg + 3 FIELD 18 arg LEAF_NODE 19 arg LEAF_NODE 18 + FIELD 18 3 LEAF_NODE 19 3 LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 return NULL ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 NULL EXPR 16 NULL FIELD 17 NULL LEAF_NODE 18 NULL LEAF_NODE 15 ; LEAF_NODE 13 } EXPR_STATEMENT 11 btmp = BIO_new ( BIO_f_buffer ( ) ) ; EXPR 12 btmp = BIO_new ( BIO_f_buffer ( ) ) ASSIGN 13 btmp = BIO_new ( BIO_f_buffer ( ) ) LVAL 14 btmp FIELD 15 btmp LEAF_NODE 16 btmp ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 BIO_new ( BIO_f_buffer ( ) ) FUNCTION_CALL 15 BIO_new ( BIO_f_buffer ( ) ) CALLEE 16 BIO_new LEAF_NODE 17 BIO_new LEAF_NODE 16 ( ARGUMENT 16 BIO_f_buffer ( ) FUNCTION_CALL 17 BIO_f_buffer ( ) CALLEE 18 BIO_f_buffer LEAF_NODE 19 BIO_f_buffer LEAF_NODE 18 ( LEAF_NODE 18 ) LEAF_NODE 16 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 pwdbio = BIO_push ( btmp , pwdbio ) ; EXPR 12 pwdbio = BIO_push ( btmp , pwdbio ) ASSIGN 13 pwdbio = BIO_push ( btmp , pwdbio ) LVAL 14 pwdbio FIELD 15 pwdbio LEAF_NODE 16 pwdbio ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 BIO_push ( btmp , pwdbio ) FUNCTION_CALL 15 BIO_push ( btmp , pwdbio ) CALLEE 16 BIO_push LEAF_NODE 17 BIO_push LEAF_NODE 16 ( ARGUMENT 16 btmp FIELD 17 btmp LEAF_NODE 18 btmp LEAF_NODE 16 , ARGUMENT 16 pwdbio FIELD 17 pwdbio LEAF_NODE 18 pwdbio LEAF_NODE 16 ) LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 strcmp ( arg , \"stdin\" ) == 0 EXPR 10 strcmp ( arg , \"stdin\" ) == 0 FUNCTION_CALL 11 strcmp ( arg , \"stdin\" ) CALLEE 12 strcmp LEAF_NODE 13 strcmp LEAF_NODE 12 ( ARGUMENT 12 arg FIELD 13 arg LEAF_NODE 14 arg LEAF_NODE 12 , ARGUMENT 12 \"stdin\" FIELD 13 \"stdin\" LEAF_NODE 14 \"stdin\" LEAF_NODE 12 ) EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 pwdbio = dup_bio_in ( FORMAT_TEXT ) ; EXPR 12 pwdbio = dup_bio_in ( FORMAT_TEXT ) ASSIGN 13 pwdbio = dup_bio_in ( FORMAT_TEXT ) LVAL 14 pwdbio FIELD 15 pwdbio LEAF_NODE 16 pwdbio ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 dup_bio_in ( FORMAT_TEXT ) FUNCTION_CALL 15 dup_bio_in ( FORMAT_TEXT ) CALLEE 16 dup_bio_in LEAF_NODE 17 dup_bio_in LEAF_NODE 16 ( ARGUMENT 16 FORMAT_TEXT FIELD 17 FORMAT_TEXT LEAF_NODE 18 FORMAT_TEXT LEAF_NODE 16 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ! pwdbio EXPR 13 ! pwdbio UNARY_EXPR 14 ! pwdbio UNARY_OPERATOR 15 ! LEAF_NODE 16 ! FIELD 15 pwdbio LEAF_NODE 16 pwdbio LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 BIO_printf ( bio_err , \"Can't open BIO for stdin\\n\" ) ; EXPR 15 BIO_printf ( bio_err , \"Can't open BIO for stdin\\n\" ) FUNCTION_CALL 16 BIO_printf ( bio_err , \"Can't open BIO for stdin\\n\" ) CALLEE 17 BIO_printf LEAF_NODE 18 BIO_printf LEAF_NODE 17 ( ARGUMENT 17 bio_err FIELD 18 bio_err LEAF_NODE 19 bio_err LEAF_NODE 17 , ARGUMENT 17 \"Can't open BIO for stdin\\n\" FIELD 18 \"Can't open BIO for stdin\\n\" LEAF_NODE 19 \"Can't open BIO for stdin\\n\" LEAF_NODE 17 ) LEAF_NODE 15 ; JUMP_STATEMENT 14 return NULL ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 NULL EXPR 16 NULL FIELD 17 NULL LEAF_NODE 18 NULL LEAF_NODE 15 ; LEAF_NODE 13 } LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_printf ( bio_err , \"Invalid password argument \\\"%s\\\"\\n\" , arg ) ; EXPR 10 BIO_printf ( bio_err , \"Invalid password argument \\\"%s\\\"\\n\" , arg ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"Invalid password argument \\\"%s\\\"\\n\" , arg ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"Invalid password argument \\\"%s\\\"\\n\" FIELD 13 \"Invalid password argument \\\"%s\\\"\\n\" LEAF_NODE 14 \"Invalid password argument \\\"%s\\\"\\n\" LEAF_NODE 12 , ARGUMENT 12 arg FIELD 13 arg LEAF_NODE 14 arg LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return NULL ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 NULL EXPR 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 i = BIO_gets ( pwdbio , tpass , APP_PASS_LEN ) ; EXPR 4 i = BIO_gets ( pwdbio , tpass , APP_PASS_LEN ) ASSIGN 5 i = BIO_gets ( pwdbio , tpass , APP_PASS_LEN ) LVAL 6 i FIELD 7 i LEAF_NODE 8 i ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 BIO_gets ( pwdbio , tpass , APP_PASS_LEN ) FUNCTION_CALL 7 BIO_gets ( pwdbio , tpass , APP_PASS_LEN ) CALLEE 8 BIO_gets LEAF_NODE 9 BIO_gets LEAF_NODE 8 ( ARGUMENT 8 pwdbio FIELD 9 pwdbio LEAF_NODE 10 pwdbio LEAF_NODE 8 , ARGUMENT 8 tpass FIELD 9 tpass LEAF_NODE 10 tpass LEAF_NODE 8 , ARGUMENT 8 APP_PASS_LEN FIELD 9 APP_PASS_LEN LEAF_NODE 10 APP_PASS_LEN LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 keepbio != 1 EXPR 5 keepbio != 1 FIELD 6 keepbio LEAF_NODE 7 keepbio EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 BIO_free_all ( pwdbio ) ; EXPR 7 BIO_free_all ( pwdbio ) FUNCTION_CALL 8 BIO_free_all ( pwdbio ) CALLEE 9 BIO_free_all LEAF_NODE 10 BIO_free_all LEAF_NODE 9 ( ARGUMENT 9 pwdbio FIELD 10 pwdbio LEAF_NODE 11 pwdbio LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 pwdbio = NULL ; EXPR 7 pwdbio = NULL ASSIGN 8 pwdbio = NULL LVAL 9 pwdbio FIELD 10 pwdbio LEAF_NODE 11 pwdbio ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 i <= 0 EXPR 5 i <= 0 FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 <= LEAF_NODE 7 <= FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 BIO_printf ( bio_err , \"Error reading password from BIO\\n\" ) ; EXPR 7 BIO_printf ( bio_err , \"Error reading password from BIO\\n\" ) FUNCTION_CALL 8 BIO_printf ( bio_err , \"Error reading password from BIO\\n\" ) CALLEE 9 BIO_printf LEAF_NODE 10 BIO_printf LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 , ARGUMENT 9 \"Error reading password from BIO\\n\" FIELD 10 \"Error reading password from BIO\\n\" LEAF_NODE 11 \"Error reading password from BIO\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return NULL ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 NULL EXPR 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 tmp = strchr ( tpass , '\\n' ) ; EXPR 4 tmp = strchr ( tpass , '\\n' ) ASSIGN 5 tmp = strchr ( tpass , '\\n' ) LVAL 6 tmp FIELD 7 tmp LEAF_NODE 8 tmp ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 strchr ( tpass , '\\n' ) FUNCTION_CALL 7 strchr ( tpass , '\\n' ) CALLEE 8 strchr LEAF_NODE 9 strchr LEAF_NODE 8 ( ARGUMENT 8 tpass FIELD 9 tpass LEAF_NODE 10 tpass LEAF_NODE 8 , ARGUMENT 8 '\\n' FIELD 9 '\\n' LEAF_NODE 10 '\\n' LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 tmp != NULL EXPR 5 tmp != NULL FIELD 6 tmp LEAF_NODE 7 tmp EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 * tmp = 0 ; EXPR 6 * tmp = 0 ASSIGN 7 * tmp = 0 LVAL 8 * tmp UNARY_EXPR 9 * tmp UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 tmp LEAF_NODE 11 tmp ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; JUMP_STATEMENT 3 return OPENSSL_strdup ( tpass ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 OPENSSL_strdup ( tpass ) EXPR 5 OPENSSL_strdup ( tpass ) FUNCTION_CALL 6 OPENSSL_strdup ( tpass ) CALLEE 7 OPENSSL_strdup LEAF_NODE 8 OPENSSL_strdup LEAF_NODE 7 ( ARGUMENT 7 tpass FIELD 8 tpass LEAF_NODE 9 tpass LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 171, "project": "openssl_ast_normal_function_test_30", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; SIMPLE_DECL 1 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } ; CLASS_DEF 2 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } CLASS_DEF 3 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } LEAF_NODE 4 struct CLASS_NAME 4 testdata LEAF_NODE 5 testdata LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; SIMPLE_DECL 5 char * data ; VAR_DECL 6 char * data TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 int type ; VAR_DECL 6 int type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 type LEAF_NODE 8 type LEAF_NODE 6 ; SIMPLE_DECL 5 int expected_type ; VAR_DECL 6 int expected_type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 expected_type LEAF_NODE 8 expected_type LEAF_NODE 6 ; SIMPLE_DECL 5 int check_result ; VAR_DECL 6 int check_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 check_result LEAF_NODE 8 check_result LEAF_NODE 6 ; SIMPLE_DECL 5 time_t t ; VAR_DECL 6 time_t t TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 t LEAF_NODE 8 t LEAF_NODE 6 ; SIMPLE_DECL 5 int cmp_result ; VAR_DECL 6 int cmp_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 cmp_result LEAF_NODE 8 cmp_result LEAF_NODE 6 ; SIMPLE_DECL 5 int convert_result ; VAR_DECL 6 int convert_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 convert_result LEAF_NODE 8 convert_result LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } ; CLASS_DEF 2 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } CLASS_DEF 3 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } LEAF_NODE 4 struct CLASS_NAME 4 compare_testdata LEAF_NODE 5 compare_testdata LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; SIMPLE_DECL 5 ASN1_TIME t1 ; VAR_DECL 6 ASN1_TIME t1 TYPE 7 ASN1_TIME TYPE_NAME 8 ASN1_TIME LEAF_NODE 9 ASN1_TIME NAME 7 t1 LEAF_NODE 8 t1 LEAF_NODE 6 ; SIMPLE_DECL 5 ASN1_TIME t2 ; VAR_DECL 6 ASN1_TIME t2 TYPE 7 ASN1_TIME TYPE_NAME 8 ASN1_TIME LEAF_NODE 9 ASN1_TIME NAME 7 t2 LEAF_NODE 8 t2 LEAF_NODE 6 ; SIMPLE_DECL 5 int result ; VAR_DECL 6 int result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 result LEAF_NODE 8 result LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TODAY_GEN_STR ; TODAY_GEN_STR = \"20170825000000Z\" ; VAR_DECL 2 unsigned char [ ] TODAY_GEN_STR ; TODAY_GEN_STR = \"20170825000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TODAY_GEN_STR LEAF_NODE 4 TODAY_GEN_STR LEAF_NODE 3 ; INIT 3 TODAY_GEN_STR = \"20170825000000Z\" ASSIGN 4 TODAY_GEN_STR = \"20170825000000Z\" LVAL 5 TODAY_GEN_STR NAME 6 TODAY_GEN_STR LEAF_NODE 7 TODAY_GEN_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"20170825000000Z\" FIELD 6 \"20170825000000Z\" LEAF_NODE 7 \"20170825000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TOMORROW_GEN_STR ; TOMORROW_GEN_STR = \"20170826000000Z\" ; VAR_DECL 2 unsigned char [ ] TOMORROW_GEN_STR ; TOMORROW_GEN_STR = \"20170826000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TOMORROW_GEN_STR LEAF_NODE 4 TOMORROW_GEN_STR LEAF_NODE 3 ; INIT 3 TOMORROW_GEN_STR = \"20170826000000Z\" ASSIGN 4 TOMORROW_GEN_STR = \"20170826000000Z\" LVAL 5 TOMORROW_GEN_STR NAME 6 TOMORROW_GEN_STR LEAF_NODE 7 TOMORROW_GEN_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"20170826000000Z\" FIELD 6 \"20170826000000Z\" LEAF_NODE 7 \"20170826000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TODAY_UTC_STR ; TODAY_UTC_STR = \"170825000000Z\" ; VAR_DECL 2 unsigned char [ ] TODAY_UTC_STR ; TODAY_UTC_STR = \"170825000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TODAY_UTC_STR LEAF_NODE 4 TODAY_UTC_STR LEAF_NODE 3 ; INIT 3 TODAY_UTC_STR = \"170825000000Z\" ASSIGN 4 TODAY_UTC_STR = \"170825000000Z\" LVAL 5 TODAY_UTC_STR NAME 6 TODAY_UTC_STR LEAF_NODE 7 TODAY_UTC_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"170825000000Z\" FIELD 6 \"170825000000Z\" LEAF_NODE 7 \"170825000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TOMORROW_UTC_STR ; TOMORROW_UTC_STR = \"170826000000Z\" ; VAR_DECL 2 unsigned char [ ] TOMORROW_UTC_STR ; TOMORROW_UTC_STR = \"170826000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TOMORROW_UTC_STR LEAF_NODE 4 TOMORROW_UTC_STR LEAF_NODE 3 ; INIT 3 TOMORROW_UTC_STR = \"170826000000Z\" ASSIGN 4 TOMORROW_UTC_STR = \"170826000000Z\" LVAL 5 TOMORROW_UTC_STR NAME 6 TOMORROW_UTC_STR LEAF_NODE 7 TOMORROW_UTC_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"170826000000Z\" FIELD 6 \"170826000000Z\" LEAF_NODE 7 \"170826000000Z\" LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_pos LEAF_NODE 3 test_table_pos PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_pos , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_pos , idx ) EXPR 5 test_table ( tbl_testdata_pos , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_pos , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_pos FIELD 8 tbl_testdata_pos LEAF_NODE 9 tbl_testdata_pos LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_neg LEAF_NODE 3 test_table_neg PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_neg , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_neg , idx ) EXPR 5 test_table ( tbl_testdata_neg , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_neg , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_neg FIELD 8 tbl_testdata_neg LEAF_NODE 9 tbl_testdata_neg LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_pos_64bit LEAF_NODE 3 test_table_pos_64bit PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_pos_64bit , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_pos_64bit , idx ) EXPR 5 test_table ( tbl_testdata_pos_64bit , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_pos_64bit , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_pos_64bit FIELD 8 tbl_testdata_pos_64bit LEAF_NODE 9 tbl_testdata_pos_64bit LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_neg_64bit LEAF_NODE 3 test_table_neg_64bit PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_neg_64bit , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_neg_64bit , idx ) EXPR 5 test_table ( tbl_testdata_neg_64bit , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_neg_64bit , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_neg_64bit FIELD 8 tbl_testdata_neg_64bit LEAF_NODE 9 tbl_testdata_neg_64bit LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_compare LEAF_NODE 3 test_table_compare PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct compare_testdata * td ; td = & tbl_compare_testdata [ idx ] ; VAR_DECL 4 struct compare_testdata * td ; td = & tbl_compare_testdata [ idx ] TYPE 5 struct compare_testdata * TYPE_NAME 6 struct compare_testdata LEAF_NODE 7 struct LEAF_NODE 7 compare_testdata POINTER 6 * LEAF_NODE 7 * NAME 5 td LEAF_NODE 6 td LEAF_NODE 5 ; INIT 5 td = & tbl_compare_testdata [ idx ] ASSIGN 6 td = & tbl_compare_testdata [ idx ] LVAL 7 td NAME 8 td LEAF_NODE 9 td ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & tbl_compare_testdata [ idx ] UNARY_EXPR 8 & tbl_compare_testdata [ idx ] UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 tbl_compare_testdata [ idx ] LEAF_NODE 10 tbl_compare_testdata LEAF_NODE 10 [ EXPR 10 idx FIELD 11 idx LEAF_NODE 12 idx LEAF_NODE 10 ] LEAF_NODE 4 ; JUMP_STATEMENT 3 return TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) EXPR 5 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) FUNCTION_CALL 6 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) CALLEE 7 TEST_int_eq LEAF_NODE 8 TEST_int_eq LEAF_NODE 7 ( ARGUMENT 7 ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) FUNCTION_CALL 8 ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) CALLEE 9 ASN1_TIME_compare LEAF_NODE 10 ASN1_TIME_compare LEAF_NODE 9 ( ARGUMENT 9 & td -> t1 UNARY_EXPR 10 & td -> t1 UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 td -> t1 LEAF_NODE 12 td LEAF_NODE 12 -> LEAF_NODE 12 t1 LEAF_NODE 9 , ARGUMENT 9 & td -> t2 UNARY_EXPR 10 & td -> t2 UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 td -> t2 LEAF_NODE 12 td LEAF_NODE 12 -> LEAF_NODE 12 t2 LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 td -> result FIELD 8 td -> result LEAF_NODE 9 td LEAF_NODE 9 -> LEAF_NODE 9 result LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } SIMPLE_DECL 1 DWORD CRYPTO_THREAD_LOCAL ; VAR_DECL 2 DWORD CRYPTO_THREAD_LOCAL TYPE 3 DWORD TYPE_NAME 4 DWORD LEAF_NODE 5 DWORD NAME 3 CRYPTO_THREAD_LOCAL LEAF_NODE 4 CRYPTO_THREAD_LOCAL LEAF_NODE 2 ; SIMPLE_DECL 1 CRYPTO_THREAD_LOCAL ctxkey ; VAR_DECL 2 CRYPTO_THREAD_LOCAL ctxkey TYPE 3 CRYPTO_THREAD_LOCAL TYPE_NAME 4 CRYPTO_THREAD_LOCAL LEAF_NODE 5 CRYPTO_THREAD_LOCAL NAME 3 ctxkey LEAF_NODE 4 ctxkey LEAF_NODE 2 ; SIMPLE_DECL 1 CRYPTO_THREAD_LOCAL poolkey ; VAR_DECL 2 CRYPTO_THREAD_LOCAL poolkey TYPE 3 CRYPTO_THREAD_LOCAL TYPE_NAME 4 CRYPTO_THREAD_LOCAL LEAF_NODE 5 CRYPTO_THREAD_LOCAL NAME 3 poolkey LEAF_NODE 4 poolkey LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 async_deinit LEAF_NODE 3 async_deinit PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CRYPTO_THREAD_cleanup_local ( & ctxkey ) ; EXPR 4 CRYPTO_THREAD_cleanup_local ( & ctxkey ) FUNCTION_CALL 5 CRYPTO_THREAD_cleanup_local ( & ctxkey ) CALLEE 6 CRYPTO_THREAD_cleanup_local LEAF_NODE 7 CRYPTO_THREAD_cleanup_local LEAF_NODE 6 ( ARGUMENT 6 & ctxkey UNARY_EXPR 7 & ctxkey UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 ctxkey LEAF_NODE 9 ctxkey LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CRYPTO_THREAD_cleanup_local ( & poolkey ) ; EXPR 4 CRYPTO_THREAD_cleanup_local ( & poolkey ) FUNCTION_CALL 5 CRYPTO_THREAD_cleanup_local ( & poolkey ) CALLEE 6 CRYPTO_THREAD_cleanup_local LEAF_NODE 7 CRYPTO_THREAD_cleanup_local LEAF_NODE 6 ( ARGUMENT 6 & poolkey UNARY_EXPR 7 & poolkey UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 poolkey LEAF_NODE 9 poolkey LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 172, "project": "openssl_ast_normal_function_test_57", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 rotnr LEAF_NODE 3 rotnr PARAMETER_LIST 2 ( unsigned int n , ARIA_u128 * o , const ARIA_u128 * xor , const ARIA_u128 * z ) LEAF_NODE 3 ( PARAMETER_DECL 3 unsigned int n TYPE 4 unsigned int TYPE_NAME 5 unsigned int LEAF_NODE 6 unsigned LEAF_NODE 6 int NAME 4 n LEAF_NODE 5 n LEAF_NODE 3 , PARAMETER_DECL 3 ARIA_u128 * o TYPE 4 ARIA_u128 * TYPE_NAME 5 ARIA_u128 LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 o LEAF_NODE 5 o LEAF_NODE 3 , PARAMETER_DECL 3 const ARIA_u128 * xor TYPE 4 const ARIA_u128 * TYPE_NAME 5 const ARIA_u128 LEAF_NODE 6 const LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 xor LEAF_NODE 5 xor LEAF_NODE 3 , PARAMETER_DECL 3 const ARIA_u128 * z TYPE 4 const ARIA_u128 * TYPE_NAME 5 const ARIA_u128 LEAF_NODE 6 const LEAF_NODE 6 ARIA_u128 POINTER 5 * LEAF_NODE 6 * NAME 4 z LEAF_NODE 5 z LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 const unsigned int bytes ; bytes = n / 8 , const unsigned int bits ; bits = n % 8 ; INIT_DECL_LIST 4 const unsigned int bytes ; bytes = n / 8 , const unsigned int bits ; bits = n % 8 VAR_DECL 5 const unsigned int bytes ; bytes = n / 8 TYPE 6 const unsigned int TYPE_NAME 7 const unsigned int LEAF_NODE 8 const LEAF_NODE 8 unsigned LEAF_NODE 8 int NAME 6 bytes LEAF_NODE 7 bytes LEAF_NODE 6 ; INIT 6 bytes = n / 8 ASSIGN 7 bytes = n / 8 LVAL 8 bytes NAME 9 bytes LEAF_NODE 10 bytes ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 n / 8 FIELD 9 n LEAF_NODE 10 n LEAF_NODE 9 / FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 5 , VAR_DECL 5 const unsigned int bits ; bits = n % 8 TYPE 6 const unsigned int TYPE_NAME 7 const unsigned int LEAF_NODE 8 const LEAF_NODE 8 unsigned LEAF_NODE 8 int NAME 6 bits LEAF_NODE 7 bits LEAF_NODE 6 ; INIT 6 bits = n % 8 ASSIGN 7 bits = n % 8 LVAL 8 bits NAME 9 bits LEAF_NODE 10 bits ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 n % 8 FIELD 9 n LEAF_NODE 10 n LEAF_NODE 9 % FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int i ; VAR_DECL 4 unsigned int i TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; SIMPLE_DECL 3 ARIA_u128 t ; VAR_DECL 4 ARIA_u128 t TYPE 5 ARIA_u128 TYPE_NAME 6 ARIA_u128 LEAF_NODE 7 ARIA_u128 NAME 5 t LEAF_NODE 6 t LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < ARIA_BLOCK_SIZE EXPR 5 i < ARIA_BLOCK_SIZE FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 ARIA_BLOCK_SIZE LEAF_NODE 7 ARIA_BLOCK_SIZE LEAF_NODE 4 ; FOR_EXPR 4 i ++ EXPR 5 i ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 t . c [ ( i + bytes ) % ARIA_BLOCK_SIZE ] = z -> c [ i ] ; EXPR 6 t . c [ ( i + bytes ) % ARIA_BLOCK_SIZE ] = z -> c [ i ] ASSIGN 7 t . c [ ( i + bytes ) % ARIA_BLOCK_SIZE ] = z -> c [ i ] LVAL 8 t . c [ ( i + bytes ) % ARIA_BLOCK_SIZE ] FIELD 9 t . c [ ( i + bytes ) % ARIA_BLOCK_SIZE ] LEAF_NODE 10 t LEAF_NODE 10 . LEAF_NODE 10 c LEAF_NODE 10 [ EXPR 10 ( i + bytes ) % ARIA_BLOCK_SIZE LEAF_NODE 11 ( FIELD 11 i LEAF_NODE 12 i LEAF_NODE 11 + FIELD 11 bytes LEAF_NODE 12 bytes LEAF_NODE 11 ) LEAF_NODE 11 % FIELD 11 ARIA_BLOCK_SIZE LEAF_NODE 12 ARIA_BLOCK_SIZE LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 z -> c [ i ] FIELD 9 z -> c [ i ] LEAF_NODE 10 z LEAF_NODE 10 -> LEAF_NODE 10 c LEAF_NODE 10 [ EXPR 10 i FIELD 11 i LEAF_NODE 12 i LEAF_NODE 10 ] LEAF_NODE 6 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < ARIA_BLOCK_SIZE EXPR 5 i < ARIA_BLOCK_SIZE FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 ARIA_BLOCK_SIZE LEAF_NODE 7 ARIA_BLOCK_SIZE LEAF_NODE 4 ; FOR_EXPR 4 i ++ EXPR 5 i ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 o -> c [ i ] = ( ( t . c [ i ] >> bits ) | ( t . c [ i ? i - 1 : ARIA_BLOCK_SIZE - 1 ] << ( 8 - bits ) ) ) ^ xor -> c [ i ] ; EXPR 6 o -> c [ i ] = ( ( t . c [ i ] >> bits ) | ( t . c [ i ? i - 1 : ARIA_BLOCK_SIZE - 1 ] << ( 8 - bits ) ) ) ^ xor -> c [ i ] ASSIGN 7 o -> c [ i ] = ( ( t . c [ i ] >> bits ) | ( t . c [ i ? i - 1 : ARIA_BLOCK_SIZE - 1 ] << ( 8 - bits ) ) ) ^ xor -> c [ i ] LVAL 8 o -> c [ i ] FIELD 9 o -> c [ i ] LEAF_NODE 10 o LEAF_NODE 10 -> LEAF_NODE 10 c LEAF_NODE 10 [ EXPR 10 i FIELD 11 i LEAF_NODE 12 i LEAF_NODE 10 ] ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ( ( t . c [ i ] >> bits ) | ( t . c [ i ? i - 1 : ARIA_BLOCK_SIZE - 1 ] << ( 8 - bits ) ) ) ^ xor -> c [ i ] LEAF_NODE 9 ( BIT_OR 9 ( t . c [ i ] >> bits ) | ( t . c [ i ? i - 1 : ARIA_BLOCK_SIZE - 1 ] << ( 8 - bits ) ) BIT_OR_ELEM 10 ( t . c [ i ] >> bits ) LEAF_NODE 11 ( FIELD 11 t . c [ i ] LEAF_NODE 12 t LEAF_NODE 12 . LEAF_NODE 12 c LEAF_NODE 12 [ EXPR 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 12 ] LEAF_NODE 11 >> FIELD 11 bits LEAF_NODE 12 bits LEAF_NODE 11 ) LEAF_NODE 10 | BIT_OR_ELEM 10 ( t . c [ i ? i - 1 : ARIA_BLOCK_SIZE - 1 ] << ( 8 - bits ) ) LEAF_NODE 11 ( FIELD 11 t . c [ i ? i - 1 : ARIA_BLOCK_SIZE - 1 ] LEAF_NODE 12 t LEAF_NODE 12 . LEAF_NODE 12 c LEAF_NODE 12 [ EXPR 12 i ? i - 1 : ARIA_BLOCK_SIZE - 1 COND_EXPR 13 i ? i - 1 : ARIA_BLOCK_SIZE - 1 CONDITION 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ? EXPR 14 i - 1 FIELD 15 i LEAF_NODE 16 i LEAF_NODE 15 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 : FIELD 14 ARIA_BLOCK_SIZE LEAF_NODE 15 ARIA_BLOCK_SIZE LEAF_NODE 14 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 12 ] LEAF_NODE 11 << LEAF_NODE 11 ( FIELD 11 8 LEAF_NODE 12 8 LEAF_NODE 11 - FIELD 11 bits LEAF_NODE 12 bits LEAF_NODE 11 ) LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 9 ^ FIELD 9 xor -> c [ i ] LEAF_NODE 10 xor LEAF_NODE 10 -> LEAF_NODE 10 c LEAF_NODE 10 [ EXPR 10 i FIELD 11 i LEAF_NODE 12 i LEAF_NODE 10 ] LEAF_NODE 6 ; LEAF_NODE 2 }", "idx": 173, "project": "openssl_ast_normal_function_test_146", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS ; VAR_DECL 2 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS TYPE 3 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } CLASS_DEF 4 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } LEAF_NODE 5 struct CLASS_NAME 5 args_st LEAF_NODE 6 args_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int size ; int argc ; char * argv ; SIMPLE_DECL 6 int size ; VAR_DECL 7 int size TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 size LEAF_NODE 9 size LEAF_NODE 7 ; SIMPLE_DECL 6 int argc ; VAR_DECL 7 int argc TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 argc LEAF_NODE 9 argc LEAF_NODE 7 ; SIMPLE_DECL 6 char * argv ; VAR_DECL 7 char * argv TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 argv LEAF_NODE 9 argv LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 ARGS LEAF_NODE 4 ARGS LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 print_name LEAF_NODE 3 print_name PARAMETER_LIST 2 ( BIO * out , const char * title , X509_NAME * nm , unsigned long lflags ) LEAF_NODE 3 ( PARAMETER_DECL 3 BIO * out TYPE 4 BIO * TYPE_NAME 5 BIO LEAF_NODE 6 BIO POINTER 5 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 const char * title TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 title LEAF_NODE 5 title LEAF_NODE 3 , PARAMETER_DECL 3 X509_NAME * nm TYPE 4 X509_NAME * TYPE_NAME 5 X509_NAME LEAF_NODE 6 X509_NAME POINTER 5 * LEAF_NODE 6 * NAME 4 nm LEAF_NODE 5 nm LEAF_NODE 3 , PARAMETER_DECL 3 unsigned long lflags TYPE 4 unsigned long TYPE_NAME 5 unsigned long LEAF_NODE 6 unsigned LEAF_NODE 6 long NAME 4 lflags LEAF_NODE 5 lflags LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * buf ; VAR_DECL 4 char * buf TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 buf LEAF_NODE 6 buf LEAF_NODE 4 ; SIMPLE_DECL 3 char mline ; mline = 0 ; VAR_DECL 4 char mline ; mline = 0 TYPE 5 char TYPE_NAME 6 char LEAF_NODE 7 char NAME 5 mline LEAF_NODE 6 mline LEAF_NODE 5 ; INIT 5 mline = 0 ASSIGN 6 mline = 0 LVAL 7 mline NAME 8 mline LEAF_NODE 9 mline ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int indent ; indent = 0 ; VAR_DECL 4 int indent ; indent = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 indent LEAF_NODE 6 indent LEAF_NODE 5 ; INIT 5 indent = 0 ASSIGN 6 indent = 0 LVAL 7 indent NAME 8 indent LEAF_NODE 9 indent ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 title EXPR 5 title FIELD 6 title LEAF_NODE 7 title LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 BIO_puts ( out , title ) ; EXPR 6 BIO_puts ( out , title ) FUNCTION_CALL 7 BIO_puts ( out , title ) CALLEE 8 BIO_puts LEAF_NODE 9 BIO_puts LEAF_NODE 8 ( ARGUMENT 8 out FIELD 9 out LEAF_NODE 10 out LEAF_NODE 8 , ARGUMENT 8 title FIELD 9 title LEAF_NODE 10 title LEAF_NODE 8 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( lflags & XN_FLAG_SEP_MASK ) == XN_FLAG_SEP_MULTILINE EXPR 5 ( lflags & XN_FLAG_SEP_MASK ) == XN_FLAG_SEP_MULTILINE LEAF_NODE 6 ( FIELD 6 lflags LEAF_NODE 7 lflags LEAF_NODE 6 & FIELD 6 XN_FLAG_SEP_MASK LEAF_NODE 7 XN_FLAG_SEP_MASK LEAF_NODE 6 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 XN_FLAG_SEP_MULTILINE LEAF_NODE 7 XN_FLAG_SEP_MULTILINE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 mline = 1 ; EXPR 7 mline = 1 ASSIGN 8 mline = 1 LVAL 9 mline FIELD 10 mline LEAF_NODE 11 mline ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; EXPR_STATEMENT 6 indent = 4 ; EXPR 7 indent = 4 ASSIGN 8 indent = 4 LVAL 9 indent FIELD 10 indent LEAF_NODE 11 indent ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 4 FIELD 10 4 LEAF_NODE 11 4 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 lflags == XN_FLAG_COMPAT EXPR 5 lflags == XN_FLAG_COMPAT FIELD 6 lflags LEAF_NODE 7 lflags EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 XN_FLAG_COMPAT LEAF_NODE 7 XN_FLAG_COMPAT LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 buf = X509_NAME_oneline ( nm , 0 , 0 ) ; EXPR 7 buf = X509_NAME_oneline ( nm , 0 , 0 ) ASSIGN 8 buf = X509_NAME_oneline ( nm , 0 , 0 ) LVAL 9 buf FIELD 10 buf LEAF_NODE 11 buf ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 X509_NAME_oneline ( nm , 0 , 0 ) FUNCTION_CALL 10 X509_NAME_oneline ( nm , 0 , 0 ) CALLEE 11 X509_NAME_oneline LEAF_NODE 12 X509_NAME_oneline LEAF_NODE 11 ( ARGUMENT 11 nm FIELD 12 nm LEAF_NODE 13 nm LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 BIO_puts ( out , buf ) ; EXPR 7 BIO_puts ( out , buf ) FUNCTION_CALL 8 BIO_puts ( out , buf ) CALLEE 9 BIO_puts LEAF_NODE 10 BIO_puts LEAF_NODE 9 ( ARGUMENT 9 out FIELD 10 out LEAF_NODE 11 out LEAF_NODE 9 , ARGUMENT 9 buf FIELD 10 buf LEAF_NODE 11 buf LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 BIO_puts ( out , \"\\n\" ) ; EXPR 7 BIO_puts ( out , \"\\n\" ) FUNCTION_CALL 8 BIO_puts ( out , \"\\n\" ) CALLEE 9 BIO_puts LEAF_NODE 10 BIO_puts LEAF_NODE 9 ( ARGUMENT 9 out FIELD 10 out LEAF_NODE 11 out LEAF_NODE 9 , ARGUMENT 9 \"\\n\" FIELD 10 \"\\n\" LEAF_NODE 11 \"\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_free ( buf ) ; EXPR 7 OPENSSL_free ( buf ) FUNCTION_CALL 8 OPENSSL_free ( buf ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 buf FIELD 10 buf LEAF_NODE 11 buf LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 mline EXPR 8 mline FIELD 9 mline LEAF_NODE 10 mline LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 BIO_puts ( out , \"\\n\" ) ; EXPR 9 BIO_puts ( out , \"\\n\" ) FUNCTION_CALL 10 BIO_puts ( out , \"\\n\" ) CALLEE 11 BIO_puts LEAF_NODE 12 BIO_puts LEAF_NODE 11 ( ARGUMENT 11 out FIELD 12 out LEAF_NODE 13 out LEAF_NODE 11 , ARGUMENT 11 \"\\n\" FIELD 12 \"\\n\" LEAF_NODE 13 \"\\n\" LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 6 X509_NAME_print_ex ( out , nm , indent , lflags ) ; EXPR 7 X509_NAME_print_ex ( out , nm , indent , lflags ) FUNCTION_CALL 8 X509_NAME_print_ex ( out , nm , indent , lflags ) CALLEE 9 X509_NAME_print_ex LEAF_NODE 10 X509_NAME_print_ex LEAF_NODE 9 ( ARGUMENT 9 out FIELD 10 out LEAF_NODE 11 out LEAF_NODE 9 , ARGUMENT 9 nm FIELD 10 nm LEAF_NODE 11 nm LEAF_NODE 9 , ARGUMENT 9 indent FIELD 10 indent LEAF_NODE 11 indent LEAF_NODE 9 , ARGUMENT 9 lflags FIELD 10 lflags LEAF_NODE 11 lflags LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 BIO_puts ( out , \"\\n\" ) ; EXPR 7 BIO_puts ( out , \"\\n\" ) FUNCTION_CALL 8 BIO_puts ( out , \"\\n\" ) CALLEE 9 BIO_puts LEAF_NODE 10 BIO_puts LEAF_NODE 9 ( ARGUMENT 9 out FIELD 10 out LEAF_NODE 11 out LEAF_NODE 9 , ARGUMENT 9 \"\\n\" FIELD 10 \"\\n\" LEAF_NODE 11 \"\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 }", "idx": 174, "project": "openssl_ast_normal_function_test_93", "target": 0}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } ; CLASS_DEF 2 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } CLASS_DEF 3 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } LEAF_NODE 4 struct CLASS_NAME 4 bio_addrinfo_st LEAF_NODE 5 bio_addrinfo_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; SIMPLE_DECL 5 int bai_family ; VAR_DECL 6 int bai_family TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_family LEAF_NODE 8 bai_family LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_socktype ; VAR_DECL 6 int bai_socktype TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_socktype LEAF_NODE 8 bai_socktype LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_protocol ; VAR_DECL 6 int bai_protocol TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_protocol LEAF_NODE 8 bai_protocol LEAF_NODE 6 ; SIMPLE_DECL 5 size_t bai_addrlen ; VAR_DECL 6 size_t bai_addrlen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 bai_addrlen LEAF_NODE 8 bai_addrlen LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr * bai_addr ; VAR_DECL 6 struct sockaddr * bai_addr TYPE 7 struct sockaddr * TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr POINTER 8 * LEAF_NODE 9 * NAME 7 bai_addr LEAF_NODE 8 bai_addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct bio_addrinfo_st * bai_next ; VAR_DECL 6 struct bio_addrinfo_st * bai_next TYPE 7 struct bio_addrinfo_st * TYPE_NAME 8 struct bio_addrinfo_st LEAF_NODE 9 struct LEAF_NODE 9 bio_addrinfo_st POINTER 8 * LEAF_NODE 9 * NAME 7 bai_next LEAF_NODE 8 bai_next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BIO_ADDRINFO ; VAR_DECL 2 struct bio_addrinfo_st BIO_ADDRINFO TYPE 3 struct bio_addrinfo_st TYPE_NAME 4 struct bio_addrinfo_st LEAF_NODE 5 struct LEAF_NODE 5 bio_addrinfo_st NAME 3 BIO_ADDRINFO LEAF_NODE 4 BIO_ADDRINFO LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t socklen_t ; VAR_DECL 2 uint32_t socklen_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 socklen_t LEAF_NODE 4 socklen_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } ; CLASS_DEF 2 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } CLASS_DEF 3 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } LEAF_NODE 4 enum CLASS_NAME 4 BIO_hostserv_priorities LEAF_NODE 5 BIO_hostserv_priorities LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV LEAF_NODE 5 BIO_PARSE_PRIO_HOST LEAF_NODE 5 , LEAF_NODE 5 BIO_PARSE_PRIO_SERV LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } ; CLASS_DEF 2 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } CLASS_DEF 3 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } LEAF_NODE 4 enum CLASS_NAME 4 BIO_lookup_type LEAF_NODE 5 BIO_lookup_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER LEAF_NODE 5 BIO_LOOKUP_CLIENT LEAF_NODE 5 , LEAF_NODE 5 BIO_LOOKUP_SERVER LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 BIO_accept_ex LEAF_NODE 3 BIO_accept_ex PARAMETER_LIST 2 ( int accept_sock , BIO_ADDR * addr_ , int options ) LEAF_NODE 3 ( PARAMETER_DECL 3 int accept_sock TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 accept_sock LEAF_NODE 5 accept_sock LEAF_NODE 3 , PARAMETER_DECL 3 BIO_ADDR * addr_ TYPE 4 BIO_ADDR * TYPE_NAME 5 BIO_ADDR LEAF_NODE 6 BIO_ADDR POINTER 5 * LEAF_NODE 6 * NAME 4 addr_ LEAF_NODE 5 addr_ LEAF_NODE 3 , PARAMETER_DECL 3 int options TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 options LEAF_NODE 5 options LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 socklen_t len ; VAR_DECL 4 socklen_t len TYPE 5 socklen_t TYPE_NAME 6 socklen_t LEAF_NODE 7 socklen_t NAME 5 len LEAF_NODE 6 len LEAF_NODE 4 ; SIMPLE_DECL 3 int accepted_sock ; VAR_DECL 4 int accepted_sock TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 accepted_sock LEAF_NODE 6 accepted_sock LEAF_NODE 4 ; SIMPLE_DECL 3 BIO_ADDR locaddr ; VAR_DECL 4 BIO_ADDR locaddr TYPE 5 BIO_ADDR TYPE_NAME 6 BIO_ADDR LEAF_NODE 7 BIO_ADDR NAME 5 locaddr LEAF_NODE 6 locaddr LEAF_NODE 4 ; SIMPLE_DECL 3 BIO_ADDR * addr ; addr = addr_ == NULL ? & locaddr : addr_ ; VAR_DECL 4 BIO_ADDR * addr ; addr = addr_ == NULL ? & locaddr : addr_ TYPE 5 BIO_ADDR * TYPE_NAME 6 BIO_ADDR LEAF_NODE 7 BIO_ADDR POINTER 6 * LEAF_NODE 7 * NAME 5 addr LEAF_NODE 6 addr LEAF_NODE 5 ; INIT 5 addr = addr_ == NULL ? & locaddr : addr_ ASSIGN 6 addr = addr_ == NULL ? & locaddr : addr_ LVAL 7 addr NAME 8 addr LEAF_NODE 9 addr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 addr_ == NULL ? & locaddr : addr_ COND_EXPR 8 addr_ == NULL ? & locaddr : addr_ CONDITION 9 addr_ == NULL FIELD 10 addr_ LEAF_NODE 11 addr_ EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 ? EXPR 9 & locaddr UNARY_EXPR 10 & locaddr UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 locaddr LEAF_NODE 12 locaddr LEAF_NODE 9 : FIELD 9 addr_ LEAF_NODE 10 addr_ LEAF_NODE 4 ; EXPR_STATEMENT 3 len = sizeof ( * addr ) ; EXPR 4 len = sizeof ( * addr ) ASSIGN 5 len = sizeof ( * addr ) LVAL 6 len FIELD 7 len LEAF_NODE 8 len ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 sizeof ( * addr ) FUNCTION_CALL 7 sizeof ( * addr ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 * addr UNARY_EXPR 9 * addr UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 addr LEAF_NODE 11 addr LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 accepted_sock = accept ( accept_sock , BIO_ADDR_sockaddr_noconst ( addr ) , & len ) ; EXPR 4 accepted_sock = accept ( accept_sock , BIO_ADDR_sockaddr_noconst ( addr ) , & len ) ASSIGN 5 accepted_sock = accept ( accept_sock , BIO_ADDR_sockaddr_noconst ( addr ) , & len ) LVAL 6 accepted_sock FIELD 7 accepted_sock LEAF_NODE 8 accepted_sock ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 accept ( accept_sock , BIO_ADDR_sockaddr_noconst ( addr ) , & len ) FUNCTION_CALL 7 accept ( accept_sock , BIO_ADDR_sockaddr_noconst ( addr ) , & len ) CALLEE 8 accept LEAF_NODE 9 accept LEAF_NODE 8 ( ARGUMENT 8 accept_sock FIELD 9 accept_sock LEAF_NODE 10 accept_sock LEAF_NODE 8 , ARGUMENT 8 BIO_ADDR_sockaddr_noconst ( addr ) FUNCTION_CALL 9 BIO_ADDR_sockaddr_noconst ( addr ) CALLEE 10 BIO_ADDR_sockaddr_noconst LEAF_NODE 11 BIO_ADDR_sockaddr_noconst LEAF_NODE 10 ( ARGUMENT 10 addr FIELD 11 addr LEAF_NODE 12 addr LEAF_NODE 10 ) LEAF_NODE 8 , ARGUMENT 8 & len UNARY_EXPR 9 & len UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 len LEAF_NODE 11 len LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 accepted_sock == - 1 EXPR 5 accepted_sock == - 1 FIELD 6 accepted_sock LEAF_NODE 7 accepted_sock EQ_OPERATOR 6 == LEAF_NODE 7 == UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! BIO_sock_should_retry ( accepted_sock ) EXPR 8 ! BIO_sock_should_retry ( accepted_sock ) UNARY_EXPR 9 ! BIO_sock_should_retry ( accepted_sock ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 BIO_sock_should_retry ( accepted_sock ) CALLEE 11 BIO_sock_should_retry LEAF_NODE 12 BIO_sock_should_retry LEAF_NODE 11 ( ARGUMENT 11 accepted_sock FIELD 12 accepted_sock LEAF_NODE 13 accepted_sock LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SYSerr ( SYS_F_ACCEPT , get_last_socket_error ( ) ) ; EXPR 10 SYSerr ( SYS_F_ACCEPT , get_last_socket_error ( ) ) FUNCTION_CALL 11 SYSerr ( SYS_F_ACCEPT , get_last_socket_error ( ) ) CALLEE 12 SYSerr LEAF_NODE 13 SYSerr LEAF_NODE 12 ( ARGUMENT 12 SYS_F_ACCEPT FIELD 13 SYS_F_ACCEPT LEAF_NODE 14 SYS_F_ACCEPT LEAF_NODE 12 , ARGUMENT 12 get_last_socket_error ( ) FUNCTION_CALL 13 get_last_socket_error ( ) CALLEE 14 get_last_socket_error LEAF_NODE 15 get_last_socket_error LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 BIOerr ( BIO_F_BIO_ACCEPT_EX , BIO_R_ACCEPT_ERROR ) ; EXPR 10 BIOerr ( BIO_F_BIO_ACCEPT_EX , BIO_R_ACCEPT_ERROR ) FUNCTION_CALL 11 BIOerr ( BIO_F_BIO_ACCEPT_EX , BIO_R_ACCEPT_ERROR ) CALLEE 12 BIOerr LEAF_NODE 13 BIOerr LEAF_NODE 12 ( ARGUMENT 12 BIO_F_BIO_ACCEPT_EX FIELD 13 BIO_F_BIO_ACCEPT_EX LEAF_NODE 14 BIO_F_BIO_ACCEPT_EX LEAF_NODE 12 , ARGUMENT 12 BIO_R_ACCEPT_ERROR FIELD 13 BIO_R_ACCEPT_ERROR LEAF_NODE 14 BIO_R_ACCEPT_ERROR LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } JUMP_STATEMENT 6 return INVALID_SOCKET ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 INVALID_SOCKET EXPR 8 INVALID_SOCKET FIELD 9 INVALID_SOCKET LEAF_NODE 10 INVALID_SOCKET LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! BIO_socket_nbio ( accepted_sock , ( options & BIO_SOCK_NONBLOCK ) != 0 ) EXPR 5 ! BIO_socket_nbio ( accepted_sock , ( options & BIO_SOCK_NONBLOCK ) != 0 ) UNARY_EXPR 6 ! BIO_socket_nbio ( accepted_sock , ( options & BIO_SOCK_NONBLOCK ) != 0 ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 BIO_socket_nbio ( accepted_sock , ( options & BIO_SOCK_NONBLOCK ) != 0 ) CALLEE 8 BIO_socket_nbio LEAF_NODE 9 BIO_socket_nbio LEAF_NODE 8 ( ARGUMENT 8 accepted_sock FIELD 9 accepted_sock LEAF_NODE 10 accepted_sock LEAF_NODE 8 , ARGUMENT 8 ( options & BIO_SOCK_NONBLOCK ) != 0 LEAF_NODE 9 ( FIELD 9 options LEAF_NODE 10 options LEAF_NODE 9 & FIELD 9 BIO_SOCK_NONBLOCK LEAF_NODE 10 BIO_SOCK_NONBLOCK LEAF_NODE 9 ) EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 closesocket ( accepted_sock ) ; EXPR 7 closesocket ( accepted_sock ) FUNCTION_CALL 8 closesocket ( accepted_sock ) CALLEE 9 closesocket LEAF_NODE 10 closesocket LEAF_NODE 9 ( ARGUMENT 9 accepted_sock FIELD 10 accepted_sock LEAF_NODE 11 accepted_sock LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return INVALID_SOCKET ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 INVALID_SOCKET EXPR 8 INVALID_SOCKET FIELD 9 INVALID_SOCKET LEAF_NODE 10 INVALID_SOCKET LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return accepted_sock ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 accepted_sock EXPR 5 accepted_sock FIELD 6 accepted_sock LEAF_NODE 7 accepted_sock LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 175, "project": "openssl_ast_normal_function_test_66", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 tls1_process_heartbeat LEAF_NODE 3 tls1_process_heartbeat PARAMETER_LIST 2 ( SSL * s ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned char * p ; p = & s -> s3 -> rrec . data [ 0 ] , unsigned char * pl ; INIT_DECL_LIST 4 unsigned char * p ; p = & s -> s3 -> rrec . data [ 0 ] , unsigned char * pl VAR_DECL 5 unsigned char * p ; p = & s -> s3 -> rrec . data [ 0 ] TYPE 6 unsigned char * TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 p LEAF_NODE 7 p LEAF_NODE 6 ; INIT 6 p = & s -> s3 -> rrec . data [ 0 ] ASSIGN 7 p = & s -> s3 -> rrec . data [ 0 ] LVAL 8 p NAME 9 p LEAF_NODE 10 p ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 & s -> s3 -> rrec . data [ 0 ] UNARY_EXPR 9 & s -> s3 -> rrec . data [ 0 ] UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 s -> s3 -> rrec . data [ 0 ] LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s3 LEAF_NODE 11 -> LEAF_NODE 11 rrec LEAF_NODE 11 . LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ] LEAF_NODE 5 , VAR_DECL 5 unsigned char * pl TYPE 6 unsigned char * TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 pl LEAF_NODE 7 pl LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned short hbtype ; VAR_DECL 4 unsigned short hbtype TYPE 5 unsigned short TYPE_NAME 6 unsigned short LEAF_NODE 7 unsigned LEAF_NODE 7 short NAME 5 hbtype LEAF_NODE 6 hbtype LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int payload ; VAR_DECL 4 unsigned int payload TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 payload LEAF_NODE 6 payload LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int padding ; padding = 16 ; VAR_DECL 4 unsigned int padding ; padding = 16 TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 padding LEAF_NODE 6 padding LEAF_NODE 5 ; INIT 5 padding = 16 ASSIGN 6 padding = 16 LVAL 7 padding NAME 8 padding LEAF_NODE 9 padding ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 16 FIELD 8 16 LEAF_NODE 9 16 LEAF_NODE 4 ; EXPR_STATEMENT 3 hbtype = * p ++ ; EXPR 4 hbtype = * p ++ ASSIGN 5 hbtype = * p ++ LVAL 6 hbtype FIELD 7 hbtype LEAF_NODE 8 hbtype ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 * p ++ UNARY_EXPR 7 * p ++ UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 p ++ LEAF_NODE 9 p LEAF_NODE 9 ++ LEAF_NODE 4 ; EXPR_STATEMENT 3 n2s ( p , payload ) ; EXPR 4 n2s ( p , payload ) FUNCTION_CALL 5 n2s ( p , payload ) CALLEE 6 n2s LEAF_NODE 7 n2s LEAF_NODE 6 ( ARGUMENT 6 p FIELD 7 p LEAF_NODE 8 p LEAF_NODE 6 , ARGUMENT 6 payload FIELD 7 payload LEAF_NODE 8 payload LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 pl = p ; EXPR 4 pl = p ASSIGN 5 pl = p LVAL 6 pl FIELD 7 pl LEAF_NODE 8 pl ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 p FIELD 7 p LEAF_NODE 8 p LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> msg_callback EXPR 5 s -> msg_callback FIELD 6 s -> msg_callback LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 msg_callback LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 s -> msg_callback ( 0 , s -> version , TLS1_RT_HEARTBEAT , & s -> s3 -> rrec . data [ 0 ] , s -> s3 -> rrec . length , s , s -> msg_callback_arg ) ; EXPR 6 s -> msg_callback ( 0 , s -> version , TLS1_RT_HEARTBEAT , & s -> s3 -> rrec . data [ 0 ] , s -> s3 -> rrec . length , s , s -> msg_callback_arg ) FUNCTION_CALL 7 s -> msg_callback ( 0 , s -> version , TLS1_RT_HEARTBEAT , & s -> s3 -> rrec . data [ 0 ] , s -> s3 -> rrec . length , s , s -> msg_callback_arg ) CALLEE 8 s -> msg_callback LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 msg_callback LEAF_NODE 8 ( ARGUMENT 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 , ARGUMENT 8 s -> version FIELD 9 s -> version LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 version LEAF_NODE 8 , ARGUMENT 8 TLS1_RT_HEARTBEAT FIELD 9 TLS1_RT_HEARTBEAT LEAF_NODE 10 TLS1_RT_HEARTBEAT LEAF_NODE 8 , ARGUMENT 8 & s -> s3 -> rrec . data [ 0 ] UNARY_EXPR 9 & s -> s3 -> rrec . data [ 0 ] UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 s -> s3 -> rrec . data [ 0 ] LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s3 LEAF_NODE 11 -> LEAF_NODE 11 rrec LEAF_NODE 11 . LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ] LEAF_NODE 8 , ARGUMENT 8 s -> s3 -> rrec . length FIELD 9 s -> s3 -> rrec . length LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 s3 LEAF_NODE 10 -> LEAF_NODE 10 rrec LEAF_NODE 10 . LEAF_NODE 10 length LEAF_NODE 8 , ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 , ARGUMENT 8 s -> msg_callback_arg FIELD 9 s -> msg_callback_arg LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 msg_callback_arg LEAF_NODE 8 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 hbtype == TLS1_HB_REQUEST EXPR 5 hbtype == TLS1_HB_REQUEST FIELD 6 hbtype LEAF_NODE 7 hbtype EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 TLS1_HB_REQUEST LEAF_NODE 7 TLS1_HB_REQUEST LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 unsigned char * buffer , unsigned char * bp ; INIT_DECL_LIST 7 unsigned char * buffer , unsigned char * bp VAR_DECL 8 unsigned char * buffer TYPE 9 unsigned char * TYPE_NAME 10 unsigned char LEAF_NODE 11 unsigned LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 buffer LEAF_NODE 10 buffer LEAF_NODE 8 , VAR_DECL 8 unsigned char * bp TYPE 9 unsigned char * TYPE_NAME 10 unsigned char LEAF_NODE 11 unsigned LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 bp LEAF_NODE 10 bp LEAF_NODE 7 ; SIMPLE_DECL 6 int r ; VAR_DECL 7 int r TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 r LEAF_NODE 9 r LEAF_NODE 7 ; EXPR_STATEMENT 6 buffer = OPENSSL_malloc ( 1 + 2 + payload + padding ) ; EXPR 7 buffer = OPENSSL_malloc ( 1 + 2 + payload + padding ) ASSIGN 8 buffer = OPENSSL_malloc ( 1 + 2 + payload + padding ) LVAL 9 buffer FIELD 10 buffer LEAF_NODE 11 buffer ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 OPENSSL_malloc ( 1 + 2 + payload + padding ) FUNCTION_CALL 10 OPENSSL_malloc ( 1 + 2 + payload + padding ) CALLEE 11 OPENSSL_malloc LEAF_NODE 12 OPENSSL_malloc LEAF_NODE 11 ( ARGUMENT 11 1 + 2 + payload + padding FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 12 + FIELD 12 2 LEAF_NODE 13 2 LEAF_NODE 12 + FIELD 12 payload LEAF_NODE 13 payload LEAF_NODE 12 + FIELD 12 padding LEAF_NODE 13 padding LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 bp = buffer ; EXPR 7 bp = buffer ASSIGN 8 bp = buffer LVAL 9 bp FIELD 10 bp LEAF_NODE 11 bp ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 buffer FIELD 10 buffer LEAF_NODE 11 buffer LEAF_NODE 7 ; EXPR_STATEMENT 6 * bp ++ = TLS1_HB_RESPONSE ; EXPR 7 * bp ++ = TLS1_HB_RESPONSE ASSIGN 8 * bp ++ = TLS1_HB_RESPONSE LVAL 9 * bp ++ UNARY_EXPR 10 * bp ++ UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 bp ++ LEAF_NODE 12 bp LEAF_NODE 12 ++ ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 TLS1_HB_RESPONSE FIELD 10 TLS1_HB_RESPONSE LEAF_NODE 11 TLS1_HB_RESPONSE LEAF_NODE 7 ; EXPR_STATEMENT 6 s2n ( payload , bp ) ; EXPR 7 s2n ( payload , bp ) FUNCTION_CALL 8 s2n ( payload , bp ) CALLEE 9 s2n LEAF_NODE 10 s2n LEAF_NODE 9 ( ARGUMENT 9 payload FIELD 10 payload LEAF_NODE 11 payload LEAF_NODE 9 , ARGUMENT 9 bp FIELD 10 bp LEAF_NODE 11 bp LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 memcpy ( bp , pl , payload ) ; EXPR 7 memcpy ( bp , pl , payload ) FUNCTION_CALL 8 memcpy ( bp , pl , payload ) CALLEE 9 memcpy LEAF_NODE 10 memcpy LEAF_NODE 9 ( ARGUMENT 9 bp FIELD 10 bp LEAF_NODE 11 bp LEAF_NODE 9 , ARGUMENT 9 pl FIELD 10 pl LEAF_NODE 11 pl LEAF_NODE 9 , ARGUMENT 9 payload FIELD 10 payload LEAF_NODE 11 payload LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 bp += payload ; EXPR 7 bp += payload ASSIGN 8 bp += payload LVAL 9 bp FIELD 10 bp LEAF_NODE 11 bp ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 payload FIELD 10 payload LEAF_NODE 11 payload LEAF_NODE 7 ; EXPR_STATEMENT 6 RAND_pseudo_bytes ( bp , padding ) ; EXPR 7 RAND_pseudo_bytes ( bp , padding ) FUNCTION_CALL 8 RAND_pseudo_bytes ( bp , padding ) CALLEE 9 RAND_pseudo_bytes LEAF_NODE 10 RAND_pseudo_bytes LEAF_NODE 9 ( ARGUMENT 9 bp FIELD 10 bp LEAF_NODE 11 bp LEAF_NODE 9 , ARGUMENT 9 padding FIELD 10 padding LEAF_NODE 11 padding LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 r = ssl3_write_bytes ( s , TLS1_RT_HEARTBEAT , buffer , 3 + payload + padding ) ; EXPR 7 r = ssl3_write_bytes ( s , TLS1_RT_HEARTBEAT , buffer , 3 + payload + padding ) ASSIGN 8 r = ssl3_write_bytes ( s , TLS1_RT_HEARTBEAT , buffer , 3 + payload + padding ) LVAL 9 r FIELD 10 r LEAF_NODE 11 r ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ssl3_write_bytes ( s , TLS1_RT_HEARTBEAT , buffer , 3 + payload + padding ) FUNCTION_CALL 10 ssl3_write_bytes ( s , TLS1_RT_HEARTBEAT , buffer , 3 + payload + padding ) CALLEE 11 ssl3_write_bytes LEAF_NODE 12 ssl3_write_bytes LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 , ARGUMENT 11 TLS1_RT_HEARTBEAT FIELD 12 TLS1_RT_HEARTBEAT LEAF_NODE 13 TLS1_RT_HEARTBEAT LEAF_NODE 11 , ARGUMENT 11 buffer FIELD 12 buffer LEAF_NODE 13 buffer LEAF_NODE 11 , ARGUMENT 11 3 + payload + padding FIELD 12 3 LEAF_NODE 13 3 LEAF_NODE 12 + FIELD 12 payload LEAF_NODE 13 payload LEAF_NODE 12 + FIELD 12 padding LEAF_NODE 13 padding LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 r >= 0 && s -> msg_callback EXPR 8 r >= 0 && s -> msg_callback AND 9 r >= 0 && s -> msg_callback EXPR 10 r >= 0 FIELD 11 r LEAF_NODE 12 r REL_OPERATOR 11 >= LEAF_NODE 12 >= FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 && EXPR 10 s -> msg_callback FIELD 11 s -> msg_callback LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 msg_callback LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 s -> msg_callback ( 1 , s -> version , TLS1_RT_HEARTBEAT , buffer , 3 + payload + padding , s , s -> msg_callback_arg ) ; EXPR 9 s -> msg_callback ( 1 , s -> version , TLS1_RT_HEARTBEAT , buffer , 3 + payload + padding , s , s -> msg_callback_arg ) FUNCTION_CALL 10 s -> msg_callback ( 1 , s -> version , TLS1_RT_HEARTBEAT , buffer , 3 + payload + padding , s , s -> msg_callback_arg ) CALLEE 11 s -> msg_callback LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 msg_callback LEAF_NODE 11 ( ARGUMENT 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 , ARGUMENT 11 s -> version FIELD 12 s -> version LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 version LEAF_NODE 11 , ARGUMENT 11 TLS1_RT_HEARTBEAT FIELD 12 TLS1_RT_HEARTBEAT LEAF_NODE 13 TLS1_RT_HEARTBEAT LEAF_NODE 11 , ARGUMENT 11 buffer FIELD 12 buffer LEAF_NODE 13 buffer LEAF_NODE 11 , ARGUMENT 11 3 + payload + padding FIELD 12 3 LEAF_NODE 13 3 LEAF_NODE 12 + FIELD 12 payload LEAF_NODE 13 payload LEAF_NODE 12 + FIELD 12 padding LEAF_NODE 13 padding LEAF_NODE 11 , ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 , ARGUMENT 11 s -> msg_callback_arg FIELD 12 s -> msg_callback_arg LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 msg_callback_arg LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 6 OPENSSL_free ( buffer ) ; EXPR 7 OPENSSL_free ( buffer ) FUNCTION_CALL 8 OPENSSL_free ( buffer ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 buffer FIELD 10 buffer LEAF_NODE 11 buffer LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 r < 0 EXPR 8 r < 0 FIELD 9 r LEAF_NODE 10 r REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return r ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 r EXPR 10 r FIELD 11 r LEAF_NODE 12 r LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 hbtype == TLS1_HB_RESPONSE EXPR 7 hbtype == TLS1_HB_RESPONSE FIELD 8 hbtype LEAF_NODE 9 hbtype EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 TLS1_HB_RESPONSE LEAF_NODE 9 TLS1_HB_RESPONSE LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SIMPLE_DECL 8 unsigned int seq ; VAR_DECL 9 unsigned int seq TYPE 10 unsigned int TYPE_NAME 11 unsigned int LEAF_NODE 12 unsigned LEAF_NODE 12 int NAME 10 seq LEAF_NODE 11 seq LEAF_NODE 9 ; EXPR_STATEMENT 8 n2s ( pl , seq ) ; EXPR 9 n2s ( pl , seq ) FUNCTION_CALL 10 n2s ( pl , seq ) CALLEE 11 n2s LEAF_NODE 12 n2s LEAF_NODE 11 ( ARGUMENT 11 pl FIELD 12 pl LEAF_NODE 13 pl LEAF_NODE 11 , ARGUMENT 11 seq FIELD 12 seq LEAF_NODE 13 seq LEAF_NODE 11 ) LEAF_NODE 9 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 payload == 18 && seq == s -> tlsext_hb_seq EXPR 10 payload == 18 && seq == s -> tlsext_hb_seq AND 11 payload == 18 && seq == s -> tlsext_hb_seq EXPR 12 payload == 18 FIELD 13 payload LEAF_NODE 14 payload EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 18 LEAF_NODE 14 18 LEAF_NODE 12 && EXPR 12 seq == s -> tlsext_hb_seq FIELD 13 seq LEAF_NODE 14 seq EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 s -> tlsext_hb_seq LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 tlsext_hb_seq LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 s -> tlsext_hb_seq ++ ; EXPR 12 s -> tlsext_hb_seq ++ FIELD 13 s -> tlsext_hb_seq ++ LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 tlsext_hb_seq LEAF_NODE 14 ++ LEAF_NODE 12 ; EXPR_STATEMENT 11 s -> tlsext_hb_pending = 0 ; EXPR 12 s -> tlsext_hb_pending = 0 ASSIGN 13 s -> tlsext_hb_pending = 0 LVAL 14 s -> tlsext_hb_pending FIELD 15 s -> tlsext_hb_pending LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 tlsext_hb_pending ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 7 } JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 176, "project": "openssl_ast_vul_function_test_12", "target": 1}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 bio_to_mem LEAF_NODE 3 bio_to_mem PARAMETER_LIST 2 ( unsigned char * * out , int maxlen , BIO * in ) LEAF_NODE 3 ( PARAMETER_DECL 3 unsigned char * * out TYPE 4 unsigned char * * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 int maxlen TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 maxlen LEAF_NODE 5 maxlen LEAF_NODE 3 , PARAMETER_DECL 3 BIO * in TYPE 4 BIO * TYPE_NAME 5 BIO LEAF_NODE 6 BIO POINTER 5 * LEAF_NODE 6 * NAME 4 in LEAF_NODE 5 in LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 BIO * mem ; VAR_DECL 4 BIO * mem TYPE 5 BIO * TYPE_NAME 6 BIO LEAF_NODE 7 BIO POINTER 6 * LEAF_NODE 7 * NAME 5 mem LEAF_NODE 6 mem LEAF_NODE 4 ; SIMPLE_DECL 3 int len , int ret ; INIT_DECL_LIST 4 int len , int ret VAR_DECL 5 int len TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 len LEAF_NODE 7 len LEAF_NODE 5 , VAR_DECL 5 int ret TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 ret LEAF_NODE 7 ret LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char [ 1024 ] tbuf ; VAR_DECL 4 unsigned char [ 1024 ] tbuf TYPE 5 unsigned char [ 1024 ] TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char TYPE_SUFFIX 6 [ 1024 ] LEAF_NODE 7 [ FIELD 7 1024 LEAF_NODE 8 1024 LEAF_NODE 7 ] NAME 5 tbuf LEAF_NODE 6 tbuf LEAF_NODE 4 ; EXPR_STATEMENT 3 mem = BIO_new ( BIO_s_mem ( ) ) ; EXPR 4 mem = BIO_new ( BIO_s_mem ( ) ) ASSIGN 5 mem = BIO_new ( BIO_s_mem ( ) ) LVAL 6 mem FIELD 7 mem LEAF_NODE 8 mem ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 BIO_new ( BIO_s_mem ( ) ) FUNCTION_CALL 7 BIO_new ( BIO_s_mem ( ) ) CALLEE 8 BIO_new LEAF_NODE 9 BIO_new LEAF_NODE 8 ( ARGUMENT 8 BIO_s_mem ( ) FUNCTION_CALL 9 BIO_s_mem ( ) CALLEE 10 BIO_s_mem LEAF_NODE 11 BIO_s_mem LEAF_NODE 10 ( LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 mem == NULL EXPR 5 mem == NULL FIELD 6 mem LEAF_NODE 7 mem EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return - 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 - 1 EXPR 7 - 1 UNARY_EXPR 8 - 1 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 6 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; LEAF_NODE 4 CONDITION LEAF_NODE 4 ; LEAF_NODE 4 FOR_EXPR LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( maxlen != - 1 ) && maxlen < 1024 EXPR 8 ( maxlen != - 1 ) && maxlen < 1024 AND 9 ( maxlen != - 1 ) && maxlen < 1024 EXPR 10 ( maxlen != - 1 ) LEAF_NODE 11 ( FIELD 11 maxlen LEAF_NODE 12 maxlen EQ_OPERATOR 11 != LEAF_NODE 12 != UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ) LEAF_NODE 10 && EXPR 10 maxlen < 1024 FIELD 11 maxlen LEAF_NODE 12 maxlen REL_OPERATOR 11 < LEAF_NODE 12 < FIELD 11 1024 LEAF_NODE 12 1024 LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 len = maxlen ; EXPR 9 len = maxlen ASSIGN 10 len = maxlen LVAL 11 len FIELD 12 len LEAF_NODE 13 len ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 maxlen FIELD 12 maxlen LEAF_NODE 13 maxlen LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 EXPR_STATEMENT 8 len = 1024 ; EXPR 9 len = 1024 ASSIGN 10 len = 1024 LVAL 11 len FIELD 12 len LEAF_NODE 13 len ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 1024 FIELD 12 1024 LEAF_NODE 13 1024 LEAF_NODE 9 ; EXPR_STATEMENT 6 len = BIO_read ( in , tbuf , len ) ; EXPR 7 len = BIO_read ( in , tbuf , len ) ASSIGN 8 len = BIO_read ( in , tbuf , len ) LVAL 9 len FIELD 10 len LEAF_NODE 11 len ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 BIO_read ( in , tbuf , len ) FUNCTION_CALL 10 BIO_read ( in , tbuf , len ) CALLEE 11 BIO_read LEAF_NODE 12 BIO_read LEAF_NODE 11 ( ARGUMENT 11 in FIELD 12 in LEAF_NODE 13 in LEAF_NODE 11 , ARGUMENT 11 tbuf FIELD 12 tbuf LEAF_NODE 13 tbuf LEAF_NODE 11 , ARGUMENT 11 len FIELD 12 len LEAF_NODE 13 len LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 len < 0 EXPR 8 len < 0 FIELD 9 len LEAF_NODE 10 len REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_free ( mem ) ; EXPR 10 BIO_free ( mem ) FUNCTION_CALL 11 BIO_free ( mem ) CALLEE 12 BIO_free LEAF_NODE 13 BIO_free LEAF_NODE 12 ( ARGUMENT 12 mem FIELD 13 mem LEAF_NODE 14 mem LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return - 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 - 1 EXPR 11 - 1 UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 len == 0 EXPR 8 len == 0 FIELD 9 len LEAF_NODE 10 len EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 break DESTINATION ; KEYWORD 9 break LEAF_NODE 10 break LEAF_NODE 9 DESTINATION LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 BIO_write ( mem , tbuf , len ) != len EXPR 8 BIO_write ( mem , tbuf , len ) != len FUNCTION_CALL 9 BIO_write ( mem , tbuf , len ) CALLEE 10 BIO_write LEAF_NODE 11 BIO_write LEAF_NODE 10 ( ARGUMENT 10 mem FIELD 11 mem LEAF_NODE 12 mem LEAF_NODE 10 , ARGUMENT 10 tbuf FIELD 11 tbuf LEAF_NODE 12 tbuf LEAF_NODE 10 , ARGUMENT 10 len FIELD 11 len LEAF_NODE 12 len LEAF_NODE 10 ) EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 len LEAF_NODE 10 len LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_free ( mem ) ; EXPR 10 BIO_free ( mem ) FUNCTION_CALL 11 BIO_free ( mem ) CALLEE 12 BIO_free LEAF_NODE 13 BIO_free LEAF_NODE 12 ( ARGUMENT 12 mem FIELD 13 mem LEAF_NODE 14 mem LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return - 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 - 1 EXPR 11 - 1 UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 maxlen -= len ; EXPR 7 maxlen -= len ASSIGN 8 maxlen -= len LVAL 9 maxlen FIELD 10 maxlen LEAF_NODE 11 maxlen ASSIGN_OP 9 -= LEAF_NODE 10 -= RVAL 9 len FIELD 10 len LEAF_NODE 11 len LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 maxlen == 0 EXPR 8 maxlen == 0 FIELD 9 maxlen LEAF_NODE 10 maxlen EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 break DESTINATION ; KEYWORD 9 break LEAF_NODE 10 break LEAF_NODE 9 DESTINATION LEAF_NODE 9 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ret = BIO_get_mem_data ( mem , ( char * * ) out ) ; EXPR 4 ret = BIO_get_mem_data ( mem , ( char * * ) out ) ASSIGN 5 ret = BIO_get_mem_data ( mem , ( char * * ) out ) LVAL 6 ret FIELD 7 ret LEAF_NODE 8 ret ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 BIO_get_mem_data ( mem , ( char * * ) out ) FUNCTION_CALL 7 BIO_get_mem_data ( mem , ( char * * ) out ) CALLEE 8 BIO_get_mem_data LEAF_NODE 9 BIO_get_mem_data LEAF_NODE 8 ( ARGUMENT 8 mem FIELD 9 mem LEAF_NODE 10 mem LEAF_NODE 8 , ARGUMENT 8 ( char * * ) out LEAF_NODE 9 ( TYPE_NAME 9 char LEAF_NODE 10 char LEAF_NODE 9 * LEAF_NODE 9 * LEAF_NODE 9 ) FIELD 9 out LEAF_NODE 10 out LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 BIO_set_flags ( mem , BIO_FLAGS_MEM_RDONLY ) ; EXPR 4 BIO_set_flags ( mem , BIO_FLAGS_MEM_RDONLY ) FUNCTION_CALL 5 BIO_set_flags ( mem , BIO_FLAGS_MEM_RDONLY ) CALLEE 6 BIO_set_flags LEAF_NODE 7 BIO_set_flags LEAF_NODE 6 ( ARGUMENT 6 mem FIELD 7 mem LEAF_NODE 8 mem LEAF_NODE 6 , ARGUMENT 6 BIO_FLAGS_MEM_RDONLY FIELD 7 BIO_FLAGS_MEM_RDONLY LEAF_NODE 8 BIO_FLAGS_MEM_RDONLY LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 BIO_free ( mem ) ; EXPR 4 BIO_free ( mem ) FUNCTION_CALL 5 BIO_free ( mem ) CALLEE 6 BIO_free LEAF_NODE 7 BIO_free LEAF_NODE 6 ( ARGUMENT 6 mem FIELD 7 mem LEAF_NODE 8 mem LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return ret ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ret EXPR 5 ret FIELD 6 ret LEAF_NODE 7 ret LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 177, "project": "openssl_ast_normal_function_test_60", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 PKCS5_PBE_add LEAF_NODE 3 PKCS5_PBE_add PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 }", "idx": 178, "project": "openssl_ast_normal_function_test_41", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 AES_bi_ige_encrypt LEAF_NODE 3 AES_bi_ige_encrypt PARAMETER_LIST 2 ( const unsigned char * in , unsigned char * out , size_t length , const AES_KEY * key , const AES_KEY * key2 , const unsigned char * ivec , const int enc ) LEAF_NODE 3 ( PARAMETER_DECL 3 const unsigned char * in TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 in LEAF_NODE 5 in LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * out TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 size_t length TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 length LEAF_NODE 5 length LEAF_NODE 3 , PARAMETER_DECL 3 const AES_KEY * key TYPE 4 const AES_KEY * TYPE_NAME 5 const AES_KEY LEAF_NODE 6 const LEAF_NODE 6 AES_KEY POINTER 5 * LEAF_NODE 6 * NAME 4 key LEAF_NODE 5 key LEAF_NODE 3 , PARAMETER_DECL 3 const AES_KEY * key2 TYPE 4 const AES_KEY * TYPE_NAME 5 const AES_KEY LEAF_NODE 6 const LEAF_NODE 6 AES_KEY POINTER 5 * LEAF_NODE 6 * NAME 4 key2 LEAF_NODE 5 key2 LEAF_NODE 3 , PARAMETER_DECL 3 const unsigned char * ivec TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 ivec LEAF_NODE 5 ivec LEAF_NODE 3 , PARAMETER_DECL 3 const int enc TYPE 4 const int TYPE_NAME 5 const int LEAF_NODE 6 const LEAF_NODE 6 int NAME 4 enc LEAF_NODE 5 enc LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t n ; VAR_DECL 4 size_t n TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 n LEAF_NODE 6 n LEAF_NODE 4 ; SIMPLE_DECL 3 size_t len ; len = length ; VAR_DECL 4 size_t len ; len = length TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 len LEAF_NODE 6 len LEAF_NODE 5 ; INIT 5 len = length ASSIGN 6 len = length LVAL 7 len NAME 8 len LEAF_NODE 9 len ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 length FIELD 8 length LEAF_NODE 9 length LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char [ AES_BLOCK_SIZE ] tmp ; VAR_DECL 4 unsigned char [ AES_BLOCK_SIZE ] tmp TYPE 5 unsigned char [ AES_BLOCK_SIZE ] TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char TYPE_SUFFIX 6 [ AES_BLOCK_SIZE ] LEAF_NODE 7 [ FIELD 7 AES_BLOCK_SIZE LEAF_NODE 8 AES_BLOCK_SIZE LEAF_NODE 7 ] NAME 5 tmp LEAF_NODE 6 tmp LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char [ AES_BLOCK_SIZE ] tmp2 ; VAR_DECL 4 unsigned char [ AES_BLOCK_SIZE ] tmp2 TYPE 5 unsigned char [ AES_BLOCK_SIZE ] TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char TYPE_SUFFIX 6 [ AES_BLOCK_SIZE ] LEAF_NODE 7 [ FIELD 7 AES_BLOCK_SIZE LEAF_NODE 8 AES_BLOCK_SIZE LEAF_NODE 7 ] NAME 5 tmp2 LEAF_NODE 6 tmp2 LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char [ AES_BLOCK_SIZE ] tmp3 ; VAR_DECL 4 unsigned char [ AES_BLOCK_SIZE ] tmp3 TYPE 5 unsigned char [ AES_BLOCK_SIZE ] TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char TYPE_SUFFIX 6 [ AES_BLOCK_SIZE ] LEAF_NODE 7 [ FIELD 7 AES_BLOCK_SIZE LEAF_NODE 8 AES_BLOCK_SIZE LEAF_NODE 7 ] NAME 5 tmp3 LEAF_NODE 6 tmp3 LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char [ AES_BLOCK_SIZE ] prev ; VAR_DECL 4 unsigned char [ AES_BLOCK_SIZE ] prev TYPE 5 unsigned char [ AES_BLOCK_SIZE ] TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char TYPE_SUFFIX 6 [ AES_BLOCK_SIZE ] LEAF_NODE 7 [ FIELD 7 AES_BLOCK_SIZE LEAF_NODE 8 AES_BLOCK_SIZE LEAF_NODE 7 ] NAME 5 prev LEAF_NODE 6 prev LEAF_NODE 4 ; SIMPLE_DECL 3 const unsigned char * iv ; VAR_DECL 4 const unsigned char * iv TYPE 5 const unsigned char * TYPE_NAME 6 const unsigned char LEAF_NODE 7 const LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 iv LEAF_NODE 6 iv LEAF_NODE 4 ; SIMPLE_DECL 3 const unsigned char * iv2 ; VAR_DECL 4 const unsigned char * iv2 TYPE 5 const unsigned char * TYPE_NAME 6 const unsigned char LEAF_NODE 7 const LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 iv2 LEAF_NODE 6 iv2 LEAF_NODE 4 ; EXPR_STATEMENT 3 OPENSSL_assert ( in && out && key && ivec ) ; EXPR 4 OPENSSL_assert ( in && out && key && ivec ) FUNCTION_CALL 5 OPENSSL_assert ( in && out && key && ivec ) CALLEE 6 OPENSSL_assert LEAF_NODE 7 OPENSSL_assert LEAF_NODE 6 ( ARGUMENT 6 in && out && key && ivec AND 7 in && out && key && ivec EXPR 8 in FIELD 9 in LEAF_NODE 10 in LEAF_NODE 8 && EXPR 8 out && key && ivec AND 9 out && key && ivec EXPR 10 out FIELD 11 out LEAF_NODE 12 out LEAF_NODE 10 && EXPR 10 key && ivec AND 11 key && ivec EXPR 12 key FIELD 13 key LEAF_NODE 14 key LEAF_NODE 12 && EXPR 12 ivec FIELD 13 ivec LEAF_NODE 14 ivec LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 OPENSSL_assert ( ( AES_ENCRYPT == enc ) || ( AES_DECRYPT == enc ) ) ; EXPR 4 OPENSSL_assert ( ( AES_ENCRYPT == enc ) || ( AES_DECRYPT == enc ) ) FUNCTION_CALL 5 OPENSSL_assert ( ( AES_ENCRYPT == enc ) || ( AES_DECRYPT == enc ) ) CALLEE 6 OPENSSL_assert LEAF_NODE 7 OPENSSL_assert LEAF_NODE 6 ( ARGUMENT 6 ( AES_ENCRYPT == enc ) || ( AES_DECRYPT == enc ) OR 7 ( AES_ENCRYPT == enc ) || ( AES_DECRYPT == enc ) EXPR 8 ( AES_ENCRYPT == enc ) LEAF_NODE 9 ( FIELD 9 AES_ENCRYPT LEAF_NODE 10 AES_ENCRYPT EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 enc LEAF_NODE 10 enc LEAF_NODE 9 ) LEAF_NODE 8 || EXPR 8 ( AES_DECRYPT == enc ) LEAF_NODE 9 ( FIELD 9 AES_DECRYPT LEAF_NODE 10 AES_DECRYPT EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 enc LEAF_NODE 10 enc LEAF_NODE 9 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 OPENSSL_assert ( ( length % AES_BLOCK_SIZE ) == 0 ) ; EXPR 4 OPENSSL_assert ( ( length % AES_BLOCK_SIZE ) == 0 ) FUNCTION_CALL 5 OPENSSL_assert ( ( length % AES_BLOCK_SIZE ) == 0 ) CALLEE 6 OPENSSL_assert LEAF_NODE 7 OPENSSL_assert LEAF_NODE 6 ( ARGUMENT 6 ( length % AES_BLOCK_SIZE ) == 0 LEAF_NODE 7 ( FIELD 7 length LEAF_NODE 8 length LEAF_NODE 7 % FIELD 7 AES_BLOCK_SIZE LEAF_NODE 8 AES_BLOCK_SIZE LEAF_NODE 7 ) EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 AES_ENCRYPT == enc EXPR 5 AES_ENCRYPT == enc FIELD 6 AES_ENCRYPT LEAF_NODE 7 AES_ENCRYPT EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 enc LEAF_NODE 7 enc LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 iv = ivec ; EXPR 7 iv = ivec ASSIGN 8 iv = ivec LVAL 9 iv FIELD 10 iv LEAF_NODE 11 iv ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ivec FIELD 10 ivec LEAF_NODE 11 ivec LEAF_NODE 7 ; EXPR_STATEMENT 6 iv2 = ivec + AES_BLOCK_SIZE ; EXPR 7 iv2 = ivec + AES_BLOCK_SIZE ASSIGN 8 iv2 = ivec + AES_BLOCK_SIZE LVAL 9 iv2 FIELD 10 iv2 LEAF_NODE 11 iv2 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ivec + AES_BLOCK_SIZE FIELD 10 ivec LEAF_NODE 11 ivec LEAF_NODE 10 + FIELD 10 AES_BLOCK_SIZE LEAF_NODE 11 AES_BLOCK_SIZE LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 while LEAF_NODE 8 while LEAF_NODE 7 ( CONDITION 7 len >= AES_BLOCK_SIZE EXPR 8 len >= AES_BLOCK_SIZE FIELD 9 len LEAF_NODE 10 len REL_OPERATOR 9 >= LEAF_NODE 10 >= FIELD 9 AES_BLOCK_SIZE LEAF_NODE 10 AES_BLOCK_SIZE LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 ITERATION 9 KEYWORD 10 for LEAF_NODE 11 for LEAF_NODE 10 ( FOR_INIT 10 n = 0 ; EXPR 11 n = 0 ASSIGN 12 n = 0 LVAL 13 n FIELD 14 n LEAF_NODE 15 n ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; CONDITION 10 n < AES_BLOCK_SIZE EXPR 11 n < AES_BLOCK_SIZE FIELD 12 n LEAF_NODE 13 n REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 AES_BLOCK_SIZE LEAF_NODE 13 AES_BLOCK_SIZE LEAF_NODE 10 ; FOR_EXPR 10 ++ n EXPR 11 ++ n LEAF_NODE 12 ++ FIELD 12 n LEAF_NODE 13 n LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 out [ n ] = in [ n ] ^ iv [ n ] ; EXPR 12 out [ n ] = in [ n ] ^ iv [ n ] ASSIGN 13 out [ n ] = in [ n ] ^ iv [ n ] LVAL 14 out [ n ] FIELD 15 out [ n ] LEAF_NODE 16 out LEAF_NODE 16 [ EXPR 16 n FIELD 17 n LEAF_NODE 18 n LEAF_NODE 16 ] ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 in [ n ] ^ iv [ n ] FIELD 15 in [ n ] LEAF_NODE 16 in LEAF_NODE 16 [ EXPR 16 n FIELD 17 n LEAF_NODE 18 n LEAF_NODE 16 ] LEAF_NODE 15 ^ FIELD 15 iv [ n ] LEAF_NODE 16 iv LEAF_NODE 16 [ EXPR 16 n FIELD 17 n LEAF_NODE 18 n LEAF_NODE 16 ] LEAF_NODE 12 ; EXPR_STATEMENT 9 AES_encrypt ( out , out , key ) ; EXPR 10 AES_encrypt ( out , out , key ) FUNCTION_CALL 11 AES_encrypt ( out , out , key ) CALLEE 12 AES_encrypt LEAF_NODE 13 AES_encrypt LEAF_NODE 12 ( ARGUMENT 12 out FIELD 13 out LEAF_NODE 14 out LEAF_NODE 12 , ARGUMENT 12 out FIELD 13 out LEAF_NODE 14 out LEAF_NODE 12 , ARGUMENT 12 key FIELD 13 key LEAF_NODE 14 key LEAF_NODE 12 ) LEAF_NODE 10 ; ITERATION 9 KEYWORD 10 for LEAF_NODE 11 for LEAF_NODE 10 ( FOR_INIT 10 n = 0 ; EXPR 11 n = 0 ASSIGN 12 n = 0 LVAL 13 n FIELD 14 n LEAF_NODE 15 n ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; CONDITION 10 n < AES_BLOCK_SIZE EXPR 11 n < AES_BLOCK_SIZE FIELD 12 n LEAF_NODE 13 n REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 AES_BLOCK_SIZE LEAF_NODE 13 AES_BLOCK_SIZE LEAF_NODE 10 ; FOR_EXPR 10 ++ n EXPR 11 ++ n LEAF_NODE 12 ++ FIELD 12 n LEAF_NODE 13 n LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 out [ n ] ^= iv2 [ n ] ; EXPR 12 out [ n ] ^= iv2 [ n ] ASSIGN 13 out [ n ] ^= iv2 [ n ] LVAL 14 out [ n ] FIELD 15 out [ n ] LEAF_NODE 16 out LEAF_NODE 16 [ EXPR 16 n FIELD 17 n LEAF_NODE 18 n LEAF_NODE 16 ] ASSIGN_OP 14 ^= LEAF_NODE 15 ^= RVAL 14 iv2 [ n ] FIELD 15 iv2 [ n ] LEAF_NODE 16 iv2 LEAF_NODE 16 [ EXPR 16 n FIELD 17 n LEAF_NODE 18 n LEAF_NODE 16 ] LEAF_NODE 12 ; EXPR_STATEMENT 9 iv = out ; EXPR 10 iv = out ASSIGN 11 iv = out LVAL 12 iv FIELD 13 iv LEAF_NODE 14 iv ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 out FIELD 13 out LEAF_NODE 14 out LEAF_NODE 10 ; EXPR_STATEMENT 9 memcpy ( prev , in , AES_BLOCK_SIZE ) ; EXPR 10 memcpy ( prev , in , AES_BLOCK_SIZE ) FUNCTION_CALL 11 memcpy ( prev , in , AES_BLOCK_SIZE ) CALLEE 12 memcpy LEAF_NODE 13 memcpy LEAF_NODE 12 ( ARGUMENT 12 prev FIELD 13 prev LEAF_NODE 14 prev LEAF_NODE 12 , ARGUMENT 12 in FIELD 13 in LEAF_NODE 14 in LEAF_NODE 12 , ARGUMENT 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 iv2 = prev ; EXPR 10 iv2 = prev ASSIGN 11 iv2 = prev LVAL 12 iv2 FIELD 13 iv2 LEAF_NODE 14 iv2 ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 prev FIELD 13 prev LEAF_NODE 14 prev LEAF_NODE 10 ; EXPR_STATEMENT 9 len -= AES_BLOCK_SIZE ; EXPR 10 len -= AES_BLOCK_SIZE ASSIGN 11 len -= AES_BLOCK_SIZE LVAL 12 len FIELD 13 len LEAF_NODE 14 len ASSIGN_OP 12 -= LEAF_NODE 13 -= RVAL 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 10 ; EXPR_STATEMENT 9 in += AES_BLOCK_SIZE ; EXPR 10 in += AES_BLOCK_SIZE ASSIGN 11 in += AES_BLOCK_SIZE LVAL 12 in FIELD 13 in LEAF_NODE 14 in ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 10 ; EXPR_STATEMENT 9 out += AES_BLOCK_SIZE ; EXPR 10 out += AES_BLOCK_SIZE ASSIGN 11 out += AES_BLOCK_SIZE LVAL 12 out FIELD 13 out LEAF_NODE 14 out ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 iv = ivec + AES_BLOCK_SIZE * 2 ; EXPR 7 iv = ivec + AES_BLOCK_SIZE * 2 ASSIGN 8 iv = ivec + AES_BLOCK_SIZE * 2 LVAL 9 iv FIELD 10 iv LEAF_NODE 11 iv ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ivec + AES_BLOCK_SIZE * 2 FIELD 10 ivec LEAF_NODE 11 ivec LEAF_NODE 10 + FIELD 10 AES_BLOCK_SIZE LEAF_NODE 11 AES_BLOCK_SIZE LEAF_NODE 10 * FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 7 ; EXPR_STATEMENT 6 iv2 = ivec + AES_BLOCK_SIZE * 3 ; EXPR 7 iv2 = ivec + AES_BLOCK_SIZE * 3 ASSIGN 8 iv2 = ivec + AES_BLOCK_SIZE * 3 LVAL 9 iv2 FIELD 10 iv2 LEAF_NODE 11 iv2 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ivec + AES_BLOCK_SIZE * 3 FIELD 10 ivec LEAF_NODE 11 ivec LEAF_NODE 10 + FIELD 10 AES_BLOCK_SIZE LEAF_NODE 11 AES_BLOCK_SIZE LEAF_NODE 10 * FIELD 10 3 LEAF_NODE 11 3 LEAF_NODE 7 ; EXPR_STATEMENT 6 len = length ; EXPR 7 len = length ASSIGN 8 len = length LVAL 9 len FIELD 10 len LEAF_NODE 11 len ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 length FIELD 10 length LEAF_NODE 11 length LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 while LEAF_NODE 8 while LEAF_NODE 7 ( CONDITION 7 len >= AES_BLOCK_SIZE EXPR 8 len >= AES_BLOCK_SIZE FIELD 9 len LEAF_NODE 10 len REL_OPERATOR 9 >= LEAF_NODE 10 >= FIELD 9 AES_BLOCK_SIZE LEAF_NODE 10 AES_BLOCK_SIZE LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 out -= AES_BLOCK_SIZE ; EXPR 10 out -= AES_BLOCK_SIZE ASSIGN 11 out -= AES_BLOCK_SIZE LVAL 12 out FIELD 13 out LEAF_NODE 14 out ASSIGN_OP 12 -= LEAF_NODE 13 -= RVAL 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 10 ; EXPR_STATEMENT 9 memcpy ( tmp , out , AES_BLOCK_SIZE ) ; EXPR 10 memcpy ( tmp , out , AES_BLOCK_SIZE ) FUNCTION_CALL 11 memcpy ( tmp , out , AES_BLOCK_SIZE ) CALLEE 12 memcpy LEAF_NODE 13 memcpy LEAF_NODE 12 ( ARGUMENT 12 tmp FIELD 13 tmp LEAF_NODE 14 tmp LEAF_NODE 12 , ARGUMENT 12 out FIELD 13 out LEAF_NODE 14 out LEAF_NODE 12 , ARGUMENT 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 12 ) LEAF_NODE 10 ; ITERATION 9 KEYWORD 10 for LEAF_NODE 11 for LEAF_NODE 10 ( FOR_INIT 10 n = 0 ; EXPR 11 n = 0 ASSIGN 12 n = 0 LVAL 13 n FIELD 14 n LEAF_NODE 15 n ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; CONDITION 10 n < AES_BLOCK_SIZE EXPR 11 n < AES_BLOCK_SIZE FIELD 12 n LEAF_NODE 13 n REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 AES_BLOCK_SIZE LEAF_NODE 13 AES_BLOCK_SIZE LEAF_NODE 10 ; FOR_EXPR 10 ++ n EXPR 11 ++ n LEAF_NODE 12 ++ FIELD 12 n LEAF_NODE 13 n LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 out [ n ] ^= iv [ n ] ; EXPR 12 out [ n ] ^= iv [ n ] ASSIGN 13 out [ n ] ^= iv [ n ] LVAL 14 out [ n ] FIELD 15 out [ n ] LEAF_NODE 16 out LEAF_NODE 16 [ EXPR 16 n FIELD 17 n LEAF_NODE 18 n LEAF_NODE 16 ] ASSIGN_OP 14 ^= LEAF_NODE 15 ^= RVAL 14 iv [ n ] FIELD 15 iv [ n ] LEAF_NODE 16 iv LEAF_NODE 16 [ EXPR 16 n FIELD 17 n LEAF_NODE 18 n LEAF_NODE 16 ] LEAF_NODE 12 ; EXPR_STATEMENT 9 AES_encrypt ( out , out , key ) ; EXPR 10 AES_encrypt ( out , out , key ) FUNCTION_CALL 11 AES_encrypt ( out , out , key ) CALLEE 12 AES_encrypt LEAF_NODE 13 AES_encrypt LEAF_NODE 12 ( ARGUMENT 12 out FIELD 13 out LEAF_NODE 14 out LEAF_NODE 12 , ARGUMENT 12 out FIELD 13 out LEAF_NODE 14 out LEAF_NODE 12 , ARGUMENT 12 key FIELD 13 key LEAF_NODE 14 key LEAF_NODE 12 ) LEAF_NODE 10 ; ITERATION 9 KEYWORD 10 for LEAF_NODE 11 for LEAF_NODE 10 ( FOR_INIT 10 n = 0 ; EXPR 11 n = 0 ASSIGN 12 n = 0 LVAL 13 n FIELD 14 n LEAF_NODE 15 n ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; CONDITION 10 n < AES_BLOCK_SIZE EXPR 11 n < AES_BLOCK_SIZE FIELD 12 n LEAF_NODE 13 n REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 AES_BLOCK_SIZE LEAF_NODE 13 AES_BLOCK_SIZE LEAF_NODE 10 ; FOR_EXPR 10 ++ n EXPR 11 ++ n LEAF_NODE 12 ++ FIELD 12 n LEAF_NODE 13 n LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 out [ n ] ^= iv2 [ n ] ; EXPR 12 out [ n ] ^= iv2 [ n ] ASSIGN 13 out [ n ] ^= iv2 [ n ] LVAL 14 out [ n ] FIELD 15 out [ n ] LEAF_NODE 16 out LEAF_NODE 16 [ EXPR 16 n FIELD 17 n LEAF_NODE 18 n LEAF_NODE 16 ] ASSIGN_OP 14 ^= LEAF_NODE 15 ^= RVAL 14 iv2 [ n ] FIELD 15 iv2 [ n ] LEAF_NODE 16 iv2 LEAF_NODE 16 [ EXPR 16 n FIELD 17 n LEAF_NODE 18 n LEAF_NODE 16 ] LEAF_NODE 12 ; EXPR_STATEMENT 9 iv = out ; EXPR 10 iv = out ASSIGN 11 iv = out LVAL 12 iv FIELD 13 iv LEAF_NODE 14 iv ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 out FIELD 13 out LEAF_NODE 14 out LEAF_NODE 10 ; EXPR_STATEMENT 9 memcpy ( prev , tmp , AES_BLOCK_SIZE ) ; EXPR 10 memcpy ( prev , tmp , AES_BLOCK_SIZE ) FUNCTION_CALL 11 memcpy ( prev , tmp , AES_BLOCK_SIZE ) CALLEE 12 memcpy LEAF_NODE 13 memcpy LEAF_NODE 12 ( ARGUMENT 12 prev FIELD 13 prev LEAF_NODE 14 prev LEAF_NODE 12 , ARGUMENT 12 tmp FIELD 13 tmp LEAF_NODE 14 tmp LEAF_NODE 12 , ARGUMENT 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 iv2 = prev ; EXPR 10 iv2 = prev ASSIGN 11 iv2 = prev LVAL 12 iv2 FIELD 13 iv2 LEAF_NODE 14 iv2 ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 prev FIELD 13 prev LEAF_NODE 14 prev LEAF_NODE 10 ; EXPR_STATEMENT 9 len -= AES_BLOCK_SIZE ; EXPR 10 len -= AES_BLOCK_SIZE ASSIGN 11 len -= AES_BLOCK_SIZE LVAL 12 len FIELD 13 len LEAF_NODE 14 len ASSIGN_OP 12 -= LEAF_NODE 13 -= RVAL 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 iv = ivec + AES_BLOCK_SIZE * 2 ; EXPR 7 iv = ivec + AES_BLOCK_SIZE * 2 ASSIGN 8 iv = ivec + AES_BLOCK_SIZE * 2 LVAL 9 iv FIELD 10 iv LEAF_NODE 11 iv ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ivec + AES_BLOCK_SIZE * 2 FIELD 10 ivec LEAF_NODE 11 ivec LEAF_NODE 10 + FIELD 10 AES_BLOCK_SIZE LEAF_NODE 11 AES_BLOCK_SIZE LEAF_NODE 10 * FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 7 ; EXPR_STATEMENT 6 iv2 = ivec + AES_BLOCK_SIZE * 3 ; EXPR 7 iv2 = ivec + AES_BLOCK_SIZE * 3 ASSIGN 8 iv2 = ivec + AES_BLOCK_SIZE * 3 LVAL 9 iv2 FIELD 10 iv2 LEAF_NODE 11 iv2 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ivec + AES_BLOCK_SIZE * 3 FIELD 10 ivec LEAF_NODE 11 ivec LEAF_NODE 10 + FIELD 10 AES_BLOCK_SIZE LEAF_NODE 11 AES_BLOCK_SIZE LEAF_NODE 10 * FIELD 10 3 LEAF_NODE 11 3 LEAF_NODE 7 ; EXPR_STATEMENT 6 in += length ; EXPR 7 in += length ASSIGN 8 in += length LVAL 9 in FIELD 10 in LEAF_NODE 11 in ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 length FIELD 10 length LEAF_NODE 11 length LEAF_NODE 7 ; EXPR_STATEMENT 6 out += length ; EXPR 7 out += length ASSIGN 8 out += length LVAL 9 out FIELD 10 out LEAF_NODE 11 out ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 length FIELD 10 length LEAF_NODE 11 length LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 while LEAF_NODE 8 while LEAF_NODE 7 ( CONDITION 7 len >= AES_BLOCK_SIZE EXPR 8 len >= AES_BLOCK_SIZE FIELD 9 len LEAF_NODE 10 len REL_OPERATOR 9 >= LEAF_NODE 10 >= FIELD 9 AES_BLOCK_SIZE LEAF_NODE 10 AES_BLOCK_SIZE LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 in -= AES_BLOCK_SIZE ; EXPR 10 in -= AES_BLOCK_SIZE ASSIGN 11 in -= AES_BLOCK_SIZE LVAL 12 in FIELD 13 in LEAF_NODE 14 in ASSIGN_OP 12 -= LEAF_NODE 13 -= RVAL 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 10 ; EXPR_STATEMENT 9 out -= AES_BLOCK_SIZE ; EXPR 10 out -= AES_BLOCK_SIZE ASSIGN 11 out -= AES_BLOCK_SIZE LVAL 12 out FIELD 13 out LEAF_NODE 14 out ASSIGN_OP 12 -= LEAF_NODE 13 -= RVAL 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 10 ; EXPR_STATEMENT 9 memcpy ( tmp , in , AES_BLOCK_SIZE ) ; EXPR 10 memcpy ( tmp , in , AES_BLOCK_SIZE ) FUNCTION_CALL 11 memcpy ( tmp , in , AES_BLOCK_SIZE ) CALLEE 12 memcpy LEAF_NODE 13 memcpy LEAF_NODE 12 ( ARGUMENT 12 tmp FIELD 13 tmp LEAF_NODE 14 tmp LEAF_NODE 12 , ARGUMENT 12 in FIELD 13 in LEAF_NODE 14 in LEAF_NODE 12 , ARGUMENT 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 memcpy ( tmp2 , in , AES_BLOCK_SIZE ) ; EXPR 10 memcpy ( tmp2 , in , AES_BLOCK_SIZE ) FUNCTION_CALL 11 memcpy ( tmp2 , in , AES_BLOCK_SIZE ) CALLEE 12 memcpy LEAF_NODE 13 memcpy LEAF_NODE 12 ( ARGUMENT 12 tmp2 FIELD 13 tmp2 LEAF_NODE 14 tmp2 LEAF_NODE 12 , ARGUMENT 12 in FIELD 13 in LEAF_NODE 14 in LEAF_NODE 12 , ARGUMENT 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 12 ) LEAF_NODE 10 ; ITERATION 9 KEYWORD 10 for LEAF_NODE 11 for LEAF_NODE 10 ( FOR_INIT 10 n = 0 ; EXPR 11 n = 0 ASSIGN 12 n = 0 LVAL 13 n FIELD 14 n LEAF_NODE 15 n ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; CONDITION 10 n < AES_BLOCK_SIZE EXPR 11 n < AES_BLOCK_SIZE FIELD 12 n LEAF_NODE 13 n REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 AES_BLOCK_SIZE LEAF_NODE 13 AES_BLOCK_SIZE LEAF_NODE 10 ; FOR_EXPR 10 ++ n EXPR 11 ++ n LEAF_NODE 12 ++ FIELD 12 n LEAF_NODE 13 n LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 tmp [ n ] ^= iv2 [ n ] ; EXPR 12 tmp [ n ] ^= iv2 [ n ] ASSIGN 13 tmp [ n ] ^= iv2 [ n ] LVAL 14 tmp [ n ] FIELD 15 tmp [ n ] LEAF_NODE 16 tmp LEAF_NODE 16 [ EXPR 16 n FIELD 17 n LEAF_NODE 18 n LEAF_NODE 16 ] ASSIGN_OP 14 ^= LEAF_NODE 15 ^= RVAL 14 iv2 [ n ] FIELD 15 iv2 [ n ] LEAF_NODE 16 iv2 LEAF_NODE 16 [ EXPR 16 n FIELD 17 n LEAF_NODE 18 n LEAF_NODE 16 ] LEAF_NODE 12 ; EXPR_STATEMENT 9 AES_decrypt ( tmp , out , key ) ; EXPR 10 AES_decrypt ( tmp , out , key ) FUNCTION_CALL 11 AES_decrypt ( tmp , out , key ) CALLEE 12 AES_decrypt LEAF_NODE 13 AES_decrypt LEAF_NODE 12 ( ARGUMENT 12 tmp FIELD 13 tmp LEAF_NODE 14 tmp LEAF_NODE 12 , ARGUMENT 12 out FIELD 13 out LEAF_NODE 14 out LEAF_NODE 12 , ARGUMENT 12 key FIELD 13 key LEAF_NODE 14 key LEAF_NODE 12 ) LEAF_NODE 10 ; ITERATION 9 KEYWORD 10 for LEAF_NODE 11 for LEAF_NODE 10 ( FOR_INIT 10 n = 0 ; EXPR 11 n = 0 ASSIGN 12 n = 0 LVAL 13 n FIELD 14 n LEAF_NODE 15 n ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; CONDITION 10 n < AES_BLOCK_SIZE EXPR 11 n < AES_BLOCK_SIZE FIELD 12 n LEAF_NODE 13 n REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 AES_BLOCK_SIZE LEAF_NODE 13 AES_BLOCK_SIZE LEAF_NODE 10 ; FOR_EXPR 10 ++ n EXPR 11 ++ n LEAF_NODE 12 ++ FIELD 12 n LEAF_NODE 13 n LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 out [ n ] ^= iv [ n ] ; EXPR 12 out [ n ] ^= iv [ n ] ASSIGN 13 out [ n ] ^= iv [ n ] LVAL 14 out [ n ] FIELD 15 out [ n ] LEAF_NODE 16 out LEAF_NODE 16 [ EXPR 16 n FIELD 17 n LEAF_NODE 18 n LEAF_NODE 16 ] ASSIGN_OP 14 ^= LEAF_NODE 15 ^= RVAL 14 iv [ n ] FIELD 15 iv [ n ] LEAF_NODE 16 iv LEAF_NODE 16 [ EXPR 16 n FIELD 17 n LEAF_NODE 18 n LEAF_NODE 16 ] LEAF_NODE 12 ; EXPR_STATEMENT 9 memcpy ( tmp3 , tmp2 , AES_BLOCK_SIZE ) ; EXPR 10 memcpy ( tmp3 , tmp2 , AES_BLOCK_SIZE ) FUNCTION_CALL 11 memcpy ( tmp3 , tmp2 , AES_BLOCK_SIZE ) CALLEE 12 memcpy LEAF_NODE 13 memcpy LEAF_NODE 12 ( ARGUMENT 12 tmp3 FIELD 13 tmp3 LEAF_NODE 14 tmp3 LEAF_NODE 12 , ARGUMENT 12 tmp2 FIELD 13 tmp2 LEAF_NODE 14 tmp2 LEAF_NODE 12 , ARGUMENT 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 iv = tmp3 ; EXPR 10 iv = tmp3 ASSIGN 11 iv = tmp3 LVAL 12 iv FIELD 13 iv LEAF_NODE 14 iv ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 tmp3 FIELD 13 tmp3 LEAF_NODE 14 tmp3 LEAF_NODE 10 ; EXPR_STATEMENT 9 iv2 = out ; EXPR 10 iv2 = out ASSIGN 11 iv2 = out LVAL 12 iv2 FIELD 13 iv2 LEAF_NODE 14 iv2 ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 out FIELD 13 out LEAF_NODE 14 out LEAF_NODE 10 ; EXPR_STATEMENT 9 len -= AES_BLOCK_SIZE ; EXPR 10 len -= AES_BLOCK_SIZE ASSIGN 11 len -= AES_BLOCK_SIZE LVAL 12 len FIELD 13 len LEAF_NODE 14 len ASSIGN_OP 12 -= LEAF_NODE 13 -= RVAL 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 iv = ivec ; EXPR 7 iv = ivec ASSIGN 8 iv = ivec LVAL 9 iv FIELD 10 iv LEAF_NODE 11 iv ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ivec FIELD 10 ivec LEAF_NODE 11 ivec LEAF_NODE 7 ; EXPR_STATEMENT 6 iv2 = ivec + AES_BLOCK_SIZE ; EXPR 7 iv2 = ivec + AES_BLOCK_SIZE ASSIGN 8 iv2 = ivec + AES_BLOCK_SIZE LVAL 9 iv2 FIELD 10 iv2 LEAF_NODE 11 iv2 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ivec + AES_BLOCK_SIZE FIELD 10 ivec LEAF_NODE 11 ivec LEAF_NODE 10 + FIELD 10 AES_BLOCK_SIZE LEAF_NODE 11 AES_BLOCK_SIZE LEAF_NODE 7 ; EXPR_STATEMENT 6 len = length ; EXPR 7 len = length ASSIGN 8 len = length LVAL 9 len FIELD 10 len LEAF_NODE 11 len ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 length FIELD 10 length LEAF_NODE 11 length LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 while LEAF_NODE 8 while LEAF_NODE 7 ( CONDITION 7 len >= AES_BLOCK_SIZE EXPR 8 len >= AES_BLOCK_SIZE FIELD 9 len LEAF_NODE 10 len REL_OPERATOR 9 >= LEAF_NODE 10 >= FIELD 9 AES_BLOCK_SIZE LEAF_NODE 10 AES_BLOCK_SIZE LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 memcpy ( tmp , out , AES_BLOCK_SIZE ) ; EXPR 10 memcpy ( tmp , out , AES_BLOCK_SIZE ) FUNCTION_CALL 11 memcpy ( tmp , out , AES_BLOCK_SIZE ) CALLEE 12 memcpy LEAF_NODE 13 memcpy LEAF_NODE 12 ( ARGUMENT 12 tmp FIELD 13 tmp LEAF_NODE 14 tmp LEAF_NODE 12 , ARGUMENT 12 out FIELD 13 out LEAF_NODE 14 out LEAF_NODE 12 , ARGUMENT 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 memcpy ( tmp2 , out , AES_BLOCK_SIZE ) ; EXPR 10 memcpy ( tmp2 , out , AES_BLOCK_SIZE ) FUNCTION_CALL 11 memcpy ( tmp2 , out , AES_BLOCK_SIZE ) CALLEE 12 memcpy LEAF_NODE 13 memcpy LEAF_NODE 12 ( ARGUMENT 12 tmp2 FIELD 13 tmp2 LEAF_NODE 14 tmp2 LEAF_NODE 12 , ARGUMENT 12 out FIELD 13 out LEAF_NODE 14 out LEAF_NODE 12 , ARGUMENT 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 12 ) LEAF_NODE 10 ; ITERATION 9 KEYWORD 10 for LEAF_NODE 11 for LEAF_NODE 10 ( FOR_INIT 10 n = 0 ; EXPR 11 n = 0 ASSIGN 12 n = 0 LVAL 13 n FIELD 14 n LEAF_NODE 15 n ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; CONDITION 10 n < AES_BLOCK_SIZE EXPR 11 n < AES_BLOCK_SIZE FIELD 12 n LEAF_NODE 13 n REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 AES_BLOCK_SIZE LEAF_NODE 13 AES_BLOCK_SIZE LEAF_NODE 10 ; FOR_EXPR 10 ++ n EXPR 11 ++ n LEAF_NODE 12 ++ FIELD 12 n LEAF_NODE 13 n LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 tmp [ n ] ^= iv2 [ n ] ; EXPR 12 tmp [ n ] ^= iv2 [ n ] ASSIGN 13 tmp [ n ] ^= iv2 [ n ] LVAL 14 tmp [ n ] FIELD 15 tmp [ n ] LEAF_NODE 16 tmp LEAF_NODE 16 [ EXPR 16 n FIELD 17 n LEAF_NODE 18 n LEAF_NODE 16 ] ASSIGN_OP 14 ^= LEAF_NODE 15 ^= RVAL 14 iv2 [ n ] FIELD 15 iv2 [ n ] LEAF_NODE 16 iv2 LEAF_NODE 16 [ EXPR 16 n FIELD 17 n LEAF_NODE 18 n LEAF_NODE 16 ] LEAF_NODE 12 ; EXPR_STATEMENT 9 AES_decrypt ( tmp , out , key ) ; EXPR 10 AES_decrypt ( tmp , out , key ) FUNCTION_CALL 11 AES_decrypt ( tmp , out , key ) CALLEE 12 AES_decrypt LEAF_NODE 13 AES_decrypt LEAF_NODE 12 ( ARGUMENT 12 tmp FIELD 13 tmp LEAF_NODE 14 tmp LEAF_NODE 12 , ARGUMENT 12 out FIELD 13 out LEAF_NODE 14 out LEAF_NODE 12 , ARGUMENT 12 key FIELD 13 key LEAF_NODE 14 key LEAF_NODE 12 ) LEAF_NODE 10 ; ITERATION 9 KEYWORD 10 for LEAF_NODE 11 for LEAF_NODE 10 ( FOR_INIT 10 n = 0 ; EXPR 11 n = 0 ASSIGN 12 n = 0 LVAL 13 n FIELD 14 n LEAF_NODE 15 n ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 11 ; CONDITION 10 n < AES_BLOCK_SIZE EXPR 11 n < AES_BLOCK_SIZE FIELD 12 n LEAF_NODE 13 n REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 AES_BLOCK_SIZE LEAF_NODE 13 AES_BLOCK_SIZE LEAF_NODE 10 ; FOR_EXPR 10 ++ n EXPR 11 ++ n LEAF_NODE 12 ++ FIELD 12 n LEAF_NODE 13 n LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 out [ n ] ^= iv [ n ] ; EXPR 12 out [ n ] ^= iv [ n ] ASSIGN 13 out [ n ] ^= iv [ n ] LVAL 14 out [ n ] FIELD 15 out [ n ] LEAF_NODE 16 out LEAF_NODE 16 [ EXPR 16 n FIELD 17 n LEAF_NODE 18 n LEAF_NODE 16 ] ASSIGN_OP 14 ^= LEAF_NODE 15 ^= RVAL 14 iv [ n ] FIELD 15 iv [ n ] LEAF_NODE 16 iv LEAF_NODE 16 [ EXPR 16 n FIELD 17 n LEAF_NODE 18 n LEAF_NODE 16 ] LEAF_NODE 12 ; EXPR_STATEMENT 9 memcpy ( tmp3 , tmp2 , AES_BLOCK_SIZE ) ; EXPR 10 memcpy ( tmp3 , tmp2 , AES_BLOCK_SIZE ) FUNCTION_CALL 11 memcpy ( tmp3 , tmp2 , AES_BLOCK_SIZE ) CALLEE 12 memcpy LEAF_NODE 13 memcpy LEAF_NODE 12 ( ARGUMENT 12 tmp3 FIELD 13 tmp3 LEAF_NODE 14 tmp3 LEAF_NODE 12 , ARGUMENT 12 tmp2 FIELD 13 tmp2 LEAF_NODE 14 tmp2 LEAF_NODE 12 , ARGUMENT 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 iv = tmp3 ; EXPR 10 iv = tmp3 ASSIGN 11 iv = tmp3 LVAL 12 iv FIELD 13 iv LEAF_NODE 14 iv ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 tmp3 FIELD 13 tmp3 LEAF_NODE 14 tmp3 LEAF_NODE 10 ; EXPR_STATEMENT 9 iv2 = out ; EXPR 10 iv2 = out ASSIGN 11 iv2 = out LVAL 12 iv2 FIELD 13 iv2 LEAF_NODE 14 iv2 ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 out FIELD 13 out LEAF_NODE 14 out LEAF_NODE 10 ; EXPR_STATEMENT 9 len -= AES_BLOCK_SIZE ; EXPR 10 len -= AES_BLOCK_SIZE ASSIGN 11 len -= AES_BLOCK_SIZE LVAL 12 len FIELD 13 len LEAF_NODE 14 len ASSIGN_OP 12 -= LEAF_NODE 13 -= RVAL 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 10 ; EXPR_STATEMENT 9 in += AES_BLOCK_SIZE ; EXPR 10 in += AES_BLOCK_SIZE ASSIGN 11 in += AES_BLOCK_SIZE LVAL 12 in FIELD 13 in LEAF_NODE 14 in ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 10 ; EXPR_STATEMENT 9 out += AES_BLOCK_SIZE ; EXPR 10 out += AES_BLOCK_SIZE ASSIGN 11 out += AES_BLOCK_SIZE LVAL 12 out FIELD 13 out LEAF_NODE 14 out ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 AES_BLOCK_SIZE FIELD 13 AES_BLOCK_SIZE LEAF_NODE 14 AES_BLOCK_SIZE LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } LEAF_NODE 2 }", "idx": 179, "project": "openssl_ast_normal_function_test_72", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 write_ledword LEAF_NODE 3 write_ledword PARAMETER_LIST 2 ( unsigned char * * out , unsigned int dw ) LEAF_NODE 3 ( PARAMETER_DECL 3 unsigned char * * out TYPE 4 unsigned char * * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 unsigned int dw TYPE 4 unsigned int TYPE_NAME 5 unsigned int LEAF_NODE 6 unsigned LEAF_NODE 6 int NAME 4 dw LEAF_NODE 5 dw LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned char * p ; p = * out ; VAR_DECL 4 unsigned char * p ; p = * out TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 5 ; INIT 5 p = * out ASSIGN 6 p = * out LVAL 7 p NAME 8 p LEAF_NODE 9 p ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * out UNARY_EXPR 8 * out UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 out LEAF_NODE 10 out LEAF_NODE 4 ; EXPR_STATEMENT 3 * p ++ = dw & 0xff ; EXPR 4 * p ++ = dw & 0xff ASSIGN 5 * p ++ = dw & 0xff LVAL 6 * p ++ UNARY_EXPR 7 * p ++ UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 p ++ LEAF_NODE 9 p LEAF_NODE 9 ++ ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 dw & 0xff FIELD 7 dw LEAF_NODE 8 dw LEAF_NODE 7 & FIELD 7 0xff LEAF_NODE 8 0xff LEAF_NODE 4 ; EXPR_STATEMENT 3 * p ++ = ( dw >> 8 ) & 0xff ; EXPR 4 * p ++ = ( dw >> 8 ) & 0xff ASSIGN 5 * p ++ = ( dw >> 8 ) & 0xff LVAL 6 * p ++ UNARY_EXPR 7 * p ++ UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 p ++ LEAF_NODE 9 p LEAF_NODE 9 ++ ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( dw >> 8 ) & 0xff LEAF_NODE 7 ( FIELD 7 dw LEAF_NODE 8 dw LEAF_NODE 7 >> FIELD 7 8 LEAF_NODE 8 8 LEAF_NODE 7 ) LEAF_NODE 7 & FIELD 7 0xff LEAF_NODE 8 0xff LEAF_NODE 4 ; EXPR_STATEMENT 3 * p ++ = ( dw >> 16 ) & 0xff ; EXPR 4 * p ++ = ( dw >> 16 ) & 0xff ASSIGN 5 * p ++ = ( dw >> 16 ) & 0xff LVAL 6 * p ++ UNARY_EXPR 7 * p ++ UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 p ++ LEAF_NODE 9 p LEAF_NODE 9 ++ ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( dw >> 16 ) & 0xff LEAF_NODE 7 ( FIELD 7 dw LEAF_NODE 8 dw LEAF_NODE 7 >> FIELD 7 16 LEAF_NODE 8 16 LEAF_NODE 7 ) LEAF_NODE 7 & FIELD 7 0xff LEAF_NODE 8 0xff LEAF_NODE 4 ; EXPR_STATEMENT 3 * p ++ = ( dw >> 24 ) & 0xff ; EXPR 4 * p ++ = ( dw >> 24 ) & 0xff ASSIGN 5 * p ++ = ( dw >> 24 ) & 0xff LVAL 6 * p ++ UNARY_EXPR 7 * p ++ UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 p ++ LEAF_NODE 9 p LEAF_NODE 9 ++ ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( dw >> 24 ) & 0xff LEAF_NODE 7 ( FIELD 7 dw LEAF_NODE 8 dw LEAF_NODE 7 >> FIELD 7 24 LEAF_NODE 8 24 LEAF_NODE 7 ) LEAF_NODE 7 & FIELD 7 0xff LEAF_NODE 8 0xff LEAF_NODE 4 ; EXPR_STATEMENT 3 * out = p ; EXPR 4 * out = p ASSIGN 5 * out = p LVAL 6 * out UNARY_EXPR 7 * out UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 out LEAF_NODE 9 out ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 p FIELD 7 p LEAF_NODE 8 p LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 180, "project": "openssl_ast_normal_function_test_78", "target": 0}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } ; CLASS_DEF 2 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } CLASS_DEF 3 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } LEAF_NODE 4 struct CLASS_NAME 4 bio_addrinfo_st LEAF_NODE 5 bio_addrinfo_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; SIMPLE_DECL 5 int bai_family ; VAR_DECL 6 int bai_family TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_family LEAF_NODE 8 bai_family LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_socktype ; VAR_DECL 6 int bai_socktype TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_socktype LEAF_NODE 8 bai_socktype LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_protocol ; VAR_DECL 6 int bai_protocol TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_protocol LEAF_NODE 8 bai_protocol LEAF_NODE 6 ; SIMPLE_DECL 5 size_t bai_addrlen ; VAR_DECL 6 size_t bai_addrlen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 bai_addrlen LEAF_NODE 8 bai_addrlen LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr * bai_addr ; VAR_DECL 6 struct sockaddr * bai_addr TYPE 7 struct sockaddr * TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr POINTER 8 * LEAF_NODE 9 * NAME 7 bai_addr LEAF_NODE 8 bai_addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct bio_addrinfo_st * bai_next ; VAR_DECL 6 struct bio_addrinfo_st * bai_next TYPE 7 struct bio_addrinfo_st * TYPE_NAME 8 struct bio_addrinfo_st LEAF_NODE 9 struct LEAF_NODE 9 bio_addrinfo_st POINTER 8 * LEAF_NODE 9 * NAME 7 bai_next LEAF_NODE 8 bai_next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BIO_ADDRINFO ; VAR_DECL 2 struct bio_addrinfo_st BIO_ADDRINFO TYPE 3 struct bio_addrinfo_st TYPE_NAME 4 struct bio_addrinfo_st LEAF_NODE 5 struct LEAF_NODE 5 bio_addrinfo_st NAME 3 BIO_ADDRINFO LEAF_NODE 4 BIO_ADDRINFO LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t socklen_t ; VAR_DECL 2 uint32_t socklen_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 socklen_t LEAF_NODE 4 socklen_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } ; CLASS_DEF 2 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } CLASS_DEF 3 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } LEAF_NODE 4 enum CLASS_NAME 4 BIO_hostserv_priorities LEAF_NODE 5 BIO_hostserv_priorities LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV LEAF_NODE 5 BIO_PARSE_PRIO_HOST LEAF_NODE 5 , LEAF_NODE 5 BIO_PARSE_PRIO_SERV LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } ; CLASS_DEF 2 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } CLASS_DEF 3 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } LEAF_NODE 4 enum CLASS_NAME 4 BIO_lookup_type LEAF_NODE 5 BIO_lookup_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER LEAF_NODE 5 BIO_LOOKUP_CLIENT LEAF_NODE 5 , LEAF_NODE 5 BIO_LOOKUP_SERVER LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 BIO_sock_info LEAF_NODE 3 BIO_sock_info PARAMETER_LIST 2 ( int sock , enum BIO_sock_info_type type , union BIO_sock_info_u * info ) LEAF_NODE 3 ( PARAMETER_DECL 3 int sock TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 sock LEAF_NODE 5 sock LEAF_NODE 3 , PARAMETER_DECL 3 enum BIO_sock_info_type type TYPE 4 enum BIO_sock_info_type TYPE_NAME 5 enum BIO_sock_info_type LEAF_NODE 6 enum LEAF_NODE 6 BIO_sock_info_type NAME 4 type LEAF_NODE 5 type LEAF_NODE 3 , PARAMETER_DECL 3 union BIO_sock_info_u * info TYPE 4 union BIO_sock_info_u * TYPE_NAME 5 union BIO_sock_info_u LEAF_NODE 6 union LEAF_NODE 6 BIO_sock_info_u POINTER 5 * LEAF_NODE 6 * NAME 4 info LEAF_NODE 5 info LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 type EXPR 5 type FIELD 6 type LEAF_NODE 7 type LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case BIO_SOCK_INFO_ADDRESS : LEAF_NODE 7 case LEAF_NODE 7 BIO_SOCK_INFO_ADDRESS LEAF_NODE 7 : LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 socklen_t addr_len ; VAR_DECL 8 socklen_t addr_len TYPE 9 socklen_t TYPE_NAME 10 socklen_t LEAF_NODE 11 socklen_t NAME 9 addr_len LEAF_NODE 10 addr_len LEAF_NODE 8 ; SIMPLE_DECL 7 int ret ; ret = 0 ; VAR_DECL 8 int ret ; ret = 0 TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 ret LEAF_NODE 10 ret LEAF_NODE 9 ; INIT 9 ret = 0 ASSIGN 10 ret = 0 LVAL 11 ret NAME 12 ret LEAF_NODE 13 ret ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 8 ; EXPR_STATEMENT 7 addr_len = sizeof ( * info -> addr ) ; EXPR 8 addr_len = sizeof ( * info -> addr ) ASSIGN 9 addr_len = sizeof ( * info -> addr ) LVAL 10 addr_len FIELD 11 addr_len LEAF_NODE 12 addr_len ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 sizeof ( * info -> addr ) FUNCTION_CALL 11 sizeof ( * info -> addr ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 * info -> addr UNARY_EXPR 13 * info -> addr UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 info -> addr LEAF_NODE 15 info LEAF_NODE 15 -> LEAF_NODE 15 addr LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 ret = getsockname ( sock , BIO_ADDR_sockaddr_noconst ( info -> addr ) , & addr_len ) ; EXPR 8 ret = getsockname ( sock , BIO_ADDR_sockaddr_noconst ( info -> addr ) , & addr_len ) ASSIGN 9 ret = getsockname ( sock , BIO_ADDR_sockaddr_noconst ( info -> addr ) , & addr_len ) LVAL 10 ret FIELD 11 ret LEAF_NODE 12 ret ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 getsockname ( sock , BIO_ADDR_sockaddr_noconst ( info -> addr ) , & addr_len ) FUNCTION_CALL 11 getsockname ( sock , BIO_ADDR_sockaddr_noconst ( info -> addr ) , & addr_len ) CALLEE 12 getsockname LEAF_NODE 13 getsockname LEAF_NODE 12 ( ARGUMENT 12 sock FIELD 13 sock LEAF_NODE 14 sock LEAF_NODE 12 , ARGUMENT 12 BIO_ADDR_sockaddr_noconst ( info -> addr ) FUNCTION_CALL 13 BIO_ADDR_sockaddr_noconst ( info -> addr ) CALLEE 14 BIO_ADDR_sockaddr_noconst LEAF_NODE 15 BIO_ADDR_sockaddr_noconst LEAF_NODE 14 ( ARGUMENT 14 info -> addr FIELD 15 info -> addr LEAF_NODE 16 info LEAF_NODE 16 -> LEAF_NODE 16 addr LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 & addr_len UNARY_EXPR 13 & addr_len UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 addr_len LEAF_NODE 15 addr_len LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 ret == - 1 EXPR 9 ret == - 1 FIELD 10 ret LEAF_NODE 11 ret EQ_OPERATOR 10 == LEAF_NODE 11 == UNARY_EXPR 10 - 1 UNARY_OPERATOR 11 - LEAF_NODE 12 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 SYSerr ( SYS_F_GETSOCKNAME , get_last_socket_error ( ) ) ; EXPR 11 SYSerr ( SYS_F_GETSOCKNAME , get_last_socket_error ( ) ) FUNCTION_CALL 12 SYSerr ( SYS_F_GETSOCKNAME , get_last_socket_error ( ) ) CALLEE 13 SYSerr LEAF_NODE 14 SYSerr LEAF_NODE 13 ( ARGUMENT 13 SYS_F_GETSOCKNAME FIELD 14 SYS_F_GETSOCKNAME LEAF_NODE 15 SYS_F_GETSOCKNAME LEAF_NODE 13 , ARGUMENT 13 get_last_socket_error ( ) FUNCTION_CALL 14 get_last_socket_error ( ) CALLEE 15 get_last_socket_error LEAF_NODE 16 get_last_socket_error LEAF_NODE 15 ( LEAF_NODE 15 ) LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 BIOerr ( BIO_F_BIO_SOCK_INFO , BIO_R_GETSOCKNAME_ERROR ) ; EXPR 11 BIOerr ( BIO_F_BIO_SOCK_INFO , BIO_R_GETSOCKNAME_ERROR ) FUNCTION_CALL 12 BIOerr ( BIO_F_BIO_SOCK_INFO , BIO_R_GETSOCKNAME_ERROR ) CALLEE 13 BIOerr LEAF_NODE 14 BIOerr LEAF_NODE 13 ( ARGUMENT 13 BIO_F_BIO_SOCK_INFO FIELD 14 BIO_F_BIO_SOCK_INFO LEAF_NODE 15 BIO_F_BIO_SOCK_INFO LEAF_NODE 13 , ARGUMENT 13 BIO_R_GETSOCKNAME_ERROR FIELD 14 BIO_R_GETSOCKNAME_ERROR LEAF_NODE 15 BIO_R_GETSOCKNAME_ERROR LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 return 0 ; KEYWORD 11 return LEAF_NODE 12 return DESTINATION 11 0 EXPR 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 ( size_t ) addr_len > sizeof ( * info -> addr ) EXPR 9 ( size_t ) addr_len > sizeof ( * info -> addr ) LEAF_NODE 10 ( TYPE_NAME 10 size_t LEAF_NODE 11 size_t LEAF_NODE 10 ) FIELD 10 addr_len LEAF_NODE 11 addr_len REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 sizeof ( * info -> addr ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 * info -> addr UNARY_EXPR 12 * info -> addr UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 info -> addr LEAF_NODE 14 info LEAF_NODE 14 -> LEAF_NODE 14 addr LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 BIOerr ( BIO_F_BIO_SOCK_INFO , BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS ) ; EXPR 11 BIOerr ( BIO_F_BIO_SOCK_INFO , BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS ) FUNCTION_CALL 12 BIOerr ( BIO_F_BIO_SOCK_INFO , BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS ) CALLEE 13 BIOerr LEAF_NODE 14 BIOerr LEAF_NODE 13 ( ARGUMENT 13 BIO_F_BIO_SOCK_INFO FIELD 14 BIO_F_BIO_SOCK_INFO LEAF_NODE 15 BIO_F_BIO_SOCK_INFO LEAF_NODE 13 , ARGUMENT 13 BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS FIELD 14 BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS LEAF_NODE 15 BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 return 0 ; KEYWORD 11 return LEAF_NODE 12 return DESTINATION 11 0 EXPR 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 BIOerr ( BIO_F_BIO_SOCK_INFO , BIO_R_UNKNOWN_INFO_TYPE ) ; EXPR 7 BIOerr ( BIO_F_BIO_SOCK_INFO , BIO_R_UNKNOWN_INFO_TYPE ) FUNCTION_CALL 8 BIOerr ( BIO_F_BIO_SOCK_INFO , BIO_R_UNKNOWN_INFO_TYPE ) CALLEE 9 BIOerr LEAF_NODE 10 BIOerr LEAF_NODE 9 ( ARGUMENT 9 BIO_F_BIO_SOCK_INFO FIELD 10 BIO_F_BIO_SOCK_INFO LEAF_NODE 11 BIO_F_BIO_SOCK_INFO LEAF_NODE 9 , ARGUMENT 9 BIO_R_UNKNOWN_INFO_TYPE FIELD 10 BIO_R_UNKNOWN_INFO_TYPE LEAF_NODE 11 BIO_R_UNKNOWN_INFO_TYPE LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 181, "project": "openssl_ast_normal_function_test_132", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 openssl_init_fork_handlers LEAF_NODE 3 openssl_init_fork_handlers PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 pthread_once ( & fork_once_control , fork_once_func ) == 0 EXPR 5 pthread_once ( & fork_once_control , fork_once_func ) == 0 FUNCTION_CALL 6 pthread_once ( & fork_once_control , fork_once_func ) CALLEE 7 pthread_once LEAF_NODE 8 pthread_once LEAF_NODE 7 ( ARGUMENT 7 & fork_once_control UNARY_EXPR 8 & fork_once_control UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 fork_once_control LEAF_NODE 10 fork_once_control LEAF_NODE 7 , ARGUMENT 7 fork_once_func FIELD 8 fork_once_func LEAF_NODE 9 fork_once_func LEAF_NODE 7 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 1 EXPR 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 6 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 182, "project": "openssl_ast_normal_function_test_112", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 ASN1_OBJECT_free LEAF_NODE 3 ASN1_OBJECT_free PARAMETER_LIST 2 ( ASN1_OBJECT * a ) LEAF_NODE 3 ( PARAMETER_DECL 3 ASN1_OBJECT * a TYPE 4 ASN1_OBJECT * TYPE_NAME 5 ASN1_OBJECT LEAF_NODE 6 ASN1_OBJECT POINTER 5 * LEAF_NODE 6 * NAME 4 a LEAF_NODE 5 a LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 a == NULL EXPR 5 a == NULL FIELD 6 a LEAF_NODE 7 a EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return DESTINATION ; KEYWORD 6 return LEAF_NODE 7 return LEAF_NODE 6 DESTINATION LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 a -> flags & ASN1_OBJECT_FLAG_DYNAMIC_STRINGS EXPR 5 a -> flags & ASN1_OBJECT_FLAG_DYNAMIC_STRINGS FIELD 6 a -> flags LEAF_NODE 7 a LEAF_NODE 7 -> LEAF_NODE 7 flags LEAF_NODE 6 & FIELD 6 ASN1_OBJECT_FLAG_DYNAMIC_STRINGS LEAF_NODE 7 ASN1_OBJECT_FLAG_DYNAMIC_STRINGS LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 * LEAF_NODE 6 const LEAF_NODE 6 checking LEAF_NODE 6 . LEAF_NODE 6 Doing LEAF_NODE 6 this LEAF_NODE 6 on LEAF_NODE 6 a LEAF_NODE 6 \"real\" LEAF_NODE 6 * LEAF_NODE 6 compile LEAF_NODE 6 will LEAF_NODE 6 cause LEAF_NODE 6 memory LEAF_NODE 6 leaks LEAF_NODE 6 * LEAF_NODE 6 / EXPR_STATEMENT 6 OPENSSL_free ( ( void * ) a -> sn ) ; EXPR 7 OPENSSL_free ( ( void * ) a -> sn ) FUNCTION_CALL 8 OPENSSL_free ( ( void * ) a -> sn ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 ( void * ) a -> sn LEAF_NODE 10 ( TYPE_NAME 10 void LEAF_NODE 11 void LEAF_NODE 10 * LEAF_NODE 10 ) FIELD 10 a -> sn LEAF_NODE 11 a LEAF_NODE 11 -> LEAF_NODE 11 sn LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_free ( ( void * ) a -> ln ) ; EXPR 7 OPENSSL_free ( ( void * ) a -> ln ) FUNCTION_CALL 8 OPENSSL_free ( ( void * ) a -> ln ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 ( void * ) a -> ln LEAF_NODE 10 ( TYPE_NAME 10 void LEAF_NODE 11 void LEAF_NODE 10 * LEAF_NODE 10 ) FIELD 10 a -> ln LEAF_NODE 11 a LEAF_NODE 11 -> LEAF_NODE 11 ln LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 a -> sn = a -> ln = NULL ; EXPR 7 a -> sn = a -> ln = NULL ASSIGN 8 a -> sn = a -> ln = NULL LVAL 9 a -> sn FIELD 10 a -> sn LEAF_NODE 11 a LEAF_NODE 11 -> LEAF_NODE 11 sn ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 a -> ln = NULL ASSIGN 10 a -> ln = NULL LVAL 11 a -> ln FIELD 12 a -> ln LEAF_NODE 13 a LEAF_NODE 13 -> LEAF_NODE 13 ln ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 a -> flags & ASN1_OBJECT_FLAG_DYNAMIC_DATA EXPR 5 a -> flags & ASN1_OBJECT_FLAG_DYNAMIC_DATA FIELD 6 a -> flags LEAF_NODE 7 a LEAF_NODE 7 -> LEAF_NODE 7 flags LEAF_NODE 6 & FIELD 6 ASN1_OBJECT_FLAG_DYNAMIC_DATA LEAF_NODE 7 ASN1_OBJECT_FLAG_DYNAMIC_DATA LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 OPENSSL_free ( ( void * ) a -> data ) ; EXPR 7 OPENSSL_free ( ( void * ) a -> data ) FUNCTION_CALL 8 OPENSSL_free ( ( void * ) a -> data ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 ( void * ) a -> data LEAF_NODE 10 ( TYPE_NAME 10 void LEAF_NODE 11 void LEAF_NODE 10 * LEAF_NODE 10 ) FIELD 10 a -> data LEAF_NODE 11 a LEAF_NODE 11 -> LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 a -> data = NULL ; EXPR 7 a -> data = NULL ASSIGN 8 a -> data = NULL LVAL 9 a -> data FIELD 10 a -> data LEAF_NODE 11 a LEAF_NODE 11 -> LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; EXPR_STATEMENT 6 a -> length = 0 ; EXPR 7 a -> length = 0 ASSIGN 8 a -> length = 0 LVAL 9 a -> length FIELD 10 a -> length LEAF_NODE 11 a LEAF_NODE 11 -> LEAF_NODE 11 length ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 a -> flags & ASN1_OBJECT_FLAG_DYNAMIC EXPR 5 a -> flags & ASN1_OBJECT_FLAG_DYNAMIC FIELD 6 a -> flags LEAF_NODE 7 a LEAF_NODE 7 -> LEAF_NODE 7 flags LEAF_NODE 6 & FIELD 6 ASN1_OBJECT_FLAG_DYNAMIC LEAF_NODE 7 ASN1_OBJECT_FLAG_DYNAMIC LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 OPENSSL_free ( a ) ; EXPR 6 OPENSSL_free ( a ) FUNCTION_CALL 7 OPENSSL_free ( a ) CALLEE 8 OPENSSL_free LEAF_NODE 9 OPENSSL_free LEAF_NODE 8 ( ARGUMENT 8 a FIELD 9 a LEAF_NODE 10 a LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 2 }", "idx": 183, "project": "openssl_ast_normal_function_test_27", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 UTF8_getc LEAF_NODE 3 UTF8_getc PARAMETER_LIST 2 ( const unsigned char * str , int len , unsigned long * val ) LEAF_NODE 3 ( PARAMETER_DECL 3 const unsigned char * str TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 str LEAF_NODE 5 str LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 , PARAMETER_DECL 3 unsigned long * val TYPE 4 unsigned long * TYPE_NAME 5 unsigned long LEAF_NODE 6 unsigned LEAF_NODE 6 long POINTER 5 * LEAF_NODE 6 * NAME 4 val LEAF_NODE 5 val LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 const unsigned char * p ; VAR_DECL 4 const unsigned char * p TYPE 5 const unsigned char * TYPE_NAME 6 const unsigned char LEAF_NODE 7 const LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned long value ; VAR_DECL 4 unsigned long value TYPE 5 unsigned long TYPE_NAME 6 unsigned long LEAF_NODE 7 unsigned LEAF_NODE 7 long NAME 5 value LEAF_NODE 6 value LEAF_NODE 4 ; SIMPLE_DECL 3 int ret ; VAR_DECL 4 int ret TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 len <= 0 EXPR 5 len <= 0 FIELD 6 len LEAF_NODE 7 len REL_OPERATOR 6 <= LEAF_NODE 7 <= FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; EXPR_STATEMENT 3 p = str ; EXPR 4 p = str ASSIGN 5 p = str LVAL 6 p FIELD 7 p LEAF_NODE 8 p ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 str FIELD 7 str LEAF_NODE 8 str LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( * p & 0x80 ) == 0 EXPR 5 ( * p & 0x80 ) == 0 LEAF_NODE 6 ( UNARY_EXPR 6 * p UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 p LEAF_NODE 8 p LEAF_NODE 6 & FIELD 6 0x80 LEAF_NODE 7 0x80 LEAF_NODE 6 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 value = * p ++ & 0x7f ; EXPR 7 value = * p ++ & 0x7f ASSIGN 8 value = * p ++ & 0x7f LVAL 9 value FIELD 10 value LEAF_NODE 11 value ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 * p ++ & 0x7f UNARY_EXPR 10 * p ++ UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 p ++ LEAF_NODE 12 p LEAF_NODE 12 ++ LEAF_NODE 10 & FIELD 10 0x7f LEAF_NODE 11 0x7f LEAF_NODE 7 ; EXPR_STATEMENT 6 ret = 1 ; EXPR 7 ret = 1 ASSIGN 8 ret = 1 LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ( * p & 0xe0 ) == 0xc0 EXPR 7 ( * p & 0xe0 ) == 0xc0 LEAF_NODE 8 ( UNARY_EXPR 8 * p UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 p LEAF_NODE 10 p LEAF_NODE 8 & FIELD 8 0xe0 LEAF_NODE 9 0xe0 LEAF_NODE 8 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 0xc0 LEAF_NODE 9 0xc0 LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 len < 2 EXPR 10 len < 2 FIELD 11 len LEAF_NODE 12 len REL_OPERATOR 11 < LEAF_NODE 12 < FIELD 11 2 LEAF_NODE 12 2 LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 return - 1 ; KEYWORD 11 return LEAF_NODE 12 return DESTINATION 11 - 1 EXPR 12 - 1 UNARY_EXPR 13 - 1 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 11 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ( p [ 1 ] & 0xc0 ) != 0x80 EXPR 10 ( p [ 1 ] & 0xc0 ) != 0x80 LEAF_NODE 11 ( FIELD 11 p [ 1 ] LEAF_NODE 12 p LEAF_NODE 12 [ EXPR 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ] LEAF_NODE 11 & FIELD 11 0xc0 LEAF_NODE 12 0xc0 LEAF_NODE 11 ) EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 0x80 LEAF_NODE 12 0x80 LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 return - 3 ; KEYWORD 11 return LEAF_NODE 12 return DESTINATION 11 - 3 EXPR 12 - 3 UNARY_EXPR 13 - 3 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 3 LEAF_NODE 15 3 LEAF_NODE 11 ; EXPR_STATEMENT 8 value = ( * p ++ & 0x1f ) << 6 ; EXPR 9 value = ( * p ++ & 0x1f ) << 6 ASSIGN 10 value = ( * p ++ & 0x1f ) << 6 LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ( * p ++ & 0x1f ) << 6 LEAF_NODE 12 ( UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0x1f LEAF_NODE 13 0x1f LEAF_NODE 12 ) LEAF_NODE 12 << FIELD 12 6 LEAF_NODE 13 6 LEAF_NODE 9 ; EXPR_STATEMENT 8 value |= * p ++ & 0x3f ; EXPR 9 value |= * p ++ & 0x3f ASSIGN 10 value |= * p ++ & 0x3f LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 |= LEAF_NODE 12 |= RVAL 11 * p ++ & 0x3f UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 9 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 value < 0x80 EXPR 10 value < 0x80 FIELD 11 value LEAF_NODE 12 value REL_OPERATOR 11 < LEAF_NODE 12 < FIELD 11 0x80 LEAF_NODE 12 0x80 LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 return - 4 ; KEYWORD 11 return LEAF_NODE 12 return DESTINATION 11 - 4 EXPR 12 - 4 UNARY_EXPR 13 - 4 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 4 LEAF_NODE 15 4 LEAF_NODE 11 ; EXPR_STATEMENT 8 ret = 2 ; EXPR 9 ret = 2 ASSIGN 10 ret = 2 LVAL 11 ret FIELD 12 ret LEAF_NODE 13 ret ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 2 FIELD 12 2 LEAF_NODE 13 2 LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ( * p & 0xf0 ) == 0xe0 EXPR 7 ( * p & 0xf0 ) == 0xe0 LEAF_NODE 8 ( UNARY_EXPR 8 * p UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 p LEAF_NODE 10 p LEAF_NODE 8 & FIELD 8 0xf0 LEAF_NODE 9 0xf0 LEAF_NODE 8 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 0xe0 LEAF_NODE 9 0xe0 LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 len < 3 EXPR 10 len < 3 FIELD 11 len LEAF_NODE 12 len REL_OPERATOR 11 < LEAF_NODE 12 < FIELD 11 3 LEAF_NODE 12 3 LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 return - 1 ; KEYWORD 11 return LEAF_NODE 12 return DESTINATION 11 - 1 EXPR 12 - 1 UNARY_EXPR 13 - 1 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 11 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ( ( p [ 1 ] & 0xc0 ) != 0x80 ) || ( ( p [ 2 ] & 0xc0 ) != 0x80 ) EXPR 10 ( ( p [ 1 ] & 0xc0 ) != 0x80 ) || ( ( p [ 2 ] & 0xc0 ) != 0x80 ) OR 11 ( ( p [ 1 ] & 0xc0 ) != 0x80 ) || ( ( p [ 2 ] & 0xc0 ) != 0x80 ) EXPR 12 ( ( p [ 1 ] & 0xc0 ) != 0x80 ) LEAF_NODE 13 ( LEAF_NODE 13 ( FIELD 13 p [ 1 ] LEAF_NODE 14 p LEAF_NODE 14 [ EXPR 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 ] LEAF_NODE 13 & FIELD 13 0xc0 LEAF_NODE 14 0xc0 LEAF_NODE 13 ) EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 0x80 LEAF_NODE 14 0x80 LEAF_NODE 13 ) LEAF_NODE 12 || EXPR 12 ( ( p [ 2 ] & 0xc0 ) != 0x80 ) LEAF_NODE 13 ( LEAF_NODE 13 ( FIELD 13 p [ 2 ] LEAF_NODE 14 p LEAF_NODE 14 [ EXPR 14 2 FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 14 ] LEAF_NODE 13 & FIELD 13 0xc0 LEAF_NODE 14 0xc0 LEAF_NODE 13 ) EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 0x80 LEAF_NODE 14 0x80 LEAF_NODE 13 ) LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 return - 3 ; KEYWORD 11 return LEAF_NODE 12 return DESTINATION 11 - 3 EXPR 12 - 3 UNARY_EXPR 13 - 3 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 3 LEAF_NODE 15 3 LEAF_NODE 11 ; EXPR_STATEMENT 8 value = ( * p ++ & 0xf ) << 12 ; EXPR 9 value = ( * p ++ & 0xf ) << 12 ASSIGN 10 value = ( * p ++ & 0xf ) << 12 LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ( * p ++ & 0xf ) << 12 LEAF_NODE 12 ( UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0xf LEAF_NODE 13 0xf LEAF_NODE 12 ) LEAF_NODE 12 << FIELD 12 12 LEAF_NODE 13 12 LEAF_NODE 9 ; EXPR_STATEMENT 8 value |= ( * p ++ & 0x3f ) << 6 ; EXPR 9 value |= ( * p ++ & 0x3f ) << 6 ASSIGN 10 value |= ( * p ++ & 0x3f ) << 6 LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 |= LEAF_NODE 12 |= RVAL 11 ( * p ++ & 0x3f ) << 6 LEAF_NODE 12 ( UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 12 ) LEAF_NODE 12 << FIELD 12 6 LEAF_NODE 13 6 LEAF_NODE 9 ; EXPR_STATEMENT 8 value |= * p ++ & 0x3f ; EXPR 9 value |= * p ++ & 0x3f ASSIGN 10 value |= * p ++ & 0x3f LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 |= LEAF_NODE 12 |= RVAL 11 * p ++ & 0x3f UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 9 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 value < 0x800 EXPR 10 value < 0x800 FIELD 11 value LEAF_NODE 12 value REL_OPERATOR 11 < LEAF_NODE 12 < FIELD 11 0x800 LEAF_NODE 12 0x800 LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 return - 4 ; KEYWORD 11 return LEAF_NODE 12 return DESTINATION 11 - 4 EXPR 12 - 4 UNARY_EXPR 13 - 4 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 4 LEAF_NODE 15 4 LEAF_NODE 11 ; EXPR_STATEMENT 8 ret = 3 ; EXPR 9 ret = 3 ASSIGN 10 ret = 3 LVAL 11 ret FIELD 12 ret LEAF_NODE 13 ret ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 3 FIELD 12 3 LEAF_NODE 13 3 LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ( * p & 0xf8 ) == 0xf0 EXPR 7 ( * p & 0xf8 ) == 0xf0 LEAF_NODE 8 ( UNARY_EXPR 8 * p UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 p LEAF_NODE 10 p LEAF_NODE 8 & FIELD 8 0xf8 LEAF_NODE 9 0xf8 LEAF_NODE 8 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 0xf0 LEAF_NODE 9 0xf0 LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 len < 4 EXPR 10 len < 4 FIELD 11 len LEAF_NODE 12 len REL_OPERATOR 11 < LEAF_NODE 12 < FIELD 11 4 LEAF_NODE 12 4 LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 return - 1 ; KEYWORD 11 return LEAF_NODE 12 return DESTINATION 11 - 1 EXPR 12 - 1 UNARY_EXPR 13 - 1 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 11 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ( ( p [ 1 ] & 0xc0 ) != 0x80 ) || ( ( p [ 2 ] & 0xc0 ) != 0x80 ) || ( ( p [ 3 ] & 0xc0 ) != 0x80 ) EXPR 10 ( ( p [ 1 ] & 0xc0 ) != 0x80 ) || ( ( p [ 2 ] & 0xc0 ) != 0x80 ) || ( ( p [ 3 ] & 0xc0 ) != 0x80 ) OR 11 ( ( p [ 1 ] & 0xc0 ) != 0x80 ) || ( ( p [ 2 ] & 0xc0 ) != 0x80 ) || ( ( p [ 3 ] & 0xc0 ) != 0x80 ) EXPR 12 ( ( p [ 1 ] & 0xc0 ) != 0x80 ) LEAF_NODE 13 ( LEAF_NODE 13 ( FIELD 13 p [ 1 ] LEAF_NODE 14 p LEAF_NODE 14 [ EXPR 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 ] LEAF_NODE 13 & FIELD 13 0xc0 LEAF_NODE 14 0xc0 LEAF_NODE 13 ) EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 0x80 LEAF_NODE 14 0x80 LEAF_NODE 13 ) LEAF_NODE 12 || EXPR 12 ( ( p [ 2 ] & 0xc0 ) != 0x80 ) || ( ( p [ 3 ] & 0xc0 ) != 0x80 ) OR 13 ( ( p [ 2 ] & 0xc0 ) != 0x80 ) || ( ( p [ 3 ] & 0xc0 ) != 0x80 ) EXPR 14 ( ( p [ 2 ] & 0xc0 ) != 0x80 ) LEAF_NODE 15 ( LEAF_NODE 15 ( FIELD 15 p [ 2 ] LEAF_NODE 16 p LEAF_NODE 16 [ EXPR 16 2 FIELD 17 2 LEAF_NODE 18 2 LEAF_NODE 16 ] LEAF_NODE 15 & FIELD 15 0xc0 LEAF_NODE 16 0xc0 LEAF_NODE 15 ) EQ_OPERATOR 15 != LEAF_NODE 16 != FIELD 15 0x80 LEAF_NODE 16 0x80 LEAF_NODE 15 ) LEAF_NODE 14 || EXPR 14 ( ( p [ 3 ] & 0xc0 ) != 0x80 ) LEAF_NODE 15 ( LEAF_NODE 15 ( FIELD 15 p [ 3 ] LEAF_NODE 16 p LEAF_NODE 16 [ EXPR 16 3 FIELD 17 3 LEAF_NODE 18 3 LEAF_NODE 16 ] LEAF_NODE 15 & FIELD 15 0xc0 LEAF_NODE 16 0xc0 LEAF_NODE 15 ) EQ_OPERATOR 15 != LEAF_NODE 16 != FIELD 15 0x80 LEAF_NODE 16 0x80 LEAF_NODE 15 ) LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 return - 3 ; KEYWORD 11 return LEAF_NODE 12 return DESTINATION 11 - 3 EXPR 12 - 3 UNARY_EXPR 13 - 3 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 3 LEAF_NODE 15 3 LEAF_NODE 11 ; EXPR_STATEMENT 8 value = ( ( unsigned long ) ( * p ++ & 0x7 ) ) << 18 ; EXPR 9 value = ( ( unsigned long ) ( * p ++ & 0x7 ) ) << 18 ASSIGN 10 value = ( ( unsigned long ) ( * p ++ & 0x7 ) ) << 18 LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ( ( unsigned long ) ( * p ++ & 0x7 ) ) << 18 LEAF_NODE 12 ( LEAF_NODE 12 ( TYPE_NAME 12 unsigned long LEAF_NODE 13 unsigned LEAF_NODE 13 long LEAF_NODE 12 ) LEAF_NODE 12 ( UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0x7 LEAF_NODE 13 0x7 LEAF_NODE 12 ) LEAF_NODE 12 ) LEAF_NODE 12 << FIELD 12 18 LEAF_NODE 13 18 LEAF_NODE 9 ; EXPR_STATEMENT 8 value |= ( * p ++ & 0x3f ) << 12 ; EXPR 9 value |= ( * p ++ & 0x3f ) << 12 ASSIGN 10 value |= ( * p ++ & 0x3f ) << 12 LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 |= LEAF_NODE 12 |= RVAL 11 ( * p ++ & 0x3f ) << 12 LEAF_NODE 12 ( UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 12 ) LEAF_NODE 12 << FIELD 12 12 LEAF_NODE 13 12 LEAF_NODE 9 ; EXPR_STATEMENT 8 value |= ( * p ++ & 0x3f ) << 6 ; EXPR 9 value |= ( * p ++ & 0x3f ) << 6 ASSIGN 10 value |= ( * p ++ & 0x3f ) << 6 LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 |= LEAF_NODE 12 |= RVAL 11 ( * p ++ & 0x3f ) << 6 LEAF_NODE 12 ( UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 12 ) LEAF_NODE 12 << FIELD 12 6 LEAF_NODE 13 6 LEAF_NODE 9 ; EXPR_STATEMENT 8 value |= * p ++ & 0x3f ; EXPR 9 value |= * p ++ & 0x3f ASSIGN 10 value |= * p ++ & 0x3f LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 |= LEAF_NODE 12 |= RVAL 11 * p ++ & 0x3f UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 9 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 value < 0x10000 EXPR 10 value < 0x10000 FIELD 11 value LEAF_NODE 12 value REL_OPERATOR 11 < LEAF_NODE 12 < FIELD 11 0x10000 LEAF_NODE 12 0x10000 LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 return - 4 ; KEYWORD 11 return LEAF_NODE 12 return DESTINATION 11 - 4 EXPR 12 - 4 UNARY_EXPR 13 - 4 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 4 LEAF_NODE 15 4 LEAF_NODE 11 ; EXPR_STATEMENT 8 ret = 4 ; EXPR 9 ret = 4 ASSIGN 10 ret = 4 LVAL 11 ret FIELD 12 ret LEAF_NODE 13 ret ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 4 FIELD 12 4 LEAF_NODE 13 4 LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ( * p & 0xfc ) == 0xf8 EXPR 7 ( * p & 0xfc ) == 0xf8 LEAF_NODE 8 ( UNARY_EXPR 8 * p UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 p LEAF_NODE 10 p LEAF_NODE 8 & FIELD 8 0xfc LEAF_NODE 9 0xfc LEAF_NODE 8 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 0xf8 LEAF_NODE 9 0xf8 LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 len < 5 EXPR 10 len < 5 FIELD 11 len LEAF_NODE 12 len REL_OPERATOR 11 < LEAF_NODE 12 < FIELD 11 5 LEAF_NODE 12 5 LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 return - 1 ; KEYWORD 11 return LEAF_NODE 12 return DESTINATION 11 - 1 EXPR 12 - 1 UNARY_EXPR 13 - 1 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 11 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ( ( p [ 1 ] & 0xc0 ) != 0x80 ) || ( ( p [ 2 ] & 0xc0 ) != 0x80 ) || ( ( p [ 3 ] & 0xc0 ) != 0x80 ) || ( ( p [ 4 ] & 0xc0 ) != 0x80 ) EXPR 10 ( ( p [ 1 ] & 0xc0 ) != 0x80 ) || ( ( p [ 2 ] & 0xc0 ) != 0x80 ) || ( ( p [ 3 ] & 0xc0 ) != 0x80 ) || ( ( p [ 4 ] & 0xc0 ) != 0x80 ) OR 11 ( ( p [ 1 ] & 0xc0 ) != 0x80 ) || ( ( p [ 2 ] & 0xc0 ) != 0x80 ) || ( ( p [ 3 ] & 0xc0 ) != 0x80 ) || ( ( p [ 4 ] & 0xc0 ) != 0x80 ) EXPR 12 ( ( p [ 1 ] & 0xc0 ) != 0x80 ) LEAF_NODE 13 ( LEAF_NODE 13 ( FIELD 13 p [ 1 ] LEAF_NODE 14 p LEAF_NODE 14 [ EXPR 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 ] LEAF_NODE 13 & FIELD 13 0xc0 LEAF_NODE 14 0xc0 LEAF_NODE 13 ) EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 0x80 LEAF_NODE 14 0x80 LEAF_NODE 13 ) LEAF_NODE 12 || EXPR 12 ( ( p [ 2 ] & 0xc0 ) != 0x80 ) || ( ( p [ 3 ] & 0xc0 ) != 0x80 ) || ( ( p [ 4 ] & 0xc0 ) != 0x80 ) OR 13 ( ( p [ 2 ] & 0xc0 ) != 0x80 ) || ( ( p [ 3 ] & 0xc0 ) != 0x80 ) || ( ( p [ 4 ] & 0xc0 ) != 0x80 ) EXPR 14 ( ( p [ 2 ] & 0xc0 ) != 0x80 ) LEAF_NODE 15 ( LEAF_NODE 15 ( FIELD 15 p [ 2 ] LEAF_NODE 16 p LEAF_NODE 16 [ EXPR 16 2 FIELD 17 2 LEAF_NODE 18 2 LEAF_NODE 16 ] LEAF_NODE 15 & FIELD 15 0xc0 LEAF_NODE 16 0xc0 LEAF_NODE 15 ) EQ_OPERATOR 15 != LEAF_NODE 16 != FIELD 15 0x80 LEAF_NODE 16 0x80 LEAF_NODE 15 ) LEAF_NODE 14 || EXPR 14 ( ( p [ 3 ] & 0xc0 ) != 0x80 ) || ( ( p [ 4 ] & 0xc0 ) != 0x80 ) OR 15 ( ( p [ 3 ] & 0xc0 ) != 0x80 ) || ( ( p [ 4 ] & 0xc0 ) != 0x80 ) EXPR 16 ( ( p [ 3 ] & 0xc0 ) != 0x80 ) LEAF_NODE 17 ( LEAF_NODE 17 ( FIELD 17 p [ 3 ] LEAF_NODE 18 p LEAF_NODE 18 [ EXPR 18 3 FIELD 19 3 LEAF_NODE 20 3 LEAF_NODE 18 ] LEAF_NODE 17 & FIELD 17 0xc0 LEAF_NODE 18 0xc0 LEAF_NODE 17 ) EQ_OPERATOR 17 != LEAF_NODE 18 != FIELD 17 0x80 LEAF_NODE 18 0x80 LEAF_NODE 17 ) LEAF_NODE 16 || EXPR 16 ( ( p [ 4 ] & 0xc0 ) != 0x80 ) LEAF_NODE 17 ( LEAF_NODE 17 ( FIELD 17 p [ 4 ] LEAF_NODE 18 p LEAF_NODE 18 [ EXPR 18 4 FIELD 19 4 LEAF_NODE 20 4 LEAF_NODE 18 ] LEAF_NODE 17 & FIELD 17 0xc0 LEAF_NODE 18 0xc0 LEAF_NODE 17 ) EQ_OPERATOR 17 != LEAF_NODE 18 != FIELD 17 0x80 LEAF_NODE 18 0x80 LEAF_NODE 17 ) LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 return - 3 ; KEYWORD 11 return LEAF_NODE 12 return DESTINATION 11 - 3 EXPR 12 - 3 UNARY_EXPR 13 - 3 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 3 LEAF_NODE 15 3 LEAF_NODE 11 ; EXPR_STATEMENT 8 value = ( ( unsigned long ) ( * p ++ & 0x3 ) ) << 24 ; EXPR 9 value = ( ( unsigned long ) ( * p ++ & 0x3 ) ) << 24 ASSIGN 10 value = ( ( unsigned long ) ( * p ++ & 0x3 ) ) << 24 LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ( ( unsigned long ) ( * p ++ & 0x3 ) ) << 24 LEAF_NODE 12 ( LEAF_NODE 12 ( TYPE_NAME 12 unsigned long LEAF_NODE 13 unsigned LEAF_NODE 13 long LEAF_NODE 12 ) LEAF_NODE 12 ( UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0x3 LEAF_NODE 13 0x3 LEAF_NODE 12 ) LEAF_NODE 12 ) LEAF_NODE 12 << FIELD 12 24 LEAF_NODE 13 24 LEAF_NODE 9 ; EXPR_STATEMENT 8 value |= ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 18 ; EXPR 9 value |= ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 18 ASSIGN 10 value |= ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 18 LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 |= LEAF_NODE 12 |= RVAL 11 ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 18 LEAF_NODE 12 ( LEAF_NODE 12 ( TYPE_NAME 12 unsigned long LEAF_NODE 13 unsigned LEAF_NODE 13 long LEAF_NODE 12 ) LEAF_NODE 12 ( UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 12 ) LEAF_NODE 12 ) LEAF_NODE 12 << FIELD 12 18 LEAF_NODE 13 18 LEAF_NODE 9 ; EXPR_STATEMENT 8 value |= ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 12 ; EXPR 9 value |= ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 12 ASSIGN 10 value |= ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 12 LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 |= LEAF_NODE 12 |= RVAL 11 ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 12 LEAF_NODE 12 ( LEAF_NODE 12 ( TYPE_NAME 12 unsigned long LEAF_NODE 13 unsigned LEAF_NODE 13 long LEAF_NODE 12 ) LEAF_NODE 12 ( UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 12 ) LEAF_NODE 12 ) LEAF_NODE 12 << FIELD 12 12 LEAF_NODE 13 12 LEAF_NODE 9 ; EXPR_STATEMENT 8 value |= ( * p ++ & 0x3f ) << 6 ; EXPR 9 value |= ( * p ++ & 0x3f ) << 6 ASSIGN 10 value |= ( * p ++ & 0x3f ) << 6 LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 |= LEAF_NODE 12 |= RVAL 11 ( * p ++ & 0x3f ) << 6 LEAF_NODE 12 ( UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 12 ) LEAF_NODE 12 << FIELD 12 6 LEAF_NODE 13 6 LEAF_NODE 9 ; EXPR_STATEMENT 8 value |= * p ++ & 0x3f ; EXPR 9 value |= * p ++ & 0x3f ASSIGN 10 value |= * p ++ & 0x3f LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 |= LEAF_NODE 12 |= RVAL 11 * p ++ & 0x3f UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 9 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 value < 0x200000 EXPR 10 value < 0x200000 FIELD 11 value LEAF_NODE 12 value REL_OPERATOR 11 < LEAF_NODE 12 < FIELD 11 0x200000 LEAF_NODE 12 0x200000 LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 return - 4 ; KEYWORD 11 return LEAF_NODE 12 return DESTINATION 11 - 4 EXPR 12 - 4 UNARY_EXPR 13 - 4 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 4 LEAF_NODE 15 4 LEAF_NODE 11 ; EXPR_STATEMENT 8 ret = 5 ; EXPR 9 ret = 5 ASSIGN 10 ret = 5 LVAL 11 ret FIELD 12 ret LEAF_NODE 13 ret ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 5 FIELD 12 5 LEAF_NODE 13 5 LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ( * p & 0xfe ) == 0xfc EXPR 7 ( * p & 0xfe ) == 0xfc LEAF_NODE 8 ( UNARY_EXPR 8 * p UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 p LEAF_NODE 10 p LEAF_NODE 8 & FIELD 8 0xfe LEAF_NODE 9 0xfe LEAF_NODE 8 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 0xfc LEAF_NODE 9 0xfc LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 len < 6 EXPR 10 len < 6 FIELD 11 len LEAF_NODE 12 len REL_OPERATOR 11 < LEAF_NODE 12 < FIELD 11 6 LEAF_NODE 12 6 LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 return - 1 ; KEYWORD 11 return LEAF_NODE 12 return DESTINATION 11 - 1 EXPR 12 - 1 UNARY_EXPR 13 - 1 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 11 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ( ( p [ 1 ] & 0xc0 ) != 0x80 ) || ( ( p [ 2 ] & 0xc0 ) != 0x80 ) || ( ( p [ 3 ] & 0xc0 ) != 0x80 ) || ( ( p [ 4 ] & 0xc0 ) != 0x80 ) || ( ( p [ 5 ] & 0xc0 ) != 0x80 ) EXPR 10 ( ( p [ 1 ] & 0xc0 ) != 0x80 ) || ( ( p [ 2 ] & 0xc0 ) != 0x80 ) || ( ( p [ 3 ] & 0xc0 ) != 0x80 ) || ( ( p [ 4 ] & 0xc0 ) != 0x80 ) || ( ( p [ 5 ] & 0xc0 ) != 0x80 ) OR 11 ( ( p [ 1 ] & 0xc0 ) != 0x80 ) || ( ( p [ 2 ] & 0xc0 ) != 0x80 ) || ( ( p [ 3 ] & 0xc0 ) != 0x80 ) || ( ( p [ 4 ] & 0xc0 ) != 0x80 ) || ( ( p [ 5 ] & 0xc0 ) != 0x80 ) EXPR 12 ( ( p [ 1 ] & 0xc0 ) != 0x80 ) LEAF_NODE 13 ( LEAF_NODE 13 ( FIELD 13 p [ 1 ] LEAF_NODE 14 p LEAF_NODE 14 [ EXPR 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 ] LEAF_NODE 13 & FIELD 13 0xc0 LEAF_NODE 14 0xc0 LEAF_NODE 13 ) EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 0x80 LEAF_NODE 14 0x80 LEAF_NODE 13 ) LEAF_NODE 12 || EXPR 12 ( ( p [ 2 ] & 0xc0 ) != 0x80 ) || ( ( p [ 3 ] & 0xc0 ) != 0x80 ) || ( ( p [ 4 ] & 0xc0 ) != 0x80 ) || ( ( p [ 5 ] & 0xc0 ) != 0x80 ) OR 13 ( ( p [ 2 ] & 0xc0 ) != 0x80 ) || ( ( p [ 3 ] & 0xc0 ) != 0x80 ) || ( ( p [ 4 ] & 0xc0 ) != 0x80 ) || ( ( p [ 5 ] & 0xc0 ) != 0x80 ) EXPR 14 ( ( p [ 2 ] & 0xc0 ) != 0x80 ) LEAF_NODE 15 ( LEAF_NODE 15 ( FIELD 15 p [ 2 ] LEAF_NODE 16 p LEAF_NODE 16 [ EXPR 16 2 FIELD 17 2 LEAF_NODE 18 2 LEAF_NODE 16 ] LEAF_NODE 15 & FIELD 15 0xc0 LEAF_NODE 16 0xc0 LEAF_NODE 15 ) EQ_OPERATOR 15 != LEAF_NODE 16 != FIELD 15 0x80 LEAF_NODE 16 0x80 LEAF_NODE 15 ) LEAF_NODE 14 || EXPR 14 ( ( p [ 3 ] & 0xc0 ) != 0x80 ) || ( ( p [ 4 ] & 0xc0 ) != 0x80 ) || ( ( p [ 5 ] & 0xc0 ) != 0x80 ) OR 15 ( ( p [ 3 ] & 0xc0 ) != 0x80 ) || ( ( p [ 4 ] & 0xc0 ) != 0x80 ) || ( ( p [ 5 ] & 0xc0 ) != 0x80 ) EXPR 16 ( ( p [ 3 ] & 0xc0 ) != 0x80 ) LEAF_NODE 17 ( LEAF_NODE 17 ( FIELD 17 p [ 3 ] LEAF_NODE 18 p LEAF_NODE 18 [ EXPR 18 3 FIELD 19 3 LEAF_NODE 20 3 LEAF_NODE 18 ] LEAF_NODE 17 & FIELD 17 0xc0 LEAF_NODE 18 0xc0 LEAF_NODE 17 ) EQ_OPERATOR 17 != LEAF_NODE 18 != FIELD 17 0x80 LEAF_NODE 18 0x80 LEAF_NODE 17 ) LEAF_NODE 16 || EXPR 16 ( ( p [ 4 ] & 0xc0 ) != 0x80 ) || ( ( p [ 5 ] & 0xc0 ) != 0x80 ) OR 17 ( ( p [ 4 ] & 0xc0 ) != 0x80 ) || ( ( p [ 5 ] & 0xc0 ) != 0x80 ) EXPR 18 ( ( p [ 4 ] & 0xc0 ) != 0x80 ) LEAF_NODE 19 ( LEAF_NODE 19 ( FIELD 19 p [ 4 ] LEAF_NODE 20 p LEAF_NODE 20 [ EXPR 20 4 FIELD 21 4 LEAF_NODE 22 4 LEAF_NODE 20 ] LEAF_NODE 19 & FIELD 19 0xc0 LEAF_NODE 20 0xc0 LEAF_NODE 19 ) EQ_OPERATOR 19 != LEAF_NODE 20 != FIELD 19 0x80 LEAF_NODE 20 0x80 LEAF_NODE 19 ) LEAF_NODE 18 || EXPR 18 ( ( p [ 5 ] & 0xc0 ) != 0x80 ) LEAF_NODE 19 ( LEAF_NODE 19 ( FIELD 19 p [ 5 ] LEAF_NODE 20 p LEAF_NODE 20 [ EXPR 20 5 FIELD 21 5 LEAF_NODE 22 5 LEAF_NODE 20 ] LEAF_NODE 19 & FIELD 19 0xc0 LEAF_NODE 20 0xc0 LEAF_NODE 19 ) EQ_OPERATOR 19 != LEAF_NODE 20 != FIELD 19 0x80 LEAF_NODE 20 0x80 LEAF_NODE 19 ) LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 return - 3 ; KEYWORD 11 return LEAF_NODE 12 return DESTINATION 11 - 3 EXPR 12 - 3 UNARY_EXPR 13 - 3 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 3 LEAF_NODE 15 3 LEAF_NODE 11 ; EXPR_STATEMENT 8 value = ( ( unsigned long ) ( * p ++ & 0x1 ) ) << 30 ; EXPR 9 value = ( ( unsigned long ) ( * p ++ & 0x1 ) ) << 30 ASSIGN 10 value = ( ( unsigned long ) ( * p ++ & 0x1 ) ) << 30 LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ( ( unsigned long ) ( * p ++ & 0x1 ) ) << 30 LEAF_NODE 12 ( LEAF_NODE 12 ( TYPE_NAME 12 unsigned long LEAF_NODE 13 unsigned LEAF_NODE 13 long LEAF_NODE 12 ) LEAF_NODE 12 ( UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0x1 LEAF_NODE 13 0x1 LEAF_NODE 12 ) LEAF_NODE 12 ) LEAF_NODE 12 << FIELD 12 30 LEAF_NODE 13 30 LEAF_NODE 9 ; EXPR_STATEMENT 8 value |= ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 24 ; EXPR 9 value |= ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 24 ASSIGN 10 value |= ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 24 LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 |= LEAF_NODE 12 |= RVAL 11 ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 24 LEAF_NODE 12 ( LEAF_NODE 12 ( TYPE_NAME 12 unsigned long LEAF_NODE 13 unsigned LEAF_NODE 13 long LEAF_NODE 12 ) LEAF_NODE 12 ( UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 12 ) LEAF_NODE 12 ) LEAF_NODE 12 << FIELD 12 24 LEAF_NODE 13 24 LEAF_NODE 9 ; EXPR_STATEMENT 8 value |= ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 18 ; EXPR 9 value |= ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 18 ASSIGN 10 value |= ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 18 LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 |= LEAF_NODE 12 |= RVAL 11 ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 18 LEAF_NODE 12 ( LEAF_NODE 12 ( TYPE_NAME 12 unsigned long LEAF_NODE 13 unsigned LEAF_NODE 13 long LEAF_NODE 12 ) LEAF_NODE 12 ( UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 12 ) LEAF_NODE 12 ) LEAF_NODE 12 << FIELD 12 18 LEAF_NODE 13 18 LEAF_NODE 9 ; EXPR_STATEMENT 8 value |= ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 12 ; EXPR 9 value |= ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 12 ASSIGN 10 value |= ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 12 LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 |= LEAF_NODE 12 |= RVAL 11 ( ( unsigned long ) ( * p ++ & 0x3f ) ) << 12 LEAF_NODE 12 ( LEAF_NODE 12 ( TYPE_NAME 12 unsigned long LEAF_NODE 13 unsigned LEAF_NODE 13 long LEAF_NODE 12 ) LEAF_NODE 12 ( UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 12 ) LEAF_NODE 12 ) LEAF_NODE 12 << FIELD 12 12 LEAF_NODE 13 12 LEAF_NODE 9 ; EXPR_STATEMENT 8 value |= ( * p ++ & 0x3f ) << 6 ; EXPR 9 value |= ( * p ++ & 0x3f ) << 6 ASSIGN 10 value |= ( * p ++ & 0x3f ) << 6 LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 |= LEAF_NODE 12 |= RVAL 11 ( * p ++ & 0x3f ) << 6 LEAF_NODE 12 ( UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 12 ) LEAF_NODE 12 << FIELD 12 6 LEAF_NODE 13 6 LEAF_NODE 9 ; EXPR_STATEMENT 8 value |= * p ++ & 0x3f ; EXPR 9 value |= * p ++ & 0x3f ASSIGN 10 value |= * p ++ & 0x3f LVAL 11 value FIELD 12 value LEAF_NODE 13 value ASSIGN_OP 11 |= LEAF_NODE 12 |= RVAL 11 * p ++ & 0x3f UNARY_EXPR 12 * p ++ UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p ++ LEAF_NODE 14 p LEAF_NODE 14 ++ LEAF_NODE 12 & FIELD 12 0x3f LEAF_NODE 13 0x3f LEAF_NODE 9 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 value < 0x4000000 EXPR 10 value < 0x4000000 FIELD 11 value LEAF_NODE 12 value REL_OPERATOR 11 < LEAF_NODE 12 < FIELD 11 0x4000000 LEAF_NODE 12 0x4000000 LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 return - 4 ; KEYWORD 11 return LEAF_NODE 12 return DESTINATION 11 - 4 EXPR 12 - 4 UNARY_EXPR 13 - 4 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 4 LEAF_NODE 15 4 LEAF_NODE 11 ; EXPR_STATEMENT 8 ret = 6 ; EXPR 9 ret = 6 ASSIGN 10 ret = 6 LVAL 11 ret FIELD 12 ret LEAF_NODE 13 ret ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 6 FIELD 12 6 LEAF_NODE 13 6 LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 JUMP_STATEMENT 5 return - 2 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 - 2 EXPR 7 - 2 UNARY_EXPR 8 - 2 UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 6 ; EXPR_STATEMENT 3 * val = value ; EXPR 4 * val = value ASSIGN 5 * val = value LVAL 6 * val UNARY_EXPR 7 * val UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 val LEAF_NODE 9 val ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 value FIELD 7 value LEAF_NODE 8 value LEAF_NODE 4 ; JUMP_STATEMENT 3 return ret ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ret EXPR 5 ret FIELD 6 ret LEAF_NODE 7 ret LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 184, "project": "openssl_ast_normal_function_test_33", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 ASN1_OBJECT * TYPE_NAME 3 ASN1_OBJECT LEAF_NODE 4 ASN1_OBJECT LEAF_NODE 3 * FUNCTION_NAME 2 ASN1_OBJECT_new LEAF_NODE 3 ASN1_OBJECT_new PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 ASN1_OBJECT * ret ; VAR_DECL 4 ASN1_OBJECT * ret TYPE 5 ASN1_OBJECT * TYPE_NAME 6 ASN1_OBJECT LEAF_NODE 7 ASN1_OBJECT POINTER 6 * LEAF_NODE 7 * NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 4 ; EXPR_STATEMENT 3 ret = OPENSSL_zalloc ( sizeof ( * ret ) ) ; EXPR 4 ret = OPENSSL_zalloc ( sizeof ( * ret ) ) ASSIGN 5 ret = OPENSSL_zalloc ( sizeof ( * ret ) ) LVAL 6 ret FIELD 7 ret LEAF_NODE 8 ret ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 OPENSSL_zalloc ( sizeof ( * ret ) ) FUNCTION_CALL 7 OPENSSL_zalloc ( sizeof ( * ret ) ) CALLEE 8 OPENSSL_zalloc LEAF_NODE 9 OPENSSL_zalloc LEAF_NODE 8 ( ARGUMENT 8 sizeof ( * ret ) FUNCTION_CALL 9 sizeof ( * ret ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 * ret UNARY_EXPR 11 * ret UNARY_OPERATOR 12 * LEAF_NODE 13 * FIELD 12 ret LEAF_NODE 13 ret LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ret == NULL EXPR 5 ret == NULL FIELD 6 ret LEAF_NODE 7 ret EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASN1err ( ASN1_F_ASN1_OBJECT_NEW , ERR_R_MALLOC_FAILURE ) ; EXPR 7 ASN1err ( ASN1_F_ASN1_OBJECT_NEW , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 8 ASN1err ( ASN1_F_ASN1_OBJECT_NEW , ERR_R_MALLOC_FAILURE ) CALLEE 9 ASN1err LEAF_NODE 10 ASN1err LEAF_NODE 9 ( ARGUMENT 9 ASN1_F_ASN1_OBJECT_NEW FIELD 10 ASN1_F_ASN1_OBJECT_NEW LEAF_NODE 11 ASN1_F_ASN1_OBJECT_NEW LEAF_NODE 9 , ARGUMENT 9 ERR_R_MALLOC_FAILURE FIELD 10 ERR_R_MALLOC_FAILURE LEAF_NODE 11 ERR_R_MALLOC_FAILURE LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return NULL ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 NULL EXPR 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ret -> flags = ASN1_OBJECT_FLAG_DYNAMIC ; EXPR 4 ret -> flags = ASN1_OBJECT_FLAG_DYNAMIC ASSIGN 5 ret -> flags = ASN1_OBJECT_FLAG_DYNAMIC LVAL 6 ret -> flags FIELD 7 ret -> flags LEAF_NODE 8 ret LEAF_NODE 8 -> LEAF_NODE 8 flags ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ASN1_OBJECT_FLAG_DYNAMIC FIELD 7 ASN1_OBJECT_FLAG_DYNAMIC LEAF_NODE 8 ASN1_OBJECT_FLAG_DYNAMIC LEAF_NODE 4 ; JUMP_STATEMENT 3 return ret ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ret EXPR 5 ret FIELD 6 ret LEAF_NODE 7 ret LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 185, "project": "openssl_ast_normal_function_test_135", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS ; VAR_DECL 2 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS TYPE 3 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } CLASS_DEF 4 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } LEAF_NODE 5 struct CLASS_NAME 5 args_st LEAF_NODE 6 args_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int size ; int argc ; char * argv ; SIMPLE_DECL 6 int size ; VAR_DECL 7 int size TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 size LEAF_NODE 9 size LEAF_NODE 7 ; SIMPLE_DECL 6 int argc ; VAR_DECL 7 int argc TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 argc LEAF_NODE 9 argc LEAF_NODE 7 ; SIMPLE_DECL 6 char * argv ; VAR_DECL 7 char * argv TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 argv LEAF_NODE 9 argv LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 ARGS LEAF_NODE 4 ARGS LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ctx_set_ctlog_list_file LEAF_NODE 3 ctx_set_ctlog_list_file PARAMETER_LIST 2 ( SSL_CTX * ctx , const char * path ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL_CTX * ctx TYPE 4 SSL_CTX * TYPE_NAME 5 SSL_CTX LEAF_NODE 6 SSL_CTX POINTER 5 * LEAF_NODE 6 * NAME 4 ctx LEAF_NODE 5 ctx LEAF_NODE 3 , PARAMETER_DECL 3 const char * path TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 path LEAF_NODE 5 path LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 path == NULL EXPR 5 path == NULL FIELD 6 path LEAF_NODE 7 path EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return SSL_CTX_set_default_ctlog_list_file ( ctx ) ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 SSL_CTX_set_default_ctlog_list_file ( ctx ) EXPR 7 SSL_CTX_set_default_ctlog_list_file ( ctx ) FUNCTION_CALL 8 SSL_CTX_set_default_ctlog_list_file ( ctx ) CALLEE 9 SSL_CTX_set_default_ctlog_list_file LEAF_NODE 10 SSL_CTX_set_default_ctlog_list_file LEAF_NODE 9 ( ARGUMENT 9 ctx FIELD 10 ctx LEAF_NODE 11 ctx LEAF_NODE 9 ) LEAF_NODE 6 ; JUMP_STATEMENT 3 return SSL_CTX_set_ctlog_list_file ( ctx , path ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 SSL_CTX_set_ctlog_list_file ( ctx , path ) EXPR 5 SSL_CTX_set_ctlog_list_file ( ctx , path ) FUNCTION_CALL 6 SSL_CTX_set_ctlog_list_file ( ctx , path ) CALLEE 7 SSL_CTX_set_ctlog_list_file LEAF_NODE 8 SSL_CTX_set_ctlog_list_file LEAF_NODE 7 ( ARGUMENT 7 ctx FIELD 8 ctx LEAF_NODE 9 ctx LEAF_NODE 7 , ARGUMENT 7 path FIELD 8 path LEAF_NODE 9 path LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 186, "project": "openssl_ast_normal_function_test_111", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 struct pw_cb_data BASE_CLASSES { const void * password ; const char * prompt_info ; } PW_CB_DATA ; VAR_DECL 2 struct pw_cb_data BASE_CLASSES { const void * password ; const char * prompt_info ; } PW_CB_DATA TYPE 3 struct pw_cb_data BASE_CLASSES { const void * password ; const char * prompt_info ; } CLASS_DEF 4 struct pw_cb_data BASE_CLASSES { const void * password ; const char * prompt_info ; } LEAF_NODE 5 struct CLASS_NAME 5 pw_cb_data LEAF_NODE 6 pw_cb_data LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 const void * password ; const char * prompt_info ; SIMPLE_DECL 6 const void * password ; VAR_DECL 7 const void * password TYPE 8 const void * TYPE_NAME 9 const void LEAF_NODE 10 const LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 password LEAF_NODE 9 password LEAF_NODE 7 ; SIMPLE_DECL 6 const char * prompt_info ; VAR_DECL 7 const char * prompt_info TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 prompt_info LEAF_NODE 9 prompt_info LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 PW_CB_DATA LEAF_NODE 4 PW_CB_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 UI_METHOD * ui_method ; ui_method = NULL ; VAR_DECL 2 UI_METHOD * ui_method ; ui_method = NULL TYPE 3 UI_METHOD * TYPE_NAME 4 UI_METHOD LEAF_NODE 5 UI_METHOD POINTER 4 * LEAF_NODE 5 * NAME 3 ui_method LEAF_NODE 4 ui_method LEAF_NODE 3 ; INIT 3 ui_method = NULL ASSIGN 4 ui_method = NULL LVAL 5 ui_method NAME 6 ui_method LEAF_NODE 7 ui_method ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 password_callback LEAF_NODE 3 password_callback PARAMETER_LIST 2 ( char * buf , int bufsiz , int verify , PW_CB_DATA * cb_tmp ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * buf TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 buf LEAF_NODE 5 buf LEAF_NODE 3 , PARAMETER_DECL 3 int bufsiz TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 bufsiz LEAF_NODE 5 bufsiz LEAF_NODE 3 , PARAMETER_DECL 3 int verify TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 verify LEAF_NODE 5 verify LEAF_NODE 3 , PARAMETER_DECL 3 PW_CB_DATA * cb_tmp TYPE 4 PW_CB_DATA * TYPE_NAME 5 PW_CB_DATA LEAF_NODE 6 PW_CB_DATA POINTER 5 * LEAF_NODE 6 * NAME 4 cb_tmp LEAF_NODE 5 cb_tmp LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int res ; res = 0 ; VAR_DECL 4 int res ; res = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 res LEAF_NODE 6 res LEAF_NODE 5 ; INIT 5 res = 0 ASSIGN 6 res = 0 LVAL 7 res NAME 8 res LEAF_NODE 9 res ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 UI * ui ; ui = NULL ; VAR_DECL 4 UI * ui ; ui = NULL TYPE 5 UI * TYPE_NAME 6 UI LEAF_NODE 7 UI POINTER 6 * LEAF_NODE 7 * NAME 5 ui LEAF_NODE 6 ui LEAF_NODE 5 ; INIT 5 ui = NULL ASSIGN 6 ui = NULL LVAL 7 ui NAME 8 ui LEAF_NODE 9 ui ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 PW_CB_DATA * cb_data ; cb_data = ( PW_CB_DATA * ) cb_tmp ; VAR_DECL 4 PW_CB_DATA * cb_data ; cb_data = ( PW_CB_DATA * ) cb_tmp TYPE 5 PW_CB_DATA * TYPE_NAME 6 PW_CB_DATA LEAF_NODE 7 PW_CB_DATA POINTER 6 * LEAF_NODE 7 * NAME 5 cb_data LEAF_NODE 6 cb_data LEAF_NODE 5 ; INIT 5 cb_data = ( PW_CB_DATA * ) cb_tmp ASSIGN 6 cb_data = ( PW_CB_DATA * ) cb_tmp LVAL 7 cb_data NAME 8 cb_data LEAF_NODE 9 cb_data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( PW_CB_DATA * ) cb_tmp LEAF_NODE 8 ( TYPE_NAME 8 PW_CB_DATA LEAF_NODE 9 PW_CB_DATA LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 cb_tmp LEAF_NODE 9 cb_tmp LEAF_NODE 4 ; EXPR_STATEMENT 3 ui = UI_new_method ( ui_method ) ; EXPR 4 ui = UI_new_method ( ui_method ) ASSIGN 5 ui = UI_new_method ( ui_method ) LVAL 6 ui FIELD 7 ui LEAF_NODE 8 ui ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 UI_new_method ( ui_method ) FUNCTION_CALL 7 UI_new_method ( ui_method ) CALLEE 8 UI_new_method LEAF_NODE 9 UI_new_method LEAF_NODE 8 ( ARGUMENT 8 ui_method FIELD 9 ui_method LEAF_NODE 10 ui_method LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ui EXPR 5 ui FIELD 6 ui LEAF_NODE 7 ui LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int ok ; ok = 0 ; VAR_DECL 7 int ok ; ok = 0 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 ok LEAF_NODE 9 ok LEAF_NODE 8 ; INIT 8 ok = 0 ASSIGN 9 ok = 0 LVAL 10 ok NAME 11 ok LEAF_NODE 12 ok ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ; SIMPLE_DECL 6 char * buff ; buff = NULL ; VAR_DECL 7 char * buff ; buff = NULL TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 buff LEAF_NODE 9 buff LEAF_NODE 8 ; INIT 8 buff = NULL ASSIGN 9 buff = NULL LVAL 10 buff NAME 11 buff LEAF_NODE 12 buff ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 7 ; SIMPLE_DECL 6 int ui_flags ; ui_flags = 0 ; VAR_DECL 7 int ui_flags ; ui_flags = 0 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 ui_flags LEAF_NODE 9 ui_flags LEAF_NODE 8 ; INIT 8 ui_flags = 0 ASSIGN 9 ui_flags = 0 LVAL 10 ui_flags NAME 11 ui_flags LEAF_NODE 12 ui_flags ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ; SIMPLE_DECL 6 const char * prompt_info ; prompt_info = NULL ; VAR_DECL 7 const char * prompt_info ; prompt_info = NULL TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 prompt_info LEAF_NODE 9 prompt_info LEAF_NODE 8 ; INIT 8 prompt_info = NULL ASSIGN 9 prompt_info = NULL LVAL 10 prompt_info NAME 11 prompt_info LEAF_NODE 12 prompt_info ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 7 ; SIMPLE_DECL 6 char * prompt ; VAR_DECL 7 char * prompt TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 prompt LEAF_NODE 9 prompt LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 cb_data != NULL && cb_data -> prompt_info != NULL EXPR 8 cb_data != NULL && cb_data -> prompt_info != NULL AND 9 cb_data != NULL && cb_data -> prompt_info != NULL EXPR 10 cb_data != NULL FIELD 11 cb_data LEAF_NODE 12 cb_data EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 10 && EXPR 10 cb_data -> prompt_info != NULL FIELD 11 cb_data -> prompt_info LEAF_NODE 12 cb_data LEAF_NODE 12 -> LEAF_NODE 12 prompt_info EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 prompt_info = cb_data -> prompt_info ; EXPR 9 prompt_info = cb_data -> prompt_info ASSIGN 10 prompt_info = cb_data -> prompt_info LVAL 11 prompt_info FIELD 12 prompt_info LEAF_NODE 13 prompt_info ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 cb_data -> prompt_info FIELD 12 cb_data -> prompt_info LEAF_NODE 13 cb_data LEAF_NODE 13 -> LEAF_NODE 13 prompt_info LEAF_NODE 9 ; EXPR_STATEMENT 6 prompt = UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) ; EXPR 7 prompt = UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) ASSIGN 8 prompt = UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) LVAL 9 prompt FIELD 10 prompt LEAF_NODE 11 prompt ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) FUNCTION_CALL 10 UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) CALLEE 11 UI_construct_prompt LEAF_NODE 12 UI_construct_prompt LEAF_NODE 11 ( ARGUMENT 11 ui FIELD 12 ui LEAF_NODE 13 ui LEAF_NODE 11 , ARGUMENT 11 \"pass phrase\" FIELD 12 \"pass phrase\" LEAF_NODE 13 \"pass phrase\" LEAF_NODE 11 , ARGUMENT 11 prompt_info FIELD 12 prompt_info LEAF_NODE 13 prompt_info LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! prompt EXPR 8 ! prompt UNARY_EXPR 9 ! prompt UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FIELD 10 prompt LEAF_NODE 11 prompt LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_printf ( bio_err , \"Out of memory\\n\" ) ; EXPR 10 BIO_printf ( bio_err , \"Out of memory\\n\" ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"Out of memory\\n\" ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"Out of memory\\n\" FIELD 13 \"Out of memory\\n\" LEAF_NODE 14 \"Out of memory\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 UI_free ( ui ) ; EXPR 10 UI_free ( ui ) FUNCTION_CALL 11 UI_free ( ui ) CALLEE 12 UI_free LEAF_NODE 13 UI_free LEAF_NODE 12 ( ARGUMENT 12 ui FIELD 13 ui LEAF_NODE 14 ui LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return 0 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 0 EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 ui_flags |= UI_INPUT_FLAG_DEFAULT_PWD ; EXPR 7 ui_flags |= UI_INPUT_FLAG_DEFAULT_PWD ASSIGN 8 ui_flags |= UI_INPUT_FLAG_DEFAULT_PWD LVAL 9 ui_flags FIELD 10 ui_flags LEAF_NODE 11 ui_flags ASSIGN_OP 9 |= LEAF_NODE 10 |= RVAL 9 UI_INPUT_FLAG_DEFAULT_PWD FIELD 10 UI_INPUT_FLAG_DEFAULT_PWD LEAF_NODE 11 UI_INPUT_FLAG_DEFAULT_PWD LEAF_NODE 7 ; EXPR_STATEMENT 6 UI_ctrl ( ui , UI_CTRL_PRINT_ERRORS , 1 , 0 , 0 ) ; EXPR 7 UI_ctrl ( ui , UI_CTRL_PRINT_ERRORS , 1 , 0 , 0 ) FUNCTION_CALL 8 UI_ctrl ( ui , UI_CTRL_PRINT_ERRORS , 1 , 0 , 0 ) CALLEE 9 UI_ctrl LEAF_NODE 10 UI_ctrl LEAF_NODE 9 ( ARGUMENT 9 ui FIELD 10 ui LEAF_NODE 11 ui LEAF_NODE 9 , ARGUMENT 9 UI_CTRL_PRINT_ERRORS FIELD 10 UI_CTRL_PRINT_ERRORS LEAF_NODE 11 UI_CTRL_PRINT_ERRORS LEAF_NODE 9 , ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ( void ) UI_add_user_data ( ui , cb_data ) ; EXPR 7 ( void ) UI_add_user_data ( ui , cb_data ) LEAF_NODE 8 ( TYPE_NAME 8 void LEAF_NODE 9 void LEAF_NODE 8 ) FUNCTION_CALL 8 UI_add_user_data ( ui , cb_data ) CALLEE 9 UI_add_user_data LEAF_NODE 10 UI_add_user_data LEAF_NODE 9 ( ARGUMENT 9 ui FIELD 10 ui LEAF_NODE 11 ui LEAF_NODE 9 , ARGUMENT 9 cb_data FIELD 10 cb_data LEAF_NODE 11 cb_data LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ok = UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) ; EXPR 7 ok = UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) ASSIGN 8 ok = UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) LVAL 9 ok FIELD 10 ok LEAF_NODE 11 ok ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) FUNCTION_CALL 10 UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) CALLEE 11 UI_add_input_string LEAF_NODE 12 UI_add_input_string LEAF_NODE 11 ( ARGUMENT 11 ui FIELD 12 ui LEAF_NODE 13 ui LEAF_NODE 11 , ARGUMENT 11 prompt FIELD 12 prompt LEAF_NODE 13 prompt LEAF_NODE 11 , ARGUMENT 11 ui_flags FIELD 12 ui_flags LEAF_NODE 13 ui_flags LEAF_NODE 11 , ARGUMENT 11 buf FIELD 12 buf LEAF_NODE 13 buf LEAF_NODE 11 , ARGUMENT 11 PW_MIN_LENGTH FIELD 12 PW_MIN_LENGTH LEAF_NODE 13 PW_MIN_LENGTH LEAF_NODE 11 , ARGUMENT 11 bufsiz - 1 FIELD 12 bufsiz LEAF_NODE 13 bufsiz LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok >= 0 && verify EXPR 8 ok >= 0 && verify AND 9 ok >= 0 && verify EXPR 10 ok >= 0 FIELD 11 ok LEAF_NODE 12 ok REL_OPERATOR 11 >= LEAF_NODE 12 >= FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 && EXPR 10 verify FIELD 11 verify LEAF_NODE 12 verify LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 buff = app_malloc ( bufsiz , \"password buffer\" ) ; EXPR 10 buff = app_malloc ( bufsiz , \"password buffer\" ) ASSIGN 11 buff = app_malloc ( bufsiz , \"password buffer\" ) LVAL 12 buff FIELD 13 buff LEAF_NODE 14 buff ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 app_malloc ( bufsiz , \"password buffer\" ) FUNCTION_CALL 13 app_malloc ( bufsiz , \"password buffer\" ) CALLEE 14 app_malloc LEAF_NODE 15 app_malloc LEAF_NODE 14 ( ARGUMENT 14 bufsiz FIELD 15 bufsiz LEAF_NODE 16 bufsiz LEAF_NODE 14 , ARGUMENT 14 \"password buffer\" FIELD 15 \"password buffer\" LEAF_NODE 16 \"password buffer\" LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ok = UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) ; EXPR 10 ok = UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) ASSIGN 11 ok = UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) LVAL 12 ok FIELD 13 ok LEAF_NODE 14 ok ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) FUNCTION_CALL 13 UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) CALLEE 14 UI_add_verify_string LEAF_NODE 15 UI_add_verify_string LEAF_NODE 14 ( ARGUMENT 14 ui FIELD 15 ui LEAF_NODE 16 ui LEAF_NODE 14 , ARGUMENT 14 prompt FIELD 15 prompt LEAF_NODE 16 prompt LEAF_NODE 14 , ARGUMENT 14 ui_flags FIELD 15 ui_flags LEAF_NODE 16 ui_flags LEAF_NODE 14 , ARGUMENT 14 buff FIELD 15 buff LEAF_NODE 16 buff LEAF_NODE 14 , ARGUMENT 14 PW_MIN_LENGTH FIELD 15 PW_MIN_LENGTH LEAF_NODE 16 PW_MIN_LENGTH LEAF_NODE 14 , ARGUMENT 14 bufsiz - 1 FIELD 15 bufsiz LEAF_NODE 16 bufsiz LEAF_NODE 15 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 , ARGUMENT 14 buf FIELD 15 buf LEAF_NODE 16 buf LEAF_NODE 14 ) LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok >= 0 EXPR 8 ok >= 0 FIELD 9 ok LEAF_NODE 10 ok REL_OPERATOR 9 >= LEAF_NODE 10 >= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 ITERATION 8 KEYWORD 9 do LEAF_NODE 10 do LEAF_NODE 9 ( CONDITION 9 ok < 0 && UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) EXPR 10 ok < 0 && UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) AND 11 ok < 0 && UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) EXPR 12 ok < 0 FIELD 13 ok LEAF_NODE 14 ok REL_OPERATOR 13 < LEAF_NODE 14 < FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 && EXPR 12 UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) FUNCTION_CALL 13 UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) CALLEE 14 UI_ctrl LEAF_NODE 15 UI_ctrl LEAF_NODE 14 ( ARGUMENT 14 ui FIELD 15 ui LEAF_NODE 16 ui LEAF_NODE 14 , ARGUMENT 14 UI_CTRL_IS_REDOABLE FIELD 15 UI_CTRL_IS_REDOABLE LEAF_NODE 16 UI_CTRL_IS_REDOABLE LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ) LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 ok = UI_process ( ui ) ; EXPR 12 ok = UI_process ( ui ) ASSIGN 13 ok = UI_process ( ui ) LVAL 14 ok FIELD 15 ok LEAF_NODE 16 ok ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 UI_process ( ui ) FUNCTION_CALL 15 UI_process ( ui ) CALLEE 16 UI_process LEAF_NODE 17 UI_process LEAF_NODE 16 ( ARGUMENT 16 ui FIELD 17 ui LEAF_NODE 18 ui LEAF_NODE 16 ) LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 6 ; EXPR_STATEMENT 6 OPENSSL_clear_free ( buff , ( unsigned int ) bufsiz ) ; EXPR 7 OPENSSL_clear_free ( buff , ( unsigned int ) bufsiz ) FUNCTION_CALL 8 OPENSSL_clear_free ( buff , ( unsigned int ) bufsiz ) CALLEE 9 OPENSSL_clear_free LEAF_NODE 10 OPENSSL_clear_free LEAF_NODE 9 ( ARGUMENT 9 buff FIELD 10 buff LEAF_NODE 11 buff LEAF_NODE 9 , ARGUMENT 9 ( unsigned int ) bufsiz LEAF_NODE 10 ( TYPE_NAME 10 unsigned int LEAF_NODE 11 unsigned LEAF_NODE 11 int LEAF_NODE 10 ) FIELD 10 bufsiz LEAF_NODE 11 bufsiz LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok >= 0 EXPR 8 ok >= 0 FIELD 9 ok LEAF_NODE 10 ok REL_OPERATOR 9 >= LEAF_NODE 10 >= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 res = strlen ( buf ) ; EXPR 9 res = strlen ( buf ) ASSIGN 10 res = strlen ( buf ) LVAL 11 res FIELD 12 res LEAF_NODE 13 res ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 strlen ( buf ) FUNCTION_CALL 12 strlen ( buf ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 buf FIELD 14 buf LEAF_NODE 15 buf LEAF_NODE 13 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok == - 1 EXPR 8 ok == - 1 FIELD 9 ok LEAF_NODE 10 ok EQ_OPERATOR 9 == LEAF_NODE 10 == UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_printf ( bio_err , \"User interface error\\n\" ) ; EXPR 10 BIO_printf ( bio_err , \"User interface error\\n\" ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"User interface error\\n\" ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"User interface error\\n\" FIELD 13 \"User interface error\\n\" LEAF_NODE 14 \"User interface error\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ERR_print_errors ( bio_err ) ; EXPR 10 ERR_print_errors ( bio_err ) FUNCTION_CALL 11 ERR_print_errors ( bio_err ) CALLEE 12 ERR_print_errors LEAF_NODE 13 ERR_print_errors LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) ; EXPR 10 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) FUNCTION_CALL 11 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) CALLEE 12 OPENSSL_cleanse LEAF_NODE 13 OPENSSL_cleanse LEAF_NODE 12 ( ARGUMENT 12 buf FIELD 13 buf LEAF_NODE 14 buf LEAF_NODE 12 , ARGUMENT 12 ( unsigned int ) bufsiz LEAF_NODE 13 ( TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int LEAF_NODE 13 ) FIELD 13 bufsiz LEAF_NODE 14 bufsiz LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 res = 0 ; EXPR 10 res = 0 ASSIGN 11 res = 0 LVAL 12 res FIELD 13 res LEAF_NODE 14 res ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok == - 2 EXPR 8 ok == - 2 FIELD 9 ok LEAF_NODE 10 ok EQ_OPERATOR 9 == LEAF_NODE 10 == UNARY_EXPR 9 - 2 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_printf ( bio_err , \"aborted!\\n\" ) ; EXPR 10 BIO_printf ( bio_err , \"aborted!\\n\" ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"aborted!\\n\" ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"aborted!\\n\" FIELD 13 \"aborted!\\n\" LEAF_NODE 14 \"aborted!\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) ; EXPR 10 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) FUNCTION_CALL 11 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) CALLEE 12 OPENSSL_cleanse LEAF_NODE 13 OPENSSL_cleanse LEAF_NODE 12 ( ARGUMENT 12 buf FIELD 13 buf LEAF_NODE 14 buf LEAF_NODE 12 , ARGUMENT 12 ( unsigned int ) bufsiz LEAF_NODE 13 ( TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int LEAF_NODE 13 ) FIELD 13 bufsiz LEAF_NODE 14 bufsiz LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 res = 0 ; EXPR 10 res = 0 ASSIGN 11 res = 0 LVAL 12 res FIELD 13 res LEAF_NODE 14 res ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 UI_free ( ui ) ; EXPR 7 UI_free ( ui ) FUNCTION_CALL 8 UI_free ( ui ) CALLEE 9 UI_free LEAF_NODE 10 UI_free LEAF_NODE 9 ( ARGUMENT 9 ui FIELD 10 ui LEAF_NODE 11 ui LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_free ( prompt ) ; EXPR 7 OPENSSL_free ( prompt ) FUNCTION_CALL 8 OPENSSL_free ( prompt ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 prompt FIELD 10 prompt LEAF_NODE 11 prompt LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return res ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 res EXPR 5 res FIELD 6 res LEAF_NODE 7 res LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 187, "project": "openssl_ast_normal_function_test_28", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ssl_parse_clienthello_use_srtp_ext LEAF_NODE 3 ssl_parse_clienthello_use_srtp_ext PARAMETER_LIST 2 ( SSL * s , unsigned char * d , int len , int * al ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * d TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 d LEAF_NODE 5 d LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 , PARAMETER_DECL 3 int * al TYPE 4 int * TYPE_NAME 5 int LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 al LEAF_NODE 5 al LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 SRTP_PROTECTION_PROFILE * cprof , SRTP_PROTECTION_PROFILE * sprof ; INIT_DECL_LIST 4 SRTP_PROTECTION_PROFILE * cprof , SRTP_PROTECTION_PROFILE * sprof VAR_DECL 5 SRTP_PROTECTION_PROFILE * cprof TYPE 6 SRTP_PROTECTION_PROFILE * TYPE_NAME 7 SRTP_PROTECTION_PROFILE LEAF_NODE 8 SRTP_PROTECTION_PROFILE POINTER 7 * LEAF_NODE 8 * NAME 6 cprof LEAF_NODE 7 cprof LEAF_NODE 5 , VAR_DECL 5 SRTP_PROTECTION_PROFILE * sprof TYPE 6 SRTP_PROTECTION_PROFILE * TYPE_NAME 7 SRTP_PROTECTION_PROFILE LEAF_NODE 8 SRTP_PROTECTION_PROFILE POINTER 7 * LEAF_NODE 8 * NAME 6 sprof LEAF_NODE 7 sprof LEAF_NODE 4 ; EXPR_STATEMENT 3 STACK_OF ( SRTP_PROTECTION_PROFILE ) * clnt = 0 , * srvr ; EXPR 4 STACK_OF ( SRTP_PROTECTION_PROFILE ) * clnt = 0 , * srvr ASSIGN 5 STACK_OF ( SRTP_PROTECTION_PROFILE ) * clnt = 0 LVAL 6 STACK_OF ( SRTP_PROTECTION_PROFILE ) * clnt FUNCTION_CALL 7 STACK_OF ( SRTP_PROTECTION_PROFILE ) CALLEE 8 STACK_OF LEAF_NODE 9 STACK_OF LEAF_NODE 8 ( ARGUMENT 8 SRTP_PROTECTION_PROFILE FIELD 9 SRTP_PROTECTION_PROFILE LEAF_NODE 10 SRTP_PROTECTION_PROFILE LEAF_NODE 8 ) LEAF_NODE 7 * FIELD 7 clnt LEAF_NODE 8 clnt ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 5 , UNARY_EXPR 5 * srvr UNARY_OPERATOR 6 * LEAF_NODE 7 * FIELD 6 srvr LEAF_NODE 7 srvr LEAF_NODE 4 ; SIMPLE_DECL 3 int ct ; VAR_DECL 4 int ct TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 ct LEAF_NODE 6 ct LEAF_NODE 4 ; SIMPLE_DECL 3 int mki_len ; VAR_DECL 4 int mki_len TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 mki_len LEAF_NODE 6 mki_len LEAF_NODE 4 ; SIMPLE_DECL 3 int i , int j ; INIT_DECL_LIST 4 int i , int j VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 , VAR_DECL 5 int j TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 j LEAF_NODE 7 j LEAF_NODE 4 ; SIMPLE_DECL 3 int id ; VAR_DECL 4 int id TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 id LEAF_NODE 6 id LEAF_NODE 4 ; SIMPLE_DECL 3 int ret ; VAR_DECL 4 int ret TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 len < 3 EXPR 5 len < 3 FIELD 6 len LEAF_NODE 7 len REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 3 LEAF_NODE 7 3 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT , SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST ) ; EXPR 7 SSLerr ( SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT , SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT , SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT FIELD 10 SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT LEAF_NODE 11 SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT LEAF_NODE 9 , ARGUMENT 9 SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST FIELD 10 SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST LEAF_NODE 11 SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 * al = SSL_AD_DECODE_ERROR ; EXPR 7 * al = SSL_AD_DECODE_ERROR ASSIGN 8 * al = SSL_AD_DECODE_ERROR LVAL 9 * al UNARY_EXPR 10 * al UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 al LEAF_NODE 12 al ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL_AD_DECODE_ERROR FIELD 10 SSL_AD_DECODE_ERROR LEAF_NODE 11 SSL_AD_DECODE_ERROR LEAF_NODE 7 ; JUMP_STATEMENT 6 return 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 1 EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 n2s ( d , ct ) ; EXPR 4 n2s ( d , ct ) FUNCTION_CALL 5 n2s ( d , ct ) CALLEE 6 n2s LEAF_NODE 7 n2s LEAF_NODE 6 ( ARGUMENT 6 d FIELD 7 d LEAF_NODE 8 d LEAF_NODE 6 , ARGUMENT 6 ct FIELD 7 ct LEAF_NODE 8 ct LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 len -= 2 ; EXPR 4 len -= 2 ASSIGN 5 len -= 2 LVAL 6 len FIELD 7 len LEAF_NODE 8 len ASSIGN_OP 6 -= LEAF_NODE 7 -= RVAL 6 2 FIELD 7 2 LEAF_NODE 8 2 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ct % 2 EXPR 5 ct % 2 FIELD 6 ct LEAF_NODE 7 ct LEAF_NODE 6 % FIELD 6 2 LEAF_NODE 7 2 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT , SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST ) ; EXPR 7 SSLerr ( SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT , SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT , SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT FIELD 10 SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT LEAF_NODE 11 SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT LEAF_NODE 9 , ARGUMENT 9 SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST FIELD 10 SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST LEAF_NODE 11 SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 * al = SSL_AD_DECODE_ERROR ; EXPR 7 * al = SSL_AD_DECODE_ERROR ASSIGN 8 * al = SSL_AD_DECODE_ERROR LVAL 9 * al UNARY_EXPR 10 * al UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 al LEAF_NODE 12 al ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL_AD_DECODE_ERROR FIELD 10 SSL_AD_DECODE_ERROR LEAF_NODE 11 SSL_AD_DECODE_ERROR LEAF_NODE 7 ; JUMP_STATEMENT 6 return 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 1 EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 len < ( ct + 1 ) EXPR 5 len < ( ct + 1 ) FIELD 6 len LEAF_NODE 7 len REL_OPERATOR 6 < LEAF_NODE 7 < LEAF_NODE 6 ( FIELD 6 ct LEAF_NODE 7 ct LEAF_NODE 6 + FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 6 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT , SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST ) ; EXPR 7 SSLerr ( SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT , SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT , SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT FIELD 10 SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT LEAF_NODE 11 SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT LEAF_NODE 9 , ARGUMENT 9 SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST FIELD 10 SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST LEAF_NODE 11 SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 * al = SSL_AD_DECODE_ERROR ; EXPR 7 * al = SSL_AD_DECODE_ERROR ASSIGN 8 * al = SSL_AD_DECODE_ERROR LVAL 9 * al UNARY_EXPR 10 * al UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 al LEAF_NODE 12 al ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL_AD_DECODE_ERROR FIELD 10 SSL_AD_DECODE_ERROR LEAF_NODE 11 SSL_AD_DECODE_ERROR LEAF_NODE 7 ; JUMP_STATEMENT 6 return 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 1 EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 clnt = sk_SRTP_PROTECTION_PROFILE_new_null ( ) ; EXPR 4 clnt = sk_SRTP_PROTECTION_PROFILE_new_null ( ) ASSIGN 5 clnt = sk_SRTP_PROTECTION_PROFILE_new_null ( ) LVAL 6 clnt FIELD 7 clnt LEAF_NODE 8 clnt ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 sk_SRTP_PROTECTION_PROFILE_new_null ( ) FUNCTION_CALL 7 sk_SRTP_PROTECTION_PROFILE_new_null ( ) CALLEE 8 sk_SRTP_PROTECTION_PROFILE_new_null LEAF_NODE 9 sk_SRTP_PROTECTION_PROFILE_new_null LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 ct EXPR 5 ct FIELD 6 ct LEAF_NODE 7 ct LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 n2s ( d , id ) ; EXPR 7 n2s ( d , id ) FUNCTION_CALL 8 n2s ( d , id ) CALLEE 9 n2s LEAF_NODE 10 n2s LEAF_NODE 9 ( ARGUMENT 9 d FIELD 10 d LEAF_NODE 11 d LEAF_NODE 9 , ARGUMENT 9 id FIELD 10 id LEAF_NODE 11 id LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ct -= 2 ; EXPR 7 ct -= 2 ASSIGN 8 ct -= 2 LVAL 9 ct FIELD 10 ct LEAF_NODE 11 ct ASSIGN_OP 9 -= LEAF_NODE 10 -= RVAL 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 7 ; EXPR_STATEMENT 6 len -= 2 ; EXPR 7 len -= 2 ASSIGN 8 len -= 2 LVAL 9 len FIELD 10 len LEAF_NODE 11 len ASSIGN_OP 9 -= LEAF_NODE 10 -= RVAL 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! find_profile_by_num ( id , & cprof ) EXPR 8 ! find_profile_by_num ( id , & cprof ) UNARY_EXPR 9 ! find_profile_by_num ( id , & cprof ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 find_profile_by_num ( id , & cprof ) CALLEE 11 find_profile_by_num LEAF_NODE 12 find_profile_by_num LEAF_NODE 11 ( ARGUMENT 11 id FIELD 12 id LEAF_NODE 13 id LEAF_NODE 11 , ARGUMENT 11 & cprof UNARY_EXPR 12 & cprof UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 cprof LEAF_NODE 14 cprof LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 sk_SRTP_PROTECTION_PROFILE_push ( clnt , cprof ) ; EXPR 10 sk_SRTP_PROTECTION_PROFILE_push ( clnt , cprof ) FUNCTION_CALL 11 sk_SRTP_PROTECTION_PROFILE_push ( clnt , cprof ) CALLEE 12 sk_SRTP_PROTECTION_PROFILE_push LEAF_NODE 13 sk_SRTP_PROTECTION_PROFILE_push LEAF_NODE 12 ( ARGUMENT 12 clnt FIELD 13 clnt LEAF_NODE 14 clnt LEAF_NODE 12 , ARGUMENT 12 cprof FIELD 13 cprof LEAF_NODE 14 cprof LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 LEAF_NODE 9 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 mki_len = * d ; EXPR 4 mki_len = * d ASSIGN 5 mki_len = * d LVAL 6 mki_len FIELD 7 mki_len LEAF_NODE 8 mki_len ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 * d UNARY_EXPR 7 * d UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 d LEAF_NODE 9 d LEAF_NODE 4 ; EXPR_STATEMENT 3 d ++ ; EXPR 4 d ++ FIELD 5 d ++ LEAF_NODE 6 d LEAF_NODE 6 ++ LEAF_NODE 4 ; EXPR_STATEMENT 3 len -- ; EXPR 4 len -- FIELD 5 len -- LEAF_NODE 6 len LEAF_NODE 6 -- LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 mki_len != len EXPR 5 mki_len != len FIELD 6 mki_len LEAF_NODE 7 mki_len EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 len LEAF_NODE 7 len LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT , SSL_R_BAD_SRTP_MKI_VALUE ) ; EXPR 7 SSLerr ( SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT , SSL_R_BAD_SRTP_MKI_VALUE ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT , SSL_R_BAD_SRTP_MKI_VALUE ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT FIELD 10 SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT LEAF_NODE 11 SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT LEAF_NODE 9 , ARGUMENT 9 SSL_R_BAD_SRTP_MKI_VALUE FIELD 10 SSL_R_BAD_SRTP_MKI_VALUE LEAF_NODE 11 SSL_R_BAD_SRTP_MKI_VALUE LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 * al = SSL_AD_DECODE_ERROR ; EXPR 7 * al = SSL_AD_DECODE_ERROR ASSIGN 8 * al = SSL_AD_DECODE_ERROR LVAL 9 * al UNARY_EXPR 10 * al UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 al LEAF_NODE 12 al ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL_AD_DECODE_ERROR FIELD 10 SSL_AD_DECODE_ERROR LEAF_NODE 11 SSL_AD_DECODE_ERROR LEAF_NODE 7 ; JUMP_STATEMENT 6 return 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 1 EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 srvr = SSL_get_srtp_profiles ( s ) ; EXPR 4 srvr = SSL_get_srtp_profiles ( s ) ASSIGN 5 srvr = SSL_get_srtp_profiles ( s ) LVAL 6 srvr FIELD 7 srvr LEAF_NODE 8 srvr ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 SSL_get_srtp_profiles ( s ) FUNCTION_CALL 7 SSL_get_srtp_profiles ( s ) CALLEE 8 SSL_get_srtp_profiles LEAF_NODE 9 SSL_get_srtp_profiles LEAF_NODE 8 ( ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 ) LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < sk_SRTP_PROTECTION_PROFILE_num ( srvr ) EXPR 5 i < sk_SRTP_PROTECTION_PROFILE_num ( srvr ) FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FUNCTION_CALL 6 sk_SRTP_PROTECTION_PROFILE_num ( srvr ) CALLEE 7 sk_SRTP_PROTECTION_PROFILE_num LEAF_NODE 8 sk_SRTP_PROTECTION_PROFILE_num LEAF_NODE 7 ( ARGUMENT 7 srvr FIELD 8 srvr LEAF_NODE 9 srvr LEAF_NODE 7 ) LEAF_NODE 4 ; FOR_EXPR 4 i ++ EXPR 5 i ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 sprof = sk_SRTP_PROTECTION_PROFILE_value ( srvr , i ) ; EXPR 7 sprof = sk_SRTP_PROTECTION_PROFILE_value ( srvr , i ) ASSIGN 8 sprof = sk_SRTP_PROTECTION_PROFILE_value ( srvr , i ) LVAL 9 sprof FIELD 10 sprof LEAF_NODE 11 sprof ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 sk_SRTP_PROTECTION_PROFILE_value ( srvr , i ) FUNCTION_CALL 10 sk_SRTP_PROTECTION_PROFILE_value ( srvr , i ) CALLEE 11 sk_SRTP_PROTECTION_PROFILE_value LEAF_NODE 12 sk_SRTP_PROTECTION_PROFILE_value LEAF_NODE 11 ( ARGUMENT 11 srvr FIELD 12 srvr LEAF_NODE 13 srvr LEAF_NODE 11 , ARGUMENT 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ) LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 j = 0 ; EXPR 8 j = 0 ASSIGN 9 j = 0 LVAL 10 j FIELD 11 j LEAF_NODE 12 j ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 8 ; CONDITION 7 j < sk_SRTP_PROTECTION_PROFILE_num ( clnt ) EXPR 8 j < sk_SRTP_PROTECTION_PROFILE_num ( clnt ) FIELD 9 j LEAF_NODE 10 j REL_OPERATOR 9 < LEAF_NODE 10 < FUNCTION_CALL 9 sk_SRTP_PROTECTION_PROFILE_num ( clnt ) CALLEE 10 sk_SRTP_PROTECTION_PROFILE_num LEAF_NODE 11 sk_SRTP_PROTECTION_PROFILE_num LEAF_NODE 10 ( ARGUMENT 10 clnt FIELD 11 clnt LEAF_NODE 12 clnt LEAF_NODE 10 ) LEAF_NODE 7 ; FOR_EXPR 7 j ++ EXPR 8 j ++ FIELD 9 j ++ LEAF_NODE 10 j LEAF_NODE 10 ++ LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 cprof = sk_SRTP_PROTECTION_PROFILE_value ( clnt , j ) ; EXPR 10 cprof = sk_SRTP_PROTECTION_PROFILE_value ( clnt , j ) ASSIGN 11 cprof = sk_SRTP_PROTECTION_PROFILE_value ( clnt , j ) LVAL 12 cprof FIELD 13 cprof LEAF_NODE 14 cprof ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 sk_SRTP_PROTECTION_PROFILE_value ( clnt , j ) FUNCTION_CALL 13 sk_SRTP_PROTECTION_PROFILE_value ( clnt , j ) CALLEE 14 sk_SRTP_PROTECTION_PROFILE_value LEAF_NODE 15 sk_SRTP_PROTECTION_PROFILE_value LEAF_NODE 14 ( ARGUMENT 14 clnt FIELD 15 clnt LEAF_NODE 16 clnt LEAF_NODE 14 , ARGUMENT 14 j FIELD 15 j LEAF_NODE 16 j LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 cprof -> id == sprof -> id EXPR 11 cprof -> id == sprof -> id FIELD 12 cprof -> id LEAF_NODE 13 cprof LEAF_NODE 13 -> LEAF_NODE 13 id EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 sprof -> id LEAF_NODE 13 sprof LEAF_NODE 13 -> LEAF_NODE 13 id LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 s -> srtp_profile = sprof ; EXPR 13 s -> srtp_profile = sprof ASSIGN 14 s -> srtp_profile = sprof LVAL 15 s -> srtp_profile FIELD 16 s -> srtp_profile LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 srtp_profile ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 sprof FIELD 16 sprof LEAF_NODE 17 sprof LEAF_NODE 13 ; EXPR_STATEMENT 12 * al = 0 ; EXPR 13 * al = 0 ASSIGN 14 * al = 0 LVAL 15 * al UNARY_EXPR 16 * al UNARY_OPERATOR 17 * LEAF_NODE 18 * FIELD 17 al LEAF_NODE 18 al ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 13 ; EXPR_STATEMENT 12 ret = 0 ; EXPR 13 ret = 0 ASSIGN 14 ret = 0 LVAL 15 ret FIELD 16 ret LEAF_NODE 17 ret ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 13 ; JUMP_STATEMENT 12 goto done ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 done LEAF_NODE 14 done LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 ret = 0 ; EXPR 4 ret = 0 ASSIGN 5 ret = 0 LVAL 6 ret FIELD 7 ret LEAF_NODE 8 ret ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; LABEL 3 done : LEAF_NODE 4 done LEAF_NODE 4 : SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 clnt EXPR 5 clnt FIELD 6 clnt LEAF_NODE 7 clnt LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 sk_SRTP_PROTECTION_PROFILE_free ( clnt ) ; EXPR 6 sk_SRTP_PROTECTION_PROFILE_free ( clnt ) FUNCTION_CALL 7 sk_SRTP_PROTECTION_PROFILE_free ( clnt ) CALLEE 8 sk_SRTP_PROTECTION_PROFILE_free LEAF_NODE 9 sk_SRTP_PROTECTION_PROFILE_free LEAF_NODE 8 ( ARGUMENT 8 clnt FIELD 9 clnt LEAF_NODE 10 clnt LEAF_NODE 8 ) LEAF_NODE 6 ; JUMP_STATEMENT 3 return ret ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ret EXPR 5 ret FIELD 6 ret LEAF_NODE 7 ret LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 188, "project": "openssl_ast_vul_function_test_17", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 oid_module_init LEAF_NODE 3 oid_module_init PARAMETER_LIST 2 ( CONF_IMODULE * md , const CONF * cnf ) LEAF_NODE 3 ( PARAMETER_DECL 3 CONF_IMODULE * md TYPE 4 CONF_IMODULE * TYPE_NAME 5 CONF_IMODULE LEAF_NODE 6 CONF_IMODULE POINTER 5 * LEAF_NODE 6 * NAME 4 md LEAF_NODE 5 md LEAF_NODE 3 , PARAMETER_DECL 3 const CONF * cnf TYPE 4 const CONF * TYPE_NAME 5 const CONF LEAF_NODE 6 const LEAF_NODE 6 CONF POINTER 5 * LEAF_NODE 6 * NAME 4 cnf LEAF_NODE 5 cnf LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int i ; VAR_DECL 4 int i TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; SIMPLE_DECL 3 const char * oid_section ; VAR_DECL 4 const char * oid_section TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 oid_section LEAF_NODE 6 oid_section LEAF_NODE 4 ; EXPR_STATEMENT 3 STACK_OF ( CONF_VALUE ) * sktmp ; EXPR 4 STACK_OF ( CONF_VALUE ) * sktmp FUNCTION_CALL 5 STACK_OF ( CONF_VALUE ) CALLEE 6 STACK_OF LEAF_NODE 7 STACK_OF LEAF_NODE 6 ( ARGUMENT 6 CONF_VALUE FIELD 7 CONF_VALUE LEAF_NODE 8 CONF_VALUE LEAF_NODE 6 ) LEAF_NODE 5 * FIELD 5 sktmp LEAF_NODE 6 sktmp LEAF_NODE 4 ; SIMPLE_DECL 3 CONF_VALUE * oval ; VAR_DECL 4 CONF_VALUE * oval TYPE 5 CONF_VALUE * TYPE_NAME 6 CONF_VALUE LEAF_NODE 7 CONF_VALUE POINTER 6 * LEAF_NODE 7 * NAME 5 oval LEAF_NODE 6 oval LEAF_NODE 4 ; EXPR_STATEMENT 3 oid_section = CONF_imodule_get_value ( md ) ; EXPR 4 oid_section = CONF_imodule_get_value ( md ) ASSIGN 5 oid_section = CONF_imodule_get_value ( md ) LVAL 6 oid_section FIELD 7 oid_section LEAF_NODE 8 oid_section ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CONF_imodule_get_value ( md ) FUNCTION_CALL 7 CONF_imodule_get_value ( md ) CALLEE 8 CONF_imodule_get_value LEAF_NODE 9 CONF_imodule_get_value LEAF_NODE 8 ( ARGUMENT 8 md FIELD 9 md LEAF_NODE 10 md LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( sktmp = NCONF_get_section ( cnf , oid_section ) ) == NULL EXPR 5 ( sktmp = NCONF_get_section ( cnf , oid_section ) ) == NULL LEAF_NODE 6 ( ASSIGN 6 sktmp = NCONF_get_section ( cnf , oid_section ) LVAL 7 sktmp FIELD 8 sktmp LEAF_NODE 9 sktmp ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NCONF_get_section ( cnf , oid_section ) FUNCTION_CALL 8 NCONF_get_section ( cnf , oid_section ) CALLEE 9 NCONF_get_section LEAF_NODE 10 NCONF_get_section LEAF_NODE 9 ( ARGUMENT 9 cnf FIELD 10 cnf LEAF_NODE 11 cnf LEAF_NODE 9 , ARGUMENT 9 oid_section FIELD 10 oid_section LEAF_NODE 11 oid_section LEAF_NODE 9 ) LEAF_NODE 6 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASN1err ( ASN1_F_OID_MODULE_INIT , ASN1_R_ERROR_LOADING_SECTION ) ; EXPR 7 ASN1err ( ASN1_F_OID_MODULE_INIT , ASN1_R_ERROR_LOADING_SECTION ) FUNCTION_CALL 8 ASN1err ( ASN1_F_OID_MODULE_INIT , ASN1_R_ERROR_LOADING_SECTION ) CALLEE 9 ASN1err LEAF_NODE 10 ASN1err LEAF_NODE 9 ( ARGUMENT 9 ASN1_F_OID_MODULE_INIT FIELD 10 ASN1_F_OID_MODULE_INIT LEAF_NODE 11 ASN1_F_OID_MODULE_INIT LEAF_NODE 9 , ARGUMENT 9 ASN1_R_ERROR_LOADING_SECTION FIELD 10 ASN1_R_ERROR_LOADING_SECTION LEAF_NODE 11 ASN1_R_ERROR_LOADING_SECTION LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < sk_CONF_VALUE_num ( sktmp ) EXPR 5 i < sk_CONF_VALUE_num ( sktmp ) FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FUNCTION_CALL 6 sk_CONF_VALUE_num ( sktmp ) CALLEE 7 sk_CONF_VALUE_num LEAF_NODE 8 sk_CONF_VALUE_num LEAF_NODE 7 ( ARGUMENT 7 sktmp FIELD 8 sktmp LEAF_NODE 9 sktmp LEAF_NODE 7 ) LEAF_NODE 4 ; FOR_EXPR 4 i ++ EXPR 5 i ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 oval = sk_CONF_VALUE_value ( sktmp , i ) ; EXPR 7 oval = sk_CONF_VALUE_value ( sktmp , i ) ASSIGN 8 oval = sk_CONF_VALUE_value ( sktmp , i ) LVAL 9 oval FIELD 10 oval LEAF_NODE 11 oval ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 sk_CONF_VALUE_value ( sktmp , i ) FUNCTION_CALL 10 sk_CONF_VALUE_value ( sktmp , i ) CALLEE 11 sk_CONF_VALUE_value LEAF_NODE 12 sk_CONF_VALUE_value LEAF_NODE 11 ( ARGUMENT 11 sktmp FIELD 12 sktmp LEAF_NODE 13 sktmp LEAF_NODE 11 , ARGUMENT 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! do_create ( oval -> value , oval -> name ) EXPR 8 ! do_create ( oval -> value , oval -> name ) UNARY_EXPR 9 ! do_create ( oval -> value , oval -> name ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 do_create ( oval -> value , oval -> name ) CALLEE 11 do_create LEAF_NODE 12 do_create LEAF_NODE 11 ( ARGUMENT 11 oval -> value FIELD 12 oval -> value LEAF_NODE 13 oval LEAF_NODE 13 -> LEAF_NODE 13 value LEAF_NODE 11 , ARGUMENT 11 oval -> name FIELD 12 oval -> name LEAF_NODE 13 oval LEAF_NODE 13 -> LEAF_NODE 13 name LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ASN1err ( ASN1_F_OID_MODULE_INIT , ASN1_R_ADDING_OBJECT ) ; EXPR 10 ASN1err ( ASN1_F_OID_MODULE_INIT , ASN1_R_ADDING_OBJECT ) FUNCTION_CALL 11 ASN1err ( ASN1_F_OID_MODULE_INIT , ASN1_R_ADDING_OBJECT ) CALLEE 12 ASN1err LEAF_NODE 13 ASN1err LEAF_NODE 12 ( ARGUMENT 12 ASN1_F_OID_MODULE_INIT FIELD 13 ASN1_F_OID_MODULE_INIT LEAF_NODE 14 ASN1_F_OID_MODULE_INIT LEAF_NODE 12 , ARGUMENT 12 ASN1_R_ADDING_OBJECT FIELD 13 ASN1_R_ADDING_OBJECT LEAF_NODE 14 ASN1_R_ADDING_OBJECT LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return 0 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 0 EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 189, "project": "openssl_ast_normal_function_test_134", "target": 0}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } ; CLASS_DEF 2 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } CLASS_DEF 3 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } LEAF_NODE 4 struct CLASS_NAME 4 bio_addrinfo_st LEAF_NODE 5 bio_addrinfo_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; SIMPLE_DECL 5 int bai_family ; VAR_DECL 6 int bai_family TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_family LEAF_NODE 8 bai_family LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_socktype ; VAR_DECL 6 int bai_socktype TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_socktype LEAF_NODE 8 bai_socktype LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_protocol ; VAR_DECL 6 int bai_protocol TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_protocol LEAF_NODE 8 bai_protocol LEAF_NODE 6 ; SIMPLE_DECL 5 size_t bai_addrlen ; VAR_DECL 6 size_t bai_addrlen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 bai_addrlen LEAF_NODE 8 bai_addrlen LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr * bai_addr ; VAR_DECL 6 struct sockaddr * bai_addr TYPE 7 struct sockaddr * TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr POINTER 8 * LEAF_NODE 9 * NAME 7 bai_addr LEAF_NODE 8 bai_addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct bio_addrinfo_st * bai_next ; VAR_DECL 6 struct bio_addrinfo_st * bai_next TYPE 7 struct bio_addrinfo_st * TYPE_NAME 8 struct bio_addrinfo_st LEAF_NODE 9 struct LEAF_NODE 9 bio_addrinfo_st POINTER 8 * LEAF_NODE 9 * NAME 7 bai_next LEAF_NODE 8 bai_next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BIO_ADDRINFO ; VAR_DECL 2 struct bio_addrinfo_st BIO_ADDRINFO TYPE 3 struct bio_addrinfo_st TYPE_NAME 4 struct bio_addrinfo_st LEAF_NODE 5 struct LEAF_NODE 5 bio_addrinfo_st NAME 3 BIO_ADDRINFO LEAF_NODE 4 BIO_ADDRINFO LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t socklen_t ; VAR_DECL 2 uint32_t socklen_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 socklen_t LEAF_NODE 4 socklen_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } ; CLASS_DEF 2 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } CLASS_DEF 3 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } LEAF_NODE 4 enum CLASS_NAME 4 BIO_hostserv_priorities LEAF_NODE 5 BIO_hostserv_priorities LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV LEAF_NODE 5 BIO_PARSE_PRIO_HOST LEAF_NODE 5 , LEAF_NODE 5 BIO_PARSE_PRIO_SERV LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } ; CLASS_DEF 2 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } CLASS_DEF 3 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } LEAF_NODE 4 enum CLASS_NAME 4 BIO_lookup_type LEAF_NODE 5 BIO_lookup_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER LEAF_NODE 5 BIO_LOOKUP_CLIENT LEAF_NODE 5 , LEAF_NODE 5 BIO_LOOKUP_SERVER LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 32 ] session_id ; VAR_DECL 2 unsigned char [ 32 ] session_id TYPE 3 unsigned char [ 32 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 32 ] LEAF_NODE 5 [ FIELD 5 32 LEAF_NODE 6 32 LEAF_NODE 5 ] NAME 3 session_id LEAF_NODE 4 session_id LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 48 ] master_secret ; VAR_DECL 2 unsigned char [ 48 ] master_secret TYPE 3 unsigned char [ 48 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 48 ] LEAF_NODE 5 [ FIELD 5 48 LEAF_NODE 6 48 LEAF_NODE 5 ] NAME 3 master_secret LEAF_NODE 4 master_secret LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ SSL3_RANDOM_SIZE ] client_random ; VAR_DECL 2 unsigned char [ SSL3_RANDOM_SIZE ] client_random TYPE 3 unsigned char [ SSL3_RANDOM_SIZE ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ SSL3_RANDOM_SIZE ] LEAF_NODE 5 [ FIELD 5 SSL3_RANDOM_SIZE LEAF_NODE 6 SSL3_RANDOM_SIZE LEAF_NODE 5 ] NAME 3 client_random LEAF_NODE 4 client_random LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ SSL3_RANDOM_SIZE ] server_random ; VAR_DECL 2 unsigned char [ SSL3_RANDOM_SIZE ] server_random TYPE 3 unsigned char [ SSL3_RANDOM_SIZE ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ SSL3_RANDOM_SIZE ] LEAF_NODE 5 [ FIELD 5 SSL3_RANDOM_SIZE LEAF_NODE 6 SSL3_RANDOM_SIZE LEAF_NODE 5 ] NAME 3 server_random LEAF_NODE 4 server_random LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ 104 ] key_block ; VAR_DECL 2 unsigned char [ 104 ] key_block TYPE 3 unsigned char [ 104 ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ 104 ] LEAF_NODE 5 [ FIELD 5 104 LEAF_NODE 6 104 LEAF_NODE 5 ] NAME 3 key_block LEAF_NODE 4 key_block LEAF_NODE 2 ; SIMPLE_DECL 1 EVP_MD_CTX * handshake_md ; VAR_DECL 2 EVP_MD_CTX * handshake_md TYPE 3 EVP_MD_CTX * TYPE_NAME 4 EVP_MD_CTX LEAF_NODE 5 EVP_MD_CTX POINTER 4 * LEAF_NODE 5 * NAME 3 handshake_md LEAF_NODE 4 handshake_md LEAF_NODE 2 ; SIMPLE_DECL 1 int test_bad_dtls ; test_bad_dtls test_bad_dtls ( void ) ; VAR_DECL 2 int test_bad_dtls ; test_bad_dtls test_bad_dtls ( void ) TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 test_bad_dtls LEAF_NODE 4 test_bad_dtls LEAF_NODE 3 ; INIT 3 test_bad_dtls test_bad_dtls ( void ) ASSIGN 4 test_bad_dtls test_bad_dtls ( void ) LVAL 5 test_bad_dtls NAME 6 test_bad_dtls LEAF_NODE 7 test_bad_dtls ASSIGN_OP 5 test_bad_dtls NAME 6 test_bad_dtls LEAF_NODE 7 test_bad_dtls RVAL 5 ( void ) LEAF_NODE 6 ( EXPR 6 void FIELD 7 void LEAF_NODE 8 void LEAF_NODE 6 ) LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 setup_tests LEAF_NODE 3 setup_tests PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 ADD_TEST ( test_bad_dtls ) ; EXPR 4 ADD_TEST ( test_bad_dtls ) FUNCTION_CALL 5 ADD_TEST ( test_bad_dtls ) CALLEE 6 ADD_TEST LEAF_NODE 7 ADD_TEST LEAF_NODE 6 ( ARGUMENT 6 test_bad_dtls FIELD 7 test_bad_dtls LEAF_NODE 8 test_bad_dtls LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 190, "project": "openssl_ast_normal_function_test_85", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 tls_decrypt_ticket LEAF_NODE 3 tls_decrypt_ticket PARAMETER_LIST 2 ( SSL * s , const unsigned char * etick , int eticklen , const unsigned char * sess_id , int sesslen , SSL_SESSION * * psess ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 const unsigned char * etick TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 etick LEAF_NODE 5 etick LEAF_NODE 3 , PARAMETER_DECL 3 int eticklen TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 eticklen LEAF_NODE 5 eticklen LEAF_NODE 3 , PARAMETER_DECL 3 const unsigned char * sess_id TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 sess_id LEAF_NODE 5 sess_id LEAF_NODE 3 , PARAMETER_DECL 3 int sesslen TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 sesslen LEAF_NODE 5 sesslen LEAF_NODE 3 , PARAMETER_DECL 3 SSL_SESSION * * psess TYPE 4 SSL_SESSION * * TYPE_NAME 5 SSL_SESSION LEAF_NODE 6 SSL_SESSION POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 psess LEAF_NODE 5 psess LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 SSL_SESSION * sess ; VAR_DECL 4 SSL_SESSION * sess TYPE 5 SSL_SESSION * TYPE_NAME 6 SSL_SESSION LEAF_NODE 7 SSL_SESSION POINTER 6 * LEAF_NODE 7 * NAME 5 sess LEAF_NODE 6 sess LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * sdec ; VAR_DECL 4 unsigned char * sdec TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 sdec LEAF_NODE 6 sdec LEAF_NODE 4 ; SIMPLE_DECL 3 const unsigned char * p ; VAR_DECL 4 const unsigned char * p TYPE 5 const unsigned char * TYPE_NAME 6 const unsigned char LEAF_NODE 7 const LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 4 ; SIMPLE_DECL 3 int slen , int mlen , int renew_ticket ; renew_ticket = 0 ; INIT_DECL_LIST 4 int slen , int mlen , int renew_ticket ; renew_ticket = 0 VAR_DECL 5 int slen TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 slen LEAF_NODE 7 slen LEAF_NODE 5 , INIT_DECL_LIST 5 int mlen , int renew_ticket ; renew_ticket = 0 VAR_DECL 6 int mlen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 mlen LEAF_NODE 8 mlen LEAF_NODE 6 , VAR_DECL 6 int renew_ticket ; renew_ticket = 0 TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 renew_ticket LEAF_NODE 8 renew_ticket LEAF_NODE 7 ; INIT 7 renew_ticket = 0 ASSIGN 8 renew_ticket = 0 LVAL 9 renew_ticket NAME 10 renew_ticket LEAF_NODE 11 renew_ticket ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char [ EVP_MAX_MD_SIZE ] tick_hmac ; VAR_DECL 4 unsigned char [ EVP_MAX_MD_SIZE ] tick_hmac TYPE 5 unsigned char [ EVP_MAX_MD_SIZE ] TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char TYPE_SUFFIX 6 [ EVP_MAX_MD_SIZE ] LEAF_NODE 7 [ FIELD 7 EVP_MAX_MD_SIZE LEAF_NODE 8 EVP_MAX_MD_SIZE LEAF_NODE 7 ] NAME 5 tick_hmac LEAF_NODE 6 tick_hmac LEAF_NODE 4 ; SIMPLE_DECL 3 HMAC_CTX hctx ; VAR_DECL 4 HMAC_CTX hctx TYPE 5 HMAC_CTX TYPE_NAME 6 HMAC_CTX LEAF_NODE 7 HMAC_CTX NAME 5 hctx LEAF_NODE 6 hctx LEAF_NODE 4 ; SIMPLE_DECL 3 EVP_CIPHER_CTX ctx ; VAR_DECL 4 EVP_CIPHER_CTX ctx TYPE 5 EVP_CIPHER_CTX TYPE_NAME 6 EVP_CIPHER_CTX LEAF_NODE 7 EVP_CIPHER_CTX NAME 5 ctx LEAF_NODE 6 ctx LEAF_NODE 4 ; SIMPLE_DECL 3 SSL_CTX * tctx ; tctx = s -> initial_ctx ; VAR_DECL 4 SSL_CTX * tctx ; tctx = s -> initial_ctx TYPE 5 SSL_CTX * TYPE_NAME 6 SSL_CTX LEAF_NODE 7 SSL_CTX POINTER 6 * LEAF_NODE 7 * NAME 5 tctx LEAF_NODE 6 tctx LEAF_NODE 5 ; INIT 5 tctx = s -> initial_ctx ASSIGN 6 tctx = s -> initial_ctx LVAL 7 tctx NAME 8 tctx LEAF_NODE 9 tctx ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 s -> initial_ctx FIELD 8 s -> initial_ctx LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 initial_ctx LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 eticklen < 48 EXPR 5 eticklen < 48 FIELD 6 eticklen LEAF_NODE 7 eticklen REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 48 LEAF_NODE 7 48 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 2 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 2 EXPR 7 2 FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 6 ; EXPR_STATEMENT 3 HMAC_CTX_init ( & hctx ) ; EXPR 4 HMAC_CTX_init ( & hctx ) FUNCTION_CALL 5 HMAC_CTX_init ( & hctx ) CALLEE 6 HMAC_CTX_init LEAF_NODE 7 HMAC_CTX_init LEAF_NODE 6 ( ARGUMENT 6 & hctx UNARY_EXPR 7 & hctx UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 hctx LEAF_NODE 9 hctx LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_CIPHER_CTX_init ( & ctx ) ; EXPR 4 EVP_CIPHER_CTX_init ( & ctx ) FUNCTION_CALL 5 EVP_CIPHER_CTX_init ( & ctx ) CALLEE 6 EVP_CIPHER_CTX_init LEAF_NODE 7 EVP_CIPHER_CTX_init LEAF_NODE 6 ( ARGUMENT 6 & ctx UNARY_EXPR 7 & ctx UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 ctx LEAF_NODE 9 ctx LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 tctx -> tlsext_ticket_key_cb EXPR 5 tctx -> tlsext_ticket_key_cb FIELD 6 tctx -> tlsext_ticket_key_cb LEAF_NODE 7 tctx LEAF_NODE 7 -> LEAF_NODE 7 tlsext_ticket_key_cb LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 unsigned char * nctick ; nctick = ( unsigned char * ) etick ; VAR_DECL 7 unsigned char * nctick ; nctick = ( unsigned char * ) etick TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 nctick LEAF_NODE 9 nctick LEAF_NODE 8 ; INIT 8 nctick = ( unsigned char * ) etick ASSIGN 9 nctick = ( unsigned char * ) etick LVAL 10 nctick NAME 11 nctick LEAF_NODE 12 nctick ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( unsigned char * ) etick LEAF_NODE 11 ( TYPE_NAME 11 unsigned char LEAF_NODE 12 unsigned LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FIELD 11 etick LEAF_NODE 12 etick LEAF_NODE 7 ; SIMPLE_DECL 6 int rv ; rv = tctx -> tlsext_ticket_key_cb ( s , nctick , nctick + 16 , & ctx , & hctx , 0 ) ; VAR_DECL 7 int rv ; rv = tctx -> tlsext_ticket_key_cb ( s , nctick , nctick + 16 , & ctx , & hctx , 0 ) TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 rv LEAF_NODE 9 rv LEAF_NODE 8 ; INIT 8 rv = tctx -> tlsext_ticket_key_cb ( s , nctick , nctick + 16 , & ctx , & hctx , 0 ) ASSIGN 9 rv = tctx -> tlsext_ticket_key_cb ( s , nctick , nctick + 16 , & ctx , & hctx , 0 ) LVAL 10 rv NAME 11 rv LEAF_NODE 12 rv ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 tctx -> tlsext_ticket_key_cb ( s , nctick , nctick + 16 , & ctx , & hctx , 0 ) FUNCTION_CALL 11 tctx -> tlsext_ticket_key_cb ( s , nctick , nctick + 16 , & ctx , & hctx , 0 ) CALLEE 12 tctx -> tlsext_ticket_key_cb LEAF_NODE 13 tctx LEAF_NODE 13 -> LEAF_NODE 13 tlsext_ticket_key_cb LEAF_NODE 12 ( ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 , ARGUMENT 12 nctick FIELD 13 nctick LEAF_NODE 14 nctick LEAF_NODE 12 , ARGUMENT 12 nctick + 16 FIELD 13 nctick LEAF_NODE 14 nctick LEAF_NODE 13 + FIELD 13 16 LEAF_NODE 14 16 LEAF_NODE 12 , ARGUMENT 12 & ctx UNARY_EXPR 13 & ctx UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 ctx LEAF_NODE 15 ctx LEAF_NODE 12 , ARGUMENT 12 & hctx UNARY_EXPR 13 & hctx UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 hctx LEAF_NODE 15 hctx LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 rv < 0 EXPR 8 rv < 0 FIELD 9 rv LEAF_NODE 10 rv REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return - 1 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 - 1 EXPR 10 - 1 UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 rv == 0 EXPR 8 rv == 0 FIELD 9 rv LEAF_NODE 10 rv EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return 2 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 2 EXPR 10 2 FIELD 11 2 LEAF_NODE 12 2 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 rv == 2 EXPR 8 rv == 2 FIELD 9 rv LEAF_NODE 10 rv EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 renew_ticket = 1 ; EXPR 9 renew_ticket = 1 ASSIGN 10 renew_ticket = 1 LVAL 11 renew_ticket FIELD 12 renew_ticket LEAF_NODE 13 renew_ticket ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 memcmp ( etick , tctx -> tlsext_tick_key_name , 16 ) EXPR 8 memcmp ( etick , tctx -> tlsext_tick_key_name , 16 ) FUNCTION_CALL 9 memcmp ( etick , tctx -> tlsext_tick_key_name , 16 ) CALLEE 10 memcmp LEAF_NODE 11 memcmp LEAF_NODE 10 ( ARGUMENT 10 etick FIELD 11 etick LEAF_NODE 12 etick LEAF_NODE 10 , ARGUMENT 10 tctx -> tlsext_tick_key_name FIELD 11 tctx -> tlsext_tick_key_name LEAF_NODE 12 tctx LEAF_NODE 12 -> LEAF_NODE 12 tlsext_tick_key_name LEAF_NODE 10 , ARGUMENT 10 16 FIELD 11 16 LEAF_NODE 12 16 LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return 2 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 2 EXPR 10 2 FIELD 11 2 LEAF_NODE 12 2 LEAF_NODE 9 ; EXPR_STATEMENT 6 HMAC_Init_ex ( & hctx , tctx -> tlsext_tick_hmac_key , 16 , tlsext_tick_md ( ) , NULL ) ; EXPR 7 HMAC_Init_ex ( & hctx , tctx -> tlsext_tick_hmac_key , 16 , tlsext_tick_md ( ) , NULL ) FUNCTION_CALL 8 HMAC_Init_ex ( & hctx , tctx -> tlsext_tick_hmac_key , 16 , tlsext_tick_md ( ) , NULL ) CALLEE 9 HMAC_Init_ex LEAF_NODE 10 HMAC_Init_ex LEAF_NODE 9 ( ARGUMENT 9 & hctx UNARY_EXPR 10 & hctx UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 hctx LEAF_NODE 12 hctx LEAF_NODE 9 , ARGUMENT 9 tctx -> tlsext_tick_hmac_key FIELD 10 tctx -> tlsext_tick_hmac_key LEAF_NODE 11 tctx LEAF_NODE 11 -> LEAF_NODE 11 tlsext_tick_hmac_key LEAF_NODE 9 , ARGUMENT 9 16 FIELD 10 16 LEAF_NODE 11 16 LEAF_NODE 9 , ARGUMENT 9 tlsext_tick_md ( ) FUNCTION_CALL 10 tlsext_tick_md ( ) CALLEE 11 tlsext_tick_md LEAF_NODE 12 tlsext_tick_md LEAF_NODE 11 ( LEAF_NODE 11 ) LEAF_NODE 9 , ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 EVP_DecryptInit_ex ( & ctx , EVP_aes_128_cbc ( ) , NULL , tctx -> tlsext_tick_aes_key , etick + 16 ) ; EXPR 7 EVP_DecryptInit_ex ( & ctx , EVP_aes_128_cbc ( ) , NULL , tctx -> tlsext_tick_aes_key , etick + 16 ) FUNCTION_CALL 8 EVP_DecryptInit_ex ( & ctx , EVP_aes_128_cbc ( ) , NULL , tctx -> tlsext_tick_aes_key , etick + 16 ) CALLEE 9 EVP_DecryptInit_ex LEAF_NODE 10 EVP_DecryptInit_ex LEAF_NODE 9 ( ARGUMENT 9 & ctx UNARY_EXPR 10 & ctx UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 ctx LEAF_NODE 12 ctx LEAF_NODE 9 , ARGUMENT 9 EVP_aes_128_cbc ( ) FUNCTION_CALL 10 EVP_aes_128_cbc ( ) CALLEE 11 EVP_aes_128_cbc LEAF_NODE 12 EVP_aes_128_cbc LEAF_NODE 11 ( LEAF_NODE 11 ) LEAF_NODE 9 , ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 , ARGUMENT 9 tctx -> tlsext_tick_aes_key FIELD 10 tctx -> tlsext_tick_aes_key LEAF_NODE 11 tctx LEAF_NODE 11 -> LEAF_NODE 11 tlsext_tick_aes_key LEAF_NODE 9 , ARGUMENT 9 etick + 16 FIELD 10 etick LEAF_NODE 11 etick LEAF_NODE 10 + FIELD 10 16 LEAF_NODE 11 16 LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 mlen = HMAC_size ( & hctx ) ; EXPR 4 mlen = HMAC_size ( & hctx ) ASSIGN 5 mlen = HMAC_size ( & hctx ) LVAL 6 mlen FIELD 7 mlen LEAF_NODE 8 mlen ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 HMAC_size ( & hctx ) FUNCTION_CALL 7 HMAC_size ( & hctx ) CALLEE 8 HMAC_size LEAF_NODE 9 HMAC_size LEAF_NODE 8 ( ARGUMENT 8 & hctx UNARY_EXPR 9 & hctx UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 hctx LEAF_NODE 11 hctx LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 mlen < 0 EXPR 5 mlen < 0 FIELD 6 mlen LEAF_NODE 7 mlen REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 EVP_CIPHER_CTX_cleanup ( & ctx ) ; EXPR 7 EVP_CIPHER_CTX_cleanup ( & ctx ) FUNCTION_CALL 8 EVP_CIPHER_CTX_cleanup ( & ctx ) CALLEE 9 EVP_CIPHER_CTX_cleanup LEAF_NODE 10 EVP_CIPHER_CTX_cleanup LEAF_NODE 9 ( ARGUMENT 9 & ctx UNARY_EXPR 10 & ctx UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 ctx LEAF_NODE 12 ctx LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 eticklen -= mlen ; EXPR 4 eticklen -= mlen ASSIGN 5 eticklen -= mlen LVAL 6 eticklen FIELD 7 eticklen LEAF_NODE 8 eticklen ASSIGN_OP 6 -= LEAF_NODE 7 -= RVAL 6 mlen FIELD 7 mlen LEAF_NODE 8 mlen LEAF_NODE 4 ; EXPR_STATEMENT 3 HMAC_Update ( & hctx , etick , eticklen ) ; EXPR 4 HMAC_Update ( & hctx , etick , eticklen ) FUNCTION_CALL 5 HMAC_Update ( & hctx , etick , eticklen ) CALLEE 6 HMAC_Update LEAF_NODE 7 HMAC_Update LEAF_NODE 6 ( ARGUMENT 6 & hctx UNARY_EXPR 7 & hctx UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 hctx LEAF_NODE 9 hctx LEAF_NODE 6 , ARGUMENT 6 etick FIELD 7 etick LEAF_NODE 8 etick LEAF_NODE 6 , ARGUMENT 6 eticklen FIELD 7 eticklen LEAF_NODE 8 eticklen LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 HMAC_Final ( & hctx , tick_hmac , NULL ) ; EXPR 4 HMAC_Final ( & hctx , tick_hmac , NULL ) FUNCTION_CALL 5 HMAC_Final ( & hctx , tick_hmac , NULL ) CALLEE 6 HMAC_Final LEAF_NODE 7 HMAC_Final LEAF_NODE 6 ( ARGUMENT 6 & hctx UNARY_EXPR 7 & hctx UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 hctx LEAF_NODE 9 hctx LEAF_NODE 6 , ARGUMENT 6 tick_hmac FIELD 7 tick_hmac LEAF_NODE 8 tick_hmac LEAF_NODE 6 , ARGUMENT 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 HMAC_CTX_cleanup ( & hctx ) ; EXPR 4 HMAC_CTX_cleanup ( & hctx ) FUNCTION_CALL 5 HMAC_CTX_cleanup ( & hctx ) CALLEE 6 HMAC_CTX_cleanup LEAF_NODE 7 HMAC_CTX_cleanup LEAF_NODE 6 ( ARGUMENT 6 & hctx UNARY_EXPR 7 & hctx UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 hctx LEAF_NODE 9 hctx LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CRYPTO_memcmp ( tick_hmac , etick + eticklen , mlen ) EXPR 5 CRYPTO_memcmp ( tick_hmac , etick + eticklen , mlen ) FUNCTION_CALL 6 CRYPTO_memcmp ( tick_hmac , etick + eticklen , mlen ) CALLEE 7 CRYPTO_memcmp LEAF_NODE 8 CRYPTO_memcmp LEAF_NODE 7 ( ARGUMENT 7 tick_hmac FIELD 8 tick_hmac LEAF_NODE 9 tick_hmac LEAF_NODE 7 , ARGUMENT 7 etick + eticklen FIELD 8 etick LEAF_NODE 9 etick LEAF_NODE 8 + FIELD 8 eticklen LEAF_NODE 9 eticklen LEAF_NODE 7 , ARGUMENT 7 mlen FIELD 8 mlen LEAF_NODE 9 mlen LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 2 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 2 EXPR 7 2 FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 6 ; EXPR_STATEMENT 3 p = etick + 16 + EVP_CIPHER_CTX_iv_length ( & ctx ) ; EXPR 4 p = etick + 16 + EVP_CIPHER_CTX_iv_length ( & ctx ) ASSIGN 5 p = etick + 16 + EVP_CIPHER_CTX_iv_length ( & ctx ) LVAL 6 p FIELD 7 p LEAF_NODE 8 p ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 etick + 16 + EVP_CIPHER_CTX_iv_length ( & ctx ) FIELD 7 etick LEAF_NODE 8 etick LEAF_NODE 7 + FIELD 7 16 LEAF_NODE 8 16 LEAF_NODE 7 + FUNCTION_CALL 7 EVP_CIPHER_CTX_iv_length ( & ctx ) CALLEE 8 EVP_CIPHER_CTX_iv_length LEAF_NODE 9 EVP_CIPHER_CTX_iv_length LEAF_NODE 8 ( ARGUMENT 8 & ctx UNARY_EXPR 9 & ctx UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 ctx LEAF_NODE 11 ctx LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 eticklen -= 16 + EVP_CIPHER_CTX_iv_length ( & ctx ) ; EXPR 4 eticklen -= 16 + EVP_CIPHER_CTX_iv_length ( & ctx ) ASSIGN 5 eticklen -= 16 + EVP_CIPHER_CTX_iv_length ( & ctx ) LVAL 6 eticklen FIELD 7 eticklen LEAF_NODE 8 eticklen ASSIGN_OP 6 -= LEAF_NODE 7 -= RVAL 6 16 + EVP_CIPHER_CTX_iv_length ( & ctx ) FIELD 7 16 LEAF_NODE 8 16 LEAF_NODE 7 + FUNCTION_CALL 7 EVP_CIPHER_CTX_iv_length ( & ctx ) CALLEE 8 EVP_CIPHER_CTX_iv_length LEAF_NODE 9 EVP_CIPHER_CTX_iv_length LEAF_NODE 8 ( ARGUMENT 8 & ctx UNARY_EXPR 9 & ctx UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 ctx LEAF_NODE 11 ctx LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 sdec = OPENSSL_malloc ( eticklen ) ; EXPR 4 sdec = OPENSSL_malloc ( eticklen ) ASSIGN 5 sdec = OPENSSL_malloc ( eticklen ) LVAL 6 sdec FIELD 7 sdec LEAF_NODE 8 sdec ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 OPENSSL_malloc ( eticklen ) FUNCTION_CALL 7 OPENSSL_malloc ( eticklen ) CALLEE 8 OPENSSL_malloc LEAF_NODE 9 OPENSSL_malloc LEAF_NODE 8 ( ARGUMENT 8 eticklen FIELD 9 eticklen LEAF_NODE 10 eticklen LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! sdec EXPR 5 ! sdec UNARY_EXPR 6 ! sdec UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 sdec LEAF_NODE 8 sdec LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 EVP_CIPHER_CTX_cleanup ( & ctx ) ; EXPR 7 EVP_CIPHER_CTX_cleanup ( & ctx ) FUNCTION_CALL 8 EVP_CIPHER_CTX_cleanup ( & ctx ) CALLEE 9 EVP_CIPHER_CTX_cleanup LEAF_NODE 10 EVP_CIPHER_CTX_cleanup LEAF_NODE 9 ( ARGUMENT 9 & ctx UNARY_EXPR 10 & ctx UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 ctx LEAF_NODE 12 ctx LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 EVP_DecryptUpdate ( & ctx , sdec , & slen , p , eticklen ) ; EXPR 4 EVP_DecryptUpdate ( & ctx , sdec , & slen , p , eticklen ) FUNCTION_CALL 5 EVP_DecryptUpdate ( & ctx , sdec , & slen , p , eticklen ) CALLEE 6 EVP_DecryptUpdate LEAF_NODE 7 EVP_DecryptUpdate LEAF_NODE 6 ( ARGUMENT 6 & ctx UNARY_EXPR 7 & ctx UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 ctx LEAF_NODE 9 ctx LEAF_NODE 6 , ARGUMENT 6 sdec FIELD 7 sdec LEAF_NODE 8 sdec LEAF_NODE 6 , ARGUMENT 6 & slen UNARY_EXPR 7 & slen UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 slen LEAF_NODE 9 slen LEAF_NODE 6 , ARGUMENT 6 p FIELD 7 p LEAF_NODE 8 p LEAF_NODE 6 , ARGUMENT 6 eticklen FIELD 7 eticklen LEAF_NODE 8 eticklen LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 EVP_DecryptFinal ( & ctx , sdec + slen , & mlen ) <= 0 EXPR 5 EVP_DecryptFinal ( & ctx , sdec + slen , & mlen ) <= 0 FUNCTION_CALL 6 EVP_DecryptFinal ( & ctx , sdec + slen , & mlen ) CALLEE 7 EVP_DecryptFinal LEAF_NODE 8 EVP_DecryptFinal LEAF_NODE 7 ( ARGUMENT 7 & ctx UNARY_EXPR 8 & ctx UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 ctx LEAF_NODE 10 ctx LEAF_NODE 7 , ARGUMENT 7 sdec + slen FIELD 8 sdec LEAF_NODE 9 sdec LEAF_NODE 8 + FIELD 8 slen LEAF_NODE 9 slen LEAF_NODE 7 , ARGUMENT 7 & mlen UNARY_EXPR 8 & mlen UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 mlen LEAF_NODE 10 mlen LEAF_NODE 7 ) REL_OPERATOR 6 <= LEAF_NODE 7 <= FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 2 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 2 EXPR 7 2 FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 6 ; EXPR_STATEMENT 3 slen += mlen ; EXPR 4 slen += mlen ASSIGN 5 slen += mlen LVAL 6 slen FIELD 7 slen LEAF_NODE 8 slen ASSIGN_OP 6 += LEAF_NODE 7 += RVAL 6 mlen FIELD 7 mlen LEAF_NODE 8 mlen LEAF_NODE 4 ; EXPR_STATEMENT 3 EVP_CIPHER_CTX_cleanup ( & ctx ) ; EXPR 4 EVP_CIPHER_CTX_cleanup ( & ctx ) FUNCTION_CALL 5 EVP_CIPHER_CTX_cleanup ( & ctx ) CALLEE 6 EVP_CIPHER_CTX_cleanup LEAF_NODE 7 EVP_CIPHER_CTX_cleanup LEAF_NODE 6 ( ARGUMENT 6 & ctx UNARY_EXPR 7 & ctx UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 ctx LEAF_NODE 9 ctx LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 p = sdec ; EXPR 4 p = sdec ASSIGN 5 p = sdec LVAL 6 p FIELD 7 p LEAF_NODE 8 p ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 sdec FIELD 7 sdec LEAF_NODE 8 sdec LEAF_NODE 4 ; EXPR_STATEMENT 3 sess = d2i_SSL_SESSION ( NULL , & p , slen ) ; EXPR 4 sess = d2i_SSL_SESSION ( NULL , & p , slen ) ASSIGN 5 sess = d2i_SSL_SESSION ( NULL , & p , slen ) LVAL 6 sess FIELD 7 sess LEAF_NODE 8 sess ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 d2i_SSL_SESSION ( NULL , & p , slen ) FUNCTION_CALL 7 d2i_SSL_SESSION ( NULL , & p , slen ) CALLEE 8 d2i_SSL_SESSION LEAF_NODE 9 d2i_SSL_SESSION LEAF_NODE 8 ( ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 , ARGUMENT 8 & p UNARY_EXPR 9 & p UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 p LEAF_NODE 11 p LEAF_NODE 8 , ARGUMENT 8 slen FIELD 9 slen LEAF_NODE 10 slen LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 OPENSSL_free ( sdec ) ; EXPR 4 OPENSSL_free ( sdec ) FUNCTION_CALL 5 OPENSSL_free ( sdec ) CALLEE 6 OPENSSL_free LEAF_NODE 7 OPENSSL_free LEAF_NODE 6 ( ARGUMENT 6 sdec FIELD 7 sdec LEAF_NODE 8 sdec LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 sess EXPR 5 sess FIELD 6 sess LEAF_NODE 7 sess LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 sesslen EXPR 8 sesslen FIELD 9 sesslen LEAF_NODE 10 sesslen LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 memcpy ( sess -> session_id , sess_id , sesslen ) ; EXPR 9 memcpy ( sess -> session_id , sess_id , sesslen ) FUNCTION_CALL 10 memcpy ( sess -> session_id , sess_id , sesslen ) CALLEE 11 memcpy LEAF_NODE 12 memcpy LEAF_NODE 11 ( ARGUMENT 11 sess -> session_id FIELD 12 sess -> session_id LEAF_NODE 13 sess LEAF_NODE 13 -> LEAF_NODE 13 session_id LEAF_NODE 11 , ARGUMENT 11 sess_id FIELD 12 sess_id LEAF_NODE 13 sess_id LEAF_NODE 11 , ARGUMENT 11 sesslen FIELD 12 sesslen LEAF_NODE 13 sesslen LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 6 sess -> session_id_length = sesslen ; EXPR 7 sess -> session_id_length = sesslen ASSIGN 8 sess -> session_id_length = sesslen LVAL 9 sess -> session_id_length FIELD 10 sess -> session_id_length LEAF_NODE 11 sess LEAF_NODE 11 -> LEAF_NODE 11 session_id_length ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 sesslen FIELD 10 sesslen LEAF_NODE 11 sesslen LEAF_NODE 7 ; EXPR_STATEMENT 6 * psess = sess ; EXPR 7 * psess = sess ASSIGN 8 * psess = sess LVAL 9 * psess UNARY_EXPR 10 * psess UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 psess LEAF_NODE 12 psess ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 sess FIELD 10 sess LEAF_NODE 11 sess LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 renew_ticket EXPR 8 renew_ticket FIELD 9 renew_ticket LEAF_NODE 10 renew_ticket LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return 4 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 4 EXPR 10 4 FIELD 11 4 LEAF_NODE 12 4 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 JUMP_STATEMENT 8 return 3 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 3 EXPR 10 3 FIELD 11 3 LEAF_NODE 12 3 LEAF_NODE 9 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ERR_clear_error ( ) ; EXPR 4 ERR_clear_error ( ) FUNCTION_CALL 5 ERR_clear_error ( ) CALLEE 6 ERR_clear_error LEAF_NODE 7 ERR_clear_error LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 2 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 2 EXPR 5 2 FIELD 6 2 LEAF_NODE 7 2 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 191, "project": "openssl_ast_vul_function_test_25", "target": 1}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; SIMPLE_DECL 1 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } ; CLASS_DEF 2 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } CLASS_DEF 3 struct testdata BASE_CLASSES { char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; } LEAF_NODE 4 struct CLASS_NAME 4 testdata LEAF_NODE 5 testdata LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char * data ; int type ; int expected_type ; int check_result ; time_t t ; int cmp_result ; int convert_result ; SIMPLE_DECL 5 char * data ; VAR_DECL 6 char * data TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 int type ; VAR_DECL 6 int type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 type LEAF_NODE 8 type LEAF_NODE 6 ; SIMPLE_DECL 5 int expected_type ; VAR_DECL 6 int expected_type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 expected_type LEAF_NODE 8 expected_type LEAF_NODE 6 ; SIMPLE_DECL 5 int check_result ; VAR_DECL 6 int check_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 check_result LEAF_NODE 8 check_result LEAF_NODE 6 ; SIMPLE_DECL 5 time_t t ; VAR_DECL 6 time_t t TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 t LEAF_NODE 8 t LEAF_NODE 6 ; SIMPLE_DECL 5 int cmp_result ; VAR_DECL 6 int cmp_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 cmp_result LEAF_NODE 8 cmp_result LEAF_NODE 6 ; SIMPLE_DECL 5 int convert_result ; VAR_DECL 6 int convert_result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 convert_result LEAF_NODE 8 convert_result LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } ; CLASS_DEF 2 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } CLASS_DEF 3 struct compare_testdata BASE_CLASSES { ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; } LEAF_NODE 4 struct CLASS_NAME 4 compare_testdata LEAF_NODE 5 compare_testdata LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ASN1_TIME t1 ; ASN1_TIME t2 ; int result ; SIMPLE_DECL 5 ASN1_TIME t1 ; VAR_DECL 6 ASN1_TIME t1 TYPE 7 ASN1_TIME TYPE_NAME 8 ASN1_TIME LEAF_NODE 9 ASN1_TIME NAME 7 t1 LEAF_NODE 8 t1 LEAF_NODE 6 ; SIMPLE_DECL 5 ASN1_TIME t2 ; VAR_DECL 6 ASN1_TIME t2 TYPE 7 ASN1_TIME TYPE_NAME 8 ASN1_TIME LEAF_NODE 9 ASN1_TIME NAME 7 t2 LEAF_NODE 8 t2 LEAF_NODE 6 ; SIMPLE_DECL 5 int result ; VAR_DECL 6 int result TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 result LEAF_NODE 8 result LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TODAY_GEN_STR ; TODAY_GEN_STR = \"20170825000000Z\" ; VAR_DECL 2 unsigned char [ ] TODAY_GEN_STR ; TODAY_GEN_STR = \"20170825000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TODAY_GEN_STR LEAF_NODE 4 TODAY_GEN_STR LEAF_NODE 3 ; INIT 3 TODAY_GEN_STR = \"20170825000000Z\" ASSIGN 4 TODAY_GEN_STR = \"20170825000000Z\" LVAL 5 TODAY_GEN_STR NAME 6 TODAY_GEN_STR LEAF_NODE 7 TODAY_GEN_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"20170825000000Z\" FIELD 6 \"20170825000000Z\" LEAF_NODE 7 \"20170825000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TOMORROW_GEN_STR ; TOMORROW_GEN_STR = \"20170826000000Z\" ; VAR_DECL 2 unsigned char [ ] TOMORROW_GEN_STR ; TOMORROW_GEN_STR = \"20170826000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TOMORROW_GEN_STR LEAF_NODE 4 TOMORROW_GEN_STR LEAF_NODE 3 ; INIT 3 TOMORROW_GEN_STR = \"20170826000000Z\" ASSIGN 4 TOMORROW_GEN_STR = \"20170826000000Z\" LVAL 5 TOMORROW_GEN_STR NAME 6 TOMORROW_GEN_STR LEAF_NODE 7 TOMORROW_GEN_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"20170826000000Z\" FIELD 6 \"20170826000000Z\" LEAF_NODE 7 \"20170826000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TODAY_UTC_STR ; TODAY_UTC_STR = \"170825000000Z\" ; VAR_DECL 2 unsigned char [ ] TODAY_UTC_STR ; TODAY_UTC_STR = \"170825000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TODAY_UTC_STR LEAF_NODE 4 TODAY_UTC_STR LEAF_NODE 3 ; INIT 3 TODAY_UTC_STR = \"170825000000Z\" ASSIGN 4 TODAY_UTC_STR = \"170825000000Z\" LVAL 5 TODAY_UTC_STR NAME 6 TODAY_UTC_STR LEAF_NODE 7 TODAY_UTC_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"170825000000Z\" FIELD 6 \"170825000000Z\" LEAF_NODE 7 \"170825000000Z\" LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned char [ ] TOMORROW_UTC_STR ; TOMORROW_UTC_STR = \"170826000000Z\" ; VAR_DECL 2 unsigned char [ ] TOMORROW_UTC_STR ; TOMORROW_UTC_STR = \"170826000000Z\" TYPE 3 unsigned char [ ] TYPE_NAME 4 unsigned char LEAF_NODE 5 unsigned LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 TOMORROW_UTC_STR LEAF_NODE 4 TOMORROW_UTC_STR LEAF_NODE 3 ; INIT 3 TOMORROW_UTC_STR = \"170826000000Z\" ASSIGN 4 TOMORROW_UTC_STR = \"170826000000Z\" LVAL 5 TOMORROW_UTC_STR NAME 6 TOMORROW_UTC_STR LEAF_NODE 7 TOMORROW_UTC_STR ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"170826000000Z\" FIELD 6 \"170826000000Z\" LEAF_NODE 7 \"170826000000Z\" LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_pos LEAF_NODE 3 test_table_pos PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_pos , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_pos , idx ) EXPR 5 test_table ( tbl_testdata_pos , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_pos , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_pos FIELD 8 tbl_testdata_pos LEAF_NODE 9 tbl_testdata_pos LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_neg LEAF_NODE 3 test_table_neg PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_neg , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_neg , idx ) EXPR 5 test_table ( tbl_testdata_neg , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_neg , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_neg FIELD 8 tbl_testdata_neg LEAF_NODE 9 tbl_testdata_neg LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_pos_64bit LEAF_NODE 3 test_table_pos_64bit PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_pos_64bit , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_pos_64bit , idx ) EXPR 5 test_table ( tbl_testdata_pos_64bit , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_pos_64bit , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_pos_64bit FIELD 8 tbl_testdata_pos_64bit LEAF_NODE 9 tbl_testdata_pos_64bit LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_neg_64bit LEAF_NODE 3 test_table_neg_64bit PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return test_table ( tbl_testdata_neg_64bit , idx ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 test_table ( tbl_testdata_neg_64bit , idx ) EXPR 5 test_table ( tbl_testdata_neg_64bit , idx ) FUNCTION_CALL 6 test_table ( tbl_testdata_neg_64bit , idx ) CALLEE 7 test_table LEAF_NODE 8 test_table LEAF_NODE 7 ( ARGUMENT 7 tbl_testdata_neg_64bit FIELD 8 tbl_testdata_neg_64bit LEAF_NODE 9 tbl_testdata_neg_64bit LEAF_NODE 7 , ARGUMENT 7 idx FIELD 8 idx LEAF_NODE 9 idx LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 test_table_compare LEAF_NODE 3 test_table_compare PARAMETER_LIST 2 ( int idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 int idx TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 idx LEAF_NODE 5 idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct compare_testdata * td ; td = & tbl_compare_testdata [ idx ] ; VAR_DECL 4 struct compare_testdata * td ; td = & tbl_compare_testdata [ idx ] TYPE 5 struct compare_testdata * TYPE_NAME 6 struct compare_testdata LEAF_NODE 7 struct LEAF_NODE 7 compare_testdata POINTER 6 * LEAF_NODE 7 * NAME 5 td LEAF_NODE 6 td LEAF_NODE 5 ; INIT 5 td = & tbl_compare_testdata [ idx ] ASSIGN 6 td = & tbl_compare_testdata [ idx ] LVAL 7 td NAME 8 td LEAF_NODE 9 td ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & tbl_compare_testdata [ idx ] UNARY_EXPR 8 & tbl_compare_testdata [ idx ] UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 tbl_compare_testdata [ idx ] LEAF_NODE 10 tbl_compare_testdata LEAF_NODE 10 [ EXPR 10 idx FIELD 11 idx LEAF_NODE 12 idx LEAF_NODE 10 ] LEAF_NODE 4 ; JUMP_STATEMENT 3 return TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) EXPR 5 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) FUNCTION_CALL 6 TEST_int_eq ( ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) , td -> result ) CALLEE 7 TEST_int_eq LEAF_NODE 8 TEST_int_eq LEAF_NODE 7 ( ARGUMENT 7 ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) FUNCTION_CALL 8 ASN1_TIME_compare ( & td -> t1 , & td -> t2 ) CALLEE 9 ASN1_TIME_compare LEAF_NODE 10 ASN1_TIME_compare LEAF_NODE 9 ( ARGUMENT 9 & td -> t1 UNARY_EXPR 10 & td -> t1 UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 td -> t1 LEAF_NODE 12 td LEAF_NODE 12 -> LEAF_NODE 12 t1 LEAF_NODE 9 , ARGUMENT 9 & td -> t2 UNARY_EXPR 10 & td -> t2 UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 td -> t2 LEAF_NODE 12 td LEAF_NODE 12 -> LEAF_NODE 12 t2 LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 td -> result FIELD 8 td -> result LEAF_NODE 9 td LEAF_NODE 9 -> LEAF_NODE 9 result LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 } SIMPLE_DECL 1 DWORD CRYPTO_THREAD_LOCAL ; VAR_DECL 2 DWORD CRYPTO_THREAD_LOCAL TYPE 3 DWORD TYPE_NAME 4 DWORD LEAF_NODE 5 DWORD NAME 3 CRYPTO_THREAD_LOCAL LEAF_NODE 4 CRYPTO_THREAD_LOCAL LEAF_NODE 2 ; SIMPLE_DECL 1 CRYPTO_THREAD_LOCAL ctxkey ; VAR_DECL 2 CRYPTO_THREAD_LOCAL ctxkey TYPE 3 CRYPTO_THREAD_LOCAL TYPE_NAME 4 CRYPTO_THREAD_LOCAL LEAF_NODE 5 CRYPTO_THREAD_LOCAL NAME 3 ctxkey LEAF_NODE 4 ctxkey LEAF_NODE 2 ; SIMPLE_DECL 1 CRYPTO_THREAD_LOCAL poolkey ; VAR_DECL 2 CRYPTO_THREAD_LOCAL poolkey TYPE 3 CRYPTO_THREAD_LOCAL TYPE_NAME 4 CRYPTO_THREAD_LOCAL LEAF_NODE 5 CRYPTO_THREAD_LOCAL NAME 3 poolkey LEAF_NODE 4 poolkey LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_wait_ctx_st ASYNC_WAIT_CTX ; VAR_DECL 2 struct async_wait_ctx_st ASYNC_WAIT_CTX TYPE 3 struct async_wait_ctx_st TYPE_NAME 4 struct async_wait_ctx_st LEAF_NODE 5 struct LEAF_NODE 5 async_wait_ctx_st NAME 3 ASYNC_WAIT_CTX LEAF_NODE 4 ASYNC_WAIT_CTX LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_job_st ASYNC_JOB ; VAR_DECL 2 struct async_job_st ASYNC_JOB TYPE 3 struct async_job_st TYPE_NAME 4 struct async_job_st LEAF_NODE 5 struct LEAF_NODE 5 async_job_st NAME 3 ASYNC_JOB LEAF_NODE 4 ASYNC_JOB LEAF_NODE 2 ; SIMPLE_DECL 1 struct ucontext_t BASE_CLASSES { unsigned long int __ctx ; __ctx __ctx ( uc_flags ) ; struct ucontext_t * uc_link ; stack_t uc_stack ; mcontext_t uc_mcontext ; sigset_t uc_sigmask ; struct _libc_fpstate __fpregs_mem ; } ucontext_t ; VAR_DECL 2 struct ucontext_t BASE_CLASSES { unsigned long int __ctx ; __ctx __ctx ( uc_flags ) ; struct ucontext_t * uc_link ; stack_t uc_stack ; mcontext_t uc_mcontext ; sigset_t uc_sigmask ; struct _libc_fpstate __fpregs_mem ; } ucontext_t TYPE 3 struct ucontext_t BASE_CLASSES { unsigned long int __ctx ; __ctx __ctx ( uc_flags ) ; struct ucontext_t * uc_link ; stack_t uc_stack ; mcontext_t uc_mcontext ; sigset_t uc_sigmask ; struct _libc_fpstate __fpregs_mem ; } CLASS_DEF 4 struct ucontext_t BASE_CLASSES { unsigned long int __ctx ; __ctx __ctx ( uc_flags ) ; struct ucontext_t * uc_link ; stack_t uc_stack ; mcontext_t uc_mcontext ; sigset_t uc_sigmask ; struct _libc_fpstate __fpregs_mem ; } LEAF_NODE 5 struct CLASS_NAME 5 ucontext_t LEAF_NODE 6 ucontext_t LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned long int __ctx ; __ctx __ctx ( uc_flags ) ; struct ucontext_t * uc_link ; stack_t uc_stack ; mcontext_t uc_mcontext ; sigset_t uc_sigmask ; struct _libc_fpstate __fpregs_mem ; LEAF_NODE 6 unsigned LEAF_NODE 6 long SIMPLE_DECL 6 int __ctx ; __ctx __ctx ( uc_flags ) ; VAR_DECL 7 int __ctx ; __ctx __ctx ( uc_flags ) TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 __ctx LEAF_NODE 9 __ctx LEAF_NODE 8 ; INIT 8 __ctx __ctx ( uc_flags ) ASSIGN 9 __ctx __ctx ( uc_flags ) LVAL 10 __ctx NAME 11 __ctx LEAF_NODE 12 __ctx ASSIGN_OP 10 __ctx NAME 11 __ctx LEAF_NODE 12 __ctx RVAL 10 ( uc_flags ) LEAF_NODE 11 ( EXPR 11 uc_flags FIELD 12 uc_flags LEAF_NODE 13 uc_flags LEAF_NODE 11 ) LEAF_NODE 7 ; SIMPLE_DECL 6 struct ucontext_t * uc_link ; VAR_DECL 7 struct ucontext_t * uc_link TYPE 8 struct ucontext_t * TYPE_NAME 9 struct ucontext_t LEAF_NODE 10 struct LEAF_NODE 10 ucontext_t POINTER 9 * LEAF_NODE 10 * NAME 8 uc_link LEAF_NODE 9 uc_link LEAF_NODE 7 ; SIMPLE_DECL 6 stack_t uc_stack ; VAR_DECL 7 stack_t uc_stack TYPE 8 stack_t TYPE_NAME 9 stack_t LEAF_NODE 10 stack_t NAME 8 uc_stack LEAF_NODE 9 uc_stack LEAF_NODE 7 ; SIMPLE_DECL 6 mcontext_t uc_mcontext ; VAR_DECL 7 mcontext_t uc_mcontext TYPE 8 mcontext_t TYPE_NAME 9 mcontext_t LEAF_NODE 10 mcontext_t NAME 8 uc_mcontext LEAF_NODE 9 uc_mcontext LEAF_NODE 7 ; SIMPLE_DECL 6 sigset_t uc_sigmask ; VAR_DECL 7 sigset_t uc_sigmask TYPE 8 sigset_t TYPE_NAME 9 sigset_t LEAF_NODE 10 sigset_t NAME 8 uc_sigmask LEAF_NODE 9 uc_sigmask LEAF_NODE 7 ; SIMPLE_DECL 6 struct _libc_fpstate __fpregs_mem ; VAR_DECL 7 struct _libc_fpstate __fpregs_mem TYPE 8 struct _libc_fpstate TYPE_NAME 9 struct _libc_fpstate LEAF_NODE 10 struct LEAF_NODE 10 _libc_fpstate NAME 8 __fpregs_mem LEAF_NODE 9 __fpregs_mem LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 ucontext_t LEAF_NODE 4 ucontext_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_fibre_st BASE_CLASSES { ucontext_t fibre ; jmp_buf env ; int env_init ; } async_fibre ; VAR_DECL 2 struct async_fibre_st BASE_CLASSES { ucontext_t fibre ; jmp_buf env ; int env_init ; } async_fibre TYPE 3 struct async_fibre_st BASE_CLASSES { ucontext_t fibre ; jmp_buf env ; int env_init ; } CLASS_DEF 4 struct async_fibre_st BASE_CLASSES { ucontext_t fibre ; jmp_buf env ; int env_init ; } LEAF_NODE 5 struct CLASS_NAME 5 async_fibre_st LEAF_NODE 6 async_fibre_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ucontext_t fibre ; jmp_buf env ; int env_init ; SIMPLE_DECL 6 ucontext_t fibre ; VAR_DECL 7 ucontext_t fibre TYPE 8 ucontext_t TYPE_NAME 9 ucontext_t LEAF_NODE 10 ucontext_t NAME 8 fibre LEAF_NODE 9 fibre LEAF_NODE 7 ; SIMPLE_DECL 6 jmp_buf env ; VAR_DECL 7 jmp_buf env TYPE 8 jmp_buf TYPE_NAME 9 jmp_buf LEAF_NODE 10 jmp_buf NAME 8 env LEAF_NODE 9 env LEAF_NODE 7 ; SIMPLE_DECL 6 int env_init ; VAR_DECL 7 int env_init TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 env_init LEAF_NODE 9 env_init LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 async_fibre LEAF_NODE 4 async_fibre LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_wait_ctx_st BASE_CLASSES { struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; ASYNC_callback_fn callback ; void * callback_arg ; int status ; } ; CLASS_DEF 2 struct async_wait_ctx_st BASE_CLASSES { struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; ASYNC_callback_fn callback ; void * callback_arg ; int status ; } CLASS_DEF 3 struct async_wait_ctx_st BASE_CLASSES { struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; ASYNC_callback_fn callback ; void * callback_arg ; int status ; } LEAF_NODE 4 struct CLASS_NAME 4 async_wait_ctx_st LEAF_NODE 5 async_wait_ctx_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct fd_lookup_st * fds ; size_t numadd ; size_t numdel ; ASYNC_callback_fn callback ; void * callback_arg ; int status ; SIMPLE_DECL 5 struct fd_lookup_st * fds ; VAR_DECL 6 struct fd_lookup_st * fds TYPE 7 struct fd_lookup_st * TYPE_NAME 8 struct fd_lookup_st LEAF_NODE 9 struct LEAF_NODE 9 fd_lookup_st POINTER 8 * LEAF_NODE 9 * NAME 7 fds LEAF_NODE 8 fds LEAF_NODE 6 ; SIMPLE_DECL 5 size_t numadd ; VAR_DECL 6 size_t numadd TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 numadd LEAF_NODE 8 numadd LEAF_NODE 6 ; SIMPLE_DECL 5 size_t numdel ; VAR_DECL 6 size_t numdel TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 numdel LEAF_NODE 8 numdel LEAF_NODE 6 ; SIMPLE_DECL 5 ASYNC_callback_fn callback ; VAR_DECL 6 ASYNC_callback_fn callback TYPE 7 ASYNC_callback_fn TYPE_NAME 8 ASYNC_callback_fn LEAF_NODE 9 ASYNC_callback_fn NAME 7 callback LEAF_NODE 8 callback LEAF_NODE 6 ; SIMPLE_DECL 5 void * callback_arg ; VAR_DECL 6 void * callback_arg TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 callback_arg LEAF_NODE 8 callback_arg LEAF_NODE 6 ; SIMPLE_DECL 5 int status ; VAR_DECL 6 int status TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 status LEAF_NODE 8 status LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_job_st BASE_CLASSES { async_fibre fibrectx ; int ( * func ) ( void * ) ; void * funcargs ; int ret ; int status ; ASYNC_WAIT_CTX * waitctx ; } ; CLASS_DEF 2 struct async_job_st BASE_CLASSES { async_fibre fibrectx ; int ( * func ) ( void * ) ; void * funcargs ; int ret ; int status ; ASYNC_WAIT_CTX * waitctx ; } CLASS_DEF 3 struct async_job_st BASE_CLASSES { async_fibre fibrectx ; int ( * func ) ( void * ) ; void * funcargs ; int ret ; int status ; ASYNC_WAIT_CTX * waitctx ; } LEAF_NODE 4 struct CLASS_NAME 4 async_job_st LEAF_NODE 5 async_job_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 async_fibre fibrectx ; int ( * func ) ( void * ) ; void * funcargs ; int ret ; int status ; ASYNC_WAIT_CTX * waitctx ; SIMPLE_DECL 5 async_fibre fibrectx ; VAR_DECL 6 async_fibre fibrectx TYPE 7 async_fibre TYPE_NAME 8 async_fibre LEAF_NODE 9 async_fibre NAME 7 fibrectx LEAF_NODE 8 fibrectx LEAF_NODE 6 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 func LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 void LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 void * funcargs ; VAR_DECL 6 void * funcargs TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 funcargs LEAF_NODE 8 funcargs LEAF_NODE 6 ; SIMPLE_DECL 5 int ret ; VAR_DECL 6 int ret TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ret LEAF_NODE 8 ret LEAF_NODE 6 ; SIMPLE_DECL 5 int status ; VAR_DECL 6 int status TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 status LEAF_NODE 8 status LEAF_NODE 6 ; SIMPLE_DECL 5 ASYNC_WAIT_CTX * waitctx ; VAR_DECL 6 ASYNC_WAIT_CTX * waitctx TYPE 7 ASYNC_WAIT_CTX * TYPE_NAME 8 ASYNC_WAIT_CTX LEAF_NODE 9 ASYNC_WAIT_CTX POINTER 8 * LEAF_NODE 9 * NAME 7 waitctx LEAF_NODE 8 waitctx LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_pool_st BASE_CLASSES { STACK_OF ( ASYNC_JOB ) * jobs ; size_t curr_size ; size_t max_size ; } ; CLASS_DEF 2 struct async_pool_st BASE_CLASSES { STACK_OF ( ASYNC_JOB ) * jobs ; size_t curr_size ; size_t max_size ; } CLASS_DEF 3 struct async_pool_st BASE_CLASSES { STACK_OF ( ASYNC_JOB ) * jobs ; size_t curr_size ; size_t max_size ; } LEAF_NODE 4 struct CLASS_NAME 4 async_pool_st LEAF_NODE 5 async_pool_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 STACK_OF ( ASYNC_JOB ) * jobs ; size_t curr_size ; size_t max_size ; LEAF_NODE 5 STACK_OF LEAF_NODE 5 ( LEAF_NODE 5 ASYNC_JOB LEAF_NODE 5 ) LEAF_NODE 5 * LEAF_NODE 5 jobs LEAF_NODE 5 ; SIMPLE_DECL 5 size_t curr_size ; VAR_DECL 6 size_t curr_size TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 curr_size LEAF_NODE 8 curr_size LEAF_NODE 6 ; SIMPLE_DECL 5 size_t max_size ; VAR_DECL 6 size_t max_size TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 max_size LEAF_NODE 8 max_size LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct async_pool_st async_pool ; VAR_DECL 2 struct async_pool_st async_pool TYPE 3 struct async_pool_st TYPE_NAME 4 struct async_pool_st LEAF_NODE 5 struct LEAF_NODE 5 async_pool_st NAME 3 async_pool LEAF_NODE 4 async_pool LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 async_empty_pool LEAF_NODE 3 async_empty_pool PARAMETER_LIST 2 ( async_pool * pool ) LEAF_NODE 3 ( PARAMETER_DECL 3 async_pool * pool TYPE 4 async_pool * TYPE_NAME 5 async_pool LEAF_NODE 6 async_pool POINTER 5 * LEAF_NODE 6 * NAME 4 pool LEAF_NODE 5 pool LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 ASYNC_JOB * job ; VAR_DECL 4 ASYNC_JOB * job TYPE 5 ASYNC_JOB * TYPE_NAME 6 ASYNC_JOB LEAF_NODE 7 ASYNC_JOB POINTER 6 * LEAF_NODE 7 * NAME 5 job LEAF_NODE 6 job LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! pool || ! pool -> jobs EXPR 5 ! pool || ! pool -> jobs OR 6 ! pool || ! pool -> jobs EXPR 7 ! pool UNARY_EXPR 8 ! pool UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 pool LEAF_NODE 10 pool LEAF_NODE 7 || EXPR 7 ! pool -> jobs UNARY_EXPR 8 ! pool -> jobs UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 pool -> jobs LEAF_NODE 10 pool LEAF_NODE 10 -> LEAF_NODE 10 jobs LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return DESTINATION ; KEYWORD 6 return LEAF_NODE 7 return LEAF_NODE 6 DESTINATION LEAF_NODE 6 ; ITERATION 3 KEYWORD 4 do LEAF_NODE 5 do LEAF_NODE 4 ( CONDITION 4 job EXPR 5 job FIELD 6 job LEAF_NODE 7 job LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 job = sk_ASYNC_JOB_pop ( pool -> jobs ) ; EXPR 7 job = sk_ASYNC_JOB_pop ( pool -> jobs ) ASSIGN 8 job = sk_ASYNC_JOB_pop ( pool -> jobs ) LVAL 9 job FIELD 10 job LEAF_NODE 11 job ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 sk_ASYNC_JOB_pop ( pool -> jobs ) FUNCTION_CALL 10 sk_ASYNC_JOB_pop ( pool -> jobs ) CALLEE 11 sk_ASYNC_JOB_pop LEAF_NODE 12 sk_ASYNC_JOB_pop LEAF_NODE 11 ( ARGUMENT 11 pool -> jobs FIELD 12 pool -> jobs LEAF_NODE 13 pool LEAF_NODE 13 -> LEAF_NODE 13 jobs LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 async_job_free ( job ) ; EXPR 7 async_job_free ( job ) FUNCTION_CALL 8 async_job_free ( job ) CALLEE 9 async_job_free LEAF_NODE 10 async_job_free LEAF_NODE 9 ( ARGUMENT 9 job FIELD 10 job LEAF_NODE 11 job LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 ; LEAF_NODE 2 }", "idx": 192, "project": "openssl_ast_normal_function_test_50", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS ; VAR_DECL 2 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS TYPE 3 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } CLASS_DEF 4 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } LEAF_NODE 5 struct CLASS_NAME 5 args_st LEAF_NODE 6 args_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int size ; int argc ; char * argv ; SIMPLE_DECL 6 int size ; VAR_DECL 7 int size TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 size LEAF_NODE 9 size LEAF_NODE 7 ; SIMPLE_DECL 6 int argc ; VAR_DECL 7 int argc TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 argc LEAF_NODE 9 argc LEAF_NODE 7 ; SIMPLE_DECL 6 char * argv ; VAR_DECL 7 char * argv TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 argv LEAF_NODE 9 argv LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 ARGS LEAF_NODE 4 ARGS LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 rotate_serial LEAF_NODE 3 rotate_serial PARAMETER_LIST 2 ( const char * serialfile , const char * new_suffix , const char * old_suffix ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * serialfile TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 serialfile LEAF_NODE 5 serialfile LEAF_NODE 3 , PARAMETER_DECL 3 const char * new_suffix TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 new_suffix LEAF_NODE 5 new_suffix LEAF_NODE 3 , PARAMETER_DECL 3 const char * old_suffix TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 old_suffix LEAF_NODE 5 old_suffix LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 char EXPR_STATEMENT 3 buf [ 2 ] [ BSIZE ] ; EXPR 4 buf [ 2 ] [ BSIZE ] FIELD 5 buf [ 2 ] [ BSIZE ] LEAF_NODE 6 buf LEAF_NODE 6 [ EXPR 6 2 FIELD 7 2 LEAF_NODE 8 2 LEAF_NODE 6 ] LEAF_NODE 6 [ EXPR 6 BSIZE FIELD 7 BSIZE LEAF_NODE 8 BSIZE LEAF_NODE 6 ] LEAF_NODE 4 ; SIMPLE_DECL 3 int i , int j ; INIT_DECL_LIST 4 int i , int j VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 , VAR_DECL 5 int j TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 j LEAF_NODE 7 j LEAF_NODE 4 ; EXPR_STATEMENT 3 i = strlen ( serialfile ) + strlen ( old_suffix ) ; EXPR 4 i = strlen ( serialfile ) + strlen ( old_suffix ) ASSIGN 5 i = strlen ( serialfile ) + strlen ( old_suffix ) LVAL 6 i FIELD 7 i LEAF_NODE 8 i ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 strlen ( serialfile ) + strlen ( old_suffix ) FUNCTION_CALL 7 strlen ( serialfile ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 serialfile FIELD 9 serialfile LEAF_NODE 10 serialfile LEAF_NODE 8 ) LEAF_NODE 7 + FUNCTION_CALL 7 strlen ( old_suffix ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 old_suffix FIELD 9 old_suffix LEAF_NODE 10 old_suffix LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 j = strlen ( serialfile ) + strlen ( new_suffix ) ; EXPR 4 j = strlen ( serialfile ) + strlen ( new_suffix ) ASSIGN 5 j = strlen ( serialfile ) + strlen ( new_suffix ) LVAL 6 j FIELD 7 j LEAF_NODE 8 j ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 strlen ( serialfile ) + strlen ( new_suffix ) FUNCTION_CALL 7 strlen ( serialfile ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 serialfile FIELD 9 serialfile LEAF_NODE 10 serialfile LEAF_NODE 8 ) LEAF_NODE 7 + FUNCTION_CALL 7 strlen ( new_suffix ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 new_suffix FIELD 9 new_suffix LEAF_NODE 10 new_suffix LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 i > j EXPR 5 i > j FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 j LEAF_NODE 7 j LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 j = i ; EXPR 6 j = i ASSIGN 7 j = i LVAL 8 j FIELD 9 j LEAF_NODE 10 j ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 i FIELD 9 i LEAF_NODE 10 i LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 j + 1 >= BSIZE EXPR 5 j + 1 >= BSIZE FIELD 6 j LEAF_NODE 7 j LEAF_NODE 6 + FIELD 6 1 LEAF_NODE 7 1 REL_OPERATOR 6 >= LEAF_NODE 7 >= FIELD 6 BSIZE LEAF_NODE 7 BSIZE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 BIO_printf ( bio_err , \"file name too long\\n\" ) ; EXPR 7 BIO_printf ( bio_err , \"file name too long\\n\" ) FUNCTION_CALL 8 BIO_printf ( bio_err , \"file name too long\\n\" ) CALLEE 9 BIO_printf LEAF_NODE 10 BIO_printf LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 , ARGUMENT 9 \"file name too long\\n\" FIELD 10 \"file name too long\\n\" LEAF_NODE 11 \"file name too long\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 j = BIO_snprintf ( buf [ 0 ] , sizeof ( buf [ 0 ] ) , \"%s.%s\" , serialfile , new_suffix ) ; EXPR 4 j = BIO_snprintf ( buf [ 0 ] , sizeof ( buf [ 0 ] ) , \"%s.%s\" , serialfile , new_suffix ) ASSIGN 5 j = BIO_snprintf ( buf [ 0 ] , sizeof ( buf [ 0 ] ) , \"%s.%s\" , serialfile , new_suffix ) LVAL 6 j FIELD 7 j LEAF_NODE 8 j ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 BIO_snprintf ( buf [ 0 ] , sizeof ( buf [ 0 ] ) , \"%s.%s\" , serialfile , new_suffix ) FUNCTION_CALL 7 BIO_snprintf ( buf [ 0 ] , sizeof ( buf [ 0 ] ) , \"%s.%s\" , serialfile , new_suffix ) CALLEE 8 BIO_snprintf LEAF_NODE 9 BIO_snprintf LEAF_NODE 8 ( ARGUMENT 8 buf [ 0 ] FIELD 9 buf [ 0 ] LEAF_NODE 10 buf LEAF_NODE 10 [ EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ] LEAF_NODE 8 , ARGUMENT 8 sizeof ( buf [ 0 ] ) FUNCTION_CALL 9 sizeof ( buf [ 0 ] ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 buf [ 0 ] FIELD 11 buf [ 0 ] LEAF_NODE 12 buf LEAF_NODE 12 [ EXPR 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ] LEAF_NODE 10 ) LEAF_NODE 8 , ARGUMENT 8 \"%s.%s\" FIELD 9 \"%s.%s\" LEAF_NODE 10 \"%s.%s\" LEAF_NODE 8 , ARGUMENT 8 serialfile FIELD 9 serialfile LEAF_NODE 10 serialfile LEAF_NODE 8 , ARGUMENT 8 new_suffix FIELD 9 new_suffix LEAF_NODE 10 new_suffix LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 j = BIO_snprintf ( buf [ 1 ] , sizeof ( buf [ 1 ] ) , \"%s.%s\" , serialfile , old_suffix ) ; EXPR 4 j = BIO_snprintf ( buf [ 1 ] , sizeof ( buf [ 1 ] ) , \"%s.%s\" , serialfile , old_suffix ) ASSIGN 5 j = BIO_snprintf ( buf [ 1 ] , sizeof ( buf [ 1 ] ) , \"%s.%s\" , serialfile , old_suffix ) LVAL 6 j FIELD 7 j LEAF_NODE 8 j ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 BIO_snprintf ( buf [ 1 ] , sizeof ( buf [ 1 ] ) , \"%s.%s\" , serialfile , old_suffix ) FUNCTION_CALL 7 BIO_snprintf ( buf [ 1 ] , sizeof ( buf [ 1 ] ) , \"%s.%s\" , serialfile , old_suffix ) CALLEE 8 BIO_snprintf LEAF_NODE 9 BIO_snprintf LEAF_NODE 8 ( ARGUMENT 8 buf [ 1 ] FIELD 9 buf [ 1 ] LEAF_NODE 10 buf LEAF_NODE 10 [ EXPR 10 1 FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] LEAF_NODE 8 , ARGUMENT 8 sizeof ( buf [ 1 ] ) FUNCTION_CALL 9 sizeof ( buf [ 1 ] ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 buf [ 1 ] FIELD 11 buf [ 1 ] LEAF_NODE 12 buf LEAF_NODE 12 [ EXPR 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ] LEAF_NODE 10 ) LEAF_NODE 8 , ARGUMENT 8 \"%s.%s\" FIELD 9 \"%s.%s\" LEAF_NODE 10 \"%s.%s\" LEAF_NODE 8 , ARGUMENT 8 serialfile FIELD 9 serialfile LEAF_NODE 10 serialfile LEAF_NODE 8 , ARGUMENT 8 old_suffix FIELD 9 old_suffix LEAF_NODE 10 old_suffix LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 j = BIO_snprintf ( buf [ 0 ] , sizeof ( buf [ 0 ] ) , \"%s-%s\" , serialfile , new_suffix ) ; EXPR 4 j = BIO_snprintf ( buf [ 0 ] , sizeof ( buf [ 0 ] ) , \"%s-%s\" , serialfile , new_suffix ) ASSIGN 5 j = BIO_snprintf ( buf [ 0 ] , sizeof ( buf [ 0 ] ) , \"%s-%s\" , serialfile , new_suffix ) LVAL 6 j FIELD 7 j LEAF_NODE 8 j ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 BIO_snprintf ( buf [ 0 ] , sizeof ( buf [ 0 ] ) , \"%s-%s\" , serialfile , new_suffix ) FUNCTION_CALL 7 BIO_snprintf ( buf [ 0 ] , sizeof ( buf [ 0 ] ) , \"%s-%s\" , serialfile , new_suffix ) CALLEE 8 BIO_snprintf LEAF_NODE 9 BIO_snprintf LEAF_NODE 8 ( ARGUMENT 8 buf [ 0 ] FIELD 9 buf [ 0 ] LEAF_NODE 10 buf LEAF_NODE 10 [ EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ] LEAF_NODE 8 , ARGUMENT 8 sizeof ( buf [ 0 ] ) FUNCTION_CALL 9 sizeof ( buf [ 0 ] ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 buf [ 0 ] FIELD 11 buf [ 0 ] LEAF_NODE 12 buf LEAF_NODE 12 [ EXPR 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ] LEAF_NODE 10 ) LEAF_NODE 8 , ARGUMENT 8 \"%s-%s\" FIELD 9 \"%s-%s\" LEAF_NODE 10 \"%s-%s\" LEAF_NODE 8 , ARGUMENT 8 serialfile FIELD 9 serialfile LEAF_NODE 10 serialfile LEAF_NODE 8 , ARGUMENT 8 new_suffix FIELD 9 new_suffix LEAF_NODE 10 new_suffix LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 j = BIO_snprintf ( buf [ 1 ] , sizeof ( buf [ 1 ] ) , \"%s-%s\" , serialfile , old_suffix ) ; EXPR 4 j = BIO_snprintf ( buf [ 1 ] , sizeof ( buf [ 1 ] ) , \"%s-%s\" , serialfile , old_suffix ) ASSIGN 5 j = BIO_snprintf ( buf [ 1 ] , sizeof ( buf [ 1 ] ) , \"%s-%s\" , serialfile , old_suffix ) LVAL 6 j FIELD 7 j LEAF_NODE 8 j ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 BIO_snprintf ( buf [ 1 ] , sizeof ( buf [ 1 ] ) , \"%s-%s\" , serialfile , old_suffix ) FUNCTION_CALL 7 BIO_snprintf ( buf [ 1 ] , sizeof ( buf [ 1 ] ) , \"%s-%s\" , serialfile , old_suffix ) CALLEE 8 BIO_snprintf LEAF_NODE 9 BIO_snprintf LEAF_NODE 8 ( ARGUMENT 8 buf [ 1 ] FIELD 9 buf [ 1 ] LEAF_NODE 10 buf LEAF_NODE 10 [ EXPR 10 1 FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ] LEAF_NODE 8 , ARGUMENT 8 sizeof ( buf [ 1 ] ) FUNCTION_CALL 9 sizeof ( buf [ 1 ] ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 buf [ 1 ] FIELD 11 buf [ 1 ] LEAF_NODE 12 buf LEAF_NODE 12 [ EXPR 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ] LEAF_NODE 10 ) LEAF_NODE 8 , ARGUMENT 8 \"%s-%s\" FIELD 9 \"%s-%s\" LEAF_NODE 10 \"%s-%s\" LEAF_NODE 8 , ARGUMENT 8 serialfile FIELD 9 serialfile LEAF_NODE 10 serialfile LEAF_NODE 8 , ARGUMENT 8 old_suffix FIELD 9 old_suffix LEAF_NODE 10 old_suffix LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 rename ( serialfile , buf [ 1 ] ) < 0 && errno != ENOENT && errno != ENOTDIR EXPR 5 rename ( serialfile , buf [ 1 ] ) < 0 && errno != ENOENT && errno != ENOTDIR AND 6 rename ( serialfile , buf [ 1 ] ) < 0 && errno != ENOENT && errno != ENOTDIR EXPR 7 rename ( serialfile , buf [ 1 ] ) < 0 FUNCTION_CALL 8 rename ( serialfile , buf [ 1 ] ) CALLEE 9 rename LEAF_NODE 10 rename LEAF_NODE 9 ( ARGUMENT 9 serialfile FIELD 10 serialfile LEAF_NODE 11 serialfile LEAF_NODE 9 , ARGUMENT 9 buf [ 1 ] FIELD 10 buf [ 1 ] LEAF_NODE 11 buf LEAF_NODE 11 [ EXPR 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] LEAF_NODE 9 ) REL_OPERATOR 8 < LEAF_NODE 9 < FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 7 && EXPR 7 errno != ENOENT && errno != ENOTDIR AND 8 errno != ENOENT && errno != ENOTDIR EXPR 9 errno != ENOENT FIELD 10 errno LEAF_NODE 11 errno EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 ENOENT LEAF_NODE 11 ENOENT LEAF_NODE 9 && EXPR 9 errno != ENOTDIR FIELD 10 errno LEAF_NODE 11 errno EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 ENOTDIR LEAF_NODE 11 ENOTDIR LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 BIO_printf ( bio_err , \"unable to rename %s to %s\\n\" , serialfile , buf [ 1 ] ) ; EXPR 7 BIO_printf ( bio_err , \"unable to rename %s to %s\\n\" , serialfile , buf [ 1 ] ) FUNCTION_CALL 8 BIO_printf ( bio_err , \"unable to rename %s to %s\\n\" , serialfile , buf [ 1 ] ) CALLEE 9 BIO_printf LEAF_NODE 10 BIO_printf LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 , ARGUMENT 9 \"unable to rename %s to %s\\n\" FIELD 10 \"unable to rename %s to %s\\n\" LEAF_NODE 11 \"unable to rename %s to %s\\n\" LEAF_NODE 9 , ARGUMENT 9 serialfile FIELD 10 serialfile LEAF_NODE 11 serialfile LEAF_NODE 9 , ARGUMENT 9 buf [ 1 ] FIELD 10 buf [ 1 ] LEAF_NODE 11 buf LEAF_NODE 11 [ EXPR 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 perror ( \"reason\" ) ; EXPR 7 perror ( \"reason\" ) FUNCTION_CALL 8 perror ( \"reason\" ) CALLEE 9 perror LEAF_NODE 10 perror LEAF_NODE 9 ( ARGUMENT 9 \"reason\" FIELD 10 \"reason\" LEAF_NODE 11 \"reason\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 rename ( buf [ 0 ] , serialfile ) < 0 EXPR 5 rename ( buf [ 0 ] , serialfile ) < 0 FUNCTION_CALL 6 rename ( buf [ 0 ] , serialfile ) CALLEE 7 rename LEAF_NODE 8 rename LEAF_NODE 7 ( ARGUMENT 7 buf [ 0 ] FIELD 8 buf [ 0 ] LEAF_NODE 9 buf LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] LEAF_NODE 7 , ARGUMENT 7 serialfile FIELD 8 serialfile LEAF_NODE 9 serialfile LEAF_NODE 7 ) REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 BIO_printf ( bio_err , \"unable to rename %s to %s\\n\" , buf [ 0 ] , serialfile ) ; EXPR 7 BIO_printf ( bio_err , \"unable to rename %s to %s\\n\" , buf [ 0 ] , serialfile ) FUNCTION_CALL 8 BIO_printf ( bio_err , \"unable to rename %s to %s\\n\" , buf [ 0 ] , serialfile ) CALLEE 9 BIO_printf LEAF_NODE 10 BIO_printf LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 , ARGUMENT 9 \"unable to rename %s to %s\\n\" FIELD 10 \"unable to rename %s to %s\\n\" LEAF_NODE 11 \"unable to rename %s to %s\\n\" LEAF_NODE 9 , ARGUMENT 9 buf [ 0 ] FIELD 10 buf [ 0 ] LEAF_NODE 11 buf LEAF_NODE 11 [ EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ] LEAF_NODE 9 , ARGUMENT 9 serialfile FIELD 10 serialfile LEAF_NODE 11 serialfile LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 perror ( \"reason\" ) ; EXPR 7 perror ( \"reason\" ) FUNCTION_CALL 8 perror ( \"reason\" ) CALLEE 9 perror LEAF_NODE 10 perror LEAF_NODE 9 ( ARGUMENT 9 \"reason\" FIELD 10 \"reason\" LEAF_NODE 11 \"reason\" LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 rename ( buf [ 1 ] , serialfile ) ; EXPR 7 rename ( buf [ 1 ] , serialfile ) FUNCTION_CALL 8 rename ( buf [ 1 ] , serialfile ) CALLEE 9 rename LEAF_NODE 10 rename LEAF_NODE 9 ( ARGUMENT 9 buf [ 1 ] FIELD 10 buf [ 1 ] LEAF_NODE 11 buf LEAF_NODE 11 [ EXPR 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] LEAF_NODE 9 , ARGUMENT 9 serialfile FIELD 10 serialfile LEAF_NODE 11 serialfile LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LABEL 3 err : LEAF_NODE 4 err LEAF_NODE 4 : JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 193, "project": "openssl_ast_normal_function_test_105", "target": 0}
{"func": "SIMPLE_DECL 1 struct ssl2_state_st BASE_CLASSES { int three_byte_header ; int clear_text ; int escape ; int ssl2_rollback ; unsigned int wnum ; int wpend_tot ; const unsigned char * wpend_buf ; int wpend_off ; int wpend_len ; int wpend_ret ; int rbuf_left ; int rbuf_offs ; unsigned char * rbuf ; unsigned char * wbuf ; unsigned char * write_ptr ; unsigned int padding ; unsigned int rlength ; int ract_data_length ; unsigned int wlength ; int wact_data_length ; unsigned char * ract_data ; unsigned char * wact_data ; unsigned char * mac_data ; unsigned char * read_key ; unsigned char * write_key ; unsigned int challenge_length ; unsigned char [ SSL2_MAX_CHALLENGE_LENGTH ] challenge ; unsigned int conn_id_length ; unsigned char [ SSL2_MAX_CONNECTION_ID_LENGTH ] conn_id ; unsigned int key_material_length ; unsigned char [ SSL2_MAX_KEY_MATERIAL_LENGTH * 2 ] key_material ; unsigned long read_sequence ; unsigned long write_sequence ; struct CLASS_NAME BASE_CLASSES { unsigned int conn_id_length ; unsigned int cert_type ; unsigned int cert_length ; unsigned int csl ; unsigned int clear ; unsigned int enc ; unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; unsigned int cipher_spec_length ; unsigned int session_id_length ; unsigned int clen ; unsigned int rlen ; } tmp ; } ; CLASS_DEF 2 struct ssl2_state_st BASE_CLASSES { int three_byte_header ; int clear_text ; int escape ; int ssl2_rollback ; unsigned int wnum ; int wpend_tot ; const unsigned char * wpend_buf ; int wpend_off ; int wpend_len ; int wpend_ret ; int rbuf_left ; int rbuf_offs ; unsigned char * rbuf ; unsigned char * wbuf ; unsigned char * write_ptr ; unsigned int padding ; unsigned int rlength ; int ract_data_length ; unsigned int wlength ; int wact_data_length ; unsigned char * ract_data ; unsigned char * wact_data ; unsigned char * mac_data ; unsigned char * read_key ; unsigned char * write_key ; unsigned int challenge_length ; unsigned char [ SSL2_MAX_CHALLENGE_LENGTH ] challenge ; unsigned int conn_id_length ; unsigned char [ SSL2_MAX_CONNECTION_ID_LENGTH ] conn_id ; unsigned int key_material_length ; unsigned char [ SSL2_MAX_KEY_MATERIAL_LENGTH * 2 ] key_material ; unsigned long read_sequence ; unsigned long write_sequence ; struct CLASS_NAME BASE_CLASSES { unsigned int conn_id_length ; unsigned int cert_type ; unsigned int cert_length ; unsigned int csl ; unsigned int clear ; unsigned int enc ; unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; unsigned int cipher_spec_length ; unsigned int session_id_length ; unsigned int clen ; unsigned int rlen ; } tmp ; } CLASS_DEF 3 struct ssl2_state_st BASE_CLASSES { int three_byte_header ; int clear_text ; int escape ; int ssl2_rollback ; unsigned int wnum ; int wpend_tot ; const unsigned char * wpend_buf ; int wpend_off ; int wpend_len ; int wpend_ret ; int rbuf_left ; int rbuf_offs ; unsigned char * rbuf ; unsigned char * wbuf ; unsigned char * write_ptr ; unsigned int padding ; unsigned int rlength ; int ract_data_length ; unsigned int wlength ; int wact_data_length ; unsigned char * ract_data ; unsigned char * wact_data ; unsigned char * mac_data ; unsigned char * read_key ; unsigned char * write_key ; unsigned int challenge_length ; unsigned char [ SSL2_MAX_CHALLENGE_LENGTH ] challenge ; unsigned int conn_id_length ; unsigned char [ SSL2_MAX_CONNECTION_ID_LENGTH ] conn_id ; unsigned int key_material_length ; unsigned char [ SSL2_MAX_KEY_MATERIAL_LENGTH * 2 ] key_material ; unsigned long read_sequence ; unsigned long write_sequence ; struct CLASS_NAME BASE_CLASSES { unsigned int conn_id_length ; unsigned int cert_type ; unsigned int cert_length ; unsigned int csl ; unsigned int clear ; unsigned int enc ; unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; unsigned int cipher_spec_length ; unsigned int session_id_length ; unsigned int clen ; unsigned int rlen ; } tmp ; } LEAF_NODE 4 struct CLASS_NAME 4 ssl2_state_st LEAF_NODE 5 ssl2_state_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int three_byte_header ; int clear_text ; int escape ; int ssl2_rollback ; unsigned int wnum ; int wpend_tot ; const unsigned char * wpend_buf ; int wpend_off ; int wpend_len ; int wpend_ret ; int rbuf_left ; int rbuf_offs ; unsigned char * rbuf ; unsigned char * wbuf ; unsigned char * write_ptr ; unsigned int padding ; unsigned int rlength ; int ract_data_length ; unsigned int wlength ; int wact_data_length ; unsigned char * ract_data ; unsigned char * wact_data ; unsigned char * mac_data ; unsigned char * read_key ; unsigned char * write_key ; unsigned int challenge_length ; unsigned char [ SSL2_MAX_CHALLENGE_LENGTH ] challenge ; unsigned int conn_id_length ; unsigned char [ SSL2_MAX_CONNECTION_ID_LENGTH ] conn_id ; unsigned int key_material_length ; unsigned char [ SSL2_MAX_KEY_MATERIAL_LENGTH * 2 ] key_material ; unsigned long read_sequence ; unsigned long write_sequence ; struct CLASS_NAME BASE_CLASSES { unsigned int conn_id_length ; unsigned int cert_type ; unsigned int cert_length ; unsigned int csl ; unsigned int clear ; unsigned int enc ; unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; unsigned int cipher_spec_length ; unsigned int session_id_length ; unsigned int clen ; unsigned int rlen ; } tmp ; SIMPLE_DECL 5 int three_byte_header ; VAR_DECL 6 int three_byte_header TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 three_byte_header LEAF_NODE 8 three_byte_header LEAF_NODE 6 ; SIMPLE_DECL 5 int clear_text ; VAR_DECL 6 int clear_text TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 clear_text LEAF_NODE 8 clear_text LEAF_NODE 6 ; SIMPLE_DECL 5 int escape ; VAR_DECL 6 int escape TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 escape LEAF_NODE 8 escape LEAF_NODE 6 ; SIMPLE_DECL 5 int ssl2_rollback ; VAR_DECL 6 int ssl2_rollback TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ssl2_rollback LEAF_NODE 8 ssl2_rollback LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int wnum ; VAR_DECL 6 unsigned int wnum TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 wnum LEAF_NODE 8 wnum LEAF_NODE 6 ; SIMPLE_DECL 5 int wpend_tot ; VAR_DECL 6 int wpend_tot TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 wpend_tot LEAF_NODE 8 wpend_tot LEAF_NODE 6 ; SIMPLE_DECL 5 const unsigned char * wpend_buf ; VAR_DECL 6 const unsigned char * wpend_buf TYPE 7 const unsigned char * TYPE_NAME 8 const unsigned char LEAF_NODE 9 const LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 wpend_buf LEAF_NODE 8 wpend_buf LEAF_NODE 6 ; SIMPLE_DECL 5 int wpend_off ; VAR_DECL 6 int wpend_off TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 wpend_off LEAF_NODE 8 wpend_off LEAF_NODE 6 ; SIMPLE_DECL 5 int wpend_len ; VAR_DECL 6 int wpend_len TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 wpend_len LEAF_NODE 8 wpend_len LEAF_NODE 6 ; SIMPLE_DECL 5 int wpend_ret ; VAR_DECL 6 int wpend_ret TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 wpend_ret LEAF_NODE 8 wpend_ret LEAF_NODE 6 ; SIMPLE_DECL 5 int rbuf_left ; VAR_DECL 6 int rbuf_left TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rbuf_left LEAF_NODE 8 rbuf_left LEAF_NODE 6 ; SIMPLE_DECL 5 int rbuf_offs ; VAR_DECL 6 int rbuf_offs TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rbuf_offs LEAF_NODE 8 rbuf_offs LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * rbuf ; VAR_DECL 6 unsigned char * rbuf TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 rbuf LEAF_NODE 8 rbuf LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * wbuf ; VAR_DECL 6 unsigned char * wbuf TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 wbuf LEAF_NODE 8 wbuf LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * write_ptr ; VAR_DECL 6 unsigned char * write_ptr TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 write_ptr LEAF_NODE 8 write_ptr LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int padding ; VAR_DECL 6 unsigned int padding TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 padding LEAF_NODE 8 padding LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int rlength ; VAR_DECL 6 unsigned int rlength TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rlength LEAF_NODE 8 rlength LEAF_NODE 6 ; SIMPLE_DECL 5 int ract_data_length ; VAR_DECL 6 int ract_data_length TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ract_data_length LEAF_NODE 8 ract_data_length LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int wlength ; VAR_DECL 6 unsigned int wlength TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 wlength LEAF_NODE 8 wlength LEAF_NODE 6 ; SIMPLE_DECL 5 int wact_data_length ; VAR_DECL 6 int wact_data_length TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 wact_data_length LEAF_NODE 8 wact_data_length LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * ract_data ; VAR_DECL 6 unsigned char * ract_data TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 ract_data LEAF_NODE 8 ract_data LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * wact_data ; VAR_DECL 6 unsigned char * wact_data TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 wact_data LEAF_NODE 8 wact_data LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * mac_data ; VAR_DECL 6 unsigned char * mac_data TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 mac_data LEAF_NODE 8 mac_data LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * read_key ; VAR_DECL 6 unsigned char * read_key TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 read_key LEAF_NODE 8 read_key LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * write_key ; VAR_DECL 6 unsigned char * write_key TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 write_key LEAF_NODE 8 write_key LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int challenge_length ; VAR_DECL 6 unsigned int challenge_length TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 challenge_length LEAF_NODE 8 challenge_length LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ SSL2_MAX_CHALLENGE_LENGTH ] challenge ; VAR_DECL 6 unsigned char [ SSL2_MAX_CHALLENGE_LENGTH ] challenge TYPE 7 unsigned char [ SSL2_MAX_CHALLENGE_LENGTH ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ SSL2_MAX_CHALLENGE_LENGTH ] LEAF_NODE 9 [ FIELD 9 SSL2_MAX_CHALLENGE_LENGTH LEAF_NODE 10 SSL2_MAX_CHALLENGE_LENGTH LEAF_NODE 9 ] NAME 7 challenge LEAF_NODE 8 challenge LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int conn_id_length ; VAR_DECL 6 unsigned int conn_id_length TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 conn_id_length LEAF_NODE 8 conn_id_length LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ SSL2_MAX_CONNECTION_ID_LENGTH ] conn_id ; VAR_DECL 6 unsigned char [ SSL2_MAX_CONNECTION_ID_LENGTH ] conn_id TYPE 7 unsigned char [ SSL2_MAX_CONNECTION_ID_LENGTH ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ SSL2_MAX_CONNECTION_ID_LENGTH ] LEAF_NODE 9 [ FIELD 9 SSL2_MAX_CONNECTION_ID_LENGTH LEAF_NODE 10 SSL2_MAX_CONNECTION_ID_LENGTH LEAF_NODE 9 ] NAME 7 conn_id LEAF_NODE 8 conn_id LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int key_material_length ; VAR_DECL 6 unsigned int key_material_length TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 key_material_length LEAF_NODE 8 key_material_length LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ SSL2_MAX_KEY_MATERIAL_LENGTH * 2 ] key_material ; VAR_DECL 6 unsigned char [ SSL2_MAX_KEY_MATERIAL_LENGTH * 2 ] key_material TYPE 7 unsigned char [ SSL2_MAX_KEY_MATERIAL_LENGTH * 2 ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ SSL2_MAX_KEY_MATERIAL_LENGTH * 2 ] LEAF_NODE 9 [ FIELD 9 SSL2_MAX_KEY_MATERIAL_LENGTH LEAF_NODE 10 SSL2_MAX_KEY_MATERIAL_LENGTH LEAF_NODE 9 * FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 9 ] NAME 7 key_material LEAF_NODE 8 key_material LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long read_sequence ; VAR_DECL 6 unsigned long read_sequence TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 read_sequence LEAF_NODE 8 read_sequence LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long write_sequence ; VAR_DECL 6 unsigned long write_sequence TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 write_sequence LEAF_NODE 8 write_sequence LEAF_NODE 6 ; SIMPLE_DECL 5 struct CLASS_NAME BASE_CLASSES { unsigned int conn_id_length ; unsigned int cert_type ; unsigned int cert_length ; unsigned int csl ; unsigned int clear ; unsigned int enc ; unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; unsigned int cipher_spec_length ; unsigned int session_id_length ; unsigned int clen ; unsigned int rlen ; } tmp ; VAR_DECL 6 struct CLASS_NAME BASE_CLASSES { unsigned int conn_id_length ; unsigned int cert_type ; unsigned int cert_length ; unsigned int csl ; unsigned int clear ; unsigned int enc ; unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; unsigned int cipher_spec_length ; unsigned int session_id_length ; unsigned int clen ; unsigned int rlen ; } tmp TYPE 7 struct CLASS_NAME BASE_CLASSES { unsigned int conn_id_length ; unsigned int cert_type ; unsigned int cert_length ; unsigned int csl ; unsigned int clear ; unsigned int enc ; unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; unsigned int cipher_spec_length ; unsigned int session_id_length ; unsigned int clen ; unsigned int rlen ; } CLASS_DEF 8 struct CLASS_NAME BASE_CLASSES { unsigned int conn_id_length ; unsigned int cert_type ; unsigned int cert_length ; unsigned int csl ; unsigned int clear ; unsigned int enc ; unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; unsigned int cipher_spec_length ; unsigned int session_id_length ; unsigned int clen ; unsigned int rlen ; } LEAF_NODE 9 struct LEAF_NODE 9 CLASS_NAME LEAF_NODE 9 BASE_CLASSES LEAF_NODE 9 { CLASS_CONTENT 9 unsigned int conn_id_length ; unsigned int cert_type ; unsigned int cert_length ; unsigned int csl ; unsigned int clear ; unsigned int enc ; unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; unsigned int cipher_spec_length ; unsigned int session_id_length ; unsigned int clen ; unsigned int rlen ; SIMPLE_DECL 10 unsigned int conn_id_length ; VAR_DECL 11 unsigned int conn_id_length TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 conn_id_length LEAF_NODE 13 conn_id_length LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned int cert_type ; VAR_DECL 11 unsigned int cert_type TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 cert_type LEAF_NODE 13 cert_type LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned int cert_length ; VAR_DECL 11 unsigned int cert_length TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 cert_length LEAF_NODE 13 cert_length LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned int csl ; VAR_DECL 11 unsigned int csl TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 csl LEAF_NODE 13 csl LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned int clear ; VAR_DECL 11 unsigned int clear TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 clear LEAF_NODE 13 clear LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned int enc ; VAR_DECL 11 unsigned int enc TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 enc LEAF_NODE 13 enc LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl ; VAR_DECL 11 unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] ccl TYPE 12 unsigned char [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char TYPE_SUFFIX 13 [ SSL2_MAX_CERT_CHALLENGE_LENGTH ] LEAF_NODE 14 [ FIELD 14 SSL2_MAX_CERT_CHALLENGE_LENGTH LEAF_NODE 15 SSL2_MAX_CERT_CHALLENGE_LENGTH LEAF_NODE 14 ] NAME 12 ccl LEAF_NODE 13 ccl LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned int cipher_spec_length ; VAR_DECL 11 unsigned int cipher_spec_length TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 cipher_spec_length LEAF_NODE 13 cipher_spec_length LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned int session_id_length ; VAR_DECL 11 unsigned int session_id_length TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 session_id_length LEAF_NODE 13 session_id_length LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned int clen ; VAR_DECL 11 unsigned int clen TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 clen LEAF_NODE 13 clen LEAF_NODE 11 ; SIMPLE_DECL 10 unsigned int rlen ; VAR_DECL 11 unsigned int rlen TYPE 12 unsigned int TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int NAME 12 rlen LEAF_NODE 13 rlen LEAF_NODE 11 ; LEAF_NODE 9 } NAME 7 tmp LEAF_NODE 8 tmp LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl_method_st SSL_METHOD ; VAR_DECL 2 struct ssl_method_st SSL_METHOD TYPE 3 struct ssl_method_st TYPE_NAME 4 struct ssl_method_st LEAF_NODE 5 struct LEAF_NODE 5 ssl_method_st NAME 3 SSL_METHOD LEAF_NODE 4 SSL_METHOD LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl_aead_ctx_st SSL_AEAD_CTX ; VAR_DECL 2 struct ssl_aead_ctx_st SSL_AEAD_CTX TYPE 3 struct ssl_aead_ctx_st TYPE_NAME 4 struct ssl_aead_ctx_st LEAF_NODE 5 struct LEAF_NODE 5 ssl_aead_ctx_st NAME 3 SSL_AEAD_CTX LEAF_NODE 4 SSL_AEAD_CTX LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl_session_st SSL_SESSION ; VAR_DECL 2 struct ssl_session_st SSL_SESSION TYPE 3 struct ssl_session_st TYPE_NAME 4 struct ssl_session_st LEAF_NODE 5 struct LEAF_NODE 5 ssl_session_st NAME 3 SSL_SESSION LEAF_NODE 4 SSL_SESSION LEAF_NODE 2 ; SIMPLE_DECL 1 struct tls_session_ticket_ext_st TLS_SESSION_TICKET_EXT ; VAR_DECL 2 struct tls_session_ticket_ext_st TLS_SESSION_TICKET_EXT TYPE 3 struct tls_session_ticket_ext_st TYPE_NAME 4 struct tls_session_ticket_ext_st LEAF_NODE 5 struct LEAF_NODE 5 tls_session_ticket_ext_st NAME 3 TLS_SESSION_TICKET_EXT LEAF_NODE 4 TLS_SESSION_TICKET_EXT LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl_cipher_st BASE_CLASSES { int valid ; const char * name ; unsigned long id ; unsigned long algorithm_mkey ; unsigned long algorithm_auth ; unsigned long algorithm_enc ; unsigned long algorithm_mac ; unsigned long algorithm_ssl ; unsigned long algo_strength ; unsigned long algorithm2 ; int strength_bits ; int alg_bits ; } ; CLASS_DEF 2 struct ssl_cipher_st BASE_CLASSES { int valid ; const char * name ; unsigned long id ; unsigned long algorithm_mkey ; unsigned long algorithm_auth ; unsigned long algorithm_enc ; unsigned long algorithm_mac ; unsigned long algorithm_ssl ; unsigned long algo_strength ; unsigned long algorithm2 ; int strength_bits ; int alg_bits ; } CLASS_DEF 3 struct ssl_cipher_st BASE_CLASSES { int valid ; const char * name ; unsigned long id ; unsigned long algorithm_mkey ; unsigned long algorithm_auth ; unsigned long algorithm_enc ; unsigned long algorithm_mac ; unsigned long algorithm_ssl ; unsigned long algo_strength ; unsigned long algorithm2 ; int strength_bits ; int alg_bits ; } LEAF_NODE 4 struct CLASS_NAME 4 ssl_cipher_st LEAF_NODE 5 ssl_cipher_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int valid ; const char * name ; unsigned long id ; unsigned long algorithm_mkey ; unsigned long algorithm_auth ; unsigned long algorithm_enc ; unsigned long algorithm_mac ; unsigned long algorithm_ssl ; unsigned long algo_strength ; unsigned long algorithm2 ; int strength_bits ; int alg_bits ; SIMPLE_DECL 5 int valid ; VAR_DECL 6 int valid TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 valid LEAF_NODE 8 valid LEAF_NODE 6 ; SIMPLE_DECL 5 const char * name ; VAR_DECL 6 const char * name TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 name LEAF_NODE 8 name LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long id ; VAR_DECL 6 unsigned long id TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long algorithm_mkey ; VAR_DECL 6 unsigned long algorithm_mkey TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 algorithm_mkey LEAF_NODE 8 algorithm_mkey LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long algorithm_auth ; VAR_DECL 6 unsigned long algorithm_auth TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 algorithm_auth LEAF_NODE 8 algorithm_auth LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long algorithm_enc ; VAR_DECL 6 unsigned long algorithm_enc TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 algorithm_enc LEAF_NODE 8 algorithm_enc LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long algorithm_mac ; VAR_DECL 6 unsigned long algorithm_mac TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 algorithm_mac LEAF_NODE 8 algorithm_mac LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long algorithm_ssl ; VAR_DECL 6 unsigned long algorithm_ssl TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 algorithm_ssl LEAF_NODE 8 algorithm_ssl LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long algo_strength ; VAR_DECL 6 unsigned long algo_strength TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 algo_strength LEAF_NODE 8 algo_strength LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long algorithm2 ; VAR_DECL 6 unsigned long algorithm2 TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 algorithm2 LEAF_NODE 8 algorithm2 LEAF_NODE 6 ; SIMPLE_DECL 5 int strength_bits ; VAR_DECL 6 int strength_bits TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 strength_bits LEAF_NODE 8 strength_bits LEAF_NODE 6 ; SIMPLE_DECL 5 int alg_bits ; VAR_DECL 6 int alg_bits TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 alg_bits LEAF_NODE 8 alg_bits LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl_cipher_st SSL_CIPHER ; VAR_DECL 2 struct ssl_cipher_st SSL_CIPHER TYPE 3 struct ssl_cipher_st TYPE_NAME 4 struct ssl_cipher_st LEAF_NODE 5 struct LEAF_NODE 5 ssl_cipher_st NAME 3 SSL_CIPHER LEAF_NODE 4 SSL_CIPHER LEAF_NODE 2 ; SIMPLE_DECL 1 struct crypto_ex_data_st BASE_CLASSES { STACK_OF ( void ) * sk ; int dummy ; } ; CLASS_DEF 2 struct crypto_ex_data_st BASE_CLASSES { STACK_OF ( void ) * sk ; int dummy ; } CLASS_DEF 3 struct crypto_ex_data_st BASE_CLASSES { STACK_OF ( void ) * sk ; int dummy ; } LEAF_NODE 4 struct CLASS_NAME 4 crypto_ex_data_st LEAF_NODE 5 crypto_ex_data_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 STACK_OF ( void ) * sk ; int dummy ; LEAF_NODE 5 STACK_OF LEAF_NODE 5 ( LEAF_NODE 5 void LEAF_NODE 5 ) LEAF_NODE 5 * LEAF_NODE 5 sk LEAF_NODE 5 ; SIMPLE_DECL 5 int dummy ; VAR_DECL 6 int dummy TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 dummy LEAF_NODE 8 dummy LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct crypto_ex_data_st CRYPTO_EX_DATA ; VAR_DECL 2 struct crypto_ex_data_st CRYPTO_EX_DATA TYPE 3 struct crypto_ex_data_st TYPE_NAME 4 struct crypto_ex_data_st LEAF_NODE 5 struct LEAF_NODE 5 crypto_ex_data_st NAME 3 CRYPTO_EX_DATA LEAF_NODE 4 CRYPTO_EX_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 struct srtp_protection_profile_st BASE_CLASSES { const char * name ; unsigned long id ; } SRTP_PROTECTION_PROFILE ; VAR_DECL 2 struct srtp_protection_profile_st BASE_CLASSES { const char * name ; unsigned long id ; } SRTP_PROTECTION_PROFILE TYPE 3 struct srtp_protection_profile_st BASE_CLASSES { const char * name ; unsigned long id ; } CLASS_DEF 4 struct srtp_protection_profile_st BASE_CLASSES { const char * name ; unsigned long id ; } LEAF_NODE 5 struct CLASS_NAME 5 srtp_protection_profile_st LEAF_NODE 6 srtp_protection_profile_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 const char * name ; unsigned long id ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned long id ; VAR_DECL 7 unsigned long id TYPE 8 unsigned long TYPE_NAME 9 unsigned long LEAF_NODE 10 unsigned LEAF_NODE 10 long NAME 8 id LEAF_NODE 9 id LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 SRTP_PROTECTION_PROFILE LEAF_NODE 4 SRTP_PROTECTION_PROFILE LEAF_NODE 2 ; SIMPLE_DECL 1 struct buf_mem_st BASE_CLASSES { size_t length ; char * data ; size_t max ; } ; CLASS_DEF 2 struct buf_mem_st BASE_CLASSES { size_t length ; char * data ; size_t max ; } CLASS_DEF 3 struct buf_mem_st BASE_CLASSES { size_t length ; char * data ; size_t max ; } LEAF_NODE 4 struct CLASS_NAME 4 buf_mem_st LEAF_NODE 5 buf_mem_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 size_t length ; char * data ; size_t max ; SIMPLE_DECL 5 size_t length ; VAR_DECL 6 size_t length TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 length LEAF_NODE 8 length LEAF_NODE 6 ; SIMPLE_DECL 5 char * data ; VAR_DECL 6 char * data TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 size_t max ; VAR_DECL 6 size_t max TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 max LEAF_NODE 8 max LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct buf_mem_st BUF_MEM ; VAR_DECL 2 struct buf_mem_st BUF_MEM TYPE 3 struct buf_mem_st TYPE_NAME 4 struct buf_mem_st LEAF_NODE 5 struct LEAF_NODE 5 buf_mem_st NAME 3 BUF_MEM LEAF_NODE 4 BUF_MEM LEAF_NODE 2 ; SIMPLE_DECL 1 struct cert_pkey_st BASE_CLASSES { X509 * x509 ; EVP_PKEY * privatekey ; const EVP_MD * digest ; } ; CLASS_DEF 2 struct cert_pkey_st BASE_CLASSES { X509 * x509 ; EVP_PKEY * privatekey ; const EVP_MD * digest ; } CLASS_DEF 3 struct cert_pkey_st BASE_CLASSES { X509 * x509 ; EVP_PKEY * privatekey ; const EVP_MD * digest ; } LEAF_NODE 4 struct CLASS_NAME 4 cert_pkey_st LEAF_NODE 5 cert_pkey_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 X509 * x509 ; EVP_PKEY * privatekey ; const EVP_MD * digest ; SIMPLE_DECL 5 X509 * x509 ; VAR_DECL 6 X509 * x509 TYPE 7 X509 * TYPE_NAME 8 X509 LEAF_NODE 9 X509 POINTER 8 * LEAF_NODE 9 * NAME 7 x509 LEAF_NODE 8 x509 LEAF_NODE 6 ; SIMPLE_DECL 5 EVP_PKEY * privatekey ; VAR_DECL 6 EVP_PKEY * privatekey TYPE 7 EVP_PKEY * TYPE_NAME 8 EVP_PKEY LEAF_NODE 9 EVP_PKEY POINTER 8 * LEAF_NODE 9 * NAME 7 privatekey LEAF_NODE 8 privatekey LEAF_NODE 6 ; SIMPLE_DECL 5 const EVP_MD * digest ; VAR_DECL 6 const EVP_MD * digest TYPE 7 const EVP_MD * TYPE_NAME 8 const EVP_MD LEAF_NODE 9 const LEAF_NODE 9 EVP_MD POINTER 8 * LEAF_NODE 9 * NAME 7 digest LEAF_NODE 8 digest LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct cert_pkey_st CERT_PKEY ; VAR_DECL 2 struct cert_pkey_st CERT_PKEY TYPE 3 struct cert_pkey_st TYPE_NAME 4 struct cert_pkey_st LEAF_NODE 5 struct LEAF_NODE 5 cert_pkey_st NAME 3 CERT_PKEY LEAF_NODE 4 CERT_PKEY LEAF_NODE 2 ; SIMPLE_DECL 1 struct sess_cert_st BASE_CLASSES { STACK_OF ( X509 ) * cert_chain ; int peer_cert_type ; CERT_PKEY * peer_key ; CERT_PKEY [ SSL_PKEY_NUM ] peer_pkeys ; RSA * peer_rsa_tmp ; DH * peer_dh_tmp ; EC_KEY * peer_ecdh_tmp ; int references ; } ; CLASS_DEF 2 struct sess_cert_st BASE_CLASSES { STACK_OF ( X509 ) * cert_chain ; int peer_cert_type ; CERT_PKEY * peer_key ; CERT_PKEY [ SSL_PKEY_NUM ] peer_pkeys ; RSA * peer_rsa_tmp ; DH * peer_dh_tmp ; EC_KEY * peer_ecdh_tmp ; int references ; } CLASS_DEF 3 struct sess_cert_st BASE_CLASSES { STACK_OF ( X509 ) * cert_chain ; int peer_cert_type ; CERT_PKEY * peer_key ; CERT_PKEY [ SSL_PKEY_NUM ] peer_pkeys ; RSA * peer_rsa_tmp ; DH * peer_dh_tmp ; EC_KEY * peer_ecdh_tmp ; int references ; } LEAF_NODE 4 struct CLASS_NAME 4 sess_cert_st LEAF_NODE 5 sess_cert_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 STACK_OF ( X509 ) * cert_chain ; int peer_cert_type ; CERT_PKEY * peer_key ; CERT_PKEY [ SSL_PKEY_NUM ] peer_pkeys ; RSA * peer_rsa_tmp ; DH * peer_dh_tmp ; EC_KEY * peer_ecdh_tmp ; int references ; LEAF_NODE 5 STACK_OF LEAF_NODE 5 ( LEAF_NODE 5 X509 LEAF_NODE 5 ) LEAF_NODE 5 * LEAF_NODE 5 cert_chain LEAF_NODE 5 ; SIMPLE_DECL 5 int peer_cert_type ; VAR_DECL 6 int peer_cert_type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 peer_cert_type LEAF_NODE 8 peer_cert_type LEAF_NODE 6 ; SIMPLE_DECL 5 CERT_PKEY * peer_key ; VAR_DECL 6 CERT_PKEY * peer_key TYPE 7 CERT_PKEY * TYPE_NAME 8 CERT_PKEY LEAF_NODE 9 CERT_PKEY POINTER 8 * LEAF_NODE 9 * NAME 7 peer_key LEAF_NODE 8 peer_key LEAF_NODE 6 ; SIMPLE_DECL 5 CERT_PKEY [ SSL_PKEY_NUM ] peer_pkeys ; VAR_DECL 6 CERT_PKEY [ SSL_PKEY_NUM ] peer_pkeys TYPE 7 CERT_PKEY [ SSL_PKEY_NUM ] TYPE_NAME 8 CERT_PKEY LEAF_NODE 9 CERT_PKEY TYPE_SUFFIX 8 [ SSL_PKEY_NUM ] LEAF_NODE 9 [ FIELD 9 SSL_PKEY_NUM LEAF_NODE 10 SSL_PKEY_NUM LEAF_NODE 9 ] NAME 7 peer_pkeys LEAF_NODE 8 peer_pkeys LEAF_NODE 6 ; SIMPLE_DECL 5 RSA * peer_rsa_tmp ; VAR_DECL 6 RSA * peer_rsa_tmp TYPE 7 RSA * TYPE_NAME 8 RSA LEAF_NODE 9 RSA POINTER 8 * LEAF_NODE 9 * NAME 7 peer_rsa_tmp LEAF_NODE 8 peer_rsa_tmp LEAF_NODE 6 ; SIMPLE_DECL 5 DH * peer_dh_tmp ; VAR_DECL 6 DH * peer_dh_tmp TYPE 7 DH * TYPE_NAME 8 DH LEAF_NODE 9 DH POINTER 8 * LEAF_NODE 9 * NAME 7 peer_dh_tmp LEAF_NODE 8 peer_dh_tmp LEAF_NODE 6 ; SIMPLE_DECL 5 EC_KEY * peer_ecdh_tmp ; VAR_DECL 6 EC_KEY * peer_ecdh_tmp TYPE 7 EC_KEY * TYPE_NAME 8 EC_KEY LEAF_NODE 9 EC_KEY POINTER 8 * LEAF_NODE 9 * NAME 7 peer_ecdh_tmp LEAF_NODE 8 peer_ecdh_tmp LEAF_NODE 6 ; SIMPLE_DECL 5 int references ; VAR_DECL 6 int references TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 references LEAF_NODE 8 references LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 int CRYPTO_REF_COUNT ; VAR_DECL 2 int CRYPTO_REF_COUNT TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CRYPTO_REF_COUNT LEAF_NODE 4 CRYPTO_REF_COUNT LEAF_NODE 2 ; SIMPLE_DECL 1 struct x509_st BASE_CLASSES { CRYPTO_REF_COUNT references ; long ex_pathlen ; long ex_pcpathlen ; uint32_t ex_flags ; uint32_t ex_kusage ; uint32_t ex_xkusage ; uint32_t ex_nscert ; struct ASIdentifiers_st * rfc3779_asid ; unsigned char [ SHA_DIGEST_LENGTH ] sha1_hash ; volatile int ex_cached ; char * propq ; } ; CLASS_DEF 2 struct x509_st BASE_CLASSES { CRYPTO_REF_COUNT references ; long ex_pathlen ; long ex_pcpathlen ; uint32_t ex_flags ; uint32_t ex_kusage ; uint32_t ex_xkusage ; uint32_t ex_nscert ; struct ASIdentifiers_st * rfc3779_asid ; unsigned char [ SHA_DIGEST_LENGTH ] sha1_hash ; volatile int ex_cached ; char * propq ; } CLASS_DEF 3 struct x509_st BASE_CLASSES { CRYPTO_REF_COUNT references ; long ex_pathlen ; long ex_pcpathlen ; uint32_t ex_flags ; uint32_t ex_kusage ; uint32_t ex_xkusage ; uint32_t ex_nscert ; struct ASIdentifiers_st * rfc3779_asid ; unsigned char [ SHA_DIGEST_LENGTH ] sha1_hash ; volatile int ex_cached ; char * propq ; } LEAF_NODE 4 struct CLASS_NAME 4 x509_st LEAF_NODE 5 x509_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 CRYPTO_REF_COUNT references ; long ex_pathlen ; long ex_pcpathlen ; uint32_t ex_flags ; uint32_t ex_kusage ; uint32_t ex_xkusage ; uint32_t ex_nscert ; struct ASIdentifiers_st * rfc3779_asid ; unsigned char [ SHA_DIGEST_LENGTH ] sha1_hash ; volatile int ex_cached ; char * propq ; SIMPLE_DECL 5 CRYPTO_REF_COUNT references ; VAR_DECL 6 CRYPTO_REF_COUNT references TYPE 7 CRYPTO_REF_COUNT TYPE_NAME 8 CRYPTO_REF_COUNT LEAF_NODE 9 CRYPTO_REF_COUNT NAME 7 references LEAF_NODE 8 references LEAF_NODE 6 ; SIMPLE_DECL 5 long ex_pathlen ; VAR_DECL 6 long ex_pathlen TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 ex_pathlen LEAF_NODE 8 ex_pathlen LEAF_NODE 6 ; SIMPLE_DECL 5 long ex_pcpathlen ; VAR_DECL 6 long ex_pcpathlen TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 ex_pcpathlen LEAF_NODE 8 ex_pcpathlen LEAF_NODE 6 ; SIMPLE_DECL 5 uint32_t ex_flags ; VAR_DECL 6 uint32_t ex_flags TYPE 7 uint32_t TYPE_NAME 8 uint32_t LEAF_NODE 9 uint32_t NAME 7 ex_flags LEAF_NODE 8 ex_flags LEAF_NODE 6 ; SIMPLE_DECL 5 uint32_t ex_kusage ; VAR_DECL 6 uint32_t ex_kusage TYPE 7 uint32_t TYPE_NAME 8 uint32_t LEAF_NODE 9 uint32_t NAME 7 ex_kusage LEAF_NODE 8 ex_kusage LEAF_NODE 6 ; SIMPLE_DECL 5 uint32_t ex_xkusage ; VAR_DECL 6 uint32_t ex_xkusage TYPE 7 uint32_t TYPE_NAME 8 uint32_t LEAF_NODE 9 uint32_t NAME 7 ex_xkusage LEAF_NODE 8 ex_xkusage LEAF_NODE 6 ; SIMPLE_DECL 5 uint32_t ex_nscert ; VAR_DECL 6 uint32_t ex_nscert TYPE 7 uint32_t TYPE_NAME 8 uint32_t LEAF_NODE 9 uint32_t NAME 7 ex_nscert LEAF_NODE 8 ex_nscert LEAF_NODE 6 ; SIMPLE_DECL 5 struct ASIdentifiers_st * rfc3779_asid ; VAR_DECL 6 struct ASIdentifiers_st * rfc3779_asid TYPE 7 struct ASIdentifiers_st * TYPE_NAME 8 struct ASIdentifiers_st LEAF_NODE 9 struct LEAF_NODE 9 ASIdentifiers_st POINTER 8 * LEAF_NODE 9 * NAME 7 rfc3779_asid LEAF_NODE 8 rfc3779_asid LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ SHA_DIGEST_LENGTH ] sha1_hash ; VAR_DECL 6 unsigned char [ SHA_DIGEST_LENGTH ] sha1_hash TYPE 7 unsigned char [ SHA_DIGEST_LENGTH ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ SHA_DIGEST_LENGTH ] LEAF_NODE 9 [ FIELD 9 SHA_DIGEST_LENGTH LEAF_NODE 10 SHA_DIGEST_LENGTH LEAF_NODE 9 ] NAME 7 sha1_hash LEAF_NODE 8 sha1_hash LEAF_NODE 6 ; SIMPLE_DECL 5 volatile int ex_cached ; VAR_DECL 6 volatile int ex_cached TYPE 7 volatile int TYPE_NAME 8 volatile int LEAF_NODE 9 volatile LEAF_NODE 9 int NAME 7 ex_cached LEAF_NODE 8 ex_cached LEAF_NODE 6 ; SIMPLE_DECL 5 char * propq ; VAR_DECL 6 char * propq TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 propq LEAF_NODE 8 propq LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct x509_st X509 ; VAR_DECL 2 struct x509_st X509 TYPE 3 struct x509_st TYPE_NAME 4 struct x509_st LEAF_NODE 5 struct LEAF_NODE 5 x509_st NAME 3 X509 LEAF_NODE 4 X509 LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl_session_st BASE_CLASSES { int ssl_version ; int master_key_length ; unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] master_key ; unsigned int session_id_length ; unsigned char [ SSL_MAX_SSL_SESSION_ID_LENGTH ] session_id ; unsigned int sid_ctx_length ; unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; char * psk_identity_hint ; char * psk_identity ; int not_resumable ; struct sess_cert_st * sess_cert ; X509 * peer ; long verify_result ; int references ; long timeout ; long time ; const SSL_CIPHER * cipher ; unsigned long cipher_id ; CRYPTO_EX_DATA ex_data ; struct ssl_session_st * prev , struct ssl_session_st * next ; char * tlsext_hostname ; uint8_t * tlsext_tick ; size_t tlsext_ticklen ; uint32_t tlsext_tick_lifetime_hint ; size_t tlsext_signed_cert_timestamp_list_length ; uint8_t * tlsext_signed_cert_timestamp_list ; size_t ocsp_response_length ; size_t tlsext_ecpointformatlist_length ; uint8_t * ocsp_response ; char peer_sha256_valid ; unsigned char tlsext_ecpointformatlist ; unsigned char [ SHA256_DIGEST_LENGTH ] peer_sha256 ; unsigned char [ EVP_MAX_MD_SIZE ] original_handshake_hash ; unsigned int original_handshake_hash_len ; char extended_master_secret ; } ; CLASS_DEF 2 struct ssl_session_st BASE_CLASSES { int ssl_version ; int master_key_length ; unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] master_key ; unsigned int session_id_length ; unsigned char [ SSL_MAX_SSL_SESSION_ID_LENGTH ] session_id ; unsigned int sid_ctx_length ; unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; char * psk_identity_hint ; char * psk_identity ; int not_resumable ; struct sess_cert_st * sess_cert ; X509 * peer ; long verify_result ; int references ; long timeout ; long time ; const SSL_CIPHER * cipher ; unsigned long cipher_id ; CRYPTO_EX_DATA ex_data ; struct ssl_session_st * prev , struct ssl_session_st * next ; char * tlsext_hostname ; uint8_t * tlsext_tick ; size_t tlsext_ticklen ; uint32_t tlsext_tick_lifetime_hint ; size_t tlsext_signed_cert_timestamp_list_length ; uint8_t * tlsext_signed_cert_timestamp_list ; size_t ocsp_response_length ; size_t tlsext_ecpointformatlist_length ; uint8_t * ocsp_response ; char peer_sha256_valid ; unsigned char tlsext_ecpointformatlist ; unsigned char [ SHA256_DIGEST_LENGTH ] peer_sha256 ; unsigned char [ EVP_MAX_MD_SIZE ] original_handshake_hash ; unsigned int original_handshake_hash_len ; char extended_master_secret ; } CLASS_DEF 3 struct ssl_session_st BASE_CLASSES { int ssl_version ; int master_key_length ; unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] master_key ; unsigned int session_id_length ; unsigned char [ SSL_MAX_SSL_SESSION_ID_LENGTH ] session_id ; unsigned int sid_ctx_length ; unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; char * psk_identity_hint ; char * psk_identity ; int not_resumable ; struct sess_cert_st * sess_cert ; X509 * peer ; long verify_result ; int references ; long timeout ; long time ; const SSL_CIPHER * cipher ; unsigned long cipher_id ; CRYPTO_EX_DATA ex_data ; struct ssl_session_st * prev , struct ssl_session_st * next ; char * tlsext_hostname ; uint8_t * tlsext_tick ; size_t tlsext_ticklen ; uint32_t tlsext_tick_lifetime_hint ; size_t tlsext_signed_cert_timestamp_list_length ; uint8_t * tlsext_signed_cert_timestamp_list ; size_t ocsp_response_length ; size_t tlsext_ecpointformatlist_length ; uint8_t * ocsp_response ; char peer_sha256_valid ; unsigned char tlsext_ecpointformatlist ; unsigned char [ SHA256_DIGEST_LENGTH ] peer_sha256 ; unsigned char [ EVP_MAX_MD_SIZE ] original_handshake_hash ; unsigned int original_handshake_hash_len ; char extended_master_secret ; } LEAF_NODE 4 struct CLASS_NAME 4 ssl_session_st LEAF_NODE 5 ssl_session_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int ssl_version ; int master_key_length ; unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] master_key ; unsigned int session_id_length ; unsigned char [ SSL_MAX_SSL_SESSION_ID_LENGTH ] session_id ; unsigned int sid_ctx_length ; unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; char * psk_identity_hint ; char * psk_identity ; int not_resumable ; struct sess_cert_st * sess_cert ; X509 * peer ; long verify_result ; int references ; long timeout ; long time ; const SSL_CIPHER * cipher ; unsigned long cipher_id ; CRYPTO_EX_DATA ex_data ; struct ssl_session_st * prev , struct ssl_session_st * next ; char * tlsext_hostname ; uint8_t * tlsext_tick ; size_t tlsext_ticklen ; uint32_t tlsext_tick_lifetime_hint ; size_t tlsext_signed_cert_timestamp_list_length ; uint8_t * tlsext_signed_cert_timestamp_list ; size_t ocsp_response_length ; size_t tlsext_ecpointformatlist_length ; uint8_t * ocsp_response ; char peer_sha256_valid ; unsigned char tlsext_ecpointformatlist ; unsigned char [ SHA256_DIGEST_LENGTH ] peer_sha256 ; unsigned char [ EVP_MAX_MD_SIZE ] original_handshake_hash ; unsigned int original_handshake_hash_len ; char extended_master_secret ; SIMPLE_DECL 5 int ssl_version ; VAR_DECL 6 int ssl_version TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ssl_version LEAF_NODE 8 ssl_version LEAF_NODE 6 ; SIMPLE_DECL 5 int master_key_length ; VAR_DECL 6 int master_key_length TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 master_key_length LEAF_NODE 8 master_key_length LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] master_key ; VAR_DECL 6 unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] master_key TYPE 7 unsigned char [ SSL_MAX_MASTER_KEY_LENGTH ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ SSL_MAX_MASTER_KEY_LENGTH ] LEAF_NODE 9 [ FIELD 9 SSL_MAX_MASTER_KEY_LENGTH LEAF_NODE 10 SSL_MAX_MASTER_KEY_LENGTH LEAF_NODE 9 ] NAME 7 master_key LEAF_NODE 8 master_key LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int session_id_length ; VAR_DECL 6 unsigned int session_id_length TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 session_id_length LEAF_NODE 8 session_id_length LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ SSL_MAX_SSL_SESSION_ID_LENGTH ] session_id ; VAR_DECL 6 unsigned char [ SSL_MAX_SSL_SESSION_ID_LENGTH ] session_id TYPE 7 unsigned char [ SSL_MAX_SSL_SESSION_ID_LENGTH ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ SSL_MAX_SSL_SESSION_ID_LENGTH ] LEAF_NODE 9 [ FIELD 9 SSL_MAX_SSL_SESSION_ID_LENGTH LEAF_NODE 10 SSL_MAX_SSL_SESSION_ID_LENGTH LEAF_NODE 9 ] NAME 7 session_id LEAF_NODE 8 session_id LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int sid_ctx_length ; VAR_DECL 6 unsigned int sid_ctx_length TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 sid_ctx_length LEAF_NODE 8 sid_ctx_length LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; VAR_DECL 6 unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx TYPE 7 unsigned char [ SSL_MAX_SID_CTX_LENGTH ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ SSL_MAX_SID_CTX_LENGTH ] LEAF_NODE 9 [ FIELD 9 SSL_MAX_SID_CTX_LENGTH LEAF_NODE 10 SSL_MAX_SID_CTX_LENGTH LEAF_NODE 9 ] NAME 7 sid_ctx LEAF_NODE 8 sid_ctx LEAF_NODE 6 ; SIMPLE_DECL 5 char * psk_identity_hint ; VAR_DECL 6 char * psk_identity_hint TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 psk_identity_hint LEAF_NODE 8 psk_identity_hint LEAF_NODE 6 ; SIMPLE_DECL 5 char * psk_identity ; VAR_DECL 6 char * psk_identity TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 psk_identity LEAF_NODE 8 psk_identity LEAF_NODE 6 ; SIMPLE_DECL 5 int not_resumable ; VAR_DECL 6 int not_resumable TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 not_resumable LEAF_NODE 8 not_resumable LEAF_NODE 6 ; SIMPLE_DECL 5 struct sess_cert_st * sess_cert ; VAR_DECL 6 struct sess_cert_st * sess_cert TYPE 7 struct sess_cert_st * TYPE_NAME 8 struct sess_cert_st LEAF_NODE 9 struct LEAF_NODE 9 sess_cert_st POINTER 8 * LEAF_NODE 9 * NAME 7 sess_cert LEAF_NODE 8 sess_cert LEAF_NODE 6 ; SIMPLE_DECL 5 X509 * peer ; VAR_DECL 6 X509 * peer TYPE 7 X509 * TYPE_NAME 8 X509 LEAF_NODE 9 X509 POINTER 8 * LEAF_NODE 9 * NAME 7 peer LEAF_NODE 8 peer LEAF_NODE 6 ; SIMPLE_DECL 5 long verify_result ; VAR_DECL 6 long verify_result TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 verify_result LEAF_NODE 8 verify_result LEAF_NODE 6 ; SIMPLE_DECL 5 int references ; VAR_DECL 6 int references TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 references LEAF_NODE 8 references LEAF_NODE 6 ; SIMPLE_DECL 5 long timeout ; VAR_DECL 6 long timeout TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 timeout LEAF_NODE 8 timeout LEAF_NODE 6 ; SIMPLE_DECL 5 long time ; VAR_DECL 6 long time TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 time LEAF_NODE 8 time LEAF_NODE 6 ; SIMPLE_DECL 5 const SSL_CIPHER * cipher ; VAR_DECL 6 const SSL_CIPHER * cipher TYPE 7 const SSL_CIPHER * TYPE_NAME 8 const SSL_CIPHER LEAF_NODE 9 const LEAF_NODE 9 SSL_CIPHER POINTER 8 * LEAF_NODE 9 * NAME 7 cipher LEAF_NODE 8 cipher LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long cipher_id ; VAR_DECL 6 unsigned long cipher_id TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 cipher_id LEAF_NODE 8 cipher_id LEAF_NODE 6 ; SIMPLE_DECL 5 CRYPTO_EX_DATA ex_data ; VAR_DECL 6 CRYPTO_EX_DATA ex_data TYPE 7 CRYPTO_EX_DATA TYPE_NAME 8 CRYPTO_EX_DATA LEAF_NODE 9 CRYPTO_EX_DATA NAME 7 ex_data LEAF_NODE 8 ex_data LEAF_NODE 6 ; SIMPLE_DECL 5 struct ssl_session_st * prev , struct ssl_session_st * next ; INIT_DECL_LIST 6 struct ssl_session_st * prev , struct ssl_session_st * next VAR_DECL 7 struct ssl_session_st * prev TYPE 8 struct ssl_session_st * TYPE_NAME 9 struct ssl_session_st LEAF_NODE 10 struct LEAF_NODE 10 ssl_session_st POINTER 9 * LEAF_NODE 10 * NAME 8 prev LEAF_NODE 9 prev LEAF_NODE 7 , VAR_DECL 7 struct ssl_session_st * next TYPE 8 struct ssl_session_st * TYPE_NAME 9 struct ssl_session_st LEAF_NODE 10 struct LEAF_NODE 10 ssl_session_st POINTER 9 * LEAF_NODE 10 * NAME 8 next LEAF_NODE 9 next LEAF_NODE 6 ; SIMPLE_DECL 5 char * tlsext_hostname ; VAR_DECL 6 char * tlsext_hostname TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 tlsext_hostname LEAF_NODE 8 tlsext_hostname LEAF_NODE 6 ; SIMPLE_DECL 5 uint8_t * tlsext_tick ; VAR_DECL 6 uint8_t * tlsext_tick TYPE 7 uint8_t * TYPE_NAME 8 uint8_t LEAF_NODE 9 uint8_t POINTER 8 * LEAF_NODE 9 * NAME 7 tlsext_tick LEAF_NODE 8 tlsext_tick LEAF_NODE 6 ; SIMPLE_DECL 5 size_t tlsext_ticklen ; VAR_DECL 6 size_t tlsext_ticklen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 tlsext_ticklen LEAF_NODE 8 tlsext_ticklen LEAF_NODE 6 ; SIMPLE_DECL 5 uint32_t tlsext_tick_lifetime_hint ; VAR_DECL 6 uint32_t tlsext_tick_lifetime_hint TYPE 7 uint32_t TYPE_NAME 8 uint32_t LEAF_NODE 9 uint32_t NAME 7 tlsext_tick_lifetime_hint LEAF_NODE 8 tlsext_tick_lifetime_hint LEAF_NODE 6 ; SIMPLE_DECL 5 size_t tlsext_signed_cert_timestamp_list_length ; VAR_DECL 6 size_t tlsext_signed_cert_timestamp_list_length TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 tlsext_signed_cert_timestamp_list_length LEAF_NODE 8 tlsext_signed_cert_timestamp_list_length LEAF_NODE 6 ; SIMPLE_DECL 5 uint8_t * tlsext_signed_cert_timestamp_list ; VAR_DECL 6 uint8_t * tlsext_signed_cert_timestamp_list TYPE 7 uint8_t * TYPE_NAME 8 uint8_t LEAF_NODE 9 uint8_t POINTER 8 * LEAF_NODE 9 * NAME 7 tlsext_signed_cert_timestamp_list LEAF_NODE 8 tlsext_signed_cert_timestamp_list LEAF_NODE 6 ; SIMPLE_DECL 5 size_t ocsp_response_length ; VAR_DECL 6 size_t ocsp_response_length TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 ocsp_response_length LEAF_NODE 8 ocsp_response_length LEAF_NODE 6 ; SIMPLE_DECL 5 size_t tlsext_ecpointformatlist_length ; VAR_DECL 6 size_t tlsext_ecpointformatlist_length TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 tlsext_ecpointformatlist_length LEAF_NODE 8 tlsext_ecpointformatlist_length LEAF_NODE 6 ; SIMPLE_DECL 5 uint8_t * ocsp_response ; VAR_DECL 6 uint8_t * ocsp_response TYPE 7 uint8_t * TYPE_NAME 8 uint8_t LEAF_NODE 9 uint8_t POINTER 8 * LEAF_NODE 9 * NAME 7 ocsp_response LEAF_NODE 8 ocsp_response LEAF_NODE 6 ; SIMPLE_DECL 5 char peer_sha256_valid ; VAR_DECL 6 char peer_sha256_valid TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 peer_sha256_valid LEAF_NODE 8 peer_sha256_valid LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char tlsext_ecpointformatlist ; VAR_DECL 6 unsigned char tlsext_ecpointformatlist TYPE 7 unsigned char TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char NAME 7 tlsext_ecpointformatlist LEAF_NODE 8 tlsext_ecpointformatlist LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ SHA256_DIGEST_LENGTH ] peer_sha256 ; VAR_DECL 6 unsigned char [ SHA256_DIGEST_LENGTH ] peer_sha256 TYPE 7 unsigned char [ SHA256_DIGEST_LENGTH ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ SHA256_DIGEST_LENGTH ] LEAF_NODE 9 [ FIELD 9 SHA256_DIGEST_LENGTH LEAF_NODE 10 SHA256_DIGEST_LENGTH LEAF_NODE 9 ] NAME 7 peer_sha256 LEAF_NODE 8 peer_sha256 LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ EVP_MAX_MD_SIZE ] original_handshake_hash ; VAR_DECL 6 unsigned char [ EVP_MAX_MD_SIZE ] original_handshake_hash TYPE 7 unsigned char [ EVP_MAX_MD_SIZE ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ EVP_MAX_MD_SIZE ] LEAF_NODE 9 [ FIELD 9 EVP_MAX_MD_SIZE LEAF_NODE 10 EVP_MAX_MD_SIZE LEAF_NODE 9 ] NAME 7 original_handshake_hash LEAF_NODE 8 original_handshake_hash LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int original_handshake_hash_len ; VAR_DECL 6 unsigned int original_handshake_hash_len TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 original_handshake_hash_len LEAF_NODE 8 original_handshake_hash_len LEAF_NODE 6 ; SIMPLE_DECL 5 char extended_master_secret ; VAR_DECL 6 char extended_master_secret TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 extended_master_secret LEAF_NODE 8 extended_master_secret LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl_session_st SSL_SESSION ; VAR_DECL 2 struct ssl_session_st SSL_SESSION TYPE 3 struct ssl_session_st TYPE_NAME 4 struct ssl_session_st LEAF_NODE 5 struct LEAF_NODE 5 ssl_session_st NAME 3 SSL_SESSION LEAF_NODE 4 SSL_SESSION LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl3_record_st BASE_CLASSES { int type ; unsigned int length ; unsigned int off ; unsigned char * data ; unsigned char * input ; unsigned char * comp ; unsigned long epoch ; unsigned char [ 8 ] seq_num ; } SSL3_RECORD ; VAR_DECL 2 struct ssl3_record_st BASE_CLASSES { int type ; unsigned int length ; unsigned int off ; unsigned char * data ; unsigned char * input ; unsigned char * comp ; unsigned long epoch ; unsigned char [ 8 ] seq_num ; } SSL3_RECORD TYPE 3 struct ssl3_record_st BASE_CLASSES { int type ; unsigned int length ; unsigned int off ; unsigned char * data ; unsigned char * input ; unsigned char * comp ; unsigned long epoch ; unsigned char [ 8 ] seq_num ; } CLASS_DEF 4 struct ssl3_record_st BASE_CLASSES { int type ; unsigned int length ; unsigned int off ; unsigned char * data ; unsigned char * input ; unsigned char * comp ; unsigned long epoch ; unsigned char [ 8 ] seq_num ; } LEAF_NODE 5 struct CLASS_NAME 5 ssl3_record_st LEAF_NODE 6 ssl3_record_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int type ; unsigned int length ; unsigned int off ; unsigned char * data ; unsigned char * input ; unsigned char * comp ; unsigned long epoch ; unsigned char [ 8 ] seq_num ; SIMPLE_DECL 6 int type ; VAR_DECL 7 int type TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 type LEAF_NODE 9 type LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned int length ; VAR_DECL 7 unsigned int length TYPE 8 unsigned int TYPE_NAME 9 unsigned int LEAF_NODE 10 unsigned LEAF_NODE 10 int NAME 8 length LEAF_NODE 9 length LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned int off ; VAR_DECL 7 unsigned int off TYPE 8 unsigned int TYPE_NAME 9 unsigned int LEAF_NODE 10 unsigned LEAF_NODE 10 int NAME 8 off LEAF_NODE 9 off LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * data ; VAR_DECL 7 unsigned char * data TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 data LEAF_NODE 9 data LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * input ; VAR_DECL 7 unsigned char * input TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 input LEAF_NODE 9 input LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * comp ; VAR_DECL 7 unsigned char * comp TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 comp LEAF_NODE 9 comp LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned long epoch ; VAR_DECL 7 unsigned long epoch TYPE 8 unsigned long TYPE_NAME 9 unsigned long LEAF_NODE 10 unsigned LEAF_NODE 10 long NAME 8 epoch LEAF_NODE 9 epoch LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 8 ] seq_num ; VAR_DECL 7 unsigned char [ 8 ] seq_num TYPE 8 unsigned char [ 8 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 8 ] LEAF_NODE 10 [ FIELD 10 8 LEAF_NODE 11 8 LEAF_NODE 10 ] NAME 8 seq_num LEAF_NODE 9 seq_num LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 SSL3_RECORD LEAF_NODE 4 SSL3_RECORD LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl3_buffer_st BASE_CLASSES { unsigned char * buf ; size_t len ; int offset ; int left ; } SSL3_BUFFER ; VAR_DECL 2 struct ssl3_buffer_st BASE_CLASSES { unsigned char * buf ; size_t len ; int offset ; int left ; } SSL3_BUFFER TYPE 3 struct ssl3_buffer_st BASE_CLASSES { unsigned char * buf ; size_t len ; int offset ; int left ; } CLASS_DEF 4 struct ssl3_buffer_st BASE_CLASSES { unsigned char * buf ; size_t len ; int offset ; int left ; } LEAF_NODE 5 struct CLASS_NAME 5 ssl3_buffer_st LEAF_NODE 6 ssl3_buffer_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * buf ; size_t len ; int offset ; int left ; SIMPLE_DECL 6 unsigned char * buf ; VAR_DECL 7 unsigned char * buf TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 buf LEAF_NODE 9 buf LEAF_NODE 7 ; SIMPLE_DECL 6 size_t len ; VAR_DECL 7 size_t len TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 len LEAF_NODE 9 len LEAF_NODE 7 ; SIMPLE_DECL 6 int offset ; VAR_DECL 7 int offset TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 offset LEAF_NODE 9 offset LEAF_NODE 7 ; SIMPLE_DECL 6 int left ; VAR_DECL 7 int left TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 left LEAF_NODE 9 left LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 SSL3_BUFFER LEAF_NODE 4 SSL3_BUFFER LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl_comp_st SSL_COMP ; VAR_DECL 2 struct ssl_comp_st SSL_COMP TYPE 3 struct ssl_comp_st TYPE_NAME 4 struct ssl_comp_st LEAF_NODE 5 struct LEAF_NODE 5 ssl_comp_st NAME 3 SSL_COMP LEAF_NODE 4 SSL_COMP LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl3_state_st BASE_CLASSES { long flags ; int delay_buf_pop_ret ; unsigned char [ 8 ] read_sequence ; int read_mac_secret_size ; unsigned char [ EVP_MAX_MD_SIZE ] read_mac_secret ; unsigned char [ 8 ] write_sequence ; int write_mac_secret_size ; unsigned char [ EVP_MAX_MD_SIZE ] write_mac_secret ; unsigned char [ SSL3_RANDOM_SIZE ] server_random ; unsigned char [ SSL3_RANDOM_SIZE ] client_random ; int need_empty_fragments ; int empty_fragment_done ; int init_extra ; SSL3_BUFFER rbuf ; SSL3_BUFFER wbuf ; SSL3_RECORD rrec ; SSL3_RECORD wrec ; unsigned char [ 2 ] alert_fragment ; unsigned int alert_fragment_len ; unsigned char [ 4 ] handshake_fragment ; unsigned int handshake_fragment_len ; unsigned int wnum ; int wpend_tot ; int wpend_type ; int wpend_ret ; const unsigned char * wpend_buf ; BIO * handshake_buffer ; EVP_MD_CTX * handshake_dgst ; int change_cipher_spec ; int warn_alert ; int fatal_alert ; int alert_dispatch ; unsigned char [ 2 ] send_alert ; int renegotiate ; int total_renegotiations ; int num_renegotiations ; int in_read_app_data ; void * client_opaque_prf_input ; size_t client_opaque_prf_input_len ; void * server_opaque_prf_input ; size_t server_opaque_prf_input_len ; struct CLASS_NAME BASE_CLASSES { unsigned char [ EVP_MAX_MD_SIZE * 2 ] cert_verify_md ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] finish_md ; int finish_md_len ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] peer_finish_md ; int peer_finish_md_len ; unsigned long message_size ; int message_type ; const SSL_CIPHER * new_cipher ; DH * dh ; EC_KEY * ecdh ; int next_state ; int reuse_message ; int cert_req ; int ctype_num ; char [ SSL3_CT_NUMBER ] ctype ; STACK_OF ( X509_NAME ) * ca_names ; int use_rsa_tmp ; int key_block_length ; unsigned char * key_block ; const EVP_CIPHER * new_sym_enc ; const EVP_MD * new_hash ; int new_mac_pkey_type ; int new_mac_secret_size ; const SSL_COMP * new_compression ; char * new_compression ; int cert_request ; } tmp ; unsigned char [ EVP_MAX_MD_SIZE ] previous_client_finished ; unsigned char previous_client_finished_len ; unsigned char [ EVP_MAX_MD_SIZE ] previous_server_finished ; unsigned char previous_server_finished_len ; int send_connection_binding ; int next_proto_neg_seen ; char is_probably_safari ; unsigned char * alpn_selected ; unsigned alpn_selected_len ; } SSL3_STATE ; VAR_DECL 2 struct ssl3_state_st BASE_CLASSES { long flags ; int delay_buf_pop_ret ; unsigned char [ 8 ] read_sequence ; int read_mac_secret_size ; unsigned char [ EVP_MAX_MD_SIZE ] read_mac_secret ; unsigned char [ 8 ] write_sequence ; int write_mac_secret_size ; unsigned char [ EVP_MAX_MD_SIZE ] write_mac_secret ; unsigned char [ SSL3_RANDOM_SIZE ] server_random ; unsigned char [ SSL3_RANDOM_SIZE ] client_random ; int need_empty_fragments ; int empty_fragment_done ; int init_extra ; SSL3_BUFFER rbuf ; SSL3_BUFFER wbuf ; SSL3_RECORD rrec ; SSL3_RECORD wrec ; unsigned char [ 2 ] alert_fragment ; unsigned int alert_fragment_len ; unsigned char [ 4 ] handshake_fragment ; unsigned int handshake_fragment_len ; unsigned int wnum ; int wpend_tot ; int wpend_type ; int wpend_ret ; const unsigned char * wpend_buf ; BIO * handshake_buffer ; EVP_MD_CTX * handshake_dgst ; int change_cipher_spec ; int warn_alert ; int fatal_alert ; int alert_dispatch ; unsigned char [ 2 ] send_alert ; int renegotiate ; int total_renegotiations ; int num_renegotiations ; int in_read_app_data ; void * client_opaque_prf_input ; size_t client_opaque_prf_input_len ; void * server_opaque_prf_input ; size_t server_opaque_prf_input_len ; struct CLASS_NAME BASE_CLASSES { unsigned char [ EVP_MAX_MD_SIZE * 2 ] cert_verify_md ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] finish_md ; int finish_md_len ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] peer_finish_md ; int peer_finish_md_len ; unsigned long message_size ; int message_type ; const SSL_CIPHER * new_cipher ; DH * dh ; EC_KEY * ecdh ; int next_state ; int reuse_message ; int cert_req ; int ctype_num ; char [ SSL3_CT_NUMBER ] ctype ; STACK_OF ( X509_NAME ) * ca_names ; int use_rsa_tmp ; int key_block_length ; unsigned char * key_block ; const EVP_CIPHER * new_sym_enc ; const EVP_MD * new_hash ; int new_mac_pkey_type ; int new_mac_secret_size ; const SSL_COMP * new_compression ; char * new_compression ; int cert_request ; } tmp ; unsigned char [ EVP_MAX_MD_SIZE ] previous_client_finished ; unsigned char previous_client_finished_len ; unsigned char [ EVP_MAX_MD_SIZE ] previous_server_finished ; unsigned char previous_server_finished_len ; int send_connection_binding ; int next_proto_neg_seen ; char is_probably_safari ; unsigned char * alpn_selected ; unsigned alpn_selected_len ; } SSL3_STATE TYPE 3 struct ssl3_state_st BASE_CLASSES { long flags ; int delay_buf_pop_ret ; unsigned char [ 8 ] read_sequence ; int read_mac_secret_size ; unsigned char [ EVP_MAX_MD_SIZE ] read_mac_secret ; unsigned char [ 8 ] write_sequence ; int write_mac_secret_size ; unsigned char [ EVP_MAX_MD_SIZE ] write_mac_secret ; unsigned char [ SSL3_RANDOM_SIZE ] server_random ; unsigned char [ SSL3_RANDOM_SIZE ] client_random ; int need_empty_fragments ; int empty_fragment_done ; int init_extra ; SSL3_BUFFER rbuf ; SSL3_BUFFER wbuf ; SSL3_RECORD rrec ; SSL3_RECORD wrec ; unsigned char [ 2 ] alert_fragment ; unsigned int alert_fragment_len ; unsigned char [ 4 ] handshake_fragment ; unsigned int handshake_fragment_len ; unsigned int wnum ; int wpend_tot ; int wpend_type ; int wpend_ret ; const unsigned char * wpend_buf ; BIO * handshake_buffer ; EVP_MD_CTX * handshake_dgst ; int change_cipher_spec ; int warn_alert ; int fatal_alert ; int alert_dispatch ; unsigned char [ 2 ] send_alert ; int renegotiate ; int total_renegotiations ; int num_renegotiations ; int in_read_app_data ; void * client_opaque_prf_input ; size_t client_opaque_prf_input_len ; void * server_opaque_prf_input ; size_t server_opaque_prf_input_len ; struct CLASS_NAME BASE_CLASSES { unsigned char [ EVP_MAX_MD_SIZE * 2 ] cert_verify_md ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] finish_md ; int finish_md_len ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] peer_finish_md ; int peer_finish_md_len ; unsigned long message_size ; int message_type ; const SSL_CIPHER * new_cipher ; DH * dh ; EC_KEY * ecdh ; int next_state ; int reuse_message ; int cert_req ; int ctype_num ; char [ SSL3_CT_NUMBER ] ctype ; STACK_OF ( X509_NAME ) * ca_names ; int use_rsa_tmp ; int key_block_length ; unsigned char * key_block ; const EVP_CIPHER * new_sym_enc ; const EVP_MD * new_hash ; int new_mac_pkey_type ; int new_mac_secret_size ; const SSL_COMP * new_compression ; char * new_compression ; int cert_request ; } tmp ; unsigned char [ EVP_MAX_MD_SIZE ] previous_client_finished ; unsigned char previous_client_finished_len ; unsigned char [ EVP_MAX_MD_SIZE ] previous_server_finished ; unsigned char previous_server_finished_len ; int send_connection_binding ; int next_proto_neg_seen ; char is_probably_safari ; unsigned char * alpn_selected ; unsigned alpn_selected_len ; } CLASS_DEF 4 struct ssl3_state_st BASE_CLASSES { long flags ; int delay_buf_pop_ret ; unsigned char [ 8 ] read_sequence ; int read_mac_secret_size ; unsigned char [ EVP_MAX_MD_SIZE ] read_mac_secret ; unsigned char [ 8 ] write_sequence ; int write_mac_secret_size ; unsigned char [ EVP_MAX_MD_SIZE ] write_mac_secret ; unsigned char [ SSL3_RANDOM_SIZE ] server_random ; unsigned char [ SSL3_RANDOM_SIZE ] client_random ; int need_empty_fragments ; int empty_fragment_done ; int init_extra ; SSL3_BUFFER rbuf ; SSL3_BUFFER wbuf ; SSL3_RECORD rrec ; SSL3_RECORD wrec ; unsigned char [ 2 ] alert_fragment ; unsigned int alert_fragment_len ; unsigned char [ 4 ] handshake_fragment ; unsigned int handshake_fragment_len ; unsigned int wnum ; int wpend_tot ; int wpend_type ; int wpend_ret ; const unsigned char * wpend_buf ; BIO * handshake_buffer ; EVP_MD_CTX * handshake_dgst ; int change_cipher_spec ; int warn_alert ; int fatal_alert ; int alert_dispatch ; unsigned char [ 2 ] send_alert ; int renegotiate ; int total_renegotiations ; int num_renegotiations ; int in_read_app_data ; void * client_opaque_prf_input ; size_t client_opaque_prf_input_len ; void * server_opaque_prf_input ; size_t server_opaque_prf_input_len ; struct CLASS_NAME BASE_CLASSES { unsigned char [ EVP_MAX_MD_SIZE * 2 ] cert_verify_md ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] finish_md ; int finish_md_len ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] peer_finish_md ; int peer_finish_md_len ; unsigned long message_size ; int message_type ; const SSL_CIPHER * new_cipher ; DH * dh ; EC_KEY * ecdh ; int next_state ; int reuse_message ; int cert_req ; int ctype_num ; char [ SSL3_CT_NUMBER ] ctype ; STACK_OF ( X509_NAME ) * ca_names ; int use_rsa_tmp ; int key_block_length ; unsigned char * key_block ; const EVP_CIPHER * new_sym_enc ; const EVP_MD * new_hash ; int new_mac_pkey_type ; int new_mac_secret_size ; const SSL_COMP * new_compression ; char * new_compression ; int cert_request ; } tmp ; unsigned char [ EVP_MAX_MD_SIZE ] previous_client_finished ; unsigned char previous_client_finished_len ; unsigned char [ EVP_MAX_MD_SIZE ] previous_server_finished ; unsigned char previous_server_finished_len ; int send_connection_binding ; int next_proto_neg_seen ; char is_probably_safari ; unsigned char * alpn_selected ; unsigned alpn_selected_len ; } LEAF_NODE 5 struct CLASS_NAME 5 ssl3_state_st LEAF_NODE 6 ssl3_state_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 long flags ; int delay_buf_pop_ret ; unsigned char [ 8 ] read_sequence ; int read_mac_secret_size ; unsigned char [ EVP_MAX_MD_SIZE ] read_mac_secret ; unsigned char [ 8 ] write_sequence ; int write_mac_secret_size ; unsigned char [ EVP_MAX_MD_SIZE ] write_mac_secret ; unsigned char [ SSL3_RANDOM_SIZE ] server_random ; unsigned char [ SSL3_RANDOM_SIZE ] client_random ; int need_empty_fragments ; int empty_fragment_done ; int init_extra ; SSL3_BUFFER rbuf ; SSL3_BUFFER wbuf ; SSL3_RECORD rrec ; SSL3_RECORD wrec ; unsigned char [ 2 ] alert_fragment ; unsigned int alert_fragment_len ; unsigned char [ 4 ] handshake_fragment ; unsigned int handshake_fragment_len ; unsigned int wnum ; int wpend_tot ; int wpend_type ; int wpend_ret ; const unsigned char * wpend_buf ; BIO * handshake_buffer ; EVP_MD_CTX * handshake_dgst ; int change_cipher_spec ; int warn_alert ; int fatal_alert ; int alert_dispatch ; unsigned char [ 2 ] send_alert ; int renegotiate ; int total_renegotiations ; int num_renegotiations ; int in_read_app_data ; void * client_opaque_prf_input ; size_t client_opaque_prf_input_len ; void * server_opaque_prf_input ; size_t server_opaque_prf_input_len ; struct CLASS_NAME BASE_CLASSES { unsigned char [ EVP_MAX_MD_SIZE * 2 ] cert_verify_md ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] finish_md ; int finish_md_len ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] peer_finish_md ; int peer_finish_md_len ; unsigned long message_size ; int message_type ; const SSL_CIPHER * new_cipher ; DH * dh ; EC_KEY * ecdh ; int next_state ; int reuse_message ; int cert_req ; int ctype_num ; char [ SSL3_CT_NUMBER ] ctype ; STACK_OF ( X509_NAME ) * ca_names ; int use_rsa_tmp ; int key_block_length ; unsigned char * key_block ; const EVP_CIPHER * new_sym_enc ; const EVP_MD * new_hash ; int new_mac_pkey_type ; int new_mac_secret_size ; const SSL_COMP * new_compression ; char * new_compression ; int cert_request ; } tmp ; unsigned char [ EVP_MAX_MD_SIZE ] previous_client_finished ; unsigned char previous_client_finished_len ; unsigned char [ EVP_MAX_MD_SIZE ] previous_server_finished ; unsigned char previous_server_finished_len ; int send_connection_binding ; int next_proto_neg_seen ; char is_probably_safari ; unsigned char * alpn_selected ; unsigned alpn_selected_len ; SIMPLE_DECL 6 long flags ; VAR_DECL 7 long flags TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 flags LEAF_NODE 9 flags LEAF_NODE 7 ; SIMPLE_DECL 6 int delay_buf_pop_ret ; VAR_DECL 7 int delay_buf_pop_ret TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 delay_buf_pop_ret LEAF_NODE 9 delay_buf_pop_ret LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 8 ] read_sequence ; VAR_DECL 7 unsigned char [ 8 ] read_sequence TYPE 8 unsigned char [ 8 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 8 ] LEAF_NODE 10 [ FIELD 10 8 LEAF_NODE 11 8 LEAF_NODE 10 ] NAME 8 read_sequence LEAF_NODE 9 read_sequence LEAF_NODE 7 ; SIMPLE_DECL 6 int read_mac_secret_size ; VAR_DECL 7 int read_mac_secret_size TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 read_mac_secret_size LEAF_NODE 9 read_mac_secret_size LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ EVP_MAX_MD_SIZE ] read_mac_secret ; VAR_DECL 7 unsigned char [ EVP_MAX_MD_SIZE ] read_mac_secret TYPE 8 unsigned char [ EVP_MAX_MD_SIZE ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ EVP_MAX_MD_SIZE ] LEAF_NODE 10 [ FIELD 10 EVP_MAX_MD_SIZE LEAF_NODE 11 EVP_MAX_MD_SIZE LEAF_NODE 10 ] NAME 8 read_mac_secret LEAF_NODE 9 read_mac_secret LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 8 ] write_sequence ; VAR_DECL 7 unsigned char [ 8 ] write_sequence TYPE 8 unsigned char [ 8 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 8 ] LEAF_NODE 10 [ FIELD 10 8 LEAF_NODE 11 8 LEAF_NODE 10 ] NAME 8 write_sequence LEAF_NODE 9 write_sequence LEAF_NODE 7 ; SIMPLE_DECL 6 int write_mac_secret_size ; VAR_DECL 7 int write_mac_secret_size TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 write_mac_secret_size LEAF_NODE 9 write_mac_secret_size LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ EVP_MAX_MD_SIZE ] write_mac_secret ; VAR_DECL 7 unsigned char [ EVP_MAX_MD_SIZE ] write_mac_secret TYPE 8 unsigned char [ EVP_MAX_MD_SIZE ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ EVP_MAX_MD_SIZE ] LEAF_NODE 10 [ FIELD 10 EVP_MAX_MD_SIZE LEAF_NODE 11 EVP_MAX_MD_SIZE LEAF_NODE 10 ] NAME 8 write_mac_secret LEAF_NODE 9 write_mac_secret LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ SSL3_RANDOM_SIZE ] server_random ; VAR_DECL 7 unsigned char [ SSL3_RANDOM_SIZE ] server_random TYPE 8 unsigned char [ SSL3_RANDOM_SIZE ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ SSL3_RANDOM_SIZE ] LEAF_NODE 10 [ FIELD 10 SSL3_RANDOM_SIZE LEAF_NODE 11 SSL3_RANDOM_SIZE LEAF_NODE 10 ] NAME 8 server_random LEAF_NODE 9 server_random LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ SSL3_RANDOM_SIZE ] client_random ; VAR_DECL 7 unsigned char [ SSL3_RANDOM_SIZE ] client_random TYPE 8 unsigned char [ SSL3_RANDOM_SIZE ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ SSL3_RANDOM_SIZE ] LEAF_NODE 10 [ FIELD 10 SSL3_RANDOM_SIZE LEAF_NODE 11 SSL3_RANDOM_SIZE LEAF_NODE 10 ] NAME 8 client_random LEAF_NODE 9 client_random LEAF_NODE 7 ; SIMPLE_DECL 6 int need_empty_fragments ; VAR_DECL 7 int need_empty_fragments TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 need_empty_fragments LEAF_NODE 9 need_empty_fragments LEAF_NODE 7 ; SIMPLE_DECL 6 int empty_fragment_done ; VAR_DECL 7 int empty_fragment_done TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 empty_fragment_done LEAF_NODE 9 empty_fragment_done LEAF_NODE 7 ; SIMPLE_DECL 6 int init_extra ; VAR_DECL 7 int init_extra TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 init_extra LEAF_NODE 9 init_extra LEAF_NODE 7 ; SIMPLE_DECL 6 SSL3_BUFFER rbuf ; VAR_DECL 7 SSL3_BUFFER rbuf TYPE 8 SSL3_BUFFER TYPE_NAME 9 SSL3_BUFFER LEAF_NODE 10 SSL3_BUFFER NAME 8 rbuf LEAF_NODE 9 rbuf LEAF_NODE 7 ; SIMPLE_DECL 6 SSL3_BUFFER wbuf ; VAR_DECL 7 SSL3_BUFFER wbuf TYPE 8 SSL3_BUFFER TYPE_NAME 9 SSL3_BUFFER LEAF_NODE 10 SSL3_BUFFER NAME 8 wbuf LEAF_NODE 9 wbuf LEAF_NODE 7 ; SIMPLE_DECL 6 SSL3_RECORD rrec ; VAR_DECL 7 SSL3_RECORD rrec TYPE 8 SSL3_RECORD TYPE_NAME 9 SSL3_RECORD LEAF_NODE 10 SSL3_RECORD NAME 8 rrec LEAF_NODE 9 rrec LEAF_NODE 7 ; SIMPLE_DECL 6 SSL3_RECORD wrec ; VAR_DECL 7 SSL3_RECORD wrec TYPE 8 SSL3_RECORD TYPE_NAME 9 SSL3_RECORD LEAF_NODE 10 SSL3_RECORD NAME 8 wrec LEAF_NODE 9 wrec LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 2 ] alert_fragment ; VAR_DECL 7 unsigned char [ 2 ] alert_fragment TYPE 8 unsigned char [ 2 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 2 ] LEAF_NODE 10 [ FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 10 ] NAME 8 alert_fragment LEAF_NODE 9 alert_fragment LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned int alert_fragment_len ; VAR_DECL 7 unsigned int alert_fragment_len TYPE 8 unsigned int TYPE_NAME 9 unsigned int LEAF_NODE 10 unsigned LEAF_NODE 10 int NAME 8 alert_fragment_len LEAF_NODE 9 alert_fragment_len LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 4 ] handshake_fragment ; VAR_DECL 7 unsigned char [ 4 ] handshake_fragment TYPE 8 unsigned char [ 4 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 4 ] LEAF_NODE 10 [ FIELD 10 4 LEAF_NODE 11 4 LEAF_NODE 10 ] NAME 8 handshake_fragment LEAF_NODE 9 handshake_fragment LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned int handshake_fragment_len ; VAR_DECL 7 unsigned int handshake_fragment_len TYPE 8 unsigned int TYPE_NAME 9 unsigned int LEAF_NODE 10 unsigned LEAF_NODE 10 int NAME 8 handshake_fragment_len LEAF_NODE 9 handshake_fragment_len LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned int wnum ; VAR_DECL 7 unsigned int wnum TYPE 8 unsigned int TYPE_NAME 9 unsigned int LEAF_NODE 10 unsigned LEAF_NODE 10 int NAME 8 wnum LEAF_NODE 9 wnum LEAF_NODE 7 ; SIMPLE_DECL 6 int wpend_tot ; VAR_DECL 7 int wpend_tot TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 wpend_tot LEAF_NODE 9 wpend_tot LEAF_NODE 7 ; SIMPLE_DECL 6 int wpend_type ; VAR_DECL 7 int wpend_type TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 wpend_type LEAF_NODE 9 wpend_type LEAF_NODE 7 ; SIMPLE_DECL 6 int wpend_ret ; VAR_DECL 7 int wpend_ret TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 wpend_ret LEAF_NODE 9 wpend_ret LEAF_NODE 7 ; SIMPLE_DECL 6 const unsigned char * wpend_buf ; VAR_DECL 7 const unsigned char * wpend_buf TYPE 8 const unsigned char * TYPE_NAME 9 const unsigned char LEAF_NODE 10 const LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 wpend_buf LEAF_NODE 9 wpend_buf LEAF_NODE 7 ; SIMPLE_DECL 6 BIO * handshake_buffer ; VAR_DECL 7 BIO * handshake_buffer TYPE 8 BIO * TYPE_NAME 9 BIO LEAF_NODE 10 BIO POINTER 9 * LEAF_NODE 10 * NAME 8 handshake_buffer LEAF_NODE 9 handshake_buffer LEAF_NODE 7 ; SIMPLE_DECL 6 EVP_MD_CTX * handshake_dgst ; VAR_DECL 7 EVP_MD_CTX * handshake_dgst TYPE 8 EVP_MD_CTX * TYPE_NAME 9 EVP_MD_CTX LEAF_NODE 10 EVP_MD_CTX POINTER 9 * LEAF_NODE 10 * NAME 8 handshake_dgst LEAF_NODE 9 handshake_dgst LEAF_NODE 7 ; SIMPLE_DECL 6 int change_cipher_spec ; VAR_DECL 7 int change_cipher_spec TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 change_cipher_spec LEAF_NODE 9 change_cipher_spec LEAF_NODE 7 ; SIMPLE_DECL 6 int warn_alert ; VAR_DECL 7 int warn_alert TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 warn_alert LEAF_NODE 9 warn_alert LEAF_NODE 7 ; SIMPLE_DECL 6 int fatal_alert ; VAR_DECL 7 int fatal_alert TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 fatal_alert LEAF_NODE 9 fatal_alert LEAF_NODE 7 ; SIMPLE_DECL 6 int alert_dispatch ; VAR_DECL 7 int alert_dispatch TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 alert_dispatch LEAF_NODE 9 alert_dispatch LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 2 ] send_alert ; VAR_DECL 7 unsigned char [ 2 ] send_alert TYPE 8 unsigned char [ 2 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 2 ] LEAF_NODE 10 [ FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 10 ] NAME 8 send_alert LEAF_NODE 9 send_alert LEAF_NODE 7 ; SIMPLE_DECL 6 int renegotiate ; VAR_DECL 7 int renegotiate TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 renegotiate LEAF_NODE 9 renegotiate LEAF_NODE 7 ; SIMPLE_DECL 6 int total_renegotiations ; VAR_DECL 7 int total_renegotiations TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 total_renegotiations LEAF_NODE 9 total_renegotiations LEAF_NODE 7 ; SIMPLE_DECL 6 int num_renegotiations ; VAR_DECL 7 int num_renegotiations TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 num_renegotiations LEAF_NODE 9 num_renegotiations LEAF_NODE 7 ; SIMPLE_DECL 6 int in_read_app_data ; VAR_DECL 7 int in_read_app_data TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 in_read_app_data LEAF_NODE 9 in_read_app_data LEAF_NODE 7 ; SIMPLE_DECL 6 void * client_opaque_prf_input ; VAR_DECL 7 void * client_opaque_prf_input TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 client_opaque_prf_input LEAF_NODE 9 client_opaque_prf_input LEAF_NODE 7 ; SIMPLE_DECL 6 size_t client_opaque_prf_input_len ; VAR_DECL 7 size_t client_opaque_prf_input_len TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 client_opaque_prf_input_len LEAF_NODE 9 client_opaque_prf_input_len LEAF_NODE 7 ; SIMPLE_DECL 6 void * server_opaque_prf_input ; VAR_DECL 7 void * server_opaque_prf_input TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 server_opaque_prf_input LEAF_NODE 9 server_opaque_prf_input LEAF_NODE 7 ; SIMPLE_DECL 6 size_t server_opaque_prf_input_len ; VAR_DECL 7 size_t server_opaque_prf_input_len TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 server_opaque_prf_input_len LEAF_NODE 9 server_opaque_prf_input_len LEAF_NODE 7 ; SIMPLE_DECL 6 struct CLASS_NAME BASE_CLASSES { unsigned char [ EVP_MAX_MD_SIZE * 2 ] cert_verify_md ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] finish_md ; int finish_md_len ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] peer_finish_md ; int peer_finish_md_len ; unsigned long message_size ; int message_type ; const SSL_CIPHER * new_cipher ; DH * dh ; EC_KEY * ecdh ; int next_state ; int reuse_message ; int cert_req ; int ctype_num ; char [ SSL3_CT_NUMBER ] ctype ; STACK_OF ( X509_NAME ) * ca_names ; int use_rsa_tmp ; int key_block_length ; unsigned char * key_block ; const EVP_CIPHER * new_sym_enc ; const EVP_MD * new_hash ; int new_mac_pkey_type ; int new_mac_secret_size ; const SSL_COMP * new_compression ; char * new_compression ; int cert_request ; } tmp ; VAR_DECL 7 struct CLASS_NAME BASE_CLASSES { unsigned char [ EVP_MAX_MD_SIZE * 2 ] cert_verify_md ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] finish_md ; int finish_md_len ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] peer_finish_md ; int peer_finish_md_len ; unsigned long message_size ; int message_type ; const SSL_CIPHER * new_cipher ; DH * dh ; EC_KEY * ecdh ; int next_state ; int reuse_message ; int cert_req ; int ctype_num ; char [ SSL3_CT_NUMBER ] ctype ; STACK_OF ( X509_NAME ) * ca_names ; int use_rsa_tmp ; int key_block_length ; unsigned char * key_block ; const EVP_CIPHER * new_sym_enc ; const EVP_MD * new_hash ; int new_mac_pkey_type ; int new_mac_secret_size ; const SSL_COMP * new_compression ; char * new_compression ; int cert_request ; } tmp TYPE 8 struct CLASS_NAME BASE_CLASSES { unsigned char [ EVP_MAX_MD_SIZE * 2 ] cert_verify_md ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] finish_md ; int finish_md_len ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] peer_finish_md ; int peer_finish_md_len ; unsigned long message_size ; int message_type ; const SSL_CIPHER * new_cipher ; DH * dh ; EC_KEY * ecdh ; int next_state ; int reuse_message ; int cert_req ; int ctype_num ; char [ SSL3_CT_NUMBER ] ctype ; STACK_OF ( X509_NAME ) * ca_names ; int use_rsa_tmp ; int key_block_length ; unsigned char * key_block ; const EVP_CIPHER * new_sym_enc ; const EVP_MD * new_hash ; int new_mac_pkey_type ; int new_mac_secret_size ; const SSL_COMP * new_compression ; char * new_compression ; int cert_request ; } CLASS_DEF 9 struct CLASS_NAME BASE_CLASSES { unsigned char [ EVP_MAX_MD_SIZE * 2 ] cert_verify_md ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] finish_md ; int finish_md_len ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] peer_finish_md ; int peer_finish_md_len ; unsigned long message_size ; int message_type ; const SSL_CIPHER * new_cipher ; DH * dh ; EC_KEY * ecdh ; int next_state ; int reuse_message ; int cert_req ; int ctype_num ; char [ SSL3_CT_NUMBER ] ctype ; STACK_OF ( X509_NAME ) * ca_names ; int use_rsa_tmp ; int key_block_length ; unsigned char * key_block ; const EVP_CIPHER * new_sym_enc ; const EVP_MD * new_hash ; int new_mac_pkey_type ; int new_mac_secret_size ; const SSL_COMP * new_compression ; char * new_compression ; int cert_request ; } LEAF_NODE 10 struct LEAF_NODE 10 CLASS_NAME LEAF_NODE 10 BASE_CLASSES LEAF_NODE 10 { CLASS_CONTENT 10 unsigned char [ EVP_MAX_MD_SIZE * 2 ] cert_verify_md ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] finish_md ; int finish_md_len ; unsigned char [ EVP_MAX_MD_SIZE * 2 ] peer_finish_md ; int peer_finish_md_len ; unsigned long message_size ; int message_type ; const SSL_CIPHER * new_cipher ; DH * dh ; EC_KEY * ecdh ; int next_state ; int reuse_message ; int cert_req ; int ctype_num ; char [ SSL3_CT_NUMBER ] ctype ; STACK_OF ( X509_NAME ) * ca_names ; int use_rsa_tmp ; int key_block_length ; unsigned char * key_block ; const EVP_CIPHER * new_sym_enc ; const EVP_MD * new_hash ; int new_mac_pkey_type ; int new_mac_secret_size ; const SSL_COMP * new_compression ; char * new_compression ; int cert_request ; SIMPLE_DECL 11 unsigned char [ EVP_MAX_MD_SIZE * 2 ] cert_verify_md ; VAR_DECL 12 unsigned char [ EVP_MAX_MD_SIZE * 2 ] cert_verify_md TYPE 13 unsigned char [ EVP_MAX_MD_SIZE * 2 ] TYPE_NAME 14 unsigned char LEAF_NODE 15 unsigned LEAF_NODE 15 char TYPE_SUFFIX 14 [ EVP_MAX_MD_SIZE * 2 ] LEAF_NODE 15 [ FIELD 15 EVP_MAX_MD_SIZE LEAF_NODE 16 EVP_MAX_MD_SIZE LEAF_NODE 15 * FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 15 ] NAME 13 cert_verify_md LEAF_NODE 14 cert_verify_md LEAF_NODE 12 ; SIMPLE_DECL 11 unsigned char [ EVP_MAX_MD_SIZE * 2 ] finish_md ; VAR_DECL 12 unsigned char [ EVP_MAX_MD_SIZE * 2 ] finish_md TYPE 13 unsigned char [ EVP_MAX_MD_SIZE * 2 ] TYPE_NAME 14 unsigned char LEAF_NODE 15 unsigned LEAF_NODE 15 char TYPE_SUFFIX 14 [ EVP_MAX_MD_SIZE * 2 ] LEAF_NODE 15 [ FIELD 15 EVP_MAX_MD_SIZE LEAF_NODE 16 EVP_MAX_MD_SIZE LEAF_NODE 15 * FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 15 ] NAME 13 finish_md LEAF_NODE 14 finish_md LEAF_NODE 12 ; SIMPLE_DECL 11 int finish_md_len ; VAR_DECL 12 int finish_md_len TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 finish_md_len LEAF_NODE 14 finish_md_len LEAF_NODE 12 ; SIMPLE_DECL 11 unsigned char [ EVP_MAX_MD_SIZE * 2 ] peer_finish_md ; VAR_DECL 12 unsigned char [ EVP_MAX_MD_SIZE * 2 ] peer_finish_md TYPE 13 unsigned char [ EVP_MAX_MD_SIZE * 2 ] TYPE_NAME 14 unsigned char LEAF_NODE 15 unsigned LEAF_NODE 15 char TYPE_SUFFIX 14 [ EVP_MAX_MD_SIZE * 2 ] LEAF_NODE 15 [ FIELD 15 EVP_MAX_MD_SIZE LEAF_NODE 16 EVP_MAX_MD_SIZE LEAF_NODE 15 * FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 15 ] NAME 13 peer_finish_md LEAF_NODE 14 peer_finish_md LEAF_NODE 12 ; SIMPLE_DECL 11 int peer_finish_md_len ; VAR_DECL 12 int peer_finish_md_len TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 peer_finish_md_len LEAF_NODE 14 peer_finish_md_len LEAF_NODE 12 ; SIMPLE_DECL 11 unsigned long message_size ; VAR_DECL 12 unsigned long message_size TYPE 13 unsigned long TYPE_NAME 14 unsigned long LEAF_NODE 15 unsigned LEAF_NODE 15 long NAME 13 message_size LEAF_NODE 14 message_size LEAF_NODE 12 ; SIMPLE_DECL 11 int message_type ; VAR_DECL 12 int message_type TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 message_type LEAF_NODE 14 message_type LEAF_NODE 12 ; SIMPLE_DECL 11 const SSL_CIPHER * new_cipher ; VAR_DECL 12 const SSL_CIPHER * new_cipher TYPE 13 const SSL_CIPHER * TYPE_NAME 14 const SSL_CIPHER LEAF_NODE 15 const LEAF_NODE 15 SSL_CIPHER POINTER 14 * LEAF_NODE 15 * NAME 13 new_cipher LEAF_NODE 14 new_cipher LEAF_NODE 12 ; SIMPLE_DECL 11 DH * dh ; VAR_DECL 12 DH * dh TYPE 13 DH * TYPE_NAME 14 DH LEAF_NODE 15 DH POINTER 14 * LEAF_NODE 15 * NAME 13 dh LEAF_NODE 14 dh LEAF_NODE 12 ; SIMPLE_DECL 11 EC_KEY * ecdh ; VAR_DECL 12 EC_KEY * ecdh TYPE 13 EC_KEY * TYPE_NAME 14 EC_KEY LEAF_NODE 15 EC_KEY POINTER 14 * LEAF_NODE 15 * NAME 13 ecdh LEAF_NODE 14 ecdh LEAF_NODE 12 ; SIMPLE_DECL 11 int next_state ; VAR_DECL 12 int next_state TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 next_state LEAF_NODE 14 next_state LEAF_NODE 12 ; SIMPLE_DECL 11 int reuse_message ; VAR_DECL 12 int reuse_message TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 reuse_message LEAF_NODE 14 reuse_message LEAF_NODE 12 ; SIMPLE_DECL 11 int cert_req ; VAR_DECL 12 int cert_req TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 cert_req LEAF_NODE 14 cert_req LEAF_NODE 12 ; SIMPLE_DECL 11 int ctype_num ; VAR_DECL 12 int ctype_num TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 ctype_num LEAF_NODE 14 ctype_num LEAF_NODE 12 ; SIMPLE_DECL 11 char [ SSL3_CT_NUMBER ] ctype ; VAR_DECL 12 char [ SSL3_CT_NUMBER ] ctype TYPE 13 char [ SSL3_CT_NUMBER ] TYPE_NAME 14 char LEAF_NODE 15 char TYPE_SUFFIX 14 [ SSL3_CT_NUMBER ] LEAF_NODE 15 [ FIELD 15 SSL3_CT_NUMBER LEAF_NODE 16 SSL3_CT_NUMBER LEAF_NODE 15 ] NAME 13 ctype LEAF_NODE 14 ctype LEAF_NODE 12 ; LEAF_NODE 11 STACK_OF LEAF_NODE 11 ( LEAF_NODE 11 X509_NAME LEAF_NODE 11 ) LEAF_NODE 11 * LEAF_NODE 11 ca_names LEAF_NODE 11 ; SIMPLE_DECL 11 int use_rsa_tmp ; VAR_DECL 12 int use_rsa_tmp TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 use_rsa_tmp LEAF_NODE 14 use_rsa_tmp LEAF_NODE 12 ; SIMPLE_DECL 11 int key_block_length ; VAR_DECL 12 int key_block_length TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 key_block_length LEAF_NODE 14 key_block_length LEAF_NODE 12 ; SIMPLE_DECL 11 unsigned char * key_block ; VAR_DECL 12 unsigned char * key_block TYPE 13 unsigned char * TYPE_NAME 14 unsigned char LEAF_NODE 15 unsigned LEAF_NODE 15 char POINTER 14 * LEAF_NODE 15 * NAME 13 key_block LEAF_NODE 14 key_block LEAF_NODE 12 ; SIMPLE_DECL 11 const EVP_CIPHER * new_sym_enc ; VAR_DECL 12 const EVP_CIPHER * new_sym_enc TYPE 13 const EVP_CIPHER * TYPE_NAME 14 const EVP_CIPHER LEAF_NODE 15 const LEAF_NODE 15 EVP_CIPHER POINTER 14 * LEAF_NODE 15 * NAME 13 new_sym_enc LEAF_NODE 14 new_sym_enc LEAF_NODE 12 ; SIMPLE_DECL 11 const EVP_MD * new_hash ; VAR_DECL 12 const EVP_MD * new_hash TYPE 13 const EVP_MD * TYPE_NAME 14 const EVP_MD LEAF_NODE 15 const LEAF_NODE 15 EVP_MD POINTER 14 * LEAF_NODE 15 * NAME 13 new_hash LEAF_NODE 14 new_hash LEAF_NODE 12 ; SIMPLE_DECL 11 int new_mac_pkey_type ; VAR_DECL 12 int new_mac_pkey_type TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 new_mac_pkey_type LEAF_NODE 14 new_mac_pkey_type LEAF_NODE 12 ; SIMPLE_DECL 11 int new_mac_secret_size ; VAR_DECL 12 int new_mac_secret_size TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 new_mac_secret_size LEAF_NODE 14 new_mac_secret_size LEAF_NODE 12 ; SIMPLE_DECL 11 const SSL_COMP * new_compression ; VAR_DECL 12 const SSL_COMP * new_compression TYPE 13 const SSL_COMP * TYPE_NAME 14 const SSL_COMP LEAF_NODE 15 const LEAF_NODE 15 SSL_COMP POINTER 14 * LEAF_NODE 15 * NAME 13 new_compression LEAF_NODE 14 new_compression LEAF_NODE 12 ; SIMPLE_DECL 11 char * new_compression ; VAR_DECL 12 char * new_compression TYPE 13 char * TYPE_NAME 14 char LEAF_NODE 15 char POINTER 14 * LEAF_NODE 15 * NAME 13 new_compression LEAF_NODE 14 new_compression LEAF_NODE 12 ; SIMPLE_DECL 11 int cert_request ; VAR_DECL 12 int cert_request TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 cert_request LEAF_NODE 14 cert_request LEAF_NODE 12 ; LEAF_NODE 10 } NAME 8 tmp LEAF_NODE 9 tmp LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ EVP_MAX_MD_SIZE ] previous_client_finished ; VAR_DECL 7 unsigned char [ EVP_MAX_MD_SIZE ] previous_client_finished TYPE 8 unsigned char [ EVP_MAX_MD_SIZE ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ EVP_MAX_MD_SIZE ] LEAF_NODE 10 [ FIELD 10 EVP_MAX_MD_SIZE LEAF_NODE 11 EVP_MAX_MD_SIZE LEAF_NODE 10 ] NAME 8 previous_client_finished LEAF_NODE 9 previous_client_finished LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char previous_client_finished_len ; VAR_DECL 7 unsigned char previous_client_finished_len TYPE 8 unsigned char TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char NAME 8 previous_client_finished_len LEAF_NODE 9 previous_client_finished_len LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ EVP_MAX_MD_SIZE ] previous_server_finished ; VAR_DECL 7 unsigned char [ EVP_MAX_MD_SIZE ] previous_server_finished TYPE 8 unsigned char [ EVP_MAX_MD_SIZE ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ EVP_MAX_MD_SIZE ] LEAF_NODE 10 [ FIELD 10 EVP_MAX_MD_SIZE LEAF_NODE 11 EVP_MAX_MD_SIZE LEAF_NODE 10 ] NAME 8 previous_server_finished LEAF_NODE 9 previous_server_finished LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char previous_server_finished_len ; VAR_DECL 7 unsigned char previous_server_finished_len TYPE 8 unsigned char TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char NAME 8 previous_server_finished_len LEAF_NODE 9 previous_server_finished_len LEAF_NODE 7 ; SIMPLE_DECL 6 int send_connection_binding ; VAR_DECL 7 int send_connection_binding TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 send_connection_binding LEAF_NODE 9 send_connection_binding LEAF_NODE 7 ; SIMPLE_DECL 6 int next_proto_neg_seen ; VAR_DECL 7 int next_proto_neg_seen TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 next_proto_neg_seen LEAF_NODE 9 next_proto_neg_seen LEAF_NODE 7 ; SIMPLE_DECL 6 char is_probably_safari ; VAR_DECL 7 char is_probably_safari TYPE 8 char TYPE_NAME 9 char LEAF_NODE 10 char NAME 8 is_probably_safari LEAF_NODE 9 is_probably_safari LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * alpn_selected ; VAR_DECL 7 unsigned char * alpn_selected TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 alpn_selected LEAF_NODE 9 alpn_selected LEAF_NODE 7 ; LEAF_NODE 6 unsigned LEAF_NODE 6 alpn_selected_len LEAF_NODE 6 ; LEAF_NODE 5 } NAME 3 SSL3_STATE LEAF_NODE 4 SSL3_STATE LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl_st BASE_CLASSES { int version ; int type ; const SSL_METHOD * method ; BIO * rbio ; BIO * wbio ; BIO * bbio ; char * rbio ; char * wbio ; char * bbio ; int rwstate ; int in_handshake ; int ( * handshake_func ) ( SSL * ) ; int server ; int new_session ; int quiet_shutdown ; int shutdown ; int state ; int rstate ; BUF_MEM * init_buf ; uint8_t * init_msg ; int init_num ; int init_off ; unsigned char * packet ; unsigned int packet_length ; struct ssl2_state_st * s2 ; struct ssl3_state_st * s3 ; struct dtls1_state_st * d1 ; int read_ahead ; void ( * msg_callback ) ( int write_p , int version , int content_type , const void * buf , size_t len , SSL * ssl , void * arg ) ; void * msg_callback_arg ; int hit ; X509_VERIFY_PARAM * param ; int purpose ; int trust ; struct ssl_cipher_preference_list_st * cipher_list ; STACK_OF ( SSL_CIPHER ) * cipher_list_by_id ; SSL_AEAD_CTX * aead_read_ctx ; EVP_CIPHER_CTX * enc_read_ctx ; EVP_MD_CTX * read_hash ; SSL_AEAD_CTX * aead_write_ctx ; EVP_CIPHER_CTX * enc_write_ctx ; EVP_MD_CTX * write_hash ; struct cert_st * cert ; unsigned int sid_ctx_length ; unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; SSL_SESSION * session ; GEN_SESSION_CB generate_session_id ; int verify_mode ; int ( * verify_callback ) ( int ok , X509_STORE_CTX * ctx ) ; void ( * info_callback ) ( const SSL * ssl , int type , int val ) ; char * psk_identity_hint ; unsigned int ( * psk_client_callback ) ( SSL * ssl , const char * hint , char * identity , unsigned int max_identity_len , unsigned char * psk , unsigned int max_psk_len ) ; unsigned int ( * psk_server_callback ) ( SSL * ssl , const char * identity , unsigned char * psk , unsigned int max_psk_len ) ; SSL_CTX * ctx ; int debug ; long verify_result ; CRYPTO_EX_DATA ex_data ; STACK_OF ( X509_NAME ) * client_CA ; int references ; unsigned long options ; unsigned long mode ; long max_cert_list ; int first_packet ; int client_version ; int tlsext_status_type ; int tlsext_status_expected ; unsigned int max_send_fragment ; void ( * tlsext_debug_cb ) ( SSL * s , int client_server , int type , unsigned char * data , int len , void * arg ) ; void * tlsext_debug_arg ; char * tlsext_hostname ; char should_ack_sni ; int tlsext_ticket_expected ; size_t tlsext_ecpointformatlist_length ; uint8_t * tlsext_ecpointformatlist ; size_t tlsext_ellipticcurvelist_length ; uint16_t * tlsext_ellipticcurvelist ; TLS_SESSION_TICKET_EXT * tlsext_session_ticket ; tls_session_ticket_ext_cb_fn tls_session_ticket_ext_cb ; void * tls_session_ticket_ext_cb_arg ; tls_session_secret_cb_fn tls_session_secret_cb ; void * tls_session_secret_cb_arg ; SSL_CTX * initial_ctx ; uint8_t * next_proto_negotiated ; size_t next_proto_negotiated_len ; STACK_OF ( SRTP_PROTECTION_PROFILE ) * srtp_profiles ; SRTP_PROTECTION_PROFILE * srtp_profile ; char tlsext_channel_id_enabled ; EVP_PKEY * tlsext_channel_id_private ; char signed_cert_timestamps_enabled ; char ocsp_stapling_enabled ; unsigned char * alpn_client_proto_list ; unsigned alpn_client_proto_list_len ; int renegotiate ; char fallback_scsv ; COMP_CTX * expand } ; CLASS_DEF 2 struct ssl_st BASE_CLASSES { int version ; int type ; const SSL_METHOD * method ; BIO * rbio ; BIO * wbio ; BIO * bbio ; char * rbio ; char * wbio ; char * bbio ; int rwstate ; int in_handshake ; int ( * handshake_func ) ( SSL * ) ; int server ; int new_session ; int quiet_shutdown ; int shutdown ; int state ; int rstate ; BUF_MEM * init_buf ; uint8_t * init_msg ; int init_num ; int init_off ; unsigned char * packet ; unsigned int packet_length ; struct ssl2_state_st * s2 ; struct ssl3_state_st * s3 ; struct dtls1_state_st * d1 ; int read_ahead ; void ( * msg_callback ) ( int write_p , int version , int content_type , const void * buf , size_t len , SSL * ssl , void * arg ) ; void * msg_callback_arg ; int hit ; X509_VERIFY_PARAM * param ; int purpose ; int trust ; struct ssl_cipher_preference_list_st * cipher_list ; STACK_OF ( SSL_CIPHER ) * cipher_list_by_id ; SSL_AEAD_CTX * aead_read_ctx ; EVP_CIPHER_CTX * enc_read_ctx ; EVP_MD_CTX * read_hash ; SSL_AEAD_CTX * aead_write_ctx ; EVP_CIPHER_CTX * enc_write_ctx ; EVP_MD_CTX * write_hash ; struct cert_st * cert ; unsigned int sid_ctx_length ; unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; SSL_SESSION * session ; GEN_SESSION_CB generate_session_id ; int verify_mode ; int ( * verify_callback ) ( int ok , X509_STORE_CTX * ctx ) ; void ( * info_callback ) ( const SSL * ssl , int type , int val ) ; char * psk_identity_hint ; unsigned int ( * psk_client_callback ) ( SSL * ssl , const char * hint , char * identity , unsigned int max_identity_len , unsigned char * psk , unsigned int max_psk_len ) ; unsigned int ( * psk_server_callback ) ( SSL * ssl , const char * identity , unsigned char * psk , unsigned int max_psk_len ) ; SSL_CTX * ctx ; int debug ; long verify_result ; CRYPTO_EX_DATA ex_data ; STACK_OF ( X509_NAME ) * client_CA ; int references ; unsigned long options ; unsigned long mode ; long max_cert_list ; int first_packet ; int client_version ; int tlsext_status_type ; int tlsext_status_expected ; unsigned int max_send_fragment ; void ( * tlsext_debug_cb ) ( SSL * s , int client_server , int type , unsigned char * data , int len , void * arg ) ; void * tlsext_debug_arg ; char * tlsext_hostname ; char should_ack_sni ; int tlsext_ticket_expected ; size_t tlsext_ecpointformatlist_length ; uint8_t * tlsext_ecpointformatlist ; size_t tlsext_ellipticcurvelist_length ; uint16_t * tlsext_ellipticcurvelist ; TLS_SESSION_TICKET_EXT * tlsext_session_ticket ; tls_session_ticket_ext_cb_fn tls_session_ticket_ext_cb ; void * tls_session_ticket_ext_cb_arg ; tls_session_secret_cb_fn tls_session_secret_cb ; void * tls_session_secret_cb_arg ; SSL_CTX * initial_ctx ; uint8_t * next_proto_negotiated ; size_t next_proto_negotiated_len ; STACK_OF ( SRTP_PROTECTION_PROFILE ) * srtp_profiles ; SRTP_PROTECTION_PROFILE * srtp_profile ; char tlsext_channel_id_enabled ; EVP_PKEY * tlsext_channel_id_private ; char signed_cert_timestamps_enabled ; char ocsp_stapling_enabled ; unsigned char * alpn_client_proto_list ; unsigned alpn_client_proto_list_len ; int renegotiate ; char fallback_scsv ; COMP_CTX * expand } CLASS_DEF 3 struct ssl_st BASE_CLASSES { int version ; int type ; const SSL_METHOD * method ; BIO * rbio ; BIO * wbio ; BIO * bbio ; char * rbio ; char * wbio ; char * bbio ; int rwstate ; int in_handshake ; int ( * handshake_func ) ( SSL * ) ; int server ; int new_session ; int quiet_shutdown ; int shutdown ; int state ; int rstate ; BUF_MEM * init_buf ; uint8_t * init_msg ; int init_num ; int init_off ; unsigned char * packet ; unsigned int packet_length ; struct ssl2_state_st * s2 ; struct ssl3_state_st * s3 ; struct dtls1_state_st * d1 ; int read_ahead ; void ( * msg_callback ) ( int write_p , int version , int content_type , const void * buf , size_t len , SSL * ssl , void * arg ) ; void * msg_callback_arg ; int hit ; X509_VERIFY_PARAM * param ; int purpose ; int trust ; struct ssl_cipher_preference_list_st * cipher_list ; STACK_OF ( SSL_CIPHER ) * cipher_list_by_id ; SSL_AEAD_CTX * aead_read_ctx ; EVP_CIPHER_CTX * enc_read_ctx ; EVP_MD_CTX * read_hash ; SSL_AEAD_CTX * aead_write_ctx ; EVP_CIPHER_CTX * enc_write_ctx ; EVP_MD_CTX * write_hash ; struct cert_st * cert ; unsigned int sid_ctx_length ; unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; SSL_SESSION * session ; GEN_SESSION_CB generate_session_id ; int verify_mode ; int ( * verify_callback ) ( int ok , X509_STORE_CTX * ctx ) ; void ( * info_callback ) ( const SSL * ssl , int type , int val ) ; char * psk_identity_hint ; unsigned int ( * psk_client_callback ) ( SSL * ssl , const char * hint , char * identity , unsigned int max_identity_len , unsigned char * psk , unsigned int max_psk_len ) ; unsigned int ( * psk_server_callback ) ( SSL * ssl , const char * identity , unsigned char * psk , unsigned int max_psk_len ) ; SSL_CTX * ctx ; int debug ; long verify_result ; CRYPTO_EX_DATA ex_data ; STACK_OF ( X509_NAME ) * client_CA ; int references ; unsigned long options ; unsigned long mode ; long max_cert_list ; int first_packet ; int client_version ; int tlsext_status_type ; int tlsext_status_expected ; unsigned int max_send_fragment ; void ( * tlsext_debug_cb ) ( SSL * s , int client_server , int type , unsigned char * data , int len , void * arg ) ; void * tlsext_debug_arg ; char * tlsext_hostname ; char should_ack_sni ; int tlsext_ticket_expected ; size_t tlsext_ecpointformatlist_length ; uint8_t * tlsext_ecpointformatlist ; size_t tlsext_ellipticcurvelist_length ; uint16_t * tlsext_ellipticcurvelist ; TLS_SESSION_TICKET_EXT * tlsext_session_ticket ; tls_session_ticket_ext_cb_fn tls_session_ticket_ext_cb ; void * tls_session_ticket_ext_cb_arg ; tls_session_secret_cb_fn tls_session_secret_cb ; void * tls_session_secret_cb_arg ; SSL_CTX * initial_ctx ; uint8_t * next_proto_negotiated ; size_t next_proto_negotiated_len ; STACK_OF ( SRTP_PROTECTION_PROFILE ) * srtp_profiles ; SRTP_PROTECTION_PROFILE * srtp_profile ; char tlsext_channel_id_enabled ; EVP_PKEY * tlsext_channel_id_private ; char signed_cert_timestamps_enabled ; char ocsp_stapling_enabled ; unsigned char * alpn_client_proto_list ; unsigned alpn_client_proto_list_len ; int renegotiate ; char fallback_scsv ; COMP_CTX * expand } LEAF_NODE 4 struct CLASS_NAME 4 ssl_st LEAF_NODE 5 ssl_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int version ; int type ; const SSL_METHOD * method ; BIO * rbio ; BIO * wbio ; BIO * bbio ; char * rbio ; char * wbio ; char * bbio ; int rwstate ; int in_handshake ; int ( * handshake_func ) ( SSL * ) ; int server ; int new_session ; int quiet_shutdown ; int shutdown ; int state ; int rstate ; BUF_MEM * init_buf ; uint8_t * init_msg ; int init_num ; int init_off ; unsigned char * packet ; unsigned int packet_length ; struct ssl2_state_st * s2 ; struct ssl3_state_st * s3 ; struct dtls1_state_st * d1 ; int read_ahead ; void ( * msg_callback ) ( int write_p , int version , int content_type , const void * buf , size_t len , SSL * ssl , void * arg ) ; void * msg_callback_arg ; int hit ; X509_VERIFY_PARAM * param ; int purpose ; int trust ; struct ssl_cipher_preference_list_st * cipher_list ; STACK_OF ( SSL_CIPHER ) * cipher_list_by_id ; SSL_AEAD_CTX * aead_read_ctx ; EVP_CIPHER_CTX * enc_read_ctx ; EVP_MD_CTX * read_hash ; SSL_AEAD_CTX * aead_write_ctx ; EVP_CIPHER_CTX * enc_write_ctx ; EVP_MD_CTX * write_hash ; struct cert_st * cert ; unsigned int sid_ctx_length ; unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; SSL_SESSION * session ; GEN_SESSION_CB generate_session_id ; int verify_mode ; int ( * verify_callback ) ( int ok , X509_STORE_CTX * ctx ) ; void ( * info_callback ) ( const SSL * ssl , int type , int val ) ; char * psk_identity_hint ; unsigned int ( * psk_client_callback ) ( SSL * ssl , const char * hint , char * identity , unsigned int max_identity_len , unsigned char * psk , unsigned int max_psk_len ) ; unsigned int ( * psk_server_callback ) ( SSL * ssl , const char * identity , unsigned char * psk , unsigned int max_psk_len ) ; SSL_CTX * ctx ; int debug ; long verify_result ; CRYPTO_EX_DATA ex_data ; STACK_OF ( X509_NAME ) * client_CA ; int references ; unsigned long options ; unsigned long mode ; long max_cert_list ; int first_packet ; int client_version ; int tlsext_status_type ; int tlsext_status_expected ; unsigned int max_send_fragment ; void ( * tlsext_debug_cb ) ( SSL * s , int client_server , int type , unsigned char * data , int len , void * arg ) ; void * tlsext_debug_arg ; char * tlsext_hostname ; char should_ack_sni ; int tlsext_ticket_expected ; size_t tlsext_ecpointformatlist_length ; uint8_t * tlsext_ecpointformatlist ; size_t tlsext_ellipticcurvelist_length ; uint16_t * tlsext_ellipticcurvelist ; TLS_SESSION_TICKET_EXT * tlsext_session_ticket ; tls_session_ticket_ext_cb_fn tls_session_ticket_ext_cb ; void * tls_session_ticket_ext_cb_arg ; tls_session_secret_cb_fn tls_session_secret_cb ; void * tls_session_secret_cb_arg ; SSL_CTX * initial_ctx ; uint8_t * next_proto_negotiated ; size_t next_proto_negotiated_len ; STACK_OF ( SRTP_PROTECTION_PROFILE ) * srtp_profiles ; SRTP_PROTECTION_PROFILE * srtp_profile ; char tlsext_channel_id_enabled ; EVP_PKEY * tlsext_channel_id_private ; char signed_cert_timestamps_enabled ; char ocsp_stapling_enabled ; unsigned char * alpn_client_proto_list ; unsigned alpn_client_proto_list_len ; int renegotiate ; char fallback_scsv ; COMP_CTX * expand SIMPLE_DECL 5 int version ; VAR_DECL 6 int version TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 version LEAF_NODE 8 version LEAF_NODE 6 ; SIMPLE_DECL 5 int type ; VAR_DECL 6 int type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 type LEAF_NODE 8 type LEAF_NODE 6 ; SIMPLE_DECL 5 const SSL_METHOD * method ; VAR_DECL 6 const SSL_METHOD * method TYPE 7 const SSL_METHOD * TYPE_NAME 8 const SSL_METHOD LEAF_NODE 9 const LEAF_NODE 9 SSL_METHOD POINTER 8 * LEAF_NODE 9 * NAME 7 method LEAF_NODE 8 method LEAF_NODE 6 ; SIMPLE_DECL 5 BIO * rbio ; VAR_DECL 6 BIO * rbio TYPE 7 BIO * TYPE_NAME 8 BIO LEAF_NODE 9 BIO POINTER 8 * LEAF_NODE 9 * NAME 7 rbio LEAF_NODE 8 rbio LEAF_NODE 6 ; SIMPLE_DECL 5 BIO * wbio ; VAR_DECL 6 BIO * wbio TYPE 7 BIO * TYPE_NAME 8 BIO LEAF_NODE 9 BIO POINTER 8 * LEAF_NODE 9 * NAME 7 wbio LEAF_NODE 8 wbio LEAF_NODE 6 ; SIMPLE_DECL 5 BIO * bbio ; VAR_DECL 6 BIO * bbio TYPE 7 BIO * TYPE_NAME 8 BIO LEAF_NODE 9 BIO POINTER 8 * LEAF_NODE 9 * NAME 7 bbio LEAF_NODE 8 bbio LEAF_NODE 6 ; SIMPLE_DECL 5 char * rbio ; VAR_DECL 6 char * rbio TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 rbio LEAF_NODE 8 rbio LEAF_NODE 6 ; SIMPLE_DECL 5 char * wbio ; VAR_DECL 6 char * wbio TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 wbio LEAF_NODE 8 wbio LEAF_NODE 6 ; SIMPLE_DECL 5 char * bbio ; VAR_DECL 6 char * bbio TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 bbio LEAF_NODE 8 bbio LEAF_NODE 6 ; SIMPLE_DECL 5 int rwstate ; VAR_DECL 6 int rwstate TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rwstate LEAF_NODE 8 rwstate LEAF_NODE 6 ; SIMPLE_DECL 5 int in_handshake ; VAR_DECL 6 int in_handshake TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 in_handshake LEAF_NODE 8 in_handshake LEAF_NODE 6 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 handshake_func LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 int server ; VAR_DECL 6 int server TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 server LEAF_NODE 8 server LEAF_NODE 6 ; SIMPLE_DECL 5 int new_session ; VAR_DECL 6 int new_session TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 new_session LEAF_NODE 8 new_session LEAF_NODE 6 ; SIMPLE_DECL 5 int quiet_shutdown ; VAR_DECL 6 int quiet_shutdown TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 quiet_shutdown LEAF_NODE 8 quiet_shutdown LEAF_NODE 6 ; SIMPLE_DECL 5 int shutdown ; VAR_DECL 6 int shutdown TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 shutdown LEAF_NODE 8 shutdown LEAF_NODE 6 ; SIMPLE_DECL 5 int state ; VAR_DECL 6 int state TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 int rstate ; VAR_DECL 6 int rstate TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rstate LEAF_NODE 8 rstate LEAF_NODE 6 ; SIMPLE_DECL 5 BUF_MEM * init_buf ; VAR_DECL 6 BUF_MEM * init_buf TYPE 7 BUF_MEM * TYPE_NAME 8 BUF_MEM LEAF_NODE 9 BUF_MEM POINTER 8 * LEAF_NODE 9 * NAME 7 init_buf LEAF_NODE 8 init_buf LEAF_NODE 6 ; SIMPLE_DECL 5 uint8_t * init_msg ; VAR_DECL 6 uint8_t * init_msg TYPE 7 uint8_t * TYPE_NAME 8 uint8_t LEAF_NODE 9 uint8_t POINTER 8 * LEAF_NODE 9 * NAME 7 init_msg LEAF_NODE 8 init_msg LEAF_NODE 6 ; SIMPLE_DECL 5 int init_num ; VAR_DECL 6 int init_num TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 init_num LEAF_NODE 8 init_num LEAF_NODE 6 ; SIMPLE_DECL 5 int init_off ; VAR_DECL 6 int init_off TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 init_off LEAF_NODE 8 init_off LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * packet ; VAR_DECL 6 unsigned char * packet TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 packet LEAF_NODE 8 packet LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int packet_length ; VAR_DECL 6 unsigned int packet_length TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 packet_length LEAF_NODE 8 packet_length LEAF_NODE 6 ; SIMPLE_DECL 5 struct ssl2_state_st * s2 ; VAR_DECL 6 struct ssl2_state_st * s2 TYPE 7 struct ssl2_state_st * TYPE_NAME 8 struct ssl2_state_st LEAF_NODE 9 struct LEAF_NODE 9 ssl2_state_st POINTER 8 * LEAF_NODE 9 * NAME 7 s2 LEAF_NODE 8 s2 LEAF_NODE 6 ; SIMPLE_DECL 5 struct ssl3_state_st * s3 ; VAR_DECL 6 struct ssl3_state_st * s3 TYPE 7 struct ssl3_state_st * TYPE_NAME 8 struct ssl3_state_st LEAF_NODE 9 struct LEAF_NODE 9 ssl3_state_st POINTER 8 * LEAF_NODE 9 * NAME 7 s3 LEAF_NODE 8 s3 LEAF_NODE 6 ; SIMPLE_DECL 5 struct dtls1_state_st * d1 ; VAR_DECL 6 struct dtls1_state_st * d1 TYPE 7 struct dtls1_state_st * TYPE_NAME 8 struct dtls1_state_st LEAF_NODE 9 struct LEAF_NODE 9 dtls1_state_st POINTER 8 * LEAF_NODE 9 * NAME 7 d1 LEAF_NODE 8 d1 LEAF_NODE 6 ; SIMPLE_DECL 5 int read_ahead ; VAR_DECL 6 int read_ahead TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 read_ahead LEAF_NODE 8 read_ahead LEAF_NODE 6 ; LEAF_NODE 5 void LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 msg_callback LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 int LEAF_NODE 5 write_p LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 version LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 content_type LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 void LEAF_NODE 5 * LEAF_NODE 5 buf LEAF_NODE 5 , LEAF_NODE 5 size_t LEAF_NODE 5 len LEAF_NODE 5 , LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 ssl LEAF_NODE 5 , LEAF_NODE 5 void LEAF_NODE 5 * LEAF_NODE 5 arg LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 void * msg_callback_arg ; VAR_DECL 6 void * msg_callback_arg TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 msg_callback_arg LEAF_NODE 8 msg_callback_arg LEAF_NODE 6 ; SIMPLE_DECL 5 int hit ; VAR_DECL 6 int hit TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 hit LEAF_NODE 8 hit LEAF_NODE 6 ; SIMPLE_DECL 5 X509_VERIFY_PARAM * param ; VAR_DECL 6 X509_VERIFY_PARAM * param TYPE 7 X509_VERIFY_PARAM * TYPE_NAME 8 X509_VERIFY_PARAM LEAF_NODE 9 X509_VERIFY_PARAM POINTER 8 * LEAF_NODE 9 * NAME 7 param LEAF_NODE 8 param LEAF_NODE 6 ; SIMPLE_DECL 5 int purpose ; VAR_DECL 6 int purpose TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 purpose LEAF_NODE 8 purpose LEAF_NODE 6 ; SIMPLE_DECL 5 int trust ; VAR_DECL 6 int trust TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 trust LEAF_NODE 8 trust LEAF_NODE 6 ; SIMPLE_DECL 5 struct ssl_cipher_preference_list_st * cipher_list ; VAR_DECL 6 struct ssl_cipher_preference_list_st * cipher_list TYPE 7 struct ssl_cipher_preference_list_st * TYPE_NAME 8 struct ssl_cipher_preference_list_st LEAF_NODE 9 struct LEAF_NODE 9 ssl_cipher_preference_list_st POINTER 8 * LEAF_NODE 9 * NAME 7 cipher_list LEAF_NODE 8 cipher_list LEAF_NODE 6 ; LEAF_NODE 5 STACK_OF LEAF_NODE 5 ( LEAF_NODE 5 SSL_CIPHER LEAF_NODE 5 ) LEAF_NODE 5 * LEAF_NODE 5 cipher_list_by_id LEAF_NODE 5 ; SIMPLE_DECL 5 SSL_AEAD_CTX * aead_read_ctx ; VAR_DECL 6 SSL_AEAD_CTX * aead_read_ctx TYPE 7 SSL_AEAD_CTX * TYPE_NAME 8 SSL_AEAD_CTX LEAF_NODE 9 SSL_AEAD_CTX POINTER 8 * LEAF_NODE 9 * NAME 7 aead_read_ctx LEAF_NODE 8 aead_read_ctx LEAF_NODE 6 ; SIMPLE_DECL 5 EVP_CIPHER_CTX * enc_read_ctx ; VAR_DECL 6 EVP_CIPHER_CTX * enc_read_ctx TYPE 7 EVP_CIPHER_CTX * TYPE_NAME 8 EVP_CIPHER_CTX LEAF_NODE 9 EVP_CIPHER_CTX POINTER 8 * LEAF_NODE 9 * NAME 7 enc_read_ctx LEAF_NODE 8 enc_read_ctx LEAF_NODE 6 ; SIMPLE_DECL 5 EVP_MD_CTX * read_hash ; VAR_DECL 6 EVP_MD_CTX * read_hash TYPE 7 EVP_MD_CTX * TYPE_NAME 8 EVP_MD_CTX LEAF_NODE 9 EVP_MD_CTX POINTER 8 * LEAF_NODE 9 * NAME 7 read_hash LEAF_NODE 8 read_hash LEAF_NODE 6 ; SIMPLE_DECL 5 SSL_AEAD_CTX * aead_write_ctx ; VAR_DECL 6 SSL_AEAD_CTX * aead_write_ctx TYPE 7 SSL_AEAD_CTX * TYPE_NAME 8 SSL_AEAD_CTX LEAF_NODE 9 SSL_AEAD_CTX POINTER 8 * LEAF_NODE 9 * NAME 7 aead_write_ctx LEAF_NODE 8 aead_write_ctx LEAF_NODE 6 ; SIMPLE_DECL 5 EVP_CIPHER_CTX * enc_write_ctx ; VAR_DECL 6 EVP_CIPHER_CTX * enc_write_ctx TYPE 7 EVP_CIPHER_CTX * TYPE_NAME 8 EVP_CIPHER_CTX LEAF_NODE 9 EVP_CIPHER_CTX POINTER 8 * LEAF_NODE 9 * NAME 7 enc_write_ctx LEAF_NODE 8 enc_write_ctx LEAF_NODE 6 ; SIMPLE_DECL 5 EVP_MD_CTX * write_hash ; VAR_DECL 6 EVP_MD_CTX * write_hash TYPE 7 EVP_MD_CTX * TYPE_NAME 8 EVP_MD_CTX LEAF_NODE 9 EVP_MD_CTX POINTER 8 * LEAF_NODE 9 * NAME 7 write_hash LEAF_NODE 8 write_hash LEAF_NODE 6 ; SIMPLE_DECL 5 struct cert_st * cert ; VAR_DECL 6 struct cert_st * cert TYPE 7 struct cert_st * TYPE_NAME 8 struct cert_st LEAF_NODE 9 struct LEAF_NODE 9 cert_st POINTER 8 * LEAF_NODE 9 * NAME 7 cert LEAF_NODE 8 cert LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int sid_ctx_length ; VAR_DECL 6 unsigned int sid_ctx_length TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 sid_ctx_length LEAF_NODE 8 sid_ctx_length LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx ; VAR_DECL 6 unsigned char [ SSL_MAX_SID_CTX_LENGTH ] sid_ctx TYPE 7 unsigned char [ SSL_MAX_SID_CTX_LENGTH ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ SSL_MAX_SID_CTX_LENGTH ] LEAF_NODE 9 [ FIELD 9 SSL_MAX_SID_CTX_LENGTH LEAF_NODE 10 SSL_MAX_SID_CTX_LENGTH LEAF_NODE 9 ] NAME 7 sid_ctx LEAF_NODE 8 sid_ctx LEAF_NODE 6 ; SIMPLE_DECL 5 SSL_SESSION * session ; VAR_DECL 6 SSL_SESSION * session TYPE 7 SSL_SESSION * TYPE_NAME 8 SSL_SESSION LEAF_NODE 9 SSL_SESSION POINTER 8 * LEAF_NODE 9 * NAME 7 session LEAF_NODE 8 session LEAF_NODE 6 ; SIMPLE_DECL 5 GEN_SESSION_CB generate_session_id ; VAR_DECL 6 GEN_SESSION_CB generate_session_id TYPE 7 GEN_SESSION_CB TYPE_NAME 8 GEN_SESSION_CB LEAF_NODE 9 GEN_SESSION_CB NAME 7 generate_session_id LEAF_NODE 8 generate_session_id LEAF_NODE 6 ; SIMPLE_DECL 5 int verify_mode ; VAR_DECL 6 int verify_mode TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 verify_mode LEAF_NODE 8 verify_mode LEAF_NODE 6 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 verify_callback LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 int LEAF_NODE 5 ok LEAF_NODE 5 , LEAF_NODE 5 X509_STORE_CTX LEAF_NODE 5 * LEAF_NODE 5 ctx LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 void LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 info_callback LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 const LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 ssl LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 type LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 val LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char * psk_identity_hint ; VAR_DECL 6 char * psk_identity_hint TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 psk_identity_hint LEAF_NODE 8 psk_identity_hint LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 psk_client_callback LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 ssl LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 hint LEAF_NODE 5 , LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 identity LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 int LEAF_NODE 5 max_identity_len LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 psk LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 int LEAF_NODE 5 max_psk_len LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 psk_server_callback LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 ssl LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 identity LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 psk LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 int LEAF_NODE 5 max_psk_len LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 SSL_CTX * ctx ; VAR_DECL 6 SSL_CTX * ctx TYPE 7 SSL_CTX * TYPE_NAME 8 SSL_CTX LEAF_NODE 9 SSL_CTX POINTER 8 * LEAF_NODE 9 * NAME 7 ctx LEAF_NODE 8 ctx LEAF_NODE 6 ; SIMPLE_DECL 5 int debug ; VAR_DECL 6 int debug TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 debug LEAF_NODE 8 debug LEAF_NODE 6 ; SIMPLE_DECL 5 long verify_result ; VAR_DECL 6 long verify_result TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 verify_result LEAF_NODE 8 verify_result LEAF_NODE 6 ; SIMPLE_DECL 5 CRYPTO_EX_DATA ex_data ; VAR_DECL 6 CRYPTO_EX_DATA ex_data TYPE 7 CRYPTO_EX_DATA TYPE_NAME 8 CRYPTO_EX_DATA LEAF_NODE 9 CRYPTO_EX_DATA NAME 7 ex_data LEAF_NODE 8 ex_data LEAF_NODE 6 ; LEAF_NODE 5 STACK_OF LEAF_NODE 5 ( LEAF_NODE 5 X509_NAME LEAF_NODE 5 ) LEAF_NODE 5 * LEAF_NODE 5 client_CA LEAF_NODE 5 ; SIMPLE_DECL 5 int references ; VAR_DECL 6 int references TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 references LEAF_NODE 8 references LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long options ; VAR_DECL 6 unsigned long options TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 options LEAF_NODE 8 options LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long mode ; VAR_DECL 6 unsigned long mode TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 mode LEAF_NODE 8 mode LEAF_NODE 6 ; SIMPLE_DECL 5 long max_cert_list ; VAR_DECL 6 long max_cert_list TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 max_cert_list LEAF_NODE 8 max_cert_list LEAF_NODE 6 ; SIMPLE_DECL 5 int first_packet ; VAR_DECL 6 int first_packet TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 first_packet LEAF_NODE 8 first_packet LEAF_NODE 6 ; SIMPLE_DECL 5 int client_version ; VAR_DECL 6 int client_version TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 client_version LEAF_NODE 8 client_version LEAF_NODE 6 ; SIMPLE_DECL 5 int tlsext_status_type ; VAR_DECL 6 int tlsext_status_type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 tlsext_status_type LEAF_NODE 8 tlsext_status_type LEAF_NODE 6 ; SIMPLE_DECL 5 int tlsext_status_expected ; VAR_DECL 6 int tlsext_status_expected TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 tlsext_status_expected LEAF_NODE 8 tlsext_status_expected LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int max_send_fragment ; VAR_DECL 6 unsigned int max_send_fragment TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 max_send_fragment LEAF_NODE 8 max_send_fragment LEAF_NODE 6 ; LEAF_NODE 5 void LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 tlsext_debug_cb LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 SSL LEAF_NODE 5 * LEAF_NODE 5 s LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 client_server LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 type LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 data LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 len LEAF_NODE 5 , LEAF_NODE 5 void LEAF_NODE 5 * LEAF_NODE 5 arg LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 void * tlsext_debug_arg ; VAR_DECL 6 void * tlsext_debug_arg TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 tlsext_debug_arg LEAF_NODE 8 tlsext_debug_arg LEAF_NODE 6 ; SIMPLE_DECL 5 char * tlsext_hostname ; VAR_DECL 6 char * tlsext_hostname TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 tlsext_hostname LEAF_NODE 8 tlsext_hostname LEAF_NODE 6 ; SIMPLE_DECL 5 char should_ack_sni ; VAR_DECL 6 char should_ack_sni TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 should_ack_sni LEAF_NODE 8 should_ack_sni LEAF_NODE 6 ; SIMPLE_DECL 5 int tlsext_ticket_expected ; VAR_DECL 6 int tlsext_ticket_expected TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 tlsext_ticket_expected LEAF_NODE 8 tlsext_ticket_expected LEAF_NODE 6 ; SIMPLE_DECL 5 size_t tlsext_ecpointformatlist_length ; VAR_DECL 6 size_t tlsext_ecpointformatlist_length TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 tlsext_ecpointformatlist_length LEAF_NODE 8 tlsext_ecpointformatlist_length LEAF_NODE 6 ; SIMPLE_DECL 5 uint8_t * tlsext_ecpointformatlist ; VAR_DECL 6 uint8_t * tlsext_ecpointformatlist TYPE 7 uint8_t * TYPE_NAME 8 uint8_t LEAF_NODE 9 uint8_t POINTER 8 * LEAF_NODE 9 * NAME 7 tlsext_ecpointformatlist LEAF_NODE 8 tlsext_ecpointformatlist LEAF_NODE 6 ; SIMPLE_DECL 5 size_t tlsext_ellipticcurvelist_length ; VAR_DECL 6 size_t tlsext_ellipticcurvelist_length TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 tlsext_ellipticcurvelist_length LEAF_NODE 8 tlsext_ellipticcurvelist_length LEAF_NODE 6 ; SIMPLE_DECL 5 uint16_t * tlsext_ellipticcurvelist ; VAR_DECL 6 uint16_t * tlsext_ellipticcurvelist TYPE 7 uint16_t * TYPE_NAME 8 uint16_t LEAF_NODE 9 uint16_t POINTER 8 * LEAF_NODE 9 * NAME 7 tlsext_ellipticcurvelist LEAF_NODE 8 tlsext_ellipticcurvelist LEAF_NODE 6 ; SIMPLE_DECL 5 TLS_SESSION_TICKET_EXT * tlsext_session_ticket ; VAR_DECL 6 TLS_SESSION_TICKET_EXT * tlsext_session_ticket TYPE 7 TLS_SESSION_TICKET_EXT * TYPE_NAME 8 TLS_SESSION_TICKET_EXT LEAF_NODE 9 TLS_SESSION_TICKET_EXT POINTER 8 * LEAF_NODE 9 * NAME 7 tlsext_session_ticket LEAF_NODE 8 tlsext_session_ticket LEAF_NODE 6 ; SIMPLE_DECL 5 tls_session_ticket_ext_cb_fn tls_session_ticket_ext_cb ; VAR_DECL 6 tls_session_ticket_ext_cb_fn tls_session_ticket_ext_cb TYPE 7 tls_session_ticket_ext_cb_fn TYPE_NAME 8 tls_session_ticket_ext_cb_fn LEAF_NODE 9 tls_session_ticket_ext_cb_fn NAME 7 tls_session_ticket_ext_cb LEAF_NODE 8 tls_session_ticket_ext_cb LEAF_NODE 6 ; SIMPLE_DECL 5 void * tls_session_ticket_ext_cb_arg ; VAR_DECL 6 void * tls_session_ticket_ext_cb_arg TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 tls_session_ticket_ext_cb_arg LEAF_NODE 8 tls_session_ticket_ext_cb_arg LEAF_NODE 6 ; SIMPLE_DECL 5 tls_session_secret_cb_fn tls_session_secret_cb ; VAR_DECL 6 tls_session_secret_cb_fn tls_session_secret_cb TYPE 7 tls_session_secret_cb_fn TYPE_NAME 8 tls_session_secret_cb_fn LEAF_NODE 9 tls_session_secret_cb_fn NAME 7 tls_session_secret_cb LEAF_NODE 8 tls_session_secret_cb LEAF_NODE 6 ; SIMPLE_DECL 5 void * tls_session_secret_cb_arg ; VAR_DECL 6 void * tls_session_secret_cb_arg TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 tls_session_secret_cb_arg LEAF_NODE 8 tls_session_secret_cb_arg LEAF_NODE 6 ; SIMPLE_DECL 5 SSL_CTX * initial_ctx ; VAR_DECL 6 SSL_CTX * initial_ctx TYPE 7 SSL_CTX * TYPE_NAME 8 SSL_CTX LEAF_NODE 9 SSL_CTX POINTER 8 * LEAF_NODE 9 * NAME 7 initial_ctx LEAF_NODE 8 initial_ctx LEAF_NODE 6 ; SIMPLE_DECL 5 uint8_t * next_proto_negotiated ; VAR_DECL 6 uint8_t * next_proto_negotiated TYPE 7 uint8_t * TYPE_NAME 8 uint8_t LEAF_NODE 9 uint8_t POINTER 8 * LEAF_NODE 9 * NAME 7 next_proto_negotiated LEAF_NODE 8 next_proto_negotiated LEAF_NODE 6 ; SIMPLE_DECL 5 size_t next_proto_negotiated_len ; VAR_DECL 6 size_t next_proto_negotiated_len TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 next_proto_negotiated_len LEAF_NODE 8 next_proto_negotiated_len LEAF_NODE 6 ; LEAF_NODE 5 STACK_OF LEAF_NODE 5 ( LEAF_NODE 5 SRTP_PROTECTION_PROFILE LEAF_NODE 5 ) LEAF_NODE 5 * LEAF_NODE 5 srtp_profiles LEAF_NODE 5 ; SIMPLE_DECL 5 SRTP_PROTECTION_PROFILE * srtp_profile ; VAR_DECL 6 SRTP_PROTECTION_PROFILE * srtp_profile TYPE 7 SRTP_PROTECTION_PROFILE * TYPE_NAME 8 SRTP_PROTECTION_PROFILE LEAF_NODE 9 SRTP_PROTECTION_PROFILE POINTER 8 * LEAF_NODE 9 * NAME 7 srtp_profile LEAF_NODE 8 srtp_profile LEAF_NODE 6 ; SIMPLE_DECL 5 char tlsext_channel_id_enabled ; VAR_DECL 6 char tlsext_channel_id_enabled TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 tlsext_channel_id_enabled LEAF_NODE 8 tlsext_channel_id_enabled LEAF_NODE 6 ; SIMPLE_DECL 5 EVP_PKEY * tlsext_channel_id_private ; VAR_DECL 6 EVP_PKEY * tlsext_channel_id_private TYPE 7 EVP_PKEY * TYPE_NAME 8 EVP_PKEY LEAF_NODE 9 EVP_PKEY POINTER 8 * LEAF_NODE 9 * NAME 7 tlsext_channel_id_private LEAF_NODE 8 tlsext_channel_id_private LEAF_NODE 6 ; SIMPLE_DECL 5 char signed_cert_timestamps_enabled ; VAR_DECL 6 char signed_cert_timestamps_enabled TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 signed_cert_timestamps_enabled LEAF_NODE 8 signed_cert_timestamps_enabled LEAF_NODE 6 ; SIMPLE_DECL 5 char ocsp_stapling_enabled ; VAR_DECL 6 char ocsp_stapling_enabled TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 ocsp_stapling_enabled LEAF_NODE 8 ocsp_stapling_enabled LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char * alpn_client_proto_list ; VAR_DECL 6 unsigned char * alpn_client_proto_list TYPE 7 unsigned char * TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 alpn_client_proto_list LEAF_NODE 8 alpn_client_proto_list LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 alpn_client_proto_list_len LEAF_NODE 5 ; SIMPLE_DECL 5 int renegotiate ; VAR_DECL 6 int renegotiate TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 renegotiate LEAF_NODE 8 renegotiate LEAF_NODE 6 ; SIMPLE_DECL 5 char fallback_scsv ; VAR_DECL 6 char fallback_scsv TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 fallback_scsv LEAF_NODE 8 fallback_scsv LEAF_NODE 6 ; LEAF_NODE 5 COMP_CTX LEAF_NODE 5 * LEAF_NODE 5 expand LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ssl_st SSL ; VAR_DECL 2 struct ssl_st SSL TYPE 3 struct ssl_st TYPE_NAME 4 struct ssl_st LEAF_NODE 5 struct LEAF_NODE 5 ssl_st NAME 3 SSL LEAF_NODE 4 SSL LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ssl3_get_record LEAF_NODE 3 ssl3_get_record PARAMETER_LIST 2 ( SSL * s ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int ssl_major , int ssl_minor , int al ; INIT_DECL_LIST 4 int ssl_major , int ssl_minor , int al VAR_DECL 5 int ssl_major TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 ssl_major LEAF_NODE 7 ssl_major LEAF_NODE 5 , INIT_DECL_LIST 5 int ssl_minor , int al VAR_DECL 6 int ssl_minor TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ssl_minor LEAF_NODE 8 ssl_minor LEAF_NODE 6 , VAR_DECL 6 int al TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 al LEAF_NODE 8 al LEAF_NODE 4 ; SIMPLE_DECL 3 int enc_err , int n , int i , int ret ; ret = - 1 ; INIT_DECL_LIST 4 int enc_err , int n , int i , int ret ; ret = - 1 VAR_DECL 5 int enc_err TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 enc_err LEAF_NODE 7 enc_err LEAF_NODE 5 , INIT_DECL_LIST 5 int n , int i , int ret ; ret = - 1 VAR_DECL 6 int n TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 n LEAF_NODE 8 n LEAF_NODE 6 , INIT_DECL_LIST 6 int i , int ret ; ret = - 1 VAR_DECL 7 int i TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 i LEAF_NODE 9 i LEAF_NODE 7 , VAR_DECL 7 int ret ; ret = - 1 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 ret LEAF_NODE 9 ret LEAF_NODE 8 ; INIT 8 ret = - 1 ASSIGN 9 ret = - 1 LVAL 10 ret NAME 11 ret LEAF_NODE 12 ret ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 - 1 UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 4 ; SIMPLE_DECL 3 SSL3_RECORD * rr ; VAR_DECL 4 SSL3_RECORD * rr TYPE 5 SSL3_RECORD * TYPE_NAME 6 SSL3_RECORD LEAF_NODE 7 SSL3_RECORD POINTER 6 * LEAF_NODE 7 * NAME 5 rr LEAF_NODE 6 rr LEAF_NODE 4 ; SIMPLE_DECL 3 SSL_SESSION * sess ; VAR_DECL 4 SSL_SESSION * sess TYPE 5 SSL_SESSION * TYPE_NAME 6 SSL_SESSION LEAF_NODE 7 SSL_SESSION POINTER 6 * LEAF_NODE 7 * NAME 5 sess LEAF_NODE 6 sess LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * p ; VAR_DECL 4 unsigned char * p TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char [ EVP_MAX_MD_SIZE ] md ; VAR_DECL 4 unsigned char [ EVP_MAX_MD_SIZE ] md TYPE 5 unsigned char [ EVP_MAX_MD_SIZE ] TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char TYPE_SUFFIX 6 [ EVP_MAX_MD_SIZE ] LEAF_NODE 7 [ FIELD 7 EVP_MAX_MD_SIZE LEAF_NODE 8 EVP_MAX_MD_SIZE LEAF_NODE 7 ] NAME 5 md LEAF_NODE 6 md LEAF_NODE 4 ; SIMPLE_DECL 3 short version ; VAR_DECL 4 short version TYPE 5 short TYPE_NAME 6 short LEAF_NODE 7 short NAME 5 version LEAF_NODE 6 version LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int mac_size ; VAR_DECL 4 unsigned int mac_size TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 mac_size LEAF_NODE 6 mac_size LEAF_NODE 4 ; SIMPLE_DECL 3 int clear ; clear = 0 ; VAR_DECL 4 int clear ; clear = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 clear LEAF_NODE 6 clear LEAF_NODE 5 ; INIT 5 clear = 0 ASSIGN 6 clear = 0 LVAL 7 clear NAME 8 clear LEAF_NODE 9 clear ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 size_t extra ; VAR_DECL 4 size_t extra TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 extra LEAF_NODE 6 extra LEAF_NODE 4 ; SIMPLE_DECL 3 int decryption_failed_or_bad_record_mac ; decryption_failed_or_bad_record_mac = 0 ; VAR_DECL 4 int decryption_failed_or_bad_record_mac ; decryption_failed_or_bad_record_mac = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 decryption_failed_or_bad_record_mac LEAF_NODE 6 decryption_failed_or_bad_record_mac LEAF_NODE 5 ; INIT 5 decryption_failed_or_bad_record_mac = 0 ASSIGN 6 decryption_failed_or_bad_record_mac = 0 LVAL 7 decryption_failed_or_bad_record_mac NAME 8 decryption_failed_or_bad_record_mac LEAF_NODE 9 decryption_failed_or_bad_record_mac ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * mac ; mac = NULL ; VAR_DECL 4 unsigned char * mac ; mac = NULL TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 mac LEAF_NODE 6 mac LEAF_NODE 5 ; INIT 5 mac = NULL ASSIGN 6 mac = NULL LVAL 7 mac NAME 8 mac LEAF_NODE 9 mac ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 rr = & ( s -> s3 -> rrec ) ; EXPR 4 rr = & ( s -> s3 -> rrec ) ASSIGN 5 rr = & ( s -> s3 -> rrec ) LVAL 6 rr FIELD 7 rr LEAF_NODE 8 rr ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 & ( s -> s3 -> rrec ) UNARY_EXPR 7 & ( s -> s3 -> rrec ) UNARY_OPERATOR 8 & LEAF_NODE 9 & LEAF_NODE 8 ( FIELD 8 s -> s3 -> rrec LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 s3 LEAF_NODE 9 -> LEAF_NODE 9 rrec LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 sess = s -> session ; EXPR 4 sess = s -> session ASSIGN 5 sess = s -> session LVAL 6 sess FIELD 7 sess LEAF_NODE 8 sess ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 s -> session FIELD 7 s -> session LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 session LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> options & SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER EXPR 5 s -> options & SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER FIELD 6 s -> options LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 options LEAF_NODE 6 & FIELD 6 SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER LEAF_NODE 7 SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 extra = SSL3_RT_MAX_EXTRA ; EXPR 6 extra = SSL3_RT_MAX_EXTRA ASSIGN 7 extra = SSL3_RT_MAX_EXTRA LVAL 8 extra FIELD 9 extra LEAF_NODE 10 extra ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 SSL3_RT_MAX_EXTRA FIELD 9 SSL3_RT_MAX_EXTRA LEAF_NODE 10 SSL3_RT_MAX_EXTRA LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 EXPR_STATEMENT 5 extra = 0 ; EXPR 6 extra = 0 ASSIGN 7 extra = 0 LVAL 8 extra FIELD 9 extra LEAF_NODE 10 extra ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 extra != s -> s3 -> rbuf . len - SSL3_RT_MAX_PACKET_SIZE EXPR 5 extra != s -> s3 -> rbuf . len - SSL3_RT_MAX_PACKET_SIZE FIELD 6 extra LEAF_NODE 7 extra EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 s -> s3 -> rbuf . len LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 s3 LEAF_NODE 7 -> LEAF_NODE 7 rbuf LEAF_NODE 7 . LEAF_NODE 7 len LEAF_NODE 6 - FIELD 6 SSL3_RT_MAX_PACKET_SIZE LEAF_NODE 7 SSL3_RT_MAX_PACKET_SIZE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL3_GET_RECORD , ERR_R_INTERNAL_ERROR ) ; EXPR 7 SSLerr ( SSL_F_SSL3_GET_RECORD , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL3_GET_RECORD , ERR_R_INTERNAL_ERROR ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL3_GET_RECORD FIELD 10 SSL_F_SSL3_GET_RECORD LEAF_NODE 11 SSL_F_SSL3_GET_RECORD LEAF_NODE 9 , ARGUMENT 9 ERR_R_INTERNAL_ERROR FIELD 10 ERR_R_INTERNAL_ERROR LEAF_NODE 11 ERR_R_INTERNAL_ERROR LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } LABEL 3 again : LEAF_NODE 4 again LEAF_NODE 4 : SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( s -> rstate != SSL_ST_READ_BODY ) || ( s -> packet_length < SSL3_RT_HEADER_LENGTH ) EXPR 5 ( s -> rstate != SSL_ST_READ_BODY ) || ( s -> packet_length < SSL3_RT_HEADER_LENGTH ) OR 6 ( s -> rstate != SSL_ST_READ_BODY ) || ( s -> packet_length < SSL3_RT_HEADER_LENGTH ) EXPR 7 ( s -> rstate != SSL_ST_READ_BODY ) LEAF_NODE 8 ( FIELD 8 s -> rstate LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 rstate EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 SSL_ST_READ_BODY LEAF_NODE 9 SSL_ST_READ_BODY LEAF_NODE 8 ) LEAF_NODE 7 || EXPR 7 ( s -> packet_length < SSL3_RT_HEADER_LENGTH ) LEAF_NODE 8 ( FIELD 8 s -> packet_length LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 packet_length REL_OPERATOR 8 < LEAF_NODE 9 < FIELD 8 SSL3_RT_HEADER_LENGTH LEAF_NODE 9 SSL3_RT_HEADER_LENGTH LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 n = ssl3_read_n ( s , SSL3_RT_HEADER_LENGTH , s -> s3 -> rbuf . len , 0 ) ; EXPR 7 n = ssl3_read_n ( s , SSL3_RT_HEADER_LENGTH , s -> s3 -> rbuf . len , 0 ) ASSIGN 8 n = ssl3_read_n ( s , SSL3_RT_HEADER_LENGTH , s -> s3 -> rbuf . len , 0 ) LVAL 9 n FIELD 10 n LEAF_NODE 11 n ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ssl3_read_n ( s , SSL3_RT_HEADER_LENGTH , s -> s3 -> rbuf . len , 0 ) FUNCTION_CALL 10 ssl3_read_n ( s , SSL3_RT_HEADER_LENGTH , s -> s3 -> rbuf . len , 0 ) CALLEE 11 ssl3_read_n LEAF_NODE 12 ssl3_read_n LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 , ARGUMENT 11 SSL3_RT_HEADER_LENGTH FIELD 12 SSL3_RT_HEADER_LENGTH LEAF_NODE 13 SSL3_RT_HEADER_LENGTH LEAF_NODE 11 , ARGUMENT 11 s -> s3 -> rbuf . len FIELD 12 s -> s3 -> rbuf . len LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 s3 LEAF_NODE 13 -> LEAF_NODE 13 rbuf LEAF_NODE 13 . LEAF_NODE 13 len LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 n <= 0 EXPR 8 n <= 0 FIELD 9 n LEAF_NODE 10 n REL_OPERATOR 9 <= LEAF_NODE 10 <= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 return LEAF_NODE 6 ( LEAF_NODE 6 n LEAF_NODE 6 ) LEAF_NODE 6 ; EXPR_STATEMENT 6 s -> rstate = SSL_ST_READ_BODY ; EXPR 7 s -> rstate = SSL_ST_READ_BODY ASSIGN 8 s -> rstate = SSL_ST_READ_BODY LVAL 9 s -> rstate FIELD 10 s -> rstate LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 rstate ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL_ST_READ_BODY FIELD 10 SSL_ST_READ_BODY LEAF_NODE 11 SSL_ST_READ_BODY LEAF_NODE 7 ; EXPR_STATEMENT 6 p = s -> packet ; EXPR 7 p = s -> packet ASSIGN 8 p = s -> packet LVAL 9 p FIELD 10 p LEAF_NODE 11 p ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 s -> packet FIELD 10 s -> packet LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 packet LEAF_NODE 7 ; EXPR_STATEMENT 6 rr -> type = * ( p ++ ) ; EXPR 7 rr -> type = * ( p ++ ) ASSIGN 8 rr -> type = * ( p ++ ) LVAL 9 rr -> type FIELD 10 rr -> type LEAF_NODE 11 rr LEAF_NODE 11 -> LEAF_NODE 11 type ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 * ( p ++ ) UNARY_EXPR 10 * ( p ++ ) UNARY_OPERATOR 11 * LEAF_NODE 12 * LEAF_NODE 11 ( FIELD 11 p ++ LEAF_NODE 12 p LEAF_NODE 12 ++ LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ssl_major = * ( p ++ ) ; EXPR 7 ssl_major = * ( p ++ ) ASSIGN 8 ssl_major = * ( p ++ ) LVAL 9 ssl_major FIELD 10 ssl_major LEAF_NODE 11 ssl_major ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 * ( p ++ ) UNARY_EXPR 10 * ( p ++ ) UNARY_OPERATOR 11 * LEAF_NODE 12 * LEAF_NODE 11 ( FIELD 11 p ++ LEAF_NODE 12 p LEAF_NODE 12 ++ LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ssl_minor = * ( p ++ ) ; EXPR 7 ssl_minor = * ( p ++ ) ASSIGN 8 ssl_minor = * ( p ++ ) LVAL 9 ssl_minor FIELD 10 ssl_minor LEAF_NODE 11 ssl_minor ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 * ( p ++ ) UNARY_EXPR 10 * ( p ++ ) UNARY_OPERATOR 11 * LEAF_NODE 12 * LEAF_NODE 11 ( FIELD 11 p ++ LEAF_NODE 12 p LEAF_NODE 12 ++ LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 version = ( ssl_major << 8 ) | ssl_minor ; EXPR 7 version = ( ssl_major << 8 ) | ssl_minor ASSIGN 8 version = ( ssl_major << 8 ) | ssl_minor LVAL 9 version FIELD 10 version LEAF_NODE 11 version ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( ssl_major << 8 ) | ssl_minor BIT_OR 10 ( ssl_major << 8 ) | ssl_minor BIT_OR_ELEM 11 ( ssl_major << 8 ) LEAF_NODE 12 ( FIELD 12 ssl_major LEAF_NODE 13 ssl_major LEAF_NODE 12 << FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 ) LEAF_NODE 11 | BIT_OR_ELEM 11 ssl_minor FIELD 12 ssl_minor LEAF_NODE 13 ssl_minor LEAF_NODE 7 ; EXPR_STATEMENT 6 n2s ( p , rr -> length ) ; EXPR 7 n2s ( p , rr -> length ) FUNCTION_CALL 8 n2s ( p , rr -> length ) CALLEE 9 n2s LEAF_NODE 10 n2s LEAF_NODE 9 ( ARGUMENT 9 p FIELD 10 p LEAF_NODE 11 p LEAF_NODE 9 , ARGUMENT 9 rr -> length FIELD 10 rr -> length LEAF_NODE 11 rr LEAF_NODE 11 -> LEAF_NODE 11 length LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! s -> first_packet EXPR 8 ! s -> first_packet UNARY_EXPR 9 ! s -> first_packet UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FIELD 10 s -> first_packet LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 first_packet LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 version != s -> version EXPR 11 version != s -> version FIELD 12 version LEAF_NODE 13 version EQ_OPERATOR 12 != LEAF_NODE 13 != FIELD 12 s -> version LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 version LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_WRONG_VERSION_NUMBER ) ; EXPR 13 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_WRONG_VERSION_NUMBER ) FUNCTION_CALL 14 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_WRONG_VERSION_NUMBER ) CALLEE 15 SSLerr LEAF_NODE 16 SSLerr LEAF_NODE 15 ( ARGUMENT 15 SSL_F_SSL3_GET_RECORD FIELD 16 SSL_F_SSL3_GET_RECORD LEAF_NODE 17 SSL_F_SSL3_GET_RECORD LEAF_NODE 15 , ARGUMENT 15 SSL_R_WRONG_VERSION_NUMBER FIELD 16 SSL_R_WRONG_VERSION_NUMBER LEAF_NODE 17 SSL_R_WRONG_VERSION_NUMBER LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 s -> version = version ; EXPR 13 s -> version = version ASSIGN 14 s -> version = version LVAL 15 s -> version FIELD 16 s -> version LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 version ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 version FIELD 16 version LEAF_NODE 17 version LEAF_NODE 13 ; EXPR_STATEMENT 12 al = SSL_AD_PROTOCOL_VERSION ; EXPR 13 al = SSL_AD_PROTOCOL_VERSION ASSIGN 14 al = SSL_AD_PROTOCOL_VERSION LVAL 15 al FIELD 16 al LEAF_NODE 17 al ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 SSL_AD_PROTOCOL_VERSION FIELD 16 SSL_AD_PROTOCOL_VERSION LEAF_NODE 17 SSL_AD_PROTOCOL_VERSION LEAF_NODE 13 ; JUMP_STATEMENT 12 goto f_err ; KEYWORD 13 goto LEAF_NODE 14 goto DESTINATION 13 f_err LEAF_NODE 14 f_err LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( version >> 8 ) != SSL3_VERSION_MAJOR EXPR 8 ( version >> 8 ) != SSL3_VERSION_MAJOR LEAF_NODE 9 ( FIELD 9 version LEAF_NODE 10 version LEAF_NODE 9 >> FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 9 ) EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 SSL3_VERSION_MAJOR LEAF_NODE 10 SSL3_VERSION_MAJOR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_WRONG_VERSION_NUMBER ) ; EXPR 10 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_WRONG_VERSION_NUMBER ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_WRONG_VERSION_NUMBER ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL3_GET_RECORD FIELD 13 SSL_F_SSL3_GET_RECORD LEAF_NODE 14 SSL_F_SSL3_GET_RECORD LEAF_NODE 12 , ARGUMENT 12 SSL_R_WRONG_VERSION_NUMBER FIELD 13 SSL_R_WRONG_VERSION_NUMBER LEAF_NODE 14 SSL_R_WRONG_VERSION_NUMBER LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 err LEAF_NODE 11 err LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 rr -> length > SSL3_RT_MAX_ENCRYPTED_LENGTH + extra EXPR 8 rr -> length > SSL3_RT_MAX_ENCRYPTED_LENGTH + extra FIELD 9 rr -> length LEAF_NODE 10 rr LEAF_NODE 10 -> LEAF_NODE 10 length REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 SSL3_RT_MAX_ENCRYPTED_LENGTH LEAF_NODE 10 SSL3_RT_MAX_ENCRYPTED_LENGTH LEAF_NODE 9 + FIELD 9 extra LEAF_NODE 10 extra LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 al = SSL_AD_RECORD_OVERFLOW ; EXPR 10 al = SSL_AD_RECORD_OVERFLOW ASSIGN 11 al = SSL_AD_RECORD_OVERFLOW LVAL 12 al FIELD 13 al LEAF_NODE 14 al ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 SSL_AD_RECORD_OVERFLOW FIELD 13 SSL_AD_RECORD_OVERFLOW LEAF_NODE 14 SSL_AD_RECORD_OVERFLOW LEAF_NODE 10 ; EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_PACKET_LENGTH_TOO_LONG ) ; EXPR 10 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_PACKET_LENGTH_TOO_LONG ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_PACKET_LENGTH_TOO_LONG ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL3_GET_RECORD FIELD 13 SSL_F_SSL3_GET_RECORD LEAF_NODE 14 SSL_F_SSL3_GET_RECORD LEAF_NODE 12 , ARGUMENT 12 SSL_R_PACKET_LENGTH_TOO_LONG FIELD 13 SSL_R_PACKET_LENGTH_TOO_LONG LEAF_NODE 14 SSL_R_PACKET_LENGTH_TOO_LONG LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto f_err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 f_err LEAF_NODE 11 f_err LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 rr -> length > s -> packet_length - SSL3_RT_HEADER_LENGTH EXPR 5 rr -> length > s -> packet_length - SSL3_RT_HEADER_LENGTH FIELD 6 rr -> length LEAF_NODE 7 rr LEAF_NODE 7 -> LEAF_NODE 7 length REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 s -> packet_length LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 packet_length LEAF_NODE 6 - FIELD 6 SSL3_RT_HEADER_LENGTH LEAF_NODE 7 SSL3_RT_HEADER_LENGTH LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 i = rr -> length ; EXPR 7 i = rr -> length ASSIGN 8 i = rr -> length LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 rr -> length FIELD 10 rr -> length LEAF_NODE 11 rr LEAF_NODE 11 -> LEAF_NODE 11 length LEAF_NODE 7 ; EXPR_STATEMENT 6 n = ssl3_read_n ( s , i , i , 1 ) ; EXPR 7 n = ssl3_read_n ( s , i , i , 1 ) ASSIGN 8 n = ssl3_read_n ( s , i , i , 1 ) LVAL 9 n FIELD 10 n LEAF_NODE 11 n ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ssl3_read_n ( s , i , i , 1 ) FUNCTION_CALL 10 ssl3_read_n ( s , i , i , 1 ) CALLEE 11 ssl3_read_n LEAF_NODE 12 ssl3_read_n LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 , ARGUMENT 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 , ARGUMENT 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 , ARGUMENT 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 n <= 0 EXPR 8 n <= 0 FIELD 9 n LEAF_NODE 10 n REL_OPERATOR 9 <= LEAF_NODE 10 <= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 return LEAF_NODE 6 ( LEAF_NODE 6 n LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 5 } EXPR_STATEMENT 3 s -> rstate = SSL_ST_READ_HEADER ; EXPR 4 s -> rstate = SSL_ST_READ_HEADER ASSIGN 5 s -> rstate = SSL_ST_READ_HEADER LVAL 6 s -> rstate FIELD 7 s -> rstate LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 rstate ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 SSL_ST_READ_HEADER FIELD 7 SSL_ST_READ_HEADER LEAF_NODE 8 SSL_ST_READ_HEADER LEAF_NODE 4 ; EXPR_STATEMENT 3 rr -> input = & ( s -> packet [ SSL3_RT_HEADER_LENGTH ] ) ; EXPR 4 rr -> input = & ( s -> packet [ SSL3_RT_HEADER_LENGTH ] ) ASSIGN 5 rr -> input = & ( s -> packet [ SSL3_RT_HEADER_LENGTH ] ) LVAL 6 rr -> input FIELD 7 rr -> input LEAF_NODE 8 rr LEAF_NODE 8 -> LEAF_NODE 8 input ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 & ( s -> packet [ SSL3_RT_HEADER_LENGTH ] ) UNARY_EXPR 7 & ( s -> packet [ SSL3_RT_HEADER_LENGTH ] ) UNARY_OPERATOR 8 & LEAF_NODE 9 & LEAF_NODE 8 ( FIELD 8 s -> packet [ SSL3_RT_HEADER_LENGTH ] LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 packet LEAF_NODE 9 [ EXPR 9 SSL3_RT_HEADER_LENGTH FIELD 10 SSL3_RT_HEADER_LENGTH LEAF_NODE 11 SSL3_RT_HEADER_LENGTH LEAF_NODE 9 ] LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 rr -> length > SSL3_RT_MAX_ENCRYPTED_LENGTH + extra EXPR 5 rr -> length > SSL3_RT_MAX_ENCRYPTED_LENGTH + extra FIELD 6 rr -> length LEAF_NODE 7 rr LEAF_NODE 7 -> LEAF_NODE 7 length REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 SSL3_RT_MAX_ENCRYPTED_LENGTH LEAF_NODE 7 SSL3_RT_MAX_ENCRYPTED_LENGTH LEAF_NODE 6 + FIELD 6 extra LEAF_NODE 7 extra LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 al = SSL_AD_RECORD_OVERFLOW ; EXPR 7 al = SSL_AD_RECORD_OVERFLOW ASSIGN 8 al = SSL_AD_RECORD_OVERFLOW LVAL 9 al FIELD 10 al LEAF_NODE 11 al ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL_AD_RECORD_OVERFLOW FIELD 10 SSL_AD_RECORD_OVERFLOW LEAF_NODE 11 SSL_AD_RECORD_OVERFLOW LEAF_NODE 7 ; EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_ENCRYPTED_LENGTH_TOO_LONG ) ; EXPR 7 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_ENCRYPTED_LENGTH_TOO_LONG ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_ENCRYPTED_LENGTH_TOO_LONG ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL3_GET_RECORD FIELD 10 SSL_F_SSL3_GET_RECORD LEAF_NODE 11 SSL_F_SSL3_GET_RECORD LEAF_NODE 9 , ARGUMENT 9 SSL_R_ENCRYPTED_LENGTH_TOO_LONG FIELD 10 SSL_R_ENCRYPTED_LENGTH_TOO_LONG LEAF_NODE 11 SSL_R_ENCRYPTED_LENGTH_TOO_LONG LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto f_err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 f_err LEAF_NODE 8 f_err LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 rr -> data = rr -> input ; EXPR 4 rr -> data = rr -> input ASSIGN 5 rr -> data = rr -> input LVAL 6 rr -> data FIELD 7 rr -> data LEAF_NODE 8 rr LEAF_NODE 8 -> LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 rr -> input FIELD 7 rr -> input LEAF_NODE 8 rr LEAF_NODE 8 -> LEAF_NODE 8 input LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 enc_err <= 0 EXPR 5 enc_err <= 0 FIELD 6 enc_err LEAF_NODE 7 enc_err REL_OPERATOR 6 <= LEAF_NODE 7 <= FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 enc_err == 0 EXPR 8 enc_err == 0 FIELD 9 enc_err LEAF_NODE 10 enc_err EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 goto err ; KEYWORD 9 goto LEAF_NODE 10 goto DESTINATION 9 err LEAF_NODE 10 err LEAF_NODE 9 ; EXPR_STATEMENT 6 decryption_failed_or_bad_record_mac = 1 ; EXPR 7 decryption_failed_or_bad_record_mac = 1 ASSIGN 8 decryption_failed_or_bad_record_mac = 1 LVAL 9 decryption_failed_or_bad_record_mac FIELD 10 decryption_failed_or_bad_record_mac LEAF_NODE 11 decryption_failed_or_bad_record_mac ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 printf ( \"dec %d\\n\" , rr -> length ) ; EXPR 4 printf ( \"dec %d\\n\" , rr -> length ) FUNCTION_CALL 5 printf ( \"dec %d\\n\" , rr -> length ) CALLEE 6 printf LEAF_NODE 7 printf LEAF_NODE 6 ( ARGUMENT 6 \"dec %d\\n\" FIELD 7 \"dec %d\\n\" LEAF_NODE 8 \"dec %d\\n\" LEAF_NODE 6 , ARGUMENT 6 rr -> length FIELD 7 rr -> length LEAF_NODE 8 rr LEAF_NODE 8 -> LEAF_NODE 8 length LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 unsigned int z ; VAR_DECL 5 unsigned int z TYPE 6 unsigned int TYPE_NAME 7 unsigned int LEAF_NODE 8 unsigned LEAF_NODE 8 int NAME 6 z LEAF_NODE 7 z LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 z = 0 ; EXPR 6 z = 0 ASSIGN 7 z = 0 LVAL 8 z FIELD 9 z LEAF_NODE 10 z ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 z < rr -> length EXPR 6 z < rr -> length FIELD 7 z LEAF_NODE 8 z REL_OPERATOR 7 < LEAF_NODE 8 < FIELD 7 rr -> length LEAF_NODE 8 rr LEAF_NODE 8 -> LEAF_NODE 8 length LEAF_NODE 5 ; FOR_EXPR 5 z ++ EXPR 6 z ++ FIELD 7 z ++ LEAF_NODE 8 z LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 EXPR_STATEMENT 6 printf ( \"%02X%c\" , rr -> data [ z ] , ( ( z + 1 ) % 16 ) ? ' ' : '\\n' ) ; EXPR 7 printf ( \"%02X%c\" , rr -> data [ z ] , ( ( z + 1 ) % 16 ) ? ' ' : '\\n' ) FUNCTION_CALL 8 printf ( \"%02X%c\" , rr -> data [ z ] , ( ( z + 1 ) % 16 ) ? ' ' : '\\n' ) CALLEE 9 printf LEAF_NODE 10 printf LEAF_NODE 9 ( ARGUMENT 9 \"%02X%c\" FIELD 10 \"%02X%c\" LEAF_NODE 11 \"%02X%c\" LEAF_NODE 9 , ARGUMENT 9 rr -> data [ z ] FIELD 10 rr -> data [ z ] LEAF_NODE 11 rr LEAF_NODE 11 -> LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 z FIELD 12 z LEAF_NODE 13 z LEAF_NODE 11 ] LEAF_NODE 9 , ARGUMENT 9 ( ( z + 1 ) % 16 ) ? ' ' : '\\n' COND_EXPR 10 ( ( z + 1 ) % 16 ) ? ' ' : '\\n' CONDITION 11 ( ( z + 1 ) % 16 ) LEAF_NODE 12 ( LEAF_NODE 12 ( FIELD 12 z LEAF_NODE 13 z LEAF_NODE 12 + FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 12 ) LEAF_NODE 12 % FIELD 12 16 LEAF_NODE 13 16 LEAF_NODE 12 ) LEAF_NODE 11 ? EXPR 11 ' ' FIELD 12 ' ' LEAF_NODE 13 ' ' LEAF_NODE 11 : FIELD 11 '\\n' LEAF_NODE 12 '\\n' LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 3 } EXPR_STATEMENT 3 printf ( \"\\n\" ) ; EXPR 4 printf ( \"\\n\" ) FUNCTION_CALL 5 printf ( \"\\n\" ) CALLEE 6 printf LEAF_NODE 7 printf LEAF_NODE 6 ( ARGUMENT 6 \"\\n\" FIELD 7 \"\\n\" LEAF_NODE 8 \"\\n\" LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( sess == NULL ) || ( s -> enc_read_ctx == NULL ) || ( s -> read_hash == NULL ) EXPR 5 ( sess == NULL ) || ( s -> enc_read_ctx == NULL ) || ( s -> read_hash == NULL ) OR 6 ( sess == NULL ) || ( s -> enc_read_ctx == NULL ) || ( s -> read_hash == NULL ) EXPR 7 ( sess == NULL ) LEAF_NODE 8 ( FIELD 8 sess LEAF_NODE 9 sess EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 8 ) LEAF_NODE 7 || EXPR 7 ( s -> enc_read_ctx == NULL ) || ( s -> read_hash == NULL ) OR 8 ( s -> enc_read_ctx == NULL ) || ( s -> read_hash == NULL ) EXPR 9 ( s -> enc_read_ctx == NULL ) LEAF_NODE 10 ( FIELD 10 s -> enc_read_ctx LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 enc_read_ctx EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 10 ) LEAF_NODE 9 || EXPR 9 ( s -> read_hash == NULL ) LEAF_NODE 10 ( FIELD 10 s -> read_hash LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 read_hash EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 10 ) LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 clear = 1 ; EXPR 6 clear = 1 ASSIGN 7 clear = 1 LVAL 8 clear FIELD 9 clear LEAF_NODE 10 clear ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! clear EXPR 5 ! clear UNARY_EXPR 6 ! clear UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 clear LEAF_NODE 8 clear LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 mac_size = EVP_MD_size ( s -> read_hash ) ; EXPR 7 mac_size = EVP_MD_size ( s -> read_hash ) ASSIGN 8 mac_size = EVP_MD_size ( s -> read_hash ) LVAL 9 mac_size FIELD 10 mac_size LEAF_NODE 11 mac_size ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 EVP_MD_size ( s -> read_hash ) FUNCTION_CALL 10 EVP_MD_size ( s -> read_hash ) CALLEE 11 EVP_MD_size LEAF_NODE 12 EVP_MD_size LEAF_NODE 11 ( ARGUMENT 11 s -> read_hash FIELD 12 s -> read_hash LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 read_hash LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 rr -> length > SSL3_RT_MAX_COMPRESSED_LENGTH + extra + mac_size EXPR 8 rr -> length > SSL3_RT_MAX_COMPRESSED_LENGTH + extra + mac_size FIELD 9 rr -> length LEAF_NODE 10 rr LEAF_NODE 10 -> LEAF_NODE 10 length REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 SSL3_RT_MAX_COMPRESSED_LENGTH LEAF_NODE 10 SSL3_RT_MAX_COMPRESSED_LENGTH LEAF_NODE 9 + FIELD 9 extra LEAF_NODE 10 extra LEAF_NODE 9 + FIELD 9 mac_size LEAF_NODE 10 mac_size LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 al = SSL_AD_RECORD_OVERFLOW ; EXPR 10 al = SSL_AD_RECORD_OVERFLOW ASSIGN 11 al = SSL_AD_RECORD_OVERFLOW LVAL 12 al FIELD 13 al LEAF_NODE 14 al ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 SSL_AD_RECORD_OVERFLOW FIELD 13 SSL_AD_RECORD_OVERFLOW LEAF_NODE 14 SSL_AD_RECORD_OVERFLOW LEAF_NODE 10 ; EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_PRE_MAC_LENGTH_TOO_LONG ) ; EXPR 10 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_PRE_MAC_LENGTH_TOO_LONG ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_PRE_MAC_LENGTH_TOO_LONG ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL3_GET_RECORD FIELD 13 SSL_F_SSL3_GET_RECORD LEAF_NODE 14 SSL_F_SSL3_GET_RECORD LEAF_NODE 12 , ARGUMENT 12 SSL_R_PRE_MAC_LENGTH_TOO_LONG FIELD 13 SSL_R_PRE_MAC_LENGTH_TOO_LONG LEAF_NODE 14 SSL_R_PRE_MAC_LENGTH_TOO_LONG LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto f_err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 f_err LEAF_NODE 11 f_err LEAF_NODE 10 ; EXPR_STATEMENT 9 decryption_failed_or_bad_record_mac = 1 ; EXPR 10 decryption_failed_or_bad_record_mac = 1 ASSIGN 11 decryption_failed_or_bad_record_mac = 1 LVAL 12 decryption_failed_or_bad_record_mac FIELD 13 decryption_failed_or_bad_record_mac LEAF_NODE 14 decryption_failed_or_bad_record_mac ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 rr -> length >= mac_size EXPR 8 rr -> length >= mac_size FIELD 9 rr -> length LEAF_NODE 10 rr LEAF_NODE 10 -> LEAF_NODE 10 length REL_OPERATOR 9 >= LEAF_NODE 10 >= FIELD 9 mac_size LEAF_NODE 10 mac_size LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 rr -> length -= mac_size ; EXPR 10 rr -> length -= mac_size ASSIGN 11 rr -> length -= mac_size LVAL 12 rr -> length FIELD 13 rr -> length LEAF_NODE 14 rr LEAF_NODE 14 -> LEAF_NODE 14 length ASSIGN_OP 12 -= LEAF_NODE 13 -= RVAL 12 mac_size FIELD 13 mac_size LEAF_NODE 14 mac_size LEAF_NODE 10 ; EXPR_STATEMENT 9 mac = & rr -> data [ rr -> length ] ; EXPR 10 mac = & rr -> data [ rr -> length ] ASSIGN 11 mac = & rr -> data [ rr -> length ] LVAL 12 mac FIELD 13 mac LEAF_NODE 14 mac ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 & rr -> data [ rr -> length ] UNARY_EXPR 13 & rr -> data [ rr -> length ] UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 rr -> data [ rr -> length ] LEAF_NODE 15 rr LEAF_NODE 15 -> LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 rr -> length FIELD 16 rr -> length LEAF_NODE 17 rr LEAF_NODE 17 -> LEAF_NODE 17 length LEAF_NODE 15 ] LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 al = SSL_AD_DECODE_ERROR ; EXPR 10 al = SSL_AD_DECODE_ERROR ASSIGN 11 al = SSL_AD_DECODE_ERROR LVAL 12 al FIELD 13 al LEAF_NODE 14 al ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 SSL_AD_DECODE_ERROR FIELD 13 SSL_AD_DECODE_ERROR LEAF_NODE 14 SSL_AD_DECODE_ERROR LEAF_NODE 10 ; EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_LENGTH_TOO_SHORT ) ; EXPR 10 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_LENGTH_TOO_SHORT ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_LENGTH_TOO_SHORT ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL3_GET_RECORD FIELD 13 SSL_F_SSL3_GET_RECORD LEAF_NODE 14 SSL_F_SSL3_GET_RECORD LEAF_NODE 12 , ARGUMENT 12 SSL_R_LENGTH_TOO_SHORT FIELD 13 SSL_R_LENGTH_TOO_SHORT LEAF_NODE 14 SSL_R_LENGTH_TOO_SHORT LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto f_err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 f_err LEAF_NODE 11 f_err LEAF_NODE 10 ; EXPR_STATEMENT 9 decryption_failed_or_bad_record_mac = 1 ; EXPR 10 decryption_failed_or_bad_record_mac = 1 ASSIGN 11 decryption_failed_or_bad_record_mac = 1 LVAL 12 decryption_failed_or_bad_record_mac FIELD 13 decryption_failed_or_bad_record_mac LEAF_NODE 14 decryption_failed_or_bad_record_mac ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; EXPR_STATEMENT 9 rr -> length = 0 ; EXPR 10 rr -> length = 0 ASSIGN 11 rr -> length = 0 LVAL 12 rr -> length FIELD 13 rr -> length LEAF_NODE 14 rr LEAF_NODE 14 -> LEAF_NODE 14 length ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 mac == NULL || memcmp ( md , mac , mac_size ) != 0 EXPR 8 mac == NULL || memcmp ( md , mac , mac_size ) != 0 OR 9 mac == NULL || memcmp ( md , mac , mac_size ) != 0 EXPR 10 mac == NULL FIELD 11 mac LEAF_NODE 12 mac EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 10 || EXPR 10 memcmp ( md , mac , mac_size ) != 0 FUNCTION_CALL 11 memcmp ( md , mac , mac_size ) CALLEE 12 memcmp LEAF_NODE 13 memcmp LEAF_NODE 12 ( ARGUMENT 12 md FIELD 13 md LEAF_NODE 14 md LEAF_NODE 12 , ARGUMENT 12 mac FIELD 13 mac LEAF_NODE 14 mac LEAF_NODE 12 , ARGUMENT 12 mac_size FIELD 13 mac_size LEAF_NODE 14 mac_size LEAF_NODE 12 ) EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 decryption_failed_or_bad_record_mac = 1 ; EXPR 10 decryption_failed_or_bad_record_mac = 1 ASSIGN 11 decryption_failed_or_bad_record_mac = 1 LVAL 12 decryption_failed_or_bad_record_mac FIELD 13 decryption_failed_or_bad_record_mac LEAF_NODE 14 decryption_failed_or_bad_record_mac ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 decryption_failed_or_bad_record_mac EXPR 5 decryption_failed_or_bad_record_mac FIELD 6 decryption_failed_or_bad_record_mac LEAF_NODE 7 decryption_failed_or_bad_record_mac LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 al = SSL_AD_BAD_RECORD_MAC ; EXPR 7 al = SSL_AD_BAD_RECORD_MAC ASSIGN 8 al = SSL_AD_BAD_RECORD_MAC LVAL 9 al FIELD 10 al LEAF_NODE 11 al ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL_AD_BAD_RECORD_MAC FIELD 10 SSL_AD_BAD_RECORD_MAC LEAF_NODE 11 SSL_AD_BAD_RECORD_MAC LEAF_NODE 7 ; EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC ) ; EXPR 7 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL3_GET_RECORD FIELD 10 SSL_F_SSL3_GET_RECORD LEAF_NODE 11 SSL_F_SSL3_GET_RECORD LEAF_NODE 9 , ARGUMENT 9 SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC FIELD 10 SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC LEAF_NODE 11 SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto f_err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 f_err LEAF_NODE 8 f_err LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> expand != NULL EXPR 5 s -> expand != NULL FIELD 6 s -> expand LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 expand EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 rr -> length > SSL3_RT_MAX_COMPRESSED_LENGTH + extra EXPR 8 rr -> length > SSL3_RT_MAX_COMPRESSED_LENGTH + extra FIELD 9 rr -> length LEAF_NODE 10 rr LEAF_NODE 10 -> LEAF_NODE 10 length REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 SSL3_RT_MAX_COMPRESSED_LENGTH LEAF_NODE 10 SSL3_RT_MAX_COMPRESSED_LENGTH LEAF_NODE 9 + FIELD 9 extra LEAF_NODE 10 extra LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 al = SSL_AD_RECORD_OVERFLOW ; EXPR 10 al = SSL_AD_RECORD_OVERFLOW ASSIGN 11 al = SSL_AD_RECORD_OVERFLOW LVAL 12 al FIELD 13 al LEAF_NODE 14 al ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 SSL_AD_RECORD_OVERFLOW FIELD 13 SSL_AD_RECORD_OVERFLOW LEAF_NODE 14 SSL_AD_RECORD_OVERFLOW LEAF_NODE 10 ; EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_COMPRESSED_LENGTH_TOO_LONG ) ; EXPR 10 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_COMPRESSED_LENGTH_TOO_LONG ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_COMPRESSED_LENGTH_TOO_LONG ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL3_GET_RECORD FIELD 13 SSL_F_SSL3_GET_RECORD LEAF_NODE 14 SSL_F_SSL3_GET_RECORD LEAF_NODE 12 , ARGUMENT 12 SSL_R_COMPRESSED_LENGTH_TOO_LONG FIELD 13 SSL_R_COMPRESSED_LENGTH_TOO_LONG LEAF_NODE 14 SSL_R_COMPRESSED_LENGTH_TOO_LONG LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto f_err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 f_err LEAF_NODE 11 f_err LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! ssl3_do_uncompress ( s ) EXPR 8 ! ssl3_do_uncompress ( s ) UNARY_EXPR 9 ! ssl3_do_uncompress ( s ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 ssl3_do_uncompress ( s ) CALLEE 11 ssl3_do_uncompress LEAF_NODE 12 ssl3_do_uncompress LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 al = SSL_AD_DECOMPRESSION_FAILURE ; EXPR 10 al = SSL_AD_DECOMPRESSION_FAILURE ASSIGN 11 al = SSL_AD_DECOMPRESSION_FAILURE LVAL 12 al FIELD 13 al LEAF_NODE 14 al ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 SSL_AD_DECOMPRESSION_FAILURE FIELD 13 SSL_AD_DECOMPRESSION_FAILURE LEAF_NODE 14 SSL_AD_DECOMPRESSION_FAILURE LEAF_NODE 10 ; EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_BAD_DECOMPRESSION ) ; EXPR 10 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_BAD_DECOMPRESSION ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_BAD_DECOMPRESSION ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL3_GET_RECORD FIELD 13 SSL_F_SSL3_GET_RECORD LEAF_NODE 14 SSL_F_SSL3_GET_RECORD LEAF_NODE 12 , ARGUMENT 12 SSL_R_BAD_DECOMPRESSION FIELD 13 SSL_R_BAD_DECOMPRESSION LEAF_NODE 14 SSL_R_BAD_DECOMPRESSION LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto f_err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 f_err LEAF_NODE 11 f_err LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 rr -> length > SSL3_RT_MAX_PLAIN_LENGTH + extra EXPR 5 rr -> length > SSL3_RT_MAX_PLAIN_LENGTH + extra FIELD 6 rr -> length LEAF_NODE 7 rr LEAF_NODE 7 -> LEAF_NODE 7 length REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 SSL3_RT_MAX_PLAIN_LENGTH LEAF_NODE 7 SSL3_RT_MAX_PLAIN_LENGTH LEAF_NODE 6 + FIELD 6 extra LEAF_NODE 7 extra LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 al = SSL_AD_RECORD_OVERFLOW ; EXPR 7 al = SSL_AD_RECORD_OVERFLOW ASSIGN 8 al = SSL_AD_RECORD_OVERFLOW LVAL 9 al FIELD 10 al LEAF_NODE 11 al ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL_AD_RECORD_OVERFLOW FIELD 10 SSL_AD_RECORD_OVERFLOW LEAF_NODE 11 SSL_AD_RECORD_OVERFLOW LEAF_NODE 7 ; EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_DATA_LENGTH_TOO_LONG ) ; EXPR 7 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_DATA_LENGTH_TOO_LONG ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL3_GET_RECORD , SSL_R_DATA_LENGTH_TOO_LONG ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL3_GET_RECORD FIELD 10 SSL_F_SSL3_GET_RECORD LEAF_NODE 11 SSL_F_SSL3_GET_RECORD LEAF_NODE 9 , ARGUMENT 9 SSL_R_DATA_LENGTH_TOO_LONG FIELD 10 SSL_R_DATA_LENGTH_TOO_LONG LEAF_NODE 11 SSL_R_DATA_LENGTH_TOO_LONG LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto f_err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 f_err LEAF_NODE 8 f_err LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 rr -> off = 0 ; EXPR 4 rr -> off = 0 ASSIGN 5 rr -> off = 0 LVAL 6 rr -> off FIELD 7 rr -> off LEAF_NODE 8 rr LEAF_NODE 8 -> LEAF_NODE 8 off ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> packet_length = 0 ; EXPR 4 s -> packet_length = 0 ASSIGN 5 s -> packet_length = 0 LVAL 6 s -> packet_length FIELD 7 s -> packet_length LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 packet_length ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 rr -> length == 0 EXPR 5 rr -> length == 0 FIELD 6 rr -> length LEAF_NODE 7 rr LEAF_NODE 7 -> LEAF_NODE 7 length EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto again ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 again LEAF_NODE 7 again LEAF_NODE 6 ; JUMP_STATEMENT 3 return ( 1 ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ( 1 ) EXPR 5 ( 1 ) LEAF_NODE 6 ( FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 6 ) LEAF_NODE 4 ; LABEL 3 f_err : LEAF_NODE 4 f_err LEAF_NODE 4 : EXPR_STATEMENT 3 ssl3_send_alert ( s , SSL3_AL_FATAL , al ) ; EXPR 4 ssl3_send_alert ( s , SSL3_AL_FATAL , al ) FUNCTION_CALL 5 ssl3_send_alert ( s , SSL3_AL_FATAL , al ) CALLEE 6 ssl3_send_alert LEAF_NODE 7 ssl3_send_alert LEAF_NODE 6 ( ARGUMENT 6 s FIELD 7 s LEAF_NODE 8 s LEAF_NODE 6 , ARGUMENT 6 SSL3_AL_FATAL FIELD 7 SSL3_AL_FATAL LEAF_NODE 8 SSL3_AL_FATAL LEAF_NODE 6 , ARGUMENT 6 al FIELD 7 al LEAF_NODE 8 al LEAF_NODE 6 ) LEAF_NODE 4 ; LABEL 3 err : LEAF_NODE 4 err LEAF_NODE 4 : LEAF_NODE 3 return LEAF_NODE 3 ( LEAF_NODE 3 ret LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 2 }", "idx": 194, "project": "openssl_ast_vul_function_test_27", "target": 1}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 ASN1_STRING * TYPE_NAME 3 ASN1_STRING LEAF_NODE 4 ASN1_STRING LEAF_NODE 3 * FUNCTION_NAME 2 ASN1_STRING_dup LEAF_NODE 3 ASN1_STRING_dup PARAMETER_LIST 2 ( const ASN1_STRING * str ) LEAF_NODE 3 ( PARAMETER_DECL 3 const ASN1_STRING * str TYPE 4 const ASN1_STRING * TYPE_NAME 5 const ASN1_STRING LEAF_NODE 6 const LEAF_NODE 6 ASN1_STRING POINTER 5 * LEAF_NODE 6 * NAME 4 str LEAF_NODE 5 str LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 ASN1_STRING * ret ; VAR_DECL 4 ASN1_STRING * ret TYPE 5 ASN1_STRING * TYPE_NAME 6 ASN1_STRING LEAF_NODE 7 ASN1_STRING POINTER 6 * LEAF_NODE 7 * NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! str EXPR 5 ! str UNARY_EXPR 6 ! str UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 str LEAF_NODE 8 str LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return NULL ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 NULL EXPR 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 6 ; EXPR_STATEMENT 3 ret = ASN1_STRING_new ( ) ; EXPR 4 ret = ASN1_STRING_new ( ) ASSIGN 5 ret = ASN1_STRING_new ( ) LVAL 6 ret FIELD 7 ret LEAF_NODE 8 ret ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ASN1_STRING_new ( ) FUNCTION_CALL 7 ASN1_STRING_new ( ) CALLEE 8 ASN1_STRING_new LEAF_NODE 9 ASN1_STRING_new LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ret == NULL EXPR 5 ret == NULL FIELD 6 ret LEAF_NODE 7 ret EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return NULL ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 NULL EXPR 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ASN1_STRING_copy ( ret , str ) EXPR 5 ! ASN1_STRING_copy ( ret , str ) UNARY_EXPR 6 ! ASN1_STRING_copy ( ret , str ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 ASN1_STRING_copy ( ret , str ) CALLEE 8 ASN1_STRING_copy LEAF_NODE 9 ASN1_STRING_copy LEAF_NODE 8 ( ARGUMENT 8 ret FIELD 9 ret LEAF_NODE 10 ret LEAF_NODE 8 , ARGUMENT 8 str FIELD 9 str LEAF_NODE 10 str LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASN1_STRING_free ( ret ) ; EXPR 7 ASN1_STRING_free ( ret ) FUNCTION_CALL 8 ASN1_STRING_free ( ret ) CALLEE 9 ASN1_STRING_free LEAF_NODE 10 ASN1_STRING_free LEAF_NODE 9 ( ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return NULL ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 NULL EXPR 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return ret ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ret EXPR 5 ret FIELD 6 ret LEAF_NODE 7 ret LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 195, "project": "openssl_ast_normal_function_test_68", "target": 0}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } ; CLASS_DEF 2 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } CLASS_DEF 3 struct bio_addrinfo_st BASE_CLASSES { int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; } LEAF_NODE 4 struct CLASS_NAME 4 bio_addrinfo_st LEAF_NODE 5 bio_addrinfo_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int bai_family ; int bai_socktype ; int bai_protocol ; size_t bai_addrlen ; struct sockaddr * bai_addr ; struct bio_addrinfo_st * bai_next ; SIMPLE_DECL 5 int bai_family ; VAR_DECL 6 int bai_family TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_family LEAF_NODE 8 bai_family LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_socktype ; VAR_DECL 6 int bai_socktype TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_socktype LEAF_NODE 8 bai_socktype LEAF_NODE 6 ; SIMPLE_DECL 5 int bai_protocol ; VAR_DECL 6 int bai_protocol TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bai_protocol LEAF_NODE 8 bai_protocol LEAF_NODE 6 ; SIMPLE_DECL 5 size_t bai_addrlen ; VAR_DECL 6 size_t bai_addrlen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 bai_addrlen LEAF_NODE 8 bai_addrlen LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr * bai_addr ; VAR_DECL 6 struct sockaddr * bai_addr TYPE 7 struct sockaddr * TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr POINTER 8 * LEAF_NODE 9 * NAME 7 bai_addr LEAF_NODE 8 bai_addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct bio_addrinfo_st * bai_next ; VAR_DECL 6 struct bio_addrinfo_st * bai_next TYPE 7 struct bio_addrinfo_st * TYPE_NAME 8 struct bio_addrinfo_st LEAF_NODE 9 struct LEAF_NODE 9 bio_addrinfo_st POINTER 8 * LEAF_NODE 9 * NAME 7 bai_next LEAF_NODE 8 bai_next LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct bio_addrinfo_st BIO_ADDRINFO ; VAR_DECL 2 struct bio_addrinfo_st BIO_ADDRINFO TYPE 3 struct bio_addrinfo_st TYPE_NAME 4 struct bio_addrinfo_st LEAF_NODE 5 struct LEAF_NODE 5 bio_addrinfo_st NAME 3 BIO_ADDRINFO LEAF_NODE 4 BIO_ADDRINFO LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t socklen_t ; VAR_DECL 2 uint32_t socklen_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 socklen_t LEAF_NODE 4 socklen_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } ; CLASS_DEF 2 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } CLASS_DEF 3 enum BIO_hostserv_priorities BASE_CLASSES { BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV } LEAF_NODE 4 enum CLASS_NAME 4 BIO_hostserv_priorities LEAF_NODE 5 BIO_hostserv_priorities LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_PARSE_PRIO_HOST , BIO_PARSE_PRIO_SERV LEAF_NODE 5 BIO_PARSE_PRIO_HOST LEAF_NODE 5 , LEAF_NODE 5 BIO_PARSE_PRIO_SERV LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } ; CLASS_DEF 2 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } CLASS_DEF 3 enum BIO_lookup_type BASE_CLASSES { BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER } LEAF_NODE 4 enum CLASS_NAME 4 BIO_lookup_type LEAF_NODE 5 BIO_lookup_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 BIO_LOOKUP_CLIENT , BIO_LOOKUP_SERVER LEAF_NODE 5 BIO_LOOKUP_CLIENT LEAF_NODE 5 , LEAF_NODE 5 BIO_LOOKUP_SERVER LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 BIO_get_port LEAF_NODE 3 BIO_get_port PARAMETER_LIST 2 ( const char * str , unsigned short * port_ptr ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * str TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 str LEAF_NODE 5 str LEAF_NODE 3 , PARAMETER_DECL 3 unsigned short * port_ptr TYPE 4 unsigned short * TYPE_NAME 5 unsigned short LEAF_NODE 6 unsigned LEAF_NODE 6 short POINTER 5 * LEAF_NODE 6 * NAME 4 port_ptr LEAF_NODE 5 port_ptr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 BIO_ADDRINFO * res ; res = NULL ; VAR_DECL 4 BIO_ADDRINFO * res ; res = NULL TYPE 5 BIO_ADDRINFO * TYPE_NAME 6 BIO_ADDRINFO LEAF_NODE 7 BIO_ADDRINFO POINTER 6 * LEAF_NODE 7 * NAME 5 res LEAF_NODE 6 res LEAF_NODE 5 ; INIT 5 res = NULL ASSIGN 6 res = NULL LVAL 7 res NAME 8 res LEAF_NODE 9 res ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int ret ; ret = 0 ; VAR_DECL 4 int ret ; ret = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 5 ; INIT 5 ret = 0 ASSIGN 6 ret = 0 LVAL 7 ret NAME 8 ret LEAF_NODE 9 ret ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 str == NULL EXPR 5 str == NULL FIELD 6 str LEAF_NODE 7 str EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 BIOerr ( BIO_F_BIO_GET_PORT , BIO_R_NO_PORT_DEFINED ) ; EXPR 7 BIOerr ( BIO_F_BIO_GET_PORT , BIO_R_NO_PORT_DEFINED ) FUNCTION_CALL 8 BIOerr ( BIO_F_BIO_GET_PORT , BIO_R_NO_PORT_DEFINED ) CALLEE 9 BIOerr LEAF_NODE 10 BIOerr LEAF_NODE 9 ( ARGUMENT 9 BIO_F_BIO_GET_PORT FIELD 10 BIO_F_BIO_GET_PORT LEAF_NODE 11 BIO_F_BIO_GET_PORT LEAF_NODE 9 , ARGUMENT 9 BIO_R_NO_PORT_DEFINED FIELD 10 BIO_R_NO_PORT_DEFINED LEAF_NODE 11 BIO_R_NO_PORT_DEFINED LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 BIO_sock_init ( ) != 1 EXPR 5 BIO_sock_init ( ) != 1 FUNCTION_CALL 6 BIO_sock_init ( ) CALLEE 7 BIO_sock_init LEAF_NODE 8 BIO_sock_init LEAF_NODE 7 ( LEAF_NODE 7 ) EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 BIO_lookup ( NULL , str , BIO_LOOKUP_CLIENT , AF_INET , SOCK_STREAM , & res ) EXPR 5 BIO_lookup ( NULL , str , BIO_LOOKUP_CLIENT , AF_INET , SOCK_STREAM , & res ) FUNCTION_CALL 6 BIO_lookup ( NULL , str , BIO_LOOKUP_CLIENT , AF_INET , SOCK_STREAM , & res ) CALLEE 7 BIO_lookup LEAF_NODE 8 BIO_lookup LEAF_NODE 7 ( ARGUMENT 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 7 , ARGUMENT 7 str FIELD 8 str LEAF_NODE 9 str LEAF_NODE 7 , ARGUMENT 7 BIO_LOOKUP_CLIENT FIELD 8 BIO_LOOKUP_CLIENT LEAF_NODE 9 BIO_LOOKUP_CLIENT LEAF_NODE 7 , ARGUMENT 7 AF_INET FIELD 8 AF_INET LEAF_NODE 9 AF_INET LEAF_NODE 7 , ARGUMENT 7 SOCK_STREAM FIELD 8 SOCK_STREAM LEAF_NODE 9 SOCK_STREAM LEAF_NODE 7 , ARGUMENT 7 & res UNARY_EXPR 8 & res UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 res LEAF_NODE 10 res LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 BIO_ADDRINFO_family ( res ) != AF_INET EXPR 8 BIO_ADDRINFO_family ( res ) != AF_INET FUNCTION_CALL 9 BIO_ADDRINFO_family ( res ) CALLEE 10 BIO_ADDRINFO_family LEAF_NODE 11 BIO_ADDRINFO_family LEAF_NODE 10 ( ARGUMENT 10 res FIELD 11 res LEAF_NODE 12 res LEAF_NODE 10 ) EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 AF_INET LEAF_NODE 10 AF_INET LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIOerr ( BIO_F_BIO_GET_PORT , BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET ) ; EXPR 10 BIOerr ( BIO_F_BIO_GET_PORT , BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET ) FUNCTION_CALL 11 BIOerr ( BIO_F_BIO_GET_PORT , BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET ) CALLEE 12 BIOerr LEAF_NODE 13 BIOerr LEAF_NODE 12 ( ARGUMENT 12 BIO_F_BIO_GET_PORT FIELD 13 BIO_F_BIO_GET_PORT LEAF_NODE 14 BIO_F_BIO_GET_PORT LEAF_NODE 12 , ARGUMENT 12 BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET FIELD 13 BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET LEAF_NODE 14 BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 * port_ptr = ntohs ( BIO_ADDR_rawport ( BIO_ADDRINFO_address ( res ) ) ) ; EXPR 10 * port_ptr = ntohs ( BIO_ADDR_rawport ( BIO_ADDRINFO_address ( res ) ) ) ASSIGN 11 * port_ptr = ntohs ( BIO_ADDR_rawport ( BIO_ADDRINFO_address ( res ) ) ) LVAL 12 * port_ptr UNARY_EXPR 13 * port_ptr UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 port_ptr LEAF_NODE 15 port_ptr ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ntohs ( BIO_ADDR_rawport ( BIO_ADDRINFO_address ( res ) ) ) FUNCTION_CALL 13 ntohs ( BIO_ADDR_rawport ( BIO_ADDRINFO_address ( res ) ) ) CALLEE 14 ntohs LEAF_NODE 15 ntohs LEAF_NODE 14 ( ARGUMENT 14 BIO_ADDR_rawport ( BIO_ADDRINFO_address ( res ) ) FUNCTION_CALL 15 BIO_ADDR_rawport ( BIO_ADDRINFO_address ( res ) ) CALLEE 16 BIO_ADDR_rawport LEAF_NODE 17 BIO_ADDR_rawport LEAF_NODE 16 ( ARGUMENT 16 BIO_ADDRINFO_address ( res ) FUNCTION_CALL 17 BIO_ADDRINFO_address ( res ) CALLEE 18 BIO_ADDRINFO_address LEAF_NODE 19 BIO_ADDRINFO_address LEAF_NODE 18 ( ARGUMENT 18 res FIELD 19 res LEAF_NODE 20 res LEAF_NODE 18 ) LEAF_NODE 16 ) LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ret = 1 ; EXPR 10 ret = 1 ASSIGN 11 ret = 1 LVAL 12 ret FIELD 13 ret LEAF_NODE 14 ret ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 BIO_ADDRINFO_free ( res ) ; EXPR 7 BIO_ADDRINFO_free ( res ) FUNCTION_CALL 8 BIO_ADDRINFO_free ( res ) CALLEE 9 BIO_ADDRINFO_free LEAF_NODE 10 BIO_ADDRINFO_free LEAF_NODE 9 ( ARGUMENT 9 res FIELD 10 res LEAF_NODE 11 res LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ERR_add_error_data ( 2 , \"host=\" , str ) ; EXPR 7 ERR_add_error_data ( 2 , \"host=\" , str ) FUNCTION_CALL 8 ERR_add_error_data ( 2 , \"host=\" , str ) CALLEE 9 ERR_add_error_data LEAF_NODE 10 ERR_add_error_data LEAF_NODE 9 ( ARGUMENT 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 , ARGUMENT 9 \"host=\" FIELD 10 \"host=\" LEAF_NODE 11 \"host=\" LEAF_NODE 9 , ARGUMENT 9 str FIELD 10 str LEAF_NODE 11 str LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return ret ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ret EXPR 5 ret FIELD 6 ret LEAF_NODE 7 ret LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 196, "project": "openssl_ast_normal_function_test_162", "target": 0}
{"func": "SIMPLE_DECL 1 struct evp_pkey_asn1_method_st BASE_CLASSES { int pkey_id ; int pkey_base_id ; unsigned long pkey_flags ; char * pem_str ; char * info ; int ( * pub_decode ) ( EVP_PKEY * pk , X509_PUBKEY * pub ) ; int ( * pub_encode ) ( X509_PUBKEY * pub , const EVP_PKEY * pk ) ; int ( * pub_cmp ) ( const EVP_PKEY * a , const EVP_PKEY * b ) ; int ( * pub_print ) ( BIO * out , const EVP_PKEY * pkey , int indent , ASN1_PCTX * pctx ) ; int ( * priv_decode ) ( EVP_PKEY * pk , PKCS8_PRIV_KEY_INFO * p8inf ) ; int ( * priv_encode ) ( PKCS8_PRIV_KEY_INFO * p8 , const EVP_PKEY * pk ) ; int ( * priv_print ) ( BIO * out , const EVP_PKEY * pkey , int indent , ASN1_PCTX * pctx ) ; int ( * pkey_size ) ( const EVP_PKEY * pk ) ; int ( * pkey_bits ) ( const EVP_PKEY * pk ) ; int ( * param_decode ) ( EVP_PKEY * pkey , const unsigned char * * pder , int derlen ) ; int ( * param_encode ) ( const EVP_PKEY * pkey , unsigned char * * pder ) ; int ( * param_missing ) ( const EVP_PKEY * pk ) ; int ( * param_copy ) ( EVP_PKEY * to , const EVP_PKEY * from ) ; int ( * param_cmp ) ( const EVP_PKEY * a , const EVP_PKEY * b ) ; int ( * param_print ) ( BIO * out , const EVP_PKEY * pkey , int indent , ASN1_PCTX * pctx ) ; int ( * sig_print ) ( BIO * out , const X509_ALGOR * sigalg , const ASN1_STRING * sig , int indent , ASN1_PCTX * pctx ) ; void ( * pkey_free ) ( EVP_PKEY * pkey ) ; int ( * pkey_ctrl ) ( EVP_PKEY * pkey , int op , long arg1 , void * arg2 ) ; int ( * old_priv_decode ) ( EVP_PKEY * pkey , const unsigned char * * pder , int derlen ) ; int ( * old_priv_encode ) ( const EVP_PKEY * pkey , unsigned char * * pder ) ; int ( * item_verify ) ( EVP_MD_CTX * ctx , const ASN1_ITEM * it , void * asn , X509_ALGOR * a , ASN1_BIT_STRING * sig , EVP_PKEY * pkey ) ; int ( * item_sign ) ( EVP_MD_CTX * ctx , const ASN1_ITEM * it , void * asn , X509_ALGOR * alg1 , X509_ALGOR * alg2 , ASN1_BIT_STRING * sig ) ; } ; CLASS_DEF 2 struct evp_pkey_asn1_method_st BASE_CLASSES { int pkey_id ; int pkey_base_id ; unsigned long pkey_flags ; char * pem_str ; char * info ; int ( * pub_decode ) ( EVP_PKEY * pk , X509_PUBKEY * pub ) ; int ( * pub_encode ) ( X509_PUBKEY * pub , const EVP_PKEY * pk ) ; int ( * pub_cmp ) ( const EVP_PKEY * a , const EVP_PKEY * b ) ; int ( * pub_print ) ( BIO * out , const EVP_PKEY * pkey , int indent , ASN1_PCTX * pctx ) ; int ( * priv_decode ) ( EVP_PKEY * pk , PKCS8_PRIV_KEY_INFO * p8inf ) ; int ( * priv_encode ) ( PKCS8_PRIV_KEY_INFO * p8 , const EVP_PKEY * pk ) ; int ( * priv_print ) ( BIO * out , const EVP_PKEY * pkey , int indent , ASN1_PCTX * pctx ) ; int ( * pkey_size ) ( const EVP_PKEY * pk ) ; int ( * pkey_bits ) ( const EVP_PKEY * pk ) ; int ( * param_decode ) ( EVP_PKEY * pkey , const unsigned char * * pder , int derlen ) ; int ( * param_encode ) ( const EVP_PKEY * pkey , unsigned char * * pder ) ; int ( * param_missing ) ( const EVP_PKEY * pk ) ; int ( * param_copy ) ( EVP_PKEY * to , const EVP_PKEY * from ) ; int ( * param_cmp ) ( const EVP_PKEY * a , const EVP_PKEY * b ) ; int ( * param_print ) ( BIO * out , const EVP_PKEY * pkey , int indent , ASN1_PCTX * pctx ) ; int ( * sig_print ) ( BIO * out , const X509_ALGOR * sigalg , const ASN1_STRING * sig , int indent , ASN1_PCTX * pctx ) ; void ( * pkey_free ) ( EVP_PKEY * pkey ) ; int ( * pkey_ctrl ) ( EVP_PKEY * pkey , int op , long arg1 , void * arg2 ) ; int ( * old_priv_decode ) ( EVP_PKEY * pkey , const unsigned char * * pder , int derlen ) ; int ( * old_priv_encode ) ( const EVP_PKEY * pkey , unsigned char * * pder ) ; int ( * item_verify ) ( EVP_MD_CTX * ctx , const ASN1_ITEM * it , void * asn , X509_ALGOR * a , ASN1_BIT_STRING * sig , EVP_PKEY * pkey ) ; int ( * item_sign ) ( EVP_MD_CTX * ctx , const ASN1_ITEM * it , void * asn , X509_ALGOR * alg1 , X509_ALGOR * alg2 , ASN1_BIT_STRING * sig ) ; } CLASS_DEF 3 struct evp_pkey_asn1_method_st BASE_CLASSES { int pkey_id ; int pkey_base_id ; unsigned long pkey_flags ; char * pem_str ; char * info ; int ( * pub_decode ) ( EVP_PKEY * pk , X509_PUBKEY * pub ) ; int ( * pub_encode ) ( X509_PUBKEY * pub , const EVP_PKEY * pk ) ; int ( * pub_cmp ) ( const EVP_PKEY * a , const EVP_PKEY * b ) ; int ( * pub_print ) ( BIO * out , const EVP_PKEY * pkey , int indent , ASN1_PCTX * pctx ) ; int ( * priv_decode ) ( EVP_PKEY * pk , PKCS8_PRIV_KEY_INFO * p8inf ) ; int ( * priv_encode ) ( PKCS8_PRIV_KEY_INFO * p8 , const EVP_PKEY * pk ) ; int ( * priv_print ) ( BIO * out , const EVP_PKEY * pkey , int indent , ASN1_PCTX * pctx ) ; int ( * pkey_size ) ( const EVP_PKEY * pk ) ; int ( * pkey_bits ) ( const EVP_PKEY * pk ) ; int ( * param_decode ) ( EVP_PKEY * pkey , const unsigned char * * pder , int derlen ) ; int ( * param_encode ) ( const EVP_PKEY * pkey , unsigned char * * pder ) ; int ( * param_missing ) ( const EVP_PKEY * pk ) ; int ( * param_copy ) ( EVP_PKEY * to , const EVP_PKEY * from ) ; int ( * param_cmp ) ( const EVP_PKEY * a , const EVP_PKEY * b ) ; int ( * param_print ) ( BIO * out , const EVP_PKEY * pkey , int indent , ASN1_PCTX * pctx ) ; int ( * sig_print ) ( BIO * out , const X509_ALGOR * sigalg , const ASN1_STRING * sig , int indent , ASN1_PCTX * pctx ) ; void ( * pkey_free ) ( EVP_PKEY * pkey ) ; int ( * pkey_ctrl ) ( EVP_PKEY * pkey , int op , long arg1 , void * arg2 ) ; int ( * old_priv_decode ) ( EVP_PKEY * pkey , const unsigned char * * pder , int derlen ) ; int ( * old_priv_encode ) ( const EVP_PKEY * pkey , unsigned char * * pder ) ; int ( * item_verify ) ( EVP_MD_CTX * ctx , const ASN1_ITEM * it , void * asn , X509_ALGOR * a , ASN1_BIT_STRING * sig , EVP_PKEY * pkey ) ; int ( * item_sign ) ( EVP_MD_CTX * ctx , const ASN1_ITEM * it , void * asn , X509_ALGOR * alg1 , X509_ALGOR * alg2 , ASN1_BIT_STRING * sig ) ; } LEAF_NODE 4 struct CLASS_NAME 4 evp_pkey_asn1_method_st LEAF_NODE 5 evp_pkey_asn1_method_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int pkey_id ; int pkey_base_id ; unsigned long pkey_flags ; char * pem_str ; char * info ; int ( * pub_decode ) ( EVP_PKEY * pk , X509_PUBKEY * pub ) ; int ( * pub_encode ) ( X509_PUBKEY * pub , const EVP_PKEY * pk ) ; int ( * pub_cmp ) ( const EVP_PKEY * a , const EVP_PKEY * b ) ; int ( * pub_print ) ( BIO * out , const EVP_PKEY * pkey , int indent , ASN1_PCTX * pctx ) ; int ( * priv_decode ) ( EVP_PKEY * pk , PKCS8_PRIV_KEY_INFO * p8inf ) ; int ( * priv_encode ) ( PKCS8_PRIV_KEY_INFO * p8 , const EVP_PKEY * pk ) ; int ( * priv_print ) ( BIO * out , const EVP_PKEY * pkey , int indent , ASN1_PCTX * pctx ) ; int ( * pkey_size ) ( const EVP_PKEY * pk ) ; int ( * pkey_bits ) ( const EVP_PKEY * pk ) ; int ( * param_decode ) ( EVP_PKEY * pkey , const unsigned char * * pder , int derlen ) ; int ( * param_encode ) ( const EVP_PKEY * pkey , unsigned char * * pder ) ; int ( * param_missing ) ( const EVP_PKEY * pk ) ; int ( * param_copy ) ( EVP_PKEY * to , const EVP_PKEY * from ) ; int ( * param_cmp ) ( const EVP_PKEY * a , const EVP_PKEY * b ) ; int ( * param_print ) ( BIO * out , const EVP_PKEY * pkey , int indent , ASN1_PCTX * pctx ) ; int ( * sig_print ) ( BIO * out , const X509_ALGOR * sigalg , const ASN1_STRING * sig , int indent , ASN1_PCTX * pctx ) ; void ( * pkey_free ) ( EVP_PKEY * pkey ) ; int ( * pkey_ctrl ) ( EVP_PKEY * pkey , int op , long arg1 , void * arg2 ) ; int ( * old_priv_decode ) ( EVP_PKEY * pkey , const unsigned char * * pder , int derlen ) ; int ( * old_priv_encode ) ( const EVP_PKEY * pkey , unsigned char * * pder ) ; int ( * item_verify ) ( EVP_MD_CTX * ctx , const ASN1_ITEM * it , void * asn , X509_ALGOR * a , ASN1_BIT_STRING * sig , EVP_PKEY * pkey ) ; int ( * item_sign ) ( EVP_MD_CTX * ctx , const ASN1_ITEM * it , void * asn , X509_ALGOR * alg1 , X509_ALGOR * alg2 , ASN1_BIT_STRING * sig ) ; SIMPLE_DECL 5 int pkey_id ; VAR_DECL 6 int pkey_id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 pkey_id LEAF_NODE 8 pkey_id LEAF_NODE 6 ; SIMPLE_DECL 5 int pkey_base_id ; VAR_DECL 6 int pkey_base_id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 pkey_base_id LEAF_NODE 8 pkey_base_id LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long pkey_flags ; VAR_DECL 6 unsigned long pkey_flags TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 pkey_flags LEAF_NODE 8 pkey_flags LEAF_NODE 6 ; SIMPLE_DECL 5 char * pem_str ; VAR_DECL 6 char * pem_str TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 pem_str LEAF_NODE 8 pem_str LEAF_NODE 6 ; SIMPLE_DECL 5 char * info ; VAR_DECL 6 char * info TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 info LEAF_NODE 8 info LEAF_NODE 6 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 pub_decode LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 pk LEAF_NODE 5 , LEAF_NODE 5 X509_PUBKEY LEAF_NODE 5 * LEAF_NODE 5 pub LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 pub_encode LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 X509_PUBKEY LEAF_NODE 5 * LEAF_NODE 5 pub LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 pk LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 pub_cmp LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 const LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 a LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 b LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 pub_print LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 BIO LEAF_NODE 5 * LEAF_NODE 5 out LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 pkey LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 indent LEAF_NODE 5 , LEAF_NODE 5 ASN1_PCTX LEAF_NODE 5 * LEAF_NODE 5 pctx LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 priv_decode LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 pk LEAF_NODE 5 , LEAF_NODE 5 PKCS8_PRIV_KEY_INFO LEAF_NODE 5 * LEAF_NODE 5 p8inf LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 priv_encode LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 PKCS8_PRIV_KEY_INFO LEAF_NODE 5 * LEAF_NODE 5 p8 LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 pk LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 priv_print LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 BIO LEAF_NODE 5 * LEAF_NODE 5 out LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 pkey LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 indent LEAF_NODE 5 , LEAF_NODE 5 ASN1_PCTX LEAF_NODE 5 * LEAF_NODE 5 pctx LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 pkey_size LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 const LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 pk LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 pkey_bits LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 const LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 pk LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 param_decode LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 pkey LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 * LEAF_NODE 5 pder LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 derlen LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 param_encode LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 const LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 pkey LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 * LEAF_NODE 5 pder LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 param_missing LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 const LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 pk LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 param_copy LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 to LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 from LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 param_cmp LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 const LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 a LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 b LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 param_print LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 BIO LEAF_NODE 5 * LEAF_NODE 5 out LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 pkey LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 indent LEAF_NODE 5 , LEAF_NODE 5 ASN1_PCTX LEAF_NODE 5 * LEAF_NODE 5 pctx LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 sig_print LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 BIO LEAF_NODE 5 * LEAF_NODE 5 out LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 X509_ALGOR LEAF_NODE 5 * LEAF_NODE 5 sigalg LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 ASN1_STRING LEAF_NODE 5 * LEAF_NODE 5 sig LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 indent LEAF_NODE 5 , LEAF_NODE 5 ASN1_PCTX LEAF_NODE 5 * LEAF_NODE 5 pctx LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 void LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 pkey_free LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 pkey LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 pkey_ctrl LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 pkey LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 op LEAF_NODE 5 , LEAF_NODE 5 long LEAF_NODE 5 arg1 LEAF_NODE 5 , LEAF_NODE 5 void LEAF_NODE 5 * LEAF_NODE 5 arg2 LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 old_priv_decode LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 pkey LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 * LEAF_NODE 5 pder LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 derlen LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 old_priv_encode LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 const LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 pkey LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 * LEAF_NODE 5 pder LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 item_verify LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 EVP_MD_CTX LEAF_NODE 5 * LEAF_NODE 5 ctx LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 ASN1_ITEM LEAF_NODE 5 * LEAF_NODE 5 it LEAF_NODE 5 , LEAF_NODE 5 void LEAF_NODE 5 * LEAF_NODE 5 asn LEAF_NODE 5 , LEAF_NODE 5 X509_ALGOR LEAF_NODE 5 * LEAF_NODE 5 a LEAF_NODE 5 , LEAF_NODE 5 ASN1_BIT_STRING LEAF_NODE 5 * LEAF_NODE 5 sig LEAF_NODE 5 , LEAF_NODE 5 EVP_PKEY LEAF_NODE 5 * LEAF_NODE 5 pkey LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 item_sign LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 EVP_MD_CTX LEAF_NODE 5 * LEAF_NODE 5 ctx LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 ASN1_ITEM LEAF_NODE 5 * LEAF_NODE 5 it LEAF_NODE 5 , LEAF_NODE 5 void LEAF_NODE 5 * LEAF_NODE 5 asn LEAF_NODE 5 , LEAF_NODE 5 X509_ALGOR LEAF_NODE 5 * LEAF_NODE 5 alg1 LEAF_NODE 5 , LEAF_NODE 5 X509_ALGOR LEAF_NODE 5 * LEAF_NODE 5 alg2 LEAF_NODE 5 , LEAF_NODE 5 ASN1_BIT_STRING LEAF_NODE 5 * LEAF_NODE 5 sig LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_item_sign_ctx LEAF_NODE 3 ASN1_item_sign_ctx PARAMETER_LIST 2 ( const ASN1_ITEM * it , X509_ALGOR * algor1 , X509_ALGOR * algor2 , ASN1_BIT_STRING * signature , void * asn , EVP_MD_CTX * ctx ) LEAF_NODE 3 ( PARAMETER_DECL 3 const ASN1_ITEM * it TYPE 4 const ASN1_ITEM * TYPE_NAME 5 const ASN1_ITEM LEAF_NODE 6 const LEAF_NODE 6 ASN1_ITEM POINTER 5 * LEAF_NODE 6 * NAME 4 it LEAF_NODE 5 it LEAF_NODE 3 , PARAMETER_DECL 3 X509_ALGOR * algor1 TYPE 4 X509_ALGOR * TYPE_NAME 5 X509_ALGOR LEAF_NODE 6 X509_ALGOR POINTER 5 * LEAF_NODE 6 * NAME 4 algor1 LEAF_NODE 5 algor1 LEAF_NODE 3 , PARAMETER_DECL 3 X509_ALGOR * algor2 TYPE 4 X509_ALGOR * TYPE_NAME 5 X509_ALGOR LEAF_NODE 6 X509_ALGOR POINTER 5 * LEAF_NODE 6 * NAME 4 algor2 LEAF_NODE 5 algor2 LEAF_NODE 3 , PARAMETER_DECL 3 ASN1_BIT_STRING * signature TYPE 4 ASN1_BIT_STRING * TYPE_NAME 5 ASN1_BIT_STRING LEAF_NODE 6 ASN1_BIT_STRING POINTER 5 * LEAF_NODE 6 * NAME 4 signature LEAF_NODE 5 signature LEAF_NODE 3 , PARAMETER_DECL 3 void * asn TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 asn LEAF_NODE 5 asn LEAF_NODE 3 , PARAMETER_DECL 3 EVP_MD_CTX * ctx TYPE 4 EVP_MD_CTX * TYPE_NAME 5 EVP_MD_CTX LEAF_NODE 6 EVP_MD_CTX POINTER 5 * LEAF_NODE 6 * NAME 4 ctx LEAF_NODE 5 ctx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 const EVP_MD * type ; VAR_DECL 4 const EVP_MD * type TYPE 5 const EVP_MD * TYPE_NAME 6 const EVP_MD LEAF_NODE 7 const LEAF_NODE 7 EVP_MD POINTER 6 * LEAF_NODE 7 * NAME 5 type LEAF_NODE 6 type LEAF_NODE 4 ; SIMPLE_DECL 3 EVP_PKEY * pkey ; VAR_DECL 4 EVP_PKEY * pkey TYPE 5 EVP_PKEY * TYPE_NAME 6 EVP_PKEY LEAF_NODE 7 EVP_PKEY POINTER 6 * LEAF_NODE 7 * NAME 5 pkey LEAF_NODE 6 pkey LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * buf_in ; buf_in = NULL , unsigned char * buf_out ; buf_out = NULL ; INIT_DECL_LIST 4 unsigned char * buf_in ; buf_in = NULL , unsigned char * buf_out ; buf_out = NULL VAR_DECL 5 unsigned char * buf_in ; buf_in = NULL TYPE 6 unsigned char * TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 buf_in LEAF_NODE 7 buf_in LEAF_NODE 6 ; INIT 6 buf_in = NULL ASSIGN 7 buf_in = NULL LVAL 8 buf_in NAME 9 buf_in LEAF_NODE 10 buf_in ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 5 , VAR_DECL 5 unsigned char * buf_out ; buf_out = NULL TYPE 6 unsigned char * TYPE_NAME 7 unsigned char LEAF_NODE 8 unsigned LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 buf_out LEAF_NODE 7 buf_out LEAF_NODE 6 ; INIT 6 buf_out = NULL ASSIGN 7 buf_out = NULL LVAL 8 buf_out NAME 9 buf_out LEAF_NODE 10 buf_out ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 size_t inl ; inl = 0 , size_t outl ; outl = 0 , size_t outll ; outll = 0 ; INIT_DECL_LIST 4 size_t inl ; inl = 0 , size_t outl ; outl = 0 , size_t outll ; outll = 0 VAR_DECL 5 size_t inl ; inl = 0 TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 inl LEAF_NODE 7 inl LEAF_NODE 6 ; INIT 6 inl = 0 ASSIGN 7 inl = 0 LVAL 8 inl NAME 9 inl LEAF_NODE 10 inl ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 5 , INIT_DECL_LIST 5 size_t outl ; outl = 0 , size_t outll ; outll = 0 VAR_DECL 6 size_t outl ; outl = 0 TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 outl LEAF_NODE 8 outl LEAF_NODE 7 ; INIT 7 outl = 0 ASSIGN 8 outl = 0 LVAL 9 outl NAME 10 outl LEAF_NODE 11 outl ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 6 , VAR_DECL 6 size_t outll ; outll = 0 TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 outll LEAF_NODE 8 outll LEAF_NODE 7 ; INIT 7 outll = 0 ASSIGN 8 outll = 0 LVAL 9 outll NAME 10 outll LEAF_NODE 11 outll ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int signid , int paramtype ; INIT_DECL_LIST 4 int signid , int paramtype VAR_DECL 5 int signid TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 signid LEAF_NODE 7 signid LEAF_NODE 5 , VAR_DECL 5 int paramtype TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 paramtype LEAF_NODE 7 paramtype LEAF_NODE 4 ; SIMPLE_DECL 3 int rv ; VAR_DECL 4 int rv TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 rv LEAF_NODE 6 rv LEAF_NODE 4 ; EXPR_STATEMENT 3 type = EVP_MD_CTX_md ( ctx ) ; EXPR 4 type = EVP_MD_CTX_md ( ctx ) ASSIGN 5 type = EVP_MD_CTX_md ( ctx ) LVAL 6 type FIELD 7 type LEAF_NODE 8 type ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 EVP_MD_CTX_md ( ctx ) FUNCTION_CALL 7 EVP_MD_CTX_md ( ctx ) CALLEE 8 EVP_MD_CTX_md LEAF_NODE 9 EVP_MD_CTX_md LEAF_NODE 8 ( ARGUMENT 8 ctx FIELD 9 ctx LEAF_NODE 10 ctx LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 pkey = EVP_PKEY_CTX_get0_pkey ( EVP_MD_CTX_pkey_ctx ( ctx ) ) ; EXPR 4 pkey = EVP_PKEY_CTX_get0_pkey ( EVP_MD_CTX_pkey_ctx ( ctx ) ) ASSIGN 5 pkey = EVP_PKEY_CTX_get0_pkey ( EVP_MD_CTX_pkey_ctx ( ctx ) ) LVAL 6 pkey FIELD 7 pkey LEAF_NODE 8 pkey ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 EVP_PKEY_CTX_get0_pkey ( EVP_MD_CTX_pkey_ctx ( ctx ) ) FUNCTION_CALL 7 EVP_PKEY_CTX_get0_pkey ( EVP_MD_CTX_pkey_ctx ( ctx ) ) CALLEE 8 EVP_PKEY_CTX_get0_pkey LEAF_NODE 9 EVP_PKEY_CTX_get0_pkey LEAF_NODE 8 ( ARGUMENT 8 EVP_MD_CTX_pkey_ctx ( ctx ) FUNCTION_CALL 9 EVP_MD_CTX_pkey_ctx ( ctx ) CALLEE 10 EVP_MD_CTX_pkey_ctx LEAF_NODE 11 EVP_MD_CTX_pkey_ctx LEAF_NODE 10 ( ARGUMENT 10 ctx FIELD 11 ctx LEAF_NODE 12 ctx LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 pkey == NULL EXPR 5 pkey == NULL FIELD 6 pkey LEAF_NODE 7 pkey EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ASN1_R_CONTEXT_NOT_INITIALISED ) ; EXPR 7 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ASN1_R_CONTEXT_NOT_INITIALISED ) FUNCTION_CALL 8 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ASN1_R_CONTEXT_NOT_INITIALISED ) CALLEE 9 ASN1err LEAF_NODE 10 ASN1err LEAF_NODE 9 ( ARGUMENT 9 ASN1_F_ASN1_ITEM_SIGN_CTX FIELD 10 ASN1_F_ASN1_ITEM_SIGN_CTX LEAF_NODE 11 ASN1_F_ASN1_ITEM_SIGN_CTX LEAF_NODE 9 , ARGUMENT 9 ASN1_R_CONTEXT_NOT_INITIALISED FIELD 10 ASN1_R_CONTEXT_NOT_INITIALISED LEAF_NODE 11 ASN1_R_CONTEXT_NOT_INITIALISED LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 pkey -> ameth == NULL EXPR 5 pkey -> ameth == NULL FIELD 6 pkey -> ameth LEAF_NODE 7 pkey LEAF_NODE 7 -> LEAF_NODE 7 ameth EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED ) ; EXPR 7 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED ) FUNCTION_CALL 8 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED ) CALLEE 9 ASN1err LEAF_NODE 10 ASN1err LEAF_NODE 9 ( ARGUMENT 9 ASN1_F_ASN1_ITEM_SIGN_CTX FIELD 10 ASN1_F_ASN1_ITEM_SIGN_CTX LEAF_NODE 11 ASN1_F_ASN1_ITEM_SIGN_CTX LEAF_NODE 9 , ARGUMENT 9 ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED FIELD 10 ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED LEAF_NODE 11 ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 pkey -> ameth -> item_sign EXPR 5 pkey -> ameth -> item_sign FIELD 6 pkey -> ameth -> item_sign LEAF_NODE 7 pkey LEAF_NODE 7 -> LEAF_NODE 7 ameth LEAF_NODE 7 -> LEAF_NODE 7 item_sign LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 rv = pkey -> ameth -> item_sign ( ctx , it , asn , algor1 , algor2 , signature ) ; EXPR 7 rv = pkey -> ameth -> item_sign ( ctx , it , asn , algor1 , algor2 , signature ) ASSIGN 8 rv = pkey -> ameth -> item_sign ( ctx , it , asn , algor1 , algor2 , signature ) LVAL 9 rv FIELD 10 rv LEAF_NODE 11 rv ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 pkey -> ameth -> item_sign ( ctx , it , asn , algor1 , algor2 , signature ) FUNCTION_CALL 10 pkey -> ameth -> item_sign ( ctx , it , asn , algor1 , algor2 , signature ) CALLEE 11 pkey -> ameth -> item_sign LEAF_NODE 12 pkey LEAF_NODE 12 -> LEAF_NODE 12 ameth LEAF_NODE 12 -> LEAF_NODE 12 item_sign LEAF_NODE 11 ( ARGUMENT 11 ctx FIELD 12 ctx LEAF_NODE 13 ctx LEAF_NODE 11 , ARGUMENT 11 it FIELD 12 it LEAF_NODE 13 it LEAF_NODE 11 , ARGUMENT 11 asn FIELD 12 asn LEAF_NODE 13 asn LEAF_NODE 11 , ARGUMENT 11 algor1 FIELD 12 algor1 LEAF_NODE 13 algor1 LEAF_NODE 11 , ARGUMENT 11 algor2 FIELD 12 algor2 LEAF_NODE 13 algor2 LEAF_NODE 11 , ARGUMENT 11 signature FIELD 12 signature LEAF_NODE 13 signature LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 rv == 1 EXPR 8 rv == 1 FIELD 9 rv LEAF_NODE 10 rv EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 outl = signature -> length ; EXPR 9 outl = signature -> length ASSIGN 10 outl = signature -> length LVAL 11 outl FIELD 12 outl LEAF_NODE 13 outl ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 signature -> length FIELD 12 signature -> length LEAF_NODE 13 signature LEAF_NODE 13 -> LEAF_NODE 13 length LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 rv <= 0 EXPR 8 rv <= 0 FIELD 9 rv LEAF_NODE 10 rv REL_OPERATOR 9 <= LEAF_NODE 10 <= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ERR_R_EVP_LIB ) ; EXPR 9 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ERR_R_EVP_LIB ) FUNCTION_CALL 10 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ERR_R_EVP_LIB ) CALLEE 11 ASN1err LEAF_NODE 12 ASN1err LEAF_NODE 11 ( ARGUMENT 11 ASN1_F_ASN1_ITEM_SIGN_CTX FIELD 12 ASN1_F_ASN1_ITEM_SIGN_CTX LEAF_NODE 13 ASN1_F_ASN1_ITEM_SIGN_CTX LEAF_NODE 11 , ARGUMENT 11 ERR_R_EVP_LIB FIELD 12 ERR_R_EVP_LIB LEAF_NODE 13 ERR_R_EVP_LIB LEAF_NODE 11 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 rv <= 1 EXPR 8 rv <= 1 FIELD 9 rv LEAF_NODE 10 rv REL_OPERATOR 9 <= LEAF_NODE 10 <= FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 goto err ; KEYWORD 9 goto LEAF_NODE 10 goto DESTINATION 9 err LEAF_NODE 10 err LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 rv = 2 ; EXPR 7 rv = 2 ASSIGN 8 rv = 2 LVAL 9 rv FIELD 10 rv LEAF_NODE 11 rv ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 rv == 2 EXPR 5 rv == 2 FIELD 6 rv LEAF_NODE 7 rv EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 2 LEAF_NODE 7 2 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 type == NULL EXPR 8 type == NULL FIELD 9 type LEAF_NODE 10 type EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ASN1_R_CONTEXT_NOT_INITIALISED ) ; EXPR 10 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ASN1_R_CONTEXT_NOT_INITIALISED ) FUNCTION_CALL 11 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ASN1_R_CONTEXT_NOT_INITIALISED ) CALLEE 12 ASN1err LEAF_NODE 13 ASN1err LEAF_NODE 12 ( ARGUMENT 12 ASN1_F_ASN1_ITEM_SIGN_CTX FIELD 13 ASN1_F_ASN1_ITEM_SIGN_CTX LEAF_NODE 14 ASN1_F_ASN1_ITEM_SIGN_CTX LEAF_NODE 12 , ARGUMENT 12 ASN1_R_CONTEXT_NOT_INITIALISED FIELD 13 ASN1_R_CONTEXT_NOT_INITIALISED LEAF_NODE 14 ASN1_R_CONTEXT_NOT_INITIALISED LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 err LEAF_NODE 11 err LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! OBJ_find_sigid_by_algs ( & signid , EVP_MD_nid ( type ) , pkey -> ameth -> pkey_id ) EXPR 8 ! OBJ_find_sigid_by_algs ( & signid , EVP_MD_nid ( type ) , pkey -> ameth -> pkey_id ) UNARY_EXPR 9 ! OBJ_find_sigid_by_algs ( & signid , EVP_MD_nid ( type ) , pkey -> ameth -> pkey_id ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 OBJ_find_sigid_by_algs ( & signid , EVP_MD_nid ( type ) , pkey -> ameth -> pkey_id ) CALLEE 11 OBJ_find_sigid_by_algs LEAF_NODE 12 OBJ_find_sigid_by_algs LEAF_NODE 11 ( ARGUMENT 11 & signid UNARY_EXPR 12 & signid UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 signid LEAF_NODE 14 signid LEAF_NODE 11 , ARGUMENT 11 EVP_MD_nid ( type ) FUNCTION_CALL 12 EVP_MD_nid ( type ) CALLEE 13 EVP_MD_nid LEAF_NODE 14 EVP_MD_nid LEAF_NODE 13 ( ARGUMENT 13 type FIELD 14 type LEAF_NODE 15 type LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 pkey -> ameth -> pkey_id FIELD 12 pkey -> ameth -> pkey_id LEAF_NODE 13 pkey LEAF_NODE 13 -> LEAF_NODE 13 ameth LEAF_NODE 13 -> LEAF_NODE 13 pkey_id LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED ) ; EXPR 10 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED ) FUNCTION_CALL 11 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED ) CALLEE 12 ASN1err LEAF_NODE 13 ASN1err LEAF_NODE 12 ( ARGUMENT 12 ASN1_F_ASN1_ITEM_SIGN_CTX FIELD 13 ASN1_F_ASN1_ITEM_SIGN_CTX LEAF_NODE 14 ASN1_F_ASN1_ITEM_SIGN_CTX LEAF_NODE 12 , ARGUMENT 12 ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED FIELD 13 ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED LEAF_NODE 14 ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 goto err ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 err LEAF_NODE 11 err LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 pkey -> ameth -> pkey_flags & ASN1_PKEY_SIGPARAM_NULL EXPR 8 pkey -> ameth -> pkey_flags & ASN1_PKEY_SIGPARAM_NULL FIELD 9 pkey -> ameth -> pkey_flags LEAF_NODE 10 pkey LEAF_NODE 10 -> LEAF_NODE 10 ameth LEAF_NODE 10 -> LEAF_NODE 10 pkey_flags LEAF_NODE 9 & FIELD 9 ASN1_PKEY_SIGPARAM_NULL LEAF_NODE 10 ASN1_PKEY_SIGPARAM_NULL LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 paramtype = V_ASN1_NULL ; EXPR 9 paramtype = V_ASN1_NULL ASSIGN 10 paramtype = V_ASN1_NULL LVAL 11 paramtype FIELD 12 paramtype LEAF_NODE 13 paramtype ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 V_ASN1_NULL FIELD 12 V_ASN1_NULL LEAF_NODE 13 V_ASN1_NULL LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 EXPR_STATEMENT 8 paramtype = V_ASN1_UNDEF ; EXPR 9 paramtype = V_ASN1_UNDEF ASSIGN 10 paramtype = V_ASN1_UNDEF LVAL 11 paramtype FIELD 12 paramtype LEAF_NODE 13 paramtype ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 V_ASN1_UNDEF FIELD 12 V_ASN1_UNDEF LEAF_NODE 13 V_ASN1_UNDEF LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 algor1 EXPR 8 algor1 FIELD 9 algor1 LEAF_NODE 10 algor1 LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 X509_ALGOR_set0 ( algor1 , OBJ_nid2obj ( signid ) , paramtype , NULL ) ; EXPR 9 X509_ALGOR_set0 ( algor1 , OBJ_nid2obj ( signid ) , paramtype , NULL ) FUNCTION_CALL 10 X509_ALGOR_set0 ( algor1 , OBJ_nid2obj ( signid ) , paramtype , NULL ) CALLEE 11 X509_ALGOR_set0 LEAF_NODE 12 X509_ALGOR_set0 LEAF_NODE 11 ( ARGUMENT 11 algor1 FIELD 12 algor1 LEAF_NODE 13 algor1 LEAF_NODE 11 , ARGUMENT 11 OBJ_nid2obj ( signid ) FUNCTION_CALL 12 OBJ_nid2obj ( signid ) CALLEE 13 OBJ_nid2obj LEAF_NODE 14 OBJ_nid2obj LEAF_NODE 13 ( ARGUMENT 13 signid FIELD 14 signid LEAF_NODE 15 signid LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 paramtype FIELD 12 paramtype LEAF_NODE 13 paramtype LEAF_NODE 11 , ARGUMENT 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 11 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 algor2 EXPR 8 algor2 FIELD 9 algor2 LEAF_NODE 10 algor2 LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 X509_ALGOR_set0 ( algor2 , OBJ_nid2obj ( signid ) , paramtype , NULL ) ; EXPR 9 X509_ALGOR_set0 ( algor2 , OBJ_nid2obj ( signid ) , paramtype , NULL ) FUNCTION_CALL 10 X509_ALGOR_set0 ( algor2 , OBJ_nid2obj ( signid ) , paramtype , NULL ) CALLEE 11 X509_ALGOR_set0 LEAF_NODE 12 X509_ALGOR_set0 LEAF_NODE 11 ( ARGUMENT 11 algor2 FIELD 12 algor2 LEAF_NODE 13 algor2 LEAF_NODE 11 , ARGUMENT 11 OBJ_nid2obj ( signid ) FUNCTION_CALL 12 OBJ_nid2obj ( signid ) CALLEE 13 OBJ_nid2obj LEAF_NODE 14 OBJ_nid2obj LEAF_NODE 13 ( ARGUMENT 13 signid FIELD 14 signid LEAF_NODE 15 signid LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 paramtype FIELD 12 paramtype LEAF_NODE 13 paramtype LEAF_NODE 11 , ARGUMENT 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 5 } EXPR_STATEMENT 3 inl = ASN1_item_i2d ( asn , & buf_in , it ) ; EXPR 4 inl = ASN1_item_i2d ( asn , & buf_in , it ) ASSIGN 5 inl = ASN1_item_i2d ( asn , & buf_in , it ) LVAL 6 inl FIELD 7 inl LEAF_NODE 8 inl ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ASN1_item_i2d ( asn , & buf_in , it ) FUNCTION_CALL 7 ASN1_item_i2d ( asn , & buf_in , it ) CALLEE 8 ASN1_item_i2d LEAF_NODE 9 ASN1_item_i2d LEAF_NODE 8 ( ARGUMENT 8 asn FIELD 9 asn LEAF_NODE 10 asn LEAF_NODE 8 , ARGUMENT 8 & buf_in UNARY_EXPR 9 & buf_in UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 buf_in LEAF_NODE 11 buf_in LEAF_NODE 8 , ARGUMENT 8 it FIELD 9 it LEAF_NODE 10 it LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 outll = outl = EVP_PKEY_size ( pkey ) ; EXPR 4 outll = outl = EVP_PKEY_size ( pkey ) ASSIGN 5 outll = outl = EVP_PKEY_size ( pkey ) LVAL 6 outll FIELD 7 outll LEAF_NODE 8 outll ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 outl = EVP_PKEY_size ( pkey ) ASSIGN 7 outl = EVP_PKEY_size ( pkey ) LVAL 8 outl FIELD 9 outl LEAF_NODE 10 outl ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 EVP_PKEY_size ( pkey ) FUNCTION_CALL 9 EVP_PKEY_size ( pkey ) CALLEE 10 EVP_PKEY_size LEAF_NODE 11 EVP_PKEY_size LEAF_NODE 10 ( ARGUMENT 10 pkey FIELD 11 pkey LEAF_NODE 12 pkey LEAF_NODE 10 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 buf_out = OPENSSL_malloc ( ( unsigned int ) outl ) ; EXPR 4 buf_out = OPENSSL_malloc ( ( unsigned int ) outl ) ASSIGN 5 buf_out = OPENSSL_malloc ( ( unsigned int ) outl ) LVAL 6 buf_out FIELD 7 buf_out LEAF_NODE 8 buf_out ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 OPENSSL_malloc ( ( unsigned int ) outl ) FUNCTION_CALL 7 OPENSSL_malloc ( ( unsigned int ) outl ) CALLEE 8 OPENSSL_malloc LEAF_NODE 9 OPENSSL_malloc LEAF_NODE 8 ( ARGUMENT 8 ( unsigned int ) outl LEAF_NODE 9 ( TYPE_NAME 9 unsigned int LEAF_NODE 10 unsigned LEAF_NODE 10 int LEAF_NODE 9 ) FIELD 9 outl LEAF_NODE 10 outl LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( buf_in == NULL ) || ( buf_out == NULL ) EXPR 5 ( buf_in == NULL ) || ( buf_out == NULL ) OR 6 ( buf_in == NULL ) || ( buf_out == NULL ) EXPR 7 ( buf_in == NULL ) LEAF_NODE 8 ( FIELD 8 buf_in LEAF_NODE 9 buf_in EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 8 ) LEAF_NODE 7 || EXPR 7 ( buf_out == NULL ) LEAF_NODE 8 ( FIELD 8 buf_out LEAF_NODE 9 buf_out EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 outl = 0 ; EXPR 7 outl = 0 ASSIGN 8 outl = 0 LVAL 9 outl FIELD 10 outl LEAF_NODE 11 outl ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; EXPR_STATEMENT 6 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ERR_R_MALLOC_FAILURE ) ; EXPR 7 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ERR_R_MALLOC_FAILURE ) FUNCTION_CALL 8 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ERR_R_MALLOC_FAILURE ) CALLEE 9 ASN1err LEAF_NODE 10 ASN1err LEAF_NODE 9 ( ARGUMENT 9 ASN1_F_ASN1_ITEM_SIGN_CTX FIELD 10 ASN1_F_ASN1_ITEM_SIGN_CTX LEAF_NODE 11 ASN1_F_ASN1_ITEM_SIGN_CTX LEAF_NODE 9 , ARGUMENT 9 ERR_R_MALLOC_FAILURE FIELD 10 ERR_R_MALLOC_FAILURE LEAF_NODE 11 ERR_R_MALLOC_FAILURE LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! EVP_DigestSign ( ctx , buf_out , & outl , buf_in , inl ) EXPR 5 ! EVP_DigestSign ( ctx , buf_out , & outl , buf_in , inl ) UNARY_EXPR 6 ! EVP_DigestSign ( ctx , buf_out , & outl , buf_in , inl ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 EVP_DigestSign ( ctx , buf_out , & outl , buf_in , inl ) CALLEE 8 EVP_DigestSign LEAF_NODE 9 EVP_DigestSign LEAF_NODE 8 ( ARGUMENT 8 ctx FIELD 9 ctx LEAF_NODE 10 ctx LEAF_NODE 8 , ARGUMENT 8 buf_out FIELD 9 buf_out LEAF_NODE 10 buf_out LEAF_NODE 8 , ARGUMENT 8 & outl UNARY_EXPR 9 & outl UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 outl LEAF_NODE 11 outl LEAF_NODE 8 , ARGUMENT 8 buf_in FIELD 9 buf_in LEAF_NODE 10 buf_in LEAF_NODE 8 , ARGUMENT 8 inl FIELD 9 inl LEAF_NODE 10 inl LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 outl = 0 ; EXPR 7 outl = 0 ASSIGN 8 outl = 0 LVAL 9 outl FIELD 10 outl LEAF_NODE 11 outl ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; EXPR_STATEMENT 6 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ERR_R_EVP_LIB ) ; EXPR 7 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ERR_R_EVP_LIB ) FUNCTION_CALL 8 ASN1err ( ASN1_F_ASN1_ITEM_SIGN_CTX , ERR_R_EVP_LIB ) CALLEE 9 ASN1err LEAF_NODE 10 ASN1err LEAF_NODE 9 ( ARGUMENT 9 ASN1_F_ASN1_ITEM_SIGN_CTX FIELD 10 ASN1_F_ASN1_ITEM_SIGN_CTX LEAF_NODE 11 ASN1_F_ASN1_ITEM_SIGN_CTX LEAF_NODE 9 , ARGUMENT 9 ERR_R_EVP_LIB FIELD 10 ERR_R_EVP_LIB LEAF_NODE 11 ERR_R_EVP_LIB LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 OPENSSL_free ( signature -> data ) ; EXPR 4 OPENSSL_free ( signature -> data ) FUNCTION_CALL 5 OPENSSL_free ( signature -> data ) CALLEE 6 OPENSSL_free LEAF_NODE 7 OPENSSL_free LEAF_NODE 6 ( ARGUMENT 6 signature -> data FIELD 7 signature -> data LEAF_NODE 8 signature LEAF_NODE 8 -> LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 signature -> data = buf_out ; EXPR 4 signature -> data = buf_out ASSIGN 5 signature -> data = buf_out LVAL 6 signature -> data FIELD 7 signature -> data LEAF_NODE 8 signature LEAF_NODE 8 -> LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 buf_out FIELD 7 buf_out LEAF_NODE 8 buf_out LEAF_NODE 4 ; EXPR_STATEMENT 3 buf_out = NULL ; EXPR 4 buf_out = NULL ASSIGN 5 buf_out = NULL LVAL 6 buf_out FIELD 7 buf_out LEAF_NODE 8 buf_out ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; EXPR_STATEMENT 3 signature -> length = outl ; EXPR 4 signature -> length = outl ASSIGN 5 signature -> length = outl LVAL 6 signature -> length FIELD 7 signature -> length LEAF_NODE 8 signature LEAF_NODE 8 -> LEAF_NODE 8 length ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 outl FIELD 7 outl LEAF_NODE 8 outl LEAF_NODE 4 ; EXPR_STATEMENT 3 signature -> flags &= ~ ( ASN1_STRING_FLAG_BITS_LEFT | 0x07 ) ; EXPR 4 signature -> flags &= ~ ( ASN1_STRING_FLAG_BITS_LEFT | 0x07 ) ASSIGN 5 signature -> flags &= ~ ( ASN1_STRING_FLAG_BITS_LEFT | 0x07 ) LVAL 6 signature -> flags FIELD 7 signature -> flags LEAF_NODE 8 signature LEAF_NODE 8 -> LEAF_NODE 8 flags ASSIGN_OP 6 &= LEAF_NODE 7 &= RVAL 6 ~ ( ASN1_STRING_FLAG_BITS_LEFT | 0x07 ) UNARY_EXPR 7 ~ ( ASN1_STRING_FLAG_BITS_LEFT | 0x07 ) UNARY_OPERATOR 8 ~ LEAF_NODE 9 ~ LEAF_NODE 8 ( BIT_OR 8 ASN1_STRING_FLAG_BITS_LEFT | 0x07 BIT_OR_ELEM 9 ASN1_STRING_FLAG_BITS_LEFT FIELD 10 ASN1_STRING_FLAG_BITS_LEFT LEAF_NODE 11 ASN1_STRING_FLAG_BITS_LEFT LEAF_NODE 9 | BIT_OR_ELEM 9 0x07 FIELD 10 0x07 LEAF_NODE 11 0x07 LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 signature -> flags |= ASN1_STRING_FLAG_BITS_LEFT ; EXPR 4 signature -> flags |= ASN1_STRING_FLAG_BITS_LEFT ASSIGN 5 signature -> flags |= ASN1_STRING_FLAG_BITS_LEFT LVAL 6 signature -> flags FIELD 7 signature -> flags LEAF_NODE 8 signature LEAF_NODE 8 -> LEAF_NODE 8 flags ASSIGN_OP 6 |= LEAF_NODE 7 |= RVAL 6 ASN1_STRING_FLAG_BITS_LEFT FIELD 7 ASN1_STRING_FLAG_BITS_LEFT LEAF_NODE 8 ASN1_STRING_FLAG_BITS_LEFT LEAF_NODE 4 ; LABEL 3 err : LEAF_NODE 4 err LEAF_NODE 4 : EXPR_STATEMENT 3 OPENSSL_clear_free ( ( char * ) buf_in , ( unsigned int ) inl ) ; EXPR 4 OPENSSL_clear_free ( ( char * ) buf_in , ( unsigned int ) inl ) FUNCTION_CALL 5 OPENSSL_clear_free ( ( char * ) buf_in , ( unsigned int ) inl ) CALLEE 6 OPENSSL_clear_free LEAF_NODE 7 OPENSSL_clear_free LEAF_NODE 6 ( ARGUMENT 6 ( char * ) buf_in LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FIELD 7 buf_in LEAF_NODE 8 buf_in LEAF_NODE 6 , ARGUMENT 6 ( unsigned int ) inl LEAF_NODE 7 ( TYPE_NAME 7 unsigned int LEAF_NODE 8 unsigned LEAF_NODE 8 int LEAF_NODE 7 ) FIELD 7 inl LEAF_NODE 8 inl LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 OPENSSL_clear_free ( ( char * ) buf_out , outll ) ; EXPR 4 OPENSSL_clear_free ( ( char * ) buf_out , outll ) FUNCTION_CALL 5 OPENSSL_clear_free ( ( char * ) buf_out , outll ) CALLEE 6 OPENSSL_clear_free LEAF_NODE 7 OPENSSL_clear_free LEAF_NODE 6 ( ARGUMENT 6 ( char * ) buf_out LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FIELD 7 buf_out LEAF_NODE 8 buf_out LEAF_NODE 6 , ARGUMENT 6 outll FIELD 7 outll LEAF_NODE 8 outll LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return outl ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 outl EXPR 5 outl FIELD 6 outl LEAF_NODE 7 outl LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 197, "project": "openssl_ast_normal_function_test_142", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 dlfcn_pathbyaddr LEAF_NODE 3 dlfcn_pathbyaddr PARAMETER_LIST 2 ( void * addr , char * path , int sz ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * addr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 addr LEAF_NODE 5 addr LEAF_NODE 3 , PARAMETER_DECL 3 char * path TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 path LEAF_NODE 5 path LEAF_NODE 3 , PARAMETER_DECL 3 int sz TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 sz LEAF_NODE 5 sz LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 Dl_info dli ; VAR_DECL 4 Dl_info dli TYPE 5 Dl_info TYPE_NAME 6 Dl_info LEAF_NODE 7 Dl_info NAME 5 dli LEAF_NODE 6 dli LEAF_NODE 4 ; SIMPLE_DECL 3 int len ; VAR_DECL 4 int len TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 len LEAF_NODE 6 len LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 addr == NULL EXPR 5 addr == NULL FIELD 6 addr LEAF_NODE 7 addr EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 union LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 int LEAF_NODE 7 ( LEAF_NODE 7 * LEAF_NODE 7 f LEAF_NODE 7 ) LEAF_NODE 7 ( LEAF_NODE 7 void LEAF_NODE 7 * LEAF_NODE 7 , LEAF_NODE 7 char LEAF_NODE 7 * LEAF_NODE 7 , LEAF_NODE 7 int LEAF_NODE 7 ) LEAF_NODE 7 ; SIMPLE_DECL 7 void * p ; VAR_DECL 8 void * p TYPE 9 void * TYPE_NAME 10 void LEAF_NODE 11 void POINTER 10 * LEAF_NODE 11 * NAME 9 p LEAF_NODE 10 p LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 6 t LEAF_NODE 6 = LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 dlfcn_pathbyaddr LEAF_NODE 6 } LEAF_NODE 6 ; EXPR_STATEMENT 6 addr = t . p ; EXPR 7 addr = t . p ASSIGN 8 addr = t . p LVAL 9 addr FIELD 10 addr LEAF_NODE 11 addr ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 t . p FIELD 10 t . p LEAF_NODE 11 t LEAF_NODE 11 . LEAF_NODE 11 p LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 dladdr ( addr , & dli ) EXPR 5 dladdr ( addr , & dli ) FUNCTION_CALL 6 dladdr ( addr , & dli ) CALLEE 7 dladdr LEAF_NODE 8 dladdr LEAF_NODE 7 ( ARGUMENT 7 addr FIELD 8 addr LEAF_NODE 9 addr LEAF_NODE 7 , ARGUMENT 7 & dli UNARY_EXPR 8 & dli UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 dli LEAF_NODE 10 dli LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 len = ( int ) strlen ( dli . dli_fname ) ; EXPR 7 len = ( int ) strlen ( dli . dli_fname ) ASSIGN 8 len = ( int ) strlen ( dli . dli_fname ) LVAL 9 len FIELD 10 len LEAF_NODE 11 len ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( int ) strlen ( dli . dli_fname ) LEAF_NODE 10 ( TYPE_NAME 10 int LEAF_NODE 11 int LEAF_NODE 10 ) FUNCTION_CALL 10 strlen ( dli . dli_fname ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 dli . dli_fname FIELD 12 dli . dli_fname LEAF_NODE 13 dli LEAF_NODE 13 . LEAF_NODE 13 dli_fname LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 sz <= 0 EXPR 8 sz <= 0 FIELD 9 sz LEAF_NODE 10 sz REL_OPERATOR 9 <= LEAF_NODE 10 <= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 OPENSSL_free ( ( void * ) dli . dli_fname ) ; EXPR 10 OPENSSL_free ( ( void * ) dli . dli_fname ) FUNCTION_CALL 11 OPENSSL_free ( ( void * ) dli . dli_fname ) CALLEE 12 OPENSSL_free LEAF_NODE 13 OPENSSL_free LEAF_NODE 12 ( ARGUMENT 12 ( void * ) dli . dli_fname LEAF_NODE 13 ( TYPE_NAME 13 void LEAF_NODE 14 void LEAF_NODE 13 * LEAF_NODE 13 ) FIELD 13 dli . dli_fname LEAF_NODE 14 dli LEAF_NODE 14 . LEAF_NODE 14 dli_fname LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return len + 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 len + 1 EXPR 11 len + 1 FIELD 12 len LEAF_NODE 13 len LEAF_NODE 12 + FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 len >= sz EXPR 8 len >= sz FIELD 9 len LEAF_NODE 10 len REL_OPERATOR 9 >= LEAF_NODE 10 >= FIELD 9 sz LEAF_NODE 10 sz LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 len = sz - 1 ; EXPR 9 len = sz - 1 ASSIGN 10 len = sz - 1 LVAL 11 len FIELD 12 len LEAF_NODE 13 len ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 sz - 1 FIELD 12 sz LEAF_NODE 13 sz LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; EXPR_STATEMENT 6 memcpy ( path , dli . dli_fname , len ) ; EXPR 7 memcpy ( path , dli . dli_fname , len ) FUNCTION_CALL 8 memcpy ( path , dli . dli_fname , len ) CALLEE 9 memcpy LEAF_NODE 10 memcpy LEAF_NODE 9 ( ARGUMENT 9 path FIELD 10 path LEAF_NODE 11 path LEAF_NODE 9 , ARGUMENT 9 dli . dli_fname FIELD 10 dli . dli_fname LEAF_NODE 11 dli LEAF_NODE 11 . LEAF_NODE 11 dli_fname LEAF_NODE 9 , ARGUMENT 9 len FIELD 10 len LEAF_NODE 11 len LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 path [ len ++ ] = 0 ; EXPR 7 path [ len ++ ] = 0 ASSIGN 8 path [ len ++ ] = 0 LVAL 9 path [ len ++ ] FIELD 10 path [ len ++ ] LEAF_NODE 11 path LEAF_NODE 11 [ EXPR 11 len ++ FIELD 12 len ++ LEAF_NODE 13 len LEAF_NODE 13 ++ LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_free ( ( void * ) dli . dli_fname ) ; EXPR 7 OPENSSL_free ( ( void * ) dli . dli_fname ) FUNCTION_CALL 8 OPENSSL_free ( ( void * ) dli . dli_fname ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 ( void * ) dli . dli_fname LEAF_NODE 10 ( TYPE_NAME 10 void LEAF_NODE 11 void LEAF_NODE 10 * LEAF_NODE 10 ) FIELD 10 dli . dli_fname LEAF_NODE 11 dli LEAF_NODE 11 . LEAF_NODE 11 dli_fname LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return len ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 len EXPR 8 len FIELD 9 len LEAF_NODE 10 len LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ERR_add_error_data ( 2 , \"dlfcn_pathbyaddr(): \" , dlerror ( ) ) ; EXPR 4 ERR_add_error_data ( 2 , \"dlfcn_pathbyaddr(): \" , dlerror ( ) ) FUNCTION_CALL 5 ERR_add_error_data ( 2 , \"dlfcn_pathbyaddr(): \" , dlerror ( ) ) CALLEE 6 ERR_add_error_data LEAF_NODE 7 ERR_add_error_data LEAF_NODE 6 ( ARGUMENT 6 2 FIELD 7 2 LEAF_NODE 8 2 LEAF_NODE 6 , ARGUMENT 6 \"dlfcn_pathbyaddr(): \" FIELD 7 \"dlfcn_pathbyaddr(): \" LEAF_NODE 8 \"dlfcn_pathbyaddr(): \" LEAF_NODE 6 , ARGUMENT 6 dlerror ( ) FUNCTION_CALL 7 dlerror ( ) CALLEE 8 dlerror LEAF_NODE 9 dlerror LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return - 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 - 1 EXPR 5 - 1 UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 198, "project": "openssl_ast_normal_function_test_79", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 unsigned char * TYPE_NAME 3 unsigned char LEAF_NODE 4 unsigned LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 ssl_add_serverhello_tlsext LEAF_NODE 3 ssl_add_serverhello_tlsext PARAMETER_LIST 2 ( SSL * s , unsigned char * p , unsigned char * limit ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * p TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 p LEAF_NODE 5 p LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * limit TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 limit LEAF_NODE 5 limit LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int extdatalen ; extdatalen = 0 ; VAR_DECL 4 int extdatalen ; extdatalen = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 extdatalen LEAF_NODE 6 extdatalen LEAF_NODE 5 ; INIT 5 extdatalen = 0 ASSIGN 6 extdatalen = 0 LVAL 7 extdatalen NAME 8 extdatalen LEAF_NODE 9 extdatalen ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char * ret ; ret = p ; VAR_DECL 4 unsigned char * ret ; ret = p TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 5 ; INIT 5 ret = p ASSIGN 6 ret = p LVAL 7 ret NAME 8 ret LEAF_NODE 9 ret ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 p FIELD 8 p LEAF_NODE 9 p LEAF_NODE 4 ; SIMPLE_DECL 3 int next_proto_neg_seen ; VAR_DECL 4 int next_proto_neg_seen TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 next_proto_neg_seen LEAF_NODE 6 next_proto_neg_seen LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> version == SSL3_VERSION && ! s -> s3 -> send_connection_binding EXPR 5 s -> version == SSL3_VERSION && ! s -> s3 -> send_connection_binding AND 6 s -> version == SSL3_VERSION && ! s -> s3 -> send_connection_binding EXPR 7 s -> version == SSL3_VERSION FIELD 8 s -> version LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 version EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 SSL3_VERSION LEAF_NODE 9 SSL3_VERSION LEAF_NODE 7 && EXPR 7 ! s -> s3 -> send_connection_binding UNARY_EXPR 8 ! s -> s3 -> send_connection_binding UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 s -> s3 -> send_connection_binding LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 s3 LEAF_NODE 10 -> LEAF_NODE 10 send_connection_binding LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return p ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 p EXPR 7 p FIELD 8 p LEAF_NODE 9 p LEAF_NODE 6 ; EXPR_STATEMENT 3 ret += 2 ; EXPR 4 ret += 2 ASSIGN 5 ret += 2 LVAL 6 ret FIELD 7 ret LEAF_NODE 8 ret ASSIGN_OP 6 += LEAF_NODE 7 += RVAL 6 2 FIELD 7 2 LEAF_NODE 8 2 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ret >= limit EXPR 5 ret >= limit FIELD 6 ret LEAF_NODE 7 ret REL_OPERATOR 6 >= LEAF_NODE 7 >= FIELD 6 limit LEAF_NODE 7 limit LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return NULL ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 NULL EXPR 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! s -> hit && s -> servername_done == 1 && s -> session -> tlsext_hostname != NULL EXPR 5 ! s -> hit && s -> servername_done == 1 && s -> session -> tlsext_hostname != NULL AND 6 ! s -> hit && s -> servername_done == 1 && s -> session -> tlsext_hostname != NULL EXPR 7 ! s -> hit UNARY_EXPR 8 ! s -> hit UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 s -> hit LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 hit LEAF_NODE 7 && EXPR 7 s -> servername_done == 1 && s -> session -> tlsext_hostname != NULL AND 8 s -> servername_done == 1 && s -> session -> tlsext_hostname != NULL EXPR 9 s -> servername_done == 1 FIELD 10 s -> servername_done LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 servername_done EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 && EXPR 9 s -> session -> tlsext_hostname != NULL FIELD 10 s -> session -> tlsext_hostname LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 session LEAF_NODE 11 -> LEAF_NODE 11 tlsext_hostname EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( long ) ( limit - ret - 4 ) < 0 EXPR 8 ( long ) ( limit - ret - 4 ) < 0 LEAF_NODE 9 ( TYPE_NAME 9 long LEAF_NODE 10 long LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 limit LEAF_NODE 10 limit LEAF_NODE 9 - FIELD 9 ret LEAF_NODE 10 ret LEAF_NODE 9 - FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 9 ) REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return NULL ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 NULL EXPR 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 9 ; EXPR_STATEMENT 6 s2n ( TLSEXT_TYPE_server_name , ret ) ; EXPR 7 s2n ( TLSEXT_TYPE_server_name , ret ) FUNCTION_CALL 8 s2n ( TLSEXT_TYPE_server_name , ret ) CALLEE 9 s2n LEAF_NODE 10 s2n LEAF_NODE 9 ( ARGUMENT 9 TLSEXT_TYPE_server_name FIELD 10 TLSEXT_TYPE_server_name LEAF_NODE 11 TLSEXT_TYPE_server_name LEAF_NODE 9 , ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s2n ( 0 , ret ) ; EXPR 7 s2n ( 0 , ret ) FUNCTION_CALL 8 s2n ( 0 , ret ) CALLEE 9 s2n LEAF_NODE 10 s2n LEAF_NODE 9 ( ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 , ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> s3 -> send_connection_binding EXPR 5 s -> s3 -> send_connection_binding FIELD 6 s -> s3 -> send_connection_binding LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 s3 LEAF_NODE 7 -> LEAF_NODE 7 send_connection_binding LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int el ; VAR_DECL 7 int el TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 el LEAF_NODE 9 el LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! ssl_add_serverhello_renegotiate_ext ( s , 0 , & el , 0 ) EXPR 8 ! ssl_add_serverhello_renegotiate_ext ( s , 0 , & el , 0 ) UNARY_EXPR 9 ! ssl_add_serverhello_renegotiate_ext ( s , 0 , & el , 0 ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 ssl_add_serverhello_renegotiate_ext ( s , 0 , & el , 0 ) CALLEE 11 ssl_add_serverhello_renegotiate_ext LEAF_NODE 12 ssl_add_serverhello_renegotiate_ext LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 , ARGUMENT 11 & el UNARY_EXPR 12 & el UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 el LEAF_NODE 14 el LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL_ADD_SERVERHELLO_TLSEXT , ERR_R_INTERNAL_ERROR ) ; EXPR 10 SSLerr ( SSL_F_SSL_ADD_SERVERHELLO_TLSEXT , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL_ADD_SERVERHELLO_TLSEXT , ERR_R_INTERNAL_ERROR ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL_ADD_SERVERHELLO_TLSEXT FIELD 13 SSL_F_SSL_ADD_SERVERHELLO_TLSEXT LEAF_NODE 14 SSL_F_SSL_ADD_SERVERHELLO_TLSEXT LEAF_NODE 12 , ARGUMENT 12 ERR_R_INTERNAL_ERROR FIELD 13 ERR_R_INTERNAL_ERROR LEAF_NODE 14 ERR_R_INTERNAL_ERROR LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return NULL ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 NULL EXPR 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( limit - p - 4 - el ) < 0 EXPR 8 ( limit - p - 4 - el ) < 0 LEAF_NODE 9 ( FIELD 9 limit LEAF_NODE 10 limit LEAF_NODE 9 - FIELD 9 p LEAF_NODE 10 p LEAF_NODE 9 - FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 9 - FIELD 9 el LEAF_NODE 10 el LEAF_NODE 9 ) REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return NULL ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 NULL EXPR 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 9 ; EXPR_STATEMENT 6 s2n ( TLSEXT_TYPE_renegotiate , ret ) ; EXPR 7 s2n ( TLSEXT_TYPE_renegotiate , ret ) FUNCTION_CALL 8 s2n ( TLSEXT_TYPE_renegotiate , ret ) CALLEE 9 s2n LEAF_NODE 10 s2n LEAF_NODE 9 ( ARGUMENT 9 TLSEXT_TYPE_renegotiate FIELD 10 TLSEXT_TYPE_renegotiate LEAF_NODE 11 TLSEXT_TYPE_renegotiate LEAF_NODE 9 , ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s2n ( el , ret ) ; EXPR 7 s2n ( el , ret ) FUNCTION_CALL 8 s2n ( el , ret ) CALLEE 9 s2n LEAF_NODE 10 s2n LEAF_NODE 9 ( ARGUMENT 9 el FIELD 10 el LEAF_NODE 11 el LEAF_NODE 9 , ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! ssl_add_serverhello_renegotiate_ext ( s , ret , & el , el ) EXPR 8 ! ssl_add_serverhello_renegotiate_ext ( s , ret , & el , el ) UNARY_EXPR 9 ! ssl_add_serverhello_renegotiate_ext ( s , ret , & el , el ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 ssl_add_serverhello_renegotiate_ext ( s , ret , & el , el ) CALLEE 11 ssl_add_serverhello_renegotiate_ext LEAF_NODE 12 ssl_add_serverhello_renegotiate_ext LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 , ARGUMENT 11 ret FIELD 12 ret LEAF_NODE 13 ret LEAF_NODE 11 , ARGUMENT 11 & el UNARY_EXPR 12 & el UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 el LEAF_NODE 14 el LEAF_NODE 11 , ARGUMENT 11 el FIELD 12 el LEAF_NODE 13 el LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL_ADD_SERVERHELLO_TLSEXT , ERR_R_INTERNAL_ERROR ) ; EXPR 10 SSLerr ( SSL_F_SSL_ADD_SERVERHELLO_TLSEXT , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL_ADD_SERVERHELLO_TLSEXT , ERR_R_INTERNAL_ERROR ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL_ADD_SERVERHELLO_TLSEXT FIELD 13 SSL_F_SSL_ADD_SERVERHELLO_TLSEXT LEAF_NODE 14 SSL_F_SSL_ADD_SERVERHELLO_TLSEXT LEAF_NODE 12 , ARGUMENT 12 ERR_R_INTERNAL_ERROR FIELD 13 ERR_R_INTERNAL_ERROR LEAF_NODE 14 ERR_R_INTERNAL_ERROR LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return NULL ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 NULL EXPR 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 ret += el ; EXPR 7 ret += el ASSIGN 8 ret += el LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 el FIELD 10 el LEAF_NODE 11 el LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> tlsext_ecpointformatlist != NULL && s -> version != DTLS1_VERSION EXPR 5 s -> tlsext_ecpointformatlist != NULL && s -> version != DTLS1_VERSION AND 6 s -> tlsext_ecpointformatlist != NULL && s -> version != DTLS1_VERSION EXPR 7 s -> tlsext_ecpointformatlist != NULL FIELD 8 s -> tlsext_ecpointformatlist LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 tlsext_ecpointformatlist EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 7 && EXPR 7 s -> version != DTLS1_VERSION FIELD 8 s -> version LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 version EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 DTLS1_VERSION LEAF_NODE 9 DTLS1_VERSION LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 long lenmax ; VAR_DECL 7 long lenmax TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 lenmax LEAF_NODE 9 lenmax LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( lenmax = limit - ret - 5 ) < 0 EXPR 8 ( lenmax = limit - ret - 5 ) < 0 LEAF_NODE 9 ( ASSIGN 9 lenmax = limit - ret - 5 LVAL 10 lenmax FIELD 11 lenmax LEAF_NODE 12 lenmax ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 limit - ret - 5 FIELD 11 limit LEAF_NODE 12 limit LEAF_NODE 11 - FIELD 11 ret LEAF_NODE 12 ret LEAF_NODE 11 - FIELD 11 5 LEAF_NODE 12 5 LEAF_NODE 9 ) REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return NULL ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 NULL EXPR 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> tlsext_ecpointformatlist_length > ( unsigned long ) lenmax EXPR 8 s -> tlsext_ecpointformatlist_length > ( unsigned long ) lenmax FIELD 9 s -> tlsext_ecpointformatlist_length LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 tlsext_ecpointformatlist_length REL_OPERATOR 9 > LEAF_NODE 10 > LEAF_NODE 9 ( TYPE_NAME 9 unsigned long LEAF_NODE 10 unsigned LEAF_NODE 10 long LEAF_NODE 9 ) FIELD 9 lenmax LEAF_NODE 10 lenmax LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return NULL ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 NULL EXPR 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> tlsext_ecpointformatlist_length > 255 EXPR 8 s -> tlsext_ecpointformatlist_length > 255 FIELD 9 s -> tlsext_ecpointformatlist_length LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 tlsext_ecpointformatlist_length REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 255 LEAF_NODE 10 255 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL_ADD_SERVERHELLO_TLSEXT , ERR_R_INTERNAL_ERROR ) ; EXPR 10 SSLerr ( SSL_F_SSL_ADD_SERVERHELLO_TLSEXT , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL_ADD_SERVERHELLO_TLSEXT , ERR_R_INTERNAL_ERROR ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL_ADD_SERVERHELLO_TLSEXT FIELD 13 SSL_F_SSL_ADD_SERVERHELLO_TLSEXT LEAF_NODE 14 SSL_F_SSL_ADD_SERVERHELLO_TLSEXT LEAF_NODE 12 , ARGUMENT 12 ERR_R_INTERNAL_ERROR FIELD 13 ERR_R_INTERNAL_ERROR LEAF_NODE 14 ERR_R_INTERNAL_ERROR LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return NULL ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 NULL EXPR 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 s2n ( TLSEXT_TYPE_ec_point_formats , ret ) ; EXPR 7 s2n ( TLSEXT_TYPE_ec_point_formats , ret ) FUNCTION_CALL 8 s2n ( TLSEXT_TYPE_ec_point_formats , ret ) CALLEE 9 s2n LEAF_NODE 10 s2n LEAF_NODE 9 ( ARGUMENT 9 TLSEXT_TYPE_ec_point_formats FIELD 10 TLSEXT_TYPE_ec_point_formats LEAF_NODE 11 TLSEXT_TYPE_ec_point_formats LEAF_NODE 9 , ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s2n ( s -> tlsext_ecpointformatlist_length + 1 , ret ) ; EXPR 7 s2n ( s -> tlsext_ecpointformatlist_length + 1 , ret ) FUNCTION_CALL 8 s2n ( s -> tlsext_ecpointformatlist_length + 1 , ret ) CALLEE 9 s2n LEAF_NODE 10 s2n LEAF_NODE 9 ( ARGUMENT 9 s -> tlsext_ecpointformatlist_length + 1 FIELD 10 s -> tlsext_ecpointformatlist_length LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 tlsext_ecpointformatlist_length LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 , ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 * ( ret ++ ) = ( unsigned char ) s -> tlsext_ecpointformatlist_length ; EXPR 7 * ( ret ++ ) = ( unsigned char ) s -> tlsext_ecpointformatlist_length ASSIGN 8 * ( ret ++ ) = ( unsigned char ) s -> tlsext_ecpointformatlist_length LVAL 9 * ( ret ++ ) UNARY_EXPR 10 * ( ret ++ ) UNARY_OPERATOR 11 * LEAF_NODE 12 * LEAF_NODE 11 ( FIELD 11 ret ++ LEAF_NODE 12 ret LEAF_NODE 12 ++ LEAF_NODE 11 ) ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( unsigned char ) s -> tlsext_ecpointformatlist_length LEAF_NODE 10 ( TYPE_NAME 10 unsigned char LEAF_NODE 11 unsigned LEAF_NODE 11 char LEAF_NODE 10 ) FIELD 10 s -> tlsext_ecpointformatlist_length LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 tlsext_ecpointformatlist_length LEAF_NODE 7 ; EXPR_STATEMENT 6 memcpy ( ret , s -> tlsext_ecpointformatlist , s -> tlsext_ecpointformatlist_length ) ; EXPR 7 memcpy ( ret , s -> tlsext_ecpointformatlist , s -> tlsext_ecpointformatlist_length ) FUNCTION_CALL 8 memcpy ( ret , s -> tlsext_ecpointformatlist , s -> tlsext_ecpointformatlist_length ) CALLEE 9 memcpy LEAF_NODE 10 memcpy LEAF_NODE 9 ( ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 , ARGUMENT 9 s -> tlsext_ecpointformatlist FIELD 10 s -> tlsext_ecpointformatlist LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 tlsext_ecpointformatlist LEAF_NODE 9 , ARGUMENT 9 s -> tlsext_ecpointformatlist_length FIELD 10 s -> tlsext_ecpointformatlist_length LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 tlsext_ecpointformatlist_length LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ret += s -> tlsext_ecpointformatlist_length ; EXPR 7 ret += s -> tlsext_ecpointformatlist_length ASSIGN 8 ret += s -> tlsext_ecpointformatlist_length LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 s -> tlsext_ecpointformatlist_length FIELD 10 s -> tlsext_ecpointformatlist_length LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 tlsext_ecpointformatlist_length LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> tlsext_ticket_expected && ! ( SSL_get_options ( s ) & SSL_OP_NO_TICKET ) EXPR 5 s -> tlsext_ticket_expected && ! ( SSL_get_options ( s ) & SSL_OP_NO_TICKET ) AND 6 s -> tlsext_ticket_expected && ! ( SSL_get_options ( s ) & SSL_OP_NO_TICKET ) EXPR 7 s -> tlsext_ticket_expected FIELD 8 s -> tlsext_ticket_expected LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 tlsext_ticket_expected LEAF_NODE 7 && EXPR 7 ! ( SSL_get_options ( s ) & SSL_OP_NO_TICKET ) UNARY_EXPR 8 ! ( SSL_get_options ( s ) & SSL_OP_NO_TICKET ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! LEAF_NODE 9 ( FUNCTION_CALL 9 SSL_get_options ( s ) CALLEE 10 SSL_get_options LEAF_NODE 11 SSL_get_options LEAF_NODE 10 ( ARGUMENT 10 s FIELD 11 s LEAF_NODE 12 s LEAF_NODE 10 ) LEAF_NODE 9 & FIELD 9 SSL_OP_NO_TICKET LEAF_NODE 10 SSL_OP_NO_TICKET LEAF_NODE 9 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( long ) ( limit - ret - 4 ) < 0 EXPR 8 ( long ) ( limit - ret - 4 ) < 0 LEAF_NODE 9 ( TYPE_NAME 9 long LEAF_NODE 10 long LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 limit LEAF_NODE 10 limit LEAF_NODE 9 - FIELD 9 ret LEAF_NODE 10 ret LEAF_NODE 9 - FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 9 ) REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return NULL ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 NULL EXPR 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 9 ; EXPR_STATEMENT 6 s2n ( TLSEXT_TYPE_session_ticket , ret ) ; EXPR 7 s2n ( TLSEXT_TYPE_session_ticket , ret ) FUNCTION_CALL 8 s2n ( TLSEXT_TYPE_session_ticket , ret ) CALLEE 9 s2n LEAF_NODE 10 s2n LEAF_NODE 9 ( ARGUMENT 9 TLSEXT_TYPE_session_ticket FIELD 10 TLSEXT_TYPE_session_ticket LEAF_NODE 11 TLSEXT_TYPE_session_ticket LEAF_NODE 9 , ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s2n ( 0 , ret ) ; EXPR 7 s2n ( 0 , ret ) FUNCTION_CALL 8 s2n ( 0 , ret ) CALLEE 9 s2n LEAF_NODE 10 s2n LEAF_NODE 9 ( ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 , ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> tlsext_status_expected EXPR 5 s -> tlsext_status_expected FIELD 6 s -> tlsext_status_expected LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 tlsext_status_expected LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( long ) ( limit - ret - 4 ) < 0 EXPR 8 ( long ) ( limit - ret - 4 ) < 0 LEAF_NODE 9 ( TYPE_NAME 9 long LEAF_NODE 10 long LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 limit LEAF_NODE 10 limit LEAF_NODE 9 - FIELD 9 ret LEAF_NODE 10 ret LEAF_NODE 9 - FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 9 ) REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return NULL ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 NULL EXPR 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 9 ; EXPR_STATEMENT 6 s2n ( TLSEXT_TYPE_status_request , ret ) ; EXPR 7 s2n ( TLSEXT_TYPE_status_request , ret ) FUNCTION_CALL 8 s2n ( TLSEXT_TYPE_status_request , ret ) CALLEE 9 s2n LEAF_NODE 10 s2n LEAF_NODE 9 ( ARGUMENT 9 TLSEXT_TYPE_status_request FIELD 10 TLSEXT_TYPE_status_request LEAF_NODE 11 TLSEXT_TYPE_status_request LEAF_NODE 9 , ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s2n ( 0 , ret ) ; EXPR 7 s2n ( 0 , ret ) FUNCTION_CALL 8 s2n ( 0 , ret ) CALLEE 9 s2n LEAF_NODE 10 s2n LEAF_NODE 9 ( ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 , ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> s3 -> server_opaque_prf_input != NULL && s -> version != DTLS1_VERSION EXPR 5 s -> s3 -> server_opaque_prf_input != NULL && s -> version != DTLS1_VERSION AND 6 s -> s3 -> server_opaque_prf_input != NULL && s -> version != DTLS1_VERSION EXPR 7 s -> s3 -> server_opaque_prf_input != NULL FIELD 8 s -> s3 -> server_opaque_prf_input LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 s3 LEAF_NODE 9 -> LEAF_NODE 9 server_opaque_prf_input EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 7 && EXPR 7 s -> version != DTLS1_VERSION FIELD 8 s -> version LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 version EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 DTLS1_VERSION LEAF_NODE 9 DTLS1_VERSION LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 size_t sol ; sol = s -> s3 -> server_opaque_prf_input_len ; VAR_DECL 7 size_t sol ; sol = s -> s3 -> server_opaque_prf_input_len TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 sol LEAF_NODE 9 sol LEAF_NODE 8 ; INIT 8 sol = s -> s3 -> server_opaque_prf_input_len ASSIGN 9 sol = s -> s3 -> server_opaque_prf_input_len LVAL 10 sol NAME 11 sol LEAF_NODE 12 sol ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 s -> s3 -> server_opaque_prf_input_len FIELD 11 s -> s3 -> server_opaque_prf_input_len LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 s3 LEAF_NODE 12 -> LEAF_NODE 12 server_opaque_prf_input_len LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( long ) ( limit - ret - 6 - sol ) < 0 EXPR 8 ( long ) ( limit - ret - 6 - sol ) < 0 LEAF_NODE 9 ( TYPE_NAME 9 long LEAF_NODE 10 long LEAF_NODE 9 ) LEAF_NODE 9 ( FIELD 9 limit LEAF_NODE 10 limit LEAF_NODE 9 - FIELD 9 ret LEAF_NODE 10 ret LEAF_NODE 9 - FIELD 9 6 LEAF_NODE 10 6 LEAF_NODE 9 - FIELD 9 sol LEAF_NODE 10 sol LEAF_NODE 9 ) REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return NULL ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 NULL EXPR 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 sol > 0xFFFD EXPR 8 sol > 0xFFFD FIELD 9 sol LEAF_NODE 10 sol REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 0xFFFD LEAF_NODE 10 0xFFFD LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return NULL ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 NULL EXPR 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 9 ; EXPR_STATEMENT 6 s2n ( TLSEXT_TYPE_opaque_prf_input , ret ) ; EXPR 7 s2n ( TLSEXT_TYPE_opaque_prf_input , ret ) FUNCTION_CALL 8 s2n ( TLSEXT_TYPE_opaque_prf_input , ret ) CALLEE 9 s2n LEAF_NODE 10 s2n LEAF_NODE 9 ( ARGUMENT 9 TLSEXT_TYPE_opaque_prf_input FIELD 10 TLSEXT_TYPE_opaque_prf_input LEAF_NODE 11 TLSEXT_TYPE_opaque_prf_input LEAF_NODE 9 , ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s2n ( sol + 2 , ret ) ; EXPR 7 s2n ( sol + 2 , ret ) FUNCTION_CALL 8 s2n ( sol + 2 , ret ) CALLEE 9 s2n LEAF_NODE 10 s2n LEAF_NODE 9 ( ARGUMENT 9 sol + 2 FIELD 10 sol LEAF_NODE 11 sol LEAF_NODE 10 + FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 , ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s2n ( sol , ret ) ; EXPR 7 s2n ( sol , ret ) FUNCTION_CALL 8 s2n ( sol , ret ) CALLEE 9 s2n LEAF_NODE 10 s2n LEAF_NODE 9 ( ARGUMENT 9 sol FIELD 10 sol LEAF_NODE 11 sol LEAF_NODE 9 , ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 memcpy ( ret , s -> s3 -> server_opaque_prf_input , sol ) ; EXPR 7 memcpy ( ret , s -> s3 -> server_opaque_prf_input , sol ) FUNCTION_CALL 8 memcpy ( ret , s -> s3 -> server_opaque_prf_input , sol ) CALLEE 9 memcpy LEAF_NODE 10 memcpy LEAF_NODE 9 ( ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 , ARGUMENT 9 s -> s3 -> server_opaque_prf_input FIELD 10 s -> s3 -> server_opaque_prf_input LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s3 LEAF_NODE 11 -> LEAF_NODE 11 server_opaque_prf_input LEAF_NODE 9 , ARGUMENT 9 sol FIELD 10 sol LEAF_NODE 11 sol LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ret += sol ; EXPR 7 ret += sol ASSIGN 8 ret += sol LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 sol FIELD 10 sol LEAF_NODE 11 sol LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> srtp_profile EXPR 5 s -> srtp_profile FIELD 6 s -> srtp_profile LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 srtp_profile LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int el ; VAR_DECL 7 int el TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 el LEAF_NODE 9 el LEAF_NODE 7 ; EXPR_STATEMENT 6 ssl_add_serverhello_use_srtp_ext ( s , 0 , & el , 0 ) ; EXPR 7 ssl_add_serverhello_use_srtp_ext ( s , 0 , & el , 0 ) FUNCTION_CALL 8 ssl_add_serverhello_use_srtp_ext ( s , 0 , & el , 0 ) CALLEE 9 ssl_add_serverhello_use_srtp_ext LEAF_NODE 10 ssl_add_serverhello_use_srtp_ext LEAF_NODE 9 ( ARGUMENT 9 s FIELD 10 s LEAF_NODE 11 s LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 , ARGUMENT 9 & el UNARY_EXPR 10 & el UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 el LEAF_NODE 12 el LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( limit - p - 4 - el ) < 0 EXPR 8 ( limit - p - 4 - el ) < 0 LEAF_NODE 9 ( FIELD 9 limit LEAF_NODE 10 limit LEAF_NODE 9 - FIELD 9 p LEAF_NODE 10 p LEAF_NODE 9 - FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 9 - FIELD 9 el LEAF_NODE 10 el LEAF_NODE 9 ) REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return NULL ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 NULL EXPR 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 9 ; EXPR_STATEMENT 6 s2n ( TLSEXT_TYPE_use_srtp , ret ) ; EXPR 7 s2n ( TLSEXT_TYPE_use_srtp , ret ) FUNCTION_CALL 8 s2n ( TLSEXT_TYPE_use_srtp , ret ) CALLEE 9 s2n LEAF_NODE 10 s2n LEAF_NODE 9 ( ARGUMENT 9 TLSEXT_TYPE_use_srtp FIELD 10 TLSEXT_TYPE_use_srtp LEAF_NODE 11 TLSEXT_TYPE_use_srtp LEAF_NODE 9 , ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s2n ( el , ret ) ; EXPR 7 s2n ( el , ret ) FUNCTION_CALL 8 s2n ( el , ret ) CALLEE 9 s2n LEAF_NODE 10 s2n LEAF_NODE 9 ( ARGUMENT 9 el FIELD 10 el LEAF_NODE 11 el LEAF_NODE 9 , ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ssl_add_serverhello_use_srtp_ext ( s , ret , & el , el ) EXPR 8 ssl_add_serverhello_use_srtp_ext ( s , ret , & el , el ) FUNCTION_CALL 9 ssl_add_serverhello_use_srtp_ext ( s , ret , & el , el ) CALLEE 10 ssl_add_serverhello_use_srtp_ext LEAF_NODE 11 ssl_add_serverhello_use_srtp_ext LEAF_NODE 10 ( ARGUMENT 10 s FIELD 11 s LEAF_NODE 12 s LEAF_NODE 10 , ARGUMENT 10 ret FIELD 11 ret LEAF_NODE 12 ret LEAF_NODE 10 , ARGUMENT 10 & el UNARY_EXPR 11 & el UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 el LEAF_NODE 13 el LEAF_NODE 10 , ARGUMENT 10 el FIELD 11 el LEAF_NODE 12 el LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL_ADD_SERVERHELLO_TLSEXT , ERR_R_INTERNAL_ERROR ) ; EXPR 10 SSLerr ( SSL_F_SSL_ADD_SERVERHELLO_TLSEXT , ERR_R_INTERNAL_ERROR ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL_ADD_SERVERHELLO_TLSEXT , ERR_R_INTERNAL_ERROR ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL_ADD_SERVERHELLO_TLSEXT FIELD 13 SSL_F_SSL_ADD_SERVERHELLO_TLSEXT LEAF_NODE 14 SSL_F_SSL_ADD_SERVERHELLO_TLSEXT LEAF_NODE 12 , ARGUMENT 12 ERR_R_INTERNAL_ERROR FIELD 13 ERR_R_INTERNAL_ERROR LEAF_NODE 14 ERR_R_INTERNAL_ERROR LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return NULL ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 NULL EXPR 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 ret += el ; EXPR 7 ret += el ASSIGN 8 ret += el LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 el FIELD 10 el LEAF_NODE 11 el LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( ( s -> s3 -> tmp . new_cipher -> id & 0xFFFF ) == 0x80 || ( s -> s3 -> tmp . new_cipher -> id & 0xFFFF ) == 0x81 ) && ( SSL_get_options ( s ) & SSL_OP_CRYPTOPRO_TLSEXT_BUG ) EXPR 5 ( ( s -> s3 -> tmp . new_cipher -> id & 0xFFFF ) == 0x80 || ( s -> s3 -> tmp . new_cipher -> id & 0xFFFF ) == 0x81 ) && ( SSL_get_options ( s ) & SSL_OP_CRYPTOPRO_TLSEXT_BUG ) AND 6 ( ( s -> s3 -> tmp . new_cipher -> id & 0xFFFF ) == 0x80 || ( s -> s3 -> tmp . new_cipher -> id & 0xFFFF ) == 0x81 ) && ( SSL_get_options ( s ) & SSL_OP_CRYPTOPRO_TLSEXT_BUG ) EXPR 7 ( ( s -> s3 -> tmp . new_cipher -> id & 0xFFFF ) == 0x80 || ( s -> s3 -> tmp . new_cipher -> id & 0xFFFF ) == 0x81 ) LEAF_NODE 8 ( OR 8 ( s -> s3 -> tmp . new_cipher -> id & 0xFFFF ) == 0x80 || ( s -> s3 -> tmp . new_cipher -> id & 0xFFFF ) == 0x81 EXPR 9 ( s -> s3 -> tmp . new_cipher -> id & 0xFFFF ) == 0x80 LEAF_NODE 10 ( FIELD 10 s -> s3 -> tmp . new_cipher -> id LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s3 LEAF_NODE 11 -> LEAF_NODE 11 tmp LEAF_NODE 11 . LEAF_NODE 11 new_cipher LEAF_NODE 11 -> LEAF_NODE 11 id LEAF_NODE 10 & FIELD 10 0xFFFF LEAF_NODE 11 0xFFFF LEAF_NODE 10 ) EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 0x80 LEAF_NODE 11 0x80 LEAF_NODE 9 || EXPR 9 ( s -> s3 -> tmp . new_cipher -> id & 0xFFFF ) == 0x81 LEAF_NODE 10 ( FIELD 10 s -> s3 -> tmp . new_cipher -> id LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 s3 LEAF_NODE 11 -> LEAF_NODE 11 tmp LEAF_NODE 11 . LEAF_NODE 11 new_cipher LEAF_NODE 11 -> LEAF_NODE 11 id LEAF_NODE 10 & FIELD 10 0xFFFF LEAF_NODE 11 0xFFFF LEAF_NODE 10 ) EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 0x81 LEAF_NODE 11 0x81 LEAF_NODE 8 ) LEAF_NODE 7 && EXPR 7 ( SSL_get_options ( s ) & SSL_OP_CRYPTOPRO_TLSEXT_BUG ) LEAF_NODE 8 ( FUNCTION_CALL 8 SSL_get_options ( s ) CALLEE 9 SSL_get_options LEAF_NODE 10 SSL_get_options LEAF_NODE 9 ( ARGUMENT 9 s FIELD 10 s LEAF_NODE 11 s LEAF_NODE 9 ) LEAF_NODE 8 & FIELD 8 SSL_OP_CRYPTOPRO_TLSEXT_BUG LEAF_NODE 9 SSL_OP_CRYPTOPRO_TLSEXT_BUG LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char LEAF_NODE 6 cryptopro_ext LEAF_NODE 6 [ LEAF_NODE 6 36 LEAF_NODE 6 ] LEAF_NODE 6 = LEAF_NODE 6 { STATEMENTS 6 LEAF_NODE 7 0xfd LEAF_NODE 7 , LEAF_NODE 7 0xe8 LEAF_NODE 7 , LEAF_NODE 7 0x00 LEAF_NODE 7 , LEAF_NODE 7 0x20 LEAF_NODE 7 , LEAF_NODE 7 0x30 LEAF_NODE 7 , LEAF_NODE 7 0x1e LEAF_NODE 7 , LEAF_NODE 7 0x30 LEAF_NODE 7 , LEAF_NODE 7 0x08 LEAF_NODE 7 , LEAF_NODE 7 0x06 LEAF_NODE 7 , LEAF_NODE 7 0x06 LEAF_NODE 7 , LEAF_NODE 7 0x2a LEAF_NODE 7 , LEAF_NODE 7 0x85 LEAF_NODE 7 , LEAF_NODE 7 0x03 LEAF_NODE 7 , LEAF_NODE 7 0x02 LEAF_NODE 7 , LEAF_NODE 7 0x02 LEAF_NODE 7 , LEAF_NODE 7 0x09 LEAF_NODE 7 , LEAF_NODE 7 0x30 LEAF_NODE 7 , LEAF_NODE 7 0x08 LEAF_NODE 7 , LEAF_NODE 7 0x06 LEAF_NODE 7 , LEAF_NODE 7 0x06 LEAF_NODE 7 , LEAF_NODE 7 0x2a LEAF_NODE 7 , LEAF_NODE 7 0x85 LEAF_NODE 7 , LEAF_NODE 7 0x03 LEAF_NODE 7 , LEAF_NODE 7 0x02 LEAF_NODE 7 , LEAF_NODE 7 0x02 LEAF_NODE 7 , LEAF_NODE 7 0x16 LEAF_NODE 7 , LEAF_NODE 7 0x30 LEAF_NODE 7 , LEAF_NODE 7 0x08 LEAF_NODE 7 , LEAF_NODE 7 0x06 LEAF_NODE 7 , LEAF_NODE 7 0x06 LEAF_NODE 7 , LEAF_NODE 7 0x2a LEAF_NODE 7 , LEAF_NODE 7 0x85 LEAF_NODE 7 , LEAF_NODE 7 0x03 LEAF_NODE 7 , LEAF_NODE 7 0x02 LEAF_NODE 7 , LEAF_NODE 7 0x02 LEAF_NODE 7 , LEAF_NODE 7 0x17 LEAF_NODE 6 } LEAF_NODE 6 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 limit - ret < 36 EXPR 8 limit - ret < 36 FIELD 9 limit LEAF_NODE 10 limit LEAF_NODE 9 - FIELD 9 ret LEAF_NODE 10 ret REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 36 LEAF_NODE 10 36 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return NULL ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 NULL EXPR 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 9 ; EXPR_STATEMENT 6 memcpy ( ret , cryptopro_ext , 36 ) ; EXPR 7 memcpy ( ret , cryptopro_ext , 36 ) FUNCTION_CALL 8 memcpy ( ret , cryptopro_ext , 36 ) CALLEE 9 memcpy LEAF_NODE 10 memcpy LEAF_NODE 9 ( ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 , ARGUMENT 9 cryptopro_ext FIELD 10 cryptopro_ext LEAF_NODE 11 cryptopro_ext LEAF_NODE 9 , ARGUMENT 9 36 FIELD 10 36 LEAF_NODE 11 36 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ret += 36 ; EXPR 7 ret += 36 ASSIGN 8 ret += 36 LVAL 9 ret FIELD 10 ret LEAF_NODE 11 ret ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 36 FIELD 10 36 LEAF_NODE 11 36 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> tlsext_heartbeat & SSL_TLSEXT_HB_ENABLED EXPR 5 s -> tlsext_heartbeat & SSL_TLSEXT_HB_ENABLED FIELD 6 s -> tlsext_heartbeat LEAF_NODE 7 s LEAF_NODE 7 -> LEAF_NODE 7 tlsext_heartbeat LEAF_NODE 6 & FIELD 6 SSL_TLSEXT_HB_ENABLED LEAF_NODE 7 SSL_TLSEXT_HB_ENABLED LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 s2n ( TLSEXT_TYPE_heartbeat , ret ) ; EXPR 7 s2n ( TLSEXT_TYPE_heartbeat , ret ) FUNCTION_CALL 8 s2n ( TLSEXT_TYPE_heartbeat , ret ) CALLEE 9 s2n LEAF_NODE 10 s2n LEAF_NODE 9 ( ARGUMENT 9 TLSEXT_TYPE_heartbeat FIELD 10 TLSEXT_TYPE_heartbeat LEAF_NODE 11 TLSEXT_TYPE_heartbeat LEAF_NODE 9 , ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s2n ( 1 , ret ) ; EXPR 7 s2n ( 1 , ret ) FUNCTION_CALL 8 s2n ( 1 , ret ) CALLEE 9 s2n LEAF_NODE 10 s2n LEAF_NODE 9 ( ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 , ARGUMENT 9 ret FIELD 10 ret LEAF_NODE 11 ret LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 s -> tlsext_heartbeat & SSL_TLSEXT_HB_DONT_RECV_REQUESTS EXPR 8 s -> tlsext_heartbeat & SSL_TLSEXT_HB_DONT_RECV_REQUESTS FIELD 9 s -> tlsext_heartbeat LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 tlsext_heartbeat LEAF_NODE 9 & FIELD 9 SSL_TLSEXT_HB_DONT_RECV_REQUESTS LEAF_NODE 10 SSL_TLSEXT_HB_DONT_RECV_REQUESTS LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 * ( ret ++ ) = SSL_TLSEXT_HB_DONT_SEND_REQUESTS ; EXPR 9 * ( ret ++ ) = SSL_TLSEXT_HB_DONT_SEND_REQUESTS ASSIGN 10 * ( ret ++ ) = SSL_TLSEXT_HB_DONT_SEND_REQUESTS LVAL 11 * ( ret ++ ) UNARY_EXPR 12 * ( ret ++ ) UNARY_OPERATOR 13 * LEAF_NODE 14 * LEAF_NODE 13 ( FIELD 13 ret ++ LEAF_NODE 14 ret LEAF_NODE 14 ++ LEAF_NODE 13 ) ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 SSL_TLSEXT_HB_DONT_SEND_REQUESTS FIELD 12 SSL_TLSEXT_HB_DONT_SEND_REQUESTS LEAF_NODE 13 SSL_TLSEXT_HB_DONT_SEND_REQUESTS LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 EXPR_STATEMENT 8 * ( ret ++ ) = SSL_TLSEXT_HB_ENABLED ; EXPR 9 * ( ret ++ ) = SSL_TLSEXT_HB_ENABLED ASSIGN 10 * ( ret ++ ) = SSL_TLSEXT_HB_ENABLED LVAL 11 * ( ret ++ ) UNARY_EXPR 12 * ( ret ++ ) UNARY_OPERATOR 13 * LEAF_NODE 14 * LEAF_NODE 13 ( FIELD 13 ret ++ LEAF_NODE 14 ret LEAF_NODE 14 ++ LEAF_NODE 13 ) ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 SSL_TLSEXT_HB_ENABLED FIELD 12 SSL_TLSEXT_HB_ENABLED LEAF_NODE 13 SSL_TLSEXT_HB_ENABLED LEAF_NODE 9 ; LEAF_NODE 5 } EXPR_STATEMENT 3 next_proto_neg_seen = s -> s3 -> next_proto_neg_seen ; EXPR 4 next_proto_neg_seen = s -> s3 -> next_proto_neg_seen ASSIGN 5 next_proto_neg_seen = s -> s3 -> next_proto_neg_seen LVAL 6 next_proto_neg_seen FIELD 7 next_proto_neg_seen LEAF_NODE 8 next_proto_neg_seen ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 s -> s3 -> next_proto_neg_seen FIELD 7 s -> s3 -> next_proto_neg_seen LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s3 LEAF_NODE 8 -> LEAF_NODE 8 next_proto_neg_seen LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> s3 -> next_proto_neg_seen = 0 ; EXPR 4 s -> s3 -> next_proto_neg_seen = 0 ASSIGN 5 s -> s3 -> next_proto_neg_seen = 0 LVAL 6 s -> s3 -> next_proto_neg_seen FIELD 7 s -> s3 -> next_proto_neg_seen LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s3 LEAF_NODE 8 -> LEAF_NODE 8 next_proto_neg_seen ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 next_proto_neg_seen && s -> ctx -> next_protos_advertised_cb EXPR 5 next_proto_neg_seen && s -> ctx -> next_protos_advertised_cb AND 6 next_proto_neg_seen && s -> ctx -> next_protos_advertised_cb EXPR 7 next_proto_neg_seen FIELD 8 next_proto_neg_seen LEAF_NODE 9 next_proto_neg_seen LEAF_NODE 7 && EXPR 7 s -> ctx -> next_protos_advertised_cb FIELD 8 s -> ctx -> next_protos_advertised_cb LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 ctx LEAF_NODE 9 -> LEAF_NODE 9 next_protos_advertised_cb LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 const unsigned char * npa ; VAR_DECL 7 const unsigned char * npa TYPE 8 const unsigned char * TYPE_NAME 9 const unsigned char LEAF_NODE 10 const LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 npa LEAF_NODE 9 npa LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned int npalen ; VAR_DECL 7 unsigned int npalen TYPE 8 unsigned int TYPE_NAME 9 unsigned int LEAF_NODE 10 unsigned LEAF_NODE 10 int NAME 8 npalen LEAF_NODE 9 npalen LEAF_NODE 7 ; SIMPLE_DECL 6 int r ; VAR_DECL 7 int r TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 r LEAF_NODE 9 r LEAF_NODE 7 ; EXPR_STATEMENT 6 r = s -> ctx -> next_protos_advertised_cb ( s , & npa , & npalen , s -> ctx -> next_protos_advertised_cb_arg ) ; EXPR 7 r = s -> ctx -> next_protos_advertised_cb ( s , & npa , & npalen , s -> ctx -> next_protos_advertised_cb_arg ) ASSIGN 8 r = s -> ctx -> next_protos_advertised_cb ( s , & npa , & npalen , s -> ctx -> next_protos_advertised_cb_arg ) LVAL 9 r FIELD 10 r LEAF_NODE 11 r ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 s -> ctx -> next_protos_advertised_cb ( s , & npa , & npalen , s -> ctx -> next_protos_advertised_cb_arg ) FUNCTION_CALL 10 s -> ctx -> next_protos_advertised_cb ( s , & npa , & npalen , s -> ctx -> next_protos_advertised_cb_arg ) CALLEE 11 s -> ctx -> next_protos_advertised_cb LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 ctx LEAF_NODE 12 -> LEAF_NODE 12 next_protos_advertised_cb LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 , ARGUMENT 11 & npa UNARY_EXPR 12 & npa UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 npa LEAF_NODE 14 npa LEAF_NODE 11 , ARGUMENT 11 & npalen UNARY_EXPR 12 & npalen UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 npalen LEAF_NODE 14 npalen LEAF_NODE 11 , ARGUMENT 11 s -> ctx -> next_protos_advertised_cb_arg FIELD 12 s -> ctx -> next_protos_advertised_cb_arg LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 ctx LEAF_NODE 13 -> LEAF_NODE 13 next_protos_advertised_cb_arg LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 r == SSL_TLSEXT_ERR_OK EXPR 8 r == SSL_TLSEXT_ERR_OK FIELD 9 r LEAF_NODE 10 r EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 SSL_TLSEXT_ERR_OK LEAF_NODE 10 SSL_TLSEXT_ERR_OK LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ( long ) ( limit - ret - 4 - npalen ) < 0 EXPR 11 ( long ) ( limit - ret - 4 - npalen ) < 0 LEAF_NODE 12 ( TYPE_NAME 12 long LEAF_NODE 13 long LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 limit LEAF_NODE 13 limit LEAF_NODE 12 - FIELD 12 ret LEAF_NODE 13 ret LEAF_NODE 12 - FIELD 12 4 LEAF_NODE 13 4 LEAF_NODE 12 - FIELD 12 npalen LEAF_NODE 13 npalen LEAF_NODE 12 ) REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 return NULL ; KEYWORD 12 return LEAF_NODE 13 return DESTINATION 12 NULL EXPR 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 12 ; EXPR_STATEMENT 9 s2n ( TLSEXT_TYPE_next_proto_neg , ret ) ; EXPR 10 s2n ( TLSEXT_TYPE_next_proto_neg , ret ) FUNCTION_CALL 11 s2n ( TLSEXT_TYPE_next_proto_neg , ret ) CALLEE 12 s2n LEAF_NODE 13 s2n LEAF_NODE 12 ( ARGUMENT 12 TLSEXT_TYPE_next_proto_neg FIELD 13 TLSEXT_TYPE_next_proto_neg LEAF_NODE 14 TLSEXT_TYPE_next_proto_neg LEAF_NODE 12 , ARGUMENT 12 ret FIELD 13 ret LEAF_NODE 14 ret LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 s2n ( npalen , ret ) ; EXPR 10 s2n ( npalen , ret ) FUNCTION_CALL 11 s2n ( npalen , ret ) CALLEE 12 s2n LEAF_NODE 13 s2n LEAF_NODE 12 ( ARGUMENT 12 npalen FIELD 13 npalen LEAF_NODE 14 npalen LEAF_NODE 12 , ARGUMENT 12 ret FIELD 13 ret LEAF_NODE 14 ret LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 memcpy ( ret , npa , npalen ) ; EXPR 10 memcpy ( ret , npa , npalen ) FUNCTION_CALL 11 memcpy ( ret , npa , npalen ) CALLEE 12 memcpy LEAF_NODE 13 memcpy LEAF_NODE 12 ( ARGUMENT 12 ret FIELD 13 ret LEAF_NODE 14 ret LEAF_NODE 12 , ARGUMENT 12 npa FIELD 13 npa LEAF_NODE 14 npa LEAF_NODE 12 , ARGUMENT 12 npalen FIELD 13 npalen LEAF_NODE 14 npalen LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ret += npalen ; EXPR 10 ret += npalen ASSIGN 11 ret += npalen LVAL 12 ret FIELD 13 ret LEAF_NODE 14 ret ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 npalen FIELD 13 npalen LEAF_NODE 14 npalen LEAF_NODE 10 ; EXPR_STATEMENT 9 s -> s3 -> next_proto_neg_seen = 1 ; EXPR 10 s -> s3 -> next_proto_neg_seen = 1 ASSIGN 11 s -> s3 -> next_proto_neg_seen = 1 LVAL 12 s -> s3 -> next_proto_neg_seen FIELD 13 s -> s3 -> next_proto_neg_seen LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 s3 LEAF_NODE 14 -> LEAF_NODE 14 next_proto_neg_seen ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( extdatalen = ret - p - 2 ) == 0 EXPR 5 ( extdatalen = ret - p - 2 ) == 0 LEAF_NODE 6 ( ASSIGN 6 extdatalen = ret - p - 2 LVAL 7 extdatalen FIELD 8 extdatalen LEAF_NODE 9 extdatalen ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ret - p - 2 FIELD 8 ret LEAF_NODE 9 ret LEAF_NODE 8 - FIELD 8 p LEAF_NODE 9 p LEAF_NODE 8 - FIELD 8 2 LEAF_NODE 9 2 LEAF_NODE 6 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return p ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 p EXPR 7 p FIELD 8 p LEAF_NODE 9 p LEAF_NODE 6 ; EXPR_STATEMENT 3 s2n ( extdatalen , p ) ; EXPR 4 s2n ( extdatalen , p ) FUNCTION_CALL 5 s2n ( extdatalen , p ) CALLEE 6 s2n LEAF_NODE 7 s2n LEAF_NODE 6 ( ARGUMENT 6 extdatalen FIELD 7 extdatalen LEAF_NODE 8 extdatalen LEAF_NODE 6 , ARGUMENT 6 p FIELD 7 p LEAF_NODE 8 p LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return ret ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ret EXPR 5 ret FIELD 6 ret LEAF_NODE 7 ret LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 199, "project": "openssl_ast_vul_function_test_8", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_TIME_print LEAF_NODE 3 ASN1_TIME_print PARAMETER_LIST 2 ( BIO * bp , const ASN1_TIME * tm ) LEAF_NODE 3 ( PARAMETER_DECL 3 BIO * bp TYPE 4 BIO * TYPE_NAME 5 BIO LEAF_NODE 6 BIO POINTER 5 * LEAF_NODE 6 * NAME 4 bp LEAF_NODE 5 bp LEAF_NODE 3 , PARAMETER_DECL 3 const ASN1_TIME * tm TYPE 4 const ASN1_TIME * TYPE_NAME 5 const ASN1_TIME LEAF_NODE 6 const LEAF_NODE 6 ASN1_TIME POINTER 5 * LEAF_NODE 6 * NAME 4 tm LEAF_NODE 5 tm LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * v ; VAR_DECL 4 char * v TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 v LEAF_NODE 6 v LEAF_NODE 4 ; SIMPLE_DECL 3 int gmt ; gmt = 0 , int l ; INIT_DECL_LIST 4 int gmt ; gmt = 0 , int l VAR_DECL 5 int gmt ; gmt = 0 TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 gmt LEAF_NODE 7 gmt LEAF_NODE 6 ; INIT 6 gmt = 0 ASSIGN 7 gmt = 0 LVAL 8 gmt NAME 9 gmt LEAF_NODE 10 gmt ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 5 , VAR_DECL 5 int l TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 l LEAF_NODE 7 l LEAF_NODE 4 ; SIMPLE_DECL 3 struct tm stm ; VAR_DECL 4 struct tm stm TYPE 5 struct tm TYPE_NAME 6 struct tm LEAF_NODE 7 struct LEAF_NODE 7 tm NAME 5 stm LEAF_NODE 6 stm LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! asn1_time_to_tm ( & stm , tm ) EXPR 5 ! asn1_time_to_tm ( & stm , tm ) UNARY_EXPR 6 ! asn1_time_to_tm ( & stm , tm ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 asn1_time_to_tm ( & stm , tm ) CALLEE 8 asn1_time_to_tm LEAF_NODE 9 asn1_time_to_tm LEAF_NODE 8 ( ARGUMENT 8 & stm UNARY_EXPR 9 & stm UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 stm LEAF_NODE 11 stm LEAF_NODE 8 , ARGUMENT 8 tm FIELD 9 tm LEAF_NODE 10 tm LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 JUMP_STATEMENT 6 goto err ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 err LEAF_NODE 8 err LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 l = tm -> length ; EXPR 4 l = tm -> length ASSIGN 5 l = tm -> length LVAL 6 l FIELD 7 l LEAF_NODE 8 l ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 tm -> length FIELD 7 tm -> length LEAF_NODE 8 tm LEAF_NODE 8 -> LEAF_NODE 8 length LEAF_NODE 4 ; EXPR_STATEMENT 3 v = ( char * ) tm -> data ; EXPR 4 v = ( char * ) tm -> data ASSIGN 5 v = ( char * ) tm -> data LVAL 6 v FIELD 7 v LEAF_NODE 8 v ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) tm -> data LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FIELD 7 tm -> data LEAF_NODE 8 tm LEAF_NODE 8 -> LEAF_NODE 8 data LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 v [ l - 1 ] == 'Z' EXPR 5 v [ l - 1 ] == 'Z' FIELD 6 v [ l - 1 ] LEAF_NODE 7 v LEAF_NODE 7 [ EXPR 7 l - 1 FIELD 8 l LEAF_NODE 9 l LEAF_NODE 8 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ] EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 'Z' LEAF_NODE 7 'Z' LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 gmt = 1 ; EXPR 6 gmt = 1 ASSIGN 7 gmt = 1 LVAL 8 gmt FIELD 9 gmt LEAF_NODE 10 gmt ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 tm -> type == V_ASN1_GENERALIZEDTIME EXPR 5 tm -> type == V_ASN1_GENERALIZEDTIME FIELD 6 tm -> type LEAF_NODE 7 tm LEAF_NODE 7 -> LEAF_NODE 7 type EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 V_ASN1_GENERALIZEDTIME LEAF_NODE 7 V_ASN1_GENERALIZEDTIME LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 char * f ; f = NULL ; VAR_DECL 7 char * f ; f = NULL TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 f LEAF_NODE 9 f LEAF_NODE 8 ; INIT 8 f = NULL ASSIGN 9 f = NULL LVAL 10 f NAME 11 f LEAF_NODE 12 f ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 7 ; SIMPLE_DECL 6 int f_len ; f_len = 0 ; VAR_DECL 7 int f_len ; f_len = 0 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 f_len LEAF_NODE 9 f_len LEAF_NODE 8 ; INIT 8 f_len = 0 ASSIGN 9 f_len = 0 LVAL 10 f_len NAME 11 f_len LEAF_NODE 12 f_len ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 tm -> length > 15 && v [ 14 ] == '.' EXPR 8 tm -> length > 15 && v [ 14 ] == '.' AND 9 tm -> length > 15 && v [ 14 ] == '.' EXPR 10 tm -> length > 15 FIELD 11 tm -> length LEAF_NODE 12 tm LEAF_NODE 12 -> LEAF_NODE 12 length REL_OPERATOR 11 > LEAF_NODE 12 > FIELD 11 15 LEAF_NODE 12 15 LEAF_NODE 10 && EXPR 10 v [ 14 ] == '.' FIELD 11 v [ 14 ] LEAF_NODE 12 v LEAF_NODE 12 [ EXPR 12 14 FIELD 13 14 LEAF_NODE 14 14 LEAF_NODE 12 ] EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 '.' LEAF_NODE 12 '.' LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 f = & v [ 14 ] ; EXPR 10 f = & v [ 14 ] ASSIGN 11 f = & v [ 14 ] LVAL 12 f FIELD 13 f LEAF_NODE 14 f ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 & v [ 14 ] UNARY_EXPR 13 & v [ 14 ] UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 v [ 14 ] LEAF_NODE 15 v LEAF_NODE 15 [ EXPR 15 14 FIELD 16 14 LEAF_NODE 17 14 LEAF_NODE 15 ] LEAF_NODE 10 ; EXPR_STATEMENT 9 f_len = 1 ; EXPR 10 f_len = 1 ASSIGN 11 f_len = 1 LVAL 12 f_len FIELD 13 f_len LEAF_NODE 14 f_len ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; ITERATION 9 KEYWORD 10 while LEAF_NODE 11 while LEAF_NODE 10 ( CONDITION 10 14 + f_len < l && ossl_isdigit ( f [ f_len ] ) EXPR 11 14 + f_len < l && ossl_isdigit ( f [ f_len ] ) AND 12 14 + f_len < l && ossl_isdigit ( f [ f_len ] ) EXPR 13 14 + f_len < l FIELD 14 14 LEAF_NODE 15 14 LEAF_NODE 14 + FIELD 14 f_len LEAF_NODE 15 f_len REL_OPERATOR 14 < LEAF_NODE 15 < FIELD 14 l LEAF_NODE 15 l LEAF_NODE 13 && EXPR 13 ossl_isdigit ( f [ f_len ] ) FUNCTION_CALL 14 ossl_isdigit ( f [ f_len ] ) CALLEE 15 ossl_isdigit LEAF_NODE 16 ossl_isdigit LEAF_NODE 15 ( ARGUMENT 15 f [ f_len ] FIELD 16 f [ f_len ] LEAF_NODE 17 f LEAF_NODE 17 [ EXPR 17 f_len FIELD 18 f_len LEAF_NODE 19 f_len LEAF_NODE 17 ] LEAF_NODE 15 ) LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 ++ f_len ; EXPR 12 ++ f_len LEAF_NODE 13 ++ FIELD 13 f_len LEAF_NODE 14 f_len LEAF_NODE 12 ; LEAF_NODE 8 } JUMP_STATEMENT 6 return BIO_printf ( bp , \"%s %2d %02d:%02d:%02d%.*s %d%s\" , _asn1_mon [ stm . tm_mon ] , stm . tm_mday , stm . tm_hour , stm . tm_min , stm . tm_sec , f_len , f , stm . tm_year + 1900 , ( gmt ? \" GMT\" : \"\" ) ) > 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 BIO_printf ( bp , \"%s %2d %02d:%02d:%02d%.*s %d%s\" , _asn1_mon [ stm . tm_mon ] , stm . tm_mday , stm . tm_hour , stm . tm_min , stm . tm_sec , f_len , f , stm . tm_year + 1900 , ( gmt ? \" GMT\" : \"\" ) ) > 0 EXPR 8 BIO_printf ( bp , \"%s %2d %02d:%02d:%02d%.*s %d%s\" , _asn1_mon [ stm . tm_mon ] , stm . tm_mday , stm . tm_hour , stm . tm_min , stm . tm_sec , f_len , f , stm . tm_year + 1900 , ( gmt ? \" GMT\" : \"\" ) ) > 0 FUNCTION_CALL 9 BIO_printf ( bp , \"%s %2d %02d:%02d:%02d%.*s %d%s\" , _asn1_mon [ stm . tm_mon ] , stm . tm_mday , stm . tm_hour , stm . tm_min , stm . tm_sec , f_len , f , stm . tm_year + 1900 , ( gmt ? \" GMT\" : \"\" ) ) CALLEE 10 BIO_printf LEAF_NODE 11 BIO_printf LEAF_NODE 10 ( ARGUMENT 10 bp FIELD 11 bp LEAF_NODE 12 bp LEAF_NODE 10 , ARGUMENT 10 \"%s %2d %02d:%02d:%02d%.*s %d%s\" FIELD 11 \"%s %2d %02d:%02d:%02d%.*s %d%s\" LEAF_NODE 12 \"%s %2d %02d:%02d:%02d%.*s %d%s\" LEAF_NODE 10 , ARGUMENT 10 _asn1_mon [ stm . tm_mon ] FIELD 11 _asn1_mon [ stm . tm_mon ] LEAF_NODE 12 _asn1_mon LEAF_NODE 12 [ EXPR 12 stm . tm_mon FIELD 13 stm . tm_mon LEAF_NODE 14 stm LEAF_NODE 14 . LEAF_NODE 14 tm_mon LEAF_NODE 12 ] LEAF_NODE 10 , ARGUMENT 10 stm . tm_mday FIELD 11 stm . tm_mday LEAF_NODE 12 stm LEAF_NODE 12 . LEAF_NODE 12 tm_mday LEAF_NODE 10 , ARGUMENT 10 stm . tm_hour FIELD 11 stm . tm_hour LEAF_NODE 12 stm LEAF_NODE 12 . LEAF_NODE 12 tm_hour LEAF_NODE 10 , ARGUMENT 10 stm . tm_min FIELD 11 stm . tm_min LEAF_NODE 12 stm LEAF_NODE 12 . LEAF_NODE 12 tm_min LEAF_NODE 10 , ARGUMENT 10 stm . tm_sec FIELD 11 stm . tm_sec LEAF_NODE 12 stm LEAF_NODE 12 . LEAF_NODE 12 tm_sec LEAF_NODE 10 , ARGUMENT 10 f_len FIELD 11 f_len LEAF_NODE 12 f_len LEAF_NODE 10 , ARGUMENT 10 f FIELD 11 f LEAF_NODE 12 f LEAF_NODE 10 , ARGUMENT 10 stm . tm_year + 1900 FIELD 11 stm . tm_year LEAF_NODE 12 stm LEAF_NODE 12 . LEAF_NODE 12 tm_year LEAF_NODE 11 + FIELD 11 1900 LEAF_NODE 12 1900 LEAF_NODE 10 , ARGUMENT 10 ( gmt ? \" GMT\" : \"\" ) LEAF_NODE 11 ( COND_EXPR 11 gmt ? \" GMT\" : \"\" CONDITION 12 gmt FIELD 13 gmt LEAF_NODE 14 gmt LEAF_NODE 12 ? EXPR 12 \" GMT\" FIELD 13 \" GMT\" LEAF_NODE 14 \" GMT\" LEAF_NODE 12 : FIELD 12 \"\" LEAF_NODE 13 \"\" LEAF_NODE 11 ) LEAF_NODE 10 ) REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 JUMP_STATEMENT 6 return BIO_printf ( bp , \"%s %2d %02d:%02d:%02d %d%s\" , _asn1_mon [ stm . tm_mon ] , stm . tm_mday , stm . tm_hour , stm . tm_min , stm . tm_sec , stm . tm_year + 1900 , ( gmt ? \" GMT\" : \"\" ) ) > 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 BIO_printf ( bp , \"%s %2d %02d:%02d:%02d %d%s\" , _asn1_mon [ stm . tm_mon ] , stm . tm_mday , stm . tm_hour , stm . tm_min , stm . tm_sec , stm . tm_year + 1900 , ( gmt ? \" GMT\" : \"\" ) ) > 0 EXPR 8 BIO_printf ( bp , \"%s %2d %02d:%02d:%02d %d%s\" , _asn1_mon [ stm . tm_mon ] , stm . tm_mday , stm . tm_hour , stm . tm_min , stm . tm_sec , stm . tm_year + 1900 , ( gmt ? \" GMT\" : \"\" ) ) > 0 FUNCTION_CALL 9 BIO_printf ( bp , \"%s %2d %02d:%02d:%02d %d%s\" , _asn1_mon [ stm . tm_mon ] , stm . tm_mday , stm . tm_hour , stm . tm_min , stm . tm_sec , stm . tm_year + 1900 , ( gmt ? \" GMT\" : \"\" ) ) CALLEE 10 BIO_printf LEAF_NODE 11 BIO_printf LEAF_NODE 10 ( ARGUMENT 10 bp FIELD 11 bp LEAF_NODE 12 bp LEAF_NODE 10 , ARGUMENT 10 \"%s %2d %02d:%02d:%02d %d%s\" FIELD 11 \"%s %2d %02d:%02d:%02d %d%s\" LEAF_NODE 12 \"%s %2d %02d:%02d:%02d %d%s\" LEAF_NODE 10 , ARGUMENT 10 _asn1_mon [ stm . tm_mon ] FIELD 11 _asn1_mon [ stm . tm_mon ] LEAF_NODE 12 _asn1_mon LEAF_NODE 12 [ EXPR 12 stm . tm_mon FIELD 13 stm . tm_mon LEAF_NODE 14 stm LEAF_NODE 14 . LEAF_NODE 14 tm_mon LEAF_NODE 12 ] LEAF_NODE 10 , ARGUMENT 10 stm . tm_mday FIELD 11 stm . tm_mday LEAF_NODE 12 stm LEAF_NODE 12 . LEAF_NODE 12 tm_mday LEAF_NODE 10 , ARGUMENT 10 stm . tm_hour FIELD 11 stm . tm_hour LEAF_NODE 12 stm LEAF_NODE 12 . LEAF_NODE 12 tm_hour LEAF_NODE 10 , ARGUMENT 10 stm . tm_min FIELD 11 stm . tm_min LEAF_NODE 12 stm LEAF_NODE 12 . LEAF_NODE 12 tm_min LEAF_NODE 10 , ARGUMENT 10 stm . tm_sec FIELD 11 stm . tm_sec LEAF_NODE 12 stm LEAF_NODE 12 . LEAF_NODE 12 tm_sec LEAF_NODE 10 , ARGUMENT 10 stm . tm_year + 1900 FIELD 11 stm . tm_year LEAF_NODE 12 stm LEAF_NODE 12 . LEAF_NODE 12 tm_year LEAF_NODE 11 + FIELD 11 1900 LEAF_NODE 12 1900 LEAF_NODE 10 , ARGUMENT 10 ( gmt ? \" GMT\" : \"\" ) LEAF_NODE 11 ( COND_EXPR 11 gmt ? \" GMT\" : \"\" CONDITION 12 gmt FIELD 13 gmt LEAF_NODE 14 gmt LEAF_NODE 12 ? EXPR 12 \" GMT\" FIELD 13 \" GMT\" LEAF_NODE 14 \" GMT\" LEAF_NODE 12 : FIELD 12 \"\" LEAF_NODE 13 \"\" LEAF_NODE 11 ) LEAF_NODE 10 ) REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } LABEL 3 err : LEAF_NODE 4 err LEAF_NODE 4 : EXPR_STATEMENT 3 BIO_write ( bp , \"Bad time value\" , 14 ) ; EXPR 4 BIO_write ( bp , \"Bad time value\" , 14 ) FUNCTION_CALL 5 BIO_write ( bp , \"Bad time value\" , 14 ) CALLEE 6 BIO_write LEAF_NODE 7 BIO_write LEAF_NODE 6 ( ARGUMENT 6 bp FIELD 7 bp LEAF_NODE 8 bp LEAF_NODE 6 , ARGUMENT 6 \"Bad time value\" FIELD 7 \"Bad time value\" LEAF_NODE 8 \"Bad time value\" LEAF_NODE 6 , ARGUMENT 6 14 FIELD 7 14 LEAF_NODE 8 14 LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 200, "project": "openssl_ast_normal_function_test_148", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 struct pw_cb_data BASE_CLASSES { const void * password ; const char * prompt_info ; } PW_CB_DATA ; VAR_DECL 2 struct pw_cb_data BASE_CLASSES { const void * password ; const char * prompt_info ; } PW_CB_DATA TYPE 3 struct pw_cb_data BASE_CLASSES { const void * password ; const char * prompt_info ; } CLASS_DEF 4 struct pw_cb_data BASE_CLASSES { const void * password ; const char * prompt_info ; } LEAF_NODE 5 struct CLASS_NAME 5 pw_cb_data LEAF_NODE 6 pw_cb_data LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 const void * password ; const char * prompt_info ; SIMPLE_DECL 6 const void * password ; VAR_DECL 7 const void * password TYPE 8 const void * TYPE_NAME 9 const void LEAF_NODE 10 const LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 password LEAF_NODE 9 password LEAF_NODE 7 ; SIMPLE_DECL 6 const char * prompt_info ; VAR_DECL 7 const char * prompt_info TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 prompt_info LEAF_NODE 9 prompt_info LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 PW_CB_DATA LEAF_NODE 4 PW_CB_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 UI_METHOD * ui_method ; ui_method = NULL ; VAR_DECL 2 UI_METHOD * ui_method ; ui_method = NULL TYPE 3 UI_METHOD * TYPE_NAME 4 UI_METHOD LEAF_NODE 5 UI_METHOD POINTER 4 * LEAF_NODE 5 * NAME 3 ui_method LEAF_NODE 4 ui_method LEAF_NODE 3 ; INIT 3 ui_method = NULL ASSIGN 4 ui_method = NULL LVAL 5 ui_method NAME 6 ui_method LEAF_NODE 7 ui_method ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 password_callback LEAF_NODE 3 password_callback PARAMETER_LIST 2 ( char * buf , int bufsiz , int verify , PW_CB_DATA * cb_tmp ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * buf TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 buf LEAF_NODE 5 buf LEAF_NODE 3 , PARAMETER_DECL 3 int bufsiz TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 bufsiz LEAF_NODE 5 bufsiz LEAF_NODE 3 , PARAMETER_DECL 3 int verify TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 verify LEAF_NODE 5 verify LEAF_NODE 3 , PARAMETER_DECL 3 PW_CB_DATA * cb_tmp TYPE 4 PW_CB_DATA * TYPE_NAME 5 PW_CB_DATA LEAF_NODE 6 PW_CB_DATA POINTER 5 * LEAF_NODE 6 * NAME 4 cb_tmp LEAF_NODE 5 cb_tmp LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int res ; res = 0 ; VAR_DECL 4 int res ; res = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 res LEAF_NODE 6 res LEAF_NODE 5 ; INIT 5 res = 0 ASSIGN 6 res = 0 LVAL 7 res NAME 8 res LEAF_NODE 9 res ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 UI * ui ; ui = NULL ; VAR_DECL 4 UI * ui ; ui = NULL TYPE 5 UI * TYPE_NAME 6 UI LEAF_NODE 7 UI POINTER 6 * LEAF_NODE 7 * NAME 5 ui LEAF_NODE 6 ui LEAF_NODE 5 ; INIT 5 ui = NULL ASSIGN 6 ui = NULL LVAL 7 ui NAME 8 ui LEAF_NODE 9 ui ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 PW_CB_DATA * cb_data ; cb_data = ( PW_CB_DATA * ) cb_tmp ; VAR_DECL 4 PW_CB_DATA * cb_data ; cb_data = ( PW_CB_DATA * ) cb_tmp TYPE 5 PW_CB_DATA * TYPE_NAME 6 PW_CB_DATA LEAF_NODE 7 PW_CB_DATA POINTER 6 * LEAF_NODE 7 * NAME 5 cb_data LEAF_NODE 6 cb_data LEAF_NODE 5 ; INIT 5 cb_data = ( PW_CB_DATA * ) cb_tmp ASSIGN 6 cb_data = ( PW_CB_DATA * ) cb_tmp LVAL 7 cb_data NAME 8 cb_data LEAF_NODE 9 cb_data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( PW_CB_DATA * ) cb_tmp LEAF_NODE 8 ( TYPE_NAME 8 PW_CB_DATA LEAF_NODE 9 PW_CB_DATA LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 cb_tmp LEAF_NODE 9 cb_tmp LEAF_NODE 4 ; EXPR_STATEMENT 3 ui = UI_new_method ( ui_method ) ; EXPR 4 ui = UI_new_method ( ui_method ) ASSIGN 5 ui = UI_new_method ( ui_method ) LVAL 6 ui FIELD 7 ui LEAF_NODE 8 ui ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 UI_new_method ( ui_method ) FUNCTION_CALL 7 UI_new_method ( ui_method ) CALLEE 8 UI_new_method LEAF_NODE 9 UI_new_method LEAF_NODE 8 ( ARGUMENT 8 ui_method FIELD 9 ui_method LEAF_NODE 10 ui_method LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ui EXPR 5 ui FIELD 6 ui LEAF_NODE 7 ui LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int ok ; ok = 0 ; VAR_DECL 7 int ok ; ok = 0 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 ok LEAF_NODE 9 ok LEAF_NODE 8 ; INIT 8 ok = 0 ASSIGN 9 ok = 0 LVAL 10 ok NAME 11 ok LEAF_NODE 12 ok ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ; SIMPLE_DECL 6 char * buff ; buff = NULL ; VAR_DECL 7 char * buff ; buff = NULL TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 buff LEAF_NODE 9 buff LEAF_NODE 8 ; INIT 8 buff = NULL ASSIGN 9 buff = NULL LVAL 10 buff NAME 11 buff LEAF_NODE 12 buff ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 7 ; SIMPLE_DECL 6 int ui_flags ; ui_flags = 0 ; VAR_DECL 7 int ui_flags ; ui_flags = 0 TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 ui_flags LEAF_NODE 9 ui_flags LEAF_NODE 8 ; INIT 8 ui_flags = 0 ASSIGN 9 ui_flags = 0 LVAL 10 ui_flags NAME 11 ui_flags LEAF_NODE 12 ui_flags ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ; SIMPLE_DECL 6 const char * prompt_info ; prompt_info = NULL ; VAR_DECL 7 const char * prompt_info ; prompt_info = NULL TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 prompt_info LEAF_NODE 9 prompt_info LEAF_NODE 8 ; INIT 8 prompt_info = NULL ASSIGN 9 prompt_info = NULL LVAL 10 prompt_info NAME 11 prompt_info LEAF_NODE 12 prompt_info ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 7 ; SIMPLE_DECL 6 char * prompt ; VAR_DECL 7 char * prompt TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 prompt LEAF_NODE 9 prompt LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 cb_data != NULL && cb_data -> prompt_info != NULL EXPR 8 cb_data != NULL && cb_data -> prompt_info != NULL AND 9 cb_data != NULL && cb_data -> prompt_info != NULL EXPR 10 cb_data != NULL FIELD 11 cb_data LEAF_NODE 12 cb_data EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 10 && EXPR 10 cb_data -> prompt_info != NULL FIELD 11 cb_data -> prompt_info LEAF_NODE 12 cb_data LEAF_NODE 12 -> LEAF_NODE 12 prompt_info EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 prompt_info = cb_data -> prompt_info ; EXPR 9 prompt_info = cb_data -> prompt_info ASSIGN 10 prompt_info = cb_data -> prompt_info LVAL 11 prompt_info FIELD 12 prompt_info LEAF_NODE 13 prompt_info ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 cb_data -> prompt_info FIELD 12 cb_data -> prompt_info LEAF_NODE 13 cb_data LEAF_NODE 13 -> LEAF_NODE 13 prompt_info LEAF_NODE 9 ; EXPR_STATEMENT 6 prompt = UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) ; EXPR 7 prompt = UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) ASSIGN 8 prompt = UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) LVAL 9 prompt FIELD 10 prompt LEAF_NODE 11 prompt ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) FUNCTION_CALL 10 UI_construct_prompt ( ui , \"pass phrase\" , prompt_info ) CALLEE 11 UI_construct_prompt LEAF_NODE 12 UI_construct_prompt LEAF_NODE 11 ( ARGUMENT 11 ui FIELD 12 ui LEAF_NODE 13 ui LEAF_NODE 11 , ARGUMENT 11 \"pass phrase\" FIELD 12 \"pass phrase\" LEAF_NODE 13 \"pass phrase\" LEAF_NODE 11 , ARGUMENT 11 prompt_info FIELD 12 prompt_info LEAF_NODE 13 prompt_info LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! prompt EXPR 8 ! prompt UNARY_EXPR 9 ! prompt UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FIELD 10 prompt LEAF_NODE 11 prompt LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_printf ( bio_err , \"Out of memory\\n\" ) ; EXPR 10 BIO_printf ( bio_err , \"Out of memory\\n\" ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"Out of memory\\n\" ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"Out of memory\\n\" FIELD 13 \"Out of memory\\n\" LEAF_NODE 14 \"Out of memory\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 UI_free ( ui ) ; EXPR 10 UI_free ( ui ) FUNCTION_CALL 11 UI_free ( ui ) CALLEE 12 UI_free LEAF_NODE 13 UI_free LEAF_NODE 12 ( ARGUMENT 12 ui FIELD 13 ui LEAF_NODE 14 ui LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return 0 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 0 EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 ui_flags |= UI_INPUT_FLAG_DEFAULT_PWD ; EXPR 7 ui_flags |= UI_INPUT_FLAG_DEFAULT_PWD ASSIGN 8 ui_flags |= UI_INPUT_FLAG_DEFAULT_PWD LVAL 9 ui_flags FIELD 10 ui_flags LEAF_NODE 11 ui_flags ASSIGN_OP 9 |= LEAF_NODE 10 |= RVAL 9 UI_INPUT_FLAG_DEFAULT_PWD FIELD 10 UI_INPUT_FLAG_DEFAULT_PWD LEAF_NODE 11 UI_INPUT_FLAG_DEFAULT_PWD LEAF_NODE 7 ; EXPR_STATEMENT 6 UI_ctrl ( ui , UI_CTRL_PRINT_ERRORS , 1 , 0 , 0 ) ; EXPR 7 UI_ctrl ( ui , UI_CTRL_PRINT_ERRORS , 1 , 0 , 0 ) FUNCTION_CALL 8 UI_ctrl ( ui , UI_CTRL_PRINT_ERRORS , 1 , 0 , 0 ) CALLEE 9 UI_ctrl LEAF_NODE 10 UI_ctrl LEAF_NODE 9 ( ARGUMENT 9 ui FIELD 10 ui LEAF_NODE 11 ui LEAF_NODE 9 , ARGUMENT 9 UI_CTRL_PRINT_ERRORS FIELD 10 UI_CTRL_PRINT_ERRORS LEAF_NODE 11 UI_CTRL_PRINT_ERRORS LEAF_NODE 9 , ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ( void ) UI_add_user_data ( ui , cb_data ) ; EXPR 7 ( void ) UI_add_user_data ( ui , cb_data ) LEAF_NODE 8 ( TYPE_NAME 8 void LEAF_NODE 9 void LEAF_NODE 8 ) FUNCTION_CALL 8 UI_add_user_data ( ui , cb_data ) CALLEE 9 UI_add_user_data LEAF_NODE 10 UI_add_user_data LEAF_NODE 9 ( ARGUMENT 9 ui FIELD 10 ui LEAF_NODE 11 ui LEAF_NODE 9 , ARGUMENT 9 cb_data FIELD 10 cb_data LEAF_NODE 11 cb_data LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ok = UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) ; EXPR 7 ok = UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) ASSIGN 8 ok = UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) LVAL 9 ok FIELD 10 ok LEAF_NODE 11 ok ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) FUNCTION_CALL 10 UI_add_input_string ( ui , prompt , ui_flags , buf , PW_MIN_LENGTH , bufsiz - 1 ) CALLEE 11 UI_add_input_string LEAF_NODE 12 UI_add_input_string LEAF_NODE 11 ( ARGUMENT 11 ui FIELD 12 ui LEAF_NODE 13 ui LEAF_NODE 11 , ARGUMENT 11 prompt FIELD 12 prompt LEAF_NODE 13 prompt LEAF_NODE 11 , ARGUMENT 11 ui_flags FIELD 12 ui_flags LEAF_NODE 13 ui_flags LEAF_NODE 11 , ARGUMENT 11 buf FIELD 12 buf LEAF_NODE 13 buf LEAF_NODE 11 , ARGUMENT 11 PW_MIN_LENGTH FIELD 12 PW_MIN_LENGTH LEAF_NODE 13 PW_MIN_LENGTH LEAF_NODE 11 , ARGUMENT 11 bufsiz - 1 FIELD 12 bufsiz LEAF_NODE 13 bufsiz LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok >= 0 && verify EXPR 8 ok >= 0 && verify AND 9 ok >= 0 && verify EXPR 10 ok >= 0 FIELD 11 ok LEAF_NODE 12 ok REL_OPERATOR 11 >= LEAF_NODE 12 >= FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 && EXPR 10 verify FIELD 11 verify LEAF_NODE 12 verify LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 buff = app_malloc ( bufsiz , \"password buffer\" ) ; EXPR 10 buff = app_malloc ( bufsiz , \"password buffer\" ) ASSIGN 11 buff = app_malloc ( bufsiz , \"password buffer\" ) LVAL 12 buff FIELD 13 buff LEAF_NODE 14 buff ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 app_malloc ( bufsiz , \"password buffer\" ) FUNCTION_CALL 13 app_malloc ( bufsiz , \"password buffer\" ) CALLEE 14 app_malloc LEAF_NODE 15 app_malloc LEAF_NODE 14 ( ARGUMENT 14 bufsiz FIELD 15 bufsiz LEAF_NODE 16 bufsiz LEAF_NODE 14 , ARGUMENT 14 \"password buffer\" FIELD 15 \"password buffer\" LEAF_NODE 16 \"password buffer\" LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ok = UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) ; EXPR 10 ok = UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) ASSIGN 11 ok = UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) LVAL 12 ok FIELD 13 ok LEAF_NODE 14 ok ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) FUNCTION_CALL 13 UI_add_verify_string ( ui , prompt , ui_flags , buff , PW_MIN_LENGTH , bufsiz - 1 , buf ) CALLEE 14 UI_add_verify_string LEAF_NODE 15 UI_add_verify_string LEAF_NODE 14 ( ARGUMENT 14 ui FIELD 15 ui LEAF_NODE 16 ui LEAF_NODE 14 , ARGUMENT 14 prompt FIELD 15 prompt LEAF_NODE 16 prompt LEAF_NODE 14 , ARGUMENT 14 ui_flags FIELD 15 ui_flags LEAF_NODE 16 ui_flags LEAF_NODE 14 , ARGUMENT 14 buff FIELD 15 buff LEAF_NODE 16 buff LEAF_NODE 14 , ARGUMENT 14 PW_MIN_LENGTH FIELD 15 PW_MIN_LENGTH LEAF_NODE 16 PW_MIN_LENGTH LEAF_NODE 14 , ARGUMENT 14 bufsiz - 1 FIELD 15 bufsiz LEAF_NODE 16 bufsiz LEAF_NODE 15 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 , ARGUMENT 14 buf FIELD 15 buf LEAF_NODE 16 buf LEAF_NODE 14 ) LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok >= 0 EXPR 8 ok >= 0 FIELD 9 ok LEAF_NODE 10 ok REL_OPERATOR 9 >= LEAF_NODE 10 >= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 ITERATION 8 KEYWORD 9 do LEAF_NODE 10 do LEAF_NODE 9 ( CONDITION 9 ok < 0 && UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) EXPR 10 ok < 0 && UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) AND 11 ok < 0 && UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) EXPR 12 ok < 0 FIELD 13 ok LEAF_NODE 14 ok REL_OPERATOR 13 < LEAF_NODE 14 < FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 && EXPR 12 UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) FUNCTION_CALL 13 UI_ctrl ( ui , UI_CTRL_IS_REDOABLE , 0 , 0 , 0 ) CALLEE 14 UI_ctrl LEAF_NODE 15 UI_ctrl LEAF_NODE 14 ( ARGUMENT 14 ui FIELD 15 ui LEAF_NODE 16 ui LEAF_NODE 14 , ARGUMENT 14 UI_CTRL_IS_REDOABLE FIELD 15 UI_CTRL_IS_REDOABLE LEAF_NODE 16 UI_CTRL_IS_REDOABLE LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 , ARGUMENT 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ) LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 ok = UI_process ( ui ) ; EXPR 12 ok = UI_process ( ui ) ASSIGN 13 ok = UI_process ( ui ) LVAL 14 ok FIELD 15 ok LEAF_NODE 16 ok ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 UI_process ( ui ) FUNCTION_CALL 15 UI_process ( ui ) CALLEE 16 UI_process LEAF_NODE 17 UI_process LEAF_NODE 16 ( ARGUMENT 16 ui FIELD 17 ui LEAF_NODE 18 ui LEAF_NODE 16 ) LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 6 ; EXPR_STATEMENT 6 OPENSSL_clear_free ( buff , ( unsigned int ) bufsiz ) ; EXPR 7 OPENSSL_clear_free ( buff , ( unsigned int ) bufsiz ) FUNCTION_CALL 8 OPENSSL_clear_free ( buff , ( unsigned int ) bufsiz ) CALLEE 9 OPENSSL_clear_free LEAF_NODE 10 OPENSSL_clear_free LEAF_NODE 9 ( ARGUMENT 9 buff FIELD 10 buff LEAF_NODE 11 buff LEAF_NODE 9 , ARGUMENT 9 ( unsigned int ) bufsiz LEAF_NODE 10 ( TYPE_NAME 10 unsigned int LEAF_NODE 11 unsigned LEAF_NODE 11 int LEAF_NODE 10 ) FIELD 10 bufsiz LEAF_NODE 11 bufsiz LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok >= 0 EXPR 8 ok >= 0 FIELD 9 ok LEAF_NODE 10 ok REL_OPERATOR 9 >= LEAF_NODE 10 >= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 res = strlen ( buf ) ; EXPR 9 res = strlen ( buf ) ASSIGN 10 res = strlen ( buf ) LVAL 11 res FIELD 12 res LEAF_NODE 13 res ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 strlen ( buf ) FUNCTION_CALL 12 strlen ( buf ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 buf FIELD 14 buf LEAF_NODE 15 buf LEAF_NODE 13 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok == - 1 EXPR 8 ok == - 1 FIELD 9 ok LEAF_NODE 10 ok EQ_OPERATOR 9 == LEAF_NODE 10 == UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_printf ( bio_err , \"User interface error\\n\" ) ; EXPR 10 BIO_printf ( bio_err , \"User interface error\\n\" ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"User interface error\\n\" ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"User interface error\\n\" FIELD 13 \"User interface error\\n\" LEAF_NODE 14 \"User interface error\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ERR_print_errors ( bio_err ) ; EXPR 10 ERR_print_errors ( bio_err ) FUNCTION_CALL 11 ERR_print_errors ( bio_err ) CALLEE 12 ERR_print_errors LEAF_NODE 13 ERR_print_errors LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) ; EXPR 10 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) FUNCTION_CALL 11 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) CALLEE 12 OPENSSL_cleanse LEAF_NODE 13 OPENSSL_cleanse LEAF_NODE 12 ( ARGUMENT 12 buf FIELD 13 buf LEAF_NODE 14 buf LEAF_NODE 12 , ARGUMENT 12 ( unsigned int ) bufsiz LEAF_NODE 13 ( TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int LEAF_NODE 13 ) FIELD 13 bufsiz LEAF_NODE 14 bufsiz LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 res = 0 ; EXPR 10 res = 0 ASSIGN 11 res = 0 LVAL 12 res FIELD 13 res LEAF_NODE 14 res ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ok == - 2 EXPR 8 ok == - 2 FIELD 9 ok LEAF_NODE 10 ok EQ_OPERATOR 9 == LEAF_NODE 10 == UNARY_EXPR 9 - 2 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 BIO_printf ( bio_err , \"aborted!\\n\" ) ; EXPR 10 BIO_printf ( bio_err , \"aborted!\\n\" ) FUNCTION_CALL 11 BIO_printf ( bio_err , \"aborted!\\n\" ) CALLEE 12 BIO_printf LEAF_NODE 13 BIO_printf LEAF_NODE 12 ( ARGUMENT 12 bio_err FIELD 13 bio_err LEAF_NODE 14 bio_err LEAF_NODE 12 , ARGUMENT 12 \"aborted!\\n\" FIELD 13 \"aborted!\\n\" LEAF_NODE 14 \"aborted!\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) ; EXPR 10 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) FUNCTION_CALL 11 OPENSSL_cleanse ( buf , ( unsigned int ) bufsiz ) CALLEE 12 OPENSSL_cleanse LEAF_NODE 13 OPENSSL_cleanse LEAF_NODE 12 ( ARGUMENT 12 buf FIELD 13 buf LEAF_NODE 14 buf LEAF_NODE 12 , ARGUMENT 12 ( unsigned int ) bufsiz LEAF_NODE 13 ( TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int LEAF_NODE 13 ) FIELD 13 bufsiz LEAF_NODE 14 bufsiz LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 res = 0 ; EXPR 10 res = 0 ASSIGN 11 res = 0 LVAL 12 res FIELD 13 res LEAF_NODE 14 res ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 UI_free ( ui ) ; EXPR 7 UI_free ( ui ) FUNCTION_CALL 8 UI_free ( ui ) CALLEE 9 UI_free LEAF_NODE 10 UI_free LEAF_NODE 9 ( ARGUMENT 9 ui FIELD 10 ui LEAF_NODE 11 ui LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 OPENSSL_free ( prompt ) ; EXPR 7 OPENSSL_free ( prompt ) FUNCTION_CALL 8 OPENSSL_free ( prompt ) CALLEE 9 OPENSSL_free LEAF_NODE 10 OPENSSL_free LEAF_NODE 9 ( ARGUMENT 9 prompt FIELD 10 prompt LEAF_NODE 11 prompt LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return res ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 res EXPR 5 res FIELD 6 res LEAF_NODE 7 res LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 X509 * TYPE_NAME 3 X509 LEAF_NODE 4 X509 LEAF_NODE 3 * FUNCTION_NAME 2 load_cert LEAF_NODE 3 load_cert PARAMETER_LIST 2 ( const char * file , int format , const char * cert_descrip ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * file TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 file LEAF_NODE 5 file LEAF_NODE 3 , PARAMETER_DECL 3 int format TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 format LEAF_NODE 5 format LEAF_NODE 3 , PARAMETER_DECL 3 const char * cert_descrip TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 cert_descrip LEAF_NODE 5 cert_descrip LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 X509 * x ; x = NULL ; VAR_DECL 4 X509 * x ; x = NULL TYPE 5 X509 * TYPE_NAME 6 X509 LEAF_NODE 7 X509 POINTER 6 * LEAF_NODE 7 * NAME 5 x LEAF_NODE 6 x LEAF_NODE 5 ; INIT 5 x = NULL ASSIGN 6 x = NULL LVAL 7 x NAME 8 x LEAF_NODE 9 x ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 BIO * cert ; VAR_DECL 4 BIO * cert TYPE 5 BIO * TYPE_NAME 6 BIO LEAF_NODE 7 BIO POINTER 6 * LEAF_NODE 7 * NAME 5 cert LEAF_NODE 6 cert LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 format == FORMAT_HTTP EXPR 5 format == FORMAT_HTTP FIELD 6 format LEAF_NODE 7 format EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 FORMAT_HTTP LEAF_NODE 7 FORMAT_HTTP LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 load_cert_crl_http ( file , & x , NULL ) ; EXPR 7 load_cert_crl_http ( file , & x , NULL ) FUNCTION_CALL 8 load_cert_crl_http ( file , & x , NULL ) CALLEE 9 load_cert_crl_http LEAF_NODE 10 load_cert_crl_http LEAF_NODE 9 ( ARGUMENT 9 file FIELD 10 file LEAF_NODE 11 file LEAF_NODE 9 , ARGUMENT 9 & x UNARY_EXPR 10 & x UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 x LEAF_NODE 12 x LEAF_NODE 9 , ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return x ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 x EXPR 8 x FIELD 9 x LEAF_NODE 10 x LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 file == NULL EXPR 5 file == NULL FIELD 6 file LEAF_NODE 7 file EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 unbuffer ( stdin ) ; EXPR 7 unbuffer ( stdin ) FUNCTION_CALL 8 unbuffer ( stdin ) CALLEE 9 unbuffer LEAF_NODE 10 unbuffer LEAF_NODE 9 ( ARGUMENT 9 stdin FIELD 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 cert = dup_bio_in ( format ) ; EXPR 7 cert = dup_bio_in ( format ) ASSIGN 8 cert = dup_bio_in ( format ) LVAL 9 cert FIELD 10 cert LEAF_NODE 11 cert ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 dup_bio_in ( format ) FUNCTION_CALL 10 dup_bio_in ( format ) CALLEE 11 dup_bio_in LEAF_NODE 12 dup_bio_in LEAF_NODE 11 ( ARGUMENT 11 format FIELD 12 format LEAF_NODE 13 format LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 cert = bio_open_default ( file , 'r' , format ) ; EXPR 7 cert = bio_open_default ( file , 'r' , format ) ASSIGN 8 cert = bio_open_default ( file , 'r' , format ) LVAL 9 cert FIELD 10 cert LEAF_NODE 11 cert ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 bio_open_default ( file , 'r' , format ) FUNCTION_CALL 10 bio_open_default ( file , 'r' , format ) CALLEE 11 bio_open_default LEAF_NODE 12 bio_open_default LEAF_NODE 11 ( ARGUMENT 11 file FIELD 12 file LEAF_NODE 13 file LEAF_NODE 11 , ARGUMENT 11 'r' FIELD 12 'r' LEAF_NODE 13 'r' LEAF_NODE 11 , ARGUMENT 11 format FIELD 12 format LEAF_NODE 13 format LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 cert == NULL EXPR 5 cert == NULL FIELD 6 cert LEAF_NODE 7 cert EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 goto end ; KEYWORD 6 goto LEAF_NODE 7 goto DESTINATION 6 end LEAF_NODE 7 end LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 format == FORMAT_ASN1 EXPR 5 format == FORMAT_ASN1 FIELD 6 format LEAF_NODE 7 format EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 FORMAT_ASN1 LEAF_NODE 7 FORMAT_ASN1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 x = d2i_X509_bio ( cert , NULL ) ; EXPR 7 x = d2i_X509_bio ( cert , NULL ) ASSIGN 8 x = d2i_X509_bio ( cert , NULL ) LVAL 9 x FIELD 10 x LEAF_NODE 11 x ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 d2i_X509_bio ( cert , NULL ) FUNCTION_CALL 10 d2i_X509_bio ( cert , NULL ) CALLEE 11 d2i_X509_bio LEAF_NODE 12 d2i_X509_bio LEAF_NODE 11 ( ARGUMENT 11 cert FIELD 12 cert LEAF_NODE 13 cert LEAF_NODE 11 , ARGUMENT 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 format == FORMAT_PEM EXPR 7 format == FORMAT_PEM FIELD 8 format LEAF_NODE 9 format EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 FORMAT_PEM LEAF_NODE 9 FORMAT_PEM LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 x = PEM_read_bio_X509_AUX ( cert , NULL , ( pem_password_cb * ) password_callback , NULL ) ; EXPR 9 x = PEM_read_bio_X509_AUX ( cert , NULL , ( pem_password_cb * ) password_callback , NULL ) ASSIGN 10 x = PEM_read_bio_X509_AUX ( cert , NULL , ( pem_password_cb * ) password_callback , NULL ) LVAL 11 x FIELD 12 x LEAF_NODE 13 x ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 PEM_read_bio_X509_AUX ( cert , NULL , ( pem_password_cb * ) password_callback , NULL ) FUNCTION_CALL 12 PEM_read_bio_X509_AUX ( cert , NULL , ( pem_password_cb * ) password_callback , NULL ) CALLEE 13 PEM_read_bio_X509_AUX LEAF_NODE 14 PEM_read_bio_X509_AUX LEAF_NODE 13 ( ARGUMENT 13 cert FIELD 14 cert LEAF_NODE 15 cert LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 , ARGUMENT 13 ( pem_password_cb * ) password_callback LEAF_NODE 14 ( TYPE_NAME 14 pem_password_cb LEAF_NODE 15 pem_password_cb LEAF_NODE 14 * LEAF_NODE 14 ) FIELD 14 password_callback LEAF_NODE 15 password_callback LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 ) LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 format == FORMAT_PKCS12 EXPR 7 format == FORMAT_PKCS12 FIELD 8 format LEAF_NODE 9 format EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 FORMAT_PKCS12 LEAF_NODE 9 FORMAT_PKCS12 LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ! load_pkcs12 ( cert , cert_descrip , NULL , NULL , NULL , & x , NULL ) EXPR 10 ! load_pkcs12 ( cert , cert_descrip , NULL , NULL , NULL , & x , NULL ) UNARY_EXPR 11 ! load_pkcs12 ( cert , cert_descrip , NULL , NULL , NULL , & x , NULL ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 load_pkcs12 ( cert , cert_descrip , NULL , NULL , NULL , & x , NULL ) CALLEE 13 load_pkcs12 LEAF_NODE 14 load_pkcs12 LEAF_NODE 13 ( ARGUMENT 13 cert FIELD 14 cert LEAF_NODE 15 cert LEAF_NODE 13 , ARGUMENT 13 cert_descrip FIELD 14 cert_descrip LEAF_NODE 15 cert_descrip LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 , ARGUMENT 13 & x UNARY_EXPR 14 & x UNARY_OPERATOR 15 & LEAF_NODE 16 & FIELD 15 x LEAF_NODE 16 x LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 ) LEAF_NODE 9 ) STATEMENTS 9 JUMP_STATEMENT 10 goto end ; KEYWORD 11 goto LEAF_NODE 12 goto DESTINATION 11 end LEAF_NODE 12 end LEAF_NODE 11 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 BIO_printf ( bio_err , \"bad input format specified for %s\\n\" , cert_descrip ) ; EXPR 7 BIO_printf ( bio_err , \"bad input format specified for %s\\n\" , cert_descrip ) FUNCTION_CALL 8 BIO_printf ( bio_err , \"bad input format specified for %s\\n\" , cert_descrip ) CALLEE 9 BIO_printf LEAF_NODE 10 BIO_printf LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 , ARGUMENT 9 \"bad input format specified for %s\\n\" FIELD 10 \"bad input format specified for %s\\n\" LEAF_NODE 11 \"bad input format specified for %s\\n\" LEAF_NODE 9 , ARGUMENT 9 cert_descrip FIELD 10 cert_descrip LEAF_NODE 11 cert_descrip LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 goto end ; KEYWORD 7 goto LEAF_NODE 8 goto DESTINATION 7 end LEAF_NODE 8 end LEAF_NODE 7 ; LEAF_NODE 5 } LABEL 3 end : LEAF_NODE 4 end LEAF_NODE 4 : SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 x == NULL EXPR 5 x == NULL FIELD 6 x LEAF_NODE 7 x EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 BIO_printf ( bio_err , \"unable to load certificate\\n\" ) ; EXPR 7 BIO_printf ( bio_err , \"unable to load certificate\\n\" ) FUNCTION_CALL 8 BIO_printf ( bio_err , \"unable to load certificate\\n\" ) CALLEE 9 BIO_printf LEAF_NODE 10 BIO_printf LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 , ARGUMENT 9 \"unable to load certificate\\n\" FIELD 10 \"unable to load certificate\\n\" LEAF_NODE 11 \"unable to load certificate\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ERR_print_errors ( bio_err ) ; EXPR 7 ERR_print_errors ( bio_err ) FUNCTION_CALL 8 ERR_print_errors ( bio_err ) CALLEE 9 ERR_print_errors LEAF_NODE 10 ERR_print_errors LEAF_NODE 9 ( ARGUMENT 9 bio_err FIELD 10 bio_err LEAF_NODE 11 bio_err LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 BIO_free ( cert ) ; EXPR 4 BIO_free ( cert ) FUNCTION_CALL 5 BIO_free ( cert ) CALLEE 6 BIO_free LEAF_NODE 7 BIO_free LEAF_NODE 6 ( ARGUMENT 6 cert FIELD 7 cert LEAF_NODE 8 cert LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return x ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 x EXPR 5 x FIELD 6 x LEAF_NODE 7 x LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 201, "project": "openssl_ast_normal_function_test_80", "target": 0}
{"func": "SIMPLE_DECL 1 struct bio_st BIO ; VAR_DECL 2 struct bio_st BIO TYPE 3 struct bio_st TYPE_NAME 4 struct bio_st LEAF_NODE 5 struct LEAF_NODE 5 bio_st NAME 3 BIO LEAF_NODE 4 BIO LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; VAR_DECL 2 BIO * bio_err TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 2 ; SIMPLE_DECL 1 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS ; VAR_DECL 2 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } ARGS TYPE 3 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } CLASS_DEF 4 struct args_st BASE_CLASSES { int size ; int argc ; char * argv ; } LEAF_NODE 5 struct CLASS_NAME 5 args_st LEAF_NODE 6 args_st LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int size ; int argc ; char * argv ; SIMPLE_DECL 6 int size ; VAR_DECL 7 int size TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 size LEAF_NODE 9 size LEAF_NODE 7 ; SIMPLE_DECL 6 int argc ; VAR_DECL 7 int argc TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 argc LEAF_NODE 9 argc LEAF_NODE 7 ; SIMPLE_DECL 6 char * argv ; VAR_DECL 7 char * argv TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 argv LEAF_NODE 9 argv LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 ARGS LEAF_NODE 4 ARGS LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 dump_cert_text LEAF_NODE 3 dump_cert_text PARAMETER_LIST 2 ( BIO * out , X509 * x ) LEAF_NODE 3 ( PARAMETER_DECL 3 BIO * out TYPE 4 BIO * TYPE_NAME 5 BIO LEAF_NODE 6 BIO POINTER 5 * LEAF_NODE 6 * NAME 4 out LEAF_NODE 5 out LEAF_NODE 3 , PARAMETER_DECL 3 X509 * x TYPE 4 X509 * TYPE_NAME 5 X509 LEAF_NODE 6 X509 POINTER 5 * LEAF_NODE 6 * NAME 4 x LEAF_NODE 5 x LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 print_name ( out , \"subject=\" , X509_get_subject_name ( x ) , get_nameopt ( ) ) ; EXPR 4 print_name ( out , \"subject=\" , X509_get_subject_name ( x ) , get_nameopt ( ) ) FUNCTION_CALL 5 print_name ( out , \"subject=\" , X509_get_subject_name ( x ) , get_nameopt ( ) ) CALLEE 6 print_name LEAF_NODE 7 print_name LEAF_NODE 6 ( ARGUMENT 6 out FIELD 7 out LEAF_NODE 8 out LEAF_NODE 6 , ARGUMENT 6 \"subject=\" FIELD 7 \"subject=\" LEAF_NODE 8 \"subject=\" LEAF_NODE 6 , ARGUMENT 6 X509_get_subject_name ( x ) FUNCTION_CALL 7 X509_get_subject_name ( x ) CALLEE 8 X509_get_subject_name LEAF_NODE 9 X509_get_subject_name LEAF_NODE 8 ( ARGUMENT 8 x FIELD 9 x LEAF_NODE 10 x LEAF_NODE 8 ) LEAF_NODE 6 , ARGUMENT 6 get_nameopt ( ) FUNCTION_CALL 7 get_nameopt ( ) CALLEE 8 get_nameopt LEAF_NODE 9 get_nameopt LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 BIO_puts ( out , \"\\n\" ) ; EXPR 4 BIO_puts ( out , \"\\n\" ) FUNCTION_CALL 5 BIO_puts ( out , \"\\n\" ) CALLEE 6 BIO_puts LEAF_NODE 7 BIO_puts LEAF_NODE 6 ( ARGUMENT 6 out FIELD 7 out LEAF_NODE 8 out LEAF_NODE 6 , ARGUMENT 6 \"\\n\" FIELD 7 \"\\n\" LEAF_NODE 8 \"\\n\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 print_name ( out , \"issuer=\" , X509_get_issuer_name ( x ) , get_nameopt ( ) ) ; EXPR 4 print_name ( out , \"issuer=\" , X509_get_issuer_name ( x ) , get_nameopt ( ) ) FUNCTION_CALL 5 print_name ( out , \"issuer=\" , X509_get_issuer_name ( x ) , get_nameopt ( ) ) CALLEE 6 print_name LEAF_NODE 7 print_name LEAF_NODE 6 ( ARGUMENT 6 out FIELD 7 out LEAF_NODE 8 out LEAF_NODE 6 , ARGUMENT 6 \"issuer=\" FIELD 7 \"issuer=\" LEAF_NODE 8 \"issuer=\" LEAF_NODE 6 , ARGUMENT 6 X509_get_issuer_name ( x ) FUNCTION_CALL 7 X509_get_issuer_name ( x ) CALLEE 8 X509_get_issuer_name LEAF_NODE 9 X509_get_issuer_name LEAF_NODE 8 ( ARGUMENT 8 x FIELD 9 x LEAF_NODE 10 x LEAF_NODE 8 ) LEAF_NODE 6 , ARGUMENT 6 get_nameopt ( ) FUNCTION_CALL 7 get_nameopt ( ) CALLEE 8 get_nameopt LEAF_NODE 9 get_nameopt LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 BIO_puts ( out , \"\\n\" ) ; EXPR 4 BIO_puts ( out , \"\\n\" ) FUNCTION_CALL 5 BIO_puts ( out , \"\\n\" ) CALLEE 6 BIO_puts LEAF_NODE 7 BIO_puts LEAF_NODE 6 ( ARGUMENT 6 out FIELD 7 out LEAF_NODE 8 out LEAF_NODE 6 , ARGUMENT 6 \"\\n\" FIELD 7 \"\\n\" LEAF_NODE 8 \"\\n\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 202, "project": "openssl_ast_normal_function_test_117", "target": 0}
{"func": "SIMPLE_DECL 1 uint16_t in_port_t ; VAR_DECL 2 uint16_t in_port_t TYPE 3 uint16_t TYPE_NAME 4 uint16_t LEAF_NODE 5 uint16_t NAME 3 in_port_t LEAF_NODE 4 in_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t in_addr_t ; VAR_DECL 2 uint32_t in_addr_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 in_addr_t LEAF_NODE 4 in_addr_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } ; CLASS_DEF 2 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } CLASS_DEF 3 struct in_addr BASE_CLASSES { in_addr_t s_addr ; } LEAF_NODE 4 struct CLASS_NAME 4 in_addr LEAF_NODE 5 in_addr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 in_addr_t s_addr ; SIMPLE_DECL 5 in_addr_t s_addr ; VAR_DECL 6 in_addr_t s_addr TYPE 7 in_addr_t TYPE_NAME 8 in_addr_t LEAF_NODE 9 in_addr_t NAME 7 s_addr LEAF_NODE 8 s_addr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } ; CLASS_DEF 2 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } CLASS_DEF 3 struct sockaddr BASE_CLASSES { __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr LEAF_NODE 5 sockaddr LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sa_ ) ; char [ 14 ] sa_data ; short sa_family ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sa_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 14 ] sa_data ; VAR_DECL 6 char [ 14 ] sa_data TYPE 7 char [ 14 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 14 ] LEAF_NODE 9 [ FIELD 9 14 LEAF_NODE 10 14 LEAF_NODE 9 ] NAME 7 sa_data LEAF_NODE 8 sa_data LEAF_NODE 6 ; SIMPLE_DECL 5 short sa_family ; VAR_DECL 6 short sa_family TYPE 7 short TYPE_NAME 8 short LEAF_NODE 9 short NAME 7 sa_family LEAF_NODE 8 sa_family LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } ; CLASS_DEF 2 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } CLASS_DEF 3 struct sockaddr_in BASE_CLASSES { __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; } LEAF_NODE 4 struct CLASS_NAME 4 sockaddr_in LEAF_NODE 5 sockaddr_in LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 __SOCKADDR_COMMON ( sin_ ) ; in_port_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ sizeof ( struct sockaddr ) - __SOCKADDR_COMMON_SIZE - sizeof ( in_port_t ) - sizeof ( struct in_addr ) ] ; LEAF_NODE 5 __SOCKADDR_COMMON LEAF_NODE 5 ( LEAF_NODE 5 sin_ LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 in_port_t sin_port ; VAR_DECL 6 in_port_t sin_port TYPE 7 in_port_t TYPE_NAME 8 in_port_t LEAF_NODE 9 in_port_t NAME 7 sin_port LEAF_NODE 8 sin_port LEAF_NODE 6 ; SIMPLE_DECL 5 struct in_addr sin_addr ; VAR_DECL 6 struct in_addr sin_addr TYPE 7 struct in_addr TYPE_NAME 8 struct in_addr LEAF_NODE 9 struct LEAF_NODE 9 in_addr NAME 7 sin_addr LEAF_NODE 8 sin_addr LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 sin_zero LEAF_NODE 5 [ LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 sockaddr LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 __SOCKADDR_COMMON_SIZE LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 in_port_t LEAF_NODE 5 ) LEAF_NODE 5 - LEAF_NODE 5 sizeof LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 in_addr LEAF_NODE 5 ) LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } ; CLASS_DEF 2 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } CLASS_DEF 3 union bio_addr_st BASE_CLASSES { struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; } LEAF_NODE 4 union CLASS_NAME 4 bio_addr_st LEAF_NODE 5 bio_addr_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct sockaddr sa ; struct sockaddr_in6 s_in6 ; struct sockaddr_in s_in ; struct sockaddr_un s_un ; SIMPLE_DECL 5 struct sockaddr sa ; VAR_DECL 6 struct sockaddr sa TYPE 7 struct sockaddr TYPE_NAME 8 struct sockaddr LEAF_NODE 9 struct LEAF_NODE 9 sockaddr NAME 7 sa LEAF_NODE 8 sa LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in6 s_in6 ; VAR_DECL 6 struct sockaddr_in6 s_in6 TYPE 7 struct sockaddr_in6 TYPE_NAME 8 struct sockaddr_in6 LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in6 NAME 7 s_in6 LEAF_NODE 8 s_in6 LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in s_in ; VAR_DECL 6 struct sockaddr_in s_in TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 s_in LEAF_NODE 8 s_in LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_un s_un ; VAR_DECL 6 struct sockaddr_un s_un TYPE 7 struct sockaddr_un TYPE_NAME 8 struct sockaddr_un LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_un NAME 7 s_un LEAF_NODE 8 s_un LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 union bio_addr_st BIO_ADDR ; VAR_DECL 2 union bio_addr_st BIO_ADDR TYPE 3 union bio_addr_st TYPE_NAME 4 union bio_addr_st LEAF_NODE 5 union LEAF_NODE 5 bio_addr_st NAME 3 BIO_ADDR LEAF_NODE 4 BIO_ADDR LEAF_NODE 2 ; SIMPLE_DECL 1 uint32_t socklen_t ; VAR_DECL 2 uint32_t socklen_t TYPE 3 uint32_t TYPE_NAME 4 uint32_t LEAF_NODE 5 uint32_t NAME 3 socklen_t LEAF_NODE 4 socklen_t LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 socklen_t TYPE_NAME 3 socklen_t LEAF_NODE 4 socklen_t FUNCTION_NAME 2 BIO_ADDR_sockaddr_size LEAF_NODE 3 BIO_ADDR_sockaddr_size PARAMETER_LIST 2 ( const BIO_ADDR * ap ) LEAF_NODE 3 ( PARAMETER_DECL 3 const BIO_ADDR * ap TYPE 4 const BIO_ADDR * TYPE_NAME 5 const BIO_ADDR LEAF_NODE 6 const LEAF_NODE 6 BIO_ADDR POINTER 5 * LEAF_NODE 6 * NAME 4 ap LEAF_NODE 5 ap LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ap -> sa . sa_family == AF_INET EXPR 5 ap -> sa . sa_family == AF_INET FIELD 6 ap -> sa . sa_family LEAF_NODE 7 ap LEAF_NODE 7 -> LEAF_NODE 7 sa LEAF_NODE 7 . LEAF_NODE 7 sa_family EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 AF_INET LEAF_NODE 7 AF_INET LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return sizeof ( ap -> s_in ) ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 sizeof ( ap -> s_in ) EXPR 7 sizeof ( ap -> s_in ) FUNCTION_CALL 8 sizeof ( ap -> s_in ) CALLEE 9 sizeof LEAF_NODE 10 sizeof LEAF_NODE 9 ( ARGUMENT 9 ap -> s_in FIELD 10 ap -> s_in LEAF_NODE 11 ap LEAF_NODE 11 -> LEAF_NODE 11 s_in LEAF_NODE 9 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ap -> sa . sa_family == AF_INET6 EXPR 5 ap -> sa . sa_family == AF_INET6 FIELD 6 ap -> sa . sa_family LEAF_NODE 7 ap LEAF_NODE 7 -> LEAF_NODE 7 sa LEAF_NODE 7 . LEAF_NODE 7 sa_family EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 AF_INET6 LEAF_NODE 7 AF_INET6 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return sizeof ( ap -> s_in6 ) ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 sizeof ( ap -> s_in6 ) EXPR 7 sizeof ( ap -> s_in6 ) FUNCTION_CALL 8 sizeof ( ap -> s_in6 ) CALLEE 9 sizeof LEAF_NODE 10 sizeof LEAF_NODE 9 ( ARGUMENT 9 ap -> s_in6 FIELD 10 ap -> s_in6 LEAF_NODE 11 ap LEAF_NODE 11 -> LEAF_NODE 11 s_in6 LEAF_NODE 9 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ap -> sa . sa_family == AF_UNIX EXPR 5 ap -> sa . sa_family == AF_UNIX FIELD 6 ap -> sa . sa_family LEAF_NODE 7 ap LEAF_NODE 7 -> LEAF_NODE 7 sa LEAF_NODE 7 . LEAF_NODE 7 sa_family EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 AF_UNIX LEAF_NODE 7 AF_UNIX LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return sizeof ( ap -> s_un ) ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 sizeof ( ap -> s_un ) EXPR 7 sizeof ( ap -> s_un ) FUNCTION_CALL 8 sizeof ( ap -> s_un ) CALLEE 9 sizeof LEAF_NODE 10 sizeof LEAF_NODE 9 ( ARGUMENT 9 ap -> s_un FIELD 10 ap -> s_un LEAF_NODE 11 ap LEAF_NODE 11 -> LEAF_NODE 11 s_un LEAF_NODE 9 ) LEAF_NODE 6 ; JUMP_STATEMENT 3 return sizeof ( * ap ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 sizeof ( * ap ) EXPR 5 sizeof ( * ap ) FUNCTION_CALL 6 sizeof ( * ap ) CALLEE 7 sizeof LEAF_NODE 8 sizeof LEAF_NODE 7 ( ARGUMENT 7 * ap UNARY_EXPR 8 * ap UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 ap LEAF_NODE 10 ap LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 203, "project": "openssl_ast_normal_function_test_167", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 send_fp_chars LEAF_NODE 3 send_fp_chars PARAMETER_LIST 2 ( void * arg , const void * buf , int len ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * arg TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 arg LEAF_NODE 5 arg LEAF_NODE 3 , PARAMETER_DECL 3 const void * buf TYPE 4 const void * TYPE_NAME 5 const void LEAF_NODE 6 const LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 buf LEAF_NODE 5 buf LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! arg EXPR 5 ! arg UNARY_EXPR 6 ! arg UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 arg LEAF_NODE 8 arg LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 1 EXPR 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 fwrite ( buf , 1 , len , arg ) != ( unsigned int ) len EXPR 5 fwrite ( buf , 1 , len , arg ) != ( unsigned int ) len FUNCTION_CALL 6 fwrite ( buf , 1 , len , arg ) CALLEE 7 fwrite LEAF_NODE 8 fwrite LEAF_NODE 7 ( ARGUMENT 7 buf FIELD 8 buf LEAF_NODE 9 buf LEAF_NODE 7 , ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 , ARGUMENT 7 len FIELD 8 len LEAF_NODE 9 len LEAF_NODE 7 , ARGUMENT 7 arg FIELD 8 arg LEAF_NODE 9 arg LEAF_NODE 7 ) EQ_OPERATOR 6 != LEAF_NODE 7 != LEAF_NODE 6 ( TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int LEAF_NODE 6 ) FIELD 6 len LEAF_NODE 7 len LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ASN1_STRING_print_ex_fp LEAF_NODE 3 ASN1_STRING_print_ex_fp PARAMETER_LIST 2 ( FILE * fp , const ASN1_STRING * str , unsigned long flags ) LEAF_NODE 3 ( PARAMETER_DECL 3 FILE * fp TYPE 4 FILE * TYPE_NAME 5 FILE LEAF_NODE 6 FILE POINTER 5 * LEAF_NODE 6 * NAME 4 fp LEAF_NODE 5 fp LEAF_NODE 3 , PARAMETER_DECL 3 const ASN1_STRING * str TYPE 4 const ASN1_STRING * TYPE_NAME 5 const ASN1_STRING LEAF_NODE 6 const LEAF_NODE 6 ASN1_STRING POINTER 5 * LEAF_NODE 6 * NAME 4 str LEAF_NODE 5 str LEAF_NODE 3 , PARAMETER_DECL 3 unsigned long flags TYPE 4 unsigned long TYPE_NAME 5 unsigned long LEAF_NODE 6 unsigned LEAF_NODE 6 long NAME 4 flags LEAF_NODE 5 flags LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return do_print_ex ( send_fp_chars , fp , flags , str ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 do_print_ex ( send_fp_chars , fp , flags , str ) EXPR 5 do_print_ex ( send_fp_chars , fp , flags , str ) FUNCTION_CALL 6 do_print_ex ( send_fp_chars , fp , flags , str ) CALLEE 7 do_print_ex LEAF_NODE 8 do_print_ex LEAF_NODE 7 ( ARGUMENT 7 send_fp_chars FIELD 8 send_fp_chars LEAF_NODE 9 send_fp_chars LEAF_NODE 7 , ARGUMENT 7 fp FIELD 8 fp LEAF_NODE 9 fp LEAF_NODE 7 , ARGUMENT 7 flags FIELD 8 flags LEAF_NODE 9 flags LEAF_NODE 7 , ARGUMENT 7 str FIELD 8 str LEAF_NODE 9 str LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 204, "project": "openssl_ast_normal_function_test_48", "target": 0}
{"func": "SIMPLE_DECL 1 struct cert_st cert ; VAR_DECL 2 struct cert_st cert TYPE 3 struct cert_st TYPE_NAME 4 struct cert_st LEAF_NODE 5 struct LEAF_NODE 5 cert_st NAME 3 cert LEAF_NODE 4 cert LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 tls1_set_shared_sigalgs LEAF_NODE 3 tls1_set_shared_sigalgs PARAMETER_LIST 2 ( SSL * s ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 const unsigned char * pref , const unsigned char * allow , const unsigned char * conf ; INIT_DECL_LIST 4 const unsigned char * pref , const unsigned char * allow , const unsigned char * conf VAR_DECL 5 const unsigned char * pref TYPE 6 const unsigned char * TYPE_NAME 7 const unsigned char LEAF_NODE 8 const LEAF_NODE 8 unsigned LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 pref LEAF_NODE 7 pref LEAF_NODE 5 , INIT_DECL_LIST 5 const unsigned char * allow , const unsigned char * conf VAR_DECL 6 const unsigned char * allow TYPE 7 const unsigned char * TYPE_NAME 8 const unsigned char LEAF_NODE 9 const LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 allow LEAF_NODE 8 allow LEAF_NODE 6 , VAR_DECL 6 const unsigned char * conf TYPE 7 const unsigned char * TYPE_NAME 8 const unsigned char LEAF_NODE 9 const LEAF_NODE 9 unsigned LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 conf LEAF_NODE 8 conf LEAF_NODE 4 ; SIMPLE_DECL 3 size_t preflen , size_t allowlen , size_t conflen ; INIT_DECL_LIST 4 size_t preflen , size_t allowlen , size_t conflen VAR_DECL 5 size_t preflen TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 preflen LEAF_NODE 7 preflen LEAF_NODE 5 , INIT_DECL_LIST 5 size_t allowlen , size_t conflen VAR_DECL 6 size_t allowlen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 allowlen LEAF_NODE 8 allowlen LEAF_NODE 6 , VAR_DECL 6 size_t conflen TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 conflen LEAF_NODE 8 conflen LEAF_NODE 4 ; SIMPLE_DECL 3 size_t nmatch ; VAR_DECL 4 size_t nmatch TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 nmatch LEAF_NODE 6 nmatch LEAF_NODE 4 ; SIMPLE_DECL 3 TLS_SIGALGS * salgs ; salgs = NULL ; VAR_DECL 4 TLS_SIGALGS * salgs ; salgs = NULL TYPE 5 TLS_SIGALGS * TYPE_NAME 6 TLS_SIGALGS LEAF_NODE 7 TLS_SIGALGS POINTER 6 * LEAF_NODE 7 * NAME 5 salgs LEAF_NODE 6 salgs LEAF_NODE 5 ; INIT 5 salgs = NULL ASSIGN 6 salgs = NULL LVAL 7 salgs NAME 8 salgs LEAF_NODE 9 salgs ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 cert * c ; c = s -> cert ; VAR_DECL 4 cert * c ; c = s -> cert TYPE 5 cert * TYPE_NAME 6 cert LEAF_NODE 7 cert POINTER 6 * LEAF_NODE 7 * NAME 5 c LEAF_NODE 6 c LEAF_NODE 5 ; INIT 5 c = s -> cert ASSIGN 6 c = s -> cert LVAL 7 c NAME 8 c LEAF_NODE 9 c ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 s -> cert FIELD 8 s -> cert LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 cert LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int is_suiteb ; is_suiteb = tls1_suiteb ( s ) ; VAR_DECL 4 unsigned int is_suiteb ; is_suiteb = tls1_suiteb ( s ) TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 is_suiteb LEAF_NODE 6 is_suiteb LEAF_NODE 5 ; INIT 5 is_suiteb = tls1_suiteb ( s ) ASSIGN 6 is_suiteb = tls1_suiteb ( s ) LVAL 7 is_suiteb NAME 8 is_suiteb LEAF_NODE 9 is_suiteb ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 tls1_suiteb ( s ) FUNCTION_CALL 8 tls1_suiteb ( s ) CALLEE 9 tls1_suiteb LEAF_NODE 10 tls1_suiteb LEAF_NODE 9 ( ARGUMENT 9 s FIELD 10 s LEAF_NODE 11 s LEAF_NODE 9 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! s -> server && c -> client_sigalgs && ! is_suiteb EXPR 5 ! s -> server && c -> client_sigalgs && ! is_suiteb AND 6 ! s -> server && c -> client_sigalgs && ! is_suiteb EXPR 7 ! s -> server UNARY_EXPR 8 ! s -> server UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 s -> server LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 server LEAF_NODE 7 && EXPR 7 c -> client_sigalgs && ! is_suiteb AND 8 c -> client_sigalgs && ! is_suiteb EXPR 9 c -> client_sigalgs FIELD 10 c -> client_sigalgs LEAF_NODE 11 c LEAF_NODE 11 -> LEAF_NODE 11 client_sigalgs LEAF_NODE 9 && EXPR 9 ! is_suiteb UNARY_EXPR 10 ! is_suiteb UNARY_OPERATOR 11 ! LEAF_NODE 12 ! FIELD 11 is_suiteb LEAF_NODE 12 is_suiteb LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 conf = c -> client_sigalgs ; EXPR 7 conf = c -> client_sigalgs ASSIGN 8 conf = c -> client_sigalgs LVAL 9 conf FIELD 10 conf LEAF_NODE 11 conf ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 c -> client_sigalgs FIELD 10 c -> client_sigalgs LEAF_NODE 11 c LEAF_NODE 11 -> LEAF_NODE 11 client_sigalgs LEAF_NODE 7 ; EXPR_STATEMENT 6 conflen = c -> client_sigalgslen ; EXPR 7 conflen = c -> client_sigalgslen ASSIGN 8 conflen = c -> client_sigalgslen LVAL 9 conflen FIELD 10 conflen LEAF_NODE 11 conflen ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 c -> client_sigalgslen FIELD 10 c -> client_sigalgslen LEAF_NODE 11 c LEAF_NODE 11 -> LEAF_NODE 11 client_sigalgslen LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 c -> conf_sigalgs && ! is_suiteb EXPR 7 c -> conf_sigalgs && ! is_suiteb AND 8 c -> conf_sigalgs && ! is_suiteb EXPR 9 c -> conf_sigalgs FIELD 10 c -> conf_sigalgs LEAF_NODE 11 c LEAF_NODE 11 -> LEAF_NODE 11 conf_sigalgs LEAF_NODE 9 && EXPR 9 ! is_suiteb UNARY_EXPR 10 ! is_suiteb UNARY_OPERATOR 11 ! LEAF_NODE 12 ! FIELD 11 is_suiteb LEAF_NODE 12 is_suiteb LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 conf = c -> conf_sigalgs ; EXPR 9 conf = c -> conf_sigalgs ASSIGN 10 conf = c -> conf_sigalgs LVAL 11 conf FIELD 12 conf LEAF_NODE 13 conf ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 c -> conf_sigalgs FIELD 12 c -> conf_sigalgs LEAF_NODE 13 c LEAF_NODE 13 -> LEAF_NODE 13 conf_sigalgs LEAF_NODE 9 ; EXPR_STATEMENT 8 conflen = c -> conf_sigalgslen ; EXPR 9 conflen = c -> conf_sigalgslen ASSIGN 10 conflen = c -> conf_sigalgslen LVAL 11 conflen FIELD 12 conflen LEAF_NODE 13 conflen ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 c -> conf_sigalgslen FIELD 12 c -> conf_sigalgslen LEAF_NODE 13 c LEAF_NODE 13 -> LEAF_NODE 13 conf_sigalgslen LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 EXPR_STATEMENT 5 conflen = tls12_get_psigalgs ( s , & conf ) ; EXPR 6 conflen = tls12_get_psigalgs ( s , & conf ) ASSIGN 7 conflen = tls12_get_psigalgs ( s , & conf ) LVAL 8 conflen FIELD 9 conflen LEAF_NODE 10 conflen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 tls12_get_psigalgs ( s , & conf ) FUNCTION_CALL 9 tls12_get_psigalgs ( s , & conf ) CALLEE 10 tls12_get_psigalgs LEAF_NODE 11 tls12_get_psigalgs LEAF_NODE 10 ( ARGUMENT 10 s FIELD 11 s LEAF_NODE 12 s LEAF_NODE 10 , ARGUMENT 10 & conf UNARY_EXPR 11 & conf UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 conf LEAF_NODE 13 conf LEAF_NODE 10 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 s -> options & SSL_OP_CIPHER_SERVER_PREFERENCE || is_suiteb EXPR 5 s -> options & SSL_OP_CIPHER_SERVER_PREFERENCE || is_suiteb OR 6 s -> options & SSL_OP_CIPHER_SERVER_PREFERENCE || is_suiteb EXPR 7 s -> options & SSL_OP_CIPHER_SERVER_PREFERENCE FIELD 8 s -> options LEAF_NODE 9 s LEAF_NODE 9 -> LEAF_NODE 9 options LEAF_NODE 8 & FIELD 8 SSL_OP_CIPHER_SERVER_PREFERENCE LEAF_NODE 9 SSL_OP_CIPHER_SERVER_PREFERENCE LEAF_NODE 7 || EXPR 7 is_suiteb FIELD 8 is_suiteb LEAF_NODE 9 is_suiteb LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 pref = conf ; EXPR 7 pref = conf ASSIGN 8 pref = conf LVAL 9 pref FIELD 10 pref LEAF_NODE 11 pref ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 conf FIELD 10 conf LEAF_NODE 11 conf LEAF_NODE 7 ; EXPR_STATEMENT 6 preflen = conflen ; EXPR 7 preflen = conflen ASSIGN 8 preflen = conflen LVAL 9 preflen FIELD 10 preflen LEAF_NODE 11 preflen ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 conflen FIELD 10 conflen LEAF_NODE 11 conflen LEAF_NODE 7 ; EXPR_STATEMENT 6 allow = c -> peer_sigalgs ; EXPR 7 allow = c -> peer_sigalgs ASSIGN 8 allow = c -> peer_sigalgs LVAL 9 allow FIELD 10 allow LEAF_NODE 11 allow ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 c -> peer_sigalgs FIELD 10 c -> peer_sigalgs LEAF_NODE 11 c LEAF_NODE 11 -> LEAF_NODE 11 peer_sigalgs LEAF_NODE 7 ; EXPR_STATEMENT 6 allowlen = c -> peer_sigalgslen ; EXPR 7 allowlen = c -> peer_sigalgslen ASSIGN 8 allowlen = c -> peer_sigalgslen LVAL 9 allowlen FIELD 10 allowlen LEAF_NODE 11 allowlen ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 c -> peer_sigalgslen FIELD 10 c -> peer_sigalgslen LEAF_NODE 11 c LEAF_NODE 11 -> LEAF_NODE 11 peer_sigalgslen LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 allow = conf ; EXPR 7 allow = conf ASSIGN 8 allow = conf LVAL 9 allow FIELD 10 allow LEAF_NODE 11 allow ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 conf FIELD 10 conf LEAF_NODE 11 conf LEAF_NODE 7 ; EXPR_STATEMENT 6 allowlen = conflen ; EXPR 7 allowlen = conflen ASSIGN 8 allowlen = conflen LVAL 9 allowlen FIELD 10 allowlen LEAF_NODE 11 allowlen ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 conflen FIELD 10 conflen LEAF_NODE 11 conflen LEAF_NODE 7 ; EXPR_STATEMENT 6 pref = c -> peer_sigalgs ; EXPR 7 pref = c -> peer_sigalgs ASSIGN 8 pref = c -> peer_sigalgs LVAL 9 pref FIELD 10 pref LEAF_NODE 11 pref ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 c -> peer_sigalgs FIELD 10 c -> peer_sigalgs LEAF_NODE 11 c LEAF_NODE 11 -> LEAF_NODE 11 peer_sigalgs LEAF_NODE 7 ; EXPR_STATEMENT 6 preflen = c -> peer_sigalgslen ; EXPR 7 preflen = c -> peer_sigalgslen ASSIGN 8 preflen = c -> peer_sigalgslen LVAL 9 preflen FIELD 10 preflen LEAF_NODE 11 preflen ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 c -> peer_sigalgslen FIELD 10 c -> peer_sigalgslen LEAF_NODE 11 c LEAF_NODE 11 -> LEAF_NODE 11 peer_sigalgslen LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 nmatch = tls12_do_shared_sigalgs ( NULL , pref , preflen , allow , allowlen ) ; EXPR 4 nmatch = tls12_do_shared_sigalgs ( NULL , pref , preflen , allow , allowlen ) ASSIGN 5 nmatch = tls12_do_shared_sigalgs ( NULL , pref , preflen , allow , allowlen ) LVAL 6 nmatch FIELD 7 nmatch LEAF_NODE 8 nmatch ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 tls12_do_shared_sigalgs ( NULL , pref , preflen , allow , allowlen ) FUNCTION_CALL 7 tls12_do_shared_sigalgs ( NULL , pref , preflen , allow , allowlen ) CALLEE 8 tls12_do_shared_sigalgs LEAF_NODE 9 tls12_do_shared_sigalgs LEAF_NODE 8 ( ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 , ARGUMENT 8 pref FIELD 9 pref LEAF_NODE 10 pref LEAF_NODE 8 , ARGUMENT 8 preflen FIELD 9 preflen LEAF_NODE 10 preflen LEAF_NODE 8 , ARGUMENT 8 allow FIELD 9 allow LEAF_NODE 10 allow LEAF_NODE 8 , ARGUMENT 8 allowlen FIELD 9 allowlen LEAF_NODE 10 allowlen LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! nmatch EXPR 5 ! nmatch UNARY_EXPR 6 ! nmatch UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 nmatch LEAF_NODE 8 nmatch LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 1 EXPR 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 6 ; EXPR_STATEMENT 3 salgs = OPENSSL_malloc ( nmatch * sizeof ( TLS_SIGALGS ) ) ; EXPR 4 salgs = OPENSSL_malloc ( nmatch * sizeof ( TLS_SIGALGS ) ) ASSIGN 5 salgs = OPENSSL_malloc ( nmatch * sizeof ( TLS_SIGALGS ) ) LVAL 6 salgs FIELD 7 salgs LEAF_NODE 8 salgs ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 OPENSSL_malloc ( nmatch * sizeof ( TLS_SIGALGS ) ) FUNCTION_CALL 7 OPENSSL_malloc ( nmatch * sizeof ( TLS_SIGALGS ) ) CALLEE 8 OPENSSL_malloc LEAF_NODE 9 OPENSSL_malloc LEAF_NODE 8 ( ARGUMENT 8 nmatch * sizeof ( TLS_SIGALGS ) FIELD 9 nmatch LEAF_NODE 10 nmatch LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( TLS_SIGALGS ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 TLS_SIGALGS FIELD 11 TLS_SIGALGS LEAF_NODE 12 TLS_SIGALGS LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! salgs EXPR 5 ! salgs UNARY_EXPR 6 ! salgs UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 salgs LEAF_NODE 8 salgs LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 0 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 0 EXPR 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 ; EXPR_STATEMENT 3 nmatch = tls12_do_shared_sigalgs ( salgs , pref , preflen , allow , allowlen ) ; EXPR 4 nmatch = tls12_do_shared_sigalgs ( salgs , pref , preflen , allow , allowlen ) ASSIGN 5 nmatch = tls12_do_shared_sigalgs ( salgs , pref , preflen , allow , allowlen ) LVAL 6 nmatch FIELD 7 nmatch LEAF_NODE 8 nmatch ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 tls12_do_shared_sigalgs ( salgs , pref , preflen , allow , allowlen ) FUNCTION_CALL 7 tls12_do_shared_sigalgs ( salgs , pref , preflen , allow , allowlen ) CALLEE 8 tls12_do_shared_sigalgs LEAF_NODE 9 tls12_do_shared_sigalgs LEAF_NODE 8 ( ARGUMENT 8 salgs FIELD 9 salgs LEAF_NODE 10 salgs LEAF_NODE 8 , ARGUMENT 8 pref FIELD 9 pref LEAF_NODE 10 pref LEAF_NODE 8 , ARGUMENT 8 preflen FIELD 9 preflen LEAF_NODE 10 preflen LEAF_NODE 8 , ARGUMENT 8 allow FIELD 9 allow LEAF_NODE 10 allow LEAF_NODE 8 , ARGUMENT 8 allowlen FIELD 9 allowlen LEAF_NODE 10 allowlen LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 c -> shared_sigalgs = salgs ; EXPR 4 c -> shared_sigalgs = salgs ASSIGN 5 c -> shared_sigalgs = salgs LVAL 6 c -> shared_sigalgs FIELD 7 c -> shared_sigalgs LEAF_NODE 8 c LEAF_NODE 8 -> LEAF_NODE 8 shared_sigalgs ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 salgs FIELD 7 salgs LEAF_NODE 8 salgs LEAF_NODE 4 ; EXPR_STATEMENT 3 c -> shared_sigalgslen = nmatch ; EXPR 4 c -> shared_sigalgslen = nmatch ASSIGN 5 c -> shared_sigalgslen = nmatch LVAL 6 c -> shared_sigalgslen FIELD 7 c -> shared_sigalgslen LEAF_NODE 8 c LEAF_NODE 8 -> LEAF_NODE 8 shared_sigalgslen ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 nmatch FIELD 7 nmatch LEAF_NODE 8 nmatch LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 205, "project": "openssl_ast_vul_function_test_29", "target": 1}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 ASN1_STRING_set0 LEAF_NODE 3 ASN1_STRING_set0 PARAMETER_LIST 2 ( ASN1_STRING * str , void * data , int len ) LEAF_NODE 3 ( PARAMETER_DECL 3 ASN1_STRING * str TYPE 4 ASN1_STRING * TYPE_NAME 5 ASN1_STRING LEAF_NODE 6 ASN1_STRING POINTER 5 * LEAF_NODE 6 * NAME 4 str LEAF_NODE 5 str LEAF_NODE 3 , PARAMETER_DECL 3 void * data TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 OPENSSL_free ( str -> data ) ; EXPR 4 OPENSSL_free ( str -> data ) FUNCTION_CALL 5 OPENSSL_free ( str -> data ) CALLEE 6 OPENSSL_free LEAF_NODE 7 OPENSSL_free LEAF_NODE 6 ( ARGUMENT 6 str -> data FIELD 7 str -> data LEAF_NODE 8 str LEAF_NODE 8 -> LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 str -> data = data ; EXPR 4 str -> data = data ASSIGN 5 str -> data = data LVAL 6 str -> data FIELD 7 str -> data LEAF_NODE 8 str LEAF_NODE 8 -> LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 str -> length = len ; EXPR 4 str -> length = len ASSIGN 5 str -> length = len LVAL 6 str -> length FIELD 7 str -> length LEAF_NODE 8 str LEAF_NODE 8 -> LEAF_NODE 8 length ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 len FIELD 7 len LEAF_NODE 8 len LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 206, "project": "openssl_ast_normal_function_test_6", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 aria_set_encrypt_key LEAF_NODE 3 aria_set_encrypt_key PARAMETER_LIST 2 ( const unsigned char * userKey , const int bits , ARIA_KEY * key ) LEAF_NODE 3 ( PARAMETER_DECL 3 const unsigned char * userKey TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 userKey LEAF_NODE 5 userKey LEAF_NODE 3 , PARAMETER_DECL 3 const int bits TYPE 4 const int TYPE_NAME 5 const int LEAF_NODE 6 const LEAF_NODE 6 int NAME 4 bits LEAF_NODE 5 bits LEAF_NODE 3 , PARAMETER_DECL 3 ARIA_KEY * key TYPE 4 ARIA_KEY * TYPE_NAME 5 ARIA_KEY LEAF_NODE 6 ARIA_KEY POINTER 5 * LEAF_NODE 6 * NAME 4 key LEAF_NODE 5 key LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 register SIMPLE_DECL 3 uint32_t reg0 , uint32_t reg1 , uint32_t reg2 , uint32_t reg3 ; INIT_DECL_LIST 4 uint32_t reg0 , uint32_t reg1 , uint32_t reg2 , uint32_t reg3 VAR_DECL 5 uint32_t reg0 TYPE 6 uint32_t TYPE_NAME 7 uint32_t LEAF_NODE 8 uint32_t NAME 6 reg0 LEAF_NODE 7 reg0 LEAF_NODE 5 , INIT_DECL_LIST 5 uint32_t reg1 , uint32_t reg2 , uint32_t reg3 VAR_DECL 6 uint32_t reg1 TYPE 7 uint32_t TYPE_NAME 8 uint32_t LEAF_NODE 9 uint32_t NAME 7 reg1 LEAF_NODE 8 reg1 LEAF_NODE 6 , INIT_DECL_LIST 6 uint32_t reg2 , uint32_t reg3 VAR_DECL 7 uint32_t reg2 TYPE 8 uint32_t TYPE_NAME 9 uint32_t LEAF_NODE 10 uint32_t NAME 8 reg2 LEAF_NODE 9 reg2 LEAF_NODE 7 , VAR_DECL 7 uint32_t reg3 TYPE 8 uint32_t TYPE_NAME 9 uint32_t LEAF_NODE 10 uint32_t NAME 8 reg3 LEAF_NODE 9 reg3 LEAF_NODE 4 ; SIMPLE_DECL 3 uint32_t [ 4 ] w0 , uint32_t [ 4 ] w1 , uint32_t [ 4 ] w2 , uint32_t [ 4 ] w3 ; INIT_DECL_LIST 4 uint32_t [ 4 ] w0 , uint32_t [ 4 ] w1 , uint32_t [ 4 ] w2 , uint32_t [ 4 ] w3 VAR_DECL 5 uint32_t [ 4 ] w0 TYPE 6 uint32_t [ 4 ] TYPE_NAME 7 uint32_t LEAF_NODE 8 uint32_t TYPE_SUFFIX 7 [ 4 ] LEAF_NODE 8 [ FIELD 8 4 LEAF_NODE 9 4 LEAF_NODE 8 ] NAME 6 w0 LEAF_NODE 7 w0 LEAF_NODE 5 , INIT_DECL_LIST 5 uint32_t [ 4 ] w1 , uint32_t [ 4 ] w2 , uint32_t [ 4 ] w3 VAR_DECL 6 uint32_t [ 4 ] w1 TYPE 7 uint32_t [ 4 ] TYPE_NAME 8 uint32_t LEAF_NODE 9 uint32_t TYPE_SUFFIX 8 [ 4 ] LEAF_NODE 9 [ FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 9 ] NAME 7 w1 LEAF_NODE 8 w1 LEAF_NODE 6 , INIT_DECL_LIST 6 uint32_t [ 4 ] w2 , uint32_t [ 4 ] w3 VAR_DECL 7 uint32_t [ 4 ] w2 TYPE 8 uint32_t [ 4 ] TYPE_NAME 9 uint32_t LEAF_NODE 10 uint32_t TYPE_SUFFIX 9 [ 4 ] LEAF_NODE 10 [ FIELD 10 4 LEAF_NODE 11 4 LEAF_NODE 10 ] NAME 8 w2 LEAF_NODE 9 w2 LEAF_NODE 7 , VAR_DECL 7 uint32_t [ 4 ] w3 TYPE 8 uint32_t [ 4 ] TYPE_NAME 9 uint32_t LEAF_NODE 10 uint32_t TYPE_SUFFIX 9 [ 4 ] LEAF_NODE 10 [ FIELD 10 4 LEAF_NODE 11 4 LEAF_NODE 10 ] NAME 8 w3 LEAF_NODE 9 w3 LEAF_NODE 4 ; SIMPLE_DECL 3 const uint32_t * ck ; VAR_DECL 4 const uint32_t * ck TYPE 5 const uint32_t * TYPE_NAME 6 const uint32_t LEAF_NODE 7 const LEAF_NODE 7 uint32_t POINTER 6 * LEAF_NODE 7 * NAME 5 ck LEAF_NODE 6 ck LEAF_NODE 4 ; SIMPLE_DECL 3 ARIA_u128 * rk ; VAR_DECL 4 ARIA_u128 * rk TYPE 5 ARIA_u128 * TYPE_NAME 6 ARIA_u128 LEAF_NODE 7 ARIA_u128 POINTER 6 * LEAF_NODE 7 * NAME 5 rk LEAF_NODE 6 rk LEAF_NODE 4 ; SIMPLE_DECL 3 int Nr ; Nr = ( bits + 256 ) / 32 ; VAR_DECL 4 int Nr ; Nr = ( bits + 256 ) / 32 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 Nr LEAF_NODE 6 Nr LEAF_NODE 5 ; INIT 5 Nr = ( bits + 256 ) / 32 ASSIGN 6 Nr = ( bits + 256 ) / 32 LVAL 7 Nr NAME 8 Nr LEAF_NODE 9 Nr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( bits + 256 ) / 32 LEAF_NODE 8 ( FIELD 8 bits LEAF_NODE 9 bits LEAF_NODE 8 + FIELD 8 256 LEAF_NODE 9 256 LEAF_NODE 8 ) LEAF_NODE 8 / FIELD 8 32 LEAF_NODE 9 32 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 userKey == NULL || key == NULL EXPR 5 userKey == NULL || key == NULL OR 6 userKey == NULL || key == NULL EXPR 7 userKey == NULL FIELD 8 userKey LEAF_NODE 9 userKey EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 7 || EXPR 7 key == NULL FIELD 8 key LEAF_NODE 9 key EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 bits != 128 && bits != 192 && bits != 256 EXPR 5 bits != 128 && bits != 192 && bits != 256 AND 6 bits != 128 && bits != 192 && bits != 256 EXPR 7 bits != 128 FIELD 8 bits LEAF_NODE 9 bits EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 128 LEAF_NODE 9 128 LEAF_NODE 7 && EXPR 7 bits != 192 && bits != 256 AND 8 bits != 192 && bits != 256 EXPR 9 bits != 192 FIELD 10 bits LEAF_NODE 11 bits EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 192 LEAF_NODE 11 192 LEAF_NODE 9 && EXPR 9 bits != 256 FIELD 10 bits LEAF_NODE 11 bits EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 256 LEAF_NODE 11 256 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 JUMP_STATEMENT 6 return - 2 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 2 EXPR 8 - 2 UNARY_EXPR 9 - 2 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 rk = key -> rd_key ; EXPR 4 rk = key -> rd_key ASSIGN 5 rk = key -> rd_key LVAL 6 rk FIELD 7 rk LEAF_NODE 8 rk ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 key -> rd_key FIELD 7 key -> rd_key LEAF_NODE 8 key LEAF_NODE 8 -> LEAF_NODE 8 rd_key LEAF_NODE 4 ; EXPR_STATEMENT 3 key -> rounds = Nr ; EXPR 4 key -> rounds = Nr ASSIGN 5 key -> rounds = Nr LVAL 6 key -> rounds FIELD 7 key -> rounds LEAF_NODE 8 key LEAF_NODE 8 -> LEAF_NODE 8 rounds ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 Nr FIELD 7 Nr LEAF_NODE 8 Nr LEAF_NODE 4 ; EXPR_STATEMENT 3 ck = & Key_RC [ ( bits - 128 ) / 64 ] [ 0 ] ; EXPR 4 ck = & Key_RC [ ( bits - 128 ) / 64 ] [ 0 ] ASSIGN 5 ck = & Key_RC [ ( bits - 128 ) / 64 ] [ 0 ] LVAL 6 ck FIELD 7 ck LEAF_NODE 8 ck ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 & Key_RC [ ( bits - 128 ) / 64 ] [ 0 ] UNARY_EXPR 7 & Key_RC [ ( bits - 128 ) / 64 ] [ 0 ] UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 Key_RC [ ( bits - 128 ) / 64 ] [ 0 ] LEAF_NODE 9 Key_RC LEAF_NODE 9 [ EXPR 9 ( bits - 128 ) / 64 LEAF_NODE 10 ( FIELD 10 bits LEAF_NODE 11 bits LEAF_NODE 10 - FIELD 10 128 LEAF_NODE 11 128 LEAF_NODE 10 ) LEAF_NODE 10 / FIELD 10 64 LEAF_NODE 11 64 LEAF_NODE 9 ] LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 w0 [ 0 ] = GET_U32_BE ( userKey , 0 ) ; EXPR 4 w0 [ 0 ] = GET_U32_BE ( userKey , 0 ) ASSIGN 5 w0 [ 0 ] = GET_U32_BE ( userKey , 0 ) LVAL 6 w0 [ 0 ] FIELD 7 w0 [ 0 ] LEAF_NODE 8 w0 LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 GET_U32_BE ( userKey , 0 ) FUNCTION_CALL 7 GET_U32_BE ( userKey , 0 ) CALLEE 8 GET_U32_BE LEAF_NODE 9 GET_U32_BE LEAF_NODE 8 ( ARGUMENT 8 userKey FIELD 9 userKey LEAF_NODE 10 userKey LEAF_NODE 8 , ARGUMENT 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 w0 [ 1 ] = GET_U32_BE ( userKey , 1 ) ; EXPR 4 w0 [ 1 ] = GET_U32_BE ( userKey , 1 ) ASSIGN 5 w0 [ 1 ] = GET_U32_BE ( userKey , 1 ) LVAL 6 w0 [ 1 ] FIELD 7 w0 [ 1 ] LEAF_NODE 8 w0 LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 GET_U32_BE ( userKey , 1 ) FUNCTION_CALL 7 GET_U32_BE ( userKey , 1 ) CALLEE 8 GET_U32_BE LEAF_NODE 9 GET_U32_BE LEAF_NODE 8 ( ARGUMENT 8 userKey FIELD 9 userKey LEAF_NODE 10 userKey LEAF_NODE 8 , ARGUMENT 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 w0 [ 2 ] = GET_U32_BE ( userKey , 2 ) ; EXPR 4 w0 [ 2 ] = GET_U32_BE ( userKey , 2 ) ASSIGN 5 w0 [ 2 ] = GET_U32_BE ( userKey , 2 ) LVAL 6 w0 [ 2 ] FIELD 7 w0 [ 2 ] LEAF_NODE 8 w0 LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 GET_U32_BE ( userKey , 2 ) FUNCTION_CALL 7 GET_U32_BE ( userKey , 2 ) CALLEE 8 GET_U32_BE LEAF_NODE 9 GET_U32_BE LEAF_NODE 8 ( ARGUMENT 8 userKey FIELD 9 userKey LEAF_NODE 10 userKey LEAF_NODE 8 , ARGUMENT 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 w0 [ 3 ] = GET_U32_BE ( userKey , 3 ) ; EXPR 4 w0 [ 3 ] = GET_U32_BE ( userKey , 3 ) ASSIGN 5 w0 [ 3 ] = GET_U32_BE ( userKey , 3 ) LVAL 6 w0 [ 3 ] FIELD 7 w0 [ 3 ] LEAF_NODE 8 w0 LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 GET_U32_BE ( userKey , 3 ) FUNCTION_CALL 7 GET_U32_BE ( userKey , 3 ) CALLEE 8 GET_U32_BE LEAF_NODE 9 GET_U32_BE LEAF_NODE 8 ( ARGUMENT 8 userKey FIELD 9 userKey LEAF_NODE 10 userKey LEAF_NODE 8 , ARGUMENT 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 reg0 = w0 [ 0 ] ^ ck [ 0 ] ; EXPR 4 reg0 = w0 [ 0 ] ^ ck [ 0 ] ASSIGN 5 reg0 = w0 [ 0 ] ^ ck [ 0 ] LVAL 6 reg0 FIELD 7 reg0 LEAF_NODE 8 reg0 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 w0 [ 0 ] ^ ck [ 0 ] FIELD 7 w0 [ 0 ] LEAF_NODE 8 w0 LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 ck [ 0 ] LEAF_NODE 8 ck LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 reg1 = w0 [ 1 ] ^ ck [ 1 ] ; EXPR 4 reg1 = w0 [ 1 ] ^ ck [ 1 ] ASSIGN 5 reg1 = w0 [ 1 ] ^ ck [ 1 ] LVAL 6 reg1 FIELD 7 reg1 LEAF_NODE 8 reg1 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 w0 [ 1 ] ^ ck [ 1 ] FIELD 7 w0 [ 1 ] LEAF_NODE 8 w0 LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 ck [ 1 ] LEAF_NODE 8 ck LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 reg2 = w0 [ 2 ] ^ ck [ 2 ] ; EXPR 4 reg2 = w0 [ 2 ] ^ ck [ 2 ] ASSIGN 5 reg2 = w0 [ 2 ] ^ ck [ 2 ] LVAL 6 reg2 FIELD 7 reg2 LEAF_NODE 8 reg2 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 w0 [ 2 ] ^ ck [ 2 ] FIELD 7 w0 [ 2 ] LEAF_NODE 8 w0 LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 ck [ 2 ] LEAF_NODE 8 ck LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 reg3 = w0 [ 3 ] ^ ck [ 3 ] ; EXPR 4 reg3 = w0 [ 3 ] ^ ck [ 3 ] ASSIGN 5 reg3 = w0 [ 3 ] ^ ck [ 3 ] LVAL 6 reg3 FIELD 7 reg3 LEAF_NODE 8 reg3 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 w0 [ 3 ] ^ ck [ 3 ] FIELD 7 w0 [ 3 ] LEAF_NODE 8 w0 LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] LEAF_NODE 7 ^ FIELD 7 ck [ 3 ] LEAF_NODE 8 ck LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 ARIA_SUBST_DIFF_ODD ( reg0 , reg1 , reg2 , reg3 ) ; EXPR 4 ARIA_SUBST_DIFF_ODD ( reg0 , reg1 , reg2 , reg3 ) FUNCTION_CALL 5 ARIA_SUBST_DIFF_ODD ( reg0 , reg1 , reg2 , reg3 ) CALLEE 6 ARIA_SUBST_DIFF_ODD LEAF_NODE 7 ARIA_SUBST_DIFF_ODD LEAF_NODE 6 ( ARGUMENT 6 reg0 FIELD 7 reg0 LEAF_NODE 8 reg0 LEAF_NODE 6 , ARGUMENT 6 reg1 FIELD 7 reg1 LEAF_NODE 8 reg1 LEAF_NODE 6 , ARGUMENT 6 reg2 FIELD 7 reg2 LEAF_NODE 8 reg2 LEAF_NODE 6 , ARGUMENT 6 reg3 FIELD 7 reg3 LEAF_NODE 8 reg3 LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 bits > 128 EXPR 5 bits > 128 FIELD 6 bits LEAF_NODE 7 bits REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 128 LEAF_NODE 7 128 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 w1 [ 0 ] = GET_U32_BE ( userKey , 4 ) ; EXPR 7 w1 [ 0 ] = GET_U32_BE ( userKey , 4 ) ASSIGN 8 w1 [ 0 ] = GET_U32_BE ( userKey , 4 ) LVAL 9 w1 [ 0 ] FIELD 10 w1 [ 0 ] LEAF_NODE 11 w1 LEAF_NODE 11 [ EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 GET_U32_BE ( userKey , 4 ) FUNCTION_CALL 10 GET_U32_BE ( userKey , 4 ) CALLEE 11 GET_U32_BE LEAF_NODE 12 GET_U32_BE LEAF_NODE 11 ( ARGUMENT 11 userKey FIELD 12 userKey LEAF_NODE 13 userKey LEAF_NODE 11 , ARGUMENT 11 4 FIELD 12 4 LEAF_NODE 13 4 LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 w1 [ 1 ] = GET_U32_BE ( userKey , 5 ) ; EXPR 7 w1 [ 1 ] = GET_U32_BE ( userKey , 5 ) ASSIGN 8 w1 [ 1 ] = GET_U32_BE ( userKey , 5 ) LVAL 9 w1 [ 1 ] FIELD 10 w1 [ 1 ] LEAF_NODE 11 w1 LEAF_NODE 11 [ EXPR 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 GET_U32_BE ( userKey , 5 ) FUNCTION_CALL 10 GET_U32_BE ( userKey , 5 ) CALLEE 11 GET_U32_BE LEAF_NODE 12 GET_U32_BE LEAF_NODE 11 ( ARGUMENT 11 userKey FIELD 12 userKey LEAF_NODE 13 userKey LEAF_NODE 11 , ARGUMENT 11 5 FIELD 12 5 LEAF_NODE 13 5 LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 bits > 192 EXPR 8 bits > 192 FIELD 9 bits LEAF_NODE 10 bits REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 192 LEAF_NODE 10 192 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 w1 [ 2 ] = GET_U32_BE ( userKey , 6 ) ; EXPR 10 w1 [ 2 ] = GET_U32_BE ( userKey , 6 ) ASSIGN 11 w1 [ 2 ] = GET_U32_BE ( userKey , 6 ) LVAL 12 w1 [ 2 ] FIELD 13 w1 [ 2 ] LEAF_NODE 14 w1 LEAF_NODE 14 [ EXPR 14 2 FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 GET_U32_BE ( userKey , 6 ) FUNCTION_CALL 13 GET_U32_BE ( userKey , 6 ) CALLEE 14 GET_U32_BE LEAF_NODE 15 GET_U32_BE LEAF_NODE 14 ( ARGUMENT 14 userKey FIELD 15 userKey LEAF_NODE 16 userKey LEAF_NODE 14 , ARGUMENT 14 6 FIELD 15 6 LEAF_NODE 16 6 LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 w1 [ 3 ] = GET_U32_BE ( userKey , 7 ) ; EXPR 10 w1 [ 3 ] = GET_U32_BE ( userKey , 7 ) ASSIGN 11 w1 [ 3 ] = GET_U32_BE ( userKey , 7 ) LVAL 12 w1 [ 3 ] FIELD 13 w1 [ 3 ] LEAF_NODE 14 w1 LEAF_NODE 14 [ EXPR 14 3 FIELD 15 3 LEAF_NODE 16 3 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 GET_U32_BE ( userKey , 7 ) FUNCTION_CALL 13 GET_U32_BE ( userKey , 7 ) CALLEE 14 GET_U32_BE LEAF_NODE 15 GET_U32_BE LEAF_NODE 14 ( ARGUMENT 14 userKey FIELD 15 userKey LEAF_NODE 16 userKey LEAF_NODE 14 , ARGUMENT 14 7 FIELD 15 7 LEAF_NODE 16 7 LEAF_NODE 14 ) LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 w1 [ 2 ] = w1 [ 3 ] = 0 ; EXPR 10 w1 [ 2 ] = w1 [ 3 ] = 0 ASSIGN 11 w1 [ 2 ] = w1 [ 3 ] = 0 LVAL 12 w1 [ 2 ] FIELD 13 w1 [ 2 ] LEAF_NODE 14 w1 LEAF_NODE 14 [ EXPR 14 2 FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 w1 [ 3 ] = 0 ASSIGN 13 w1 [ 3 ] = 0 LVAL 14 w1 [ 3 ] FIELD 15 w1 [ 3 ] LEAF_NODE 16 w1 LEAF_NODE 16 [ EXPR 16 3 FIELD 17 3 LEAF_NODE 18 3 LEAF_NODE 16 ] ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 w1 [ 0 ] = w1 [ 1 ] = w1 [ 2 ] = w1 [ 3 ] = 0 ; EXPR 7 w1 [ 0 ] = w1 [ 1 ] = w1 [ 2 ] = w1 [ 3 ] = 0 ASSIGN 8 w1 [ 0 ] = w1 [ 1 ] = w1 [ 2 ] = w1 [ 3 ] = 0 LVAL 9 w1 [ 0 ] FIELD 10 w1 [ 0 ] LEAF_NODE 11 w1 LEAF_NODE 11 [ EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 w1 [ 1 ] = w1 [ 2 ] = w1 [ 3 ] = 0 ASSIGN 10 w1 [ 1 ] = w1 [ 2 ] = w1 [ 3 ] = 0 LVAL 11 w1 [ 1 ] FIELD 12 w1 [ 1 ] LEAF_NODE 13 w1 LEAF_NODE 13 [ EXPR 13 1 FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 w1 [ 2 ] = w1 [ 3 ] = 0 ASSIGN 12 w1 [ 2 ] = w1 [ 3 ] = 0 LVAL 13 w1 [ 2 ] FIELD 14 w1 [ 2 ] LEAF_NODE 15 w1 LEAF_NODE 15 [ EXPR 15 2 FIELD 16 2 LEAF_NODE 17 2 LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 w1 [ 3 ] = 0 ASSIGN 14 w1 [ 3 ] = 0 LVAL 15 w1 [ 3 ] FIELD 16 w1 [ 3 ] LEAF_NODE 17 w1 LEAF_NODE 17 [ EXPR 17 3 FIELD 18 3 LEAF_NODE 19 3 LEAF_NODE 17 ] ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 w1 [ 0 ] ^= reg0 ; EXPR 4 w1 [ 0 ] ^= reg0 ASSIGN 5 w1 [ 0 ] ^= reg0 LVAL 6 w1 [ 0 ] FIELD 7 w1 [ 0 ] LEAF_NODE 8 w1 LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 ^= LEAF_NODE 7 ^= RVAL 6 reg0 FIELD 7 reg0 LEAF_NODE 8 reg0 LEAF_NODE 4 ; EXPR_STATEMENT 3 w1 [ 1 ] ^= reg1 ; EXPR 4 w1 [ 1 ] ^= reg1 ASSIGN 5 w1 [ 1 ] ^= reg1 LVAL 6 w1 [ 1 ] FIELD 7 w1 [ 1 ] LEAF_NODE 8 w1 LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 ^= LEAF_NODE 7 ^= RVAL 6 reg1 FIELD 7 reg1 LEAF_NODE 8 reg1 LEAF_NODE 4 ; EXPR_STATEMENT 3 w1 [ 2 ] ^= reg2 ; EXPR 4 w1 [ 2 ] ^= reg2 ASSIGN 5 w1 [ 2 ] ^= reg2 LVAL 6 w1 [ 2 ] FIELD 7 w1 [ 2 ] LEAF_NODE 8 w1 LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 ^= LEAF_NODE 7 ^= RVAL 6 reg2 FIELD 7 reg2 LEAF_NODE 8 reg2 LEAF_NODE 4 ; EXPR_STATEMENT 3 w1 [ 3 ] ^= reg3 ; EXPR 4 w1 [ 3 ] ^= reg3 ASSIGN 5 w1 [ 3 ] ^= reg3 LVAL 6 w1 [ 3 ] FIELD 7 w1 [ 3 ] LEAF_NODE 8 w1 LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] ASSIGN_OP 6 ^= LEAF_NODE 7 ^= RVAL 6 reg3 FIELD 7 reg3 LEAF_NODE 8 reg3 LEAF_NODE 4 ; EXPR_STATEMENT 3 reg0 = w1 [ 0 ] ; EXPR 4 reg0 = w1 [ 0 ] ASSIGN 5 reg0 = w1 [ 0 ] LVAL 6 reg0 FIELD 7 reg0 LEAF_NODE 8 reg0 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 w1 [ 0 ] FIELD 7 w1 [ 0 ] LEAF_NODE 8 w1 LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 reg1 = w1 [ 1 ] ; EXPR 4 reg1 = w1 [ 1 ] ASSIGN 5 reg1 = w1 [ 1 ] LVAL 6 reg1 FIELD 7 reg1 LEAF_NODE 8 reg1 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 w1 [ 1 ] FIELD 7 w1 [ 1 ] LEAF_NODE 8 w1 LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 reg2 = w1 [ 2 ] ; EXPR 4 reg2 = w1 [ 2 ] ASSIGN 5 reg2 = w1 [ 2 ] LVAL 6 reg2 FIELD 7 reg2 LEAF_NODE 8 reg2 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 w1 [ 2 ] FIELD 7 w1 [ 2 ] LEAF_NODE 8 w1 LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 reg3 = w1 [ 3 ] ; EXPR 4 reg3 = w1 [ 3 ] ASSIGN 5 reg3 = w1 [ 3 ] LVAL 6 reg3 FIELD 7 reg3 LEAF_NODE 8 reg3 ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 w1 [ 3 ] FIELD 7 w1 [ 3 ] LEAF_NODE 8 w1 LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 reg0 ^= ck [ 4 ] ; EXPR 4 reg0 ^= ck [ 4 ] ASSIGN 5 reg0 ^= ck [ 4 ] LVAL 6 reg0 FIELD 7 reg0 LEAF_NODE 8 reg0 ASSIGN_OP 6 ^= LEAF_NODE 7 ^= RVAL 6 ck [ 4 ] FIELD 7 ck [ 4 ] LEAF_NODE 8 ck LEAF_NODE 8 [ EXPR 8 4 FIELD 9 4 LEAF_NODE 10 4 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 reg1 ^= ck [ 5 ] ; EXPR 4 reg1 ^= ck [ 5 ] ASSIGN 5 reg1 ^= ck [ 5 ] LVAL 6 reg1 FIELD 7 reg1 LEAF_NODE 8 reg1 ASSIGN_OP 6 ^= LEAF_NODE 7 ^= RVAL 6 ck [ 5 ] FIELD 7 ck [ 5 ] LEAF_NODE 8 ck LEAF_NODE 8 [ EXPR 8 5 FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 reg2 ^= ck [ 6 ] ; EXPR 4 reg2 ^= ck [ 6 ] ASSIGN 5 reg2 ^= ck [ 6 ] LVAL 6 reg2 FIELD 7 reg2 LEAF_NODE 8 reg2 ASSIGN_OP 6 ^= LEAF_NODE 7 ^= RVAL 6 ck [ 6 ] FIELD 7 ck [ 6 ] LEAF_NODE 8 ck LEAF_NODE 8 [ EXPR 8 6 FIELD 9 6 LEAF_NODE 10 6 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 reg3 ^= ck [ 7 ] ; EXPR 4 reg3 ^= ck [ 7 ] ASSIGN 5 reg3 ^= ck [ 7 ] LVAL 6 reg3 FIELD 7 reg3 LEAF_NODE 8 reg3 ASSIGN_OP 6 ^= LEAF_NODE 7 ^= RVAL 6 ck [ 7 ] FIELD 7 ck [ 7 ] LEAF_NODE 8 ck LEAF_NODE 8 [ EXPR 8 7 FIELD 9 7 LEAF_NODE 10 7 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 ARIA_SUBST_DIFF_EVEN ( reg0 , reg1 , reg2 , reg3 ) ; EXPR 4 ARIA_SUBST_DIFF_EVEN ( reg0 , reg1 , reg2 , reg3 ) FUNCTION_CALL 5 ARIA_SUBST_DIFF_EVEN ( reg0 , reg1 , reg2 , reg3 ) CALLEE 6 ARIA_SUBST_DIFF_EVEN LEAF_NODE 7 ARIA_SUBST_DIFF_EVEN LEAF_NODE 6 ( ARGUMENT 6 reg0 FIELD 7 reg0 LEAF_NODE 8 reg0 LEAF_NODE 6 , ARGUMENT 6 reg1 FIELD 7 reg1 LEAF_NODE 8 reg1 LEAF_NODE 6 , ARGUMENT 6 reg2 FIELD 7 reg2 LEAF_NODE 8 reg2 LEAF_NODE 6 , ARGUMENT 6 reg3 FIELD 7 reg3 LEAF_NODE 8 reg3 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 reg0 ^= w0 [ 0 ] ; EXPR 4 reg0 ^= w0 [ 0 ] ASSIGN 5 reg0 ^= w0 [ 0 ] LVAL 6 reg0 FIELD 7 reg0 LEAF_NODE 8 reg0 ASSIGN_OP 6 ^= LEAF_NODE 7 ^= RVAL 6 w0 [ 0 ] FIELD 7 w0 [ 0 ] LEAF_NODE 8 w0 LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 reg1 ^= w0 [ 1 ] ; EXPR 4 reg1 ^= w0 [ 1 ] ASSIGN 5 reg1 ^= w0 [ 1 ] LVAL 6 reg1 FIELD 7 reg1 LEAF_NODE 8 reg1 ASSIGN_OP 6 ^= LEAF_NODE 7 ^= RVAL 6 w0 [ 1 ] FIELD 7 w0 [ 1 ] LEAF_NODE 8 w0 LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 reg2 ^= w0 [ 2 ] ; EXPR 4 reg2 ^= w0 [ 2 ] ASSIGN 5 reg2 ^= w0 [ 2 ] LVAL 6 reg2 FIELD 7 reg2 LEAF_NODE 8 reg2 ASSIGN_OP 6 ^= LEAF_NODE 7 ^= RVAL 6 w0 [ 2 ] FIELD 7 w0 [ 2 ] LEAF_NODE 8 w0 LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 reg3 ^= w0 [ 3 ] ; EXPR 4 reg3 ^= w0 [ 3 ] ASSIGN 5 reg3 ^= w0 [ 3 ] LVAL 6 reg3 FIELD 7 reg3 LEAF_NODE 8 reg3 ASSIGN_OP 6 ^= LEAF_NODE 7 ^= RVAL 6 w0 [ 3 ] FIELD 7 w0 [ 3 ] LEAF_NODE 8 w0 LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 w2 [ 0 ] = reg0 ; EXPR 4 w2 [ 0 ] = reg0 ASSIGN 5 w2 [ 0 ] = reg0 LVAL 6 w2 [ 0 ] FIELD 7 w2 [ 0 ] LEAF_NODE 8 w2 LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 reg0 FIELD 7 reg0 LEAF_NODE 8 reg0 LEAF_NODE 4 ; EXPR_STATEMENT 3 w2 [ 1 ] = reg1 ; EXPR 4 w2 [ 1 ] = reg1 ASSIGN 5 w2 [ 1 ] = reg1 LVAL 6 w2 [ 1 ] FIELD 7 w2 [ 1 ] LEAF_NODE 8 w2 LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 reg1 FIELD 7 reg1 LEAF_NODE 8 reg1 LEAF_NODE 4 ; EXPR_STATEMENT 3 w2 [ 2 ] = reg2 ; EXPR 4 w2 [ 2 ] = reg2 ASSIGN 5 w2 [ 2 ] = reg2 LVAL 6 w2 [ 2 ] FIELD 7 w2 [ 2 ] LEAF_NODE 8 w2 LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 reg2 FIELD 7 reg2 LEAF_NODE 8 reg2 LEAF_NODE 4 ; EXPR_STATEMENT 3 w2 [ 3 ] = reg3 ; EXPR 4 w2 [ 3 ] = reg3 ASSIGN 5 w2 [ 3 ] = reg3 LVAL 6 w2 [ 3 ] FIELD 7 w2 [ 3 ] LEAF_NODE 8 w2 LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 reg3 FIELD 7 reg3 LEAF_NODE 8 reg3 LEAF_NODE 4 ; EXPR_STATEMENT 3 reg0 ^= ck [ 8 ] ; EXPR 4 reg0 ^= ck [ 8 ] ASSIGN 5 reg0 ^= ck [ 8 ] LVAL 6 reg0 FIELD 7 reg0 LEAF_NODE 8 reg0 ASSIGN_OP 6 ^= LEAF_NODE 7 ^= RVAL 6 ck [ 8 ] FIELD 7 ck [ 8 ] LEAF_NODE 8 ck LEAF_NODE 8 [ EXPR 8 8 FIELD 9 8 LEAF_NODE 10 8 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 reg1 ^= ck [ 9 ] ; EXPR 4 reg1 ^= ck [ 9 ] ASSIGN 5 reg1 ^= ck [ 9 ] LVAL 6 reg1 FIELD 7 reg1 LEAF_NODE 8 reg1 ASSIGN_OP 6 ^= LEAF_NODE 7 ^= RVAL 6 ck [ 9 ] FIELD 7 ck [ 9 ] LEAF_NODE 8 ck LEAF_NODE 8 [ EXPR 8 9 FIELD 9 9 LEAF_NODE 10 9 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 reg2 ^= ck [ 10 ] ; EXPR 4 reg2 ^= ck [ 10 ] ASSIGN 5 reg2 ^= ck [ 10 ] LVAL 6 reg2 FIELD 7 reg2 LEAF_NODE 8 reg2 ASSIGN_OP 6 ^= LEAF_NODE 7 ^= RVAL 6 ck [ 10 ] FIELD 7 ck [ 10 ] LEAF_NODE 8 ck LEAF_NODE 8 [ EXPR 8 10 FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 reg3 ^= ck [ 11 ] ; EXPR 4 reg3 ^= ck [ 11 ] ASSIGN 5 reg3 ^= ck [ 11 ] LVAL 6 reg3 FIELD 7 reg3 LEAF_NODE 8 reg3 ASSIGN_OP 6 ^= LEAF_NODE 7 ^= RVAL 6 ck [ 11 ] FIELD 7 ck [ 11 ] LEAF_NODE 8 ck LEAF_NODE 8 [ EXPR 8 11 FIELD 9 11 LEAF_NODE 10 11 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 ARIA_SUBST_DIFF_ODD ( reg0 , reg1 , reg2 , reg3 ) ; EXPR 4 ARIA_SUBST_DIFF_ODD ( reg0 , reg1 , reg2 , reg3 ) FUNCTION_CALL 5 ARIA_SUBST_DIFF_ODD ( reg0 , reg1 , reg2 , reg3 ) CALLEE 6 ARIA_SUBST_DIFF_ODD LEAF_NODE 7 ARIA_SUBST_DIFF_ODD LEAF_NODE 6 ( ARGUMENT 6 reg0 FIELD 7 reg0 LEAF_NODE 8 reg0 LEAF_NODE 6 , ARGUMENT 6 reg1 FIELD 7 reg1 LEAF_NODE 8 reg1 LEAF_NODE 6 , ARGUMENT 6 reg2 FIELD 7 reg2 LEAF_NODE 8 reg2 LEAF_NODE 6 , ARGUMENT 6 reg3 FIELD 7 reg3 LEAF_NODE 8 reg3 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 w3 [ 0 ] = reg0 ^ w1 [ 0 ] ; EXPR 4 w3 [ 0 ] = reg0 ^ w1 [ 0 ] ASSIGN 5 w3 [ 0 ] = reg0 ^ w1 [ 0 ] LVAL 6 w3 [ 0 ] FIELD 7 w3 [ 0 ] LEAF_NODE 8 w3 LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 reg0 ^ w1 [ 0 ] FIELD 7 reg0 LEAF_NODE 8 reg0 LEAF_NODE 7 ^ FIELD 7 w1 [ 0 ] LEAF_NODE 8 w1 LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 w3 [ 1 ] = reg1 ^ w1 [ 1 ] ; EXPR 4 w3 [ 1 ] = reg1 ^ w1 [ 1 ] ASSIGN 5 w3 [ 1 ] = reg1 ^ w1 [ 1 ] LVAL 6 w3 [ 1 ] FIELD 7 w3 [ 1 ] LEAF_NODE 8 w3 LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 reg1 ^ w1 [ 1 ] FIELD 7 reg1 LEAF_NODE 8 reg1 LEAF_NODE 7 ^ FIELD 7 w1 [ 1 ] LEAF_NODE 8 w1 LEAF_NODE 8 [ EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 w3 [ 2 ] = reg2 ^ w1 [ 2 ] ; EXPR 4 w3 [ 2 ] = reg2 ^ w1 [ 2 ] ASSIGN 5 w3 [ 2 ] = reg2 ^ w1 [ 2 ] LVAL 6 w3 [ 2 ] FIELD 7 w3 [ 2 ] LEAF_NODE 8 w3 LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 reg2 ^ w1 [ 2 ] FIELD 7 reg2 LEAF_NODE 8 reg2 LEAF_NODE 7 ^ FIELD 7 w1 [ 2 ] LEAF_NODE 8 w1 LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 w3 [ 3 ] = reg3 ^ w1 [ 3 ] ; EXPR 4 w3 [ 3 ] = reg3 ^ w1 [ 3 ] ASSIGN 5 w3 [ 3 ] = reg3 ^ w1 [ 3 ] LVAL 6 w3 [ 3 ] FIELD 7 w3 [ 3 ] LEAF_NODE 8 w3 LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 reg3 ^ w1 [ 3 ] FIELD 7 reg3 LEAF_NODE 8 reg3 LEAF_NODE 7 ^ FIELD 7 w1 [ 3 ] LEAF_NODE 8 w1 LEAF_NODE 8 [ EXPR 8 3 FIELD 9 3 LEAF_NODE 10 3 LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 ARIA_GSRK ( rk , w0 , w1 , 19 ) ; EXPR 4 ARIA_GSRK ( rk , w0 , w1 , 19 ) FUNCTION_CALL 5 ARIA_GSRK ( rk , w0 , w1 , 19 ) CALLEE 6 ARIA_GSRK LEAF_NODE 7 ARIA_GSRK LEAF_NODE 6 ( ARGUMENT 6 rk FIELD 7 rk LEAF_NODE 8 rk LEAF_NODE 6 , ARGUMENT 6 w0 FIELD 7 w0 LEAF_NODE 8 w0 LEAF_NODE 6 , ARGUMENT 6 w1 FIELD 7 w1 LEAF_NODE 8 w1 LEAF_NODE 6 , ARGUMENT 6 19 FIELD 7 19 LEAF_NODE 8 19 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 rk ++ ; EXPR 4 rk ++ FIELD 5 rk ++ LEAF_NODE 6 rk LEAF_NODE 6 ++ LEAF_NODE 4 ; EXPR_STATEMENT 3 ARIA_GSRK ( rk , w1 , w2 , 19 ) ; EXPR 4 ARIA_GSRK ( rk , w1 , w2 , 19 ) FUNCTION_CALL 5 ARIA_GSRK ( rk , w1 , w2 , 19 ) CALLEE 6 ARIA_GSRK LEAF_NODE 7 ARIA_GSRK LEAF_NODE 6 ( ARGUMENT 6 rk FIELD 7 rk LEAF_NODE 8 rk LEAF_NODE 6 , ARGUMENT 6 w1 FIELD 7 w1 LEAF_NODE 8 w1 LEAF_NODE 6 , ARGUMENT 6 w2 FIELD 7 w2 LEAF_NODE 8 w2 LEAF_NODE 6 , ARGUMENT 6 19 FIELD 7 19 LEAF_NODE 8 19 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 rk ++ ; EXPR 4 rk ++ FIELD 5 rk ++ LEAF_NODE 6 rk LEAF_NODE 6 ++ LEAF_NODE 4 ; EXPR_STATEMENT 3 ARIA_GSRK ( rk , w2 , w3 , 19 ) ; EXPR 4 ARIA_GSRK ( rk , w2 , w3 , 19 ) FUNCTION_CALL 5 ARIA_GSRK ( rk , w2 , w3 , 19 ) CALLEE 6 ARIA_GSRK LEAF_NODE 7 ARIA_GSRK LEAF_NODE 6 ( ARGUMENT 6 rk FIELD 7 rk LEAF_NODE 8 rk LEAF_NODE 6 , ARGUMENT 6 w2 FIELD 7 w2 LEAF_NODE 8 w2 LEAF_NODE 6 , ARGUMENT 6 w3 FIELD 7 w3 LEAF_NODE 8 w3 LEAF_NODE 6 , ARGUMENT 6 19 FIELD 7 19 LEAF_NODE 8 19 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 rk ++ ; EXPR 4 rk ++ FIELD 5 rk ++ LEAF_NODE 6 rk LEAF_NODE 6 ++ LEAF_NODE 4 ; EXPR_STATEMENT 3 ARIA_GSRK ( rk , w3 , w0 , 19 ) ; EXPR 4 ARIA_GSRK ( rk , w3 , w0 , 19 ) FUNCTION_CALL 5 ARIA_GSRK ( rk , w3 , w0 , 19 ) CALLEE 6 ARIA_GSRK LEAF_NODE 7 ARIA_GSRK LEAF_NODE 6 ( ARGUMENT 6 rk FIELD 7 rk LEAF_NODE 8 rk LEAF_NODE 6 , ARGUMENT 6 w3 FIELD 7 w3 LEAF_NODE 8 w3 LEAF_NODE 6 , ARGUMENT 6 w0 FIELD 7 w0 LEAF_NODE 8 w0 LEAF_NODE 6 , ARGUMENT 6 19 FIELD 7 19 LEAF_NODE 8 19 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 rk ++ ; EXPR 4 rk ++ FIELD 5 rk ++ LEAF_NODE 6 rk LEAF_NODE 6 ++ LEAF_NODE 4 ; EXPR_STATEMENT 3 ARIA_GSRK ( rk , w0 , w1 , 31 ) ; EXPR 4 ARIA_GSRK ( rk , w0 , w1 , 31 ) FUNCTION_CALL 5 ARIA_GSRK ( rk , w0 , w1 , 31 ) CALLEE 6 ARIA_GSRK LEAF_NODE 7 ARIA_GSRK LEAF_NODE 6 ( ARGUMENT 6 rk FIELD 7 rk LEAF_NODE 8 rk LEAF_NODE 6 , ARGUMENT 6 w0 FIELD 7 w0 LEAF_NODE 8 w0 LEAF_NODE 6 , ARGUMENT 6 w1 FIELD 7 w1 LEAF_NODE 8 w1 LEAF_NODE 6 , ARGUMENT 6 31 FIELD 7 31 LEAF_NODE 8 31 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 rk ++ ; EXPR 4 rk ++ FIELD 5 rk ++ LEAF_NODE 6 rk LEAF_NODE 6 ++ LEAF_NODE 4 ; EXPR_STATEMENT 3 ARIA_GSRK ( rk , w1 , w2 , 31 ) ; EXPR 4 ARIA_GSRK ( rk , w1 , w2 , 31 ) FUNCTION_CALL 5 ARIA_GSRK ( rk , w1 , w2 , 31 ) CALLEE 6 ARIA_GSRK LEAF_NODE 7 ARIA_GSRK LEAF_NODE 6 ( ARGUMENT 6 rk FIELD 7 rk LEAF_NODE 8 rk LEAF_NODE 6 , ARGUMENT 6 w1 FIELD 7 w1 LEAF_NODE 8 w1 LEAF_NODE 6 , ARGUMENT 6 w2 FIELD 7 w2 LEAF_NODE 8 w2 LEAF_NODE 6 , ARGUMENT 6 31 FIELD 7 31 LEAF_NODE 8 31 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 rk ++ ; EXPR 4 rk ++ FIELD 5 rk ++ LEAF_NODE 6 rk LEAF_NODE 6 ++ LEAF_NODE 4 ; EXPR_STATEMENT 3 ARIA_GSRK ( rk , w2 , w3 , 31 ) ; EXPR 4 ARIA_GSRK ( rk , w2 , w3 , 31 ) FUNCTION_CALL 5 ARIA_GSRK ( rk , w2 , w3 , 31 ) CALLEE 6 ARIA_GSRK LEAF_NODE 7 ARIA_GSRK LEAF_NODE 6 ( ARGUMENT 6 rk FIELD 7 rk LEAF_NODE 8 rk LEAF_NODE 6 , ARGUMENT 6 w2 FIELD 7 w2 LEAF_NODE 8 w2 LEAF_NODE 6 , ARGUMENT 6 w3 FIELD 7 w3 LEAF_NODE 8 w3 LEAF_NODE 6 , ARGUMENT 6 31 FIELD 7 31 LEAF_NODE 8 31 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 rk ++ ; EXPR 4 rk ++ FIELD 5 rk ++ LEAF_NODE 6 rk LEAF_NODE 6 ++ LEAF_NODE 4 ; EXPR_STATEMENT 3 ARIA_GSRK ( rk , w3 , w0 , 31 ) ; EXPR 4 ARIA_GSRK ( rk , w3 , w0 , 31 ) FUNCTION_CALL 5 ARIA_GSRK ( rk , w3 , w0 , 31 ) CALLEE 6 ARIA_GSRK LEAF_NODE 7 ARIA_GSRK LEAF_NODE 6 ( ARGUMENT 6 rk FIELD 7 rk LEAF_NODE 8 rk LEAF_NODE 6 , ARGUMENT 6 w3 FIELD 7 w3 LEAF_NODE 8 w3 LEAF_NODE 6 , ARGUMENT 6 w0 FIELD 7 w0 LEAF_NODE 8 w0 LEAF_NODE 6 , ARGUMENT 6 31 FIELD 7 31 LEAF_NODE 8 31 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 rk ++ ; EXPR 4 rk ++ FIELD 5 rk ++ LEAF_NODE 6 rk LEAF_NODE 6 ++ LEAF_NODE 4 ; EXPR_STATEMENT 3 ARIA_GSRK ( rk , w0 , w1 , 67 ) ; EXPR 4 ARIA_GSRK ( rk , w0 , w1 , 67 ) FUNCTION_CALL 5 ARIA_GSRK ( rk , w0 , w1 , 67 ) CALLEE 6 ARIA_GSRK LEAF_NODE 7 ARIA_GSRK LEAF_NODE 6 ( ARGUMENT 6 rk FIELD 7 rk LEAF_NODE 8 rk LEAF_NODE 6 , ARGUMENT 6 w0 FIELD 7 w0 LEAF_NODE 8 w0 LEAF_NODE 6 , ARGUMENT 6 w1 FIELD 7 w1 LEAF_NODE 8 w1 LEAF_NODE 6 , ARGUMENT 6 67 FIELD 7 67 LEAF_NODE 8 67 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 rk ++ ; EXPR 4 rk ++ FIELD 5 rk ++ LEAF_NODE 6 rk LEAF_NODE 6 ++ LEAF_NODE 4 ; EXPR_STATEMENT 3 ARIA_GSRK ( rk , w1 , w2 , 67 ) ; EXPR 4 ARIA_GSRK ( rk , w1 , w2 , 67 ) FUNCTION_CALL 5 ARIA_GSRK ( rk , w1 , w2 , 67 ) CALLEE 6 ARIA_GSRK LEAF_NODE 7 ARIA_GSRK LEAF_NODE 6 ( ARGUMENT 6 rk FIELD 7 rk LEAF_NODE 8 rk LEAF_NODE 6 , ARGUMENT 6 w1 FIELD 7 w1 LEAF_NODE 8 w1 LEAF_NODE 6 , ARGUMENT 6 w2 FIELD 7 w2 LEAF_NODE 8 w2 LEAF_NODE 6 , ARGUMENT 6 67 FIELD 7 67 LEAF_NODE 8 67 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 rk ++ ; EXPR 4 rk ++ FIELD 5 rk ++ LEAF_NODE 6 rk LEAF_NODE 6 ++ LEAF_NODE 4 ; EXPR_STATEMENT 3 ARIA_GSRK ( rk , w2 , w3 , 67 ) ; EXPR 4 ARIA_GSRK ( rk , w2 , w3 , 67 ) FUNCTION_CALL 5 ARIA_GSRK ( rk , w2 , w3 , 67 ) CALLEE 6 ARIA_GSRK LEAF_NODE 7 ARIA_GSRK LEAF_NODE 6 ( ARGUMENT 6 rk FIELD 7 rk LEAF_NODE 8 rk LEAF_NODE 6 , ARGUMENT 6 w2 FIELD 7 w2 LEAF_NODE 8 w2 LEAF_NODE 6 , ARGUMENT 6 w3 FIELD 7 w3 LEAF_NODE 8 w3 LEAF_NODE 6 , ARGUMENT 6 67 FIELD 7 67 LEAF_NODE 8 67 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 rk ++ ; EXPR 4 rk ++ FIELD 5 rk ++ LEAF_NODE 6 rk LEAF_NODE 6 ++ LEAF_NODE 4 ; EXPR_STATEMENT 3 ARIA_GSRK ( rk , w3 , w0 , 67 ) ; EXPR 4 ARIA_GSRK ( rk , w3 , w0 , 67 ) FUNCTION_CALL 5 ARIA_GSRK ( rk , w3 , w0 , 67 ) CALLEE 6 ARIA_GSRK LEAF_NODE 7 ARIA_GSRK LEAF_NODE 6 ( ARGUMENT 6 rk FIELD 7 rk LEAF_NODE 8 rk LEAF_NODE 6 , ARGUMENT 6 w3 FIELD 7 w3 LEAF_NODE 8 w3 LEAF_NODE 6 , ARGUMENT 6 w0 FIELD 7 w0 LEAF_NODE 8 w0 LEAF_NODE 6 , ARGUMENT 6 67 FIELD 7 67 LEAF_NODE 8 67 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 rk ++ ; EXPR 4 rk ++ FIELD 5 rk ++ LEAF_NODE 6 rk LEAF_NODE 6 ++ LEAF_NODE 4 ; EXPR_STATEMENT 3 ARIA_GSRK ( rk , w0 , w1 , 97 ) ; EXPR 4 ARIA_GSRK ( rk , w0 , w1 , 97 ) FUNCTION_CALL 5 ARIA_GSRK ( rk , w0 , w1 , 97 ) CALLEE 6 ARIA_GSRK LEAF_NODE 7 ARIA_GSRK LEAF_NODE 6 ( ARGUMENT 6 rk FIELD 7 rk LEAF_NODE 8 rk LEAF_NODE 6 , ARGUMENT 6 w0 FIELD 7 w0 LEAF_NODE 8 w0 LEAF_NODE 6 , ARGUMENT 6 w1 FIELD 7 w1 LEAF_NODE 8 w1 LEAF_NODE 6 , ARGUMENT 6 97 FIELD 7 97 LEAF_NODE 8 97 LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 bits > 128 EXPR 5 bits > 128 FIELD 6 bits LEAF_NODE 7 bits REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 128 LEAF_NODE 7 128 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 rk ++ ; EXPR 7 rk ++ FIELD 8 rk ++ LEAF_NODE 9 rk LEAF_NODE 9 ++ LEAF_NODE 7 ; EXPR_STATEMENT 6 ARIA_GSRK ( rk , w1 , w2 , 97 ) ; EXPR 7 ARIA_GSRK ( rk , w1 , w2 , 97 ) FUNCTION_CALL 8 ARIA_GSRK ( rk , w1 , w2 , 97 ) CALLEE 9 ARIA_GSRK LEAF_NODE 10 ARIA_GSRK LEAF_NODE 9 ( ARGUMENT 9 rk FIELD 10 rk LEAF_NODE 11 rk LEAF_NODE 9 , ARGUMENT 9 w1 FIELD 10 w1 LEAF_NODE 11 w1 LEAF_NODE 9 , ARGUMENT 9 w2 FIELD 10 w2 LEAF_NODE 11 w2 LEAF_NODE 9 , ARGUMENT 9 97 FIELD 10 97 LEAF_NODE 11 97 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 rk ++ ; EXPR 7 rk ++ FIELD 8 rk ++ LEAF_NODE 9 rk LEAF_NODE 9 ++ LEAF_NODE 7 ; EXPR_STATEMENT 6 ARIA_GSRK ( rk , w2 , w3 , 97 ) ; EXPR 7 ARIA_GSRK ( rk , w2 , w3 , 97 ) FUNCTION_CALL 8 ARIA_GSRK ( rk , w2 , w3 , 97 ) CALLEE 9 ARIA_GSRK LEAF_NODE 10 ARIA_GSRK LEAF_NODE 9 ( ARGUMENT 9 rk FIELD 10 rk LEAF_NODE 11 rk LEAF_NODE 9 , ARGUMENT 9 w2 FIELD 10 w2 LEAF_NODE 11 w2 LEAF_NODE 9 , ARGUMENT 9 w3 FIELD 10 w3 LEAF_NODE 11 w3 LEAF_NODE 9 , ARGUMENT 9 97 FIELD 10 97 LEAF_NODE 11 97 LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 bits > 192 EXPR 5 bits > 192 FIELD 6 bits LEAF_NODE 7 bits REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 192 LEAF_NODE 7 192 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 rk ++ ; EXPR 7 rk ++ FIELD 8 rk ++ LEAF_NODE 9 rk LEAF_NODE 9 ++ LEAF_NODE 7 ; EXPR_STATEMENT 6 ARIA_GSRK ( rk , w3 , w0 , 97 ) ; EXPR 7 ARIA_GSRK ( rk , w3 , w0 , 97 ) FUNCTION_CALL 8 ARIA_GSRK ( rk , w3 , w0 , 97 ) CALLEE 9 ARIA_GSRK LEAF_NODE 10 ARIA_GSRK LEAF_NODE 9 ( ARGUMENT 9 rk FIELD 10 rk LEAF_NODE 11 rk LEAF_NODE 9 , ARGUMENT 9 w3 FIELD 10 w3 LEAF_NODE 11 w3 LEAF_NODE 9 , ARGUMENT 9 w0 FIELD 10 w0 LEAF_NODE 11 w0 LEAF_NODE 9 , ARGUMENT 9 97 FIELD 10 97 LEAF_NODE 11 97 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 rk ++ ; EXPR 7 rk ++ FIELD 8 rk ++ LEAF_NODE 9 rk LEAF_NODE 9 ++ LEAF_NODE 7 ; EXPR_STATEMENT 6 ARIA_GSRK ( rk , w0 , w1 , 109 ) ; EXPR 7 ARIA_GSRK ( rk , w0 , w1 , 109 ) FUNCTION_CALL 8 ARIA_GSRK ( rk , w0 , w1 , 109 ) CALLEE 9 ARIA_GSRK LEAF_NODE 10 ARIA_GSRK LEAF_NODE 9 ( ARGUMENT 9 rk FIELD 10 rk LEAF_NODE 11 rk LEAF_NODE 9 , ARGUMENT 9 w0 FIELD 10 w0 LEAF_NODE 11 w0 LEAF_NODE 9 , ARGUMENT 9 w1 FIELD 10 w1 LEAF_NODE 11 w1 LEAF_NODE 9 , ARGUMENT 9 109 FIELD 10 109 LEAF_NODE 11 109 LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 207, "project": "openssl_ast_normal_function_test_17", "target": 0}
{"func": "SIMPLE_DECL 1 const ASN1_PCTX * pctx ; VAR_DECL 2 const ASN1_PCTX * pctx TYPE 3 const ASN1_PCTX * TYPE_NAME 4 const ASN1_PCTX LEAF_NODE 5 const LEAF_NODE 5 ASN1_PCTX POINTER 4 * LEAF_NODE 5 * NAME 3 pctx LEAF_NODE 4 pctx LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } EXPECTED TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_BOOLEAN success ; unsigned char [ 1 ] bytes ; SIMPLE_DECL 6 ASN1_BOOLEAN success ; VAR_DECL 7 ASN1_BOOLEAN success TYPE 8 ASN1_BOOLEAN TYPE_NAME 9 ASN1_BOOLEAN LEAF_NODE 10 ASN1_BOOLEAN NAME 8 success LEAF_NODE 9 success LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char [ 1 ] bytes ; VAR_DECL 7 unsigned char [ 1 ] bytes TYPE 8 unsigned char [ 1 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 1 ] LEAF_NODE 10 [ FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ] NAME 8 bytes LEAF_NODE 9 bytes LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 EXPECTED LEAF_NODE 4 EXPECTED LEAF_NODE 2 ; SIMPLE_DECL 1 void ifree_fn ; ifree_fn ifree_fn ( void * a ) ; VAR_DECL 2 void ifree_fn ; ifree_fn ifree_fn ( void * a ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 ifree_fn LEAF_NODE 4 ifree_fn LEAF_NODE 3 ; INIT 3 ifree_fn ifree_fn ( void * a ) ASSIGN 4 ifree_fn ifree_fn ( void * a ) LVAL 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn ASSIGN_OP 5 ifree_fn NAME 6 ifree_fn LEAF_NODE 7 ifree_fn RVAL 5 ( void * a ) LEAF_NODE 6 ( EXPR 6 void * a FIELD 7 void LEAF_NODE 8 void LEAF_NODE 7 * FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } TEST_PACKAGE TYPE 3 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ASN1_ITEM_EXP * asn1_type ; const char * name ; int skip ; void * encode_expectations ; size_t encode_expectations_size ; size_t encode_expectations_elem_size ; void * encdec_data ; size_t encdec_data_size ; size_t encdec_data_elem_size ; i2d_fn * i2d ; d2i_fn * d2i ; ifree_fn * ifree ; SIMPLE_DECL 6 ASN1_ITEM_EXP * asn1_type ; VAR_DECL 7 ASN1_ITEM_EXP * asn1_type TYPE 8 ASN1_ITEM_EXP * TYPE_NAME 9 ASN1_ITEM_EXP LEAF_NODE 10 ASN1_ITEM_EXP POINTER 9 * LEAF_NODE 10 * NAME 8 asn1_type LEAF_NODE 9 asn1_type LEAF_NODE 7 ; SIMPLE_DECL 6 const char * name ; VAR_DECL 7 const char * name TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 int skip ; VAR_DECL 7 int skip TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 skip LEAF_NODE 9 skip LEAF_NODE 7 ; SIMPLE_DECL 6 void * encode_expectations ; VAR_DECL 7 void * encode_expectations TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encode_expectations LEAF_NODE 9 encode_expectations LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_size ; VAR_DECL 7 size_t encode_expectations_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_size LEAF_NODE 9 encode_expectations_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encode_expectations_elem_size ; VAR_DECL 7 size_t encode_expectations_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encode_expectations_elem_size LEAF_NODE 9 encode_expectations_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 void * encdec_data ; VAR_DECL 7 void * encdec_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 encdec_data LEAF_NODE 9 encdec_data LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_size ; VAR_DECL 7 size_t encdec_data_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_size LEAF_NODE 9 encdec_data_size LEAF_NODE 7 ; SIMPLE_DECL 6 size_t encdec_data_elem_size ; VAR_DECL 7 size_t encdec_data_elem_size TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 encdec_data_elem_size LEAF_NODE 9 encdec_data_elem_size LEAF_NODE 7 ; SIMPLE_DECL 6 i2d_fn * i2d ; VAR_DECL 7 i2d_fn * i2d TYPE 8 i2d_fn * TYPE_NAME 9 i2d_fn LEAF_NODE 10 i2d_fn POINTER 9 * LEAF_NODE 10 * NAME 8 i2d LEAF_NODE 9 i2d LEAF_NODE 7 ; SIMPLE_DECL 6 d2i_fn * d2i ; VAR_DECL 7 d2i_fn * d2i TYPE 8 d2i_fn * TYPE_NAME 9 d2i_fn LEAF_NODE 10 d2i_fn POINTER 9 * LEAF_NODE 10 * NAME 8 d2i LEAF_NODE 9 d2i LEAF_NODE 7 ; SIMPLE_DECL 6 ifree_fn * ifree ; VAR_DECL 7 ifree_fn * ifree TYPE 8 ifree_fn * TYPE_NAME 9 ifree_fn LEAF_NODE 10 ifree_fn POINTER 9 * LEAF_NODE 10 * NAME 8 ifree LEAF_NODE 9 ifree LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_PACKAGE LEAF_NODE 4 TEST_PACKAGE LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } TEST_CUSTOM_DATA TYPE 3 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned char * bytes1 ; size_t nbytes1 ; unsigned char * bytes2 ; size_t nbytes2 ; SIMPLE_DECL 6 unsigned char * bytes1 ; VAR_DECL 7 unsigned char * bytes1 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes1 LEAF_NODE 9 bytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes1 ; VAR_DECL 7 size_t nbytes1 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes1 LEAF_NODE 9 nbytes1 LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * bytes2 ; VAR_DECL 7 unsigned char * bytes2 TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 bytes2 LEAF_NODE 9 bytes2 LEAF_NODE 7 ; SIMPLE_DECL 6 size_t nbytes2 ; VAR_DECL 7 size_t nbytes2 TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 nbytes2 LEAF_NODE 9 nbytes2 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 TEST_CUSTOM_DATA LEAF_NODE 4 TEST_CUSTOM_DATA LEAF_NODE 2 ; SIMPLE_DECL 1 BIO * bio_err ; bio_err = NULL ; VAR_DECL 2 BIO * bio_err ; bio_err = NULL TYPE 3 BIO * TYPE_NAME 4 BIO LEAF_NODE 5 BIO POINTER 4 * LEAF_NODE 5 * NAME 3 bio_err LEAF_NODE 4 bio_err LEAF_NODE 3 ; INIT 3 bio_err = NULL ASSIGN 4 bio_err = NULL LVAL 5 bio_err NAME 6 bio_err LEAF_NODE 7 bio_err ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } tag_exp_type TYPE 3 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int exp_tag ; int exp_class ; int exp_constructed ; int exp_pad ; long exp_len ; SIMPLE_DECL 6 int exp_tag ; VAR_DECL 7 int exp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_tag LEAF_NODE 9 exp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_class ; VAR_DECL 7 int exp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_class LEAF_NODE 9 exp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_constructed ; VAR_DECL 7 int exp_constructed TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_constructed LEAF_NODE 9 exp_constructed LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_pad ; VAR_DECL 7 int exp_pad TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_pad LEAF_NODE 9 exp_pad LEAF_NODE 7 ; SIMPLE_DECL 6 long exp_len ; VAR_DECL 7 long exp_len TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 exp_len LEAF_NODE 9 exp_len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_type LEAF_NODE 4 tag_exp_type LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } tag_exp_arg TYPE 3 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int imp_tag ; int imp_class ; int utype ; int format ; const char * str ; tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; int exp_count ; SIMPLE_DECL 6 int imp_tag ; VAR_DECL 7 int imp_tag TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_tag LEAF_NODE 9 imp_tag LEAF_NODE 7 ; SIMPLE_DECL 6 int imp_class ; VAR_DECL 7 int imp_class TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 imp_class LEAF_NODE 9 imp_class LEAF_NODE 7 ; SIMPLE_DECL 6 int utype ; VAR_DECL 7 int utype TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 utype LEAF_NODE 9 utype LEAF_NODE 7 ; SIMPLE_DECL 6 int format ; VAR_DECL 7 int format TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 format LEAF_NODE 9 format LEAF_NODE 7 ; SIMPLE_DECL 6 const char * str ; VAR_DECL 7 const char * str TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 str LEAF_NODE 9 str LEAF_NODE 7 ; SIMPLE_DECL 6 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list ; VAR_DECL 7 tag_exp_type [ ASN1_FLAG_EXP_MAX ] exp_list TYPE 8 tag_exp_type [ ASN1_FLAG_EXP_MAX ] TYPE_NAME 9 tag_exp_type LEAF_NODE 10 tag_exp_type TYPE_SUFFIX 9 [ ASN1_FLAG_EXP_MAX ] LEAF_NODE 10 [ FIELD 10 ASN1_FLAG_EXP_MAX LEAF_NODE 11 ASN1_FLAG_EXP_MAX LEAF_NODE 10 ] NAME 8 exp_list LEAF_NODE 9 exp_list LEAF_NODE 7 ; SIMPLE_DECL 6 int exp_count ; VAR_DECL 7 int exp_count TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 exp_count LEAF_NODE 9 exp_count LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 tag_exp_arg LEAF_NODE 4 tag_exp_arg LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 ASN1_put_object LEAF_NODE 3 ASN1_put_object PARAMETER_LIST 2 ( unsigned char * * pp , int constructed , int length , int tag , int xclass ) LEAF_NODE 3 ( PARAMETER_DECL 3 unsigned char * * pp TYPE 4 unsigned char * * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 pp LEAF_NODE 5 pp LEAF_NODE 3 , PARAMETER_DECL 3 int constructed TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 constructed LEAF_NODE 5 constructed LEAF_NODE 3 , PARAMETER_DECL 3 int length TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 length LEAF_NODE 5 length LEAF_NODE 3 , PARAMETER_DECL 3 int tag TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 tag LEAF_NODE 5 tag LEAF_NODE 3 , PARAMETER_DECL 3 int xclass TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 xclass LEAF_NODE 5 xclass LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned char * p ; p = * pp ; VAR_DECL 4 unsigned char * p ; p = * pp TYPE 5 unsigned char * TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 5 ; INIT 5 p = * pp ASSIGN 6 p = * pp LVAL 7 p NAME 8 p LEAF_NODE 9 p ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * pp UNARY_EXPR 8 * pp UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 pp LEAF_NODE 10 pp LEAF_NODE 4 ; SIMPLE_DECL 3 int i , int ttag ; INIT_DECL_LIST 4 int i , int ttag VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 , VAR_DECL 5 int ttag TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 ttag LEAF_NODE 7 ttag LEAF_NODE 4 ; LEAF_NODE 3 i LEAF_NODE 3 = LEAF_NODE 3 ( LEAF_NODE 3 constructed LEAF_NODE 3 ) LEAF_NODE 3 ? LABEL 3 V_ASN1_CONSTRUCTED : LEAF_NODE 4 V_ASN1_CONSTRUCTED LEAF_NODE 4 : EXPR_STATEMENT 3 0 ; EXPR 4 0 FIELD 5 0 LEAF_NODE 6 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 i |= ( xclass & V_ASN1_PRIVATE ) ; EXPR 4 i |= ( xclass & V_ASN1_PRIVATE ) ASSIGN 5 i |= ( xclass & V_ASN1_PRIVATE ) LVAL 6 i FIELD 7 i LEAF_NODE 8 i ASSIGN_OP 6 |= LEAF_NODE 7 |= RVAL 6 ( xclass & V_ASN1_PRIVATE ) LEAF_NODE 7 ( FIELD 7 xclass LEAF_NODE 8 xclass LEAF_NODE 7 & FIELD 7 V_ASN1_PRIVATE LEAF_NODE 8 V_ASN1_PRIVATE LEAF_NODE 7 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 tag < 31 EXPR 5 tag < 31 FIELD 6 tag LEAF_NODE 7 tag REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 31 LEAF_NODE 7 31 LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 * ( p ++ ) = i | ( tag & V_ASN1_PRIMITIVE_TAG ) ; EXPR 6 * ( p ++ ) = i | ( tag & V_ASN1_PRIMITIVE_TAG ) ASSIGN 7 * ( p ++ ) = i | ( tag & V_ASN1_PRIMITIVE_TAG ) LVAL 8 * ( p ++ ) UNARY_EXPR 9 * ( p ++ ) UNARY_OPERATOR 10 * LEAF_NODE 11 * LEAF_NODE 10 ( FIELD 10 p ++ LEAF_NODE 11 p LEAF_NODE 11 ++ LEAF_NODE 10 ) ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 i | ( tag & V_ASN1_PRIMITIVE_TAG ) BIT_OR 9 i | ( tag & V_ASN1_PRIMITIVE_TAG ) BIT_OR_ELEM 10 i FIELD 11 i LEAF_NODE 12 i LEAF_NODE 10 | BIT_OR_ELEM 10 ( tag & V_ASN1_PRIMITIVE_TAG ) LEAF_NODE 11 ( FIELD 11 tag LEAF_NODE 12 tag LEAF_NODE 11 & FIELD 11 V_ASN1_PRIMITIVE_TAG LEAF_NODE 12 V_ASN1_PRIMITIVE_TAG LEAF_NODE 11 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 * ( p ++ ) = i | V_ASN1_PRIMITIVE_TAG ; EXPR 7 * ( p ++ ) = i | V_ASN1_PRIMITIVE_TAG ASSIGN 8 * ( p ++ ) = i | V_ASN1_PRIMITIVE_TAG LVAL 9 * ( p ++ ) UNARY_EXPR 10 * ( p ++ ) UNARY_OPERATOR 11 * LEAF_NODE 12 * LEAF_NODE 11 ( FIELD 11 p ++ LEAF_NODE 12 p LEAF_NODE 12 ++ LEAF_NODE 11 ) ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 i | V_ASN1_PRIMITIVE_TAG BIT_OR 10 i | V_ASN1_PRIMITIVE_TAG BIT_OR_ELEM 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 | BIT_OR_ELEM 11 V_ASN1_PRIMITIVE_TAG FIELD 12 V_ASN1_PRIMITIVE_TAG LEAF_NODE 13 V_ASN1_PRIMITIVE_TAG LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 i = 0 , ttag = tag ; EXPR 8 i = 0 , ttag = tag ASSIGN 9 i = 0 LVAL 10 i FIELD 11 i LEAF_NODE 12 i ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 , ASSIGN 9 ttag = tag LVAL 10 ttag FIELD 11 ttag LEAF_NODE 12 ttag ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 tag FIELD 11 tag LEAF_NODE 12 tag LEAF_NODE 8 ; CONDITION 7 ttag > 0 EXPR 8 ttag > 0 FIELD 9 ttag LEAF_NODE 10 ttag REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; FOR_EXPR 7 i ++ EXPR 8 i ++ FIELD 9 i ++ LEAF_NODE 10 i LEAF_NODE 10 ++ LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 ttag >>= 7 ; EXPR 9 ttag >>= 7 ASSIGN 10 ttag >>= 7 LVAL 11 ttag FIELD 12 ttag LEAF_NODE 13 ttag ASSIGN_OP 11 >>= LEAF_NODE 12 >>= RVAL 11 7 FIELD 12 7 LEAF_NODE 13 7 LEAF_NODE 9 ; EXPR_STATEMENT 6 ttag = i ; EXPR 7 ttag = i ASSIGN 8 ttag = i LVAL 9 ttag FIELD 10 ttag LEAF_NODE 11 ttag ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 while LEAF_NODE 8 while LEAF_NODE 7 ( CONDITION 7 i -- > 0 EXPR 8 i -- > 0 FIELD 9 i -- LEAF_NODE 10 i LEAF_NODE 10 -- REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 p [ i ] = tag & 0x7f ; EXPR 10 p [ i ] = tag & 0x7f ASSIGN 11 p [ i ] = tag & 0x7f LVAL 12 p [ i ] FIELD 13 p [ i ] LEAF_NODE 14 p LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 tag & 0x7f FIELD 13 tag LEAF_NODE 14 tag LEAF_NODE 13 & FIELD 13 0x7f LEAF_NODE 14 0x7f LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 i != ( ttag - 1 ) EXPR 11 i != ( ttag - 1 ) FIELD 12 i LEAF_NODE 13 i EQ_OPERATOR 12 != LEAF_NODE 13 != LEAF_NODE 12 ( FIELD 12 ttag LEAF_NODE 13 ttag LEAF_NODE 12 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 12 ) LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 p [ i ] |= 0x80 ; EXPR 12 p [ i ] |= 0x80 ASSIGN 13 p [ i ] |= 0x80 LVAL 14 p [ i ] FIELD 15 p [ i ] LEAF_NODE 16 p LEAF_NODE 16 [ EXPR 16 i FIELD 17 i LEAF_NODE 18 i LEAF_NODE 16 ] ASSIGN_OP 14 |= LEAF_NODE 15 |= RVAL 14 0x80 FIELD 15 0x80 LEAF_NODE 16 0x80 LEAF_NODE 12 ; EXPR_STATEMENT 9 tag >>= 7 ; EXPR 10 tag >>= 7 ASSIGN 11 tag >>= 7 LVAL 12 tag FIELD 13 tag LEAF_NODE 14 tag ASSIGN_OP 12 >>= LEAF_NODE 13 >>= RVAL 12 7 FIELD 13 7 LEAF_NODE 14 7 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 p += ttag ; EXPR 7 p += ttag ASSIGN 8 p += ttag LVAL 9 p FIELD 10 p LEAF_NODE 11 p ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 ttag FIELD 10 ttag LEAF_NODE 11 ttag LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 constructed == 2 EXPR 5 constructed == 2 FIELD 6 constructed LEAF_NODE 7 constructed EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 2 LEAF_NODE 7 2 LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 * ( p ++ ) = 0x80 ; EXPR 6 * ( p ++ ) = 0x80 ASSIGN 7 * ( p ++ ) = 0x80 LVAL 8 * ( p ++ ) UNARY_EXPR 9 * ( p ++ ) UNARY_OPERATOR 10 * LEAF_NODE 11 * LEAF_NODE 10 ( FIELD 10 p ++ LEAF_NODE 11 p LEAF_NODE 11 ++ LEAF_NODE 10 ) ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0x80 FIELD 9 0x80 LEAF_NODE 10 0x80 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 EXPR_STATEMENT 5 asn1_put_length ( & p , length ) ; EXPR 6 asn1_put_length ( & p , length ) FUNCTION_CALL 7 asn1_put_length ( & p , length ) CALLEE 8 asn1_put_length LEAF_NODE 9 asn1_put_length LEAF_NODE 8 ( ARGUMENT 8 & p UNARY_EXPR 9 & p UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 p LEAF_NODE 11 p LEAF_NODE 8 , ARGUMENT 8 length FIELD 9 length LEAF_NODE 10 length LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 3 * pp = p ; EXPR 4 * pp = p ASSIGN 5 * pp = p LVAL 6 * pp UNARY_EXPR 7 * pp UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 pp LEAF_NODE 9 pp ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 p FIELD 7 p LEAF_NODE 8 p LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 208, "project": "openssl_ast_normal_function_test_149", "target": 0}
{"func": "SIMPLE_DECL 1 int EVP_PKEY_gen_cb ; EVP_PKEY_gen_cb EVP_PKEY_gen_cb ( EVP_PKEY_CTX * ctx ) ; VAR_DECL 2 int EVP_PKEY_gen_cb ; EVP_PKEY_gen_cb EVP_PKEY_gen_cb ( EVP_PKEY_CTX * ctx ) TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 EVP_PKEY_gen_cb LEAF_NODE 4 EVP_PKEY_gen_cb LEAF_NODE 3 ; INIT 3 EVP_PKEY_gen_cb EVP_PKEY_gen_cb ( EVP_PKEY_CTX * ctx ) ASSIGN 4 EVP_PKEY_gen_cb EVP_PKEY_gen_cb ( EVP_PKEY_CTX * ctx ) LVAL 5 EVP_PKEY_gen_cb NAME 6 EVP_PKEY_gen_cb LEAF_NODE 7 EVP_PKEY_gen_cb ASSIGN_OP 5 EVP_PKEY_gen_cb NAME 6 EVP_PKEY_gen_cb LEAF_NODE 7 EVP_PKEY_gen_cb RVAL 5 ( EVP_PKEY_CTX * ctx ) LEAF_NODE 6 ( EXPR 6 EVP_PKEY_CTX * ctx FIELD 7 EVP_PKEY_CTX LEAF_NODE 8 EVP_PKEY_CTX LEAF_NODE 7 * FIELD 7 ctx LEAF_NODE 8 ctx LEAF_NODE 6 ) LEAF_NODE 2 ; SIMPLE_DECL 1 struct evp_pkey_st BASE_CLASSES { int type ; int save_type ; int references ; const EVP_PKEY_ASN1_METHOD * ameth ; ENGINE * engine ; union CLASS_NAME BASE_CLASSES { char * ptr ; struct rsa_st * rsa ; struct dsa_st * dsa ; struct dh_st * dh ; struct ec_key_st * ec ; } pkey ; int save_parameters ; STACK_OF ( X509_ATTRIBUTE ) * attributes ; } ; CLASS_DEF 2 struct evp_pkey_st BASE_CLASSES { int type ; int save_type ; int references ; const EVP_PKEY_ASN1_METHOD * ameth ; ENGINE * engine ; union CLASS_NAME BASE_CLASSES { char * ptr ; struct rsa_st * rsa ; struct dsa_st * dsa ; struct dh_st * dh ; struct ec_key_st * ec ; } pkey ; int save_parameters ; STACK_OF ( X509_ATTRIBUTE ) * attributes ; } CLASS_DEF 3 struct evp_pkey_st BASE_CLASSES { int type ; int save_type ; int references ; const EVP_PKEY_ASN1_METHOD * ameth ; ENGINE * engine ; union CLASS_NAME BASE_CLASSES { char * ptr ; struct rsa_st * rsa ; struct dsa_st * dsa ; struct dh_st * dh ; struct ec_key_st * ec ; } pkey ; int save_parameters ; STACK_OF ( X509_ATTRIBUTE ) * attributes ; } LEAF_NODE 4 struct CLASS_NAME 4 evp_pkey_st LEAF_NODE 5 evp_pkey_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int type ; int save_type ; int references ; const EVP_PKEY_ASN1_METHOD * ameth ; ENGINE * engine ; union CLASS_NAME BASE_CLASSES { char * ptr ; struct rsa_st * rsa ; struct dsa_st * dsa ; struct dh_st * dh ; struct ec_key_st * ec ; } pkey ; int save_parameters ; STACK_OF ( X509_ATTRIBUTE ) * attributes ; SIMPLE_DECL 5 int type ; VAR_DECL 6 int type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 type LEAF_NODE 8 type LEAF_NODE 6 ; SIMPLE_DECL 5 int save_type ; VAR_DECL 6 int save_type TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 save_type LEAF_NODE 8 save_type LEAF_NODE 6 ; SIMPLE_DECL 5 int references ; VAR_DECL 6 int references TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 references LEAF_NODE 8 references LEAF_NODE 6 ; SIMPLE_DECL 5 const EVP_PKEY_ASN1_METHOD * ameth ; VAR_DECL 6 const EVP_PKEY_ASN1_METHOD * ameth TYPE 7 const EVP_PKEY_ASN1_METHOD * TYPE_NAME 8 const EVP_PKEY_ASN1_METHOD LEAF_NODE 9 const LEAF_NODE 9 EVP_PKEY_ASN1_METHOD POINTER 8 * LEAF_NODE 9 * NAME 7 ameth LEAF_NODE 8 ameth LEAF_NODE 6 ; SIMPLE_DECL 5 ENGINE * engine ; VAR_DECL 6 ENGINE * engine TYPE 7 ENGINE * TYPE_NAME 8 ENGINE LEAF_NODE 9 ENGINE POINTER 8 * LEAF_NODE 9 * NAME 7 engine LEAF_NODE 8 engine LEAF_NODE 6 ; SIMPLE_DECL 5 union CLASS_NAME BASE_CLASSES { char * ptr ; struct rsa_st * rsa ; struct dsa_st * dsa ; struct dh_st * dh ; struct ec_key_st * ec ; } pkey ; VAR_DECL 6 union CLASS_NAME BASE_CLASSES { char * ptr ; struct rsa_st * rsa ; struct dsa_st * dsa ; struct dh_st * dh ; struct ec_key_st * ec ; } pkey TYPE 7 union CLASS_NAME BASE_CLASSES { char * ptr ; struct rsa_st * rsa ; struct dsa_st * dsa ; struct dh_st * dh ; struct ec_key_st * ec ; } CLASS_DEF 8 union CLASS_NAME BASE_CLASSES { char * ptr ; struct rsa_st * rsa ; struct dsa_st * dsa ; struct dh_st * dh ; struct ec_key_st * ec ; } LEAF_NODE 9 union LEAF_NODE 9 CLASS_NAME LEAF_NODE 9 BASE_CLASSES LEAF_NODE 9 { CLASS_CONTENT 9 char * ptr ; struct rsa_st * rsa ; struct dsa_st * dsa ; struct dh_st * dh ; struct ec_key_st * ec ; SIMPLE_DECL 10 char * ptr ; VAR_DECL 11 char * ptr TYPE 12 char * TYPE_NAME 13 char LEAF_NODE 14 char POINTER 13 * LEAF_NODE 14 * NAME 12 ptr LEAF_NODE 13 ptr LEAF_NODE 11 ; SIMPLE_DECL 10 struct rsa_st * rsa ; VAR_DECL 11 struct rsa_st * rsa TYPE 12 struct rsa_st * TYPE_NAME 13 struct rsa_st LEAF_NODE 14 struct LEAF_NODE 14 rsa_st POINTER 13 * LEAF_NODE 14 * NAME 12 rsa LEAF_NODE 13 rsa LEAF_NODE 11 ; SIMPLE_DECL 10 struct dsa_st * dsa ; VAR_DECL 11 struct dsa_st * dsa TYPE 12 struct dsa_st * TYPE_NAME 13 struct dsa_st LEAF_NODE 14 struct LEAF_NODE 14 dsa_st POINTER 13 * LEAF_NODE 14 * NAME 12 dsa LEAF_NODE 13 dsa LEAF_NODE 11 ; SIMPLE_DECL 10 struct dh_st * dh ; VAR_DECL 11 struct dh_st * dh TYPE 12 struct dh_st * TYPE_NAME 13 struct dh_st LEAF_NODE 14 struct LEAF_NODE 14 dh_st POINTER 13 * LEAF_NODE 14 * NAME 12 dh LEAF_NODE 13 dh LEAF_NODE 11 ; SIMPLE_DECL 10 struct ec_key_st * ec ; VAR_DECL 11 struct ec_key_st * ec TYPE 12 struct ec_key_st * TYPE_NAME 13 struct ec_key_st LEAF_NODE 14 struct LEAF_NODE 14 ec_key_st POINTER 13 * LEAF_NODE 14 * NAME 12 ec LEAF_NODE 13 ec LEAF_NODE 11 ; LEAF_NODE 9 } NAME 7 pkey LEAF_NODE 8 pkey LEAF_NODE 6 ; SIMPLE_DECL 5 int save_parameters ; VAR_DECL 6 int save_parameters TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 save_parameters LEAF_NODE 8 save_parameters LEAF_NODE 6 ; LEAF_NODE 5 STACK_OF LEAF_NODE 5 ( LEAF_NODE 5 X509_ATTRIBUTE LEAF_NODE 5 ) LEAF_NODE 5 * LEAF_NODE 5 attributes LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct evp_pkey_st EVP_PKEY ; VAR_DECL 2 struct evp_pkey_st EVP_PKEY TYPE 3 struct evp_pkey_st TYPE_NAME 4 struct evp_pkey_st LEAF_NODE 5 struct LEAF_NODE 5 evp_pkey_st NAME 3 EVP_PKEY LEAF_NODE 4 EVP_PKEY LEAF_NODE 2 ; SIMPLE_DECL 1 struct evp_pkey_ctx_st BASE_CLASSES { const EVP_PKEY_METHOD * pmeth ; ENGINE * engine ; EVP_PKEY * pkey ; EVP_PKEY * peerkey ; int operation ; void * data ; void * app_data ; EVP_PKEY_gen_cb * pkey_gencb ; int * keygen_info ; int keygen_info_count ; } ; CLASS_DEF 2 struct evp_pkey_ctx_st BASE_CLASSES { const EVP_PKEY_METHOD * pmeth ; ENGINE * engine ; EVP_PKEY * pkey ; EVP_PKEY * peerkey ; int operation ; void * data ; void * app_data ; EVP_PKEY_gen_cb * pkey_gencb ; int * keygen_info ; int keygen_info_count ; } CLASS_DEF 3 struct evp_pkey_ctx_st BASE_CLASSES { const EVP_PKEY_METHOD * pmeth ; ENGINE * engine ; EVP_PKEY * pkey ; EVP_PKEY * peerkey ; int operation ; void * data ; void * app_data ; EVP_PKEY_gen_cb * pkey_gencb ; int * keygen_info ; int keygen_info_count ; } LEAF_NODE 4 struct CLASS_NAME 4 evp_pkey_ctx_st LEAF_NODE 5 evp_pkey_ctx_st LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 const EVP_PKEY_METHOD * pmeth ; ENGINE * engine ; EVP_PKEY * pkey ; EVP_PKEY * peerkey ; int operation ; void * data ; void * app_data ; EVP_PKEY_gen_cb * pkey_gencb ; int * keygen_info ; int keygen_info_count ; SIMPLE_DECL 5 const EVP_PKEY_METHOD * pmeth ; VAR_DECL 6 const EVP_PKEY_METHOD * pmeth TYPE 7 const EVP_PKEY_METHOD * TYPE_NAME 8 const EVP_PKEY_METHOD LEAF_NODE 9 const LEAF_NODE 9 EVP_PKEY_METHOD POINTER 8 * LEAF_NODE 9 * NAME 7 pmeth LEAF_NODE 8 pmeth LEAF_NODE 6 ; SIMPLE_DECL 5 ENGINE * engine ; VAR_DECL 6 ENGINE * engine TYPE 7 ENGINE * TYPE_NAME 8 ENGINE LEAF_NODE 9 ENGINE POINTER 8 * LEAF_NODE 9 * NAME 7 engine LEAF_NODE 8 engine LEAF_NODE 6 ; SIMPLE_DECL 5 EVP_PKEY * pkey ; VAR_DECL 6 EVP_PKEY * pkey TYPE 7 EVP_PKEY * TYPE_NAME 8 EVP_PKEY LEAF_NODE 9 EVP_PKEY POINTER 8 * LEAF_NODE 9 * NAME 7 pkey LEAF_NODE 8 pkey LEAF_NODE 6 ; SIMPLE_DECL 5 EVP_PKEY * peerkey ; VAR_DECL 6 EVP_PKEY * peerkey TYPE 7 EVP_PKEY * TYPE_NAME 8 EVP_PKEY LEAF_NODE 9 EVP_PKEY POINTER 8 * LEAF_NODE 9 * NAME 7 peerkey LEAF_NODE 8 peerkey LEAF_NODE 6 ; SIMPLE_DECL 5 int operation ; VAR_DECL 6 int operation TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 operation LEAF_NODE 8 operation LEAF_NODE 6 ; SIMPLE_DECL 5 void * data ; VAR_DECL 6 void * data TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 void * app_data ; VAR_DECL 6 void * app_data TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 app_data LEAF_NODE 8 app_data LEAF_NODE 6 ; SIMPLE_DECL 5 EVP_PKEY_gen_cb * pkey_gencb ; VAR_DECL 6 EVP_PKEY_gen_cb * pkey_gencb TYPE 7 EVP_PKEY_gen_cb * TYPE_NAME 8 EVP_PKEY_gen_cb LEAF_NODE 9 EVP_PKEY_gen_cb POINTER 8 * LEAF_NODE 9 * NAME 7 pkey_gencb LEAF_NODE 8 pkey_gencb LEAF_NODE 6 ; SIMPLE_DECL 5 int * keygen_info ; VAR_DECL 6 int * keygen_info TYPE 7 int * TYPE_NAME 8 int LEAF_NODE 9 int POINTER 8 * LEAF_NODE 9 * NAME 7 keygen_info LEAF_NODE 8 keygen_info LEAF_NODE 6 ; SIMPLE_DECL 5 int keygen_info_count ; VAR_DECL 6 int keygen_info_count TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 keygen_info_count LEAF_NODE 8 keygen_info_count LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct evp_pkey_ctx_st EVP_PKEY_CTX ; VAR_DECL 2 struct evp_pkey_ctx_st EVP_PKEY_CTX TYPE 3 struct evp_pkey_ctx_st TYPE_NAME 4 struct evp_pkey_ctx_st LEAF_NODE 5 struct LEAF_NODE 5 evp_pkey_ctx_st NAME 3 EVP_PKEY_CTX LEAF_NODE 4 EVP_PKEY_CTX LEAF_NODE 2 ; SIMPLE_DECL 1 struct RSA_PKEY_CTX BASE_CLASSES { int nbits ; long * pub_exp ; int [ 2 ] gentmp ; int pad_mode ; const EVP_MD * md ; const EVP_MD * mgf1md ; int saltlen ; unsigned char * tbuf ; } RSA_PKEY_CTX ; VAR_DECL 2 struct RSA_PKEY_CTX BASE_CLASSES { int nbits ; long * pub_exp ; int [ 2 ] gentmp ; int pad_mode ; const EVP_MD * md ; const EVP_MD * mgf1md ; int saltlen ; unsigned char * tbuf ; } RSA_PKEY_CTX TYPE 3 struct RSA_PKEY_CTX BASE_CLASSES { int nbits ; long * pub_exp ; int [ 2 ] gentmp ; int pad_mode ; const EVP_MD * md ; const EVP_MD * mgf1md ; int saltlen ; unsigned char * tbuf ; } CLASS_DEF 4 struct RSA_PKEY_CTX BASE_CLASSES { int nbits ; long * pub_exp ; int [ 2 ] gentmp ; int pad_mode ; const EVP_MD * md ; const EVP_MD * mgf1md ; int saltlen ; unsigned char * tbuf ; } LEAF_NODE 5 struct CLASS_NAME 5 RSA_PKEY_CTX LEAF_NODE 6 RSA_PKEY_CTX LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int nbits ; long * pub_exp ; int [ 2 ] gentmp ; int pad_mode ; const EVP_MD * md ; const EVP_MD * mgf1md ; int saltlen ; unsigned char * tbuf ; SIMPLE_DECL 6 int nbits ; VAR_DECL 7 int nbits TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 nbits LEAF_NODE 9 nbits LEAF_NODE 7 ; SIMPLE_DECL 6 long * pub_exp ; VAR_DECL 7 long * pub_exp TYPE 8 long * TYPE_NAME 9 long LEAF_NODE 10 long POINTER 9 * LEAF_NODE 10 * NAME 8 pub_exp LEAF_NODE 9 pub_exp LEAF_NODE 7 ; SIMPLE_DECL 6 int [ 2 ] gentmp ; VAR_DECL 7 int [ 2 ] gentmp TYPE 8 int [ 2 ] TYPE_NAME 9 int LEAF_NODE 10 int TYPE_SUFFIX 9 [ 2 ] LEAF_NODE 10 [ FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 10 ] NAME 8 gentmp LEAF_NODE 9 gentmp LEAF_NODE 7 ; SIMPLE_DECL 6 int pad_mode ; VAR_DECL 7 int pad_mode TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 pad_mode LEAF_NODE 9 pad_mode LEAF_NODE 7 ; SIMPLE_DECL 6 const EVP_MD * md ; VAR_DECL 7 const EVP_MD * md TYPE 8 const EVP_MD * TYPE_NAME 9 const EVP_MD LEAF_NODE 10 const LEAF_NODE 10 EVP_MD POINTER 9 * LEAF_NODE 10 * NAME 8 md LEAF_NODE 9 md LEAF_NODE 7 ; SIMPLE_DECL 6 const EVP_MD * mgf1md ; VAR_DECL 7 const EVP_MD * mgf1md TYPE 8 const EVP_MD * TYPE_NAME 9 const EVP_MD LEAF_NODE 10 const LEAF_NODE 10 EVP_MD POINTER 9 * LEAF_NODE 10 * NAME 8 mgf1md LEAF_NODE 9 mgf1md LEAF_NODE 7 ; SIMPLE_DECL 6 int saltlen ; VAR_DECL 7 int saltlen TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 saltlen LEAF_NODE 9 saltlen LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned char * tbuf ; VAR_DECL 7 unsigned char * tbuf TYPE 8 unsigned char * TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 tbuf LEAF_NODE 9 tbuf LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 RSA_PKEY_CTX LEAF_NODE 4 RSA_PKEY_CTX LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 pkey_rsa_verifyrecover LEAF_NODE 3 pkey_rsa_verifyrecover PARAMETER_LIST 2 ( EVP_PKEY_CTX * ctx , unsigned char * rout , size_t * routlen , const unsigned char * sig , size_t siglen ) LEAF_NODE 3 ( PARAMETER_DECL 3 EVP_PKEY_CTX * ctx TYPE 4 EVP_PKEY_CTX * TYPE_NAME 5 EVP_PKEY_CTX LEAF_NODE 6 EVP_PKEY_CTX POINTER 5 * LEAF_NODE 6 * NAME 4 ctx LEAF_NODE 5 ctx LEAF_NODE 3 , PARAMETER_DECL 3 unsigned char * rout TYPE 4 unsigned char * TYPE_NAME 5 unsigned char LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 rout LEAF_NODE 5 rout LEAF_NODE 3 , PARAMETER_DECL 3 size_t * routlen TYPE 4 size_t * TYPE_NAME 5 size_t LEAF_NODE 6 size_t POINTER 5 * LEAF_NODE 6 * NAME 4 routlen LEAF_NODE 5 routlen LEAF_NODE 3 , PARAMETER_DECL 3 const unsigned char * sig TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 sig LEAF_NODE 5 sig LEAF_NODE 3 , PARAMETER_DECL 3 size_t siglen TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 siglen LEAF_NODE 5 siglen LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int ret ; VAR_DECL 4 int ret TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 4 ; SIMPLE_DECL 3 RSA_PKEY_CTX * rctx ; rctx = ctx -> data ; VAR_DECL 4 RSA_PKEY_CTX * rctx ; rctx = ctx -> data TYPE 5 RSA_PKEY_CTX * TYPE_NAME 6 RSA_PKEY_CTX LEAF_NODE 7 RSA_PKEY_CTX POINTER 6 * LEAF_NODE 7 * NAME 5 rctx LEAF_NODE 6 rctx LEAF_NODE 5 ; INIT 5 rctx = ctx -> data ASSIGN 6 rctx = ctx -> data LVAL 7 rctx NAME 8 rctx LEAF_NODE 9 rctx ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ctx -> data FIELD 8 ctx -> data LEAF_NODE 9 ctx LEAF_NODE 9 -> LEAF_NODE 9 data LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 rctx -> md EXPR 5 rctx -> md FIELD 6 rctx -> md LEAF_NODE 7 rctx LEAF_NODE 7 -> LEAF_NODE 7 md LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 rctx -> pad_mode == RSA_X931_PADDING EXPR 8 rctx -> pad_mode == RSA_X931_PADDING FIELD 9 rctx -> pad_mode LEAF_NODE 10 rctx LEAF_NODE 10 -> LEAF_NODE 10 pad_mode EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 RSA_X931_PADDING LEAF_NODE 10 RSA_X931_PADDING LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! setup_tbuf ( rctx , ctx ) EXPR 11 ! setup_tbuf ( rctx , ctx ) UNARY_EXPR 12 ! setup_tbuf ( rctx , ctx ) UNARY_OPERATOR 13 ! LEAF_NODE 14 ! FUNCTION_CALL 13 setup_tbuf ( rctx , ctx ) CALLEE 14 setup_tbuf LEAF_NODE 15 setup_tbuf LEAF_NODE 14 ( ARGUMENT 14 rctx FIELD 15 rctx LEAF_NODE 16 rctx LEAF_NODE 14 , ARGUMENT 14 ctx FIELD 15 ctx LEAF_NODE 16 ctx LEAF_NODE 14 ) LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 return - 1 ; KEYWORD 12 return LEAF_NODE 13 return DESTINATION 12 - 1 EXPR 13 - 1 UNARY_EXPR 14 - 1 UNARY_OPERATOR 15 - LEAF_NODE 16 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 12 ; EXPR_STATEMENT 9 ret = RSA_public_decrypt ( siglen , sig , rctx -> tbuf , ctx -> pkey -> pkey . rsa , RSA_X931_PADDING ) ; EXPR 10 ret = RSA_public_decrypt ( siglen , sig , rctx -> tbuf , ctx -> pkey -> pkey . rsa , RSA_X931_PADDING ) ASSIGN 11 ret = RSA_public_decrypt ( siglen , sig , rctx -> tbuf , ctx -> pkey -> pkey . rsa , RSA_X931_PADDING ) LVAL 12 ret FIELD 13 ret LEAF_NODE 14 ret ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 RSA_public_decrypt ( siglen , sig , rctx -> tbuf , ctx -> pkey -> pkey . rsa , RSA_X931_PADDING ) FUNCTION_CALL 13 RSA_public_decrypt ( siglen , sig , rctx -> tbuf , ctx -> pkey -> pkey . rsa , RSA_X931_PADDING ) CALLEE 14 RSA_public_decrypt LEAF_NODE 15 RSA_public_decrypt LEAF_NODE 14 ( ARGUMENT 14 siglen FIELD 15 siglen LEAF_NODE 16 siglen LEAF_NODE 14 , ARGUMENT 14 sig FIELD 15 sig LEAF_NODE 16 sig LEAF_NODE 14 , ARGUMENT 14 rctx -> tbuf FIELD 15 rctx -> tbuf LEAF_NODE 16 rctx LEAF_NODE 16 -> LEAF_NODE 16 tbuf LEAF_NODE 14 , ARGUMENT 14 ctx -> pkey -> pkey . rsa FIELD 15 ctx -> pkey -> pkey . rsa LEAF_NODE 16 ctx LEAF_NODE 16 -> LEAF_NODE 16 pkey LEAF_NODE 16 -> LEAF_NODE 16 pkey LEAF_NODE 16 . LEAF_NODE 16 rsa LEAF_NODE 14 , ARGUMENT 14 RSA_X931_PADDING FIELD 15 RSA_X931_PADDING LEAF_NODE 16 RSA_X931_PADDING LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ret < 1 EXPR 11 ret < 1 FIELD 12 ret LEAF_NODE 13 ret REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 return 0 ; KEYWORD 12 return LEAF_NODE 13 return DESTINATION 12 0 EXPR 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 ; EXPR_STATEMENT 9 ret -- ; EXPR 10 ret -- FIELD 11 ret -- LEAF_NODE 12 ret LEAF_NODE 12 -- LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 rctx -> tbuf [ ret ] != RSA_X931_hash_id ( EVP_MD_type ( rctx -> md ) ) EXPR 11 rctx -> tbuf [ ret ] != RSA_X931_hash_id ( EVP_MD_type ( rctx -> md ) ) FIELD 12 rctx -> tbuf [ ret ] LEAF_NODE 13 rctx LEAF_NODE 13 -> LEAF_NODE 13 tbuf LEAF_NODE 13 [ EXPR 13 ret FIELD 14 ret LEAF_NODE 15 ret LEAF_NODE 13 ] EQ_OPERATOR 12 != LEAF_NODE 13 != FUNCTION_CALL 12 RSA_X931_hash_id ( EVP_MD_type ( rctx -> md ) ) CALLEE 13 RSA_X931_hash_id LEAF_NODE 14 RSA_X931_hash_id LEAF_NODE 13 ( ARGUMENT 13 EVP_MD_type ( rctx -> md ) FUNCTION_CALL 14 EVP_MD_type ( rctx -> md ) CALLEE 15 EVP_MD_type LEAF_NODE 16 EVP_MD_type LEAF_NODE 15 ( ARGUMENT 15 rctx -> md FIELD 16 rctx -> md LEAF_NODE 17 rctx LEAF_NODE 17 -> LEAF_NODE 17 md LEAF_NODE 15 ) LEAF_NODE 13 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 RSAerr ( RSA_F_PKEY_RSA_VERIFYRECOVER , RSA_R_ALGORITHM_MISMATCH ) ; EXPR 13 RSAerr ( RSA_F_PKEY_RSA_VERIFYRECOVER , RSA_R_ALGORITHM_MISMATCH ) FUNCTION_CALL 14 RSAerr ( RSA_F_PKEY_RSA_VERIFYRECOVER , RSA_R_ALGORITHM_MISMATCH ) CALLEE 15 RSAerr LEAF_NODE 16 RSAerr LEAF_NODE 15 ( ARGUMENT 15 RSA_F_PKEY_RSA_VERIFYRECOVER FIELD 16 RSA_F_PKEY_RSA_VERIFYRECOVER LEAF_NODE 17 RSA_F_PKEY_RSA_VERIFYRECOVER LEAF_NODE 15 , ARGUMENT 15 RSA_R_ALGORITHM_MISMATCH FIELD 16 RSA_R_ALGORITHM_MISMATCH LEAF_NODE 17 RSA_R_ALGORITHM_MISMATCH LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 return 0 ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 0 EXPR 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ret != EVP_MD_size ( rctx -> md ) EXPR 11 ret != EVP_MD_size ( rctx -> md ) FIELD 12 ret LEAF_NODE 13 ret EQ_OPERATOR 12 != LEAF_NODE 13 != FUNCTION_CALL 12 EVP_MD_size ( rctx -> md ) CALLEE 13 EVP_MD_size LEAF_NODE 14 EVP_MD_size LEAF_NODE 13 ( ARGUMENT 13 rctx -> md FIELD 14 rctx -> md LEAF_NODE 15 rctx LEAF_NODE 15 -> LEAF_NODE 15 md LEAF_NODE 13 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 RSAerr ( RSA_F_PKEY_RSA_VERIFYRECOVER , RSA_R_INVALID_DIGEST_LENGTH ) ; EXPR 13 RSAerr ( RSA_F_PKEY_RSA_VERIFYRECOVER , RSA_R_INVALID_DIGEST_LENGTH ) FUNCTION_CALL 14 RSAerr ( RSA_F_PKEY_RSA_VERIFYRECOVER , RSA_R_INVALID_DIGEST_LENGTH ) CALLEE 15 RSAerr LEAF_NODE 16 RSAerr LEAF_NODE 15 ( ARGUMENT 15 RSA_F_PKEY_RSA_VERIFYRECOVER FIELD 16 RSA_F_PKEY_RSA_VERIFYRECOVER LEAF_NODE 17 RSA_F_PKEY_RSA_VERIFYRECOVER LEAF_NODE 15 , ARGUMENT 15 RSA_R_INVALID_DIGEST_LENGTH FIELD 16 RSA_R_INVALID_DIGEST_LENGTH LEAF_NODE 17 RSA_R_INVALID_DIGEST_LENGTH LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 return 0 ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 0 EXPR 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 rout EXPR 11 rout FIELD 12 rout LEAF_NODE 13 rout LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 memcpy ( rout , rctx -> tbuf , ret ) ; EXPR 12 memcpy ( rout , rctx -> tbuf , ret ) FUNCTION_CALL 13 memcpy ( rout , rctx -> tbuf , ret ) CALLEE 14 memcpy LEAF_NODE 15 memcpy LEAF_NODE 14 ( ARGUMENT 14 rout FIELD 15 rout LEAF_NODE 16 rout LEAF_NODE 14 , ARGUMENT 14 rctx -> tbuf FIELD 15 rctx -> tbuf LEAF_NODE 16 rctx LEAF_NODE 16 -> LEAF_NODE 16 tbuf LEAF_NODE 14 , ARGUMENT 14 ret FIELD 15 ret LEAF_NODE 16 ret LEAF_NODE 14 ) LEAF_NODE 12 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 rctx -> pad_mode == RSA_PKCS1_PADDING EXPR 10 rctx -> pad_mode == RSA_PKCS1_PADDING FIELD 11 rctx -> pad_mode LEAF_NODE 12 rctx LEAF_NODE 12 -> LEAF_NODE 12 pad_mode EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 RSA_PKCS1_PADDING LEAF_NODE 12 RSA_PKCS1_PADDING LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SIMPLE_DECL 11 size_t sltmp ; VAR_DECL 12 size_t sltmp TYPE 13 size_t TYPE_NAME 14 size_t LEAF_NODE 15 size_t NAME 13 sltmp LEAF_NODE 14 sltmp LEAF_NODE 12 ; EXPR_STATEMENT 11 ret = int_rsa_verify ( EVP_MD_type ( rctx -> md ) , NULL , 0 , rout , & sltmp , sig , siglen , ctx -> pkey -> pkey . rsa ) ; EXPR 12 ret = int_rsa_verify ( EVP_MD_type ( rctx -> md ) , NULL , 0 , rout , & sltmp , sig , siglen , ctx -> pkey -> pkey . rsa ) ASSIGN 13 ret = int_rsa_verify ( EVP_MD_type ( rctx -> md ) , NULL , 0 , rout , & sltmp , sig , siglen , ctx -> pkey -> pkey . rsa ) LVAL 14 ret FIELD 15 ret LEAF_NODE 16 ret ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 int_rsa_verify ( EVP_MD_type ( rctx -> md ) , NULL , 0 , rout , & sltmp , sig , siglen , ctx -> pkey -> pkey . rsa ) FUNCTION_CALL 15 int_rsa_verify ( EVP_MD_type ( rctx -> md ) , NULL , 0 , rout , & sltmp , sig , siglen , ctx -> pkey -> pkey . rsa ) CALLEE 16 int_rsa_verify LEAF_NODE 17 int_rsa_verify LEAF_NODE 16 ( ARGUMENT 16 EVP_MD_type ( rctx -> md ) FUNCTION_CALL 17 EVP_MD_type ( rctx -> md ) CALLEE 18 EVP_MD_type LEAF_NODE 19 EVP_MD_type LEAF_NODE 18 ( ARGUMENT 18 rctx -> md FIELD 19 rctx -> md LEAF_NODE 20 rctx LEAF_NODE 20 -> LEAF_NODE 20 md LEAF_NODE 18 ) LEAF_NODE 16 , ARGUMENT 16 NULL FIELD 17 NULL LEAF_NODE 18 NULL LEAF_NODE 16 , ARGUMENT 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 16 , ARGUMENT 16 rout FIELD 17 rout LEAF_NODE 18 rout LEAF_NODE 16 , ARGUMENT 16 & sltmp UNARY_EXPR 17 & sltmp UNARY_OPERATOR 18 & LEAF_NODE 19 & FIELD 18 sltmp LEAF_NODE 19 sltmp LEAF_NODE 16 , ARGUMENT 16 sig FIELD 17 sig LEAF_NODE 18 sig LEAF_NODE 16 , ARGUMENT 16 siglen FIELD 17 siglen LEAF_NODE 18 siglen LEAF_NODE 16 , ARGUMENT 16 ctx -> pkey -> pkey . rsa FIELD 17 ctx -> pkey -> pkey . rsa LEAF_NODE 18 ctx LEAF_NODE 18 -> LEAF_NODE 18 pkey LEAF_NODE 18 -> LEAF_NODE 18 pkey LEAF_NODE 18 . LEAF_NODE 18 rsa LEAF_NODE 16 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 ret = sltmp ; EXPR 12 ret = sltmp ASSIGN 13 ret = sltmp LVAL 14 ret FIELD 15 ret LEAF_NODE 16 ret ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 sltmp FIELD 15 sltmp LEAF_NODE 16 sltmp LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 JUMP_STATEMENT 8 return - 1 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 - 1 EXPR 10 - 1 UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 EXPR_STATEMENT 5 ret = RSA_public_decrypt ( siglen , sig , rout , ctx -> pkey -> pkey . rsa , rctx -> pad_mode ) ; EXPR 6 ret = RSA_public_decrypt ( siglen , sig , rout , ctx -> pkey -> pkey . rsa , rctx -> pad_mode ) ASSIGN 7 ret = RSA_public_decrypt ( siglen , sig , rout , ctx -> pkey -> pkey . rsa , rctx -> pad_mode ) LVAL 8 ret FIELD 9 ret LEAF_NODE 10 ret ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 RSA_public_decrypt ( siglen , sig , rout , ctx -> pkey -> pkey . rsa , rctx -> pad_mode ) FUNCTION_CALL 9 RSA_public_decrypt ( siglen , sig , rout , ctx -> pkey -> pkey . rsa , rctx -> pad_mode ) CALLEE 10 RSA_public_decrypt LEAF_NODE 11 RSA_public_decrypt LEAF_NODE 10 ( ARGUMENT 10 siglen FIELD 11 siglen LEAF_NODE 12 siglen LEAF_NODE 10 , ARGUMENT 10 sig FIELD 11 sig LEAF_NODE 12 sig LEAF_NODE 10 , ARGUMENT 10 rout FIELD 11 rout LEAF_NODE 12 rout LEAF_NODE 10 , ARGUMENT 10 ctx -> pkey -> pkey . rsa FIELD 11 ctx -> pkey -> pkey . rsa LEAF_NODE 12 ctx LEAF_NODE 12 -> LEAF_NODE 12 pkey LEAF_NODE 12 -> LEAF_NODE 12 pkey LEAF_NODE 12 . LEAF_NODE 12 rsa LEAF_NODE 10 , ARGUMENT 10 rctx -> pad_mode FIELD 11 rctx -> pad_mode LEAF_NODE 12 rctx LEAF_NODE 12 -> LEAF_NODE 12 pad_mode LEAF_NODE 10 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ret < 0 EXPR 5 ret < 0 FIELD 6 ret LEAF_NODE 7 ret REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return ret ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 ret EXPR 7 ret FIELD 8 ret LEAF_NODE 9 ret LEAF_NODE 6 ; EXPR_STATEMENT 3 * routlen = ret ; EXPR 4 * routlen = ret ASSIGN 5 * routlen = ret LVAL 6 * routlen UNARY_EXPR 7 * routlen UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 routlen LEAF_NODE 9 routlen ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ret FIELD 7 ret LEAF_NODE 8 ret LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 209, "project": "openssl_ast_vul_function_test_34", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 ASN1_UTCTIME * TYPE_NAME 3 ASN1_UTCTIME LEAF_NODE 4 ASN1_UTCTIME LEAF_NODE 3 * FUNCTION_NAME 2 ASN1_UTCTIME_adj LEAF_NODE 3 ASN1_UTCTIME_adj PARAMETER_LIST 2 ( ASN1_UTCTIME * s , time_t t , int offset_day , long offset_sec ) LEAF_NODE 3 ( PARAMETER_DECL 3 ASN1_UTCTIME * s TYPE 4 ASN1_UTCTIME * TYPE_NAME 5 ASN1_UTCTIME LEAF_NODE 6 ASN1_UTCTIME POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 time_t t TYPE 4 time_t TYPE_NAME 5 time_t LEAF_NODE 6 time_t NAME 4 t LEAF_NODE 5 t LEAF_NODE 3 , PARAMETER_DECL 3 int offset_day TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 offset_day LEAF_NODE 5 offset_day LEAF_NODE 3 , PARAMETER_DECL 3 long offset_sec TYPE 4 long TYPE_NAME 5 long LEAF_NODE 6 long NAME 4 offset_sec LEAF_NODE 5 offset_sec LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct tm * ts ; VAR_DECL 4 struct tm * ts TYPE 5 struct tm * TYPE_NAME 6 struct tm LEAF_NODE 7 struct LEAF_NODE 7 tm POINTER 6 * LEAF_NODE 7 * NAME 5 ts LEAF_NODE 6 ts LEAF_NODE 4 ; SIMPLE_DECL 3 struct tm data ; VAR_DECL 4 struct tm data TYPE 5 struct tm TYPE_NAME 6 struct tm LEAF_NODE 7 struct LEAF_NODE 7 tm NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 ts = OPENSSL_gmtime ( & t , & data ) ; EXPR 4 ts = OPENSSL_gmtime ( & t , & data ) ASSIGN 5 ts = OPENSSL_gmtime ( & t , & data ) LVAL 6 ts FIELD 7 ts LEAF_NODE 8 ts ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 OPENSSL_gmtime ( & t , & data ) FUNCTION_CALL 7 OPENSSL_gmtime ( & t , & data ) CALLEE 8 OPENSSL_gmtime LEAF_NODE 9 OPENSSL_gmtime LEAF_NODE 8 ( ARGUMENT 8 & t UNARY_EXPR 9 & t UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 t LEAF_NODE 11 t LEAF_NODE 8 , ARGUMENT 8 & data UNARY_EXPR 9 & data UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 data LEAF_NODE 11 data LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ts == NULL EXPR 5 ts == NULL FIELD 6 ts LEAF_NODE 7 ts EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return NULL ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 NULL EXPR 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 offset_day || offset_sec EXPR 5 offset_day || offset_sec OR 6 offset_day || offset_sec EXPR 7 offset_day FIELD 8 offset_day LEAF_NODE 9 offset_day LEAF_NODE 7 || EXPR 7 offset_sec FIELD 8 offset_sec LEAF_NODE 9 offset_sec LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! OPENSSL_gmtime_adj ( ts , offset_day , offset_sec ) EXPR 8 ! OPENSSL_gmtime_adj ( ts , offset_day , offset_sec ) UNARY_EXPR 9 ! OPENSSL_gmtime_adj ( ts , offset_day , offset_sec ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 OPENSSL_gmtime_adj ( ts , offset_day , offset_sec ) CALLEE 11 OPENSSL_gmtime_adj LEAF_NODE 12 OPENSSL_gmtime_adj LEAF_NODE 11 ( ARGUMENT 11 ts FIELD 12 ts LEAF_NODE 13 ts LEAF_NODE 11 , ARGUMENT 11 offset_day FIELD 12 offset_day LEAF_NODE 13 offset_day LEAF_NODE 11 , ARGUMENT 11 offset_sec FIELD 12 offset_sec LEAF_NODE 13 offset_sec LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return NULL ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 NULL EXPR 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 9 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return asn1_time_from_tm ( s , ts , V_ASN1_UTCTIME ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 asn1_time_from_tm ( s , ts , V_ASN1_UTCTIME ) EXPR 5 asn1_time_from_tm ( s , ts , V_ASN1_UTCTIME ) FUNCTION_CALL 6 asn1_time_from_tm ( s , ts , V_ASN1_UTCTIME ) CALLEE 7 asn1_time_from_tm LEAF_NODE 8 asn1_time_from_tm LEAF_NODE 7 ( ARGUMENT 7 s FIELD 8 s LEAF_NODE 9 s LEAF_NODE 7 , ARGUMENT 7 ts FIELD 8 ts LEAF_NODE 9 ts LEAF_NODE 7 , ARGUMENT 7 V_ASN1_UTCTIME FIELD 8 V_ASN1_UTCTIME LEAF_NODE 9 V_ASN1_UTCTIME LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 210, "project": "openssl_ast_normal_function_test_15", "target": 0}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ssl3_write_bytes LEAF_NODE 3 ssl3_write_bytes PARAMETER_LIST 2 ( SSL * s , int type , const void * buf_ , int len ) LEAF_NODE 3 ( PARAMETER_DECL 3 SSL * s TYPE 4 SSL * TYPE_NAME 5 SSL LEAF_NODE 6 SSL POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 int type TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 type LEAF_NODE 5 type LEAF_NODE 3 , PARAMETER_DECL 3 const void * buf_ TYPE 4 const void * TYPE_NAME 5 const void LEAF_NODE 6 const LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 buf_ LEAF_NODE 5 buf_ LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 const unsigned char * buf ; buf = buf_ ; VAR_DECL 4 const unsigned char * buf ; buf = buf_ TYPE 5 const unsigned char * TYPE_NAME 6 const unsigned char LEAF_NODE 7 const LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 buf LEAF_NODE 6 buf LEAF_NODE 5 ; INIT 5 buf = buf_ ASSIGN 6 buf = buf_ LVAL 7 buf NAME 8 buf LEAF_NODE 9 buf ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 buf_ FIELD 8 buf_ LEAF_NODE 9 buf_ LEAF_NODE 4 ; SIMPLE_DECL 3 int tot ; VAR_DECL 4 int tot TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 tot LEAF_NODE 6 tot LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int n , unsigned int nw ; INIT_DECL_LIST 4 unsigned int n , unsigned int nw VAR_DECL 5 unsigned int n TYPE 6 unsigned int TYPE_NAME 7 unsigned int LEAF_NODE 8 unsigned LEAF_NODE 8 int NAME 6 n LEAF_NODE 7 n LEAF_NODE 5 , VAR_DECL 5 unsigned int nw TYPE 6 unsigned int TYPE_NAME 7 unsigned int LEAF_NODE 8 unsigned LEAF_NODE 8 int NAME 6 nw LEAF_NODE 7 nw LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int max_send_fragment ; VAR_DECL 4 unsigned int max_send_fragment TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 max_send_fragment LEAF_NODE 6 max_send_fragment LEAF_NODE 4 ; SIMPLE_DECL 3 SSL3_BUFFER * wb ; wb = & ( s -> s3 -> wbuf ) ; VAR_DECL 4 SSL3_BUFFER * wb ; wb = & ( s -> s3 -> wbuf ) TYPE 5 SSL3_BUFFER * TYPE_NAME 6 SSL3_BUFFER LEAF_NODE 7 SSL3_BUFFER POINTER 6 * LEAF_NODE 7 * NAME 5 wb LEAF_NODE 6 wb LEAF_NODE 5 ; INIT 5 wb = & ( s -> s3 -> wbuf ) ASSIGN 6 wb = & ( s -> s3 -> wbuf ) LVAL 7 wb NAME 8 wb LEAF_NODE 9 wb ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & ( s -> s3 -> wbuf ) UNARY_EXPR 8 & ( s -> s3 -> wbuf ) UNARY_OPERATOR 9 & LEAF_NODE 10 & LEAF_NODE 9 ( FIELD 9 s -> s3 -> wbuf LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 s3 LEAF_NODE 10 -> LEAF_NODE 10 wbuf LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 int i ; VAR_DECL 4 int i TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> rwstate = SSL_NOTHING ; EXPR 4 s -> rwstate = SSL_NOTHING ASSIGN 5 s -> rwstate = SSL_NOTHING LVAL 6 s -> rwstate FIELD 7 s -> rwstate LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 rwstate ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 SSL_NOTHING FIELD 7 SSL_NOTHING LEAF_NODE 8 SSL_NOTHING LEAF_NODE 4 ; EXPR_STATEMENT 3 OPENSSL_assert ( s -> s3 -> wnum <= INT_MAX ) ; EXPR 4 OPENSSL_assert ( s -> s3 -> wnum <= INT_MAX ) FUNCTION_CALL 5 OPENSSL_assert ( s -> s3 -> wnum <= INT_MAX ) CALLEE 6 OPENSSL_assert LEAF_NODE 7 OPENSSL_assert LEAF_NODE 6 ( ARGUMENT 6 s -> s3 -> wnum <= INT_MAX FIELD 7 s -> s3 -> wnum LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s3 LEAF_NODE 8 -> LEAF_NODE 8 wnum REL_OPERATOR 7 <= LEAF_NODE 8 <= FIELD 7 INT_MAX LEAF_NODE 8 INT_MAX LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 tot = s -> s3 -> wnum ; EXPR 4 tot = s -> s3 -> wnum ASSIGN 5 tot = s -> s3 -> wnum LVAL 6 tot FIELD 7 tot LEAF_NODE 8 tot ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 s -> s3 -> wnum FIELD 7 s -> s3 -> wnum LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s3 LEAF_NODE 8 -> LEAF_NODE 8 wnum LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> s3 -> wnum = 0 ; EXPR 4 s -> s3 -> wnum = 0 ASSIGN 5 s -> s3 -> wnum = 0 LVAL 6 s -> s3 -> wnum FIELD 7 s -> s3 -> wnum LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 s3 LEAF_NODE 8 -> LEAF_NODE 8 wnum ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 SSL_in_init ( s ) && ! s -> in_handshake EXPR 5 SSL_in_init ( s ) && ! s -> in_handshake AND 6 SSL_in_init ( s ) && ! s -> in_handshake EXPR 7 SSL_in_init ( s ) FUNCTION_CALL 8 SSL_in_init ( s ) CALLEE 9 SSL_in_init LEAF_NODE 10 SSL_in_init LEAF_NODE 9 ( ARGUMENT 9 s FIELD 10 s LEAF_NODE 11 s LEAF_NODE 9 ) LEAF_NODE 7 && EXPR 7 ! s -> in_handshake UNARY_EXPR 8 ! s -> in_handshake UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 s -> in_handshake LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 in_handshake LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 i = s -> handshake_func ( s ) ; EXPR 7 i = s -> handshake_func ( s ) ASSIGN 8 i = s -> handshake_func ( s ) LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 s -> handshake_func ( s ) FUNCTION_CALL 10 s -> handshake_func ( s ) CALLEE 11 s -> handshake_func LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 handshake_func LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 i < 0 EXPR 8 i < 0 FIELD 9 i LEAF_NODE 10 i REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 return LEAF_NODE 6 ( LEAF_NODE 6 i LEAF_NODE 6 ) LEAF_NODE 6 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 i == 0 EXPR 8 i == 0 FIELD 9 i LEAF_NODE 10 i EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 SSLerr ( SSL_F_SSL3_WRITE_BYTES , SSL_R_SSL_HANDSHAKE_FAILURE ) ; EXPR 10 SSLerr ( SSL_F_SSL3_WRITE_BYTES , SSL_R_SSL_HANDSHAKE_FAILURE ) FUNCTION_CALL 11 SSLerr ( SSL_F_SSL3_WRITE_BYTES , SSL_R_SSL_HANDSHAKE_FAILURE ) CALLEE 12 SSLerr LEAF_NODE 13 SSLerr LEAF_NODE 12 ( ARGUMENT 12 SSL_F_SSL3_WRITE_BYTES FIELD 13 SSL_F_SSL3_WRITE_BYTES LEAF_NODE 14 SSL_F_SSL3_WRITE_BYTES LEAF_NODE 12 , ARGUMENT 12 SSL_R_SSL_HANDSHAKE_FAILURE FIELD 13 SSL_R_SSL_HANDSHAKE_FAILURE LEAF_NODE 14 SSL_R_SSL_HANDSHAKE_FAILURE LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return - 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 - 1 EXPR 11 - 1 UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 len < tot EXPR 5 len < tot FIELD 6 len LEAF_NODE 7 len REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 tot LEAF_NODE 7 tot LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 SSLerr ( SSL_F_SSL3_WRITE_BYTES , SSL_R_BAD_LENGTH ) ; EXPR 7 SSLerr ( SSL_F_SSL3_WRITE_BYTES , SSL_R_BAD_LENGTH ) FUNCTION_CALL 8 SSLerr ( SSL_F_SSL3_WRITE_BYTES , SSL_R_BAD_LENGTH ) CALLEE 9 SSLerr LEAF_NODE 10 SSLerr LEAF_NODE 9 ( ARGUMENT 9 SSL_F_SSL3_WRITE_BYTES FIELD 10 SSL_F_SSL3_WRITE_BYTES LEAF_NODE 11 SSL_F_SSL3_WRITE_BYTES LEAF_NODE 9 , ARGUMENT 9 SSL_R_BAD_LENGTH FIELD 10 SSL_R_BAD_LENGTH LEAF_NODE 11 SSL_R_BAD_LENGTH LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return ( - 1 ) ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 ( - 1 ) EXPR 8 ( - 1 ) LEAF_NODE 9 ( UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 wb -> left != 0 EXPR 5 wb -> left != 0 FIELD 6 wb -> left LEAF_NODE 7 wb LEAF_NODE 7 -> LEAF_NODE 7 left EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 i = ssl3_write_pending ( s , type , & buf [ tot ] , s -> s3 -> wpend_tot ) ; EXPR 7 i = ssl3_write_pending ( s , type , & buf [ tot ] , s -> s3 -> wpend_tot ) ASSIGN 8 i = ssl3_write_pending ( s , type , & buf [ tot ] , s -> s3 -> wpend_tot ) LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ssl3_write_pending ( s , type , & buf [ tot ] , s -> s3 -> wpend_tot ) FUNCTION_CALL 10 ssl3_write_pending ( s , type , & buf [ tot ] , s -> s3 -> wpend_tot ) CALLEE 11 ssl3_write_pending LEAF_NODE 12 ssl3_write_pending LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 , ARGUMENT 11 type FIELD 12 type LEAF_NODE 13 type LEAF_NODE 11 , ARGUMENT 11 & buf [ tot ] UNARY_EXPR 12 & buf [ tot ] UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 buf [ tot ] LEAF_NODE 14 buf LEAF_NODE 14 [ EXPR 14 tot FIELD 15 tot LEAF_NODE 16 tot LEAF_NODE 14 ] LEAF_NODE 11 , ARGUMENT 11 s -> s3 -> wpend_tot FIELD 12 s -> s3 -> wpend_tot LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 s3 LEAF_NODE 13 -> LEAF_NODE 13 wpend_tot LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 i <= 0 EXPR 8 i <= 0 FIELD 9 i LEAF_NODE 10 i REL_OPERATOR 9 <= LEAF_NODE 10 <= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 s -> s3 -> wnum = tot ; EXPR 10 s -> s3 -> wnum = tot ASSIGN 11 s -> s3 -> wnum = tot LVAL 12 s -> s3 -> wnum FIELD 13 s -> s3 -> wnum LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 s3 LEAF_NODE 14 -> LEAF_NODE 14 wnum ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 tot FIELD 13 tot LEAF_NODE 14 tot LEAF_NODE 10 ; JUMP_STATEMENT 9 return i ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 i EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 tot += i ; EXPR 7 tot += i ASSIGN 8 tot += i LVAL 9 tot FIELD 10 tot LEAF_NODE 11 tot ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 type == SSL3_RT_APPLICATION_DATA && len >= 4 * ( int ) ( max_send_fragment = s -> max_send_fragment ) && s -> compress == NULL && s -> msg_callback == NULL && SSL_USE_EXPLICIT_IV ( s ) && EVP_CIPHER_flags ( s -> enc_write_ctx -> cipher ) & EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK EXPR 5 type == SSL3_RT_APPLICATION_DATA && len >= 4 * ( int ) ( max_send_fragment = s -> max_send_fragment ) && s -> compress == NULL && s -> msg_callback == NULL && SSL_USE_EXPLICIT_IV ( s ) && EVP_CIPHER_flags ( s -> enc_write_ctx -> cipher ) & EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK AND 6 type == SSL3_RT_APPLICATION_DATA && len >= 4 * ( int ) ( max_send_fragment = s -> max_send_fragment ) && s -> compress == NULL && s -> msg_callback == NULL && SSL_USE_EXPLICIT_IV ( s ) && EVP_CIPHER_flags ( s -> enc_write_ctx -> cipher ) & EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK EXPR 7 type == SSL3_RT_APPLICATION_DATA FIELD 8 type LEAF_NODE 9 type EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 SSL3_RT_APPLICATION_DATA LEAF_NODE 9 SSL3_RT_APPLICATION_DATA LEAF_NODE 7 && EXPR 7 len >= 4 * ( int ) ( max_send_fragment = s -> max_send_fragment ) && s -> compress == NULL && s -> msg_callback == NULL && SSL_USE_EXPLICIT_IV ( s ) && EVP_CIPHER_flags ( s -> enc_write_ctx -> cipher ) & EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK AND 8 len >= 4 * ( int ) ( max_send_fragment = s -> max_send_fragment ) && s -> compress == NULL && s -> msg_callback == NULL && SSL_USE_EXPLICIT_IV ( s ) && EVP_CIPHER_flags ( s -> enc_write_ctx -> cipher ) & EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK EXPR 9 len >= 4 * ( int ) ( max_send_fragment = s -> max_send_fragment ) FIELD 10 len LEAF_NODE 11 len REL_OPERATOR 10 >= LEAF_NODE 11 >= FIELD 10 4 LEAF_NODE 11 4 LEAF_NODE 10 * LEAF_NODE 10 ( TYPE_NAME 10 int LEAF_NODE 11 int LEAF_NODE 10 ) LEAF_NODE 10 ( ASSIGN 10 max_send_fragment = s -> max_send_fragment LVAL 11 max_send_fragment FIELD 12 max_send_fragment LEAF_NODE 13 max_send_fragment ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 s -> max_send_fragment FIELD 12 s -> max_send_fragment LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 max_send_fragment LEAF_NODE 10 ) LEAF_NODE 9 && EXPR 9 s -> compress == NULL && s -> msg_callback == NULL && SSL_USE_EXPLICIT_IV ( s ) && EVP_CIPHER_flags ( s -> enc_write_ctx -> cipher ) & EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK AND 10 s -> compress == NULL && s -> msg_callback == NULL && SSL_USE_EXPLICIT_IV ( s ) && EVP_CIPHER_flags ( s -> enc_write_ctx -> cipher ) & EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK EXPR 11 s -> compress == NULL FIELD 12 s -> compress LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 compress EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 11 && EXPR 11 s -> msg_callback == NULL && SSL_USE_EXPLICIT_IV ( s ) && EVP_CIPHER_flags ( s -> enc_write_ctx -> cipher ) & EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK AND 12 s -> msg_callback == NULL && SSL_USE_EXPLICIT_IV ( s ) && EVP_CIPHER_flags ( s -> enc_write_ctx -> cipher ) & EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK EXPR 13 s -> msg_callback == NULL FIELD 14 s -> msg_callback LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 msg_callback EQ_OPERATOR 14 == LEAF_NODE 15 == FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 && EXPR 13 SSL_USE_EXPLICIT_IV ( s ) && EVP_CIPHER_flags ( s -> enc_write_ctx -> cipher ) & EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK AND 14 SSL_USE_EXPLICIT_IV ( s ) && EVP_CIPHER_flags ( s -> enc_write_ctx -> cipher ) & EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK EXPR 15 SSL_USE_EXPLICIT_IV ( s ) FUNCTION_CALL 16 SSL_USE_EXPLICIT_IV ( s ) CALLEE 17 SSL_USE_EXPLICIT_IV LEAF_NODE 18 SSL_USE_EXPLICIT_IV LEAF_NODE 17 ( ARGUMENT 17 s FIELD 18 s LEAF_NODE 19 s LEAF_NODE 17 ) LEAF_NODE 15 && EXPR 15 EVP_CIPHER_flags ( s -> enc_write_ctx -> cipher ) & EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK FUNCTION_CALL 16 EVP_CIPHER_flags ( s -> enc_write_ctx -> cipher ) CALLEE 17 EVP_CIPHER_flags LEAF_NODE 18 EVP_CIPHER_flags LEAF_NODE 17 ( ARGUMENT 17 s -> enc_write_ctx -> cipher FIELD 18 s -> enc_write_ctx -> cipher LEAF_NODE 19 s LEAF_NODE 19 -> LEAF_NODE 19 enc_write_ctx LEAF_NODE 19 -> LEAF_NODE 19 cipher LEAF_NODE 17 ) LEAF_NODE 16 & FIELD 16 EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK LEAF_NODE 17 EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 unsigned char [ 13 ] aad ; VAR_DECL 7 unsigned char [ 13 ] aad TYPE 8 unsigned char [ 13 ] TYPE_NAME 9 unsigned char LEAF_NODE 10 unsigned LEAF_NODE 10 char TYPE_SUFFIX 9 [ 13 ] LEAF_NODE 10 [ FIELD 10 13 LEAF_NODE 11 13 LEAF_NODE 10 ] NAME 8 aad LEAF_NODE 9 aad LEAF_NODE 7 ; SIMPLE_DECL 6 EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM mb_param ; VAR_DECL 7 EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM mb_param TYPE 8 EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM TYPE_NAME 9 EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM LEAF_NODE 10 EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM NAME 8 mb_param LEAF_NODE 9 mb_param LEAF_NODE 7 ; SIMPLE_DECL 6 int packlen ; VAR_DECL 7 int packlen TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 packlen LEAF_NODE 9 packlen LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( max_send_fragment & 0xfff ) == 0 EXPR 8 ( max_send_fragment & 0xfff ) == 0 LEAF_NODE 9 ( FIELD 9 max_send_fragment LEAF_NODE 10 max_send_fragment LEAF_NODE 9 & FIELD 9 0xfff LEAF_NODE 10 0xfff LEAF_NODE 9 ) EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 max_send_fragment -= 512 ; EXPR 9 max_send_fragment -= 512 ASSIGN 10 max_send_fragment -= 512 LVAL 11 max_send_fragment FIELD 12 max_send_fragment LEAF_NODE 13 max_send_fragment ASSIGN_OP 11 -= LEAF_NODE 12 -= RVAL 11 512 FIELD 12 512 LEAF_NODE 13 512 LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 tot == 0 || wb -> buf == NULL EXPR 8 tot == 0 || wb -> buf == NULL OR 9 tot == 0 || wb -> buf == NULL EXPR 10 tot == 0 FIELD 11 tot LEAF_NODE 12 tot EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 || EXPR 10 wb -> buf == NULL FIELD 11 wb -> buf LEAF_NODE 12 wb LEAF_NODE 12 -> LEAF_NODE 12 buf EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ssl3_release_write_buffer ( s ) ; EXPR 10 ssl3_release_write_buffer ( s ) FUNCTION_CALL 11 ssl3_release_write_buffer ( s ) CALLEE 12 ssl3_release_write_buffer LEAF_NODE 13 ssl3_release_write_buffer LEAF_NODE 12 ( ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 packlen = EVP_CIPHER_CTX_ctrl ( s -> enc_write_ctx , EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE , max_send_fragment , NULL ) ; EXPR 10 packlen = EVP_CIPHER_CTX_ctrl ( s -> enc_write_ctx , EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE , max_send_fragment , NULL ) ASSIGN 11 packlen = EVP_CIPHER_CTX_ctrl ( s -> enc_write_ctx , EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE , max_send_fragment , NULL ) LVAL 12 packlen FIELD 13 packlen LEAF_NODE 14 packlen ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 EVP_CIPHER_CTX_ctrl ( s -> enc_write_ctx , EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE , max_send_fragment , NULL ) FUNCTION_CALL 13 EVP_CIPHER_CTX_ctrl ( s -> enc_write_ctx , EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE , max_send_fragment , NULL ) CALLEE 14 EVP_CIPHER_CTX_ctrl LEAF_NODE 15 EVP_CIPHER_CTX_ctrl LEAF_NODE 14 ( ARGUMENT 14 s -> enc_write_ctx FIELD 15 s -> enc_write_ctx LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 enc_write_ctx LEAF_NODE 14 , ARGUMENT 14 EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE FIELD 15 EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE LEAF_NODE 16 EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE LEAF_NODE 14 , ARGUMENT 14 max_send_fragment FIELD 15 max_send_fragment LEAF_NODE 16 max_send_fragment LEAF_NODE 14 , ARGUMENT 14 NULL FIELD 15 NULL LEAF_NODE 16 NULL LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 len >= 8 * ( int ) max_send_fragment EXPR 11 len >= 8 * ( int ) max_send_fragment FIELD 12 len LEAF_NODE 13 len REL_OPERATOR 12 >= LEAF_NODE 13 >= FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 * LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) FIELD 12 max_send_fragment LEAF_NODE 13 max_send_fragment LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 packlen *= 8 ; EXPR 12 packlen *= 8 ASSIGN 13 packlen *= 8 LVAL 14 packlen FIELD 15 packlen LEAF_NODE 16 packlen ASSIGN_OP 14 *= LEAF_NODE 15 *= RVAL 14 8 FIELD 15 8 LEAF_NODE 16 8 LEAF_NODE 12 ; SELECTION 9 KEYWORD 10 else LEAF_NODE 11 else STATEMENTS 10 EXPR_STATEMENT 11 packlen *= 4 ; EXPR 12 packlen *= 4 ASSIGN 13 packlen *= 4 LVAL 14 packlen FIELD 15 packlen LEAF_NODE 16 packlen ASSIGN_OP 14 *= LEAF_NODE 15 *= RVAL 14 4 FIELD 15 4 LEAF_NODE 16 4 LEAF_NODE 12 ; EXPR_STATEMENT 9 wb -> buf = OPENSSL_malloc ( packlen ) ; EXPR 10 wb -> buf = OPENSSL_malloc ( packlen ) ASSIGN 11 wb -> buf = OPENSSL_malloc ( packlen ) LVAL 12 wb -> buf FIELD 13 wb -> buf LEAF_NODE 14 wb LEAF_NODE 14 -> LEAF_NODE 14 buf ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 OPENSSL_malloc ( packlen ) FUNCTION_CALL 13 OPENSSL_malloc ( packlen ) CALLEE 14 OPENSSL_malloc LEAF_NODE 15 OPENSSL_malloc LEAF_NODE 14 ( ARGUMENT 14 packlen FIELD 15 packlen LEAF_NODE 16 packlen LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 wb -> len = packlen ; EXPR 10 wb -> len = packlen ASSIGN 11 wb -> len = packlen LVAL 12 wb -> len FIELD 13 wb -> len LEAF_NODE 14 wb LEAF_NODE 14 -> LEAF_NODE 14 len ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 packlen FIELD 13 packlen LEAF_NODE 14 packlen LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 tot == len EXPR 10 tot == len FIELD 11 tot LEAF_NODE 12 tot EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 len LEAF_NODE 12 len LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 OPENSSL_free ( wb -> buf ) ; EXPR 12 OPENSSL_free ( wb -> buf ) FUNCTION_CALL 13 OPENSSL_free ( wb -> buf ) CALLEE 14 OPENSSL_free LEAF_NODE 15 OPENSSL_free LEAF_NODE 14 ( ARGUMENT 14 wb -> buf FIELD 15 wb -> buf LEAF_NODE 16 wb LEAF_NODE 16 -> LEAF_NODE 16 buf LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 wb -> buf = NULL ; EXPR 12 wb -> buf = NULL ASSIGN 13 wb -> buf = NULL LVAL 14 wb -> buf FIELD 15 wb -> buf LEAF_NODE 16 wb LEAF_NODE 16 -> LEAF_NODE 16 buf ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 NULL FIELD 15 NULL LEAF_NODE 16 NULL LEAF_NODE 12 ; JUMP_STATEMENT 11 return tot ; KEYWORD 12 return LEAF_NODE 13 return DESTINATION 12 tot EXPR 13 tot FIELD 14 tot LEAF_NODE 15 tot LEAF_NODE 12 ; LEAF_NODE 10 } EXPR_STATEMENT 6 n = ( len - tot ) ; EXPR 7 n = ( len - tot ) ASSIGN 8 n = ( len - tot ) LVAL 9 n FIELD 10 n LEAF_NODE 11 n ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( len - tot ) LEAF_NODE 10 ( FIELD 10 len LEAF_NODE 11 len LEAF_NODE 10 - FIELD 10 tot LEAF_NODE 11 tot LEAF_NODE 10 ) LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 ; LEAF_NODE 8 ; LEAF_NODE 7 CONDITION LEAF_NODE 7 ; LEAF_NODE 7 FOR_EXPR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 n < 4 * max_send_fragment EXPR 11 n < 4 * max_send_fragment FIELD 12 n LEAF_NODE 13 n REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 4 LEAF_NODE 13 4 LEAF_NODE 12 * FIELD 12 max_send_fragment LEAF_NODE 13 max_send_fragment LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 OPENSSL_free ( wb -> buf ) ; EXPR 13 OPENSSL_free ( wb -> buf ) FUNCTION_CALL 14 OPENSSL_free ( wb -> buf ) CALLEE 15 OPENSSL_free LEAF_NODE 16 OPENSSL_free LEAF_NODE 15 ( ARGUMENT 15 wb -> buf FIELD 16 wb -> buf LEAF_NODE 17 wb LEAF_NODE 17 -> LEAF_NODE 17 buf LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 wb -> buf = NULL ; EXPR 13 wb -> buf = NULL ASSIGN 14 wb -> buf = NULL LVAL 15 wb -> buf FIELD 16 wb -> buf LEAF_NODE 17 wb LEAF_NODE 17 -> LEAF_NODE 17 buf ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 s -> s3 -> alert_dispatch EXPR 11 s -> s3 -> alert_dispatch FIELD 12 s -> s3 -> alert_dispatch LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 s3 LEAF_NODE 13 -> LEAF_NODE 13 alert_dispatch LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 i = s -> method -> ssl_dispatch_alert ( s ) ; EXPR 13 i = s -> method -> ssl_dispatch_alert ( s ) ASSIGN 14 i = s -> method -> ssl_dispatch_alert ( s ) LVAL 15 i FIELD 16 i LEAF_NODE 17 i ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 s -> method -> ssl_dispatch_alert ( s ) FUNCTION_CALL 16 s -> method -> ssl_dispatch_alert ( s ) CALLEE 17 s -> method -> ssl_dispatch_alert LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 method LEAF_NODE 18 -> LEAF_NODE 18 ssl_dispatch_alert LEAF_NODE 17 ( ARGUMENT 17 s FIELD 18 s LEAF_NODE 19 s LEAF_NODE 17 ) LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 i <= 0 EXPR 14 i <= 0 FIELD 15 i LEAF_NODE 16 i REL_OPERATOR 15 <= LEAF_NODE 16 <= FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 EXPR_STATEMENT 15 s -> s3 -> wnum = tot ; EXPR 16 s -> s3 -> wnum = tot ASSIGN 17 s -> s3 -> wnum = tot LVAL 18 s -> s3 -> wnum FIELD 19 s -> s3 -> wnum LEAF_NODE 20 s LEAF_NODE 20 -> LEAF_NODE 20 s3 LEAF_NODE 20 -> LEAF_NODE 20 wnum ASSIGN_OP 18 = LEAF_NODE 19 = RVAL 18 tot FIELD 19 tot LEAF_NODE 20 tot LEAF_NODE 16 ; JUMP_STATEMENT 15 return i ; KEYWORD 16 return LEAF_NODE 17 return DESTINATION 16 i EXPR 17 i FIELD 18 i LEAF_NODE 19 i LEAF_NODE 16 ; LEAF_NODE 14 } LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 n >= 8 * max_send_fragment EXPR 11 n >= 8 * max_send_fragment FIELD 12 n LEAF_NODE 13 n REL_OPERATOR 12 >= LEAF_NODE 13 >= FIELD 12 8 LEAF_NODE 13 8 LEAF_NODE 12 * FIELD 12 max_send_fragment LEAF_NODE 13 max_send_fragment LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 nw = max_send_fragment * ( mb_param . interleave = 8 ) ; EXPR 12 nw = max_send_fragment * ( mb_param . interleave = 8 ) ASSIGN 13 nw = max_send_fragment * ( mb_param . interleave = 8 ) LVAL 14 nw FIELD 15 nw LEAF_NODE 16 nw ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 max_send_fragment * ( mb_param . interleave = 8 ) FIELD 15 max_send_fragment LEAF_NODE 16 max_send_fragment LEAF_NODE 15 * LEAF_NODE 15 ( ASSIGN 15 mb_param . interleave = 8 LVAL 16 mb_param . interleave FIELD 17 mb_param . interleave LEAF_NODE 18 mb_param LEAF_NODE 18 . LEAF_NODE 18 interleave ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 8 FIELD 17 8 LEAF_NODE 18 8 LEAF_NODE 15 ) LEAF_NODE 12 ; SELECTION 9 KEYWORD 10 else LEAF_NODE 11 else STATEMENTS 10 EXPR_STATEMENT 11 nw = max_send_fragment * ( mb_param . interleave = 4 ) ; EXPR 12 nw = max_send_fragment * ( mb_param . interleave = 4 ) ASSIGN 13 nw = max_send_fragment * ( mb_param . interleave = 4 ) LVAL 14 nw FIELD 15 nw LEAF_NODE 16 nw ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 max_send_fragment * ( mb_param . interleave = 4 ) FIELD 15 max_send_fragment LEAF_NODE 16 max_send_fragment LEAF_NODE 15 * LEAF_NODE 15 ( ASSIGN 15 mb_param . interleave = 4 LVAL 16 mb_param . interleave FIELD 17 mb_param . interleave LEAF_NODE 18 mb_param LEAF_NODE 18 . LEAF_NODE 18 interleave ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 4 FIELD 17 4 LEAF_NODE 18 4 LEAF_NODE 15 ) LEAF_NODE 12 ; EXPR_STATEMENT 9 memcpy ( aad , s -> s3 -> write_sequence , 8 ) ; EXPR 10 memcpy ( aad , s -> s3 -> write_sequence , 8 ) FUNCTION_CALL 11 memcpy ( aad , s -> s3 -> write_sequence , 8 ) CALLEE 12 memcpy LEAF_NODE 13 memcpy LEAF_NODE 12 ( ARGUMENT 12 aad FIELD 13 aad LEAF_NODE 14 aad LEAF_NODE 12 , ARGUMENT 12 s -> s3 -> write_sequence FIELD 13 s -> s3 -> write_sequence LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 s3 LEAF_NODE 14 -> LEAF_NODE 14 write_sequence LEAF_NODE 12 , ARGUMENT 12 8 FIELD 13 8 LEAF_NODE 14 8 LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 aad [ 8 ] = type ; EXPR 10 aad [ 8 ] = type ASSIGN 11 aad [ 8 ] = type LVAL 12 aad [ 8 ] FIELD 13 aad [ 8 ] LEAF_NODE 14 aad LEAF_NODE 14 [ EXPR 14 8 FIELD 15 8 LEAF_NODE 16 8 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 type FIELD 13 type LEAF_NODE 14 type LEAF_NODE 10 ; EXPR_STATEMENT 9 aad [ 9 ] = ( unsigned char ) ( s -> version >> 8 ) ; EXPR 10 aad [ 9 ] = ( unsigned char ) ( s -> version >> 8 ) ASSIGN 11 aad [ 9 ] = ( unsigned char ) ( s -> version >> 8 ) LVAL 12 aad [ 9 ] FIELD 13 aad [ 9 ] LEAF_NODE 14 aad LEAF_NODE 14 [ EXPR 14 9 FIELD 15 9 LEAF_NODE 16 9 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( unsigned char ) ( s -> version >> 8 ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 13 ) LEAF_NODE 13 ( FIELD 13 s -> version LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 version LEAF_NODE 13 >> FIELD 13 8 LEAF_NODE 14 8 LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 aad [ 10 ] = ( unsigned char ) ( s -> version ) ; EXPR 10 aad [ 10 ] = ( unsigned char ) ( s -> version ) ASSIGN 11 aad [ 10 ] = ( unsigned char ) ( s -> version ) LVAL 12 aad [ 10 ] FIELD 13 aad [ 10 ] LEAF_NODE 14 aad LEAF_NODE 14 [ EXPR 14 10 FIELD 15 10 LEAF_NODE 16 10 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( unsigned char ) ( s -> version ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned char LEAF_NODE 14 unsigned LEAF_NODE 14 char LEAF_NODE 13 ) LEAF_NODE 13 ( FIELD 13 s -> version LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 version LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 aad [ 11 ] = 0 ; EXPR 10 aad [ 11 ] = 0 ASSIGN 11 aad [ 11 ] = 0 LVAL 12 aad [ 11 ] FIELD 13 aad [ 11 ] LEAF_NODE 14 aad LEAF_NODE 14 [ EXPR 14 11 FIELD 15 11 LEAF_NODE 16 11 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 aad [ 12 ] = 0 ; EXPR 10 aad [ 12 ] = 0 ASSIGN 11 aad [ 12 ] = 0 LVAL 12 aad [ 12 ] FIELD 13 aad [ 12 ] LEAF_NODE 14 aad LEAF_NODE 14 [ EXPR 14 12 FIELD 15 12 LEAF_NODE 16 12 LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 mb_param . out = NULL ; EXPR 10 mb_param . out = NULL ASSIGN 11 mb_param . out = NULL LVAL 12 mb_param . out FIELD 13 mb_param . out LEAF_NODE 14 mb_param LEAF_NODE 14 . LEAF_NODE 14 out ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 10 ; EXPR_STATEMENT 9 mb_param . inp = aad ; EXPR 10 mb_param . inp = aad ASSIGN 11 mb_param . inp = aad LVAL 12 mb_param . inp FIELD 13 mb_param . inp LEAF_NODE 14 mb_param LEAF_NODE 14 . LEAF_NODE 14 inp ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 aad FIELD 13 aad LEAF_NODE 14 aad LEAF_NODE 10 ; EXPR_STATEMENT 9 mb_param . len = nw ; EXPR 10 mb_param . len = nw ASSIGN 11 mb_param . len = nw LVAL 12 mb_param . len FIELD 13 mb_param . len LEAF_NODE 14 mb_param LEAF_NODE 14 . LEAF_NODE 14 len ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 nw FIELD 13 nw LEAF_NODE 14 nw LEAF_NODE 10 ; EXPR_STATEMENT 9 packlen = EVP_CIPHER_CTX_ctrl ( s -> enc_write_ctx , EVP_CTRL_TLS1_1_MULTIBLOCK_AAD , sizeof ( mb_param ) , & mb_param ) ; EXPR 10 packlen = EVP_CIPHER_CTX_ctrl ( s -> enc_write_ctx , EVP_CTRL_TLS1_1_MULTIBLOCK_AAD , sizeof ( mb_param ) , & mb_param ) ASSIGN 11 packlen = EVP_CIPHER_CTX_ctrl ( s -> enc_write_ctx , EVP_CTRL_TLS1_1_MULTIBLOCK_AAD , sizeof ( mb_param ) , & mb_param ) LVAL 12 packlen FIELD 13 packlen LEAF_NODE 14 packlen ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 EVP_CIPHER_CTX_ctrl ( s -> enc_write_ctx , EVP_CTRL_TLS1_1_MULTIBLOCK_AAD , sizeof ( mb_param ) , & mb_param ) FUNCTION_CALL 13 EVP_CIPHER_CTX_ctrl ( s -> enc_write_ctx , EVP_CTRL_TLS1_1_MULTIBLOCK_AAD , sizeof ( mb_param ) , & mb_param ) CALLEE 14 EVP_CIPHER_CTX_ctrl LEAF_NODE 15 EVP_CIPHER_CTX_ctrl LEAF_NODE 14 ( ARGUMENT 14 s -> enc_write_ctx FIELD 15 s -> enc_write_ctx LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 enc_write_ctx LEAF_NODE 14 , ARGUMENT 14 EVP_CTRL_TLS1_1_MULTIBLOCK_AAD FIELD 15 EVP_CTRL_TLS1_1_MULTIBLOCK_AAD LEAF_NODE 16 EVP_CTRL_TLS1_1_MULTIBLOCK_AAD LEAF_NODE 14 , ARGUMENT 14 sizeof ( mb_param ) FUNCTION_CALL 15 sizeof ( mb_param ) CALLEE 16 sizeof LEAF_NODE 17 sizeof LEAF_NODE 16 ( ARGUMENT 16 mb_param FIELD 17 mb_param LEAF_NODE 18 mb_param LEAF_NODE 16 ) LEAF_NODE 14 , ARGUMENT 14 & mb_param UNARY_EXPR 15 & mb_param UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 mb_param LEAF_NODE 17 mb_param LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 packlen <= 0 || packlen > ( int ) wb -> len EXPR 11 packlen <= 0 || packlen > ( int ) wb -> len OR 12 packlen <= 0 || packlen > ( int ) wb -> len EXPR 13 packlen <= 0 FIELD 14 packlen LEAF_NODE 15 packlen REL_OPERATOR 14 <= LEAF_NODE 15 <= FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 13 || EXPR 13 packlen > ( int ) wb -> len FIELD 14 packlen LEAF_NODE 15 packlen REL_OPERATOR 14 > LEAF_NODE 15 > LEAF_NODE 14 ( TYPE_NAME 14 int LEAF_NODE 15 int LEAF_NODE 14 ) FIELD 14 wb -> len LEAF_NODE 15 wb LEAF_NODE 15 -> LEAF_NODE 15 len LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 OPENSSL_free ( wb -> buf ) ; EXPR 13 OPENSSL_free ( wb -> buf ) FUNCTION_CALL 14 OPENSSL_free ( wb -> buf ) CALLEE 15 OPENSSL_free LEAF_NODE 16 OPENSSL_free LEAF_NODE 15 ( ARGUMENT 15 wb -> buf FIELD 16 wb -> buf LEAF_NODE 17 wb LEAF_NODE 17 -> LEAF_NODE 17 buf LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 wb -> buf = NULL ; EXPR 13 wb -> buf = NULL ASSIGN 14 wb -> buf = NULL LVAL 15 wb -> buf FIELD 16 wb -> buf LEAF_NODE 17 wb LEAF_NODE 17 -> LEAF_NODE 17 buf ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 mb_param . out = wb -> buf ; EXPR 10 mb_param . out = wb -> buf ASSIGN 11 mb_param . out = wb -> buf LVAL 12 mb_param . out FIELD 13 mb_param . out LEAF_NODE 14 mb_param LEAF_NODE 14 . LEAF_NODE 14 out ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 wb -> buf FIELD 13 wb -> buf LEAF_NODE 14 wb LEAF_NODE 14 -> LEAF_NODE 14 buf LEAF_NODE 10 ; EXPR_STATEMENT 9 mb_param . inp = & buf [ tot ] ; EXPR 10 mb_param . inp = & buf [ tot ] ASSIGN 11 mb_param . inp = & buf [ tot ] LVAL 12 mb_param . inp FIELD 13 mb_param . inp LEAF_NODE 14 mb_param LEAF_NODE 14 . LEAF_NODE 14 inp ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 & buf [ tot ] UNARY_EXPR 13 & buf [ tot ] UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 buf [ tot ] LEAF_NODE 15 buf LEAF_NODE 15 [ EXPR 15 tot FIELD 16 tot LEAF_NODE 17 tot LEAF_NODE 15 ] LEAF_NODE 10 ; EXPR_STATEMENT 9 mb_param . len = nw ; EXPR 10 mb_param . len = nw ASSIGN 11 mb_param . len = nw LVAL 12 mb_param . len FIELD 13 mb_param . len LEAF_NODE 14 mb_param LEAF_NODE 14 . LEAF_NODE 14 len ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 nw FIELD 13 nw LEAF_NODE 14 nw LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 EVP_CIPHER_CTX_ctrl ( s -> enc_write_ctx , EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT , sizeof ( mb_param ) , & mb_param ) <= 0 EXPR 11 EVP_CIPHER_CTX_ctrl ( s -> enc_write_ctx , EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT , sizeof ( mb_param ) , & mb_param ) <= 0 FUNCTION_CALL 12 EVP_CIPHER_CTX_ctrl ( s -> enc_write_ctx , EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT , sizeof ( mb_param ) , & mb_param ) CALLEE 13 EVP_CIPHER_CTX_ctrl LEAF_NODE 14 EVP_CIPHER_CTX_ctrl LEAF_NODE 13 ( ARGUMENT 13 s -> enc_write_ctx FIELD 14 s -> enc_write_ctx LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 enc_write_ctx LEAF_NODE 13 , ARGUMENT 13 EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT FIELD 14 EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT LEAF_NODE 15 EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT LEAF_NODE 13 , ARGUMENT 13 sizeof ( mb_param ) FUNCTION_CALL 14 sizeof ( mb_param ) CALLEE 15 sizeof LEAF_NODE 16 sizeof LEAF_NODE 15 ( ARGUMENT 15 mb_param FIELD 16 mb_param LEAF_NODE 17 mb_param LEAF_NODE 15 ) LEAF_NODE 13 , ARGUMENT 13 & mb_param UNARY_EXPR 14 & mb_param UNARY_OPERATOR 15 & LEAF_NODE 16 & FIELD 15 mb_param LEAF_NODE 16 mb_param LEAF_NODE 13 ) REL_OPERATOR 12 <= LEAF_NODE 13 <= FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 return - 1 ; KEYWORD 12 return LEAF_NODE 13 return DESTINATION 12 - 1 EXPR 13 - 1 UNARY_EXPR 14 - 1 UNARY_OPERATOR 15 - LEAF_NODE 16 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 12 ; EXPR_STATEMENT 9 s -> s3 -> write_sequence [ 7 ] += mb_param . interleave ; EXPR 10 s -> s3 -> write_sequence [ 7 ] += mb_param . interleave ASSIGN 11 s -> s3 -> write_sequence [ 7 ] += mb_param . interleave LVAL 12 s -> s3 -> write_sequence [ 7 ] FIELD 13 s -> s3 -> write_sequence [ 7 ] LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 s3 LEAF_NODE 14 -> LEAF_NODE 14 write_sequence LEAF_NODE 14 [ EXPR 14 7 FIELD 15 7 LEAF_NODE 16 7 LEAF_NODE 14 ] ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 mb_param . interleave FIELD 13 mb_param . interleave LEAF_NODE 14 mb_param LEAF_NODE 14 . LEAF_NODE 14 interleave LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 s -> s3 -> write_sequence [ 7 ] < mb_param . interleave EXPR 11 s -> s3 -> write_sequence [ 7 ] < mb_param . interleave FIELD 12 s -> s3 -> write_sequence [ 7 ] LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 s3 LEAF_NODE 13 -> LEAF_NODE 13 write_sequence LEAF_NODE 13 [ EXPR 13 7 FIELD 14 7 LEAF_NODE 15 7 LEAF_NODE 13 ] REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 mb_param . interleave LEAF_NODE 13 mb_param LEAF_NODE 13 . LEAF_NODE 13 interleave LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 SIMPLE_DECL 12 int j ; j = 6 ; VAR_DECL 13 int j ; j = 6 TYPE 14 int TYPE_NAME 15 int LEAF_NODE 16 int NAME 14 j LEAF_NODE 15 j LEAF_NODE 14 ; INIT 14 j = 6 ASSIGN 15 j = 6 LVAL 16 j NAME 17 j LEAF_NODE 18 j ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 6 FIELD 17 6 LEAF_NODE 18 6 LEAF_NODE 13 ; ITERATION 12 KEYWORD 13 while LEAF_NODE 14 while LEAF_NODE 13 ( CONDITION 13 j >= 0 && ( ++ s -> s3 -> write_sequence [ j -- ] ) == 0 EXPR 14 j >= 0 && ( ++ s -> s3 -> write_sequence [ j -- ] ) == 0 AND 15 j >= 0 && ( ++ s -> s3 -> write_sequence [ j -- ] ) == 0 EXPR 16 j >= 0 FIELD 17 j LEAF_NODE 18 j REL_OPERATOR 17 >= LEAF_NODE 18 >= FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 16 && EXPR 16 ( ++ s -> s3 -> write_sequence [ j -- ] ) == 0 LEAF_NODE 17 ( LEAF_NODE 17 ++ FIELD 17 s -> s3 -> write_sequence [ j -- ] LEAF_NODE 18 s LEAF_NODE 18 -> LEAF_NODE 18 s3 LEAF_NODE 18 -> LEAF_NODE 18 write_sequence LEAF_NODE 18 [ EXPR 18 j -- FIELD 19 j -- LEAF_NODE 20 j LEAF_NODE 20 -- LEAF_NODE 18 ] LEAF_NODE 17 ) EQ_OPERATOR 17 == LEAF_NODE 18 == FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 ; LEAF_NODE 11 } EXPR_STATEMENT 9 wb -> offset = 0 ; EXPR 10 wb -> offset = 0 ASSIGN 11 wb -> offset = 0 LVAL 12 wb -> offset FIELD 13 wb -> offset LEAF_NODE 14 wb LEAF_NODE 14 -> LEAF_NODE 14 offset ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 wb -> left = packlen ; EXPR 10 wb -> left = packlen ASSIGN 11 wb -> left = packlen LVAL 12 wb -> left FIELD 13 wb -> left LEAF_NODE 14 wb LEAF_NODE 14 -> LEAF_NODE 14 left ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 packlen FIELD 13 packlen LEAF_NODE 14 packlen LEAF_NODE 10 ; EXPR_STATEMENT 9 s -> s3 -> wpend_tot = nw ; EXPR 10 s -> s3 -> wpend_tot = nw ASSIGN 11 s -> s3 -> wpend_tot = nw LVAL 12 s -> s3 -> wpend_tot FIELD 13 s -> s3 -> wpend_tot LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 s3 LEAF_NODE 14 -> LEAF_NODE 14 wpend_tot ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 nw FIELD 13 nw LEAF_NODE 14 nw LEAF_NODE 10 ; EXPR_STATEMENT 9 s -> s3 -> wpend_buf = & buf [ tot ] ; EXPR 10 s -> s3 -> wpend_buf = & buf [ tot ] ASSIGN 11 s -> s3 -> wpend_buf = & buf [ tot ] LVAL 12 s -> s3 -> wpend_buf FIELD 13 s -> s3 -> wpend_buf LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 s3 LEAF_NODE 14 -> LEAF_NODE 14 wpend_buf ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 & buf [ tot ] UNARY_EXPR 13 & buf [ tot ] UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 buf [ tot ] LEAF_NODE 15 buf LEAF_NODE 15 [ EXPR 15 tot FIELD 16 tot LEAF_NODE 17 tot LEAF_NODE 15 ] LEAF_NODE 10 ; EXPR_STATEMENT 9 s -> s3 -> wpend_type = type ; EXPR 10 s -> s3 -> wpend_type = type ASSIGN 11 s -> s3 -> wpend_type = type LVAL 12 s -> s3 -> wpend_type FIELD 13 s -> s3 -> wpend_type LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 s3 LEAF_NODE 14 -> LEAF_NODE 14 wpend_type ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 type FIELD 13 type LEAF_NODE 14 type LEAF_NODE 10 ; EXPR_STATEMENT 9 s -> s3 -> wpend_ret = nw ; EXPR 10 s -> s3 -> wpend_ret = nw ASSIGN 11 s -> s3 -> wpend_ret = nw LVAL 12 s -> s3 -> wpend_ret FIELD 13 s -> s3 -> wpend_ret LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 s3 LEAF_NODE 14 -> LEAF_NODE 14 wpend_ret ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 nw FIELD 13 nw LEAF_NODE 14 nw LEAF_NODE 10 ; EXPR_STATEMENT 9 i = ssl3_write_pending ( s , type , & buf [ tot ] , nw ) ; EXPR 10 i = ssl3_write_pending ( s , type , & buf [ tot ] , nw ) ASSIGN 11 i = ssl3_write_pending ( s , type , & buf [ tot ] , nw ) LVAL 12 i FIELD 13 i LEAF_NODE 14 i ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ssl3_write_pending ( s , type , & buf [ tot ] , nw ) FUNCTION_CALL 13 ssl3_write_pending ( s , type , & buf [ tot ] , nw ) CALLEE 14 ssl3_write_pending LEAF_NODE 15 ssl3_write_pending LEAF_NODE 14 ( ARGUMENT 14 s FIELD 15 s LEAF_NODE 16 s LEAF_NODE 14 , ARGUMENT 14 type FIELD 15 type LEAF_NODE 16 type LEAF_NODE 14 , ARGUMENT 14 & buf [ tot ] UNARY_EXPR 15 & buf [ tot ] UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 buf [ tot ] LEAF_NODE 17 buf LEAF_NODE 17 [ EXPR 17 tot FIELD 18 tot LEAF_NODE 19 tot LEAF_NODE 17 ] LEAF_NODE 14 , ARGUMENT 14 nw FIELD 15 nw LEAF_NODE 16 nw LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 i <= 0 EXPR 11 i <= 0 FIELD 12 i LEAF_NODE 13 i REL_OPERATOR 12 <= LEAF_NODE 13 <= FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 i < 0 EXPR 14 i < 0 FIELD 15 i LEAF_NODE 16 i REL_OPERATOR 15 < LEAF_NODE 16 < FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 EXPR_STATEMENT 15 OPENSSL_free ( wb -> buf ) ; EXPR 16 OPENSSL_free ( wb -> buf ) FUNCTION_CALL 17 OPENSSL_free ( wb -> buf ) CALLEE 18 OPENSSL_free LEAF_NODE 19 OPENSSL_free LEAF_NODE 18 ( ARGUMENT 18 wb -> buf FIELD 19 wb -> buf LEAF_NODE 20 wb LEAF_NODE 20 -> LEAF_NODE 20 buf LEAF_NODE 18 ) LEAF_NODE 16 ; EXPR_STATEMENT 15 wb -> buf = NULL ; EXPR 16 wb -> buf = NULL ASSIGN 17 wb -> buf = NULL LVAL 18 wb -> buf FIELD 19 wb -> buf LEAF_NODE 20 wb LEAF_NODE 20 -> LEAF_NODE 20 buf ASSIGN_OP 18 = LEAF_NODE 19 = RVAL 18 NULL FIELD 19 NULL LEAF_NODE 20 NULL LEAF_NODE 16 ; LEAF_NODE 14 } EXPR_STATEMENT 12 s -> s3 -> wnum = tot ; EXPR 13 s -> s3 -> wnum = tot ASSIGN 14 s -> s3 -> wnum = tot LVAL 15 s -> s3 -> wnum FIELD 16 s -> s3 -> wnum LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 s3 LEAF_NODE 17 -> LEAF_NODE 17 wnum ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 tot FIELD 16 tot LEAF_NODE 17 tot LEAF_NODE 13 ; JUMP_STATEMENT 12 return i ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 i EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 i == ( int ) n EXPR 11 i == ( int ) n FIELD 12 i LEAF_NODE 13 i EQ_OPERATOR 12 == LEAF_NODE 13 == LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) FIELD 12 n LEAF_NODE 13 n LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 OPENSSL_free ( wb -> buf ) ; EXPR 13 OPENSSL_free ( wb -> buf ) FUNCTION_CALL 14 OPENSSL_free ( wb -> buf ) CALLEE 15 OPENSSL_free LEAF_NODE 16 OPENSSL_free LEAF_NODE 15 ( ARGUMENT 15 wb -> buf FIELD 16 wb -> buf LEAF_NODE 17 wb LEAF_NODE 17 -> LEAF_NODE 17 buf LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 wb -> buf = NULL ; EXPR 13 wb -> buf = NULL ASSIGN 14 wb -> buf = NULL LVAL 15 wb -> buf FIELD 16 wb -> buf LEAF_NODE 17 wb LEAF_NODE 17 -> LEAF_NODE 17 buf ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 13 ; JUMP_STATEMENT 12 return tot + i ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 tot + i EXPR 14 tot + i FIELD 15 tot LEAF_NODE 16 tot LEAF_NODE 15 + FIELD 15 i LEAF_NODE 16 i LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 n -= i ; EXPR 10 n -= i ASSIGN 11 n -= i LVAL 12 n FIELD 13 n LEAF_NODE 14 n ASSIGN_OP 12 -= LEAF_NODE 13 -= RVAL 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 10 ; EXPR_STATEMENT 9 tot += i ; EXPR 10 tot += i ASSIGN 11 tot += i LVAL 12 tot FIELD 13 tot LEAF_NODE 14 tot ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 tot == len EXPR 7 tot == len FIELD 8 tot LEAF_NODE 9 tot EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 len LEAF_NODE 9 len LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 s -> mode & SSL_MODE_RELEASE_BUFFERS && ! SSL_IS_DTLS ( s ) EXPR 10 s -> mode & SSL_MODE_RELEASE_BUFFERS && ! SSL_IS_DTLS ( s ) AND 11 s -> mode & SSL_MODE_RELEASE_BUFFERS && ! SSL_IS_DTLS ( s ) EXPR 12 s -> mode & SSL_MODE_RELEASE_BUFFERS FIELD 13 s -> mode LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 mode LEAF_NODE 13 & FIELD 13 SSL_MODE_RELEASE_BUFFERS LEAF_NODE 14 SSL_MODE_RELEASE_BUFFERS LEAF_NODE 12 && EXPR 12 ! SSL_IS_DTLS ( s ) UNARY_EXPR 13 ! SSL_IS_DTLS ( s ) UNARY_OPERATOR 14 ! LEAF_NODE 15 ! FUNCTION_CALL 14 SSL_IS_DTLS ( s ) CALLEE 15 SSL_IS_DTLS LEAF_NODE 16 SSL_IS_DTLS LEAF_NODE 15 ( ARGUMENT 15 s FIELD 16 s LEAF_NODE 17 s LEAF_NODE 15 ) LEAF_NODE 9 ) STATEMENTS 9 EXPR_STATEMENT 10 ssl3_release_write_buffer ( s ) ; EXPR 11 ssl3_release_write_buffer ( s ) FUNCTION_CALL 12 ssl3_release_write_buffer ( s ) CALLEE 13 ssl3_release_write_buffer LEAF_NODE 14 ssl3_release_write_buffer LEAF_NODE 13 ( ARGUMENT 13 s FIELD 14 s LEAF_NODE 15 s LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 8 return tot ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 tot EXPR 10 tot FIELD 11 tot LEAF_NODE 12 tot LEAF_NODE 9 ; LEAF_NODE 7 } EXPR_STATEMENT 3 n = ( len - tot ) ; EXPR 4 n = ( len - tot ) ASSIGN 5 n = ( len - tot ) LVAL 6 n FIELD 7 n LEAF_NODE 8 n ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( len - tot ) LEAF_NODE 7 ( FIELD 7 len LEAF_NODE 8 len LEAF_NODE 7 - FIELD 7 tot LEAF_NODE 8 tot LEAF_NODE 7 ) LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; LEAF_NODE 4 CONDITION LEAF_NODE 4 ; LEAF_NODE 4 FOR_EXPR LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 n > s -> max_send_fragment EXPR 8 n > s -> max_send_fragment FIELD 9 n LEAF_NODE 10 n REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 s -> max_send_fragment LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 max_send_fragment LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 nw = s -> max_send_fragment ; EXPR 9 nw = s -> max_send_fragment ASSIGN 10 nw = s -> max_send_fragment LVAL 11 nw FIELD 12 nw LEAF_NODE 13 nw ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 s -> max_send_fragment FIELD 12 s -> max_send_fragment LEAF_NODE 13 s LEAF_NODE 13 -> LEAF_NODE 13 max_send_fragment LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 EXPR_STATEMENT 8 nw = n ; EXPR 9 nw = n ASSIGN 10 nw = n LVAL 11 nw FIELD 12 nw LEAF_NODE 13 nw ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 n FIELD 12 n LEAF_NODE 13 n LEAF_NODE 9 ; EXPR_STATEMENT 6 i = do_ssl3_write ( s , type , & ( buf [ tot ] ) , nw , 0 ) ; EXPR 7 i = do_ssl3_write ( s , type , & ( buf [ tot ] ) , nw , 0 ) ASSIGN 8 i = do_ssl3_write ( s , type , & ( buf [ tot ] ) , nw , 0 ) LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 do_ssl3_write ( s , type , & ( buf [ tot ] ) , nw , 0 ) FUNCTION_CALL 10 do_ssl3_write ( s , type , & ( buf [ tot ] ) , nw , 0 ) CALLEE 11 do_ssl3_write LEAF_NODE 12 do_ssl3_write LEAF_NODE 11 ( ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 , ARGUMENT 11 type FIELD 12 type LEAF_NODE 13 type LEAF_NODE 11 , ARGUMENT 11 & ( buf [ tot ] ) UNARY_EXPR 12 & ( buf [ tot ] ) UNARY_OPERATOR 13 & LEAF_NODE 14 & LEAF_NODE 13 ( FIELD 13 buf [ tot ] LEAF_NODE 14 buf LEAF_NODE 14 [ EXPR 14 tot FIELD 15 tot LEAF_NODE 16 tot LEAF_NODE 14 ] LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 nw FIELD 12 nw LEAF_NODE 13 nw LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 i <= 0 EXPR 8 i <= 0 FIELD 9 i LEAF_NODE 10 i REL_OPERATOR 9 <= LEAF_NODE 10 <= FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 s -> s3 -> wnum = tot ; EXPR 10 s -> s3 -> wnum = tot ASSIGN 11 s -> s3 -> wnum = tot LVAL 12 s -> s3 -> wnum FIELD 13 s -> s3 -> wnum LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 s3 LEAF_NODE 14 -> LEAF_NODE 14 wnum ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 tot FIELD 13 tot LEAF_NODE 14 tot LEAF_NODE 10 ; JUMP_STATEMENT 9 return i ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 i EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( i == ( int ) n ) || ( type == SSL3_RT_APPLICATION_DATA && ( s -> mode & SSL_MODE_ENABLE_PARTIAL_WRITE ) ) EXPR 8 ( i == ( int ) n ) || ( type == SSL3_RT_APPLICATION_DATA && ( s -> mode & SSL_MODE_ENABLE_PARTIAL_WRITE ) ) OR 9 ( i == ( int ) n ) || ( type == SSL3_RT_APPLICATION_DATA && ( s -> mode & SSL_MODE_ENABLE_PARTIAL_WRITE ) ) EXPR 10 ( i == ( int ) n ) LEAF_NODE 11 ( FIELD 11 i LEAF_NODE 12 i EQ_OPERATOR 11 == LEAF_NODE 12 == LEAF_NODE 11 ( TYPE_NAME 11 int LEAF_NODE 12 int LEAF_NODE 11 ) FIELD 11 n LEAF_NODE 12 n LEAF_NODE 11 ) LEAF_NODE 10 || EXPR 10 ( type == SSL3_RT_APPLICATION_DATA && ( s -> mode & SSL_MODE_ENABLE_PARTIAL_WRITE ) ) LEAF_NODE 11 ( AND 11 type == SSL3_RT_APPLICATION_DATA && ( s -> mode & SSL_MODE_ENABLE_PARTIAL_WRITE ) EXPR 12 type == SSL3_RT_APPLICATION_DATA FIELD 13 type LEAF_NODE 14 type EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SSL3_RT_APPLICATION_DATA LEAF_NODE 14 SSL3_RT_APPLICATION_DATA LEAF_NODE 12 && EXPR 12 ( s -> mode & SSL_MODE_ENABLE_PARTIAL_WRITE ) LEAF_NODE 13 ( FIELD 13 s -> mode LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 mode LEAF_NODE 13 & FIELD 13 SSL_MODE_ENABLE_PARTIAL_WRITE LEAF_NODE 14 SSL_MODE_ENABLE_PARTIAL_WRITE LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 s -> s3 -> empty_fragment_done = 0 ; EXPR 10 s -> s3 -> empty_fragment_done = 0 ASSIGN 11 s -> s3 -> empty_fragment_done = 0 LVAL 12 s -> s3 -> empty_fragment_done FIELD 13 s -> s3 -> empty_fragment_done LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 s3 LEAF_NODE 14 -> LEAF_NODE 14 empty_fragment_done ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ( i == ( int ) n ) && s -> mode & SSL_MODE_RELEASE_BUFFERS && ! SSL_IS_DTLS ( s ) EXPR 11 ( i == ( int ) n ) && s -> mode & SSL_MODE_RELEASE_BUFFERS && ! SSL_IS_DTLS ( s ) AND 12 ( i == ( int ) n ) && s -> mode & SSL_MODE_RELEASE_BUFFERS && ! SSL_IS_DTLS ( s ) EXPR 13 ( i == ( int ) n ) LEAF_NODE 14 ( FIELD 14 i LEAF_NODE 15 i EQ_OPERATOR 14 == LEAF_NODE 15 == LEAF_NODE 14 ( TYPE_NAME 14 int LEAF_NODE 15 int LEAF_NODE 14 ) FIELD 14 n LEAF_NODE 15 n LEAF_NODE 14 ) LEAF_NODE 13 && EXPR 13 s -> mode & SSL_MODE_RELEASE_BUFFERS && ! SSL_IS_DTLS ( s ) AND 14 s -> mode & SSL_MODE_RELEASE_BUFFERS && ! SSL_IS_DTLS ( s ) EXPR 15 s -> mode & SSL_MODE_RELEASE_BUFFERS FIELD 16 s -> mode LEAF_NODE 17 s LEAF_NODE 17 -> LEAF_NODE 17 mode LEAF_NODE 16 & FIELD 16 SSL_MODE_RELEASE_BUFFERS LEAF_NODE 17 SSL_MODE_RELEASE_BUFFERS LEAF_NODE 15 && EXPR 15 ! SSL_IS_DTLS ( s ) UNARY_EXPR 16 ! SSL_IS_DTLS ( s ) UNARY_OPERATOR 17 ! LEAF_NODE 18 ! FUNCTION_CALL 17 SSL_IS_DTLS ( s ) CALLEE 18 SSL_IS_DTLS LEAF_NODE 19 SSL_IS_DTLS LEAF_NODE 18 ( ARGUMENT 18 s FIELD 19 s LEAF_NODE 20 s LEAF_NODE 18 ) LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 ssl3_release_write_buffer ( s ) ; EXPR 12 ssl3_release_write_buffer ( s ) FUNCTION_CALL 13 ssl3_release_write_buffer ( s ) CALLEE 14 ssl3_release_write_buffer LEAF_NODE 15 ssl3_release_write_buffer LEAF_NODE 14 ( ARGUMENT 14 s FIELD 15 s LEAF_NODE 16 s LEAF_NODE 14 ) LEAF_NODE 12 ; JUMP_STATEMENT 9 return tot + i ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 tot + i EXPR 11 tot + i FIELD 12 tot LEAF_NODE 13 tot LEAF_NODE 12 + FIELD 12 i LEAF_NODE 13 i LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 n -= i ; EXPR 7 n -= i ASSIGN 8 n -= i LVAL 9 n FIELD 10 n LEAF_NODE 11 n ASSIGN_OP 9 -= LEAF_NODE 10 -= RVAL 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 7 ; EXPR_STATEMENT 6 tot += i ; EXPR 7 tot += i ASSIGN 8 tot += i LVAL 9 tot FIELD 10 tot LEAF_NODE 11 tot ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 i FIELD 10 i LEAF_NODE 11 i LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 }", "idx": 211, "project": "openssl_ast_vul_function_test_4", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 CRYPTO_memcmp LEAF_NODE 3 CRYPTO_memcmp PARAMETER_LIST 2 ( const void * in_a , const void * in_b , size_t len ) LEAF_NODE 3 ( PARAMETER_DECL 3 const void * in_a TYPE 4 const void * TYPE_NAME 5 const void LEAF_NODE 6 const LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 in_a LEAF_NODE 5 in_a LEAF_NODE 3 , PARAMETER_DECL 3 const void * in_b TYPE 4 const void * TYPE_NAME 5 const void LEAF_NODE 6 const LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 in_b LEAF_NODE 5 in_b LEAF_NODE 3 , PARAMETER_DECL 3 size_t len TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t i ; VAR_DECL 4 size_t i TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 i LEAF_NODE 6 i LEAF_NODE 4 ; SIMPLE_DECL 3 const volatile unsigned char * a ; a = in_a ; VAR_DECL 4 const volatile unsigned char * a ; a = in_a TYPE 5 const volatile unsigned char * TYPE_NAME 6 const volatile unsigned char LEAF_NODE 7 const LEAF_NODE 7 volatile LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 a LEAF_NODE 6 a LEAF_NODE 5 ; INIT 5 a = in_a ASSIGN 6 a = in_a LVAL 7 a NAME 8 a LEAF_NODE 9 a ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 in_a FIELD 8 in_a LEAF_NODE 9 in_a LEAF_NODE 4 ; SIMPLE_DECL 3 const volatile unsigned char * b ; b = in_b ; VAR_DECL 4 const volatile unsigned char * b ; b = in_b TYPE 5 const volatile unsigned char * TYPE_NAME 6 const volatile unsigned char LEAF_NODE 7 const LEAF_NODE 7 volatile LEAF_NODE 7 unsigned LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 b LEAF_NODE 6 b LEAF_NODE 5 ; INIT 5 b = in_b ASSIGN 6 b = in_b LVAL 7 b NAME 8 b LEAF_NODE 9 b ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 in_b FIELD 8 in_b LEAF_NODE 9 in_b LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned char x ; x = 0 ; VAR_DECL 4 unsigned char x ; x = 0 TYPE 5 unsigned char TYPE_NAME 6 unsigned char LEAF_NODE 7 unsigned LEAF_NODE 7 char NAME 5 x LEAF_NODE 6 x LEAF_NODE 5 ; INIT 5 x = 0 ASSIGN 6 x = 0 LVAL 7 x NAME 8 x LEAF_NODE 9 x ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < len EXPR 5 i < len FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 len LEAF_NODE 7 len LEAF_NODE 4 ; FOR_EXPR 4 i ++ EXPR 5 i ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 x |= a [ i ] ^ b [ i ] ; EXPR 6 x |= a [ i ] ^ b [ i ] ASSIGN 7 x |= a [ i ] ^ b [ i ] LVAL 8 x FIELD 9 x LEAF_NODE 10 x ASSIGN_OP 8 |= LEAF_NODE 9 |= RVAL 8 a [ i ] ^ b [ i ] FIELD 9 a [ i ] LEAF_NODE 10 a LEAF_NODE 10 [ EXPR 10 i FIELD 11 i LEAF_NODE 12 i LEAF_NODE 10 ] LEAF_NODE 9 ^ FIELD 9 b [ i ] LEAF_NODE 10 b LEAF_NODE 10 [ EXPR 10 i FIELD 11 i LEAF_NODE 12 i LEAF_NODE 10 ] LEAF_NODE 6 ; JUMP_STATEMENT 3 return x ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 x EXPR 5 x FIELD 6 x LEAF_NODE 7 x LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 212, "project": "openssl_ast_normal_function_test_163", "target": 0}
