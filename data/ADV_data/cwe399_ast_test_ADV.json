{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53b_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 0, "project": "cwe399_ast_vul_function_test_adv_45", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionSink LEAF_NODE 3 functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_44_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_44_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 wchar_t LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 functionSink ; EXPR 4 functionSink FIELD 5 functionSink LEAF_NODE 6 functionSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2GSink LEAF_NODE 3 functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 wchar_t LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 functionB2GSink ; EXPR 4 functionB2GSink FIELD 5 functionB2GSink LEAF_NODE 6 functionB2GSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_44_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_44_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_44_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_44_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_44_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_44_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_44_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_44_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_44_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_44_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_44_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_44_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 1, "project": "cwe399_ast_vul_function_test_adv_175", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51b_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51b_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51b_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51b_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51b_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51b_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51b_functionB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51b_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51b_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51b_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51b_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 2, "project": "cwe399_ast_vul_function_test_adv_98", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54e_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54e_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54d_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54d_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54e_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54e_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54e_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54e_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54e_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54e_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54e_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54d_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54d_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54e_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54e_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54e_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54e_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54e_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 3, "project": "cwe399_ast_vul_function_test_adv_82", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 size_t TYPE_NAME 3 size_t LEAF_NODE 4 size_t FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionSource LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionSource PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionSource ( data ) ; EXPR 4 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionSource ( data ) ASSIGN 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionSource ( data ) FUNCTION_CALL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionSource ( data ) CALLEE 8 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionSource LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 size_t TYPE_NAME 3 size_t LEAF_NODE 4 size_t FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionSource LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionSource PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionSource ( data ) ; EXPR 4 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionSource ( data ) ASSIGN 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionSource ( data ) FUNCTION_CALL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionSource ( data ) CALLEE 8 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionSource LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 size_t TYPE_NAME 3 size_t LEAF_NODE 4 size_t FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionB2GSource LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionB2GSource PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionB2GSource ( data ) ; EXPR 4 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionB2GSource ( data ) ASSIGN 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionB2GSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionB2GSource ( data ) FUNCTION_CALL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionB2GSource ( data ) CALLEE 8 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionB2GSource LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_functionB2GSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 4, "project": "cwe399_ast_vul_function_test_adv_118", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_31_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_31_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 wcscpy LEAF_NODE 7 wcscpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * dataCopy ; dataCopy = data ; VAR_DECL 5 wchar_t * dataCopy ; dataCopy = data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 dataCopy LEAF_NODE 7 dataCopy LEAF_NODE 6 ; INIT 6 dataCopy = data ASSIGN 7 dataCopy = data LVAL 8 dataCopy NAME 9 dataCopy LEAF_NODE 10 dataCopy ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * data ; data = dataCopy ; VAR_DECL 5 wchar_t * data ; data = dataCopy TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataCopy ASSIGN 7 data = dataCopy LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataCopy FIELD 9 dataCopy LEAF_NODE 10 dataCopy LEAF_NODE 5 ; LEAF_NODE 4 for LEAF_NODE 4 ( LEAF_NODE 4 ; LEAF_NODE 4 * LEAF_NODE 4 data LEAF_NODE 4 != LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 ++ LEAF_NODE 4 ) LEAF_NODE 4 { STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 * data == SEARCH_CHAR EXPR 7 * data == SEARCH_CHAR UNARY_EXPR 8 * data UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 data LEAF_NODE 10 data EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 SEARCH_CHAR LEAF_NODE 9 SEARCH_CHAR LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 printLine ( \"We have a match!\" ) ; EXPR 9 printLine ( \"We have a match!\" ) FUNCTION_CALL 10 printLine ( \"We have a match!\" ) CALLEE 11 printLine LEAF_NODE 12 printLine LEAF_NODE 11 ( ARGUMENT 11 \"We have a match!\" FIELD 12 \"We have a match!\" LEAF_NODE 13 \"We have a match!\" LEAF_NODE 11 ) LEAF_NODE 9 ; JUMP_STATEMENT 8 break DESTINATION ; KEYWORD 9 break LEAF_NODE 10 break LEAF_NODE 9 DESTINATION LEAF_NODE 9 ; LEAF_NODE 7 } LEAF_NODE 4 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 wcscpy LEAF_NODE 7 wcscpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * dataCopy ; dataCopy = data ; VAR_DECL 5 wchar_t * dataCopy ; dataCopy = data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 dataCopy LEAF_NODE 7 dataCopy LEAF_NODE 6 ; INIT 6 dataCopy = data ASSIGN 7 dataCopy = data LVAL 8 dataCopy NAME 9 dataCopy LEAF_NODE 10 dataCopy ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * data ; data = dataCopy ; VAR_DECL 5 wchar_t * data ; data = dataCopy TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataCopy ASSIGN 7 data = dataCopy LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataCopy FIELD 9 dataCopy LEAF_NODE 10 dataCopy LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 size_t i ; VAR_DECL 6 size_t i TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 i LEAF_NODE 8 i LEAF_NODE 6 ; ITERATION 5 KEYWORD 6 for LEAF_NODE 7 for LEAF_NODE 6 ( FOR_INIT 6 i = 0 ; EXPR 7 i = 0 ASSIGN 8 i = 0 LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; CONDITION 6 i < wcslen ( data ) EXPR 7 i < wcslen ( data ) FIELD 8 i LEAF_NODE 9 i REL_OPERATOR 8 < LEAF_NODE 9 < FUNCTION_CALL 8 wcslen ( data ) CALLEE 9 wcslen LEAF_NODE 10 wcslen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 6 ; FOR_EXPR 6 i ++ EXPR 7 i ++ FIELD 8 i ++ LEAF_NODE 9 i LEAF_NODE 9 ++ LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 data [ i ] == SEARCH_CHAR EXPR 10 data [ i ] == SEARCH_CHAR FIELD 11 data [ i ] LEAF_NODE 12 data LEAF_NODE 12 [ EXPR 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 12 ] EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 SEARCH_CHAR LEAF_NODE 12 SEARCH_CHAR LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 printLine ( \"We have a match!\" ) ; EXPR 12 printLine ( \"We have a match!\" ) FUNCTION_CALL 13 printLine ( \"We have a match!\" ) CALLEE 14 printLine LEAF_NODE 15 printLine LEAF_NODE 14 ( ARGUMENT 14 \"We have a match!\" FIELD 15 \"We have a match!\" LEAF_NODE 16 \"We have a match!\" LEAF_NODE 14 ) LEAF_NODE 12 ; JUMP_STATEMENT 11 break DESTINATION ; KEYWORD 12 break LEAF_NODE 13 break LEAF_NODE 12 DESTINATION LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 7 } EXPR_STATEMENT 5 free ( data ) ; EXPR 6 free ( data ) FUNCTION_CALL 7 free ( data ) CALLEE 8 free LEAF_NODE 9 free LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_31_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_31_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_31_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_31_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_31_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_31_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_31_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_31_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_31_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_31_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_31_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_31_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 5, "project": "cwe399_ast_vul_function_test_adv_198", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionSink PARAMETER_LIST 2 ( size_t * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t * dataPtr TYPE 4 size_t * TYPE_NAME 5 size_t LEAF_NODE 6 size_t POINTER 5 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = * dataPtr ; VAR_DECL 4 size_t data ; data = * dataPtr TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionSink PARAMETER_LIST 2 ( size_t * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t * dataPtr TYPE 4 size_t * TYPE_NAME 5 size_t LEAF_NODE 6 size_t POINTER 5 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = * dataPtr ; VAR_DECL 4 size_t data ; data = * dataPtr TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionB2GSink PARAMETER_LIST 2 ( size_t * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t * dataPtr TYPE 4 size_t * TYPE_NAME 5 size_t LEAF_NODE 6 size_t POINTER 5 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = * dataPtr ; VAR_DECL 4 size_t data ; data = * dataPtr TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 6, "project": "cwe399_ast_vul_function_test_adv_128", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52b_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_52c_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 7, "project": "cwe399_ast_vul_function_test_adv_110", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 wchar_t * CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForBadSink ; VAR_DECL 2 wchar_t * CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForBadSink TYPE 3 wchar_t * TYPE_NAME 4 wchar_t LEAF_NODE 5 wchar_t POINTER 4 * LEAF_NODE 5 * NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForBadSink LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForBadSink LEAF_NODE 2 ; SIMPLE_DECL 1 wchar_t * CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForGoodSink ; VAR_DECL 2 wchar_t * CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForGoodSink TYPE 3 wchar_t * TYPE_NAME 4 wchar_t LEAF_NODE 5 wchar_t POINTER 4 * LEAF_NODE 5 * NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForGoodSink LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForGoodSink LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68b_functionSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForBadSink = data ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForBadSink = data ASSIGN 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForBadSink = data LVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForBadSink FIELD 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForBadSink LEAF_NODE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForBadSink ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68b_functionSink ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68b_functionSink ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68b_functionSink ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68b_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68b_functionSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68b_functionB2GSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForGoodSink = data ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForGoodSink = data ASSIGN 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForGoodSink = data LVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForGoodSink FIELD 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForGoodSink LEAF_NODE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_functionDataForGoodSink ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68b_functionB2GSink ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68b_functionB2GSink ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68b_functionB2GSink ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68b_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68b_functionB2GSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_68_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 8, "project": "cwe399_ast_vul_function_test_adv_120", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52b_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52b_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52b_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52b_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52b_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52b_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52b_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52b_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52b_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52b_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 9, "project": "cwe399_ast_vul_function_test_adv_53", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54d_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54d_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 10, "project": "cwe399_ast_vul_function_test_adv_111", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = rand ( ) ; EXPR 4 data = rand ( ) ASSIGN 5 data = rand ( ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 rand ( ) FUNCTION_CALL 7 rand ( ) CALLEE 8 rand LEAF_NODE 9 rand LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 20 ; EXPR 4 data = 20 ASSIGN 5 data = 20 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 20 FIELD 7 20 LEAF_NODE 8 20 LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = rand ( ) ; EXPR 4 data = rand ( ) ASSIGN 5 data = rand ( ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 rand ( ) FUNCTION_CALL 7 rand ( ) CALLEE 8 rand LEAF_NODE 9 rand LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 11, "project": "cwe399_ast_vul_function_test_adv_156", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_functionB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 12, "project": "cwe399_ast_vul_function_test_adv_27", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 wchar_t * TYPE_NAME 3 wchar_t LEAF_NODE 4 wchar_t LEAF_NODE 3 * FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61b_functionSource LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61b_functionSource PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61b_functionSource ( data ) ; EXPR 4 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61b_functionSource ( data ) ASSIGN 5 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61b_functionSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61b_functionSource ( data ) FUNCTION_CALL 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61b_functionSource ( data ) CALLEE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61b_functionSource LEAF_NODE 9 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61b_functionSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 wchar_t * TYPE_NAME 3 wchar_t LEAF_NODE 4 wchar_t LEAF_NODE 3 * FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61b_functionB2GSource LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61b_functionB2GSource PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61b_functionB2GSource ( data ) ; EXPR 4 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61b_functionB2GSource ( data ) ASSIGN 5 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61b_functionB2GSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61b_functionB2GSource ( data ) FUNCTION_CALL 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61b_functionB2GSource ( data ) CALLEE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61b_functionB2GSource LEAF_NODE 9 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61b_functionB2GSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_61_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 13, "project": "cwe399_ast_vul_function_test_adv_59", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_66b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_66b_functionSink PARAMETER_LIST 2 ( size_t [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t [ ] dataArray TYPE 4 size_t [ ] TYPE_NAME 5 size_t LEAF_NODE 6 size_t TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = dataArray [ 2 ] ; VAR_DECL 4 size_t data ; data = dataArray [ 2 ] TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = dataArray [ 2 ] ASSIGN 6 data = dataArray [ 2 ] LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataArray [ 2 ] FIELD 8 dataArray [ 2 ] LEAF_NODE 9 dataArray LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_66b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_66b_functionSink PARAMETER_LIST 2 ( size_t [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t [ ] dataArray TYPE 4 size_t [ ] TYPE_NAME 5 size_t LEAF_NODE 6 size_t TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = dataArray [ 2 ] ; VAR_DECL 4 size_t data ; data = dataArray [ 2 ] TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = dataArray [ 2 ] ASSIGN 6 data = dataArray [ 2 ] LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataArray [ 2 ] FIELD 8 dataArray [ 2 ] LEAF_NODE 9 dataArray LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_66b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_66b_functionB2GSink PARAMETER_LIST 2 ( size_t [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t [ ] dataArray TYPE 4 size_t [ ] TYPE_NAME 5 size_t LEAF_NODE 6 size_t TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = dataArray [ 2 ] ; VAR_DECL 4 size_t data ; data = dataArray [ 2 ] TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = dataArray [ 2 ] ASSIGN 6 data = dataArray [ 2 ] LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataArray [ 2 ] FIELD 8 dataArray [ 2 ] LEAF_NODE 9 dataArray LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 14, "project": "cwe399_ast_vul_function_test_adv_79", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66b_functionSink PARAMETER_LIST 2 ( wchar_t * [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * [ ] dataArray TYPE 4 wchar_t * [ ] TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * [ 5 ] dataArray ; VAR_DECL 4 wchar_t * [ 5 ] dataArray TYPE 5 wchar_t * [ 5 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * TYPE_SUFFIX 6 [ 5 ] LEAF_NODE 7 [ FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 dataArray [ 2 ] = data ; EXPR 4 dataArray [ 2 ] = data ASSIGN 5 dataArray [ 2 ] = data LVAL 6 dataArray [ 2 ] FIELD 7 dataArray [ 2 ] LEAF_NODE 8 dataArray LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66b_functionSink ( dataArray ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66b_functionSink ( dataArray ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66b_functionSink ( dataArray ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66b_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66b_functionSink LEAF_NODE 6 ( ARGUMENT 6 dataArray FIELD 7 dataArray LEAF_NODE 8 dataArray LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * [ ] dataArray TYPE 4 wchar_t * [ ] TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * [ 5 ] dataArray ; VAR_DECL 4 wchar_t * [ 5 ] dataArray TYPE 5 wchar_t * [ 5 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * TYPE_SUFFIX 6 [ 5 ] LEAF_NODE 7 [ FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 dataArray [ 2 ] = data ; EXPR 4 dataArray [ 2 ] = data ASSIGN 5 dataArray [ 2 ] = data LVAL 6 dataArray [ 2 ] FIELD 7 dataArray [ 2 ] LEAF_NODE 8 dataArray LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66b_functionB2GSink ( dataArray ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66b_functionB2GSink ( dataArray ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66b_functionB2GSink ( dataArray ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66b_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 dataArray FIELD 7 dataArray LEAF_NODE 8 dataArray LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_66_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 15, "project": "cwe399_ast_vul_function_test_adv_74", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53d_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53d_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53d_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53d_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 16, "project": "cwe399_ast_vul_function_test_adv_94", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; JUMP_STATEMENT 3 goto source ; KEYWORD 4 goto LEAF_NODE 5 goto DESTINATION 4 source LEAF_NODE 5 source LEAF_NODE 4 ; LABEL 3 source : LEAF_NODE 4 source LEAF_NODE 4 : LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 5 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 6 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ CHAR_ARRAY_SIZE ] LEAF_NODE 8 [ FIELD 8 CHAR_ARRAY_SIZE LEAF_NODE 9 CHAR_ARRAY_SIZE LEAF_NODE 8 ] NAME 6 inputBuffer LEAF_NODE 7 inputBuffer LEAF_NODE 6 ; INIT 6 inputBuffer = \"\" ASSIGN 7 inputBuffer = \"\" LVAL 8 inputBuffer NAME 9 inputBuffer LEAF_NODE 10 inputBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; SIMPLE_DECL 4 int stdin ; VAR_DECL 5 int stdin TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 stdin LEAF_NODE 7 stdin LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 6 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 7 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 8 fgets LEAF_NODE 9 fgets LEAF_NODE 8 ( ARGUMENT 8 inputBuffer FIELD 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 8 , ARGUMENT 8 CHAR_ARRAY_SIZE FIELD 9 CHAR_ARRAY_SIZE LEAF_NODE 10 CHAR_ARRAY_SIZE LEAF_NODE 8 , ARGUMENT 8 stdin FIELD 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ) EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 8 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 9 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 11 strtoul ( inputBuffer , NULL , 0 ) CALLEE 12 strtoul LEAF_NODE 13 strtoul LEAF_NODE 12 ( ARGUMENT 12 inputBuffer FIELD 13 inputBuffer LEAF_NODE 14 inputBuffer LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"fgets() failed.\" ) ; EXPR 8 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 9 printLine ( \"fgets() failed.\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"fgets() failed.\" FIELD 11 \"fgets() failed.\" LEAF_NODE 12 \"fgets() failed.\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } JUMP_STATEMENT 3 goto sink ; KEYWORD 4 goto LEAF_NODE 5 goto DESTINATION 4 sink LEAF_NODE 5 sink LEAF_NODE 4 ; LABEL 3 sink : LEAF_NODE 4 sink LEAF_NODE 4 : LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; JUMP_STATEMENT 3 goto source ; KEYWORD 4 goto LEAF_NODE 5 goto DESTINATION 4 source LEAF_NODE 5 source LEAF_NODE 4 ; LABEL 3 source : LEAF_NODE 4 source LEAF_NODE 4 : LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 5 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 6 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ CHAR_ARRAY_SIZE ] LEAF_NODE 8 [ FIELD 8 CHAR_ARRAY_SIZE LEAF_NODE 9 CHAR_ARRAY_SIZE LEAF_NODE 8 ] NAME 6 inputBuffer LEAF_NODE 7 inputBuffer LEAF_NODE 6 ; INIT 6 inputBuffer = \"\" ASSIGN 7 inputBuffer = \"\" LVAL 8 inputBuffer NAME 9 inputBuffer LEAF_NODE 10 inputBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; SIMPLE_DECL 4 int stdin ; VAR_DECL 5 int stdin TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 stdin LEAF_NODE 7 stdin LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 6 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 7 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 8 fgets LEAF_NODE 9 fgets LEAF_NODE 8 ( ARGUMENT 8 inputBuffer FIELD 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 8 , ARGUMENT 8 CHAR_ARRAY_SIZE FIELD 9 CHAR_ARRAY_SIZE LEAF_NODE 10 CHAR_ARRAY_SIZE LEAF_NODE 8 , ARGUMENT 8 stdin FIELD 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ) EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 8 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 9 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 11 strtoul ( inputBuffer , NULL , 0 ) CALLEE 12 strtoul LEAF_NODE 13 strtoul LEAF_NODE 12 ( ARGUMENT 12 inputBuffer FIELD 13 inputBuffer LEAF_NODE 14 inputBuffer LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"fgets() failed.\" ) ; EXPR 8 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 9 printLine ( \"fgets() failed.\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"fgets() failed.\" FIELD 11 \"fgets() failed.\" LEAF_NODE 12 \"fgets() failed.\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } JUMP_STATEMENT 3 goto sink ; KEYWORD 4 goto LEAF_NODE 5 goto DESTINATION 4 sink LEAF_NODE 5 sink LEAF_NODE 4 ; LABEL 3 sink : LEAF_NODE 4 sink LEAF_NODE 4 : LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; JUMP_STATEMENT 3 goto source ; KEYWORD 4 goto LEAF_NODE 5 goto DESTINATION 4 source LEAF_NODE 5 source LEAF_NODE 4 ; LABEL 3 source : LEAF_NODE 4 source LEAF_NODE 4 : EXPR_STATEMENT 3 data = 20 ; EXPR 4 data = 20 ASSIGN 5 data = 20 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 20 FIELD 7 20 LEAF_NODE 8 20 LEAF_NODE 4 ; JUMP_STATEMENT 3 goto sink ; KEYWORD 4 goto LEAF_NODE 5 goto DESTINATION 4 sink LEAF_NODE 5 sink LEAF_NODE 4 ; LABEL 3 sink : LEAF_NODE 4 sink LEAF_NODE 4 : LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 17, "project": "cwe399_ast_vul_function_test_adv_164", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54c_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54c_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54b_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54c_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54c_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54c_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54c_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54c_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54c_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54c_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54c_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54c_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54c_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54c_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 18, "project": "cwe399_ast_vul_function_test_adv_76", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; CONDITION 4 * data != '\\0' EXPR 5 * data != '\\0' UNARY_EXPR 6 * data UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 data LEAF_NODE 8 data EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 4 ; FOR_EXPR 4 data ++ EXPR 5 data ++ FIELD 6 data ++ LEAF_NODE 7 data LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * data == SEARCH_CHAR EXPR 8 * data == SEARCH_CHAR UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 SEARCH_CHAR LEAF_NODE 10 SEARCH_CHAR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 printLine ( \"We have a match!\" ) ; EXPR 10 printLine ( \"We have a match!\" ) FUNCTION_CALL 11 printLine ( \"We have a match!\" ) CALLEE 12 printLine LEAF_NODE 13 printLine LEAF_NODE 12 ( ARGUMENT 12 \"We have a match!\" FIELD 13 \"We have a match!\" LEAF_NODE 14 \"We have a match!\" LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_functionB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < strlen ( data ) EXPR 6 i < strlen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 strlen ( data ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 19, "project": "cwe399_ast_vul_function_test_adv_132", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52b_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 20, "project": "cwe399_ast_vul_function_test_adv_34", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionSink LEAF_NODE 3 functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void EXPR_STATEMENT 3 ( * funcPtr ) ( size_t ) = functionSink ; EXPR 4 ( * funcPtr ) ( size_t ) = functionSink ASSIGN 5 ( * funcPtr ) ( size_t ) = functionSink LVAL 6 ( * funcPtr ) ( size_t ) FUNCTION_CALL 7 ( * funcPtr ) ( size_t ) CALLEE 8 ( * funcPtr ) LEAF_NODE 9 ( UNARY_EXPR 9 * funcPtr UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 funcPtr LEAF_NODE 11 funcPtr LEAF_NODE 9 ) LEAF_NODE 8 ( ARGUMENT 8 size_t FIELD 9 size_t LEAF_NODE 10 size_t LEAF_NODE 8 ) ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 functionSink FIELD 7 functionSink LEAF_NODE 8 functionSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = rand ( ) ; EXPR 4 data = rand ( ) ASSIGN 5 data = rand ( ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 rand ( ) FUNCTION_CALL 7 rand ( ) CALLEE 8 rand LEAF_NODE 9 rand LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionSink LEAF_NODE 3 functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void EXPR_STATEMENT 3 ( * funcPtr ) ( size_t ) = functionSink ; EXPR 4 ( * funcPtr ) ( size_t ) = functionSink ASSIGN 5 ( * funcPtr ) ( size_t ) = functionSink LVAL 6 ( * funcPtr ) ( size_t ) FUNCTION_CALL 7 ( * funcPtr ) ( size_t ) CALLEE 8 ( * funcPtr ) LEAF_NODE 9 ( UNARY_EXPR 9 * funcPtr UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 funcPtr LEAF_NODE 11 funcPtr LEAF_NODE 9 ) LEAF_NODE 8 ( ARGUMENT 8 size_t FIELD 9 size_t LEAF_NODE 10 size_t LEAF_NODE 8 ) ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 functionSink FIELD 7 functionSink LEAF_NODE 8 functionSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 20 ; EXPR 4 data = 20 ASSIGN 5 data = 20 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 20 FIELD 7 20 LEAF_NODE 8 20 LEAF_NODE 4 ; EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2GSink LEAF_NODE 3 functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void EXPR_STATEMENT 3 ( * funcPtr ) ( size_t ) = functionB2GSink ; EXPR 4 ( * funcPtr ) ( size_t ) = functionB2GSink ASSIGN 5 ( * funcPtr ) ( size_t ) = functionB2GSink LVAL 6 ( * funcPtr ) ( size_t ) FUNCTION_CALL 7 ( * funcPtr ) ( size_t ) CALLEE 8 ( * funcPtr ) LEAF_NODE 9 ( UNARY_EXPR 9 * funcPtr UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 funcPtr LEAF_NODE 11 funcPtr LEAF_NODE 9 ) LEAF_NODE 8 ( ARGUMENT 8 size_t FIELD 9 size_t LEAF_NODE 10 size_t LEAF_NODE 8 ) ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 functionB2GSink FIELD 7 functionB2GSink LEAF_NODE 8 functionB2GSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = rand ( ) ; EXPR 4 data = rand ( ) ASSIGN 5 data = rand ( ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 rand ( ) FUNCTION_CALL 7 rand ( ) CALLEE 8 rand LEAF_NODE 9 rand LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 21, "project": "cwe399_ast_vul_function_test_adv_155", "target": 1}
{"func": "SIMPLE_DECL 1 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionGlobal ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionGlobal = 0 ; VAR_DECL 2 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionGlobal ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionGlobal = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionGlobal LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionGlobal LEAF_NODE 3 ; INIT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionGlobal = 0 ASSIGN 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionGlobal = 0 LVAL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionGlobal NAME 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionGlobal LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionGlobal ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionGlobal = 1 ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionGlobal = 1 ASSIGN 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionGlobal = 1 LVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionGlobal FIELD 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionGlobal LEAF_NODE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionGlobal ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } SIMPLE_DECL 1 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Global ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Global = 0 ; VAR_DECL 2 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Global ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Global = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Global LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Global LEAF_NODE 3 ; INIT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Global = 0 ASSIGN 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Global = 0 LVAL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Global NAME 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Global LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Global ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; SIMPLE_DECL 1 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Global ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Global = 0 ; VAR_DECL 2 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Global ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Global = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Global LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Global LEAF_NODE 3 ; INIT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Global = 0 ASSIGN 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Global = 0 LVAL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Global NAME 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Global LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Global ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Sink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Sink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Global = 0 ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Global = 0 ASSIGN 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Global = 0 LVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Global FIELD 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Global LEAF_NODE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Global ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Sink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Sink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Sink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Sink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G1Sink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Sink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Sink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Global = 1 ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Global = 1 ASSIGN 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Global = 1 LVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Global FIELD 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Global LEAF_NODE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Global ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Sink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Sink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Sink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Sink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_functionB2G2Sink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 22, "project": "cwe399_ast_vul_function_test_adv_124", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65b_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 23, "project": "cwe399_ast_vul_function_test_adv_52", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 globalReturnsFalse LEAF_NODE 3 globalReturnsFalse PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 globalReturnsTrue LEAF_NODE 3 globalReturnsTrue PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_11_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_11_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsTrue ( ) EXPR 5 globalReturnsTrue ( ) FUNCTION_CALL 6 globalReturnsTrue ( ) CALLEE 7 globalReturnsTrue LEAF_NODE 8 globalReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 for LEAF_NODE 6 ( LEAF_NODE 6 ; LEAF_NODE 6 * LEAF_NODE 6 data LEAF_NODE 6 != LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 ++ LEAF_NODE 6 ) LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 * data == SEARCH_CHAR EXPR 9 * data == SEARCH_CHAR UNARY_EXPR 10 * data UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 data LEAF_NODE 12 data EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsFalse ( ) EXPR 5 globalReturnsFalse ( ) FUNCTION_CALL 6 globalReturnsFalse ( ) CALLEE 7 globalReturnsFalse LEAF_NODE 8 globalReturnsFalse LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsTrue ( ) EXPR 5 globalReturnsTrue ( ) FUNCTION_CALL 6 globalReturnsTrue ( ) CALLEE 7 globalReturnsTrue LEAF_NODE 8 globalReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_11_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_11_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_11_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_11_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_11_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_11_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_11_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_11_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_11_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_11_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_11_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_11_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 24, "project": "cwe399_ast_vul_function_test_adv_179", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53b_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53c_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 25, "project": "cwe399_ast_vul_function_test_adv_115", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int functionStatic ; functionStatic = 0 ; VAR_DECL 2 int functionStatic ; functionStatic = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 functionStatic LEAF_NODE 4 functionStatic LEAF_NODE 3 ; INIT 3 functionStatic = 0 ASSIGN 4 functionStatic = 0 LVAL 5 functionStatic NAME 6 functionStatic LEAF_NODE 7 functionStatic ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionSink LEAF_NODE 3 functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 functionStatic EXPR 5 functionStatic FIELD 6 functionStatic LEAF_NODE 7 functionStatic LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 ; LEAF_NODE 8 ; CONDITION 7 * data != '\\0' EXPR 8 * data != '\\0' UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 7 ; FOR_EXPR 7 data ++ EXPR 8 data ++ FIELD 9 data ++ LEAF_NODE 10 data LEAF_NODE 10 ++ LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 * data == SEARCH_CHAR EXPR 11 * data == SEARCH_CHAR UNARY_EXPR 12 * data UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 data LEAF_NODE 14 data EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 SEARCH_CHAR LEAF_NODE 13 SEARCH_CHAR LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 printLine ( \"We have a match!\" ) ; EXPR 13 printLine ( \"We have a match!\" ) FUNCTION_CALL 14 printLine ( \"We have a match!\" ) CALLEE 15 printLine LEAF_NODE 16 printLine LEAF_NODE 15 ( ARGUMENT 15 \"We have a match!\" FIELD 16 \"We have a match!\" LEAF_NODE 17 \"We have a match!\" LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_21_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_21_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 functionStatic = 1 ; EXPR 4 functionStatic = 1 ASSIGN 5 functionStatic = 1 LVAL 6 functionStatic FIELD 7 functionStatic LEAF_NODE 8 functionStatic ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 functionSink ( data ) ; EXPR 4 functionSink ( data ) FUNCTION_CALL 5 functionSink ( data ) CALLEE 6 functionSink LEAF_NODE 7 functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } SIMPLE_DECL 1 int functionB2G1Static ; functionB2G1Static = 0 ; VAR_DECL 2 int functionB2G1Static ; functionB2G1Static = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 functionB2G1Static LEAF_NODE 4 functionB2G1Static LEAF_NODE 3 ; INIT 3 functionB2G1Static = 0 ASSIGN 4 functionB2G1Static = 0 LVAL 5 functionB2G1Static NAME 6 functionB2G1Static LEAF_NODE 7 functionB2G1Static ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; SIMPLE_DECL 1 int functionB2G2Static ; functionB2G2Static = 0 ; VAR_DECL 2 int functionB2G2Static ; functionB2G2Static = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 functionB2G2Static LEAF_NODE 4 functionB2G2Static LEAF_NODE 3 ; INIT 3 functionB2G2Static = 0 ASSIGN 4 functionB2G2Static = 0 LVAL 5 functionB2G2Static NAME 6 functionB2G2Static LEAF_NODE 7 functionB2G2Static ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1Sink LEAF_NODE 3 functionB2G1Sink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 functionB2G1Static EXPR 5 functionB2G1Static FIELD 6 functionB2G1Static LEAF_NODE 7 functionB2G1Static LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 functionB2G1Static = 0 ; EXPR 4 functionB2G1Static = 0 ASSIGN 5 functionB2G1Static = 0 LVAL 6 functionB2G1Static FIELD 7 functionB2G1Static LEAF_NODE 8 functionB2G1Static ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G1Sink ( data ) ; EXPR 4 functionB2G1Sink ( data ) FUNCTION_CALL 5 functionB2G1Sink ( data ) CALLEE 6 functionB2G1Sink LEAF_NODE 7 functionB2G1Sink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2Sink LEAF_NODE 3 functionB2G2Sink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 functionB2G2Static EXPR 5 functionB2G2Static FIELD 6 functionB2G2Static LEAF_NODE 7 functionB2G2Static LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 functionB2G2Static = 1 ; EXPR 4 functionB2G2Static = 1 ASSIGN 5 functionB2G2Static = 1 LVAL 6 functionB2G2Static FIELD 7 functionB2G2Static LEAF_NODE 8 functionB2G2Static ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2Sink ( data ) ; EXPR 4 functionB2G2Sink ( data ) FUNCTION_CALL 5 functionB2G2Sink ( data ) CALLEE 6 functionB2G2Sink LEAF_NODE 7 functionB2G2Sink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_21_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_21_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_21_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_21_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_21_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_21_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_21_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_21_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_21_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_21_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_21_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_21_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 26, "project": "cwe399_ast_vul_function_test_adv_162", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 5 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 6 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ CHAR_ARRAY_SIZE ] LEAF_NODE 8 [ FIELD 8 CHAR_ARRAY_SIZE LEAF_NODE 9 CHAR_ARRAY_SIZE LEAF_NODE 8 ] NAME 6 inputBuffer LEAF_NODE 7 inputBuffer LEAF_NODE 6 ; INIT 6 inputBuffer = \"\" ASSIGN 7 inputBuffer = \"\" LVAL 8 inputBuffer NAME 9 inputBuffer LEAF_NODE 10 inputBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; SIMPLE_DECL 4 int stdin ; VAR_DECL 5 int stdin TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 stdin LEAF_NODE 7 stdin LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 6 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 7 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 8 fgets LEAF_NODE 9 fgets LEAF_NODE 8 ( ARGUMENT 8 inputBuffer FIELD 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 8 , ARGUMENT 8 CHAR_ARRAY_SIZE FIELD 9 CHAR_ARRAY_SIZE LEAF_NODE 10 CHAR_ARRAY_SIZE LEAF_NODE 8 , ARGUMENT 8 stdin FIELD 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ) EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 8 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 9 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 11 strtoul ( inputBuffer , NULL , 0 ) CALLEE 12 strtoul LEAF_NODE 13 strtoul LEAF_NODE 12 ( ARGUMENT 12 inputBuffer FIELD 13 inputBuffer LEAF_NODE 14 inputBuffer LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"fgets() failed.\" ) ; EXPR 8 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 9 printLine ( \"fgets() failed.\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"fgets() failed.\" FIELD 11 \"fgets() failed.\" LEAF_NODE 12 \"fgets() failed.\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 20 ; EXPR 4 data = 20 ASSIGN 5 data = 20 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 20 FIELD 7 20 LEAF_NODE 8 20 LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 5 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 6 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ CHAR_ARRAY_SIZE ] LEAF_NODE 8 [ FIELD 8 CHAR_ARRAY_SIZE LEAF_NODE 9 CHAR_ARRAY_SIZE LEAF_NODE 8 ] NAME 6 inputBuffer LEAF_NODE 7 inputBuffer LEAF_NODE 6 ; INIT 6 inputBuffer = \"\" ASSIGN 7 inputBuffer = \"\" LVAL 8 inputBuffer NAME 9 inputBuffer LEAF_NODE 10 inputBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; SIMPLE_DECL 4 int stdin ; VAR_DECL 5 int stdin TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 stdin LEAF_NODE 7 stdin LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 6 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 7 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 8 fgets LEAF_NODE 9 fgets LEAF_NODE 8 ( ARGUMENT 8 inputBuffer FIELD 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 8 , ARGUMENT 8 CHAR_ARRAY_SIZE FIELD 9 CHAR_ARRAY_SIZE LEAF_NODE 10 CHAR_ARRAY_SIZE LEAF_NODE 8 , ARGUMENT 8 stdin FIELD 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ) EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 8 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 9 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 11 strtoul ( inputBuffer , NULL , 0 ) CALLEE 12 strtoul LEAF_NODE 13 strtoul LEAF_NODE 12 ( ARGUMENT 12 inputBuffer FIELD 13 inputBuffer LEAF_NODE 14 inputBuffer LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"fgets() failed.\" ) ; EXPR 8 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 9 printLine ( \"fgets() failed.\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"fgets() failed.\" FIELD 11 \"fgets() failed.\" LEAF_NODE 12 \"fgets() failed.\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 27, "project": "cwe399_ast_vul_function_test_adv_172", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54c_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54c_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54d_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 28, "project": "cwe399_ast_vul_function_test_adv_60", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE ; VAR_DECL 2 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE TYPE 3 struct FILE BASE_CLASSES { CLASS_CONTENT } CLASS_DEF 4 struct FILE BASE_CLASSES { CLASS_CONTENT } LEAF_NODE 5 struct CLASS_NAME 5 FILE LEAF_NODE 6 FILE LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { LEAF_NODE 5 CLASS_CONTENT LEAF_NODE 5 } NAME 3 FILE LEAF_NODE 4 FILE LEAF_NODE 2 ; SIMPLE_DECL 1 int staticTrue ; staticTrue = 1 ; VAR_DECL 2 int staticTrue ; staticTrue = 1 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticTrue LEAF_NODE 4 staticTrue LEAF_NODE 3 ; INIT 3 staticTrue = 1 ASSIGN 4 staticTrue = 1 LVAL 5 staticTrue NAME 6 staticTrue LEAF_NODE 7 staticTrue ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 2 ; SIMPLE_DECL 1 int staticFalse ; staticFalse = 0 ; VAR_DECL 2 int staticFalse ; staticFalse = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticFalse LEAF_NODE 4 staticFalse LEAF_NODE 3 ; INIT 3 staticFalse = 0 ASSIGN 4 staticFalse = 0 LVAL 5 staticFalse NAME 6 staticFalse LEAF_NODE 7 staticFalse ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_05_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_05_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticTrue EXPR 5 staticTrue FIELD 6 staticTrue LEAF_NODE 7 staticTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 ; LEAF_NODE 8 ; CONDITION 7 * data != '\\0' EXPR 8 * data != '\\0' UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 7 ; FOR_EXPR 7 data ++ EXPR 8 data ++ FIELD 9 data ++ LEAF_NODE 10 data LEAF_NODE 10 ++ LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 * data == SEARCH_CHAR EXPR 11 * data == SEARCH_CHAR UNARY_EXPR 12 * data UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 data LEAF_NODE 14 data EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 SEARCH_CHAR LEAF_NODE 13 SEARCH_CHAR LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 printLine ( \"We have a match!\" ) ; EXPR 13 printLine ( \"We have a match!\" ) FUNCTION_CALL 14 printLine ( \"We have a match!\" ) CALLEE 15 printLine LEAF_NODE 16 printLine LEAF_NODE 15 ( ARGUMENT 15 \"We have a match!\" FIELD 16 \"We have a match!\" LEAF_NODE 17 \"We have a match!\" LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFalse EXPR 5 staticFalse FIELD 6 staticFalse LEAF_NODE 7 staticFalse LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticTrue EXPR 5 staticTrue FIELD 6 staticTrue LEAF_NODE 7 staticTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_05_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_05_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_05_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_05_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_05_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_05_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_05_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_05_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_05_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_05_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_05_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_05_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 29, "project": "cwe399_ast_vul_function_test_adv_182", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 staticReturnsTrue LEAF_NODE 3 staticReturnsTrue PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 staticReturnsFalse LEAF_NODE 3 staticReturnsFalse PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_08_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_08_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 wcscpy LEAF_NODE 7 wcscpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 for LEAF_NODE 6 ( LEAF_NODE 6 ; LEAF_NODE 6 * LEAF_NODE 6 data LEAF_NODE 6 != LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 ++ LEAF_NODE 6 ) LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 * data == SEARCH_CHAR EXPR 9 * data == SEARCH_CHAR UNARY_EXPR 10 * data UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 data LEAF_NODE 12 data EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 wcscpy LEAF_NODE 7 wcscpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsFalse ( ) EXPR 5 staticReturnsFalse ( ) FUNCTION_CALL 6 staticReturnsFalse ( ) CALLEE 7 staticReturnsFalse LEAF_NODE 8 staticReturnsFalse LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 wcscpy LEAF_NODE 7 wcscpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_08_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_08_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_08_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_08_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_08_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_08_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_08_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_08_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_08_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_08_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_08_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_08_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 30, "project": "cwe399_ast_vul_function_test_adv_171", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 31, "project": "cwe399_ast_vul_function_test_adv_89", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_13_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_13_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE == 5 EXPR 5 GLOBAL_CONST_FIVE == 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int stdin ; VAR_DECL 7 int stdin TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 stdin LEAF_NODE 9 stdin LEAF_NODE 7 ; EXPR_STATEMENT 6 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 7 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 8 fscanf ( stdin , \"%ud\" , & data ) CALLEE 9 fscanf LEAF_NODE 10 fscanf LEAF_NODE 9 ( ARGUMENT 9 stdin FIELD 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 , ARGUMENT 9 \"%ud\" FIELD 10 \"%ud\" LEAF_NODE 11 \"%ud\" LEAF_NODE 9 , ARGUMENT 9 & data UNARY_EXPR 10 & data UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 data LEAF_NODE 12 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE == 5 EXPR 5 GLOBAL_CONST_FIVE == 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) EXPR 9 data > wcslen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 wcslen ( HELLO_STRING ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE == 5 EXPR 5 GLOBAL_CONST_FIVE == 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int stdin ; VAR_DECL 7 int stdin TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 stdin LEAF_NODE 9 stdin LEAF_NODE 7 ; EXPR_STATEMENT 6 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 7 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 8 fscanf ( stdin , \"%ud\" , & data ) CALLEE 9 fscanf LEAF_NODE 10 fscanf LEAF_NODE 9 ( ARGUMENT 9 stdin FIELD 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 , ARGUMENT 9 \"%ud\" FIELD 10 \"%ud\" LEAF_NODE 11 \"%ud\" LEAF_NODE 9 , ARGUMENT 9 & data UNARY_EXPR 10 & data UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 data LEAF_NODE 12 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE != 5 EXPR 5 GLOBAL_CONST_FIVE != 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 9 data > wcslen ( HELLO_STRING ) && data < 100 AND 10 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 11 data > wcslen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 wcslen ( HELLO_STRING ) CALLEE 13 wcslen LEAF_NODE 14 wcslen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE == 5 EXPR 5 GLOBAL_CONST_FIVE == 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int stdin ; VAR_DECL 7 int stdin TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 stdin LEAF_NODE 9 stdin LEAF_NODE 7 ; EXPR_STATEMENT 6 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 7 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 8 fscanf ( stdin , \"%ud\" , & data ) CALLEE 9 fscanf LEAF_NODE 10 fscanf LEAF_NODE 9 ( ARGUMENT 9 stdin FIELD 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 , ARGUMENT 9 \"%ud\" FIELD 10 \"%ud\" LEAF_NODE 11 \"%ud\" LEAF_NODE 9 , ARGUMENT 9 & data UNARY_EXPR 10 & data UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 data LEAF_NODE 12 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE == 5 EXPR 5 GLOBAL_CONST_FIVE == 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 9 data > wcslen ( HELLO_STRING ) && data < 100 AND 10 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 11 data > wcslen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 wcslen ( HELLO_STRING ) CALLEE 13 wcslen LEAF_NODE 14 wcslen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function1 LEAF_NODE 3 function1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE != 5 EXPR 5 GLOBAL_CONST_FIVE != 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE == 5 EXPR 5 GLOBAL_CONST_FIVE == 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) EXPR 9 data > wcslen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 wcslen ( HELLO_STRING ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function2 LEAF_NODE 3 function2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE == 5 EXPR 5 GLOBAL_CONST_FIVE == 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE == 5 EXPR 5 GLOBAL_CONST_FIVE == 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) EXPR 9 data > wcslen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 wcslen ( HELLO_STRING ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_13_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_13_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function1 ( ) ; EXPR 4 function1 ( ) FUNCTION_CALL 5 function1 ( ) CALLEE 6 function1 LEAF_NODE 7 function1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function2 ( ) ; EXPR 4 function2 ( ) FUNCTION_CALL 5 function2 ( ) CALLEE 6 function2 LEAF_NODE 7 function2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_13_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_13_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_13_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_13_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_13_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_13_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_13_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_13_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_13_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_13_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 32, "project": "cwe399_ast_vul_function_test_adv_177", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_65b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_65b_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_65b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_65b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 33, "project": "cwe399_ast_vul_function_test_adv_107", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66b_functionSink PARAMETER_LIST 2 ( size_t [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t [ ] dataArray TYPE 4 size_t [ ] TYPE_NAME 5 size_t LEAF_NODE 6 size_t TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = dataArray [ 2 ] ; VAR_DECL 4 size_t data ; data = dataArray [ 2 ] TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = dataArray [ 2 ] ASSIGN 6 data = dataArray [ 2 ] LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataArray [ 2 ] FIELD 8 dataArray [ 2 ] LEAF_NODE 9 dataArray LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66b_functionSink PARAMETER_LIST 2 ( size_t [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t [ ] dataArray TYPE 4 size_t [ ] TYPE_NAME 5 size_t LEAF_NODE 6 size_t TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = dataArray [ 2 ] ; VAR_DECL 4 size_t data ; data = dataArray [ 2 ] TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = dataArray [ 2 ] ASSIGN 6 data = dataArray [ 2 ] LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataArray [ 2 ] FIELD 8 dataArray [ 2 ] LEAF_NODE 9 dataArray LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66b_functionB2GSink PARAMETER_LIST 2 ( size_t [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t [ ] dataArray TYPE 4 size_t [ ] TYPE_NAME 5 size_t LEAF_NODE 6 size_t TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = dataArray [ 2 ] ; VAR_DECL 4 size_t data ; data = dataArray [ 2 ] TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = dataArray [ 2 ] ASSIGN 6 data = dataArray [ 2 ] LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataArray [ 2 ] FIELD 8 dataArray [ 2 ] LEAF_NODE 9 dataArray LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 34, "project": "cwe399_ast_vul_function_test_adv_77", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 char LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_functionSink ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_functionSink FIELD 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_functionSink LEAF_NODE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_functionSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_functionB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 char LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_functionB2GSink ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_functionB2GSink FIELD 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_functionB2GSink LEAF_NODE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_functionB2GSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 35, "project": "cwe399_ast_vul_function_test_adv_18", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int staticTrue ; staticTrue = 1 ; VAR_DECL 2 int staticTrue ; staticTrue = 1 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticTrue LEAF_NODE 4 staticTrue LEAF_NODE 3 ; INIT 3 staticTrue = 1 ASSIGN 4 staticTrue = 1 LVAL 5 staticTrue NAME 6 staticTrue LEAF_NODE 7 staticTrue ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 2 ; SIMPLE_DECL 1 int staticFalse ; staticFalse = 0 ; VAR_DECL 2 int staticFalse ; staticFalse = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticFalse LEAF_NODE 4 staticFalse LEAF_NODE 3 ; INIT 3 staticFalse = 0 ASSIGN 4 staticFalse = 0 LVAL 5 staticFalse NAME 6 staticFalse LEAF_NODE 7 staticFalse ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_05_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_05_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticTrue EXPR 5 staticTrue FIELD 6 staticTrue LEAF_NODE 7 staticTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 for LEAF_NODE 6 ( LEAF_NODE 6 ; LEAF_NODE 6 * LEAF_NODE 6 data LEAF_NODE 6 != LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 ++ LEAF_NODE 6 ) LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 * data == SEARCH_CHAR EXPR 9 * data == SEARCH_CHAR UNARY_EXPR 10 * data UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 data LEAF_NODE 12 data EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFalse EXPR 5 staticFalse FIELD 6 staticFalse LEAF_NODE 7 staticFalse LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticTrue EXPR 5 staticTrue FIELD 6 staticTrue LEAF_NODE 7 staticTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_05_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_05_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_05_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_05_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_05_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_05_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_05_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_05_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_05_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_05_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_05_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_05_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 36, "project": "cwe399_ast_vul_function_test_adv_188", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int stdin ; VAR_DECL 4 int stdin TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 stdin LEAF_NODE 6 stdin LEAF_NODE 4 ; EXPR_STATEMENT 3 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 4 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 5 fscanf ( stdin , \"%ud\" , & data ) CALLEE 6 fscanf LEAF_NODE 7 fscanf LEAF_NODE 6 ( ARGUMENT 6 stdin FIELD 7 stdin LEAF_NODE 8 stdin LEAF_NODE 6 , ARGUMENT 6 \"%ud\" FIELD 7 \"%ud\" LEAF_NODE 8 \"%ud\" LEAF_NODE 6 , ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 20 ; EXPR 4 data = 20 ASSIGN 5 data = 20 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 20 FIELD 7 20 LEAF_NODE 8 20 LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int stdin ; VAR_DECL 4 int stdin TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 stdin LEAF_NODE 6 stdin LEAF_NODE 4 ; EXPR_STATEMENT 3 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 4 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 5 fscanf ( stdin , \"%ud\" , & data ) CALLEE 6 fscanf LEAF_NODE 7 fscanf LEAF_NODE 6 ( ARGUMENT 6 stdin FIELD 7 stdin LEAF_NODE 8 stdin LEAF_NODE 6 , ARGUMENT 6 \"%ud\" FIELD 7 \"%ud\" LEAF_NODE 8 \"%ud\" LEAF_NODE 6 , ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 37, "project": "cwe399_ast_vul_function_test_adv_24", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_52c_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 38, "project": "cwe399_ast_vul_function_test_adv_138", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionGlobal ; VAR_DECL 2 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionGlobal TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionGlobal LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionGlobal LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionGlobal EXPR 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionGlobal FIELD 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionGlobal LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionGlobal LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 ; LEAF_NODE 8 ; CONDITION 7 * data != '\\0' EXPR 8 * data != '\\0' UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 7 ; FOR_EXPR 7 data ++ EXPR 8 data ++ FIELD 9 data ++ LEAF_NODE 10 data LEAF_NODE 10 ++ LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 * data == SEARCH_CHAR EXPR 11 * data == SEARCH_CHAR UNARY_EXPR 12 * data UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 data LEAF_NODE 14 data EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 SEARCH_CHAR LEAF_NODE 13 SEARCH_CHAR LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 printLine ( \"We have a match!\" ) ; EXPR 13 printLine ( \"We have a match!\" ) FUNCTION_CALL 14 printLine ( \"We have a match!\" ) CALLEE 15 printLine LEAF_NODE 16 printLine LEAF_NODE 15 ( ARGUMENT 15 \"We have a match!\" FIELD 16 \"We have a match!\" LEAF_NODE 17 \"We have a match!\" LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } SIMPLE_DECL 1 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G1Global ; VAR_DECL 2 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G1Global TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G1Global LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G1Global LEAF_NODE 2 ; SIMPLE_DECL 1 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G2Global ; VAR_DECL 2 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G2Global TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G2Global LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G2Global LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G1Sink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G1Sink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G1Global EXPR 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G1Global FIELD 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G1Global LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G1Global LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G2Sink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G2Sink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G2Global EXPR 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G2Global FIELD 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G2Global LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_functionB2G2Global LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 39, "project": "cwe399_ast_vul_function_test_adv_66", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 const int STATIC_CONST_FIVE ; STATIC_CONST_FIVE = 5 ; VAR_DECL 2 const int STATIC_CONST_FIVE ; STATIC_CONST_FIVE = 5 TYPE 3 const int TYPE_NAME 4 const int LEAF_NODE 5 const LEAF_NODE 5 int NAME 3 STATIC_CONST_FIVE LEAF_NODE 4 STATIC_CONST_FIVE LEAF_NODE 3 ; INIT 3 STATIC_CONST_FIVE = 5 ASSIGN 4 STATIC_CONST_FIVE = 5 LVAL 5 STATIC_CONST_FIVE NAME 6 STATIC_CONST_FIVE LEAF_NODE 7 STATIC_CONST_FIVE ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 5 FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_06_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_06_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_FIVE == 5 EXPR 5 STATIC_CONST_FIVE == 5 FIELD 6 STATIC_CONST_FIVE LEAF_NODE 7 STATIC_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 8 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 9 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 10 char LEAF_NODE 11 char TYPE_SUFFIX 10 [ CHAR_ARRAY_SIZE ] LEAF_NODE 11 [ FIELD 11 CHAR_ARRAY_SIZE LEAF_NODE 12 CHAR_ARRAY_SIZE LEAF_NODE 11 ] NAME 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 9 ; INIT 9 inputBuffer = \"\" ASSIGN 10 inputBuffer = \"\" LVAL 11 inputBuffer NAME 12 inputBuffer LEAF_NODE 13 inputBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 \"\" FIELD 12 \"\" LEAF_NODE 13 \"\" LEAF_NODE 8 ; SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 9 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 10 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 inputBuffer FIELD 12 inputBuffer LEAF_NODE 13 inputBuffer LEAF_NODE 11 , ARGUMENT 11 CHAR_ARRAY_SIZE FIELD 12 CHAR_ARRAY_SIZE LEAF_NODE 13 CHAR_ARRAY_SIZE LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 11 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 12 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 13 data FIELD 14 data LEAF_NODE 15 data ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 14 strtoul ( inputBuffer , NULL , 0 ) CALLEE 15 strtoul LEAF_NODE 16 strtoul LEAF_NODE 15 ( ARGUMENT 15 inputBuffer FIELD 16 inputBuffer LEAF_NODE 17 inputBuffer LEAF_NODE 15 , ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed.\" ) ; EXPR 11 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed.\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed.\" FIELD 14 \"fgets() failed.\" LEAF_NODE 15 \"fgets() failed.\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_FIVE == 5 EXPR 5 STATIC_CONST_FIVE == 5 FIELD 6 STATIC_CONST_FIVE LEAF_NODE 7 STATIC_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) EXPR 9 data > wcslen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 wcslen ( HELLO_STRING ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_FIVE == 5 EXPR 5 STATIC_CONST_FIVE == 5 FIELD 6 STATIC_CONST_FIVE LEAF_NODE 7 STATIC_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 8 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 9 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 10 char LEAF_NODE 11 char TYPE_SUFFIX 10 [ CHAR_ARRAY_SIZE ] LEAF_NODE 11 [ FIELD 11 CHAR_ARRAY_SIZE LEAF_NODE 12 CHAR_ARRAY_SIZE LEAF_NODE 11 ] NAME 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 9 ; INIT 9 inputBuffer = \"\" ASSIGN 10 inputBuffer = \"\" LVAL 11 inputBuffer NAME 12 inputBuffer LEAF_NODE 13 inputBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 \"\" FIELD 12 \"\" LEAF_NODE 13 \"\" LEAF_NODE 8 ; SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 9 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 10 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 inputBuffer FIELD 12 inputBuffer LEAF_NODE 13 inputBuffer LEAF_NODE 11 , ARGUMENT 11 CHAR_ARRAY_SIZE FIELD 12 CHAR_ARRAY_SIZE LEAF_NODE 13 CHAR_ARRAY_SIZE LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 11 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 12 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 13 data FIELD 14 data LEAF_NODE 15 data ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 14 strtoul ( inputBuffer , NULL , 0 ) CALLEE 15 strtoul LEAF_NODE 16 strtoul LEAF_NODE 15 ( ARGUMENT 15 inputBuffer FIELD 16 inputBuffer LEAF_NODE 17 inputBuffer LEAF_NODE 15 , ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed.\" ) ; EXPR 11 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed.\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed.\" FIELD 14 \"fgets() failed.\" LEAF_NODE 15 \"fgets() failed.\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_FIVE != 5 EXPR 5 STATIC_CONST_FIVE != 5 FIELD 6 STATIC_CONST_FIVE LEAF_NODE 7 STATIC_CONST_FIVE EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 9 data > wcslen ( HELLO_STRING ) && data < 100 AND 10 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 11 data > wcslen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 wcslen ( HELLO_STRING ) CALLEE 13 wcslen LEAF_NODE 14 wcslen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_FIVE == 5 EXPR 5 STATIC_CONST_FIVE == 5 FIELD 6 STATIC_CONST_FIVE LEAF_NODE 7 STATIC_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 8 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 9 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 10 char LEAF_NODE 11 char TYPE_SUFFIX 10 [ CHAR_ARRAY_SIZE ] LEAF_NODE 11 [ FIELD 11 CHAR_ARRAY_SIZE LEAF_NODE 12 CHAR_ARRAY_SIZE LEAF_NODE 11 ] NAME 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 9 ; INIT 9 inputBuffer = \"\" ASSIGN 10 inputBuffer = \"\" LVAL 11 inputBuffer NAME 12 inputBuffer LEAF_NODE 13 inputBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 \"\" FIELD 12 \"\" LEAF_NODE 13 \"\" LEAF_NODE 8 ; SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 9 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 10 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 inputBuffer FIELD 12 inputBuffer LEAF_NODE 13 inputBuffer LEAF_NODE 11 , ARGUMENT 11 CHAR_ARRAY_SIZE FIELD 12 CHAR_ARRAY_SIZE LEAF_NODE 13 CHAR_ARRAY_SIZE LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 11 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 12 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 13 data FIELD 14 data LEAF_NODE 15 data ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 14 strtoul ( inputBuffer , NULL , 0 ) CALLEE 15 strtoul LEAF_NODE 16 strtoul LEAF_NODE 15 ( ARGUMENT 15 inputBuffer FIELD 16 inputBuffer LEAF_NODE 17 inputBuffer LEAF_NODE 15 , ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed.\" ) ; EXPR 11 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed.\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed.\" FIELD 14 \"fgets() failed.\" LEAF_NODE 15 \"fgets() failed.\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_FIVE == 5 EXPR 5 STATIC_CONST_FIVE == 5 FIELD 6 STATIC_CONST_FIVE LEAF_NODE 7 STATIC_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 9 data > wcslen ( HELLO_STRING ) && data < 100 AND 10 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 11 data > wcslen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 wcslen ( HELLO_STRING ) CALLEE 13 wcslen LEAF_NODE 14 wcslen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function1 LEAF_NODE 3 function1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_FIVE != 5 EXPR 5 STATIC_CONST_FIVE != 5 FIELD 6 STATIC_CONST_FIVE LEAF_NODE 7 STATIC_CONST_FIVE EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_FIVE == 5 EXPR 5 STATIC_CONST_FIVE == 5 FIELD 6 STATIC_CONST_FIVE LEAF_NODE 7 STATIC_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) EXPR 9 data > wcslen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 wcslen ( HELLO_STRING ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function2 LEAF_NODE 3 function2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_FIVE == 5 EXPR 5 STATIC_CONST_FIVE == 5 FIELD 6 STATIC_CONST_FIVE LEAF_NODE 7 STATIC_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_FIVE == 5 EXPR 5 STATIC_CONST_FIVE == 5 FIELD 6 STATIC_CONST_FIVE LEAF_NODE 7 STATIC_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) EXPR 9 data > wcslen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 wcslen ( HELLO_STRING ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_06_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_06_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function1 ( ) ; EXPR 4 function1 ( ) FUNCTION_CALL 5 function1 ( ) CALLEE 6 function1 LEAF_NODE 7 function1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function2 ( ) ; EXPR 4 function2 ( ) FUNCTION_CALL 5 function2 ( ) CALLEE 6 function2 LEAF_NODE 7 function2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_06_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_06_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_06_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_06_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_06_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_06_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_06_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_06_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_06_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_06_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 40, "project": "cwe399_ast_vul_function_test_adv_159", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_65b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_65b_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_65b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_65b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 41, "project": "cwe399_ast_vul_function_test_adv_47", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 const int STATIC_CONST_TRUE ; STATIC_CONST_TRUE = 1 ; VAR_DECL 2 const int STATIC_CONST_TRUE ; STATIC_CONST_TRUE = 1 TYPE 3 const int TYPE_NAME 4 const int LEAF_NODE 5 const LEAF_NODE 5 int NAME 3 STATIC_CONST_TRUE LEAF_NODE 4 STATIC_CONST_TRUE LEAF_NODE 3 ; INIT 3 STATIC_CONST_TRUE = 1 ASSIGN 4 STATIC_CONST_TRUE = 1 LVAL 5 STATIC_CONST_TRUE NAME 6 STATIC_CONST_TRUE LEAF_NODE 7 STATIC_CONST_TRUE ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 2 ; SIMPLE_DECL 1 const int STATIC_CONST_FALSE ; STATIC_CONST_FALSE = 0 ; VAR_DECL 2 const int STATIC_CONST_FALSE ; STATIC_CONST_FALSE = 0 TYPE 3 const int TYPE_NAME 4 const int LEAF_NODE 5 const LEAF_NODE 5 int NAME 3 STATIC_CONST_FALSE LEAF_NODE 4 STATIC_CONST_FALSE LEAF_NODE 3 ; INIT 3 STATIC_CONST_FALSE = 0 ASSIGN 4 STATIC_CONST_FALSE = 0 LVAL 5 STATIC_CONST_FALSE NAME 6 STATIC_CONST_FALSE LEAF_NODE 7 STATIC_CONST_FALSE ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_04_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_04_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_TRUE EXPR 5 STATIC_CONST_TRUE FIELD 6 STATIC_CONST_TRUE LEAF_NODE 7 STATIC_CONST_TRUE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 8 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 9 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 10 char LEAF_NODE 11 char TYPE_SUFFIX 10 [ CHAR_ARRAY_SIZE ] LEAF_NODE 11 [ FIELD 11 CHAR_ARRAY_SIZE LEAF_NODE 12 CHAR_ARRAY_SIZE LEAF_NODE 11 ] NAME 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 9 ; INIT 9 inputBuffer = \"\" ASSIGN 10 inputBuffer = \"\" LVAL 11 inputBuffer NAME 12 inputBuffer LEAF_NODE 13 inputBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 \"\" FIELD 12 \"\" LEAF_NODE 13 \"\" LEAF_NODE 8 ; SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 9 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 10 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 inputBuffer FIELD 12 inputBuffer LEAF_NODE 13 inputBuffer LEAF_NODE 11 , ARGUMENT 11 CHAR_ARRAY_SIZE FIELD 12 CHAR_ARRAY_SIZE LEAF_NODE 13 CHAR_ARRAY_SIZE LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 11 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 12 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 13 data FIELD 14 data LEAF_NODE 15 data ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 14 strtoul ( inputBuffer , NULL , 0 ) CALLEE 15 strtoul LEAF_NODE 16 strtoul LEAF_NODE 15 ( ARGUMENT 15 inputBuffer FIELD 16 inputBuffer LEAF_NODE 17 inputBuffer LEAF_NODE 15 , ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed.\" ) ; EXPR 11 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed.\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed.\" FIELD 14 \"fgets() failed.\" LEAF_NODE 15 \"fgets() failed.\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_TRUE EXPR 5 STATIC_CONST_TRUE FIELD 6 STATIC_CONST_TRUE LEAF_NODE 7 STATIC_CONST_TRUE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) EXPR 9 data > wcslen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 wcslen ( HELLO_STRING ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_TRUE EXPR 5 STATIC_CONST_TRUE FIELD 6 STATIC_CONST_TRUE LEAF_NODE 7 STATIC_CONST_TRUE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 8 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 9 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 10 char LEAF_NODE 11 char TYPE_SUFFIX 10 [ CHAR_ARRAY_SIZE ] LEAF_NODE 11 [ FIELD 11 CHAR_ARRAY_SIZE LEAF_NODE 12 CHAR_ARRAY_SIZE LEAF_NODE 11 ] NAME 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 9 ; INIT 9 inputBuffer = \"\" ASSIGN 10 inputBuffer = \"\" LVAL 11 inputBuffer NAME 12 inputBuffer LEAF_NODE 13 inputBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 \"\" FIELD 12 \"\" LEAF_NODE 13 \"\" LEAF_NODE 8 ; SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 9 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 10 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 inputBuffer FIELD 12 inputBuffer LEAF_NODE 13 inputBuffer LEAF_NODE 11 , ARGUMENT 11 CHAR_ARRAY_SIZE FIELD 12 CHAR_ARRAY_SIZE LEAF_NODE 13 CHAR_ARRAY_SIZE LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 11 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 12 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 13 data FIELD 14 data LEAF_NODE 15 data ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 14 strtoul ( inputBuffer , NULL , 0 ) CALLEE 15 strtoul LEAF_NODE 16 strtoul LEAF_NODE 15 ( ARGUMENT 15 inputBuffer FIELD 16 inputBuffer LEAF_NODE 17 inputBuffer LEAF_NODE 15 , ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed.\" ) ; EXPR 11 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed.\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed.\" FIELD 14 \"fgets() failed.\" LEAF_NODE 15 \"fgets() failed.\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_FALSE EXPR 5 STATIC_CONST_FALSE FIELD 6 STATIC_CONST_FALSE LEAF_NODE 7 STATIC_CONST_FALSE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 9 data > wcslen ( HELLO_STRING ) && data < 100 AND 10 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 11 data > wcslen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 wcslen ( HELLO_STRING ) CALLEE 13 wcslen LEAF_NODE 14 wcslen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_TRUE EXPR 5 STATIC_CONST_TRUE FIELD 6 STATIC_CONST_TRUE LEAF_NODE 7 STATIC_CONST_TRUE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 8 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 9 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 10 char LEAF_NODE 11 char TYPE_SUFFIX 10 [ CHAR_ARRAY_SIZE ] LEAF_NODE 11 [ FIELD 11 CHAR_ARRAY_SIZE LEAF_NODE 12 CHAR_ARRAY_SIZE LEAF_NODE 11 ] NAME 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 9 ; INIT 9 inputBuffer = \"\" ASSIGN 10 inputBuffer = \"\" LVAL 11 inputBuffer NAME 12 inputBuffer LEAF_NODE 13 inputBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 \"\" FIELD 12 \"\" LEAF_NODE 13 \"\" LEAF_NODE 8 ; SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 9 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 10 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 inputBuffer FIELD 12 inputBuffer LEAF_NODE 13 inputBuffer LEAF_NODE 11 , ARGUMENT 11 CHAR_ARRAY_SIZE FIELD 12 CHAR_ARRAY_SIZE LEAF_NODE 13 CHAR_ARRAY_SIZE LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 11 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 12 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 13 data FIELD 14 data LEAF_NODE 15 data ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 14 strtoul ( inputBuffer , NULL , 0 ) CALLEE 15 strtoul LEAF_NODE 16 strtoul LEAF_NODE 15 ( ARGUMENT 15 inputBuffer FIELD 16 inputBuffer LEAF_NODE 17 inputBuffer LEAF_NODE 15 , ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed.\" ) ; EXPR 11 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed.\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed.\" FIELD 14 \"fgets() failed.\" LEAF_NODE 15 \"fgets() failed.\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_TRUE EXPR 5 STATIC_CONST_TRUE FIELD 6 STATIC_CONST_TRUE LEAF_NODE 7 STATIC_CONST_TRUE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 9 data > wcslen ( HELLO_STRING ) && data < 100 AND 10 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 11 data > wcslen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 wcslen ( HELLO_STRING ) CALLEE 13 wcslen LEAF_NODE 14 wcslen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function1 LEAF_NODE 3 function1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_FALSE EXPR 5 STATIC_CONST_FALSE FIELD 6 STATIC_CONST_FALSE LEAF_NODE 7 STATIC_CONST_FALSE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_TRUE EXPR 5 STATIC_CONST_TRUE FIELD 6 STATIC_CONST_TRUE LEAF_NODE 7 STATIC_CONST_TRUE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) EXPR 9 data > wcslen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 wcslen ( HELLO_STRING ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function2 LEAF_NODE 3 function2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_TRUE EXPR 5 STATIC_CONST_TRUE FIELD 6 STATIC_CONST_TRUE LEAF_NODE 7 STATIC_CONST_TRUE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 STATIC_CONST_TRUE EXPR 5 STATIC_CONST_TRUE FIELD 6 STATIC_CONST_TRUE LEAF_NODE 7 STATIC_CONST_TRUE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) EXPR 9 data > wcslen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 wcslen ( HELLO_STRING ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_04_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_04_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function1 ( ) ; EXPR 4 function1 ( ) FUNCTION_CALL 5 function1 ( ) CALLEE 6 function1 LEAF_NODE 7 function1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function2 ( ) ; EXPR 4 function2 ( ) FUNCTION_CALL 5 function2 ( ) CALLEE 6 function2 LEAF_NODE 7 function2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_04_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_04_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_04_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_04_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_04_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_04_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_04_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_04_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_04_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_04_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 42, "project": "cwe399_ast_vul_function_test_adv_170", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53c_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53c_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53b_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53c_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53c_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53c_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53c_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53c_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53c_functionB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53b_functionB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53c_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53c_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53c_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53c_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53c_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 43, "project": "cwe399_ast_vul_function_test_adv_75", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_65b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_65b_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_65b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_65b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 44, "project": "cwe399_ast_vul_function_test_adv_41", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53d_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53d_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53d_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53d_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 45, "project": "cwe399_ast_vul_function_test_adv_125", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53d_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_53d_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 46, "project": "cwe399_ast_vul_function_test_adv_61", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType BASE_CLASSES { wchar_t * structFirst ; } CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType ; VAR_DECL 2 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType BASE_CLASSES { wchar_t * structFirst ; } CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType TYPE 3 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType BASE_CLASSES { wchar_t * structFirst ; } CLASS_DEF 4 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType BASE_CLASSES { wchar_t * structFirst ; } LEAF_NODE 5 struct CLASS_NAME 5 _CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType LEAF_NODE 6 _CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 wchar_t * structFirst ; SIMPLE_DECL 6 wchar_t * structFirst ; VAR_DECL 7 wchar_t * structFirst TYPE 8 wchar_t * TYPE_NAME 9 wchar_t LEAF_NODE 10 wchar_t POINTER 9 * LEAF_NODE 10 * NAME 8 structFirst LEAF_NODE 9 structFirst LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67b_functionSink PARAMETER_LIST 2 ( CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType myStruct TYPE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType TYPE_NAME 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType LEAF_NODE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = myStruct . structFirst ; VAR_DECL 4 wchar_t * data ; data = myStruct . structFirst TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67b_functionB2GSink PARAMETER_LIST 2 ( CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType myStruct TYPE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType TYPE_NAME 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType LEAF_NODE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = myStruct . structFirst ; VAR_DECL 4 wchar_t * data ; data = myStruct . structFirst TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 47, "project": "cwe399_ast_vul_function_test_adv_25", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE ; VAR_DECL 2 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE TYPE 3 struct FILE BASE_CLASSES { CLASS_CONTENT } CLASS_DEF 4 struct FILE BASE_CLASSES { CLASS_CONTENT } LEAF_NODE 5 struct CLASS_NAME 5 FILE LEAF_NODE 6 FILE LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { LEAF_NODE 5 CLASS_CONTENT LEAF_NODE 5 } NAME 3 FILE LEAF_NODE 4 FILE LEAF_NODE 2 ; SIMPLE_DECL 1 int staticFive ; staticFive = 5 ; VAR_DECL 2 int staticFive ; staticFive = 5 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticFive LEAF_NODE 4 staticFive LEAF_NODE 3 ; INIT 3 staticFive = 5 ASSIGN 4 staticFive = 5 LVAL 5 staticFive NAME 6 staticFive LEAF_NODE 7 staticFive ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 5 FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_07_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_07_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 ; LEAF_NODE 8 ; CONDITION 7 * data != '\\0' EXPR 8 * data != '\\0' UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 7 ; FOR_EXPR 7 data ++ EXPR 8 data ++ FIELD 9 data ++ LEAF_NODE 10 data LEAF_NODE 10 ++ LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 * data == SEARCH_CHAR EXPR 11 * data == SEARCH_CHAR UNARY_EXPR 12 * data UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 data LEAF_NODE 14 data EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 SEARCH_CHAR LEAF_NODE 13 SEARCH_CHAR LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 printLine ( \"We have a match!\" ) ; EXPR 13 printLine ( \"We have a match!\" ) FUNCTION_CALL 14 printLine ( \"We have a match!\" ) CALLEE 15 printLine LEAF_NODE 16 printLine LEAF_NODE 15 ( ARGUMENT 15 \"We have a match!\" FIELD 16 \"We have a match!\" LEAF_NODE 17 \"We have a match!\" LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive != 5 EXPR 5 staticFive != 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_07_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_07_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_07_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_07_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_07_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_07_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_07_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_07_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_07_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_07_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_07_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_07_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 48, "project": "cwe399_ast_vul_function_test_adv_149", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionGlobal ; VAR_DECL 2 int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionGlobal TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionGlobal LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionGlobal LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionGlobal EXPR 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionGlobal FIELD 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionGlobal LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionGlobal LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } SIMPLE_DECL 1 int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G1Global ; VAR_DECL 2 int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G1Global TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G1Global LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G1Global LEAF_NODE 2 ; SIMPLE_DECL 1 int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G2Global ; VAR_DECL 2 int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G2Global TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G2Global LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G2Global LEAF_NODE 2 ; SIMPLE_DECL 1 int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionGlobal ; VAR_DECL 2 int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionGlobal TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionGlobal LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionGlobal LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G1Sink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G1Sink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G1Global EXPR 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G1Global FIELD 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G1Global LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G1Global LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) && data < 100 EXPR 9 data > strlen ( HELLO_STRING ) && data < 100 AND 10 data > strlen ( HELLO_STRING ) && data < 100 EXPR 11 data > strlen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 strlen ( HELLO_STRING ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G2Sink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G2Sink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G2Global EXPR 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G2Global FIELD 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G2Global LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionB2G2Global LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) && data < 100 EXPR 9 data > strlen ( HELLO_STRING ) && data < 100 AND 10 data > strlen ( HELLO_STRING ) && data < 100 EXPR 11 data > strlen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 strlen ( HELLO_STRING ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionGlobal EXPR 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionGlobal FIELD 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionGlobal LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_functionGlobal LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 49, "project": "cwe399_ast_vul_function_test_adv_28", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52c_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52c_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52c_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_52c_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 50, "project": "cwe399_ast_vul_function_test_adv_3", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionGlobal ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionGlobal = 0 ; VAR_DECL 2 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionGlobal ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionGlobal = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionGlobal LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionGlobal LEAF_NODE 3 ; INIT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionGlobal = 0 ASSIGN 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionGlobal = 0 LVAL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionGlobal NAME 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionGlobal LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionGlobal ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionGlobal = 1 ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionGlobal = 1 ASSIGN 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionGlobal = 1 LVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionGlobal FIELD 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionGlobal LEAF_NODE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionGlobal ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } SIMPLE_DECL 1 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Global ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Global = 0 ; VAR_DECL 2 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Global ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Global = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Global LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Global LEAF_NODE 3 ; INIT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Global = 0 ASSIGN 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Global = 0 LVAL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Global NAME 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Global LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Global ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; SIMPLE_DECL 1 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Global ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Global = 0 ; VAR_DECL 2 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Global ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Global = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Global LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Global LEAF_NODE 3 ; INIT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Global = 0 ASSIGN 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Global = 0 LVAL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Global NAME 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Global LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Global ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Sink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Sink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Global = 0 ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Global = 0 ASSIGN 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Global = 0 LVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Global FIELD 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Global LEAF_NODE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Global ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Sink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Sink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Sink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Sink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G1Sink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Sink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Sink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Global = 1 ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Global = 1 ASSIGN 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Global = 1 LVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Global FIELD 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Global LEAF_NODE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Global ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Sink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Sink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Sink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Sink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_functionB2G2Sink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 51, "project": "cwe399_ast_vul_function_test_adv_7", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 wchar_t * TYPE_NAME 3 wchar_t LEAF_NODE 4 wchar_t LEAF_NODE 3 * FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61b_functionSource LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61b_functionSource PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61b_functionSource ( data ) ; EXPR 4 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61b_functionSource ( data ) ASSIGN 5 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61b_functionSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61b_functionSource ( data ) FUNCTION_CALL 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61b_functionSource ( data ) CALLEE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61b_functionSource LEAF_NODE 9 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61b_functionSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 wchar_t * TYPE_NAME 3 wchar_t LEAF_NODE 4 wchar_t LEAF_NODE 3 * FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61b_functionB2GSource LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61b_functionB2GSource PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61b_functionB2GSource ( data ) ; EXPR 4 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61b_functionB2GSource ( data ) ASSIGN 5 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61b_functionB2GSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61b_functionB2GSource ( data ) FUNCTION_CALL 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61b_functionB2GSource ( data ) CALLEE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61b_functionB2GSource LEAF_NODE 9 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61b_functionB2GSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_61_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 52, "project": "cwe399_ast_vul_function_test_adv_122", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_63b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_63b_functionSink PARAMETER_LIST 2 ( char * * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * * dataPtr TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = * dataPtr ; VAR_DECL 4 char * data ; data = * dataPtr TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; CONDITION 4 * data != '\\0' EXPR 5 * data != '\\0' UNARY_EXPR 6 * data UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 data LEAF_NODE 8 data EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 4 ; FOR_EXPR 4 data ++ EXPR 5 data ++ FIELD 6 data ++ LEAF_NODE 7 data LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * data == SEARCH_CHAR EXPR 8 * data == SEARCH_CHAR UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 SEARCH_CHAR LEAF_NODE 10 SEARCH_CHAR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 printLine ( \"We have a match!\" ) ; EXPR 10 printLine ( \"We have a match!\" ) FUNCTION_CALL 11 printLine ( \"We have a match!\" ) CALLEE 12 printLine LEAF_NODE 13 printLine LEAF_NODE 12 ( ARGUMENT 12 \"We have a match!\" FIELD 13 \"We have a match!\" LEAF_NODE 14 \"We have a match!\" LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_63b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_63b_functionB2GSink PARAMETER_LIST 2 ( char * * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * * dataPtr TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = * dataPtr ; VAR_DECL 4 char * data ; data = * dataPtr TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < strlen ( data ) EXPR 6 i < strlen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 strlen ( data ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 53, "project": "cwe399_ast_vul_function_test_adv_73", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52b_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52b_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52b_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52b_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52b_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52b_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52b_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52b_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52b_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52b_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 54, "project": "cwe399_ast_vul_function_test_adv_106", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51b_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 55, "project": "cwe399_ast_vul_function_test_adv_65", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 size_t TYPE_NAME 3 size_t LEAF_NODE 4 size_t FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionSource LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionSource PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionSource ( data ) ; EXPR 4 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionSource ( data ) ASSIGN 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionSource ( data ) FUNCTION_CALL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionSource ( data ) CALLEE 8 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionSource LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 size_t TYPE_NAME 3 size_t LEAF_NODE 4 size_t FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionSource LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionSource PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionSource ( data ) ; EXPR 4 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionSource ( data ) ASSIGN 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionSource ( data ) FUNCTION_CALL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionSource ( data ) CALLEE 8 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionSource LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 size_t TYPE_NAME 3 size_t LEAF_NODE 4 size_t FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionB2GSource LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionB2GSource PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionB2GSource ( data ) ; EXPR 4 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionB2GSource ( data ) ASSIGN 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionB2GSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionB2GSource ( data ) FUNCTION_CALL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionB2GSource ( data ) CALLEE 8 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionB2GSource LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_functionB2GSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 56, "project": "cwe399_ast_vul_function_test_adv_121", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType BASE_CLASSES { wchar_t * structFirst ; } CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType ; VAR_DECL 2 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType BASE_CLASSES { wchar_t * structFirst ; } CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType TYPE 3 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType BASE_CLASSES { wchar_t * structFirst ; } CLASS_DEF 4 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType BASE_CLASSES { wchar_t * structFirst ; } LEAF_NODE 5 struct CLASS_NAME 5 _CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType LEAF_NODE 6 _CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 wchar_t * structFirst ; SIMPLE_DECL 6 wchar_t * structFirst ; VAR_DECL 7 wchar_t * structFirst TYPE 8 wchar_t * TYPE_NAME 9 wchar_t LEAF_NODE 10 wchar_t POINTER 9 * LEAF_NODE 10 * NAME 8 structFirst LEAF_NODE 9 structFirst LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67b_functionSink PARAMETER_LIST 2 ( CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType myStruct TYPE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType TYPE_NAME 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType LEAF_NODE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = myStruct . structFirst ; VAR_DECL 4 wchar_t * data ; data = myStruct . structFirst TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67b_functionB2GSink PARAMETER_LIST 2 ( CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType myStruct TYPE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType TYPE_NAME 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType LEAF_NODE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = myStruct . structFirst ; VAR_DECL 4 wchar_t * data ; data = myStruct . structFirst TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 57, "project": "cwe399_ast_vul_function_test_adv_69", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52c_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52c_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52c_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_52c_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 58, "project": "cwe399_ast_vul_function_test_adv_80", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 5 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 6 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ CHAR_ARRAY_SIZE ] LEAF_NODE 8 [ FIELD 8 CHAR_ARRAY_SIZE LEAF_NODE 9 CHAR_ARRAY_SIZE LEAF_NODE 8 ] NAME 6 inputBuffer LEAF_NODE 7 inputBuffer LEAF_NODE 6 ; INIT 6 inputBuffer = \"\" ASSIGN 7 inputBuffer = \"\" LVAL 8 inputBuffer NAME 9 inputBuffer LEAF_NODE 10 inputBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; SIMPLE_DECL 4 int stdin ; VAR_DECL 5 int stdin TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 stdin LEAF_NODE 7 stdin LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 6 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 7 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 8 fgets LEAF_NODE 9 fgets LEAF_NODE 8 ( ARGUMENT 8 inputBuffer FIELD 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 8 , ARGUMENT 8 CHAR_ARRAY_SIZE FIELD 9 CHAR_ARRAY_SIZE LEAF_NODE 10 CHAR_ARRAY_SIZE LEAF_NODE 8 , ARGUMENT 8 stdin FIELD 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ) EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 8 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 9 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 11 strtoul ( inputBuffer , NULL , 0 ) CALLEE 12 strtoul LEAF_NODE 13 strtoul LEAF_NODE 12 ( ARGUMENT 12 inputBuffer FIELD 13 inputBuffer LEAF_NODE 14 inputBuffer LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"fgets() failed.\" ) ; EXPR 8 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 9 printLine ( \"fgets() failed.\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"fgets() failed.\" FIELD 11 \"fgets() failed.\" LEAF_NODE 12 \"fgets() failed.\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 20 ; EXPR 4 data = 20 ASSIGN 5 data = 20 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 20 FIELD 7 20 LEAF_NODE 8 20 LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 5 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 6 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ CHAR_ARRAY_SIZE ] LEAF_NODE 8 [ FIELD 8 CHAR_ARRAY_SIZE LEAF_NODE 9 CHAR_ARRAY_SIZE LEAF_NODE 8 ] NAME 6 inputBuffer LEAF_NODE 7 inputBuffer LEAF_NODE 6 ; INIT 6 inputBuffer = \"\" ASSIGN 7 inputBuffer = \"\" LVAL 8 inputBuffer NAME 9 inputBuffer LEAF_NODE 10 inputBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; SIMPLE_DECL 4 int stdin ; VAR_DECL 5 int stdin TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 stdin LEAF_NODE 7 stdin LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 6 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 7 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 8 fgets LEAF_NODE 9 fgets LEAF_NODE 8 ( ARGUMENT 8 inputBuffer FIELD 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 8 , ARGUMENT 8 CHAR_ARRAY_SIZE FIELD 9 CHAR_ARRAY_SIZE LEAF_NODE 10 CHAR_ARRAY_SIZE LEAF_NODE 8 , ARGUMENT 8 stdin FIELD 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ) EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 8 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 9 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 11 strtoul ( inputBuffer , NULL , 0 ) CALLEE 12 strtoul LEAF_NODE 13 strtoul LEAF_NODE 12 ( ARGUMENT 12 inputBuffer FIELD 13 inputBuffer LEAF_NODE 14 inputBuffer LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"fgets() failed.\" ) ; EXPR 8 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 9 printLine ( \"fgets() failed.\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"fgets() failed.\" FIELD 11 \"fgets() failed.\" LEAF_NODE 12 \"fgets() failed.\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 59, "project": "cwe399_ast_vul_function_test_adv_4", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE ; VAR_DECL 2 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE TYPE 3 struct FILE BASE_CLASSES { CLASS_CONTENT } CLASS_DEF 4 struct FILE BASE_CLASSES { CLASS_CONTENT } LEAF_NODE 5 struct CLASS_NAME 5 FILE LEAF_NODE 6 FILE LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { LEAF_NODE 5 CLASS_CONTENT LEAF_NODE 5 } NAME 3 FILE LEAF_NODE 4 FILE LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionSource LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } JUMP_STATEMENT 3 return data ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 data EXPR 5 data FIELD 6 data LEAF_NODE 7 data LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionB2GSource LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionB2GSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } JUMP_STATEMENT 3 return data ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 data EXPR 5 data FIELD 6 data LEAF_NODE 7 data LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 60, "project": "cwe399_ast_vul_function_test_adv_143", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 size_t TYPE_NAME 3 size_t LEAF_NODE 4 size_t FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionSource LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionSource PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionSource ( data ) ; EXPR 4 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionSource ( data ) ASSIGN 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionSource ( data ) FUNCTION_CALL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionSource ( data ) CALLEE 8 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionSource LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 size_t TYPE_NAME 3 size_t LEAF_NODE 4 size_t FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionSource LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionSource PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionSource ( data ) ; EXPR 4 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionSource ( data ) ASSIGN 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionSource ( data ) FUNCTION_CALL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionSource ( data ) CALLEE 8 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionSource LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 size_t TYPE_NAME 3 size_t LEAF_NODE 4 size_t FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionB2GSource LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionB2GSource PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionB2GSource ( data ) ; EXPR 4 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionB2GSource ( data ) ASSIGN 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionB2GSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionB2GSource ( data ) FUNCTION_CALL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionB2GSource ( data ) CALLEE 8 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionB2GSource LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61b_functionB2GSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_61_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 61, "project": "cwe399_ast_vul_function_test_adv_36", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int staticTrue ; staticTrue = 1 ; VAR_DECL 2 int staticTrue ; staticTrue = 1 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticTrue LEAF_NODE 4 staticTrue LEAF_NODE 3 ; INIT 3 staticTrue = 1 ASSIGN 4 staticTrue = 1 LVAL 5 staticTrue NAME 6 staticTrue LEAF_NODE 7 staticTrue ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 2 ; SIMPLE_DECL 1 int staticFalse ; staticFalse = 0 ; VAR_DECL 2 int staticFalse ; staticFalse = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticFalse LEAF_NODE 4 staticFalse LEAF_NODE 3 ; INIT 3 staticFalse = 0 ASSIGN 4 staticFalse = 0 LVAL 5 staticFalse NAME 6 staticFalse LEAF_NODE 7 staticFalse ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticTrue EXPR 5 staticTrue FIELD 6 staticTrue LEAF_NODE 7 staticTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 8 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 9 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 10 char LEAF_NODE 11 char TYPE_SUFFIX 10 [ CHAR_ARRAY_SIZE ] LEAF_NODE 11 [ FIELD 11 CHAR_ARRAY_SIZE LEAF_NODE 12 CHAR_ARRAY_SIZE LEAF_NODE 11 ] NAME 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 9 ; INIT 9 inputBuffer = \"\" ASSIGN 10 inputBuffer = \"\" LVAL 11 inputBuffer NAME 12 inputBuffer LEAF_NODE 13 inputBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 \"\" FIELD 12 \"\" LEAF_NODE 13 \"\" LEAF_NODE 8 ; SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 9 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 10 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 inputBuffer FIELD 12 inputBuffer LEAF_NODE 13 inputBuffer LEAF_NODE 11 , ARGUMENT 11 CHAR_ARRAY_SIZE FIELD 12 CHAR_ARRAY_SIZE LEAF_NODE 13 CHAR_ARRAY_SIZE LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 11 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 12 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 13 data FIELD 14 data LEAF_NODE 15 data ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 14 strtoul ( inputBuffer , NULL , 0 ) CALLEE 15 strtoul LEAF_NODE 16 strtoul LEAF_NODE 15 ( ARGUMENT 15 inputBuffer FIELD 16 inputBuffer LEAF_NODE 17 inputBuffer LEAF_NODE 15 , ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed.\" ) ; EXPR 11 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed.\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed.\" FIELD 14 \"fgets() failed.\" LEAF_NODE 15 \"fgets() failed.\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticTrue EXPR 5 staticTrue FIELD 6 staticTrue LEAF_NODE 7 staticTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticTrue EXPR 5 staticTrue FIELD 6 staticTrue LEAF_NODE 7 staticTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 8 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 9 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 10 char LEAF_NODE 11 char TYPE_SUFFIX 10 [ CHAR_ARRAY_SIZE ] LEAF_NODE 11 [ FIELD 11 CHAR_ARRAY_SIZE LEAF_NODE 12 CHAR_ARRAY_SIZE LEAF_NODE 11 ] NAME 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 9 ; INIT 9 inputBuffer = \"\" ASSIGN 10 inputBuffer = \"\" LVAL 11 inputBuffer NAME 12 inputBuffer LEAF_NODE 13 inputBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 \"\" FIELD 12 \"\" LEAF_NODE 13 \"\" LEAF_NODE 8 ; SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 9 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 10 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 inputBuffer FIELD 12 inputBuffer LEAF_NODE 13 inputBuffer LEAF_NODE 11 , ARGUMENT 11 CHAR_ARRAY_SIZE FIELD 12 CHAR_ARRAY_SIZE LEAF_NODE 13 CHAR_ARRAY_SIZE LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 11 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 12 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 13 data FIELD 14 data LEAF_NODE 15 data ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 14 strtoul ( inputBuffer , NULL , 0 ) CALLEE 15 strtoul LEAF_NODE 16 strtoul LEAF_NODE 15 ( ARGUMENT 15 inputBuffer FIELD 16 inputBuffer LEAF_NODE 17 inputBuffer LEAF_NODE 15 , ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed.\" ) ; EXPR 11 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed.\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed.\" FIELD 14 \"fgets() failed.\" LEAF_NODE 15 \"fgets() failed.\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFalse EXPR 5 staticFalse FIELD 6 staticFalse LEAF_NODE 7 staticFalse LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) && data < 100 EXPR 9 data > strlen ( HELLO_STRING ) && data < 100 AND 10 data > strlen ( HELLO_STRING ) && data < 100 EXPR 11 data > strlen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 strlen ( HELLO_STRING ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticTrue EXPR 5 staticTrue FIELD 6 staticTrue LEAF_NODE 7 staticTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 8 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 9 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 10 char LEAF_NODE 11 char TYPE_SUFFIX 10 [ CHAR_ARRAY_SIZE ] LEAF_NODE 11 [ FIELD 11 CHAR_ARRAY_SIZE LEAF_NODE 12 CHAR_ARRAY_SIZE LEAF_NODE 11 ] NAME 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 9 ; INIT 9 inputBuffer = \"\" ASSIGN 10 inputBuffer = \"\" LVAL 11 inputBuffer NAME 12 inputBuffer LEAF_NODE 13 inputBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 \"\" FIELD 12 \"\" LEAF_NODE 13 \"\" LEAF_NODE 8 ; SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 9 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 10 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 inputBuffer FIELD 12 inputBuffer LEAF_NODE 13 inputBuffer LEAF_NODE 11 , ARGUMENT 11 CHAR_ARRAY_SIZE FIELD 12 CHAR_ARRAY_SIZE LEAF_NODE 13 CHAR_ARRAY_SIZE LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 11 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 12 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 13 data FIELD 14 data LEAF_NODE 15 data ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 14 strtoul ( inputBuffer , NULL , 0 ) CALLEE 15 strtoul LEAF_NODE 16 strtoul LEAF_NODE 15 ( ARGUMENT 15 inputBuffer FIELD 16 inputBuffer LEAF_NODE 17 inputBuffer LEAF_NODE 15 , ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed.\" ) ; EXPR 11 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed.\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed.\" FIELD 14 \"fgets() failed.\" LEAF_NODE 15 \"fgets() failed.\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticTrue EXPR 5 staticTrue FIELD 6 staticTrue LEAF_NODE 7 staticTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) && data < 100 EXPR 9 data > strlen ( HELLO_STRING ) && data < 100 AND 10 data > strlen ( HELLO_STRING ) && data < 100 EXPR 11 data > strlen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 strlen ( HELLO_STRING ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function1 LEAF_NODE 3 function1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFalse EXPR 5 staticFalse FIELD 6 staticFalse LEAF_NODE 7 staticFalse LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticTrue EXPR 5 staticTrue FIELD 6 staticTrue LEAF_NODE 7 staticTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function2 LEAF_NODE 3 function2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticTrue EXPR 5 staticTrue FIELD 6 staticTrue LEAF_NODE 7 staticTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticTrue EXPR 5 staticTrue FIELD 6 staticTrue LEAF_NODE 7 staticTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function1 ( ) ; EXPR 4 function1 ( ) FUNCTION_CALL 5 function1 ( ) CALLEE 6 function1 LEAF_NODE 7 function1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function2 ( ) ; EXPR 4 function2 ( ) FUNCTION_CALL 5 function2 ( ) CALLEE 6 function2 LEAF_NODE 7 function2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 62, "project": "cwe399_ast_vul_function_test_adv_187", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_52c_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_52c_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_52b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_52b_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_52c_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_52c_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_52c_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_52c_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_52c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_52c_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_52c_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_52b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_52b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_52c_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_52c_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_52c_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_52c_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_52c_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 63, "project": "cwe399_ast_vul_function_test_adv_119", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66b_functionSink PARAMETER_LIST 2 ( wchar_t * [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * [ ] dataArray TYPE 4 wchar_t * [ ] TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = dataArray [ 2 ] ; VAR_DECL 4 wchar_t * data ; data = dataArray [ 2 ] TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = dataArray [ 2 ] ASSIGN 6 data = dataArray [ 2 ] LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataArray [ 2 ] FIELD 8 dataArray [ 2 ] LEAF_NODE 9 dataArray LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] LEAF_NODE 4 ; LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * [ ] dataArray TYPE 4 wchar_t * [ ] TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = dataArray [ 2 ] ; VAR_DECL 4 wchar_t * data ; data = dataArray [ 2 ] TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = dataArray [ 2 ] ASSIGN 6 data = dataArray [ 2 ] LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataArray [ 2 ] FIELD 8 dataArray [ 2 ] LEAF_NODE 9 dataArray LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 64, "project": "cwe399_ast_vul_function_test_adv_142", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 staticReturnsTrue LEAF_NODE 3 staticReturnsTrue PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 staticReturnsFalse LEAF_NODE 3 staticReturnsFalse PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_08_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_08_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 for LEAF_NODE 6 ( LEAF_NODE 6 ; LEAF_NODE 6 * LEAF_NODE 6 data LEAF_NODE 6 != LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 ++ LEAF_NODE 6 ) LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 * data == SEARCH_CHAR EXPR 9 * data == SEARCH_CHAR UNARY_EXPR 10 * data UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 data LEAF_NODE 12 data EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsFalse ( ) EXPR 5 staticReturnsFalse ( ) FUNCTION_CALL 6 staticReturnsFalse ( ) CALLEE 7 staticReturnsFalse LEAF_NODE 8 staticReturnsFalse LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_08_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_08_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_08_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_08_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_08_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_08_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_08_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_08_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_08_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_08_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_08_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_08_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 65, "project": "cwe399_ast_vul_function_test_adv_168", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData ; VAR_DECL 2 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData TYPE 3 size_t TYPE_NAME 4 size_t LEAF_NODE 5 size_t NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData LEAF_NODE 2 ; SIMPLE_DECL 1 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData ; VAR_DECL 2 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData TYPE 3 size_t TYPE_NAME 4 size_t LEAF_NODE 5 size_t NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData LEAF_NODE 2 ; SIMPLE_DECL 1 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionB2GData ; VAR_DECL 2 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionB2GData TYPE 3 size_t TYPE_NAME 4 size_t LEAF_NODE 5 size_t NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionB2GData LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionB2GData LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68b_functionSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData ; VAR_DECL 4 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData ASSIGN 6 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData FIELD 8 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68b_functionSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData ; VAR_DECL 4 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData ASSIGN 6 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData FIELD 8 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68b_functionB2GSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionB2GData ; VAR_DECL 4 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionB2GData TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionB2GData ASSIGN 6 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionB2GData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionB2GData FIELD 8 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionB2GData LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_68_functionB2GData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 66, "project": "cwe399_ast_vul_function_test_adv_48", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_15_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_15_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 6 EXPR 5 6 FIELD 6 6 LEAF_NODE 7 6 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 6 : LEAF_NODE 7 case LEAF_NODE 7 6 LEAF_NODE 7 : LEAF_NODE 6 for LEAF_NODE 6 ( LEAF_NODE 6 ; LEAF_NODE 6 * LEAF_NODE 6 data LEAF_NODE 6 != LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 ++ LEAF_NODE 6 ) LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 * data == SEARCH_CHAR EXPR 9 * data == SEARCH_CHAR UNARY_EXPR 10 * data UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 data LEAF_NODE 12 data EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 5 EXPR 5 5 FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 6 : LEAF_NODE 7 case LEAF_NODE 7 6 LEAF_NODE 7 : EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 6 EXPR 5 6 FIELD 6 6 LEAF_NODE 7 6 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 6 : LEAF_NODE 7 case LEAF_NODE 7 6 LEAF_NODE 7 : LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_15_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_15_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_15_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_15_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_15_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_15_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_15_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_15_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_15_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_15_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_15_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_15_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 67, "project": "cwe399_ast_vul_function_test_adv_196", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66b_functionSink PARAMETER_LIST 2 ( wchar_t * [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * [ ] dataArray TYPE 4 wchar_t * [ ] TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * [ 5 ] dataArray ; VAR_DECL 4 wchar_t * [ 5 ] dataArray TYPE 5 wchar_t * [ 5 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * TYPE_SUFFIX 6 [ 5 ] LEAF_NODE 7 [ FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 dataArray [ 2 ] = data ; EXPR 4 dataArray [ 2 ] = data ASSIGN 5 dataArray [ 2 ] = data LVAL 6 dataArray [ 2 ] FIELD 7 dataArray [ 2 ] LEAF_NODE 8 dataArray LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66b_functionSink ( dataArray ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66b_functionSink ( dataArray ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66b_functionSink ( dataArray ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66b_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66b_functionSink LEAF_NODE 6 ( ARGUMENT 6 dataArray FIELD 7 dataArray LEAF_NODE 8 dataArray LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * [ ] dataArray TYPE 4 wchar_t * [ ] TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * [ 5 ] dataArray ; VAR_DECL 4 wchar_t * [ 5 ] dataArray TYPE 5 wchar_t * [ 5 ] TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * TYPE_SUFFIX 6 [ 5 ] LEAF_NODE 7 [ FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 dataArray [ 2 ] = data ; EXPR 4 dataArray [ 2 ] = data ASSIGN 5 dataArray [ 2 ] = data LVAL 6 dataArray [ 2 ] FIELD 7 dataArray [ 2 ] LEAF_NODE 8 dataArray LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66b_functionB2GSink ( dataArray ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66b_functionB2GSink ( dataArray ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66b_functionB2GSink ( dataArray ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66b_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 dataArray FIELD 7 dataArray LEAF_NODE 8 dataArray LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_66_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 68, "project": "cwe399_ast_vul_function_test_adv_23", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65b_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 69, "project": "cwe399_ast_vul_function_test_adv_51", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionSink LEAF_NODE 3 functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; CONDITION 4 * data != '\\0' EXPR 5 * data != '\\0' UNARY_EXPR 6 * data UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 data LEAF_NODE 8 data EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 4 ; FOR_EXPR 4 data ++ EXPR 5 data ++ FIELD 6 data ++ LEAF_NODE 7 data LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * data == SEARCH_CHAR EXPR 8 * data == SEARCH_CHAR UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 SEARCH_CHAR LEAF_NODE 10 SEARCH_CHAR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 printLine ( \"We have a match!\" ) ; EXPR 10 printLine ( \"We have a match!\" ) FUNCTION_CALL 11 printLine ( \"We have a match!\" ) CALLEE 12 printLine LEAF_NODE 13 printLine LEAF_NODE 12 ( ARGUMENT 12 \"We have a match!\" FIELD 13 \"We have a match!\" LEAF_NODE 14 \"We have a match!\" LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_44_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_44_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 char LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 functionSink ; EXPR 4 functionSink FIELD 5 functionSink LEAF_NODE 6 functionSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2GSink LEAF_NODE 3 functionB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < strlen ( data ) EXPR 6 i < strlen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 strlen ( data ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 char LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 functionB2GSink ; EXPR 4 functionB2GSink FIELD 5 functionB2GSink LEAF_NODE 6 functionB2GSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_44_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_44_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_44_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_44_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_44_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_44_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_44_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_44_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_44_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_44_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_44_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_44_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 70, "project": "cwe399_ast_vul_function_test_adv_191", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int stdin ; VAR_DECL 4 int stdin TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 stdin LEAF_NODE 6 stdin LEAF_NODE 4 ; EXPR_STATEMENT 3 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 4 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 5 fscanf ( stdin , \"%ud\" , & data ) CALLEE 6 fscanf LEAF_NODE 7 fscanf LEAF_NODE 6 ( ARGUMENT 6 stdin FIELD 7 stdin LEAF_NODE 8 stdin LEAF_NODE 6 , ARGUMENT 6 \"%ud\" FIELD 7 \"%ud\" LEAF_NODE 8 \"%ud\" LEAF_NODE 6 , ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 20 ; EXPR 4 data = 20 ASSIGN 5 data = 20 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 20 FIELD 7 20 LEAF_NODE 8 20 LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int stdin ; VAR_DECL 4 int stdin TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 stdin LEAF_NODE 6 stdin LEAF_NODE 4 ; EXPR_STATEMENT 3 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 4 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 5 fscanf ( stdin , \"%ud\" , & data ) CALLEE 6 fscanf LEAF_NODE 7 fscanf LEAF_NODE 6 ( ARGUMENT 6 stdin FIELD 7 stdin LEAF_NODE 8 stdin LEAF_NODE 6 , ARGUMENT 6 \"%ud\" FIELD 7 \"%ud\" LEAF_NODE 8 \"%ud\" LEAF_NODE 6 , ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 71, "project": "cwe399_ast_vul_function_test_adv_137", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 72, "project": "cwe399_ast_vul_function_test_adv_37", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionSink LEAF_NODE 3 functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_41_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_41_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 5 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 6 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ CHAR_ARRAY_SIZE ] LEAF_NODE 8 [ FIELD 8 CHAR_ARRAY_SIZE LEAF_NODE 9 CHAR_ARRAY_SIZE LEAF_NODE 8 ] NAME 6 inputBuffer LEAF_NODE 7 inputBuffer LEAF_NODE 6 ; INIT 6 inputBuffer = \"\" ASSIGN 7 inputBuffer = \"\" LVAL 8 inputBuffer NAME 9 inputBuffer LEAF_NODE 10 inputBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; SIMPLE_DECL 4 int stdin ; VAR_DECL 5 int stdin TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 stdin LEAF_NODE 7 stdin LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 6 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 7 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 8 fgets LEAF_NODE 9 fgets LEAF_NODE 8 ( ARGUMENT 8 inputBuffer FIELD 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 8 , ARGUMENT 8 CHAR_ARRAY_SIZE FIELD 9 CHAR_ARRAY_SIZE LEAF_NODE 10 CHAR_ARRAY_SIZE LEAF_NODE 8 , ARGUMENT 8 stdin FIELD 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ) EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 8 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 9 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 11 strtoul ( inputBuffer , NULL , 0 ) CALLEE 12 strtoul LEAF_NODE 13 strtoul LEAF_NODE 12 ( ARGUMENT 12 inputBuffer FIELD 13 inputBuffer LEAF_NODE 14 inputBuffer LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"fgets() failed.\" ) ; EXPR 8 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 9 printLine ( \"fgets() failed.\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"fgets() failed.\" FIELD 11 \"fgets() failed.\" LEAF_NODE 12 \"fgets() failed.\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 functionSink ( data ) ; EXPR 4 functionSink ( data ) FUNCTION_CALL 5 functionSink ( data ) CALLEE 6 functionSink LEAF_NODE 7 functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionSink LEAF_NODE 3 functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 20 ; EXPR 4 data = 20 ASSIGN 5 data = 20 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 20 FIELD 7 20 LEAF_NODE 8 20 LEAF_NODE 4 ; EXPR_STATEMENT 3 functionSink ( data ) ; EXPR 4 functionSink ( data ) FUNCTION_CALL 5 functionSink ( data ) CALLEE 6 functionSink LEAF_NODE 7 functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2GSink LEAF_NODE 3 functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 5 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 6 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ CHAR_ARRAY_SIZE ] LEAF_NODE 8 [ FIELD 8 CHAR_ARRAY_SIZE LEAF_NODE 9 CHAR_ARRAY_SIZE LEAF_NODE 8 ] NAME 6 inputBuffer LEAF_NODE 7 inputBuffer LEAF_NODE 6 ; INIT 6 inputBuffer = \"\" ASSIGN 7 inputBuffer = \"\" LVAL 8 inputBuffer NAME 9 inputBuffer LEAF_NODE 10 inputBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; SIMPLE_DECL 4 int stdin ; VAR_DECL 5 int stdin TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 stdin LEAF_NODE 7 stdin LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 6 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 7 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 8 fgets LEAF_NODE 9 fgets LEAF_NODE 8 ( ARGUMENT 8 inputBuffer FIELD 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 8 , ARGUMENT 8 CHAR_ARRAY_SIZE FIELD 9 CHAR_ARRAY_SIZE LEAF_NODE 10 CHAR_ARRAY_SIZE LEAF_NODE 8 , ARGUMENT 8 stdin FIELD 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ) EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 8 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 9 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 11 strtoul ( inputBuffer , NULL , 0 ) CALLEE 12 strtoul LEAF_NODE 13 strtoul LEAF_NODE 12 ( ARGUMENT 12 inputBuffer FIELD 13 inputBuffer LEAF_NODE 14 inputBuffer LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"fgets() failed.\" ) ; EXPR 8 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 9 printLine ( \"fgets() failed.\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"fgets() failed.\" FIELD 11 \"fgets() failed.\" LEAF_NODE 12 \"fgets() failed.\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 functionB2GSink ( data ) ; EXPR 4 functionB2GSink ( data ) FUNCTION_CALL 5 functionB2GSink ( data ) CALLEE 6 functionB2GSink LEAF_NODE 7 functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_41_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_41_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_41_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_41_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_41_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_41_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_41_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_41_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_41_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_41_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_41_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_41_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 73, "project": "cwe399_ast_vul_function_test_adv_169", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionSource LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionSource ( data ) ; EXPR 4 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionSource ( data ) ASSIGN 5 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionSource ( data ) FUNCTION_CALL 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionSource ( data ) CALLEE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionSource LEAF_NODE 9 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; CONDITION 4 * data != '\\0' EXPR 5 * data != '\\0' UNARY_EXPR 6 * data UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 data LEAF_NODE 8 data EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 4 ; FOR_EXPR 4 data ++ EXPR 5 data ++ FIELD 6 data ++ LEAF_NODE 7 data LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * data == SEARCH_CHAR EXPR 8 * data == SEARCH_CHAR UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 SEARCH_CHAR LEAF_NODE 10 SEARCH_CHAR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 printLine ( \"We have a match!\" ) ; EXPR 10 printLine ( \"We have a match!\" ) FUNCTION_CALL 11 printLine ( \"We have a match!\" ) CALLEE 12 printLine LEAF_NODE 13 printLine LEAF_NODE 12 ( ARGUMENT 12 \"We have a match!\" FIELD 13 \"We have a match!\" LEAF_NODE 14 \"We have a match!\" LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionB2GSource LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionB2GSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionB2GSource ( data ) ; EXPR 4 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionB2GSource ( data ) ASSIGN 5 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionB2GSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionB2GSource ( data ) FUNCTION_CALL 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionB2GSource ( data ) CALLEE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionB2GSource LEAF_NODE 9 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_functionB2GSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < strlen ( data ) EXPR 6 i < strlen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 strlen ( data ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 74, "project": "cwe399_ast_vul_function_test_adv_22", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionSink PARAMETER_LIST 2 ( size_t * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t * dataPtr TYPE 4 size_t * TYPE_NAME 5 size_t LEAF_NODE 6 size_t POINTER 5 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = rand ( ) ; EXPR 4 data = rand ( ) ASSIGN 5 data = rand ( ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 rand ( ) FUNCTION_CALL 7 rand ( ) CALLEE 8 rand LEAF_NODE 9 rand LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionSink ( & data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionSink ( & data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionSink ( & data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionSink PARAMETER_LIST 2 ( size_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t * data TYPE 4 size_t * TYPE_NAME 5 size_t LEAF_NODE 6 size_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 20 ; EXPR 4 data = 20 ASSIGN 5 data = 20 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 20 FIELD 7 20 LEAF_NODE 8 20 LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionSink ( & data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionSink ( & data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionSink ( & data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionB2GSink PARAMETER_LIST 2 ( size_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t * data TYPE 4 size_t * TYPE_NAME 5 size_t LEAF_NODE 6 size_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = rand ( ) ; EXPR 4 data = rand ( ) ASSIGN 5 data = rand ( ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 rand ( ) FUNCTION_CALL 7 rand ( ) CALLEE 8 rand LEAF_NODE 9 rand LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionB2GSink ( & data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionB2GSink ( & data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionB2GSink ( & data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 75, "project": "cwe399_ast_vul_function_test_adv_19", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_32_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_32_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataPtr1 ; dataPtr1 = & data ; VAR_DECL 4 char * dataPtr1 ; dataPtr1 = & data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr1 LEAF_NODE 6 dataPtr1 LEAF_NODE 5 ; INIT 5 dataPtr1 = & data ASSIGN 6 dataPtr1 = & data LVAL 7 dataPtr1 NAME 8 dataPtr1 LEAF_NODE 9 dataPtr1 ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & data UNARY_EXPR 8 & data UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 data LEAF_NODE 10 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataPtr2 ; dataPtr2 = & data ; VAR_DECL 4 char * dataPtr2 ; dataPtr2 = & data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr2 LEAF_NODE 6 dataPtr2 LEAF_NODE 5 ; INIT 5 dataPtr2 = & data ASSIGN 6 dataPtr2 = & data LVAL 7 dataPtr2 NAME 8 dataPtr2 LEAF_NODE 9 dataPtr2 ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & data UNARY_EXPR 8 & data UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 data LEAF_NODE 10 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = * dataPtr1 ; VAR_DECL 5 char * data ; data = * dataPtr1 TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = * dataPtr1 ASSIGN 7 data = * dataPtr1 LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 * dataPtr1 UNARY_EXPR 9 * dataPtr1 UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 dataPtr1 LEAF_NODE 11 dataPtr1 LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 6 size_t dataLen ; dataLen = strlen ( data ) TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 dataLen LEAF_NODE 8 dataLen LEAF_NODE 7 ; INIT 7 dataLen = strlen ( data ) ASSIGN 8 dataLen = strlen ( data ) LVAL 9 dataLen NAME 10 dataLen LEAF_NODE 11 dataLen ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 strlen ( data ) FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 6 ; SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 100 - dataLen > 1 EXPR 7 100 - dataLen > 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 dataLen LEAF_NODE 9 dataLen REL_OPERATOR 8 > LEAF_NODE 9 > FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SIMPLE_DECL 8 int stdin ; VAR_DECL 9 int stdin TYPE 10 int TYPE_NAME 11 int LEAF_NODE 12 int NAME 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 12 fgets LEAF_NODE 13 fgets LEAF_NODE 12 ( ARGUMENT 12 data + dataLen FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 + FIELD 13 dataLen LEAF_NODE 14 dataLen LEAF_NODE 12 , ARGUMENT 12 ( int ) ( 100 - dataLen ) LEAF_NODE 13 ( TYPE_NAME 13 int LEAF_NODE 14 int LEAF_NODE 13 ) LEAF_NODE 13 ( FIELD 13 100 LEAF_NODE 14 100 LEAF_NODE 13 - FIELD 13 dataLen LEAF_NODE 14 dataLen LEAF_NODE 13 ) LEAF_NODE 12 , ARGUMENT 12 stdin FIELD 13 stdin LEAF_NODE 14 stdin LEAF_NODE 12 ) EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 dataLen = strlen ( data ) ; EXPR 12 dataLen = strlen ( data ) ASSIGN 13 dataLen = strlen ( data ) LVAL 14 dataLen FIELD 15 dataLen LEAF_NODE 16 dataLen ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 strlen ( data ) FUNCTION_CALL 15 strlen ( data ) CALLEE 16 strlen LEAF_NODE 17 strlen LEAF_NODE 16 ( ARGUMENT 16 data FIELD 17 data LEAF_NODE 18 data LEAF_NODE 16 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 14 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 15 dataLen > 0 FIELD 16 dataLen LEAF_NODE 17 dataLen REL_OPERATOR 16 > LEAF_NODE 17 > FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 && EXPR 15 data [ dataLen - 1 ] == '\\n' FIELD 16 data [ dataLen - 1 ] LEAF_NODE 17 data LEAF_NODE 17 [ EXPR 17 dataLen - 1 FIELD 18 dataLen LEAF_NODE 19 dataLen LEAF_NODE 18 - FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 17 ] EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 '\\n' LEAF_NODE 17 '\\n' LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 data [ dataLen - 1 ] = '\\0' ; EXPR 15 data [ dataLen - 1 ] = '\\0' ASSIGN 16 data [ dataLen - 1 ] = '\\0' LVAL 17 data [ dataLen - 1 ] FIELD 18 data [ dataLen - 1 ] LEAF_NODE 19 data LEAF_NODE 19 [ EXPR 19 dataLen - 1 FIELD 20 dataLen LEAF_NODE 21 dataLen LEAF_NODE 20 - FIELD 20 1 LEAF_NODE 21 1 LEAF_NODE 19 ] ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 '\\0' FIELD 18 '\\0' LEAF_NODE 19 '\\0' LEAF_NODE 15 ; LEAF_NODE 13 } LEAF_NODE 10 } SELECTION 8 KEYWORD 9 else LEAF_NODE 10 else STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 printLine ( \"fgets() failed\" ) ; EXPR 12 printLine ( \"fgets() failed\" ) FUNCTION_CALL 13 printLine ( \"fgets() failed\" ) CALLEE 14 printLine LEAF_NODE 15 printLine LEAF_NODE 14 ( ARGUMENT 14 \"fgets() failed\" FIELD 15 \"fgets() failed\" LEAF_NODE 16 \"fgets() failed\" LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 data [ dataLen ] = '\\0' ; EXPR 12 data [ dataLen ] = '\\0' ASSIGN 13 data [ dataLen ] = '\\0' LVAL 14 data [ dataLen ] FIELD 15 data [ dataLen ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 16 ] ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 '\\0' FIELD 15 '\\0' LEAF_NODE 16 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 7 } LEAF_NODE 4 } EXPR_STATEMENT 4 * dataPtr1 = data ; EXPR 5 * dataPtr1 = data ASSIGN 6 * dataPtr1 = data LVAL 7 * dataPtr1 UNARY_EXPR 8 * dataPtr1 UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr1 LEAF_NODE 10 dataPtr1 ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = * dataPtr2 ; VAR_DECL 5 char * data ; data = * dataPtr2 TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = * dataPtr2 ASSIGN 7 data = * dataPtr2 LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 * dataPtr2 UNARY_EXPR 9 * dataPtr2 UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 dataPtr2 LEAF_NODE 11 dataPtr2 LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 ; LEAF_NODE 6 ; CONDITION 5 * data != '\\0' EXPR 6 * data != '\\0' UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 5 ; FOR_EXPR 5 data ++ EXPR 6 data ++ FIELD 7 data ++ LEAF_NODE 8 data LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 * data == SEARCH_CHAR EXPR 9 * data == SEARCH_CHAR UNARY_EXPR 10 * data UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 data LEAF_NODE 12 data EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataPtr1 ; dataPtr1 = & data ; VAR_DECL 4 char * dataPtr1 ; dataPtr1 = & data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr1 LEAF_NODE 6 dataPtr1 LEAF_NODE 5 ; INIT 5 dataPtr1 = & data ASSIGN 6 dataPtr1 = & data LVAL 7 dataPtr1 NAME 8 dataPtr1 LEAF_NODE 9 dataPtr1 ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & data UNARY_EXPR 8 & data UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 data LEAF_NODE 10 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * dataPtr2 ; dataPtr2 = & data ; VAR_DECL 4 char * dataPtr2 ; dataPtr2 = & data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr2 LEAF_NODE 6 dataPtr2 LEAF_NODE 5 ; INIT 5 dataPtr2 = & data ASSIGN 6 dataPtr2 = & data LVAL 7 dataPtr2 NAME 8 dataPtr2 LEAF_NODE 9 dataPtr2 ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & data UNARY_EXPR 8 & data UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 data LEAF_NODE 10 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = * dataPtr1 ; VAR_DECL 5 char * data ; data = * dataPtr1 TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = * dataPtr1 ASSIGN 7 data = * dataPtr1 LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 * dataPtr1 UNARY_EXPR 9 * dataPtr1 UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 dataPtr1 LEAF_NODE 11 dataPtr1 LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 6 size_t dataLen ; dataLen = strlen ( data ) TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 dataLen LEAF_NODE 8 dataLen LEAF_NODE 7 ; INIT 7 dataLen = strlen ( data ) ASSIGN 8 dataLen = strlen ( data ) LVAL 9 dataLen NAME 10 dataLen LEAF_NODE 11 dataLen ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 strlen ( data ) FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 6 ; SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 100 - dataLen > 1 EXPR 7 100 - dataLen > 1 FIELD 8 100 LEAF_NODE 9 100 LEAF_NODE 8 - FIELD 8 dataLen LEAF_NODE 9 dataLen REL_OPERATOR 8 > LEAF_NODE 9 > FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SIMPLE_DECL 8 int stdin ; VAR_DECL 9 int stdin TYPE 10 int TYPE_NAME 11 int LEAF_NODE 12 int NAME 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 12 fgets LEAF_NODE 13 fgets LEAF_NODE 12 ( ARGUMENT 12 data + dataLen FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 + FIELD 13 dataLen LEAF_NODE 14 dataLen LEAF_NODE 12 , ARGUMENT 12 ( int ) ( 100 - dataLen ) LEAF_NODE 13 ( TYPE_NAME 13 int LEAF_NODE 14 int LEAF_NODE 13 ) LEAF_NODE 13 ( FIELD 13 100 LEAF_NODE 14 100 LEAF_NODE 13 - FIELD 13 dataLen LEAF_NODE 14 dataLen LEAF_NODE 13 ) LEAF_NODE 12 , ARGUMENT 12 stdin FIELD 13 stdin LEAF_NODE 14 stdin LEAF_NODE 12 ) EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 dataLen = strlen ( data ) ; EXPR 12 dataLen = strlen ( data ) ASSIGN 13 dataLen = strlen ( data ) LVAL 14 dataLen FIELD 15 dataLen LEAF_NODE 16 dataLen ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 strlen ( data ) FUNCTION_CALL 15 strlen ( data ) CALLEE 16 strlen LEAF_NODE 17 strlen LEAF_NODE 16 ( ARGUMENT 16 data FIELD 17 data LEAF_NODE 18 data LEAF_NODE 16 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 14 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 15 dataLen > 0 FIELD 16 dataLen LEAF_NODE 17 dataLen REL_OPERATOR 16 > LEAF_NODE 17 > FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 && EXPR 15 data [ dataLen - 1 ] == '\\n' FIELD 16 data [ dataLen - 1 ] LEAF_NODE 17 data LEAF_NODE 17 [ EXPR 17 dataLen - 1 FIELD 18 dataLen LEAF_NODE 19 dataLen LEAF_NODE 18 - FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 17 ] EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 '\\n' LEAF_NODE 17 '\\n' LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 data [ dataLen - 1 ] = '\\0' ; EXPR 15 data [ dataLen - 1 ] = '\\0' ASSIGN 16 data [ dataLen - 1 ] = '\\0' LVAL 17 data [ dataLen - 1 ] FIELD 18 data [ dataLen - 1 ] LEAF_NODE 19 data LEAF_NODE 19 [ EXPR 19 dataLen - 1 FIELD 20 dataLen LEAF_NODE 21 dataLen LEAF_NODE 20 - FIELD 20 1 LEAF_NODE 21 1 LEAF_NODE 19 ] ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 '\\0' FIELD 18 '\\0' LEAF_NODE 19 '\\0' LEAF_NODE 15 ; LEAF_NODE 13 } LEAF_NODE 10 } SELECTION 8 KEYWORD 9 else LEAF_NODE 10 else STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 printLine ( \"fgets() failed\" ) ; EXPR 12 printLine ( \"fgets() failed\" ) FUNCTION_CALL 13 printLine ( \"fgets() failed\" ) CALLEE 14 printLine LEAF_NODE 15 printLine LEAF_NODE 14 ( ARGUMENT 14 \"fgets() failed\" FIELD 15 \"fgets() failed\" LEAF_NODE 16 \"fgets() failed\" LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 data [ dataLen ] = '\\0' ; EXPR 12 data [ dataLen ] = '\\0' ASSIGN 13 data [ dataLen ] = '\\0' LVAL 14 data [ dataLen ] FIELD 15 data [ dataLen ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 16 ] ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 '\\0' FIELD 15 '\\0' LEAF_NODE 16 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 7 } LEAF_NODE 4 } EXPR_STATEMENT 4 * dataPtr1 = data ; EXPR 5 * dataPtr1 = data ASSIGN 6 * dataPtr1 = data LVAL 7 * dataPtr1 UNARY_EXPR 8 * dataPtr1 UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr1 LEAF_NODE 10 dataPtr1 ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = * dataPtr2 ; VAR_DECL 5 char * data ; data = * dataPtr2 TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = * dataPtr2 ASSIGN 7 data = * dataPtr2 LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 * dataPtr2 UNARY_EXPR 9 * dataPtr2 UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 dataPtr2 LEAF_NODE 11 dataPtr2 LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 size_t i ; VAR_DECL 6 size_t i TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 i LEAF_NODE 8 i LEAF_NODE 6 ; ITERATION 5 KEYWORD 6 for LEAF_NODE 7 for LEAF_NODE 6 ( FOR_INIT 6 i = 0 ; EXPR 7 i = 0 ASSIGN 8 i = 0 LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; CONDITION 6 i < strlen ( data ) EXPR 7 i < strlen ( data ) FIELD 8 i LEAF_NODE 9 i REL_OPERATOR 8 < LEAF_NODE 9 < FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 6 ; FOR_EXPR 6 i ++ EXPR 7 i ++ FIELD 8 i ++ LEAF_NODE 9 i LEAF_NODE 9 ++ LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 data [ i ] == SEARCH_CHAR EXPR 10 data [ i ] == SEARCH_CHAR FIELD 11 data [ i ] LEAF_NODE 12 data LEAF_NODE 12 [ EXPR 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 12 ] EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 SEARCH_CHAR LEAF_NODE 12 SEARCH_CHAR LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 printLine ( \"We have a match!\" ) ; EXPR 12 printLine ( \"We have a match!\" ) FUNCTION_CALL 13 printLine ( \"We have a match!\" ) CALLEE 14 printLine LEAF_NODE 15 printLine LEAF_NODE 14 ( ARGUMENT 14 \"We have a match!\" FIELD 15 \"We have a match!\" LEAF_NODE 16 \"We have a match!\" LEAF_NODE 14 ) LEAF_NODE 12 ; JUMP_STATEMENT 11 break DESTINATION ; KEYWORD 12 break LEAF_NODE 13 break LEAF_NODE 12 DESTINATION LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 7 } EXPR_STATEMENT 5 free ( data ) ; EXPR 6 free ( data ) FUNCTION_CALL 7 free ( data ) CALLEE 8 free LEAF_NODE 9 free LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_32_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_32_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_32_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_32_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_32_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_32_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_32_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_32_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_32_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_32_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_32_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_32_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 76, "project": "cwe399_ast_vul_function_test_adv_14", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct _CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType BASE_CLASSES { size_t structFirst ; } CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType ; VAR_DECL 2 struct _CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType BASE_CLASSES { size_t structFirst ; } CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType TYPE 3 struct _CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType BASE_CLASSES { size_t structFirst ; } CLASS_DEF 4 struct _CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType BASE_CLASSES { size_t structFirst ; } LEAF_NODE 5 struct CLASS_NAME 5 _CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType LEAF_NODE 6 _CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 size_t structFirst ; SIMPLE_DECL 6 size_t structFirst ; VAR_DECL 7 size_t structFirst TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 structFirst LEAF_NODE 9 structFirst LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67b_functionSink PARAMETER_LIST 2 ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType myStruct TYPE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType TYPE_NAME 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType LEAF_NODE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = myStruct . structFirst ; VAR_DECL 4 size_t data ; data = myStruct . structFirst TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67b_functionSink PARAMETER_LIST 2 ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType myStruct TYPE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType TYPE_NAME 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType LEAF_NODE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = myStruct . structFirst ; VAR_DECL 4 size_t data ; data = myStruct . structFirst TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67b_functionB2GSink PARAMETER_LIST 2 ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType myStruct TYPE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType TYPE_NAME 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType LEAF_NODE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = myStruct . structFirst ; VAR_DECL 4 size_t data ; data = myStruct . structFirst TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 77, "project": "cwe399_ast_vul_function_test_adv_85", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct _CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType BASE_CLASSES { size_t structFirst ; } CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType ; VAR_DECL 2 struct _CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType BASE_CLASSES { size_t structFirst ; } CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType TYPE 3 struct _CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType BASE_CLASSES { size_t structFirst ; } CLASS_DEF 4 struct _CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType BASE_CLASSES { size_t structFirst ; } LEAF_NODE 5 struct CLASS_NAME 5 _CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType LEAF_NODE 6 _CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 size_t structFirst ; SIMPLE_DECL 6 size_t structFirst ; VAR_DECL 7 size_t structFirst TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 structFirst LEAF_NODE 9 structFirst LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67b_functionSink PARAMETER_LIST 2 ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType myStruct TYPE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType TYPE_NAME 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType LEAF_NODE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = myStruct . structFirst ; VAR_DECL 4 size_t data ; data = myStruct . structFirst TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67b_functionSink PARAMETER_LIST 2 ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType myStruct TYPE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType TYPE_NAME 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType LEAF_NODE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = myStruct . structFirst ; VAR_DECL 4 size_t data ; data = myStruct . structFirst TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67b_functionB2GSink PARAMETER_LIST 2 ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType myStruct TYPE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType TYPE_NAME 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType LEAF_NODE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = myStruct . structFirst ; VAR_DECL 4 size_t data ; data = myStruct . structFirst TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 78, "project": "cwe399_ast_vul_function_test_adv_83", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54e_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54e_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54e_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54e_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54e_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_54e_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 79, "project": "cwe399_ast_vul_function_test_adv_108", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_66b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_66b_functionSink PARAMETER_LIST 2 ( size_t [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t [ ] dataArray TYPE 4 size_t [ ] TYPE_NAME 5 size_t LEAF_NODE 6 size_t TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = dataArray [ 2 ] ; VAR_DECL 4 size_t data ; data = dataArray [ 2 ] TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = dataArray [ 2 ] ASSIGN 6 data = dataArray [ 2 ] LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataArray [ 2 ] FIELD 8 dataArray [ 2 ] LEAF_NODE 9 dataArray LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_66b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_66b_functionSink PARAMETER_LIST 2 ( size_t [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t [ ] dataArray TYPE 4 size_t [ ] TYPE_NAME 5 size_t LEAF_NODE 6 size_t TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = dataArray [ 2 ] ; VAR_DECL 4 size_t data ; data = dataArray [ 2 ] TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = dataArray [ 2 ] ASSIGN 6 data = dataArray [ 2 ] LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataArray [ 2 ] FIELD 8 dataArray [ 2 ] LEAF_NODE 9 dataArray LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_66b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_66b_functionB2GSink PARAMETER_LIST 2 ( size_t [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t [ ] dataArray TYPE 4 size_t [ ] TYPE_NAME 5 size_t LEAF_NODE 6 size_t TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = dataArray [ 2 ] ; VAR_DECL 4 size_t data ; data = dataArray [ 2 ] TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = dataArray [ 2 ] ASSIGN 6 data = dataArray [ 2 ] LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataArray [ 2 ] FIELD 8 dataArray [ 2 ] LEAF_NODE 9 dataArray LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 80, "project": "cwe399_ast_vul_function_test_adv_91", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 81, "project": "cwe399_ast_vul_function_test_adv_92", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54b_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 82, "project": "cwe399_ast_vul_function_test_adv_57", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 globalReturnsFalse LEAF_NODE 3 globalReturnsFalse PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 globalReturnsTrue LEAF_NODE 3 globalReturnsTrue PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_11_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_11_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 wcscpy LEAF_NODE 7 wcscpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsTrue ( ) EXPR 5 globalReturnsTrue ( ) FUNCTION_CALL 6 globalReturnsTrue ( ) CALLEE 7 globalReturnsTrue LEAF_NODE 8 globalReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 for LEAF_NODE 6 ( LEAF_NODE 6 ; LEAF_NODE 6 * LEAF_NODE 6 data LEAF_NODE 6 != LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 ++ LEAF_NODE 6 ) LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 * data == SEARCH_CHAR EXPR 9 * data == SEARCH_CHAR UNARY_EXPR 10 * data UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 data LEAF_NODE 12 data EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 wcscpy LEAF_NODE 7 wcscpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsFalse ( ) EXPR 5 globalReturnsFalse ( ) FUNCTION_CALL 6 globalReturnsFalse ( ) CALLEE 7 globalReturnsFalse LEAF_NODE 8 globalReturnsFalse LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 wcscpy LEAF_NODE 7 wcscpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsTrue ( ) EXPR 5 globalReturnsTrue ( ) FUNCTION_CALL 6 globalReturnsTrue ( ) CALLEE 7 globalReturnsTrue LEAF_NODE 8 globalReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_11_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_11_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_11_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_11_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_11_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_11_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_11_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_11_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_11_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_11_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_11_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_11_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 83, "project": "cwe399_ast_vul_function_test_adv_180", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_63b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_63b_functionSink PARAMETER_LIST 2 ( char * * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * * dataPtr TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = * dataPtr ; VAR_DECL 4 char * data ; data = * dataPtr TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; CONDITION 4 * data != '\\0' EXPR 5 * data != '\\0' UNARY_EXPR 6 * data UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 data LEAF_NODE 8 data EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 4 ; FOR_EXPR 4 data ++ EXPR 5 data ++ FIELD 6 data ++ LEAF_NODE 7 data LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * data == SEARCH_CHAR EXPR 8 * data == SEARCH_CHAR UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 SEARCH_CHAR LEAF_NODE 10 SEARCH_CHAR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 printLine ( \"We have a match!\" ) ; EXPR 10 printLine ( \"We have a match!\" ) FUNCTION_CALL 11 printLine ( \"We have a match!\" ) CALLEE 12 printLine LEAF_NODE 13 printLine LEAF_NODE 12 ( ARGUMENT 12 \"We have a match!\" FIELD 13 \"We have a match!\" LEAF_NODE 14 \"We have a match!\" LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_63b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_63b_functionB2GSink PARAMETER_LIST 2 ( char * * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * * dataPtr TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = * dataPtr ; VAR_DECL 4 char * data ; data = * dataPtr TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < strlen ( data ) EXPR 6 i < strlen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 strlen ( data ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 84, "project": "cwe399_ast_vul_function_test_adv_49", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 5 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 6 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ CHAR_ARRAY_SIZE ] LEAF_NODE 8 [ FIELD 8 CHAR_ARRAY_SIZE LEAF_NODE 9 CHAR_ARRAY_SIZE LEAF_NODE 8 ] NAME 6 inputBuffer LEAF_NODE 7 inputBuffer LEAF_NODE 6 ; INIT 6 inputBuffer = \"\" ASSIGN 7 inputBuffer = \"\" LVAL 8 inputBuffer NAME 9 inputBuffer LEAF_NODE 10 inputBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; SIMPLE_DECL 4 int stdin ; VAR_DECL 5 int stdin TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 stdin LEAF_NODE 7 stdin LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 6 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 7 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 8 fgets LEAF_NODE 9 fgets LEAF_NODE 8 ( ARGUMENT 8 inputBuffer FIELD 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 8 , ARGUMENT 8 CHAR_ARRAY_SIZE FIELD 9 CHAR_ARRAY_SIZE LEAF_NODE 10 CHAR_ARRAY_SIZE LEAF_NODE 8 , ARGUMENT 8 stdin FIELD 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ) EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 8 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 9 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 11 strtoul ( inputBuffer , NULL , 0 ) CALLEE 12 strtoul LEAF_NODE 13 strtoul LEAF_NODE 12 ( ARGUMENT 12 inputBuffer FIELD 13 inputBuffer LEAF_NODE 14 inputBuffer LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"fgets() failed.\" ) ; EXPR 8 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 9 printLine ( \"fgets() failed.\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"fgets() failed.\" FIELD 11 \"fgets() failed.\" LEAF_NODE 12 \"fgets() failed.\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 20 ; EXPR 4 data = 20 ASSIGN 5 data = 20 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 20 FIELD 7 20 LEAF_NODE 8 20 LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 5 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 6 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ CHAR_ARRAY_SIZE ] LEAF_NODE 8 [ FIELD 8 CHAR_ARRAY_SIZE LEAF_NODE 9 CHAR_ARRAY_SIZE LEAF_NODE 8 ] NAME 6 inputBuffer LEAF_NODE 7 inputBuffer LEAF_NODE 6 ; INIT 6 inputBuffer = \"\" ASSIGN 7 inputBuffer = \"\" LVAL 8 inputBuffer NAME 9 inputBuffer LEAF_NODE 10 inputBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; SIMPLE_DECL 4 int stdin ; VAR_DECL 5 int stdin TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 stdin LEAF_NODE 7 stdin LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 6 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 7 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 8 fgets LEAF_NODE 9 fgets LEAF_NODE 8 ( ARGUMENT 8 inputBuffer FIELD 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 8 , ARGUMENT 8 CHAR_ARRAY_SIZE FIELD 9 CHAR_ARRAY_SIZE LEAF_NODE 10 CHAR_ARRAY_SIZE LEAF_NODE 8 , ARGUMENT 8 stdin FIELD 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ) EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 8 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 9 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 11 strtoul ( inputBuffer , NULL , 0 ) CALLEE 12 strtoul LEAF_NODE 13 strtoul LEAF_NODE 12 ( ARGUMENT 12 inputBuffer FIELD 13 inputBuffer LEAF_NODE 14 inputBuffer LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"fgets() failed.\" ) ; EXPR 8 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 9 printLine ( \"fgets() failed.\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"fgets() failed.\" FIELD 11 \"fgets() failed.\" LEAF_NODE 12 \"fgets() failed.\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 85, "project": "cwe399_ast_vul_function_test_adv_78", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType BASE_CLASSES { wchar_t * structFirst ; } CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType ; VAR_DECL 2 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType BASE_CLASSES { wchar_t * structFirst ; } CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType TYPE 3 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType BASE_CLASSES { wchar_t * structFirst ; } CLASS_DEF 4 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType BASE_CLASSES { wchar_t * structFirst ; } LEAF_NODE 5 struct CLASS_NAME 5 _CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType LEAF_NODE 6 _CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 wchar_t * structFirst ; SIMPLE_DECL 6 wchar_t * structFirst ; VAR_DECL 7 wchar_t * structFirst TYPE 8 wchar_t * TYPE_NAME 9 wchar_t LEAF_NODE 10 wchar_t POINTER 9 * LEAF_NODE 10 * NAME 8 structFirst LEAF_NODE 9 structFirst LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67b_functionSink PARAMETER_LIST 2 ( CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType myStruct TYPE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType TYPE_NAME 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType LEAF_NODE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = myStruct . structFirst ; VAR_DECL 4 wchar_t * data ; data = myStruct . structFirst TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67b_functionB2GSink PARAMETER_LIST 2 ( CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType myStruct TYPE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType TYPE_NAME 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType LEAF_NODE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = myStruct . structFirst ; VAR_DECL 4 wchar_t * data ; data = myStruct . structFirst TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 86, "project": "cwe399_ast_vul_function_test_adv_86", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_64b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_64b_functionSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr ; VAR_DECL 4 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr TYPE 5 size_t * TYPE_NAME 6 size_t LEAF_NODE 7 size_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( size_t * ) dataVoidPtr ASSIGN 6 dataPtr = ( size_t * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( size_t * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 size_t LEAF_NODE 9 size_t LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 size_t data ; data = ( * dataPtr ) ; VAR_DECL 4 size_t data ; data = ( * dataPtr ) TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_64b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_64b_functionSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr ; VAR_DECL 4 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr TYPE 5 size_t * TYPE_NAME 6 size_t LEAF_NODE 7 size_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( size_t * ) dataVoidPtr ASSIGN 6 dataPtr = ( size_t * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( size_t * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 size_t LEAF_NODE 9 size_t LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 size_t data ; data = ( * dataPtr ) ; VAR_DECL 4 size_t data ; data = ( * dataPtr ) TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_64b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_64b_functionB2GSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr ; VAR_DECL 4 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr TYPE 5 size_t * TYPE_NAME 6 size_t LEAF_NODE 7 size_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( size_t * ) dataVoidPtr ASSIGN 6 dataPtr = ( size_t * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( size_t * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 size_t LEAF_NODE 9 size_t LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 size_t data ; data = ( * dataPtr ) ; VAR_DECL 4 size_t data ; data = ( * dataPtr ) TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 87, "project": "cwe399_ast_vul_function_test_adv_99", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE ; VAR_DECL 2 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE TYPE 3 struct FILE BASE_CLASSES { CLASS_CONTENT } CLASS_DEF 4 struct FILE BASE_CLASSES { CLASS_CONTENT } LEAF_NODE 5 struct CLASS_NAME 5 FILE LEAF_NODE 6 FILE LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { LEAF_NODE 5 CLASS_CONTENT LEAF_NODE 5 } NAME 3 FILE LEAF_NODE 4 FILE LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63b_functionSink PARAMETER_LIST 2 ( wchar_t * * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * * dataPtr TYPE 4 wchar_t * * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgetws LEAF_NODE 15 fgetws LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgetws() failed\" ) ; EXPR 14 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 15 printLine ( \"fgetws() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgetws() failed\" FIELD 17 \"fgetws() failed\" LEAF_NODE 18 \"fgetws() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; LEAF_NODE 13 data LEAF_NODE 13 [ LEAF_NODE 13 dataLen LEAF_NODE 13 ] LEAF_NODE 13 = LEAF_NODE 13 L EXPR_STATEMENT 13 '\\0' ; EXPR 14 '\\0' FIELD 15 '\\0' LEAF_NODE 16 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63b_functionSink ( & data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63b_functionSink ( & data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63b_functionSink ( & data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63b_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63b_functionSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * * data TYPE 4 wchar_t * * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgetws LEAF_NODE 15 fgetws LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgetws() failed\" ) ; EXPR 14 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 15 printLine ( \"fgetws() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgetws() failed\" FIELD 17 \"fgetws() failed\" LEAF_NODE 18 \"fgetws() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; LEAF_NODE 13 data LEAF_NODE 13 [ LEAF_NODE 13 dataLen LEAF_NODE 13 ] LEAF_NODE 13 = LEAF_NODE 13 L EXPR_STATEMENT 13 '\\0' ; EXPR 14 '\\0' FIELD 15 '\\0' LEAF_NODE 16 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63b_functionB2GSink ( & data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63b_functionB2GSink ( & data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63b_functionB2GSink ( & data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63b_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_63_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 88, "project": "cwe399_ast_vul_function_test_adv_12", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 89, "project": "cwe399_ast_vul_function_test_adv_112", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 wchar_t * CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForBadSink ; VAR_DECL 2 wchar_t * CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForBadSink TYPE 3 wchar_t * TYPE_NAME 4 wchar_t LEAF_NODE 5 wchar_t POINTER 4 * LEAF_NODE 5 * NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForBadSink LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForBadSink LEAF_NODE 2 ; SIMPLE_DECL 1 wchar_t * CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForGoodSink ; VAR_DECL 2 wchar_t * CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForGoodSink TYPE 3 wchar_t * TYPE_NAME 4 wchar_t LEAF_NODE 5 wchar_t POINTER 4 * LEAF_NODE 5 * NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForGoodSink LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForGoodSink LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68b_functionSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForBadSink ; VAR_DECL 4 wchar_t * data ; data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForBadSink TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForBadSink ASSIGN 6 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForBadSink LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForBadSink FIELD 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForBadSink LEAF_NODE 9 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForBadSink LEAF_NODE 4 ; LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68b_functionB2GSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForGoodSink ; VAR_DECL 4 wchar_t * data ; data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForGoodSink TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForGoodSink ASSIGN 6 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForGoodSink LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForGoodSink FIELD 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForGoodSink LEAF_NODE 9 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_68_functionDataForGoodSink LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 90, "project": "cwe399_ast_vul_function_test_adv_105", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE ; VAR_DECL 2 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE TYPE 3 struct FILE BASE_CLASSES { CLASS_CONTENT } CLASS_DEF 4 struct FILE BASE_CLASSES { CLASS_CONTENT } LEAF_NODE 5 struct CLASS_NAME 5 FILE LEAF_NODE 6 FILE LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { LEAF_NODE 5 CLASS_CONTENT LEAF_NODE 5 } NAME 3 FILE LEAF_NODE 4 FILE LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63b_functionSink PARAMETER_LIST 2 ( char * * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * * dataPtr TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63b_functionSink ( & data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63b_functionSink ( & data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63b_functionSink ( & data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63b_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63b_functionSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63b_functionB2GSink PARAMETER_LIST 2 ( char * * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * * data TYPE 4 char * * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63b_functionB2GSink ( & data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63b_functionB2GSink ( & data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63b_functionB2GSink ( & data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63b_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 91, "project": "cwe399_ast_vul_function_test_adv_116", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct _CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType BASE_CLASSES { size_t structFirst ; } CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType ; VAR_DECL 2 struct _CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType BASE_CLASSES { size_t structFirst ; } CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType TYPE 3 struct _CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType BASE_CLASSES { size_t structFirst ; } CLASS_DEF 4 struct _CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType BASE_CLASSES { size_t structFirst ; } LEAF_NODE 5 struct CLASS_NAME 5 _CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType LEAF_NODE 6 _CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 size_t structFirst ; SIMPLE_DECL 6 size_t structFirst ; VAR_DECL 7 size_t structFirst TYPE 8 size_t TYPE_NAME 9 size_t LEAF_NODE 10 size_t NAME 8 structFirst LEAF_NODE 9 structFirst LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67b_functionSink PARAMETER_LIST 2 ( CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType myStruct TYPE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType TYPE_NAME 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType LEAF_NODE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = myStruct . structFirst ; VAR_DECL 4 size_t data ; data = myStruct . structFirst TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67b_functionSink PARAMETER_LIST 2 ( CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType myStruct TYPE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType TYPE_NAME 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType LEAF_NODE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = myStruct . structFirst ; VAR_DECL 4 size_t data ; data = myStruct . structFirst TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67b_functionB2GSink PARAMETER_LIST 2 ( CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType myStruct TYPE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType TYPE_NAME 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType LEAF_NODE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = myStruct . structFirst ; VAR_DECL 4 size_t data ; data = myStruct . structFirst TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 92, "project": "cwe399_ast_vul_function_test_adv_10", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE ; VAR_DECL 2 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE TYPE 3 struct FILE BASE_CLASSES { CLASS_CONTENT } CLASS_DEF 4 struct FILE BASE_CLASSES { CLASS_CONTENT } LEAF_NODE 5 struct CLASS_NAME 5 FILE LEAF_NODE 6 FILE LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { LEAF_NODE 5 CLASS_CONTENT LEAF_NODE 5 } NAME 3 FILE LEAF_NODE 4 FILE LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionSink LEAF_NODE 3 functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; CONDITION 4 * data != '\\0' EXPR 5 * data != '\\0' UNARY_EXPR 6 * data UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 data LEAF_NODE 8 data EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 4 ; FOR_EXPR 4 data ++ EXPR 5 data ++ FIELD 6 data ++ LEAF_NODE 7 data LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * data == SEARCH_CHAR EXPR 8 * data == SEARCH_CHAR UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 SEARCH_CHAR LEAF_NODE 10 SEARCH_CHAR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 printLine ( \"We have a match!\" ) ; EXPR 10 printLine ( \"We have a match!\" ) FUNCTION_CALL 11 printLine ( \"We have a match!\" ) CALLEE 12 printLine LEAF_NODE 13 printLine LEAF_NODE 12 ( ARGUMENT 12 \"We have a match!\" FIELD 13 \"We have a match!\" LEAF_NODE 14 \"We have a match!\" LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_44_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_44_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 char LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 functionSink ; EXPR 4 functionSink FIELD 5 functionSink LEAF_NODE 6 functionSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2GSink LEAF_NODE 3 functionB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < strlen ( data ) EXPR 6 i < strlen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 strlen ( data ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 char LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 functionB2GSink ; EXPR 4 functionB2GSink FIELD 5 functionB2GSink LEAF_NODE 6 functionB2GSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_44_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_44_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_44_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_44_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_44_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_44_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_44_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_44_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_44_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_44_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_44_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_44_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 93, "project": "cwe399_ast_vul_function_test_adv_194", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType BASE_CLASSES { char * structFirst ; } CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType ; VAR_DECL 2 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType BASE_CLASSES { char * structFirst ; } CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType TYPE 3 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType BASE_CLASSES { char * structFirst ; } CLASS_DEF 4 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType BASE_CLASSES { char * structFirst ; } LEAF_NODE 5 struct CLASS_NAME 5 _CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType LEAF_NODE 6 _CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 char * structFirst ; SIMPLE_DECL 6 char * structFirst ; VAR_DECL 7 char * structFirst TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 structFirst LEAF_NODE 9 structFirst LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67b_functionSink PARAMETER_LIST 2 ( CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType myStruct TYPE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType TYPE_NAME 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType LEAF_NODE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = myStruct . structFirst ; VAR_DECL 4 char * data ; data = myStruct . structFirst TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; CONDITION 4 * data != '\\0' EXPR 5 * data != '\\0' UNARY_EXPR 6 * data UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 data LEAF_NODE 8 data EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 4 ; FOR_EXPR 4 data ++ EXPR 5 data ++ FIELD 6 data ++ LEAF_NODE 7 data LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * data == SEARCH_CHAR EXPR 8 * data == SEARCH_CHAR UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 SEARCH_CHAR LEAF_NODE 10 SEARCH_CHAR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 printLine ( \"We have a match!\" ) ; EXPR 10 printLine ( \"We have a match!\" ) FUNCTION_CALL 11 printLine ( \"We have a match!\" ) CALLEE 12 printLine LEAF_NODE 13 printLine LEAF_NODE 12 ( ARGUMENT 12 \"We have a match!\" FIELD 13 \"We have a match!\" LEAF_NODE 14 \"We have a match!\" LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67b_functionB2GSink PARAMETER_LIST 2 ( CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType myStruct TYPE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType TYPE_NAME 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType LEAF_NODE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; data = myStruct . structFirst ; VAR_DECL 4 char * data ; data = myStruct . structFirst TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = myStruct . structFirst ASSIGN 6 data = myStruct . structFirst LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 myStruct . structFirst FIELD 8 myStruct . structFirst LEAF_NODE 9 myStruct LEAF_NODE 9 . LEAF_NODE 9 structFirst LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < strlen ( data ) EXPR 6 i < strlen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 strlen ( data ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 94, "project": "cwe399_ast_vul_function_test_adv_54", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_51b_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 95, "project": "cwe399_ast_vul_function_test_adv_26", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 staticReturnsTrue LEAF_NODE 3 staticReturnsTrue PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 staticReturnsFalse LEAF_NODE 3 staticReturnsFalse PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int stdin ; VAR_DECL 7 int stdin TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 stdin LEAF_NODE 9 stdin LEAF_NODE 7 ; EXPR_STATEMENT 6 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 7 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 8 fscanf ( stdin , \"%ud\" , & data ) CALLEE 9 fscanf LEAF_NODE 10 fscanf LEAF_NODE 9 ( ARGUMENT 9 stdin FIELD 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 , ARGUMENT 9 \"%ud\" FIELD 10 \"%ud\" LEAF_NODE 11 \"%ud\" LEAF_NODE 9 , ARGUMENT 9 & data UNARY_EXPR 10 & data UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 data LEAF_NODE 12 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int stdin ; VAR_DECL 7 int stdin TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 stdin LEAF_NODE 9 stdin LEAF_NODE 7 ; EXPR_STATEMENT 6 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 7 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 8 fscanf ( stdin , \"%ud\" , & data ) CALLEE 9 fscanf LEAF_NODE 10 fscanf LEAF_NODE 9 ( ARGUMENT 9 stdin FIELD 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 , ARGUMENT 9 \"%ud\" FIELD 10 \"%ud\" LEAF_NODE 11 \"%ud\" LEAF_NODE 9 , ARGUMENT 9 & data UNARY_EXPR 10 & data UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 data LEAF_NODE 12 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsFalse ( ) EXPR 5 staticReturnsFalse ( ) FUNCTION_CALL 6 staticReturnsFalse ( ) CALLEE 7 staticReturnsFalse LEAF_NODE 8 staticReturnsFalse LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) && data < 100 EXPR 9 data > strlen ( HELLO_STRING ) && data < 100 AND 10 data > strlen ( HELLO_STRING ) && data < 100 EXPR 11 data > strlen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 strlen ( HELLO_STRING ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int stdin ; VAR_DECL 7 int stdin TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 stdin LEAF_NODE 9 stdin LEAF_NODE 7 ; EXPR_STATEMENT 6 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 7 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 8 fscanf ( stdin , \"%ud\" , & data ) CALLEE 9 fscanf LEAF_NODE 10 fscanf LEAF_NODE 9 ( ARGUMENT 9 stdin FIELD 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 , ARGUMENT 9 \"%ud\" FIELD 10 \"%ud\" LEAF_NODE 11 \"%ud\" LEAF_NODE 9 , ARGUMENT 9 & data UNARY_EXPR 10 & data UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 data LEAF_NODE 12 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) && data < 100 EXPR 9 data > strlen ( HELLO_STRING ) && data < 100 AND 10 data > strlen ( HELLO_STRING ) && data < 100 EXPR 11 data > strlen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 strlen ( HELLO_STRING ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function1 LEAF_NODE 3 function1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsFalse ( ) EXPR 5 staticReturnsFalse ( ) FUNCTION_CALL 6 staticReturnsFalse ( ) CALLEE 7 staticReturnsFalse LEAF_NODE 8 staticReturnsFalse LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function2 LEAF_NODE 3 function2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function1 ( ) ; EXPR 4 function1 ( ) FUNCTION_CALL 5 function1 ( ) CALLEE 6 function1 LEAF_NODE 7 function1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function2 ( ) ; EXPR 4 function2 ( ) FUNCTION_CALL 5 function2 ( ) CALLEE 6 function2 LEAF_NODE 7 function2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 96, "project": "cwe399_ast_vul_function_test_adv_189", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53b_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 97, "project": "cwe399_ast_vul_function_test_adv_43", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static char * LEAF_NODE 3 static TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 functionSource LEAF_NODE 3 functionSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } JUMP_STATEMENT 3 return data ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 data EXPR 5 data FIELD 6 data LEAF_NODE 7 data LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_42_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_42_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = functionSource ( data ) ; EXPR 4 data = functionSource ( data ) ASSIGN 5 data = functionSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 functionSource ( data ) FUNCTION_CALL 7 functionSource ( data ) CALLEE 8 functionSource LEAF_NODE 9 functionSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; CONDITION 4 * data != '\\0' EXPR 5 * data != '\\0' UNARY_EXPR 6 * data UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 data LEAF_NODE 8 data EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 4 ; FOR_EXPR 4 data ++ EXPR 5 data ++ FIELD 6 data ++ LEAF_NODE 7 data LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * data == SEARCH_CHAR EXPR 8 * data == SEARCH_CHAR UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 SEARCH_CHAR LEAF_NODE 10 SEARCH_CHAR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 printLine ( \"We have a match!\" ) ; EXPR 10 printLine ( \"We have a match!\" ) FUNCTION_CALL 11 printLine ( \"We have a match!\" ) CALLEE 12 printLine LEAF_NODE 13 printLine LEAF_NODE 12 ( ARGUMENT 12 \"We have a match!\" FIELD 13 \"We have a match!\" LEAF_NODE 14 \"We have a match!\" LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static char * LEAF_NODE 3 static TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 functionB2GSource LEAF_NODE 3 functionB2GSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } JUMP_STATEMENT 3 return data ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 data EXPR 5 data FIELD 6 data LEAF_NODE 7 data LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = functionB2GSource ( data ) ; EXPR 4 data = functionB2GSource ( data ) ASSIGN 5 data = functionB2GSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 functionB2GSource ( data ) FUNCTION_CALL 7 functionB2GSource ( data ) CALLEE 8 functionB2GSource LEAF_NODE 9 functionB2GSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < strlen ( data ) EXPR 6 i < strlen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 strlen ( data ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_42_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_42_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_42_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_42_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_42_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_42_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_42_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_42_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_42_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_42_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_42_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_42_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 98, "project": "cwe399_ast_vul_function_test_adv_148", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53d_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53d_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53c_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53c_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53d_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53d_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53d_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53d_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53d_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53d_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53d_functionB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53c_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53c_functionB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53d_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53d_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53d_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53d_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53d_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 99, "project": "cwe399_ast_vul_function_test_adv_46", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54b_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54b_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54b_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54b_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54b_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54b_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54b_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54b_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54b_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54b_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 100, "project": "cwe399_ast_vul_function_test_adv_144", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54c_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54c_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 101, "project": "cwe399_ast_vul_function_test_adv_62", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_64b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_64b_functionSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * dataPtr ; dataPtr = ( wchar_t * * ) dataVoidPtr ; VAR_DECL 4 wchar_t * dataPtr ; dataPtr = ( wchar_t * * ) dataVoidPtr TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( wchar_t * * ) dataVoidPtr ASSIGN 6 dataPtr = ( wchar_t * * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * data ; data = ( * dataPtr ) ; VAR_DECL 4 wchar_t * data ; data = ( * dataPtr ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_64b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_64b_functionB2GSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * dataPtr ; dataPtr = ( wchar_t * * ) dataVoidPtr ; VAR_DECL 4 wchar_t * dataPtr ; dataPtr = ( wchar_t * * ) dataVoidPtr TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( wchar_t * * ) dataVoidPtr ASSIGN 6 dataPtr = ( wchar_t * * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( wchar_t * * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 wchar_t LEAF_NODE 9 wchar_t LEAF_NODE 8 * LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 wchar_t * data ; data = ( * dataPtr ) ; VAR_DECL 4 wchar_t * data ; data = ( * dataPtr ) TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 102, "project": "cwe399_ast_vul_function_test_adv_90", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_13_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_13_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE == 5 EXPR 5 GLOBAL_CONST_FIVE == 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 for LEAF_NODE 6 ( LEAF_NODE 6 ; LEAF_NODE 6 * LEAF_NODE 6 data LEAF_NODE 6 != LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 ++ LEAF_NODE 6 ) LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 * data == SEARCH_CHAR EXPR 9 * data == SEARCH_CHAR UNARY_EXPR 10 * data UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 data LEAF_NODE 12 data EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE != 5 EXPR 5 GLOBAL_CONST_FIVE != 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE == 5 EXPR 5 GLOBAL_CONST_FIVE == 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_13_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_13_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_13_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_13_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_13_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_13_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_13_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_13_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_13_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_13_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_13_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_13_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 103, "project": "cwe399_ast_vul_function_test_adv_146", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType BASE_CLASSES { char * structFirst ; } CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType ; VAR_DECL 2 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType BASE_CLASSES { char * structFirst ; } CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType TYPE 3 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType BASE_CLASSES { char * structFirst ; } CLASS_DEF 4 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType BASE_CLASSES { char * structFirst ; } LEAF_NODE 5 struct CLASS_NAME 5 _CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType LEAF_NODE 6 _CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 char * structFirst ; SIMPLE_DECL 6 char * structFirst ; VAR_DECL 7 char * structFirst TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 structFirst LEAF_NODE 9 structFirst LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67b_functionSink PARAMETER_LIST 2 ( CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType myStruct TYPE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType TYPE_NAME 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType LEAF_NODE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType myStruct ; VAR_DECL 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType myStruct TYPE 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType TYPE_NAME 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType NAME 5 myStruct LEAF_NODE 6 myStruct LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 myStruct . structFirst = data ; EXPR 4 myStruct . structFirst = data ASSIGN 5 myStruct . structFirst = data LVAL 6 myStruct . structFirst FIELD 7 myStruct . structFirst LEAF_NODE 8 myStruct LEAF_NODE 8 . LEAF_NODE 8 structFirst ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67b_functionSink ( myStruct ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67b_functionSink ( myStruct ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67b_functionSink ( myStruct ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67b_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67b_functionSink LEAF_NODE 6 ( ARGUMENT 6 myStruct FIELD 7 myStruct LEAF_NODE 8 myStruct LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67b_functionB2GSink PARAMETER_LIST 2 ( CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType myStruct TYPE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType TYPE_NAME 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType LEAF_NODE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType myStruct ; VAR_DECL 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType myStruct TYPE 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType TYPE_NAME 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType NAME 5 myStruct LEAF_NODE 6 myStruct LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 myStruct . structFirst = data ; EXPR 4 myStruct . structFirst = data ASSIGN 5 myStruct . structFirst = data LVAL 6 myStruct . structFirst FIELD 7 myStruct . structFirst LEAF_NODE 8 myStruct LEAF_NODE 8 . LEAF_NODE 8 structFirst ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67b_functionB2GSink ( myStruct ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67b_functionB2GSink ( myStruct ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67b_functionB2GSink ( myStruct ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67b_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 myStruct FIELD 7 myStruct LEAF_NODE 8 myStruct LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 104, "project": "cwe399_ast_vul_function_test_adv_126", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53c_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53c_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53b_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53c_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53c_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53c_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53c_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53c_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53c_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53c_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53c_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53c_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53c_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53c_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 105, "project": "cwe399_ast_vul_function_test_adv_101", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_61b_functionSource LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_61b_functionSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } JUMP_STATEMENT 3 return data ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 data EXPR 5 data FIELD 6 data LEAF_NODE 7 data LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_61b_functionB2GSource LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_61b_functionB2GSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } JUMP_STATEMENT 3 return data ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 data EXPR 5 data FIELD 6 data LEAF_NODE 7 data LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 106, "project": "cwe399_ast_vul_function_test_adv_35", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionGlobal ; VAR_DECL 2 int CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionGlobal TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionGlobal LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionGlobal LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionGlobal EXPR 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionGlobal FIELD 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionGlobal LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionGlobal LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) EXPR 9 data > wcslen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 wcslen ( HELLO_STRING ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } SIMPLE_DECL 1 int CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G1Global ; VAR_DECL 2 int CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G1Global TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G1Global LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G1Global LEAF_NODE 2 ; SIMPLE_DECL 1 int CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G2Global ; VAR_DECL 2 int CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G2Global TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G2Global LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G2Global LEAF_NODE 2 ; SIMPLE_DECL 1 int CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionGlobal ; VAR_DECL 2 int CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionGlobal TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionGlobal LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionGlobal LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G1Sink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G1Sink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G1Global EXPR 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G1Global FIELD 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G1Global LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G1Global LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 9 data > wcslen ( HELLO_STRING ) && data < 100 AND 10 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 11 data > wcslen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 wcslen ( HELLO_STRING ) CALLEE 13 wcslen LEAF_NODE 14 wcslen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G2Sink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G2Sink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G2Global EXPR 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G2Global FIELD 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G2Global LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionB2G2Global LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 9 data > wcslen ( HELLO_STRING ) && data < 100 AND 10 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 11 data > wcslen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 wcslen ( HELLO_STRING ) CALLEE 13 wcslen LEAF_NODE 14 wcslen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionGlobal EXPR 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionGlobal FIELD 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionGlobal LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_22_functionGlobal LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) EXPR 9 data > wcslen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 wcslen ( HELLO_STRING ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 107, "project": "cwe399_ast_vul_function_test_adv_123", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData ; VAR_DECL 2 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData TYPE 3 size_t TYPE_NAME 4 size_t LEAF_NODE 5 size_t NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData LEAF_NODE 2 ; SIMPLE_DECL 1 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData ; VAR_DECL 2 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData TYPE 3 size_t TYPE_NAME 4 size_t LEAF_NODE 5 size_t NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData LEAF_NODE 2 ; SIMPLE_DECL 1 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionB2GData ; VAR_DECL 2 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionB2GData TYPE 3 size_t TYPE_NAME 4 size_t LEAF_NODE 5 size_t NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionB2GData LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionB2GData LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68b_functionSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData ; VAR_DECL 4 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData ASSIGN 6 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData FIELD 8 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68b_functionSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData ; VAR_DECL 4 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData ASSIGN 6 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData FIELD 8 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68b_functionB2GSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionB2GData ; VAR_DECL 4 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionB2GData TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionB2GData ASSIGN 6 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionB2GData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionB2GData FIELD 8 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionB2GData LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_68_functionB2GData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 108, "project": "cwe399_ast_vul_function_test_adv_1", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionGlobal ; VAR_DECL 2 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionGlobal TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionGlobal LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionGlobal LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionGlobal EXPR 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionGlobal FIELD 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionGlobal LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionGlobal LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 for LEAF_NODE 6 ( LEAF_NODE 6 ; LEAF_NODE 6 * LEAF_NODE 6 data LEAF_NODE 6 != LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 ++ LEAF_NODE 6 ) LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 * data == SEARCH_CHAR EXPR 9 * data == SEARCH_CHAR UNARY_EXPR 10 * data UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 data LEAF_NODE 12 data EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } SIMPLE_DECL 1 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G1Global ; VAR_DECL 2 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G1Global TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G1Global LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G1Global LEAF_NODE 2 ; SIMPLE_DECL 1 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G2Global ; VAR_DECL 2 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G2Global TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G2Global LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G2Global LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G1Sink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G1Sink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G1Global EXPR 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G1Global FIELD 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G1Global LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G1Global LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G2Sink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G2Sink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G2Global EXPR 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G2Global FIELD 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G2Global LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_22_functionB2G2Global LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 109, "project": "cwe399_ast_vul_function_test_adv_96", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 globalReturnsFalse LEAF_NODE 3 globalReturnsFalse PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 globalReturnsTrue LEAF_NODE 3 globalReturnsTrue PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_11_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_11_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsTrue ( ) EXPR 5 globalReturnsTrue ( ) FUNCTION_CALL 6 globalReturnsTrue ( ) CALLEE 7 globalReturnsTrue LEAF_NODE 8 globalReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int stdin ; VAR_DECL 7 int stdin TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 stdin LEAF_NODE 9 stdin LEAF_NODE 7 ; EXPR_STATEMENT 6 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 7 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 8 fscanf ( stdin , \"%ud\" , & data ) CALLEE 9 fscanf LEAF_NODE 10 fscanf LEAF_NODE 9 ( ARGUMENT 9 stdin FIELD 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 , ARGUMENT 9 \"%ud\" FIELD 10 \"%ud\" LEAF_NODE 11 \"%ud\" LEAF_NODE 9 , ARGUMENT 9 & data UNARY_EXPR 10 & data UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 data LEAF_NODE 12 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsTrue ( ) EXPR 5 globalReturnsTrue ( ) FUNCTION_CALL 6 globalReturnsTrue ( ) CALLEE 7 globalReturnsTrue LEAF_NODE 8 globalReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) EXPR 9 data > wcslen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 wcslen ( HELLO_STRING ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsTrue ( ) EXPR 5 globalReturnsTrue ( ) FUNCTION_CALL 6 globalReturnsTrue ( ) CALLEE 7 globalReturnsTrue LEAF_NODE 8 globalReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int stdin ; VAR_DECL 7 int stdin TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 stdin LEAF_NODE 9 stdin LEAF_NODE 7 ; EXPR_STATEMENT 6 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 7 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 8 fscanf ( stdin , \"%ud\" , & data ) CALLEE 9 fscanf LEAF_NODE 10 fscanf LEAF_NODE 9 ( ARGUMENT 9 stdin FIELD 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 , ARGUMENT 9 \"%ud\" FIELD 10 \"%ud\" LEAF_NODE 11 \"%ud\" LEAF_NODE 9 , ARGUMENT 9 & data UNARY_EXPR 10 & data UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 data LEAF_NODE 12 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsFalse ( ) EXPR 5 globalReturnsFalse ( ) FUNCTION_CALL 6 globalReturnsFalse ( ) CALLEE 7 globalReturnsFalse LEAF_NODE 8 globalReturnsFalse LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 9 data > wcslen ( HELLO_STRING ) && data < 100 AND 10 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 11 data > wcslen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 wcslen ( HELLO_STRING ) CALLEE 13 wcslen LEAF_NODE 14 wcslen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsTrue ( ) EXPR 5 globalReturnsTrue ( ) FUNCTION_CALL 6 globalReturnsTrue ( ) CALLEE 7 globalReturnsTrue LEAF_NODE 8 globalReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int stdin ; VAR_DECL 7 int stdin TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 stdin LEAF_NODE 9 stdin LEAF_NODE 7 ; EXPR_STATEMENT 6 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 7 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 8 fscanf ( stdin , \"%ud\" , & data ) CALLEE 9 fscanf LEAF_NODE 10 fscanf LEAF_NODE 9 ( ARGUMENT 9 stdin FIELD 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 , ARGUMENT 9 \"%ud\" FIELD 10 \"%ud\" LEAF_NODE 11 \"%ud\" LEAF_NODE 9 , ARGUMENT 9 & data UNARY_EXPR 10 & data UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 data LEAF_NODE 12 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsTrue ( ) EXPR 5 globalReturnsTrue ( ) FUNCTION_CALL 6 globalReturnsTrue ( ) CALLEE 7 globalReturnsTrue LEAF_NODE 8 globalReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 9 data > wcslen ( HELLO_STRING ) && data < 100 AND 10 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 11 data > wcslen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 wcslen ( HELLO_STRING ) CALLEE 13 wcslen LEAF_NODE 14 wcslen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function1 LEAF_NODE 3 function1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsFalse ( ) EXPR 5 globalReturnsFalse ( ) FUNCTION_CALL 6 globalReturnsFalse ( ) CALLEE 7 globalReturnsFalse LEAF_NODE 8 globalReturnsFalse LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsTrue ( ) EXPR 5 globalReturnsTrue ( ) FUNCTION_CALL 6 globalReturnsTrue ( ) CALLEE 7 globalReturnsTrue LEAF_NODE 8 globalReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) EXPR 9 data > wcslen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 wcslen ( HELLO_STRING ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function2 LEAF_NODE 3 function2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsTrue ( ) EXPR 5 globalReturnsTrue ( ) FUNCTION_CALL 6 globalReturnsTrue ( ) CALLEE 7 globalReturnsTrue LEAF_NODE 8 globalReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globalReturnsTrue ( ) EXPR 5 globalReturnsTrue ( ) FUNCTION_CALL 6 globalReturnsTrue ( ) CALLEE 7 globalReturnsTrue LEAF_NODE 8 globalReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) EXPR 9 data > wcslen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 wcslen ( HELLO_STRING ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_11_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_11_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function1 ( ) ; EXPR 4 function1 ( ) FUNCTION_CALL 5 function1 ( ) CALLEE 6 function1 LEAF_NODE 7 function1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function2 ( ) ; EXPR 4 function2 ( ) FUNCTION_CALL 5 function2 ( ) CALLEE 6 function2 LEAF_NODE 7 function2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_11_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_11_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_11_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_11_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_11_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_11_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_11_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_11_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_11_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_11_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 110, "project": "cwe399_ast_vul_function_test_adv_152", "target": 1}
{"func": "SIMPLE_DECL 1 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType BASE_CLASSES { char * structFirst ; } CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType ; VAR_DECL 2 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType BASE_CLASSES { char * structFirst ; } CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType TYPE 3 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType BASE_CLASSES { char * structFirst ; } CLASS_DEF 4 struct _CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType BASE_CLASSES { char * structFirst ; } LEAF_NODE 5 struct CLASS_NAME 5 _CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType LEAF_NODE 6 _CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 char * structFirst ; SIMPLE_DECL 6 char * structFirst ; VAR_DECL 7 char * structFirst TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 structFirst LEAF_NODE 9 structFirst LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67b_functionSink PARAMETER_LIST 2 ( CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType myStruct TYPE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType TYPE_NAME 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType LEAF_NODE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType myStruct ; VAR_DECL 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType myStruct TYPE 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType TYPE_NAME 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType NAME 5 myStruct LEAF_NODE 6 myStruct LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 myStruct . structFirst = data ; EXPR 4 myStruct . structFirst = data ASSIGN 5 myStruct . structFirst = data LVAL 6 myStruct . structFirst FIELD 7 myStruct . structFirst LEAF_NODE 8 myStruct LEAF_NODE 8 . LEAF_NODE 8 structFirst ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67b_functionSink ( myStruct ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67b_functionSink ( myStruct ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67b_functionSink ( myStruct ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67b_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67b_functionSink LEAF_NODE 6 ( ARGUMENT 6 myStruct FIELD 7 myStruct LEAF_NODE 8 myStruct LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67b_functionB2GSink PARAMETER_LIST 2 ( CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType myStruct ) LEAF_NODE 3 ( PARAMETER_DECL 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType myStruct TYPE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType TYPE_NAME 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType LEAF_NODE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType NAME 4 myStruct LEAF_NODE 5 myStruct LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType myStruct ; VAR_DECL 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType myStruct TYPE 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType TYPE_NAME 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType NAME 5 myStruct LEAF_NODE 6 myStruct LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 myStruct . structFirst = data ; EXPR 4 myStruct . structFirst = data ASSIGN 5 myStruct . structFirst = data LVAL 6 myStruct . structFirst FIELD 7 myStruct . structFirst LEAF_NODE 8 myStruct LEAF_NODE 8 . LEAF_NODE 8 structFirst ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67b_functionB2GSink ( myStruct ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67b_functionB2GSink ( myStruct ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67b_functionB2GSink ( myStruct ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67b_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 myStruct FIELD 7 myStruct LEAF_NODE 8 myStruct LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 111, "project": "cwe399_ast_vul_function_test_adv_9", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = rand ( ) ; EXPR 7 data = rand ( ) ASSIGN 8 data = rand ( ) LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 rand ( ) FUNCTION_CALL 10 rand ( ) CALLEE 11 rand LEAF_NODE 12 rand LEAF_NODE 11 ( LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = rand ( ) ; EXPR 7 data = rand ( ) ASSIGN 8 data = rand ( ) LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 rand ( ) FUNCTION_CALL 10 rand ( ) CALLEE 11 rand LEAF_NODE 12 rand LEAF_NODE 11 ( LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 != 5 EXPR 5 5 != 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) && data < 100 EXPR 9 data > strlen ( HELLO_STRING ) && data < 100 AND 10 data > strlen ( HELLO_STRING ) && data < 100 EXPR 11 data > strlen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 strlen ( HELLO_STRING ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = rand ( ) ; EXPR 7 data = rand ( ) ASSIGN 8 data = rand ( ) LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 rand ( ) FUNCTION_CALL 10 rand ( ) CALLEE 11 rand LEAF_NODE 12 rand LEAF_NODE 11 ( LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) && data < 100 EXPR 9 data > strlen ( HELLO_STRING ) && data < 100 AND 10 data > strlen ( HELLO_STRING ) && data < 100 EXPR 11 data > strlen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 strlen ( HELLO_STRING ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function1 LEAF_NODE 3 function1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 != 5 EXPR 5 5 != 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function2 LEAF_NODE 3 function2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function1 ( ) ; EXPR 4 function1 ( ) FUNCTION_CALL 5 function1 ( ) CALLEE 6 function1 LEAF_NODE 7 function1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function2 ( ) ; EXPR 4 function2 ( ) FUNCTION_CALL 5 function2 ( ) CALLEE 6 function2 LEAF_NODE 7 function2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 112, "project": "cwe399_ast_vul_function_test_adv_178", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 113, "project": "cwe399_ast_vul_function_test_adv_141", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 8 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 9 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 10 char LEAF_NODE 11 char TYPE_SUFFIX 10 [ CHAR_ARRAY_SIZE ] LEAF_NODE 11 [ FIELD 11 CHAR_ARRAY_SIZE LEAF_NODE 12 CHAR_ARRAY_SIZE LEAF_NODE 11 ] NAME 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 9 ; INIT 9 inputBuffer = \"\" ASSIGN 10 inputBuffer = \"\" LVAL 11 inputBuffer NAME 12 inputBuffer LEAF_NODE 13 inputBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 \"\" FIELD 12 \"\" LEAF_NODE 13 \"\" LEAF_NODE 8 ; SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 9 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 10 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 inputBuffer FIELD 12 inputBuffer LEAF_NODE 13 inputBuffer LEAF_NODE 11 , ARGUMENT 11 CHAR_ARRAY_SIZE FIELD 12 CHAR_ARRAY_SIZE LEAF_NODE 13 CHAR_ARRAY_SIZE LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 11 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 12 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 13 data FIELD 14 data LEAF_NODE 15 data ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 14 strtoul ( inputBuffer , NULL , 0 ) CALLEE 15 strtoul LEAF_NODE 16 strtoul LEAF_NODE 15 ( ARGUMENT 15 inputBuffer FIELD 16 inputBuffer LEAF_NODE 17 inputBuffer LEAF_NODE 15 , ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed.\" ) ; EXPR 11 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed.\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed.\" FIELD 14 \"fgets() failed.\" LEAF_NODE 15 \"fgets() failed.\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 8 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 9 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 10 char LEAF_NODE 11 char TYPE_SUFFIX 10 [ CHAR_ARRAY_SIZE ] LEAF_NODE 11 [ FIELD 11 CHAR_ARRAY_SIZE LEAF_NODE 12 CHAR_ARRAY_SIZE LEAF_NODE 11 ] NAME 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 9 ; INIT 9 inputBuffer = \"\" ASSIGN 10 inputBuffer = \"\" LVAL 11 inputBuffer NAME 12 inputBuffer LEAF_NODE 13 inputBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 \"\" FIELD 12 \"\" LEAF_NODE 13 \"\" LEAF_NODE 8 ; SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 9 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 10 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 inputBuffer FIELD 12 inputBuffer LEAF_NODE 13 inputBuffer LEAF_NODE 11 , ARGUMENT 11 CHAR_ARRAY_SIZE FIELD 12 CHAR_ARRAY_SIZE LEAF_NODE 13 CHAR_ARRAY_SIZE LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 11 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 12 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 13 data FIELD 14 data LEAF_NODE 15 data ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 14 strtoul ( inputBuffer , NULL , 0 ) CALLEE 15 strtoul LEAF_NODE 16 strtoul LEAF_NODE 15 ( ARGUMENT 15 inputBuffer FIELD 16 inputBuffer LEAF_NODE 17 inputBuffer LEAF_NODE 15 , ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed.\" ) ; EXPR 11 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed.\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed.\" FIELD 14 \"fgets() failed.\" LEAF_NODE 15 \"fgets() failed.\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 != 5 EXPR 5 5 != 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) && data < 100 EXPR 9 data > strlen ( HELLO_STRING ) && data < 100 AND 10 data > strlen ( HELLO_STRING ) && data < 100 EXPR 11 data > strlen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 strlen ( HELLO_STRING ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 8 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 9 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 10 char LEAF_NODE 11 char TYPE_SUFFIX 10 [ CHAR_ARRAY_SIZE ] LEAF_NODE 11 [ FIELD 11 CHAR_ARRAY_SIZE LEAF_NODE 12 CHAR_ARRAY_SIZE LEAF_NODE 11 ] NAME 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 9 ; INIT 9 inputBuffer = \"\" ASSIGN 10 inputBuffer = \"\" LVAL 11 inputBuffer NAME 12 inputBuffer LEAF_NODE 13 inputBuffer ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 \"\" FIELD 12 \"\" LEAF_NODE 13 \"\" LEAF_NODE 8 ; SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 9 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 10 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 inputBuffer FIELD 12 inputBuffer LEAF_NODE 13 inputBuffer LEAF_NODE 11 , ARGUMENT 11 CHAR_ARRAY_SIZE FIELD 12 CHAR_ARRAY_SIZE LEAF_NODE 13 CHAR_ARRAY_SIZE LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 11 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 12 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 13 data FIELD 14 data LEAF_NODE 15 data ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 14 strtoul ( inputBuffer , NULL , 0 ) CALLEE 15 strtoul LEAF_NODE 16 strtoul LEAF_NODE 15 ( ARGUMENT 15 inputBuffer FIELD 16 inputBuffer LEAF_NODE 17 inputBuffer LEAF_NODE 15 , ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed.\" ) ; EXPR 11 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed.\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed.\" FIELD 14 \"fgets() failed.\" LEAF_NODE 15 \"fgets() failed.\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) && data < 100 EXPR 9 data > strlen ( HELLO_STRING ) && data < 100 AND 10 data > strlen ( HELLO_STRING ) && data < 100 EXPR 11 data > strlen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 strlen ( HELLO_STRING ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function1 LEAF_NODE 3 function1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 != 5 EXPR 5 5 != 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function2 LEAF_NODE 3 function2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function1 ( ) ; EXPR 4 function1 ( ) FUNCTION_CALL 5 function1 ( ) CALLEE 6 function1 LEAF_NODE 7 function1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function2 ( ) ; EXPR 4 function2 ( ) FUNCTION_CALL 5 function2 ( ) CALLEE 6 function2 LEAF_NODE 7 function2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 114, "project": "cwe399_ast_vul_function_test_adv_154", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_03_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_03_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 for LEAF_NODE 6 ( LEAF_NODE 6 ; LEAF_NODE 6 * LEAF_NODE 6 data LEAF_NODE 6 != LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 ++ LEAF_NODE 6 ) LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 * data == SEARCH_CHAR EXPR 9 * data == SEARCH_CHAR UNARY_EXPR 10 * data UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 data LEAF_NODE 12 data EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 != 5 EXPR 5 5 != 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_03_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_03_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_03_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_03_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_03_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_03_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_03_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_03_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_03_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_03_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_03_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_03_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 115, "project": "cwe399_ast_vul_function_test_adv_153", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_66b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_66b_functionSink PARAMETER_LIST 2 ( wchar_t * [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * [ ] dataArray TYPE 4 wchar_t * [ ] TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = dataArray [ 2 ] ; VAR_DECL 4 wchar_t * data ; data = dataArray [ 2 ] TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = dataArray [ 2 ] ASSIGN 6 data = dataArray [ 2 ] LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataArray [ 2 ] FIELD 8 dataArray [ 2 ] LEAF_NODE 9 dataArray LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] LEAF_NODE 4 ; LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_66b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_66b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * [ ] dataArray TYPE 4 wchar_t * [ ] TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = dataArray [ 2 ] ; VAR_DECL 4 wchar_t * data ; data = dataArray [ 2 ] TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = dataArray [ 2 ] ASSIGN 6 data = dataArray [ 2 ] LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataArray [ 2 ] FIELD 8 dataArray [ 2 ] LEAF_NODE 9 dataArray LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 116, "project": "cwe399_ast_vul_function_test_adv_15", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53b_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53b_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53b_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53b_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53b_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53b_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53b_functionB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53b_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53b_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53b_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53b_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 117, "project": "cwe399_ast_vul_function_test_adv_113", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int staticTrue ; staticTrue = 1 ; VAR_DECL 2 int staticTrue ; staticTrue = 1 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticTrue LEAF_NODE 4 staticTrue LEAF_NODE 3 ; INIT 3 staticTrue = 1 ASSIGN 4 staticTrue = 1 LVAL 5 staticTrue NAME 6 staticTrue LEAF_NODE 7 staticTrue ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 2 ; SIMPLE_DECL 1 int staticFalse ; staticFalse = 0 ; VAR_DECL 2 int staticFalse ; staticFalse = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticFalse LEAF_NODE 4 staticFalse LEAF_NODE 3 ; INIT 3 staticFalse = 0 ASSIGN 4 staticFalse = 0 LVAL 5 staticFalse NAME 6 staticFalse LEAF_NODE 7 staticFalse ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_05_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_05_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 strcpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 strcpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 strcpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 strcpy LEAF_NODE 7 strcpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticTrue EXPR 5 staticTrue FIELD 6 staticTrue LEAF_NODE 7 staticTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 ; LEAF_NODE 8 ; CONDITION 7 * data != '\\0' EXPR 8 * data != '\\0' UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 7 ; FOR_EXPR 7 data ++ EXPR 8 data ++ FIELD 9 data ++ LEAF_NODE 10 data LEAF_NODE 10 ++ LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 * data == SEARCH_CHAR EXPR 11 * data == SEARCH_CHAR UNARY_EXPR 12 * data UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 data LEAF_NODE 14 data EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 SEARCH_CHAR LEAF_NODE 13 SEARCH_CHAR LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 printLine ( \"We have a match!\" ) ; EXPR 13 printLine ( \"We have a match!\" ) FUNCTION_CALL 14 printLine ( \"We have a match!\" ) CALLEE 15 printLine LEAF_NODE 16 printLine LEAF_NODE 15 ( ARGUMENT 15 \"We have a match!\" FIELD 16 \"We have a match!\" LEAF_NODE 17 \"We have a match!\" LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 strcpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 strcpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 strcpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 strcpy LEAF_NODE 7 strcpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFalse EXPR 5 staticFalse FIELD 6 staticFalse LEAF_NODE 7 staticFalse LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 strcpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 strcpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 strcpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 strcpy LEAF_NODE 7 strcpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticTrue EXPR 5 staticTrue FIELD 6 staticTrue LEAF_NODE 7 staticTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_05_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_05_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_05_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_05_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_05_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_05_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_05_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_05_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_05_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_05_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_05_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_05_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 118, "project": "cwe399_ast_vul_function_test_adv_151", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53c_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53c_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53b_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53c_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53c_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53c_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53c_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53c_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53c_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53c_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53c_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53c_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53c_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53c_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 119, "project": "cwe399_ast_vul_function_test_adv_40", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54b_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 wcscpy LEAF_NODE 7 wcscpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54b_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54b_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54b_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54b_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54b_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 wcscpy LEAF_NODE 7 wcscpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54b_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54b_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54b_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54b_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 120, "project": "cwe399_ast_vul_function_test_adv_84", "target": 1}
{"func": "SIMPLE_DECL 1 struct p4_event_bind BASE_CLASSES { unsigned int opcode ; unsigned int [ 2 ] escr_msr ; unsigned int escr_emask ; unsigned int shared ; char cntr [ 2 ] [ P4_CNTR_LIMIT ] ; } ; CLASS_DEF 2 struct p4_event_bind BASE_CLASSES { unsigned int opcode ; unsigned int [ 2 ] escr_msr ; unsigned int escr_emask ; unsigned int shared ; char cntr [ 2 ] [ P4_CNTR_LIMIT ] ; } CLASS_DEF 3 struct p4_event_bind BASE_CLASSES { unsigned int opcode ; unsigned int [ 2 ] escr_msr ; unsigned int escr_emask ; unsigned int shared ; char cntr [ 2 ] [ P4_CNTR_LIMIT ] ; } LEAF_NODE 4 struct CLASS_NAME 4 p4_event_bind LEAF_NODE 5 p4_event_bind LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned int opcode ; unsigned int [ 2 ] escr_msr ; unsigned int escr_emask ; unsigned int shared ; char cntr [ 2 ] [ P4_CNTR_LIMIT ] ; SIMPLE_DECL 5 unsigned int opcode ; VAR_DECL 6 unsigned int opcode TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 opcode LEAF_NODE 8 opcode LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int [ 2 ] escr_msr ; VAR_DECL 6 unsigned int [ 2 ] escr_msr TYPE 7 unsigned int [ 2 ] TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int TYPE_SUFFIX 8 [ 2 ] LEAF_NODE 9 [ FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 9 ] NAME 7 escr_msr LEAF_NODE 8 escr_msr LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int escr_emask ; VAR_DECL 6 unsigned int escr_emask TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 escr_emask LEAF_NODE 8 escr_emask LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int shared ; VAR_DECL 6 unsigned int shared TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 shared LEAF_NODE 8 shared LEAF_NODE 6 ; LEAF_NODE 5 char LEAF_NODE 5 cntr LEAF_NODE 5 [ LEAF_NODE 5 2 LEAF_NODE 5 ] LEAF_NODE 5 [ LEAF_NODE 5 P4_CNTR_LIMIT LEAF_NODE 5 ] LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct p4_pebs_bind BASE_CLASSES { unsigned int metric_pebs ; unsigned int metric_vert ; } ; CLASS_DEF 2 struct p4_pebs_bind BASE_CLASSES { unsigned int metric_pebs ; unsigned int metric_vert ; } CLASS_DEF 3 struct p4_pebs_bind BASE_CLASSES { unsigned int metric_pebs ; unsigned int metric_vert ; } LEAF_NODE 4 struct CLASS_NAME 4 p4_pebs_bind LEAF_NODE 5 p4_pebs_bind LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned int metric_pebs ; unsigned int metric_vert ; SIMPLE_DECL 5 unsigned int metric_pebs ; VAR_DECL 6 unsigned int metric_pebs TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 metric_pebs LEAF_NODE 8 metric_pebs LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int metric_vert ; VAR_DECL 6 unsigned int metric_vert TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 metric_vert LEAF_NODE 8 metric_vert LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static struct p4_event_bind * LEAF_NODE 3 static TYPE_NAME 3 struct p4_event_bind LEAF_NODE 4 struct LEAF_NODE 4 p4_event_bind LEAF_NODE 3 * FUNCTION_NAME 2 p4_config_get_bind LEAF_NODE 3 p4_config_get_bind PARAMETER_LIST 2 ( u64 config ) LEAF_NODE 3 ( PARAMETER_DECL 3 u64 config TYPE 4 u64 TYPE_NAME 5 u64 LEAF_NODE 6 u64 NAME 4 config LEAF_NODE 5 config LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned int evnt ; evnt = p4_config_unpack_event ( config ) ; VAR_DECL 4 unsigned int evnt ; evnt = p4_config_unpack_event ( config ) TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 evnt LEAF_NODE 6 evnt LEAF_NODE 5 ; INIT 5 evnt = p4_config_unpack_event ( config ) ASSIGN 6 evnt = p4_config_unpack_event ( config ) LVAL 7 evnt NAME 8 evnt LEAF_NODE 9 evnt ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 p4_config_unpack_event ( config ) FUNCTION_CALL 8 p4_config_unpack_event ( config ) CALLEE 9 p4_config_unpack_event LEAF_NODE 10 p4_config_unpack_event LEAF_NODE 9 ( ARGUMENT 9 config FIELD 10 config LEAF_NODE 11 config LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 struct p4_event_bind * bind ; bind = NULL ; VAR_DECL 4 struct p4_event_bind * bind ; bind = NULL TYPE 5 struct p4_event_bind * TYPE_NAME 6 struct p4_event_bind LEAF_NODE 7 struct LEAF_NODE 7 p4_event_bind POINTER 6 * LEAF_NODE 7 * NAME 5 bind LEAF_NODE 6 bind LEAF_NODE 5 ; INIT 5 bind = NULL ASSIGN 6 bind = NULL LVAL 7 bind NAME 8 bind LEAF_NODE 9 bind ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 evnt < ARRAY_SIZE ( p4_event_bind_map ) EXPR 5 evnt < ARRAY_SIZE ( p4_event_bind_map ) FIELD 6 evnt LEAF_NODE 7 evnt REL_OPERATOR 6 < LEAF_NODE 7 < FUNCTION_CALL 6 ARRAY_SIZE ( p4_event_bind_map ) CALLEE 7 ARRAY_SIZE LEAF_NODE 8 ARRAY_SIZE LEAF_NODE 7 ( ARGUMENT 7 p4_event_bind_map FIELD 8 p4_event_bind_map LEAF_NODE 9 p4_event_bind_map LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 bind = & p4_event_bind_map [ evnt ] ; EXPR 6 bind = & p4_event_bind_map [ evnt ] ASSIGN 7 bind = & p4_event_bind_map [ evnt ] LVAL 8 bind FIELD 9 bind LEAF_NODE 10 bind ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 & p4_event_bind_map [ evnt ] UNARY_EXPR 9 & p4_event_bind_map [ evnt ] UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 p4_event_bind_map [ evnt ] LEAF_NODE 11 p4_event_bind_map LEAF_NODE 11 [ EXPR 11 evnt FIELD 12 evnt LEAF_NODE 13 evnt LEAF_NODE 11 ] LEAF_NODE 6 ; JUMP_STATEMENT 3 return bind ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 bind EXPR 5 bind FIELD 6 bind LEAF_NODE 7 bind LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static u64 LEAF_NODE 3 static TYPE_NAME 3 u64 LEAF_NODE 4 u64 FUNCTION_NAME 2 p4_pmu_event_map LEAF_NODE 3 p4_pmu_event_map PARAMETER_LIST 2 ( int hw_event ) LEAF_NODE 3 ( PARAMETER_DECL 3 int hw_event TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 hw_event LEAF_NODE 5 hw_event LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct p4_event_bind * bind ; VAR_DECL 4 struct p4_event_bind * bind TYPE 5 struct p4_event_bind * TYPE_NAME 6 struct p4_event_bind LEAF_NODE 7 struct LEAF_NODE 7 p4_event_bind POINTER 6 * LEAF_NODE 7 * NAME 5 bind LEAF_NODE 6 bind LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int esel ; VAR_DECL 4 unsigned int esel TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 esel LEAF_NODE 6 esel LEAF_NODE 4 ; SIMPLE_DECL 3 u64 config ; VAR_DECL 4 u64 config TYPE 5 u64 TYPE_NAME 6 u64 LEAF_NODE 7 u64 NAME 5 config LEAF_NODE 6 config LEAF_NODE 4 ; EXPR_STATEMENT 3 config = p4_general_events [ hw_event ] ; EXPR 4 config = p4_general_events [ hw_event ] ASSIGN 5 config = p4_general_events [ hw_event ] LVAL 6 config FIELD 7 config LEAF_NODE 8 config ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 p4_general_events [ hw_event ] FIELD 7 p4_general_events [ hw_event ] LEAF_NODE 8 p4_general_events LEAF_NODE 8 [ EXPR 8 hw_event FIELD 9 hw_event LEAF_NODE 10 hw_event LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 bind = p4_config_get_bind ( config ) ; EXPR 4 bind = p4_config_get_bind ( config ) ASSIGN 5 bind = p4_config_get_bind ( config ) LVAL 6 bind FIELD 7 bind LEAF_NODE 8 bind ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 p4_config_get_bind ( config ) FUNCTION_CALL 7 p4_config_get_bind ( config ) CALLEE 8 p4_config_get_bind LEAF_NODE 9 p4_config_get_bind LEAF_NODE 8 ( ARGUMENT 8 config FIELD 9 config LEAF_NODE 10 config LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 esel = P4_OPCODE_ESEL ( bind -> opcode ) ; EXPR 4 esel = P4_OPCODE_ESEL ( bind -> opcode ) ASSIGN 5 esel = P4_OPCODE_ESEL ( bind -> opcode ) LVAL 6 esel FIELD 7 esel LEAF_NODE 8 esel ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 P4_OPCODE_ESEL ( bind -> opcode ) FUNCTION_CALL 7 P4_OPCODE_ESEL ( bind -> opcode ) CALLEE 8 P4_OPCODE_ESEL LEAF_NODE 9 P4_OPCODE_ESEL LEAF_NODE 8 ( ARGUMENT 8 bind -> opcode FIELD 9 bind -> opcode LEAF_NODE 10 bind LEAF_NODE 10 -> LEAF_NODE 10 opcode LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 config |= p4_config_pack_cccr ( P4_CCCR_ESEL ( esel ) ) ; EXPR 4 config |= p4_config_pack_cccr ( P4_CCCR_ESEL ( esel ) ) ASSIGN 5 config |= p4_config_pack_cccr ( P4_CCCR_ESEL ( esel ) ) LVAL 6 config FIELD 7 config LEAF_NODE 8 config ASSIGN_OP 6 |= LEAF_NODE 7 |= RVAL 6 p4_config_pack_cccr ( P4_CCCR_ESEL ( esel ) ) FUNCTION_CALL 7 p4_config_pack_cccr ( P4_CCCR_ESEL ( esel ) ) CALLEE 8 p4_config_pack_cccr LEAF_NODE 9 p4_config_pack_cccr LEAF_NODE 8 ( ARGUMENT 8 P4_CCCR_ESEL ( esel ) FUNCTION_CALL 9 P4_CCCR_ESEL ( esel ) CALLEE 10 P4_CCCR_ESEL LEAF_NODE 11 P4_CCCR_ESEL LEAF_NODE 10 ( ARGUMENT 10 esel FIELD 11 esel LEAF_NODE 12 esel LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return config ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 config EXPR 5 config FIELD 6 config LEAF_NODE 7 config LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static bool LEAF_NODE 3 static TYPE_NAME 3 bool LEAF_NODE 4 bool FUNCTION_NAME 2 p4_event_match_cpu_model LEAF_NODE 3 p4_event_match_cpu_model PARAMETER_LIST 2 ( unsigned int event_idx ) LEAF_NODE 3 ( PARAMETER_DECL 3 unsigned int event_idx TYPE 4 unsigned int TYPE_NAME 5 unsigned int LEAF_NODE 6 unsigned LEAF_NODE 6 int NAME 4 event_idx LEAF_NODE 5 event_idx LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 event_idx == P4_EVENT_INSTR_COMPLETED EXPR 5 event_idx == P4_EVENT_INSTR_COMPLETED FIELD 6 event_idx LEAF_NODE 7 event_idx EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 P4_EVENT_INSTR_COMPLETED LEAF_NODE 7 P4_EVENT_INSTR_COMPLETED LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 boot_cpu_data . x86_model != 3 && boot_cpu_data . x86_model != 4 && boot_cpu_data . x86_model != 6 EXPR 8 boot_cpu_data . x86_model != 3 && boot_cpu_data . x86_model != 4 && boot_cpu_data . x86_model != 6 AND 9 boot_cpu_data . x86_model != 3 && boot_cpu_data . x86_model != 4 && boot_cpu_data . x86_model != 6 EXPR 10 boot_cpu_data . x86_model != 3 FIELD 11 boot_cpu_data . x86_model LEAF_NODE 12 boot_cpu_data LEAF_NODE 12 . LEAF_NODE 12 x86_model EQ_OPERATOR 11 != LEAF_NODE 12 != FIELD 11 3 LEAF_NODE 12 3 LEAF_NODE 10 && EXPR 10 boot_cpu_data . x86_model != 4 && boot_cpu_data . x86_model != 6 AND 11 boot_cpu_data . x86_model != 4 && boot_cpu_data . x86_model != 6 EXPR 12 boot_cpu_data . x86_model != 4 FIELD 13 boot_cpu_data . x86_model LEAF_NODE 14 boot_cpu_data LEAF_NODE 14 . LEAF_NODE 14 x86_model EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 4 LEAF_NODE 14 4 LEAF_NODE 12 && EXPR 12 boot_cpu_data . x86_model != 6 FIELD 13 boot_cpu_data . x86_model LEAF_NODE 14 boot_cpu_data LEAF_NODE 14 . LEAF_NODE 14 x86_model EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 6 LEAF_NODE 14 6 LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return false ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 false EXPR 10 false FIELD 11 false LEAF_NODE 12 false LEAF_NODE 9 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return true ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 true EXPR 5 true FIELD 6 true LEAF_NODE 7 true LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 p4_validate_raw_event LEAF_NODE 3 p4_validate_raw_event PARAMETER_LIST 2 ( struct perf_event * event ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct perf_event * event TYPE 4 struct perf_event * TYPE_NAME 5 struct perf_event LEAF_NODE 6 struct LEAF_NODE 6 perf_event POINTER 5 * LEAF_NODE 6 * NAME 4 event LEAF_NODE 5 event LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned int v , unsigned int emask ; INIT_DECL_LIST 4 unsigned int v , unsigned int emask VAR_DECL 5 unsigned int v TYPE 6 unsigned int TYPE_NAME 7 unsigned int LEAF_NODE 8 unsigned LEAF_NODE 8 int NAME 6 v LEAF_NODE 7 v LEAF_NODE 5 , VAR_DECL 5 unsigned int emask TYPE 6 unsigned int TYPE_NAME 7 unsigned int LEAF_NODE 8 unsigned LEAF_NODE 8 int NAME 6 emask LEAF_NODE 7 emask LEAF_NODE 4 ; EXPR_STATEMENT 3 v = p4_config_unpack_event ( event -> attr . config ) ; EXPR 4 v = p4_config_unpack_event ( event -> attr . config ) ASSIGN 5 v = p4_config_unpack_event ( event -> attr . config ) LVAL 6 v FIELD 7 v LEAF_NODE 8 v ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 p4_config_unpack_event ( event -> attr . config ) FUNCTION_CALL 7 p4_config_unpack_event ( event -> attr . config ) CALLEE 8 p4_config_unpack_event LEAF_NODE 9 p4_config_unpack_event LEAF_NODE 8 ( ARGUMENT 8 event -> attr . config FIELD 9 event -> attr . config LEAF_NODE 10 event LEAF_NODE 10 -> LEAF_NODE 10 attr LEAF_NODE 10 . LEAF_NODE 10 config LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 v >= ARRAY_SIZE ( p4_event_bind_map ) EXPR 5 v >= ARRAY_SIZE ( p4_event_bind_map ) FIELD 6 v LEAF_NODE 7 v REL_OPERATOR 6 >= LEAF_NODE 7 >= FUNCTION_CALL 6 ARRAY_SIZE ( p4_event_bind_map ) CALLEE 7 ARRAY_SIZE LEAF_NODE 8 ARRAY_SIZE LEAF_NODE 7 ( ARGUMENT 7 p4_event_bind_map FIELD 8 p4_event_bind_map LEAF_NODE 9 p4_event_bind_map LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return - EINVAL ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 - EINVAL EXPR 7 - EINVAL UNARY_EXPR 8 - EINVAL UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 EINVAL LEAF_NODE 10 EINVAL LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! p4_event_match_cpu_model ( v ) EXPR 5 ! p4_event_match_cpu_model ( v ) UNARY_EXPR 6 ! p4_event_match_cpu_model ( v ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 p4_event_match_cpu_model ( v ) CALLEE 8 p4_event_match_cpu_model LEAF_NODE 9 p4_event_match_cpu_model LEAF_NODE 8 ( ARGUMENT 8 v FIELD 9 v LEAF_NODE 10 v LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return - EINVAL ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 - EINVAL EXPR 7 - EINVAL UNARY_EXPR 8 - EINVAL UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 EINVAL LEAF_NODE 10 EINVAL LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 p4_ht_active ( ) && p4_event_bind_map [ v ] . shared EXPR 5 p4_ht_active ( ) && p4_event_bind_map [ v ] . shared AND 6 p4_ht_active ( ) && p4_event_bind_map [ v ] . shared EXPR 7 p4_ht_active ( ) FUNCTION_CALL 8 p4_ht_active ( ) CALLEE 9 p4_ht_active LEAF_NODE 10 p4_ht_active LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 && EXPR 7 p4_event_bind_map [ v ] . shared FIELD 8 p4_event_bind_map [ v ] . shared LEAF_NODE 9 p4_event_bind_map LEAF_NODE 9 [ EXPR 9 v FIELD 10 v LEAF_NODE 11 v LEAF_NODE 9 ] LEAF_NODE 9 . LEAF_NODE 9 shared LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 perf_paranoid_cpu ( ) && ! capable ( CAP_SYS_ADMIN ) EXPR 8 perf_paranoid_cpu ( ) && ! capable ( CAP_SYS_ADMIN ) AND 9 perf_paranoid_cpu ( ) && ! capable ( CAP_SYS_ADMIN ) EXPR 10 perf_paranoid_cpu ( ) FUNCTION_CALL 11 perf_paranoid_cpu ( ) CALLEE 12 perf_paranoid_cpu LEAF_NODE 13 perf_paranoid_cpu LEAF_NODE 12 ( LEAF_NODE 12 ) LEAF_NODE 10 && EXPR 10 ! capable ( CAP_SYS_ADMIN ) UNARY_EXPR 11 ! capable ( CAP_SYS_ADMIN ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 capable ( CAP_SYS_ADMIN ) CALLEE 13 capable LEAF_NODE 14 capable LEAF_NODE 13 ( ARGUMENT 13 CAP_SYS_ADMIN FIELD 14 CAP_SYS_ADMIN LEAF_NODE 15 CAP_SYS_ADMIN LEAF_NODE 13 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return - EACCES ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 - EACCES EXPR 10 - EACCES UNARY_EXPR 11 - EACCES UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 EACCES LEAF_NODE 13 EACCES LEAF_NODE 9 ; LEAF_NODE 5 } EXPR_STATEMENT 3 emask = p4_config_unpack_escr ( event -> attr . config ) & P4_ESCR_EVENTMASK_MASK ; EXPR 4 emask = p4_config_unpack_escr ( event -> attr . config ) & P4_ESCR_EVENTMASK_MASK ASSIGN 5 emask = p4_config_unpack_escr ( event -> attr . config ) & P4_ESCR_EVENTMASK_MASK LVAL 6 emask FIELD 7 emask LEAF_NODE 8 emask ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 p4_config_unpack_escr ( event -> attr . config ) & P4_ESCR_EVENTMASK_MASK FUNCTION_CALL 7 p4_config_unpack_escr ( event -> attr . config ) CALLEE 8 p4_config_unpack_escr LEAF_NODE 9 p4_config_unpack_escr LEAF_NODE 8 ( ARGUMENT 8 event -> attr . config FIELD 9 event -> attr . config LEAF_NODE 10 event LEAF_NODE 10 -> LEAF_NODE 10 attr LEAF_NODE 10 . LEAF_NODE 10 config LEAF_NODE 8 ) LEAF_NODE 7 & FIELD 7 P4_ESCR_EVENTMASK_MASK LEAF_NODE 8 P4_ESCR_EVENTMASK_MASK LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 emask & ~p4_event_bind_map [ v ] . escr_emask EXPR 5 emask & ~p4_event_bind_map [ v ] . escr_emask FIELD 6 emask LEAF_NODE 7 emask LEAF_NODE 6 & FIELD 6 ~p4_event_bind_map [ v ] . escr_emask LEAF_NODE 7 ~p4_event_bind_map LEAF_NODE 7 [ EXPR 7 v FIELD 8 v LEAF_NODE 9 v LEAF_NODE 7 ] LEAF_NODE 7 . LEAF_NODE 7 escr_emask LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return - EINVAL ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 - EINVAL EXPR 7 - EINVAL UNARY_EXPR 8 - EINVAL UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 EINVAL LEAF_NODE 10 EINVAL LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 p4_config_pebs_has ( event -> attr . config , P4_PEBS_CONFIG_ENABLE ) EXPR 5 p4_config_pebs_has ( event -> attr . config , P4_PEBS_CONFIG_ENABLE ) FUNCTION_CALL 6 p4_config_pebs_has ( event -> attr . config , P4_PEBS_CONFIG_ENABLE ) CALLEE 7 p4_config_pebs_has LEAF_NODE 8 p4_config_pebs_has LEAF_NODE 7 ( ARGUMENT 7 event -> attr . config FIELD 8 event -> attr . config LEAF_NODE 9 event LEAF_NODE 9 -> LEAF_NODE 9 attr LEAF_NODE 9 . LEAF_NODE 9 config LEAF_NODE 7 , ARGUMENT 7 P4_PEBS_CONFIG_ENABLE FIELD 8 P4_PEBS_CONFIG_ENABLE LEAF_NODE 9 P4_PEBS_CONFIG_ENABLE LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return - EINVAL ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 - EINVAL EXPR 7 - EINVAL UNARY_EXPR 8 - EINVAL UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 EINVAL LEAF_NODE 10 EINVAL LEAF_NODE 6 ; EXPR_STATEMENT 3 v = p4_config_unpack_metric ( event -> attr . config ) ; EXPR 4 v = p4_config_unpack_metric ( event -> attr . config ) ASSIGN 5 v = p4_config_unpack_metric ( event -> attr . config ) LVAL 6 v FIELD 7 v LEAF_NODE 8 v ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 p4_config_unpack_metric ( event -> attr . config ) FUNCTION_CALL 7 p4_config_unpack_metric ( event -> attr . config ) CALLEE 8 p4_config_unpack_metric LEAF_NODE 9 p4_config_unpack_metric LEAF_NODE 8 ( ARGUMENT 8 event -> attr . config FIELD 9 event -> attr . config LEAF_NODE 10 event LEAF_NODE 10 -> LEAF_NODE 10 attr LEAF_NODE 10 . LEAF_NODE 10 config LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 v >= ARRAY_SIZE ( p4_pebs_bind_map ) EXPR 5 v >= ARRAY_SIZE ( p4_pebs_bind_map ) FIELD 6 v LEAF_NODE 7 v REL_OPERATOR 6 >= LEAF_NODE 7 >= FUNCTION_CALL 6 ARRAY_SIZE ( p4_pebs_bind_map ) CALLEE 7 ARRAY_SIZE LEAF_NODE 8 ARRAY_SIZE LEAF_NODE 7 ( ARGUMENT 7 p4_pebs_bind_map FIELD 8 p4_pebs_bind_map LEAF_NODE 9 p4_pebs_bind_map LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return - EINVAL ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 - EINVAL EXPR 7 - EINVAL UNARY_EXPR 8 - EINVAL UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 EINVAL LEAF_NODE 10 EINVAL LEAF_NODE 6 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 p4_hw_config LEAF_NODE 3 p4_hw_config PARAMETER_LIST 2 ( struct perf_event * event ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct perf_event * event TYPE 4 struct perf_event * TYPE_NAME 5 struct perf_event LEAF_NODE 6 struct LEAF_NODE 6 perf_event POINTER 5 * LEAF_NODE 6 * NAME 4 event LEAF_NODE 5 event LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int cpu ; cpu = get_cpu ( ) ; VAR_DECL 4 int cpu ; cpu = get_cpu ( ) TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 cpu LEAF_NODE 6 cpu LEAF_NODE 5 ; INIT 5 cpu = get_cpu ( ) ASSIGN 6 cpu = get_cpu ( ) LVAL 7 cpu NAME 8 cpu LEAF_NODE 9 cpu ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 get_cpu ( ) FUNCTION_CALL 8 get_cpu ( ) CALLEE 9 get_cpu LEAF_NODE 10 get_cpu LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 int rc ; rc = 0 ; VAR_DECL 4 int rc ; rc = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 rc LEAF_NODE 6 rc LEAF_NODE 5 ; INIT 5 rc = 0 ASSIGN 6 rc = 0 LVAL 7 rc NAME 8 rc LEAF_NODE 9 rc ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 u32 escr , u32 cccr ; INIT_DECL_LIST 4 u32 escr , u32 cccr VAR_DECL 5 u32 escr TYPE 6 u32 TYPE_NAME 7 u32 LEAF_NODE 8 u32 NAME 6 escr LEAF_NODE 7 escr LEAF_NODE 5 , VAR_DECL 5 u32 cccr TYPE 6 u32 TYPE_NAME 7 u32 LEAF_NODE 8 u32 NAME 6 cccr LEAF_NODE 7 cccr LEAF_NODE 4 ; EXPR_STATEMENT 3 cccr = p4_default_cccr_conf ( cpu ) ; EXPR 4 cccr = p4_default_cccr_conf ( cpu ) ASSIGN 5 cccr = p4_default_cccr_conf ( cpu ) LVAL 6 cccr FIELD 7 cccr LEAF_NODE 8 cccr ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 p4_default_cccr_conf ( cpu ) FUNCTION_CALL 7 p4_default_cccr_conf ( cpu ) CALLEE 8 p4_default_cccr_conf LEAF_NODE 9 p4_default_cccr_conf LEAF_NODE 8 ( ARGUMENT 8 cpu FIELD 9 cpu LEAF_NODE 10 cpu LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 escr = p4_default_escr_conf ( cpu , event -> attr . exclude_kernel , event -> attr . exclude_user ) ; EXPR 4 escr = p4_default_escr_conf ( cpu , event -> attr . exclude_kernel , event -> attr . exclude_user ) ASSIGN 5 escr = p4_default_escr_conf ( cpu , event -> attr . exclude_kernel , event -> attr . exclude_user ) LVAL 6 escr FIELD 7 escr LEAF_NODE 8 escr ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 p4_default_escr_conf ( cpu , event -> attr . exclude_kernel , event -> attr . exclude_user ) FUNCTION_CALL 7 p4_default_escr_conf ( cpu , event -> attr . exclude_kernel , event -> attr . exclude_user ) CALLEE 8 p4_default_escr_conf LEAF_NODE 9 p4_default_escr_conf LEAF_NODE 8 ( ARGUMENT 8 cpu FIELD 9 cpu LEAF_NODE 10 cpu LEAF_NODE 8 , ARGUMENT 8 event -> attr . exclude_kernel FIELD 9 event -> attr . exclude_kernel LEAF_NODE 10 event LEAF_NODE 10 -> LEAF_NODE 10 attr LEAF_NODE 10 . LEAF_NODE 10 exclude_kernel LEAF_NODE 8 , ARGUMENT 8 event -> attr . exclude_user FIELD 9 event -> attr . exclude_user LEAF_NODE 10 event LEAF_NODE 10 -> LEAF_NODE 10 attr LEAF_NODE 10 . LEAF_NODE 10 exclude_user LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 event -> hw . config = p4_config_pack_escr ( escr ) | p4_config_pack_cccr ( cccr ) ; EXPR 4 event -> hw . config = p4_config_pack_escr ( escr ) | p4_config_pack_cccr ( cccr ) ASSIGN 5 event -> hw . config = p4_config_pack_escr ( escr ) | p4_config_pack_cccr ( cccr ) LVAL 6 event -> hw . config FIELD 7 event -> hw . config LEAF_NODE 8 event LEAF_NODE 8 -> LEAF_NODE 8 hw LEAF_NODE 8 . LEAF_NODE 8 config ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 p4_config_pack_escr ( escr ) | p4_config_pack_cccr ( cccr ) BIT_OR 7 p4_config_pack_escr ( escr ) | p4_config_pack_cccr ( cccr ) BIT_OR_ELEM 8 p4_config_pack_escr ( escr ) FUNCTION_CALL 9 p4_config_pack_escr ( escr ) CALLEE 10 p4_config_pack_escr LEAF_NODE 11 p4_config_pack_escr LEAF_NODE 10 ( ARGUMENT 10 escr FIELD 11 escr LEAF_NODE 12 escr LEAF_NODE 10 ) LEAF_NODE 8 | BIT_OR_ELEM 8 p4_config_pack_cccr ( cccr ) FUNCTION_CALL 9 p4_config_pack_cccr ( cccr ) CALLEE 10 p4_config_pack_cccr LEAF_NODE 11 p4_config_pack_cccr LEAF_NODE 10 ( ARGUMENT 10 cccr FIELD 11 cccr LEAF_NODE 12 cccr LEAF_NODE 10 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 p4_ht_active ( ) && p4_ht_thread ( cpu ) EXPR 5 p4_ht_active ( ) && p4_ht_thread ( cpu ) AND 6 p4_ht_active ( ) && p4_ht_thread ( cpu ) EXPR 7 p4_ht_active ( ) FUNCTION_CALL 8 p4_ht_active ( ) CALLEE 9 p4_ht_active LEAF_NODE 10 p4_ht_active LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 && EXPR 7 p4_ht_thread ( cpu ) FUNCTION_CALL 8 p4_ht_thread ( cpu ) CALLEE 9 p4_ht_thread LEAF_NODE 10 p4_ht_thread LEAF_NODE 9 ( ARGUMENT 9 cpu FIELD 10 cpu LEAF_NODE 11 cpu LEAF_NODE 9 ) LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 event -> hw . config = p4_set_ht_bit ( event -> hw . config ) ; EXPR 6 event -> hw . config = p4_set_ht_bit ( event -> hw . config ) ASSIGN 7 event -> hw . config = p4_set_ht_bit ( event -> hw . config ) LVAL 8 event -> hw . config FIELD 9 event -> hw . config LEAF_NODE 10 event LEAF_NODE 10 -> LEAF_NODE 10 hw LEAF_NODE 10 . LEAF_NODE 10 config ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 p4_set_ht_bit ( event -> hw . config ) FUNCTION_CALL 9 p4_set_ht_bit ( event -> hw . config ) CALLEE 10 p4_set_ht_bit LEAF_NODE 11 p4_set_ht_bit LEAF_NODE 10 ( ARGUMENT 10 event -> hw . config FIELD 11 event -> hw . config LEAF_NODE 12 event LEAF_NODE 12 -> LEAF_NODE 12 hw LEAF_NODE 12 . LEAF_NODE 12 config LEAF_NODE 10 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 event -> attr . type == PERF_TYPE_RAW EXPR 5 event -> attr . type == PERF_TYPE_RAW FIELD 6 event -> attr . type LEAF_NODE 7 event LEAF_NODE 7 -> LEAF_NODE 7 attr LEAF_NODE 7 . LEAF_NODE 7 type EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 PERF_TYPE_RAW LEAF_NODE 7 PERF_TYPE_RAW LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 struct p4_event_bind * bind ; VAR_DECL 7 struct p4_event_bind * bind TYPE 8 struct p4_event_bind * TYPE_NAME 9 struct p4_event_bind LEAF_NODE 10 struct LEAF_NODE 10 p4_event_bind POINTER 9 * LEAF_NODE 10 * NAME 8 bind LEAF_NODE 9 bind LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned int esel ; VAR_DECL 7 unsigned int esel TYPE 8 unsigned int TYPE_NAME 9 unsigned int LEAF_NODE 10 unsigned LEAF_NODE 10 int NAME 8 esel LEAF_NODE 9 esel LEAF_NODE 7 ; EXPR_STATEMENT 6 event -> attr . config &= P4_CONFIG_MASK ; EXPR 7 event -> attr . config &= P4_CONFIG_MASK ASSIGN 8 event -> attr . config &= P4_CONFIG_MASK LVAL 9 event -> attr . config FIELD 10 event -> attr . config LEAF_NODE 11 event LEAF_NODE 11 -> LEAF_NODE 11 attr LEAF_NODE 11 . LEAF_NODE 11 config ASSIGN_OP 9 &= LEAF_NODE 10 &= RVAL 9 P4_CONFIG_MASK FIELD 10 P4_CONFIG_MASK LEAF_NODE 11 P4_CONFIG_MASK LEAF_NODE 7 ; EXPR_STATEMENT 6 rc = p4_validate_raw_event ( event ) ; EXPR 7 rc = p4_validate_raw_event ( event ) ASSIGN 8 rc = p4_validate_raw_event ( event ) LVAL 9 rc FIELD 10 rc LEAF_NODE 11 rc ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 p4_validate_raw_event ( event ) FUNCTION_CALL 10 p4_validate_raw_event ( event ) CALLEE 11 p4_validate_raw_event LEAF_NODE 12 p4_validate_raw_event LEAF_NODE 11 ( ARGUMENT 11 event FIELD 12 event LEAF_NODE 13 event LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 rc EXPR 8 rc FIELD 9 rc LEAF_NODE 10 rc LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 goto out ; KEYWORD 9 goto LEAF_NODE 10 goto DESTINATION 9 out LEAF_NODE 10 out LEAF_NODE 9 ; EXPR_STATEMENT 6 event -> hw . config |= event -> attr . config ; EXPR 7 event -> hw . config |= event -> attr . config ASSIGN 8 event -> hw . config |= event -> attr . config LVAL 9 event -> hw . config FIELD 10 event -> hw . config LEAF_NODE 11 event LEAF_NODE 11 -> LEAF_NODE 11 hw LEAF_NODE 11 . LEAF_NODE 11 config ASSIGN_OP 9 |= LEAF_NODE 10 |= RVAL 9 event -> attr . config FIELD 10 event -> attr . config LEAF_NODE 11 event LEAF_NODE 11 -> LEAF_NODE 11 attr LEAF_NODE 11 . LEAF_NODE 11 config LEAF_NODE 7 ; EXPR_STATEMENT 6 bind = p4_config_get_bind ( event -> attr . config ) ; EXPR 7 bind = p4_config_get_bind ( event -> attr . config ) ASSIGN 8 bind = p4_config_get_bind ( event -> attr . config ) LVAL 9 bind FIELD 10 bind LEAF_NODE 11 bind ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 p4_config_get_bind ( event -> attr . config ) FUNCTION_CALL 10 p4_config_get_bind ( event -> attr . config ) CALLEE 11 p4_config_get_bind LEAF_NODE 12 p4_config_get_bind LEAF_NODE 11 ( ARGUMENT 11 event -> attr . config FIELD 12 event -> attr . config LEAF_NODE 13 event LEAF_NODE 13 -> LEAF_NODE 13 attr LEAF_NODE 13 . LEAF_NODE 13 config LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! bind EXPR 8 ! bind UNARY_EXPR 9 ! bind UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FIELD 10 bind LEAF_NODE 11 bind LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 rc = - EINVAL ; EXPR 10 rc = - EINVAL ASSIGN 11 rc = - EINVAL LVAL 12 rc FIELD 13 rc LEAF_NODE 14 rc ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 - EINVAL UNARY_EXPR 13 - EINVAL UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 EINVAL LEAF_NODE 15 EINVAL LEAF_NODE 10 ; JUMP_STATEMENT 9 goto out ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 out LEAF_NODE 11 out LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 esel = P4_OPCODE_ESEL ( bind -> opcode ) ; EXPR 7 esel = P4_OPCODE_ESEL ( bind -> opcode ) ASSIGN 8 esel = P4_OPCODE_ESEL ( bind -> opcode ) LVAL 9 esel FIELD 10 esel LEAF_NODE 11 esel ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 P4_OPCODE_ESEL ( bind -> opcode ) FUNCTION_CALL 10 P4_OPCODE_ESEL ( bind -> opcode ) CALLEE 11 P4_OPCODE_ESEL LEAF_NODE 12 P4_OPCODE_ESEL LEAF_NODE 11 ( ARGUMENT 11 bind -> opcode FIELD 12 bind -> opcode LEAF_NODE 13 bind LEAF_NODE 13 -> LEAF_NODE 13 opcode LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 event -> hw . config |= p4_config_pack_cccr ( P4_CCCR_ESEL ( esel ) ) ; EXPR 7 event -> hw . config |= p4_config_pack_cccr ( P4_CCCR_ESEL ( esel ) ) ASSIGN 8 event -> hw . config |= p4_config_pack_cccr ( P4_CCCR_ESEL ( esel ) ) LVAL 9 event -> hw . config FIELD 10 event -> hw . config LEAF_NODE 11 event LEAF_NODE 11 -> LEAF_NODE 11 hw LEAF_NODE 11 . LEAF_NODE 11 config ASSIGN_OP 9 |= LEAF_NODE 10 |= RVAL 9 p4_config_pack_cccr ( P4_CCCR_ESEL ( esel ) ) FUNCTION_CALL 10 p4_config_pack_cccr ( P4_CCCR_ESEL ( esel ) ) CALLEE 11 p4_config_pack_cccr LEAF_NODE 12 p4_config_pack_cccr LEAF_NODE 11 ( ARGUMENT 11 P4_CCCR_ESEL ( esel ) FUNCTION_CALL 12 P4_CCCR_ESEL ( esel ) CALLEE 13 P4_CCCR_ESEL LEAF_NODE 14 P4_CCCR_ESEL LEAF_NODE 13 ( ARGUMENT 13 esel FIELD 14 esel LEAF_NODE 15 esel LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 rc = x86_setup_perfctr ( event ) ; EXPR 4 rc = x86_setup_perfctr ( event ) ASSIGN 5 rc = x86_setup_perfctr ( event ) LVAL 6 rc FIELD 7 rc LEAF_NODE 8 rc ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 x86_setup_perfctr ( event ) FUNCTION_CALL 7 x86_setup_perfctr ( event ) CALLEE 8 x86_setup_perfctr LEAF_NODE 9 x86_setup_perfctr LEAF_NODE 8 ( ARGUMENT 8 event FIELD 9 event LEAF_NODE 10 event LEAF_NODE 8 ) LEAF_NODE 4 ; LABEL 3 out : LEAF_NODE 4 out LEAF_NODE 4 : EXPR_STATEMENT 3 put_cpu ( ) ; EXPR 4 put_cpu ( ) FUNCTION_CALL 5 put_cpu ( ) CALLEE 6 put_cpu LEAF_NODE 7 put_cpu LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return rc ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 rc EXPR 5 rc FIELD 6 rc LEAF_NODE 7 rc LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static inline int LEAF_NODE 3 static LEAF_NODE 3 inline TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 p4_pmu_clear_cccr_ovf LEAF_NODE 3 p4_pmu_clear_cccr_ovf PARAMETER_LIST 2 ( struct hw_perf_event * hwc ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct hw_perf_event * hwc TYPE 4 struct hw_perf_event * TYPE_NAME 5 struct hw_perf_event LEAF_NODE 6 struct LEAF_NODE 6 hw_perf_event POINTER 5 * LEAF_NODE 6 * NAME 4 hwc LEAF_NODE 5 hwc LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 u64 v ; VAR_DECL 4 u64 v TYPE 5 u64 TYPE_NAME 6 u64 LEAF_NODE 7 u64 NAME 5 v LEAF_NODE 6 v LEAF_NODE 4 ; EXPR_STATEMENT 3 rdmsrl ( hwc -> config_base , v ) ; EXPR 4 rdmsrl ( hwc -> config_base , v ) FUNCTION_CALL 5 rdmsrl ( hwc -> config_base , v ) CALLEE 6 rdmsrl LEAF_NODE 7 rdmsrl LEAF_NODE 6 ( ARGUMENT 6 hwc -> config_base FIELD 7 hwc -> config_base LEAF_NODE 8 hwc LEAF_NODE 8 -> LEAF_NODE 8 config_base LEAF_NODE 6 , ARGUMENT 6 v FIELD 7 v LEAF_NODE 8 v LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 v & P4_CCCR_OVF EXPR 5 v & P4_CCCR_OVF FIELD 6 v LEAF_NODE 7 v LEAF_NODE 6 & FIELD 6 P4_CCCR_OVF LEAF_NODE 7 P4_CCCR_OVF LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 wrmsrl ( hwc -> config_base , v & ~P4_CCCR_OVF ) ; EXPR 7 wrmsrl ( hwc -> config_base , v & ~P4_CCCR_OVF ) FUNCTION_CALL 8 wrmsrl ( hwc -> config_base , v & ~P4_CCCR_OVF ) CALLEE 9 wrmsrl LEAF_NODE 10 wrmsrl LEAF_NODE 9 ( ARGUMENT 9 hwc -> config_base FIELD 10 hwc -> config_base LEAF_NODE 11 hwc LEAF_NODE 11 -> LEAF_NODE 11 config_base LEAF_NODE 9 , ARGUMENT 9 v & ~P4_CCCR_OVF FIELD 10 v LEAF_NODE 11 v LEAF_NODE 10 & FIELD 10 ~P4_CCCR_OVF LEAF_NODE 11 ~P4_CCCR_OVF LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 1 EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 rdmsrl ( hwc -> event_base , v ) ; EXPR 4 rdmsrl ( hwc -> event_base , v ) FUNCTION_CALL 5 rdmsrl ( hwc -> event_base , v ) CALLEE 6 rdmsrl LEAF_NODE 7 rdmsrl LEAF_NODE 6 ( ARGUMENT 6 hwc -> event_base FIELD 7 hwc -> event_base LEAF_NODE 8 hwc LEAF_NODE 8 -> LEAF_NODE 8 event_base LEAF_NODE 6 , ARGUMENT 6 v FIELD 7 v LEAF_NODE 8 v LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ( v & ARCH_P4_UNFLAGGED_BIT ) EXPR 5 ! ( v & ARCH_P4_UNFLAGGED_BIT ) UNARY_EXPR 6 ! ( v & ARCH_P4_UNFLAGGED_BIT ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! LEAF_NODE 7 ( FIELD 7 v LEAF_NODE 8 v LEAF_NODE 7 & FIELD 7 ARCH_P4_UNFLAGGED_BIT LEAF_NODE 8 ARCH_P4_UNFLAGGED_BIT LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return 1 ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 1 EXPR 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 6 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 p4_pmu_disable_pebs LEAF_NODE 3 p4_pmu_disable_pebs PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static inline void LEAF_NODE 3 static LEAF_NODE 3 inline TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 p4_pmu_disable_event LEAF_NODE 3 p4_pmu_disable_event PARAMETER_LIST 2 ( struct perf_event * event ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct perf_event * event TYPE 4 struct perf_event * TYPE_NAME 5 struct perf_event LEAF_NODE 6 struct LEAF_NODE 6 perf_event POINTER 5 * LEAF_NODE 6 * NAME 4 event LEAF_NODE 5 event LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct hw_perf_event * hwc ; hwc = & event -> hw ; VAR_DECL 4 struct hw_perf_event * hwc ; hwc = & event -> hw TYPE 5 struct hw_perf_event * TYPE_NAME 6 struct hw_perf_event LEAF_NODE 7 struct LEAF_NODE 7 hw_perf_event POINTER 6 * LEAF_NODE 7 * NAME 5 hwc LEAF_NODE 6 hwc LEAF_NODE 5 ; INIT 5 hwc = & event -> hw ASSIGN 6 hwc = & event -> hw LVAL 7 hwc NAME 8 hwc LEAF_NODE 9 hwc ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & event -> hw UNARY_EXPR 8 & event -> hw UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 event -> hw LEAF_NODE 10 event LEAF_NODE 10 -> LEAF_NODE 10 hw LEAF_NODE 4 ; EXPR_STATEMENT 3 ( void ) checking_wrmsrl ( hwc -> config_base , ( u64 ) ( p4_config_unpack_cccr ( hwc -> config ) ) & ~P4_CCCR_ENABLE & ~P4_CCCR_OVF & ~P4_CCCR_RESERVED ) ; EXPR 4 ( void ) checking_wrmsrl ( hwc -> config_base , ( u64 ) ( p4_config_unpack_cccr ( hwc -> config ) ) & ~P4_CCCR_ENABLE & ~P4_CCCR_OVF & ~P4_CCCR_RESERVED ) LEAF_NODE 5 ( TYPE_NAME 5 void LEAF_NODE 6 void LEAF_NODE 5 ) FUNCTION_CALL 5 checking_wrmsrl ( hwc -> config_base , ( u64 ) ( p4_config_unpack_cccr ( hwc -> config ) ) & ~P4_CCCR_ENABLE & ~P4_CCCR_OVF & ~P4_CCCR_RESERVED ) CALLEE 6 checking_wrmsrl LEAF_NODE 7 checking_wrmsrl LEAF_NODE 6 ( ARGUMENT 6 hwc -> config_base FIELD 7 hwc -> config_base LEAF_NODE 8 hwc LEAF_NODE 8 -> LEAF_NODE 8 config_base LEAF_NODE 6 , ARGUMENT 6 ( u64 ) ( p4_config_unpack_cccr ( hwc -> config ) ) & ~P4_CCCR_ENABLE & ~P4_CCCR_OVF & ~P4_CCCR_RESERVED LEAF_NODE 7 ( TYPE_NAME 7 u64 LEAF_NODE 8 u64 LEAF_NODE 7 ) LEAF_NODE 7 ( FUNCTION_CALL 7 p4_config_unpack_cccr ( hwc -> config ) CALLEE 8 p4_config_unpack_cccr LEAF_NODE 9 p4_config_unpack_cccr LEAF_NODE 8 ( ARGUMENT 8 hwc -> config FIELD 9 hwc -> config LEAF_NODE 10 hwc LEAF_NODE 10 -> LEAF_NODE 10 config LEAF_NODE 8 ) LEAF_NODE 7 ) LEAF_NODE 7 & FIELD 7 ~P4_CCCR_ENABLE LEAF_NODE 8 ~P4_CCCR_ENABLE LEAF_NODE 7 & FIELD 7 ~P4_CCCR_OVF LEAF_NODE 8 ~P4_CCCR_OVF LEAF_NODE 7 & FIELD 7 ~P4_CCCR_RESERVED LEAF_NODE 8 ~P4_CCCR_RESERVED LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 p4_pmu_disable_all LEAF_NODE 3 p4_pmu_disable_all PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct cpu_hw_events * cpuc ; cpuc = & __get_cpu_var ( cpu_hw_events ) ; VAR_DECL 4 struct cpu_hw_events * cpuc ; cpuc = & __get_cpu_var ( cpu_hw_events ) TYPE 5 struct cpu_hw_events * TYPE_NAME 6 struct cpu_hw_events LEAF_NODE 7 struct LEAF_NODE 7 cpu_hw_events POINTER 6 * LEAF_NODE 7 * NAME 5 cpuc LEAF_NODE 6 cpuc LEAF_NODE 5 ; INIT 5 cpuc = & __get_cpu_var ( cpu_hw_events ) ASSIGN 6 cpuc = & __get_cpu_var ( cpu_hw_events ) LVAL 7 cpuc NAME 8 cpuc LEAF_NODE 9 cpuc ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & __get_cpu_var ( cpu_hw_events ) UNARY_EXPR 8 & __get_cpu_var ( cpu_hw_events ) UNARY_OPERATOR 9 & LEAF_NODE 10 & FUNCTION_CALL 9 __get_cpu_var ( cpu_hw_events ) CALLEE 10 __get_cpu_var LEAF_NODE 11 __get_cpu_var LEAF_NODE 10 ( ARGUMENT 10 cpu_hw_events FIELD 11 cpu_hw_events LEAF_NODE 12 cpu_hw_events LEAF_NODE 10 ) LEAF_NODE 4 ; SIMPLE_DECL 3 int idx ; VAR_DECL 4 int idx TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 idx LEAF_NODE 6 idx LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 idx = 0 ; EXPR 5 idx = 0 ASSIGN 6 idx = 0 LVAL 7 idx FIELD 8 idx LEAF_NODE 9 idx ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 idx < x86_pmu . num_counters EXPR 5 idx < x86_pmu . num_counters FIELD 6 idx LEAF_NODE 7 idx REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 x86_pmu . num_counters LEAF_NODE 7 x86_pmu LEAF_NODE 7 . LEAF_NODE 7 num_counters LEAF_NODE 4 ; FOR_EXPR 4 idx ++ EXPR 5 idx ++ FIELD 6 idx ++ LEAF_NODE 7 idx LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 struct perf_event * event ; event = cpuc -> events [ idx ] ; VAR_DECL 7 struct perf_event * event ; event = cpuc -> events [ idx ] TYPE 8 struct perf_event * TYPE_NAME 9 struct perf_event LEAF_NODE 10 struct LEAF_NODE 10 perf_event POINTER 9 * LEAF_NODE 10 * NAME 8 event LEAF_NODE 9 event LEAF_NODE 8 ; INIT 8 event = cpuc -> events [ idx ] ASSIGN 9 event = cpuc -> events [ idx ] LVAL 10 event NAME 11 event LEAF_NODE 12 event ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 cpuc -> events [ idx ] FIELD 11 cpuc -> events [ idx ] LEAF_NODE 12 cpuc LEAF_NODE 12 -> LEAF_NODE 12 events LEAF_NODE 12 [ EXPR 12 idx FIELD 13 idx LEAF_NODE 14 idx LEAF_NODE 12 ] LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! test_bit ( idx , cpuc -> active_mask ) EXPR 8 ! test_bit ( idx , cpuc -> active_mask ) UNARY_EXPR 9 ! test_bit ( idx , cpuc -> active_mask ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 test_bit ( idx , cpuc -> active_mask ) CALLEE 11 test_bit LEAF_NODE 12 test_bit LEAF_NODE 11 ( ARGUMENT 11 idx FIELD 12 idx LEAF_NODE 13 idx LEAF_NODE 11 , ARGUMENT 11 cpuc -> active_mask FIELD 12 cpuc -> active_mask LEAF_NODE 13 cpuc LEAF_NODE 13 -> LEAF_NODE 13 active_mask LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 continue DESTINATION ; KEYWORD 9 continue LEAF_NODE 10 continue LEAF_NODE 9 DESTINATION LEAF_NODE 9 ; EXPR_STATEMENT 6 p4_pmu_disable_event ( event ) ; EXPR 7 p4_pmu_disable_event ( event ) FUNCTION_CALL 8 p4_pmu_disable_event ( event ) CALLEE 9 p4_pmu_disable_event LEAF_NODE 10 p4_pmu_disable_event LEAF_NODE 9 ( ARGUMENT 9 event FIELD 10 event LEAF_NODE 11 event LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 p4_pmu_disable_pebs ( ) ; EXPR 4 p4_pmu_disable_pebs ( ) FUNCTION_CALL 5 p4_pmu_disable_pebs ( ) CALLEE 6 p4_pmu_disable_pebs LEAF_NODE 7 p4_pmu_disable_pebs LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 p4_pmu_enable_pebs LEAF_NODE 3 p4_pmu_enable_pebs PARAMETER_LIST 2 ( u64 config ) LEAF_NODE 3 ( PARAMETER_DECL 3 u64 config TYPE 4 u64 TYPE_NAME 5 u64 LEAF_NODE 6 u64 NAME 4 config LEAF_NODE 5 config LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct p4_pebs_bind * bind ; VAR_DECL 4 struct p4_pebs_bind * bind TYPE 5 struct p4_pebs_bind * TYPE_NAME 6 struct p4_pebs_bind LEAF_NODE 7 struct LEAF_NODE 7 p4_pebs_bind POINTER 6 * LEAF_NODE 7 * NAME 5 bind LEAF_NODE 6 bind LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int idx ; VAR_DECL 4 unsigned int idx TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 idx LEAF_NODE 6 idx LEAF_NODE 4 ; EXPR_STATEMENT 3 BUILD_BUG_ON ( P4_PEBS_METRIC__max > P4_PEBS_CONFIG_METRIC_MASK ) ; EXPR 4 BUILD_BUG_ON ( P4_PEBS_METRIC__max > P4_PEBS_CONFIG_METRIC_MASK ) FUNCTION_CALL 5 BUILD_BUG_ON ( P4_PEBS_METRIC__max > P4_PEBS_CONFIG_METRIC_MASK ) CALLEE 6 BUILD_BUG_ON LEAF_NODE 7 BUILD_BUG_ON LEAF_NODE 6 ( ARGUMENT 6 P4_PEBS_METRIC__max > P4_PEBS_CONFIG_METRIC_MASK FIELD 7 P4_PEBS_METRIC__max LEAF_NODE 8 P4_PEBS_METRIC__max REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 P4_PEBS_CONFIG_METRIC_MASK LEAF_NODE 8 P4_PEBS_CONFIG_METRIC_MASK LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 idx = p4_config_unpack_metric ( config ) ; EXPR 4 idx = p4_config_unpack_metric ( config ) ASSIGN 5 idx = p4_config_unpack_metric ( config ) LVAL 6 idx FIELD 7 idx LEAF_NODE 8 idx ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 p4_config_unpack_metric ( config ) FUNCTION_CALL 7 p4_config_unpack_metric ( config ) CALLEE 8 p4_config_unpack_metric LEAF_NODE 9 p4_config_unpack_metric LEAF_NODE 8 ( ARGUMENT 8 config FIELD 9 config LEAF_NODE 10 config LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 idx == P4_PEBS_METRIC__none EXPR 5 idx == P4_PEBS_METRIC__none FIELD 6 idx LEAF_NODE 7 idx EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 P4_PEBS_METRIC__none LEAF_NODE 7 P4_PEBS_METRIC__none LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return DESTINATION ; KEYWORD 6 return LEAF_NODE 7 return LEAF_NODE 6 DESTINATION LEAF_NODE 6 ; EXPR_STATEMENT 3 bind = & p4_pebs_bind_map [ idx ] ; EXPR 4 bind = & p4_pebs_bind_map [ idx ] ASSIGN 5 bind = & p4_pebs_bind_map [ idx ] LVAL 6 bind FIELD 7 bind LEAF_NODE 8 bind ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 & p4_pebs_bind_map [ idx ] UNARY_EXPR 7 & p4_pebs_bind_map [ idx ] UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 p4_pebs_bind_map [ idx ] LEAF_NODE 9 p4_pebs_bind_map LEAF_NODE 9 [ EXPR 9 idx FIELD 10 idx LEAF_NODE 11 idx LEAF_NODE 9 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 ( void ) checking_wrmsrl ( MSR_IA32_PEBS_ENABLE , ( u64 ) bind -> metric_pebs ) ; EXPR 4 ( void ) checking_wrmsrl ( MSR_IA32_PEBS_ENABLE , ( u64 ) bind -> metric_pebs ) LEAF_NODE 5 ( TYPE_NAME 5 void LEAF_NODE 6 void LEAF_NODE 5 ) FUNCTION_CALL 5 checking_wrmsrl ( MSR_IA32_PEBS_ENABLE , ( u64 ) bind -> metric_pebs ) CALLEE 6 checking_wrmsrl LEAF_NODE 7 checking_wrmsrl LEAF_NODE 6 ( ARGUMENT 6 MSR_IA32_PEBS_ENABLE FIELD 7 MSR_IA32_PEBS_ENABLE LEAF_NODE 8 MSR_IA32_PEBS_ENABLE LEAF_NODE 6 , ARGUMENT 6 ( u64 ) bind -> metric_pebs LEAF_NODE 7 ( TYPE_NAME 7 u64 LEAF_NODE 8 u64 LEAF_NODE 7 ) FIELD 7 bind -> metric_pebs LEAF_NODE 8 bind LEAF_NODE 8 -> LEAF_NODE 8 metric_pebs LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ( void ) checking_wrmsrl ( MSR_P4_PEBS_MATRIX_VERT , ( u64 ) bind -> metric_vert ) ; EXPR 4 ( void ) checking_wrmsrl ( MSR_P4_PEBS_MATRIX_VERT , ( u64 ) bind -> metric_vert ) LEAF_NODE 5 ( TYPE_NAME 5 void LEAF_NODE 6 void LEAF_NODE 5 ) FUNCTION_CALL 5 checking_wrmsrl ( MSR_P4_PEBS_MATRIX_VERT , ( u64 ) bind -> metric_vert ) CALLEE 6 checking_wrmsrl LEAF_NODE 7 checking_wrmsrl LEAF_NODE 6 ( ARGUMENT 6 MSR_P4_PEBS_MATRIX_VERT FIELD 7 MSR_P4_PEBS_MATRIX_VERT LEAF_NODE 8 MSR_P4_PEBS_MATRIX_VERT LEAF_NODE 6 , ARGUMENT 6 ( u64 ) bind -> metric_vert LEAF_NODE 7 ( TYPE_NAME 7 u64 LEAF_NODE 8 u64 LEAF_NODE 7 ) FIELD 7 bind -> metric_vert LEAF_NODE 8 bind LEAF_NODE 8 -> LEAF_NODE 8 metric_vert LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 p4_pmu_enable_event LEAF_NODE 3 p4_pmu_enable_event PARAMETER_LIST 2 ( struct perf_event * event ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct perf_event * event TYPE 4 struct perf_event * TYPE_NAME 5 struct perf_event LEAF_NODE 6 struct LEAF_NODE 6 perf_event POINTER 5 * LEAF_NODE 6 * NAME 4 event LEAF_NODE 5 event LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct hw_perf_event * hwc ; hwc = & event -> hw ; VAR_DECL 4 struct hw_perf_event * hwc ; hwc = & event -> hw TYPE 5 struct hw_perf_event * TYPE_NAME 6 struct hw_perf_event LEAF_NODE 7 struct LEAF_NODE 7 hw_perf_event POINTER 6 * LEAF_NODE 7 * NAME 5 hwc LEAF_NODE 6 hwc LEAF_NODE 5 ; INIT 5 hwc = & event -> hw ASSIGN 6 hwc = & event -> hw LVAL 7 hwc NAME 8 hwc LEAF_NODE 9 hwc ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & event -> hw UNARY_EXPR 8 & event -> hw UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 event -> hw LEAF_NODE 10 event LEAF_NODE 10 -> LEAF_NODE 10 hw LEAF_NODE 4 ; SIMPLE_DECL 3 int thread ; thread = p4_ht_config_thread ( hwc -> config ) ; VAR_DECL 4 int thread ; thread = p4_ht_config_thread ( hwc -> config ) TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 thread LEAF_NODE 6 thread LEAF_NODE 5 ; INIT 5 thread = p4_ht_config_thread ( hwc -> config ) ASSIGN 6 thread = p4_ht_config_thread ( hwc -> config ) LVAL 7 thread NAME 8 thread LEAF_NODE 9 thread ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 p4_ht_config_thread ( hwc -> config ) FUNCTION_CALL 8 p4_ht_config_thread ( hwc -> config ) CALLEE 9 p4_ht_config_thread LEAF_NODE 10 p4_ht_config_thread LEAF_NODE 9 ( ARGUMENT 9 hwc -> config FIELD 10 hwc -> config LEAF_NODE 11 hwc LEAF_NODE 11 -> LEAF_NODE 11 config LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 u64 escr_conf ; escr_conf = p4_config_unpack_escr ( p4_clear_ht_bit ( hwc -> config ) ) ; VAR_DECL 4 u64 escr_conf ; escr_conf = p4_config_unpack_escr ( p4_clear_ht_bit ( hwc -> config ) ) TYPE 5 u64 TYPE_NAME 6 u64 LEAF_NODE 7 u64 NAME 5 escr_conf LEAF_NODE 6 escr_conf LEAF_NODE 5 ; INIT 5 escr_conf = p4_config_unpack_escr ( p4_clear_ht_bit ( hwc -> config ) ) ASSIGN 6 escr_conf = p4_config_unpack_escr ( p4_clear_ht_bit ( hwc -> config ) ) LVAL 7 escr_conf NAME 8 escr_conf LEAF_NODE 9 escr_conf ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 p4_config_unpack_escr ( p4_clear_ht_bit ( hwc -> config ) ) FUNCTION_CALL 8 p4_config_unpack_escr ( p4_clear_ht_bit ( hwc -> config ) ) CALLEE 9 p4_config_unpack_escr LEAF_NODE 10 p4_config_unpack_escr LEAF_NODE 9 ( ARGUMENT 9 p4_clear_ht_bit ( hwc -> config ) FUNCTION_CALL 10 p4_clear_ht_bit ( hwc -> config ) CALLEE 11 p4_clear_ht_bit LEAF_NODE 12 p4_clear_ht_bit LEAF_NODE 11 ( ARGUMENT 11 hwc -> config FIELD 12 hwc -> config LEAF_NODE 13 hwc LEAF_NODE 13 -> LEAF_NODE 13 config LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int idx ; idx = p4_config_unpack_event ( hwc -> config ) ; VAR_DECL 4 unsigned int idx ; idx = p4_config_unpack_event ( hwc -> config ) TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 idx LEAF_NODE 6 idx LEAF_NODE 5 ; INIT 5 idx = p4_config_unpack_event ( hwc -> config ) ASSIGN 6 idx = p4_config_unpack_event ( hwc -> config ) LVAL 7 idx NAME 8 idx LEAF_NODE 9 idx ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 p4_config_unpack_event ( hwc -> config ) FUNCTION_CALL 8 p4_config_unpack_event ( hwc -> config ) CALLEE 9 p4_config_unpack_event LEAF_NODE 10 p4_config_unpack_event LEAF_NODE 9 ( ARGUMENT 9 hwc -> config FIELD 10 hwc -> config LEAF_NODE 11 hwc LEAF_NODE 11 -> LEAF_NODE 11 config LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 struct p4_event_bind * bind ; VAR_DECL 4 struct p4_event_bind * bind TYPE 5 struct p4_event_bind * TYPE_NAME 6 struct p4_event_bind LEAF_NODE 7 struct LEAF_NODE 7 p4_event_bind POINTER 6 * LEAF_NODE 7 * NAME 5 bind LEAF_NODE 6 bind LEAF_NODE 4 ; SIMPLE_DECL 3 u64 escr_addr , u64 cccr ; INIT_DECL_LIST 4 u64 escr_addr , u64 cccr VAR_DECL 5 u64 escr_addr TYPE 6 u64 TYPE_NAME 7 u64 LEAF_NODE 8 u64 NAME 6 escr_addr LEAF_NODE 7 escr_addr LEAF_NODE 5 , VAR_DECL 5 u64 cccr TYPE 6 u64 TYPE_NAME 7 u64 LEAF_NODE 8 u64 NAME 6 cccr LEAF_NODE 7 cccr LEAF_NODE 4 ; EXPR_STATEMENT 3 bind = & p4_event_bind_map [ idx ] ; EXPR 4 bind = & p4_event_bind_map [ idx ] ASSIGN 5 bind = & p4_event_bind_map [ idx ] LVAL 6 bind FIELD 7 bind LEAF_NODE 8 bind ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 & p4_event_bind_map [ idx ] UNARY_EXPR 7 & p4_event_bind_map [ idx ] UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 p4_event_bind_map [ idx ] LEAF_NODE 9 p4_event_bind_map LEAF_NODE 9 [ EXPR 9 idx FIELD 10 idx LEAF_NODE 11 idx LEAF_NODE 9 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 escr_addr = ( u64 ) bind -> escr_msr [ thread ] ; EXPR 4 escr_addr = ( u64 ) bind -> escr_msr [ thread ] ASSIGN 5 escr_addr = ( u64 ) bind -> escr_msr [ thread ] LVAL 6 escr_addr FIELD 7 escr_addr LEAF_NODE 8 escr_addr ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( u64 ) bind -> escr_msr [ thread ] LEAF_NODE 7 ( TYPE_NAME 7 u64 LEAF_NODE 8 u64 LEAF_NODE 7 ) FIELD 7 bind -> escr_msr [ thread ] LEAF_NODE 8 bind LEAF_NODE 8 -> LEAF_NODE 8 escr_msr LEAF_NODE 8 [ EXPR 8 thread FIELD 9 thread LEAF_NODE 10 thread LEAF_NODE 8 ] LEAF_NODE 4 ; EXPR_STATEMENT 3 WARN_ON_ONCE ( p4_is_event_cascaded ( hwc -> config ) ) ; EXPR 4 WARN_ON_ONCE ( p4_is_event_cascaded ( hwc -> config ) ) FUNCTION_CALL 5 WARN_ON_ONCE ( p4_is_event_cascaded ( hwc -> config ) ) CALLEE 6 WARN_ON_ONCE LEAF_NODE 7 WARN_ON_ONCE LEAF_NODE 6 ( ARGUMENT 6 p4_is_event_cascaded ( hwc -> config ) FUNCTION_CALL 7 p4_is_event_cascaded ( hwc -> config ) CALLEE 8 p4_is_event_cascaded LEAF_NODE 9 p4_is_event_cascaded LEAF_NODE 8 ( ARGUMENT 8 hwc -> config FIELD 9 hwc -> config LEAF_NODE 10 hwc LEAF_NODE 10 -> LEAF_NODE 10 config LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 WARN_ON_ONCE ( hwc -> idx == 1 ) ; EXPR 4 WARN_ON_ONCE ( hwc -> idx == 1 ) FUNCTION_CALL 5 WARN_ON_ONCE ( hwc -> idx == 1 ) CALLEE 6 WARN_ON_ONCE LEAF_NODE 7 WARN_ON_ONCE LEAF_NODE 6 ( ARGUMENT 6 hwc -> idx == 1 FIELD 7 hwc -> idx LEAF_NODE 8 hwc LEAF_NODE 8 -> LEAF_NODE 8 idx EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 escr_conf &= ~P4_ESCR_EVENT_MASK ; EXPR 4 escr_conf &= ~P4_ESCR_EVENT_MASK ASSIGN 5 escr_conf &= ~P4_ESCR_EVENT_MASK LVAL 6 escr_conf FIELD 7 escr_conf LEAF_NODE 8 escr_conf ASSIGN_OP 6 &= LEAF_NODE 7 &= RVAL 6 ~P4_ESCR_EVENT_MASK FIELD 7 ~P4_ESCR_EVENT_MASK LEAF_NODE 8 ~P4_ESCR_EVENT_MASK LEAF_NODE 4 ; EXPR_STATEMENT 3 escr_conf |= P4_ESCR_EVENT ( P4_OPCODE_EVNT ( bind -> opcode ) ) ; EXPR 4 escr_conf |= P4_ESCR_EVENT ( P4_OPCODE_EVNT ( bind -> opcode ) ) ASSIGN 5 escr_conf |= P4_ESCR_EVENT ( P4_OPCODE_EVNT ( bind -> opcode ) ) LVAL 6 escr_conf FIELD 7 escr_conf LEAF_NODE 8 escr_conf ASSIGN_OP 6 |= LEAF_NODE 7 |= RVAL 6 P4_ESCR_EVENT ( P4_OPCODE_EVNT ( bind -> opcode ) ) FUNCTION_CALL 7 P4_ESCR_EVENT ( P4_OPCODE_EVNT ( bind -> opcode ) ) CALLEE 8 P4_ESCR_EVENT LEAF_NODE 9 P4_ESCR_EVENT LEAF_NODE 8 ( ARGUMENT 8 P4_OPCODE_EVNT ( bind -> opcode ) FUNCTION_CALL 9 P4_OPCODE_EVNT ( bind -> opcode ) CALLEE 10 P4_OPCODE_EVNT LEAF_NODE 11 P4_OPCODE_EVNT LEAF_NODE 10 ( ARGUMENT 10 bind -> opcode FIELD 11 bind -> opcode LEAF_NODE 12 bind LEAF_NODE 12 -> LEAF_NODE 12 opcode LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 cccr = p4_config_unpack_cccr ( hwc -> config ) ; EXPR 4 cccr = p4_config_unpack_cccr ( hwc -> config ) ASSIGN 5 cccr = p4_config_unpack_cccr ( hwc -> config ) LVAL 6 cccr FIELD 7 cccr LEAF_NODE 8 cccr ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 p4_config_unpack_cccr ( hwc -> config ) FUNCTION_CALL 7 p4_config_unpack_cccr ( hwc -> config ) CALLEE 8 p4_config_unpack_cccr LEAF_NODE 9 p4_config_unpack_cccr LEAF_NODE 8 ( ARGUMENT 8 hwc -> config FIELD 9 hwc -> config LEAF_NODE 10 hwc LEAF_NODE 10 -> LEAF_NODE 10 config LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 p4_pmu_enable_pebs ( hwc -> config ) ; EXPR 4 p4_pmu_enable_pebs ( hwc -> config ) FUNCTION_CALL 5 p4_pmu_enable_pebs ( hwc -> config ) CALLEE 6 p4_pmu_enable_pebs LEAF_NODE 7 p4_pmu_enable_pebs LEAF_NODE 6 ( ARGUMENT 6 hwc -> config FIELD 7 hwc -> config LEAF_NODE 8 hwc LEAF_NODE 8 -> LEAF_NODE 8 config LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ( void ) checking_wrmsrl ( escr_addr , escr_conf ) ; EXPR 4 ( void ) checking_wrmsrl ( escr_addr , escr_conf ) LEAF_NODE 5 ( TYPE_NAME 5 void LEAF_NODE 6 void LEAF_NODE 5 ) FUNCTION_CALL 5 checking_wrmsrl ( escr_addr , escr_conf ) CALLEE 6 checking_wrmsrl LEAF_NODE 7 checking_wrmsrl LEAF_NODE 6 ( ARGUMENT 6 escr_addr FIELD 7 escr_addr LEAF_NODE 8 escr_addr LEAF_NODE 6 , ARGUMENT 6 escr_conf FIELD 7 escr_conf LEAF_NODE 8 escr_conf LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ( void ) checking_wrmsrl ( hwc -> config_base , ( cccr & ~P4_CCCR_RESERVED ) | P4_CCCR_ENABLE ) ; EXPR 4 ( void ) checking_wrmsrl ( hwc -> config_base , ( cccr & ~P4_CCCR_RESERVED ) | P4_CCCR_ENABLE ) LEAF_NODE 5 ( TYPE_NAME 5 void LEAF_NODE 6 void LEAF_NODE 5 ) FUNCTION_CALL 5 checking_wrmsrl ( hwc -> config_base , ( cccr & ~P4_CCCR_RESERVED ) | P4_CCCR_ENABLE ) CALLEE 6 checking_wrmsrl LEAF_NODE 7 checking_wrmsrl LEAF_NODE 6 ( ARGUMENT 6 hwc -> config_base FIELD 7 hwc -> config_base LEAF_NODE 8 hwc LEAF_NODE 8 -> LEAF_NODE 8 config_base LEAF_NODE 6 , ARGUMENT 6 ( cccr & ~P4_CCCR_RESERVED ) | P4_CCCR_ENABLE BIT_OR 7 ( cccr & ~P4_CCCR_RESERVED ) | P4_CCCR_ENABLE BIT_OR_ELEM 8 ( cccr & ~P4_CCCR_RESERVED ) LEAF_NODE 9 ( FIELD 9 cccr LEAF_NODE 10 cccr LEAF_NODE 9 & FIELD 9 ~P4_CCCR_RESERVED LEAF_NODE 10 ~P4_CCCR_RESERVED LEAF_NODE 9 ) LEAF_NODE 8 | BIT_OR_ELEM 8 P4_CCCR_ENABLE FIELD 9 P4_CCCR_ENABLE LEAF_NODE 10 P4_CCCR_ENABLE LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 p4_pmu_enable_all LEAF_NODE 3 p4_pmu_enable_all PARAMETER_LIST 2 ( int added ) LEAF_NODE 3 ( PARAMETER_DECL 3 int added TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 added LEAF_NODE 5 added LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct cpu_hw_events * cpuc ; cpuc = & __get_cpu_var ( cpu_hw_events ) ; VAR_DECL 4 struct cpu_hw_events * cpuc ; cpuc = & __get_cpu_var ( cpu_hw_events ) TYPE 5 struct cpu_hw_events * TYPE_NAME 6 struct cpu_hw_events LEAF_NODE 7 struct LEAF_NODE 7 cpu_hw_events POINTER 6 * LEAF_NODE 7 * NAME 5 cpuc LEAF_NODE 6 cpuc LEAF_NODE 5 ; INIT 5 cpuc = & __get_cpu_var ( cpu_hw_events ) ASSIGN 6 cpuc = & __get_cpu_var ( cpu_hw_events ) LVAL 7 cpuc NAME 8 cpuc LEAF_NODE 9 cpuc ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & __get_cpu_var ( cpu_hw_events ) UNARY_EXPR 8 & __get_cpu_var ( cpu_hw_events ) UNARY_OPERATOR 9 & LEAF_NODE 10 & FUNCTION_CALL 9 __get_cpu_var ( cpu_hw_events ) CALLEE 10 __get_cpu_var LEAF_NODE 11 __get_cpu_var LEAF_NODE 10 ( ARGUMENT 10 cpu_hw_events FIELD 11 cpu_hw_events LEAF_NODE 12 cpu_hw_events LEAF_NODE 10 ) LEAF_NODE 4 ; SIMPLE_DECL 3 int idx ; VAR_DECL 4 int idx TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 idx LEAF_NODE 6 idx LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 idx = 0 ; EXPR 5 idx = 0 ASSIGN 6 idx = 0 LVAL 7 idx FIELD 8 idx LEAF_NODE 9 idx ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 idx < x86_pmu . num_counters EXPR 5 idx < x86_pmu . num_counters FIELD 6 idx LEAF_NODE 7 idx REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 x86_pmu . num_counters LEAF_NODE 7 x86_pmu LEAF_NODE 7 . LEAF_NODE 7 num_counters LEAF_NODE 4 ; FOR_EXPR 4 idx ++ EXPR 5 idx ++ FIELD 6 idx ++ LEAF_NODE 7 idx LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 struct perf_event * event ; event = cpuc -> events [ idx ] ; VAR_DECL 7 struct perf_event * event ; event = cpuc -> events [ idx ] TYPE 8 struct perf_event * TYPE_NAME 9 struct perf_event LEAF_NODE 10 struct LEAF_NODE 10 perf_event POINTER 9 * LEAF_NODE 10 * NAME 8 event LEAF_NODE 9 event LEAF_NODE 8 ; INIT 8 event = cpuc -> events [ idx ] ASSIGN 9 event = cpuc -> events [ idx ] LVAL 10 event NAME 11 event LEAF_NODE 12 event ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 cpuc -> events [ idx ] FIELD 11 cpuc -> events [ idx ] LEAF_NODE 12 cpuc LEAF_NODE 12 -> LEAF_NODE 12 events LEAF_NODE 12 [ EXPR 12 idx FIELD 13 idx LEAF_NODE 14 idx LEAF_NODE 12 ] LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! test_bit ( idx , cpuc -> active_mask ) EXPR 8 ! test_bit ( idx , cpuc -> active_mask ) UNARY_EXPR 9 ! test_bit ( idx , cpuc -> active_mask ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 test_bit ( idx , cpuc -> active_mask ) CALLEE 11 test_bit LEAF_NODE 12 test_bit LEAF_NODE 11 ( ARGUMENT 11 idx FIELD 12 idx LEAF_NODE 13 idx LEAF_NODE 11 , ARGUMENT 11 cpuc -> active_mask FIELD 12 cpuc -> active_mask LEAF_NODE 13 cpuc LEAF_NODE 13 -> LEAF_NODE 13 active_mask LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 continue DESTINATION ; KEYWORD 9 continue LEAF_NODE 10 continue LEAF_NODE 9 DESTINATION LEAF_NODE 9 ; EXPR_STATEMENT 6 p4_pmu_enable_event ( event ) ; EXPR 7 p4_pmu_enable_event ( event ) FUNCTION_CALL 8 p4_pmu_enable_event ( event ) CALLEE 9 p4_pmu_enable_event LEAF_NODE 10 p4_pmu_enable_event LEAF_NODE 9 ( ARGUMENT 9 event FIELD 10 event LEAF_NODE 11 event LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 p4_pmu_handle_irq LEAF_NODE 3 p4_pmu_handle_irq PARAMETER_LIST 2 ( struct pt_regs * regs ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct pt_regs * regs TYPE 4 struct pt_regs * TYPE_NAME 5 struct pt_regs LEAF_NODE 6 struct LEAF_NODE 6 pt_regs POINTER 5 * LEAF_NODE 6 * NAME 4 regs LEAF_NODE 5 regs LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct perf_sample_data data ; VAR_DECL 4 struct perf_sample_data data TYPE 5 struct perf_sample_data TYPE_NAME 6 struct perf_sample_data LEAF_NODE 7 struct LEAF_NODE 7 perf_sample_data NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 struct cpu_hw_events * cpuc ; VAR_DECL 4 struct cpu_hw_events * cpuc TYPE 5 struct cpu_hw_events * TYPE_NAME 6 struct cpu_hw_events LEAF_NODE 7 struct LEAF_NODE 7 cpu_hw_events POINTER 6 * LEAF_NODE 7 * NAME 5 cpuc LEAF_NODE 6 cpuc LEAF_NODE 4 ; SIMPLE_DECL 3 struct perf_event * event ; VAR_DECL 4 struct perf_event * event TYPE 5 struct perf_event * TYPE_NAME 6 struct perf_event LEAF_NODE 7 struct LEAF_NODE 7 perf_event POINTER 6 * LEAF_NODE 7 * NAME 5 event LEAF_NODE 6 event LEAF_NODE 4 ; SIMPLE_DECL 3 struct hw_perf_event * hwc ; VAR_DECL 4 struct hw_perf_event * hwc TYPE 5 struct hw_perf_event * TYPE_NAME 6 struct hw_perf_event LEAF_NODE 7 struct LEAF_NODE 7 hw_perf_event POINTER 6 * LEAF_NODE 7 * NAME 5 hwc LEAF_NODE 6 hwc LEAF_NODE 4 ; SIMPLE_DECL 3 int idx , int handled ; handled = 0 ; INIT_DECL_LIST 4 int idx , int handled ; handled = 0 VAR_DECL 5 int idx TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 idx LEAF_NODE 7 idx LEAF_NODE 5 , VAR_DECL 5 int handled ; handled = 0 TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 handled LEAF_NODE 7 handled LEAF_NODE 6 ; INIT 6 handled = 0 ASSIGN 7 handled = 0 LVAL 8 handled NAME 9 handled LEAF_NODE 10 handled ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 4 ; SIMPLE_DECL 3 u64 val ; VAR_DECL 4 u64 val TYPE 5 u64 TYPE_NAME 6 u64 LEAF_NODE 7 u64 NAME 5 val LEAF_NODE 6 val LEAF_NODE 4 ; EXPR_STATEMENT 3 perf_sample_data_init ( & data , 0 ) ; EXPR 4 perf_sample_data_init ( & data , 0 ) FUNCTION_CALL 5 perf_sample_data_init ( & data , 0 ) CALLEE 6 perf_sample_data_init LEAF_NODE 7 perf_sample_data_init LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 , ARGUMENT 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 cpuc = & __get_cpu_var ( cpu_hw_events ) ; EXPR 4 cpuc = & __get_cpu_var ( cpu_hw_events ) ASSIGN 5 cpuc = & __get_cpu_var ( cpu_hw_events ) LVAL 6 cpuc FIELD 7 cpuc LEAF_NODE 8 cpuc ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 & __get_cpu_var ( cpu_hw_events ) UNARY_EXPR 7 & __get_cpu_var ( cpu_hw_events ) UNARY_OPERATOR 8 & LEAF_NODE 9 & FUNCTION_CALL 8 __get_cpu_var ( cpu_hw_events ) CALLEE 9 __get_cpu_var LEAF_NODE 10 __get_cpu_var LEAF_NODE 9 ( ARGUMENT 9 cpu_hw_events FIELD 10 cpu_hw_events LEAF_NODE 11 cpu_hw_events LEAF_NODE 9 ) LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 idx = 0 ; EXPR 5 idx = 0 ASSIGN 6 idx = 0 LVAL 7 idx FIELD 8 idx LEAF_NODE 9 idx ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 idx < x86_pmu . num_counters EXPR 5 idx < x86_pmu . num_counters FIELD 6 idx LEAF_NODE 7 idx REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 x86_pmu . num_counters LEAF_NODE 7 x86_pmu LEAF_NODE 7 . LEAF_NODE 7 num_counters LEAF_NODE 4 ; FOR_EXPR 4 idx ++ EXPR 5 idx ++ FIELD 6 idx ++ LEAF_NODE 7 idx LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int overflow ; VAR_DECL 7 int overflow TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 overflow LEAF_NODE 9 overflow LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! test_bit ( idx , cpuc -> active_mask ) EXPR 8 ! test_bit ( idx , cpuc -> active_mask ) UNARY_EXPR 9 ! test_bit ( idx , cpuc -> active_mask ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 test_bit ( idx , cpuc -> active_mask ) CALLEE 11 test_bit LEAF_NODE 12 test_bit LEAF_NODE 11 ( ARGUMENT 11 idx FIELD 12 idx LEAF_NODE 13 idx LEAF_NODE 11 , ARGUMENT 11 cpuc -> active_mask FIELD 12 cpuc -> active_mask LEAF_NODE 13 cpuc LEAF_NODE 13 -> LEAF_NODE 13 active_mask LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 __test_and_clear_bit ( idx , cpuc -> running ) EXPR 11 __test_and_clear_bit ( idx , cpuc -> running ) FUNCTION_CALL 12 __test_and_clear_bit ( idx , cpuc -> running ) CALLEE 13 __test_and_clear_bit LEAF_NODE 14 __test_and_clear_bit LEAF_NODE 13 ( ARGUMENT 13 idx FIELD 14 idx LEAF_NODE 15 idx LEAF_NODE 13 , ARGUMENT 13 cpuc -> running FIELD 14 cpuc -> running LEAF_NODE 15 cpuc LEAF_NODE 15 -> LEAF_NODE 15 running LEAF_NODE 13 ) LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 handled ++ ; EXPR 12 handled ++ FIELD 13 handled ++ LEAF_NODE 14 handled LEAF_NODE 14 ++ LEAF_NODE 12 ; JUMP_STATEMENT 9 continue DESTINATION ; KEYWORD 10 continue LEAF_NODE 11 continue LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 event = cpuc -> events [ idx ] ; EXPR 7 event = cpuc -> events [ idx ] ASSIGN 8 event = cpuc -> events [ idx ] LVAL 9 event FIELD 10 event LEAF_NODE 11 event ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 cpuc -> events [ idx ] FIELD 10 cpuc -> events [ idx ] LEAF_NODE 11 cpuc LEAF_NODE 11 -> LEAF_NODE 11 events LEAF_NODE 11 [ EXPR 11 idx FIELD 12 idx LEAF_NODE 13 idx LEAF_NODE 11 ] LEAF_NODE 7 ; EXPR_STATEMENT 6 hwc = & event -> hw ; EXPR 7 hwc = & event -> hw ASSIGN 8 hwc = & event -> hw LVAL 9 hwc FIELD 10 hwc LEAF_NODE 11 hwc ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 & event -> hw UNARY_EXPR 10 & event -> hw UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 event -> hw LEAF_NODE 12 event LEAF_NODE 12 -> LEAF_NODE 12 hw LEAF_NODE 7 ; EXPR_STATEMENT 6 WARN_ON_ONCE ( hwc -> idx != idx ) ; EXPR 7 WARN_ON_ONCE ( hwc -> idx != idx ) FUNCTION_CALL 8 WARN_ON_ONCE ( hwc -> idx != idx ) CALLEE 9 WARN_ON_ONCE LEAF_NODE 10 WARN_ON_ONCE LEAF_NODE 9 ( ARGUMENT 9 hwc -> idx != idx FIELD 10 hwc -> idx LEAF_NODE 11 hwc LEAF_NODE 11 -> LEAF_NODE 11 idx EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 idx LEAF_NODE 11 idx LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 overflow = p4_pmu_clear_cccr_ovf ( hwc ) ; EXPR 7 overflow = p4_pmu_clear_cccr_ovf ( hwc ) ASSIGN 8 overflow = p4_pmu_clear_cccr_ovf ( hwc ) LVAL 9 overflow FIELD 10 overflow LEAF_NODE 11 overflow ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 p4_pmu_clear_cccr_ovf ( hwc ) FUNCTION_CALL 10 p4_pmu_clear_cccr_ovf ( hwc ) CALLEE 11 p4_pmu_clear_cccr_ovf LEAF_NODE 12 p4_pmu_clear_cccr_ovf LEAF_NODE 11 ( ARGUMENT 11 hwc FIELD 12 hwc LEAF_NODE 13 hwc LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 val = x86_perf_event_update ( event ) ; EXPR 7 val = x86_perf_event_update ( event ) ASSIGN 8 val = x86_perf_event_update ( event ) LVAL 9 val FIELD 10 val LEAF_NODE 11 val ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 x86_perf_event_update ( event ) FUNCTION_CALL 10 x86_perf_event_update ( event ) CALLEE 11 x86_perf_event_update LEAF_NODE 12 x86_perf_event_update LEAF_NODE 11 ( ARGUMENT 11 event FIELD 12 event LEAF_NODE 13 event LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 6 if LEAF_NODE 6 ( LEAF_NODE 6 ! LEAF_NODE 6 overflow LEAF_NODE 6 && LEAF_NODE 6 ( LEAF_NODE 6 val LEAF_NODE 6 & LEAF_NODE 6 ( LEAF_NODE 6 1UL LEAF_NODE 6 L LEAF_NODE 6 << LEAF_NODE 6 ( LEAF_NODE 6 x86_pmu LEAF_NODE 6 . LEAF_NODE 6 cntval_bits LEAF_NODE 6 - LEAF_NODE 6 1 LEAF_NODE 6 ) LEAF_NODE 6 ) LEAF_NODE 6 ) LEAF_NODE 6 ) JUMP_STATEMENT 6 continue DESTINATION ; KEYWORD 7 continue LEAF_NODE 8 continue LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; EXPR_STATEMENT 6 handled += overflow ; EXPR 7 handled += overflow ASSIGN 8 handled += overflow LVAL 9 handled FIELD 10 handled LEAF_NODE 11 handled ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 overflow FIELD 10 overflow LEAF_NODE 11 overflow LEAF_NODE 7 ; EXPR_STATEMENT 6 data . period = event -> hw . last_period ; EXPR 7 data . period = event -> hw . last_period ASSIGN 8 data . period = event -> hw . last_period LVAL 9 data . period FIELD 10 data . period LEAF_NODE 11 data LEAF_NODE 11 . LEAF_NODE 11 period ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 event -> hw . last_period FIELD 10 event -> hw . last_period LEAF_NODE 11 event LEAF_NODE 11 -> LEAF_NODE 11 hw LEAF_NODE 11 . LEAF_NODE 11 last_period LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! x86_perf_event_set_period ( event ) EXPR 8 ! x86_perf_event_set_period ( event ) UNARY_EXPR 9 ! x86_perf_event_set_period ( event ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 x86_perf_event_set_period ( event ) CALLEE 11 x86_perf_event_set_period LEAF_NODE 12 x86_perf_event_set_period LEAF_NODE 11 ( ARGUMENT 11 event FIELD 12 event LEAF_NODE 13 event LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 continue DESTINATION ; KEYWORD 9 continue LEAF_NODE 10 continue LEAF_NODE 9 DESTINATION LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 perf_event_overflow ( event , 1 , & data , regs ) EXPR 8 perf_event_overflow ( event , 1 , & data , regs ) FUNCTION_CALL 9 perf_event_overflow ( event , 1 , & data , regs ) CALLEE 10 perf_event_overflow LEAF_NODE 11 perf_event_overflow LEAF_NODE 10 ( ARGUMENT 10 event FIELD 11 event LEAF_NODE 12 event LEAF_NODE 10 , ARGUMENT 10 1 FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 , ARGUMENT 10 & data UNARY_EXPR 11 & data UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 data LEAF_NODE 13 data LEAF_NODE 10 , ARGUMENT 10 regs FIELD 11 regs LEAF_NODE 12 regs LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 x86_pmu_stop ( event , 0 ) ; EXPR 9 x86_pmu_stop ( event , 0 ) FUNCTION_CALL 10 x86_pmu_stop ( event , 0 ) CALLEE 11 x86_pmu_stop LEAF_NODE 12 x86_pmu_stop LEAF_NODE 11 ( ARGUMENT 11 event FIELD 12 event LEAF_NODE 13 event LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 handled EXPR 5 handled FIELD 6 handled LEAF_NODE 7 handled LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 inc_irq_stat ( apic_perf_irqs ) ; EXPR 6 inc_irq_stat ( apic_perf_irqs ) FUNCTION_CALL 7 inc_irq_stat ( apic_perf_irqs ) CALLEE 8 inc_irq_stat LEAF_NODE 9 inc_irq_stat LEAF_NODE 8 ( ARGUMENT 8 apic_perf_irqs FIELD 9 apic_perf_irqs LEAF_NODE 10 apic_perf_irqs LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 3 apic_write ( APIC_LVTPC , APIC_DM_NMI ) ; EXPR 4 apic_write ( APIC_LVTPC , APIC_DM_NMI ) FUNCTION_CALL 5 apic_write ( APIC_LVTPC , APIC_DM_NMI ) CALLEE 6 apic_write LEAF_NODE 7 apic_write LEAF_NODE 6 ( ARGUMENT 6 APIC_LVTPC FIELD 7 APIC_LVTPC LEAF_NODE 8 APIC_LVTPC LEAF_NODE 6 , ARGUMENT 6 APIC_DM_NMI FIELD 7 APIC_DM_NMI LEAF_NODE 8 APIC_DM_NMI LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return handled ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 handled EXPR 5 handled FIELD 6 handled LEAF_NODE 7 handled LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 p4_pmu_swap_config_ts LEAF_NODE 3 p4_pmu_swap_config_ts PARAMETER_LIST 2 ( struct hw_perf_event * hwc , int cpu ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct hw_perf_event * hwc TYPE 4 struct hw_perf_event * TYPE_NAME 5 struct hw_perf_event LEAF_NODE 6 struct LEAF_NODE 6 hw_perf_event POINTER 5 * LEAF_NODE 6 * NAME 4 hwc LEAF_NODE 5 hwc LEAF_NODE 3 , PARAMETER_DECL 3 int cpu TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 cpu LEAF_NODE 5 cpu LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 u32 escr , u32 cccr ; INIT_DECL_LIST 4 u32 escr , u32 cccr VAR_DECL 5 u32 escr TYPE 6 u32 TYPE_NAME 7 u32 LEAF_NODE 8 u32 NAME 6 escr LEAF_NODE 7 escr LEAF_NODE 5 , VAR_DECL 5 u32 cccr TYPE 6 u32 TYPE_NAME 7 u32 LEAF_NODE 8 u32 NAME 6 cccr LEAF_NODE 7 cccr LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! p4_should_swap_ts ( hwc -> config , cpu ) EXPR 5 ! p4_should_swap_ts ( hwc -> config , cpu ) UNARY_EXPR 6 ! p4_should_swap_ts ( hwc -> config , cpu ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 p4_should_swap_ts ( hwc -> config , cpu ) CALLEE 8 p4_should_swap_ts LEAF_NODE 9 p4_should_swap_ts LEAF_NODE 8 ( ARGUMENT 8 hwc -> config FIELD 9 hwc -> config LEAF_NODE 10 hwc LEAF_NODE 10 -> LEAF_NODE 10 config LEAF_NODE 8 , ARGUMENT 8 cpu FIELD 9 cpu LEAF_NODE 10 cpu LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return DESTINATION ; KEYWORD 6 return LEAF_NODE 7 return LEAF_NODE 6 DESTINATION LEAF_NODE 6 ; EXPR_STATEMENT 3 escr = p4_config_unpack_escr ( hwc -> config ) ; EXPR 4 escr = p4_config_unpack_escr ( hwc -> config ) ASSIGN 5 escr = p4_config_unpack_escr ( hwc -> config ) LVAL 6 escr FIELD 7 escr LEAF_NODE 8 escr ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 p4_config_unpack_escr ( hwc -> config ) FUNCTION_CALL 7 p4_config_unpack_escr ( hwc -> config ) CALLEE 8 p4_config_unpack_escr LEAF_NODE 9 p4_config_unpack_escr LEAF_NODE 8 ( ARGUMENT 8 hwc -> config FIELD 9 hwc -> config LEAF_NODE 10 hwc LEAF_NODE 10 -> LEAF_NODE 10 config LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 cccr = p4_config_unpack_cccr ( hwc -> config ) ; EXPR 4 cccr = p4_config_unpack_cccr ( hwc -> config ) ASSIGN 5 cccr = p4_config_unpack_cccr ( hwc -> config ) LVAL 6 cccr FIELD 7 cccr LEAF_NODE 8 cccr ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 p4_config_unpack_cccr ( hwc -> config ) FUNCTION_CALL 7 p4_config_unpack_cccr ( hwc -> config ) CALLEE 8 p4_config_unpack_cccr LEAF_NODE 9 p4_config_unpack_cccr LEAF_NODE 8 ( ARGUMENT 8 hwc -> config FIELD 9 hwc -> config LEAF_NODE 10 hwc LEAF_NODE 10 -> LEAF_NODE 10 config LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 p4_ht_thread ( cpu ) EXPR 5 p4_ht_thread ( cpu ) FUNCTION_CALL 6 p4_ht_thread ( cpu ) CALLEE 7 p4_ht_thread LEAF_NODE 8 p4_ht_thread LEAF_NODE 7 ( ARGUMENT 7 cpu FIELD 8 cpu LEAF_NODE 9 cpu LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 cccr &= ~P4_CCCR_OVF_PMI_T0 ; EXPR 7 cccr &= ~P4_CCCR_OVF_PMI_T0 ASSIGN 8 cccr &= ~P4_CCCR_OVF_PMI_T0 LVAL 9 cccr FIELD 10 cccr LEAF_NODE 11 cccr ASSIGN_OP 9 &= LEAF_NODE 10 &= RVAL 9 ~P4_CCCR_OVF_PMI_T0 FIELD 10 ~P4_CCCR_OVF_PMI_T0 LEAF_NODE 11 ~P4_CCCR_OVF_PMI_T0 LEAF_NODE 7 ; EXPR_STATEMENT 6 cccr |= P4_CCCR_OVF_PMI_T1 ; EXPR 7 cccr |= P4_CCCR_OVF_PMI_T1 ASSIGN 8 cccr |= P4_CCCR_OVF_PMI_T1 LVAL 9 cccr FIELD 10 cccr LEAF_NODE 11 cccr ASSIGN_OP 9 |= LEAF_NODE 10 |= RVAL 9 P4_CCCR_OVF_PMI_T1 FIELD 10 P4_CCCR_OVF_PMI_T1 LEAF_NODE 11 P4_CCCR_OVF_PMI_T1 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 escr & P4_ESCR_T0_OS EXPR 8 escr & P4_ESCR_T0_OS FIELD 9 escr LEAF_NODE 10 escr LEAF_NODE 9 & FIELD 9 P4_ESCR_T0_OS LEAF_NODE 10 P4_ESCR_T0_OS LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 escr &= ~P4_ESCR_T0_OS ; EXPR 10 escr &= ~P4_ESCR_T0_OS ASSIGN 11 escr &= ~P4_ESCR_T0_OS LVAL 12 escr FIELD 13 escr LEAF_NODE 14 escr ASSIGN_OP 12 &= LEAF_NODE 13 &= RVAL 12 ~P4_ESCR_T0_OS FIELD 13 ~P4_ESCR_T0_OS LEAF_NODE 14 ~P4_ESCR_T0_OS LEAF_NODE 10 ; EXPR_STATEMENT 9 escr |= P4_ESCR_T1_OS ; EXPR 10 escr |= P4_ESCR_T1_OS ASSIGN 11 escr |= P4_ESCR_T1_OS LVAL 12 escr FIELD 13 escr LEAF_NODE 14 escr ASSIGN_OP 12 |= LEAF_NODE 13 |= RVAL 12 P4_ESCR_T1_OS FIELD 13 P4_ESCR_T1_OS LEAF_NODE 14 P4_ESCR_T1_OS LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 escr & P4_ESCR_T0_USR EXPR 8 escr & P4_ESCR_T0_USR FIELD 9 escr LEAF_NODE 10 escr LEAF_NODE 9 & FIELD 9 P4_ESCR_T0_USR LEAF_NODE 10 P4_ESCR_T0_USR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 escr &= ~P4_ESCR_T0_USR ; EXPR 10 escr &= ~P4_ESCR_T0_USR ASSIGN 11 escr &= ~P4_ESCR_T0_USR LVAL 12 escr FIELD 13 escr LEAF_NODE 14 escr ASSIGN_OP 12 &= LEAF_NODE 13 &= RVAL 12 ~P4_ESCR_T0_USR FIELD 13 ~P4_ESCR_T0_USR LEAF_NODE 14 ~P4_ESCR_T0_USR LEAF_NODE 10 ; EXPR_STATEMENT 9 escr |= P4_ESCR_T1_USR ; EXPR 10 escr |= P4_ESCR_T1_USR ASSIGN 11 escr |= P4_ESCR_T1_USR LVAL 12 escr FIELD 13 escr LEAF_NODE 14 escr ASSIGN_OP 12 |= LEAF_NODE 13 |= RVAL 12 P4_ESCR_T1_USR FIELD 13 P4_ESCR_T1_USR LEAF_NODE 14 P4_ESCR_T1_USR LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 hwc -> config = p4_config_pack_escr ( escr ) ; EXPR 7 hwc -> config = p4_config_pack_escr ( escr ) ASSIGN 8 hwc -> config = p4_config_pack_escr ( escr ) LVAL 9 hwc -> config FIELD 10 hwc -> config LEAF_NODE 11 hwc LEAF_NODE 11 -> LEAF_NODE 11 config ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 p4_config_pack_escr ( escr ) FUNCTION_CALL 10 p4_config_pack_escr ( escr ) CALLEE 11 p4_config_pack_escr LEAF_NODE 12 p4_config_pack_escr LEAF_NODE 11 ( ARGUMENT 11 escr FIELD 12 escr LEAF_NODE 13 escr LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 hwc -> config |= p4_config_pack_cccr ( cccr ) ; EXPR 7 hwc -> config |= p4_config_pack_cccr ( cccr ) ASSIGN 8 hwc -> config |= p4_config_pack_cccr ( cccr ) LVAL 9 hwc -> config FIELD 10 hwc -> config LEAF_NODE 11 hwc LEAF_NODE 11 -> LEAF_NODE 11 config ASSIGN_OP 9 |= LEAF_NODE 10 |= RVAL 9 p4_config_pack_cccr ( cccr ) FUNCTION_CALL 10 p4_config_pack_cccr ( cccr ) CALLEE 11 p4_config_pack_cccr LEAF_NODE 12 p4_config_pack_cccr LEAF_NODE 11 ( ARGUMENT 11 cccr FIELD 12 cccr LEAF_NODE 13 cccr LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 hwc -> config |= P4_CONFIG_HT ; EXPR 7 hwc -> config |= P4_CONFIG_HT ASSIGN 8 hwc -> config |= P4_CONFIG_HT LVAL 9 hwc -> config FIELD 10 hwc -> config LEAF_NODE 11 hwc LEAF_NODE 11 -> LEAF_NODE 11 config ASSIGN_OP 9 |= LEAF_NODE 10 |= RVAL 9 P4_CONFIG_HT FIELD 10 P4_CONFIG_HT LEAF_NODE 11 P4_CONFIG_HT LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 cccr &= ~P4_CCCR_OVF_PMI_T1 ; EXPR 7 cccr &= ~P4_CCCR_OVF_PMI_T1 ASSIGN 8 cccr &= ~P4_CCCR_OVF_PMI_T1 LVAL 9 cccr FIELD 10 cccr LEAF_NODE 11 cccr ASSIGN_OP 9 &= LEAF_NODE 10 &= RVAL 9 ~P4_CCCR_OVF_PMI_T1 FIELD 10 ~P4_CCCR_OVF_PMI_T1 LEAF_NODE 11 ~P4_CCCR_OVF_PMI_T1 LEAF_NODE 7 ; EXPR_STATEMENT 6 cccr |= P4_CCCR_OVF_PMI_T0 ; EXPR 7 cccr |= P4_CCCR_OVF_PMI_T0 ASSIGN 8 cccr |= P4_CCCR_OVF_PMI_T0 LVAL 9 cccr FIELD 10 cccr LEAF_NODE 11 cccr ASSIGN_OP 9 |= LEAF_NODE 10 |= RVAL 9 P4_CCCR_OVF_PMI_T0 FIELD 10 P4_CCCR_OVF_PMI_T0 LEAF_NODE 11 P4_CCCR_OVF_PMI_T0 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 escr & P4_ESCR_T1_OS EXPR 8 escr & P4_ESCR_T1_OS FIELD 9 escr LEAF_NODE 10 escr LEAF_NODE 9 & FIELD 9 P4_ESCR_T1_OS LEAF_NODE 10 P4_ESCR_T1_OS LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 escr &= ~P4_ESCR_T1_OS ; EXPR 10 escr &= ~P4_ESCR_T1_OS ASSIGN 11 escr &= ~P4_ESCR_T1_OS LVAL 12 escr FIELD 13 escr LEAF_NODE 14 escr ASSIGN_OP 12 &= LEAF_NODE 13 &= RVAL 12 ~P4_ESCR_T1_OS FIELD 13 ~P4_ESCR_T1_OS LEAF_NODE 14 ~P4_ESCR_T1_OS LEAF_NODE 10 ; EXPR_STATEMENT 9 escr |= P4_ESCR_T0_OS ; EXPR 10 escr |= P4_ESCR_T0_OS ASSIGN 11 escr |= P4_ESCR_T0_OS LVAL 12 escr FIELD 13 escr LEAF_NODE 14 escr ASSIGN_OP 12 |= LEAF_NODE 13 |= RVAL 12 P4_ESCR_T0_OS FIELD 13 P4_ESCR_T0_OS LEAF_NODE 14 P4_ESCR_T0_OS LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 escr & P4_ESCR_T1_USR EXPR 8 escr & P4_ESCR_T1_USR FIELD 9 escr LEAF_NODE 10 escr LEAF_NODE 9 & FIELD 9 P4_ESCR_T1_USR LEAF_NODE 10 P4_ESCR_T1_USR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 escr &= ~P4_ESCR_T1_USR ; EXPR 10 escr &= ~P4_ESCR_T1_USR ASSIGN 11 escr &= ~P4_ESCR_T1_USR LVAL 12 escr FIELD 13 escr LEAF_NODE 14 escr ASSIGN_OP 12 &= LEAF_NODE 13 &= RVAL 12 ~P4_ESCR_T1_USR FIELD 13 ~P4_ESCR_T1_USR LEAF_NODE 14 ~P4_ESCR_T1_USR LEAF_NODE 10 ; EXPR_STATEMENT 9 escr |= P4_ESCR_T0_USR ; EXPR 10 escr |= P4_ESCR_T0_USR ASSIGN 11 escr |= P4_ESCR_T0_USR LVAL 12 escr FIELD 13 escr LEAF_NODE 14 escr ASSIGN_OP 12 |= LEAF_NODE 13 |= RVAL 12 P4_ESCR_T0_USR FIELD 13 P4_ESCR_T0_USR LEAF_NODE 14 P4_ESCR_T0_USR LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 hwc -> config = p4_config_pack_escr ( escr ) ; EXPR 7 hwc -> config = p4_config_pack_escr ( escr ) ASSIGN 8 hwc -> config = p4_config_pack_escr ( escr ) LVAL 9 hwc -> config FIELD 10 hwc -> config LEAF_NODE 11 hwc LEAF_NODE 11 -> LEAF_NODE 11 config ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 p4_config_pack_escr ( escr ) FUNCTION_CALL 10 p4_config_pack_escr ( escr ) CALLEE 11 p4_config_pack_escr LEAF_NODE 12 p4_config_pack_escr LEAF_NODE 11 ( ARGUMENT 11 escr FIELD 12 escr LEAF_NODE 13 escr LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 hwc -> config |= p4_config_pack_cccr ( cccr ) ; EXPR 7 hwc -> config |= p4_config_pack_cccr ( cccr ) ASSIGN 8 hwc -> config |= p4_config_pack_cccr ( cccr ) LVAL 9 hwc -> config FIELD 10 hwc -> config LEAF_NODE 11 hwc LEAF_NODE 11 -> LEAF_NODE 11 config ASSIGN_OP 9 |= LEAF_NODE 10 |= RVAL 9 p4_config_pack_cccr ( cccr ) FUNCTION_CALL 10 p4_config_pack_cccr ( cccr ) CALLEE 11 p4_config_pack_cccr LEAF_NODE 12 p4_config_pack_cccr LEAF_NODE 11 ( ARGUMENT 11 cccr FIELD 12 cccr LEAF_NODE 13 cccr LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 hwc -> config &= ~P4_CONFIG_HT ; EXPR 7 hwc -> config &= ~P4_CONFIG_HT ASSIGN 8 hwc -> config &= ~P4_CONFIG_HT LVAL 9 hwc -> config FIELD 10 hwc -> config LEAF_NODE 11 hwc LEAF_NODE 11 -> LEAF_NODE 11 config ASSIGN_OP 9 &= LEAF_NODE 10 &= RVAL 9 ~P4_CONFIG_HT FIELD 10 ~P4_CONFIG_HT LEAF_NODE 11 ~P4_CONFIG_HT LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 p4_get_escr_idx LEAF_NODE 3 p4_get_escr_idx PARAMETER_LIST 2 ( unsigned int addr ) LEAF_NODE 3 ( PARAMETER_DECL 3 unsigned int addr TYPE 4 unsigned int TYPE_NAME 5 unsigned int LEAF_NODE 6 unsigned LEAF_NODE 6 int NAME 4 addr LEAF_NODE 5 addr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned int idx ; idx = P4_ESCR_MSR_IDX ( addr ) ; VAR_DECL 4 unsigned int idx ; idx = P4_ESCR_MSR_IDX ( addr ) TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 idx LEAF_NODE 6 idx LEAF_NODE 5 ; INIT 5 idx = P4_ESCR_MSR_IDX ( addr ) ASSIGN 6 idx = P4_ESCR_MSR_IDX ( addr ) LVAL 7 idx NAME 8 idx LEAF_NODE 9 idx ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 P4_ESCR_MSR_IDX ( addr ) FUNCTION_CALL 8 P4_ESCR_MSR_IDX ( addr ) CALLEE 9 P4_ESCR_MSR_IDX LEAF_NODE 10 P4_ESCR_MSR_IDX LEAF_NODE 9 ( ARGUMENT 9 addr FIELD 10 addr LEAF_NODE 11 addr LEAF_NODE 9 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 unlikely ( idx >= P4_ESCR_MSR_TABLE_SIZE || ! p4_escr_table [ idx ] || p4_escr_table [ idx ] != addr ) EXPR 5 unlikely ( idx >= P4_ESCR_MSR_TABLE_SIZE || ! p4_escr_table [ idx ] || p4_escr_table [ idx ] != addr ) FUNCTION_CALL 6 unlikely ( idx >= P4_ESCR_MSR_TABLE_SIZE || ! p4_escr_table [ idx ] || p4_escr_table [ idx ] != addr ) CALLEE 7 unlikely LEAF_NODE 8 unlikely LEAF_NODE 7 ( ARGUMENT 7 idx >= P4_ESCR_MSR_TABLE_SIZE || ! p4_escr_table [ idx ] || p4_escr_table [ idx ] != addr OR 8 idx >= P4_ESCR_MSR_TABLE_SIZE || ! p4_escr_table [ idx ] || p4_escr_table [ idx ] != addr EXPR 9 idx >= P4_ESCR_MSR_TABLE_SIZE FIELD 10 idx LEAF_NODE 11 idx REL_OPERATOR 10 >= LEAF_NODE 11 >= FIELD 10 P4_ESCR_MSR_TABLE_SIZE LEAF_NODE 11 P4_ESCR_MSR_TABLE_SIZE LEAF_NODE 9 || EXPR 9 ! p4_escr_table [ idx ] || p4_escr_table [ idx ] != addr OR 10 ! p4_escr_table [ idx ] || p4_escr_table [ idx ] != addr EXPR 11 ! p4_escr_table [ idx ] UNARY_EXPR 12 ! p4_escr_table [ idx ] UNARY_OPERATOR 13 ! LEAF_NODE 14 ! FIELD 13 p4_escr_table [ idx ] LEAF_NODE 14 p4_escr_table LEAF_NODE 14 [ EXPR 14 idx FIELD 15 idx LEAF_NODE 16 idx LEAF_NODE 14 ] LEAF_NODE 11 || EXPR 11 p4_escr_table [ idx ] != addr FIELD 12 p4_escr_table [ idx ] LEAF_NODE 13 p4_escr_table LEAF_NODE 13 [ EXPR 13 idx FIELD 14 idx LEAF_NODE 15 idx LEAF_NODE 13 ] EQ_OPERATOR 12 != LEAF_NODE 13 != FIELD 12 addr LEAF_NODE 13 addr LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 WARN_ONCE ( 1 , \"P4 PMU: Wrong address passed: %x\\n\" , addr ) ; EXPR 7 WARN_ONCE ( 1 , \"P4 PMU: Wrong address passed: %x\\n\" , addr ) FUNCTION_CALL 8 WARN_ONCE ( 1 , \"P4 PMU: Wrong address passed: %x\\n\" , addr ) CALLEE 9 WARN_ONCE LEAF_NODE 10 WARN_ONCE LEAF_NODE 9 ( ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 , ARGUMENT 9 \"P4 PMU: Wrong address passed: %x\\n\" FIELD 10 \"P4 PMU: Wrong address passed: %x\\n\" LEAF_NODE 11 \"P4 PMU: Wrong address passed: %x\\n\" LEAF_NODE 9 , ARGUMENT 9 addr FIELD 10 addr LEAF_NODE 11 addr LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return idx ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 idx EXPR 5 idx FIELD 6 idx LEAF_NODE 7 idx LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 p4_next_cntr LEAF_NODE 3 p4_next_cntr PARAMETER_LIST 2 ( int thread , unsigned long * used_mask , struct p4_event_bind * bind ) LEAF_NODE 3 ( PARAMETER_DECL 3 int thread TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 thread LEAF_NODE 5 thread LEAF_NODE 3 , PARAMETER_DECL 3 unsigned long * used_mask TYPE 4 unsigned long * TYPE_NAME 5 unsigned long LEAF_NODE 6 unsigned LEAF_NODE 6 long POINTER 5 * LEAF_NODE 6 * NAME 4 used_mask LEAF_NODE 5 used_mask LEAF_NODE 3 , PARAMETER_DECL 3 struct p4_event_bind * bind TYPE 4 struct p4_event_bind * TYPE_NAME 5 struct p4_event_bind LEAF_NODE 6 struct LEAF_NODE 6 p4_event_bind POINTER 5 * LEAF_NODE 6 * NAME 4 bind LEAF_NODE 5 bind LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int i , int j ; INIT_DECL_LIST 4 int i , int j VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 , VAR_DECL 5 int j TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 j LEAF_NODE 7 j LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < P4_CNTR_LIMIT EXPR 5 i < P4_CNTR_LIMIT FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 P4_CNTR_LIMIT LEAF_NODE 7 P4_CNTR_LIMIT LEAF_NODE 4 ; FOR_EXPR 4 i ++ EXPR 5 i ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 j = bind -> cntr [ thread ] [ i ] ; EXPR 7 j = bind -> cntr [ thread ] [ i ] ASSIGN 8 j = bind -> cntr [ thread ] [ i ] LVAL 9 j FIELD 10 j LEAF_NODE 11 j ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 bind -> cntr [ thread ] [ i ] FIELD 10 bind -> cntr [ thread ] [ i ] LEAF_NODE 11 bind LEAF_NODE 11 -> LEAF_NODE 11 cntr LEAF_NODE 11 [ EXPR 11 thread FIELD 12 thread LEAF_NODE 13 thread LEAF_NODE 11 ] LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 j != - 1 && ! test_bit ( j , used_mask ) EXPR 8 j != - 1 && ! test_bit ( j , used_mask ) AND 9 j != - 1 && ! test_bit ( j , used_mask ) EXPR 10 j != - 1 FIELD 11 j LEAF_NODE 12 j EQ_OPERATOR 11 != LEAF_NODE 12 != UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 10 && EXPR 10 ! test_bit ( j , used_mask ) UNARY_EXPR 11 ! test_bit ( j , used_mask ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 test_bit ( j , used_mask ) CALLEE 13 test_bit LEAF_NODE 14 test_bit LEAF_NODE 13 ( ARGUMENT 13 j FIELD 14 j LEAF_NODE 15 j LEAF_NODE 13 , ARGUMENT 13 used_mask FIELD 14 used_mask LEAF_NODE 15 used_mask LEAF_NODE 13 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return j ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 j EXPR 10 j FIELD 11 j LEAF_NODE 12 j LEAF_NODE 9 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return - 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 - 1 EXPR 5 - 1 UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 p4_pmu_schedule_events LEAF_NODE 3 p4_pmu_schedule_events PARAMETER_LIST 2 ( struct cpu_hw_events * cpuc , int n , int * assign ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct cpu_hw_events * cpuc TYPE 4 struct cpu_hw_events * TYPE_NAME 5 struct cpu_hw_events LEAF_NODE 6 struct LEAF_NODE 6 cpu_hw_events POINTER 5 * LEAF_NODE 6 * NAME 4 cpuc LEAF_NODE 5 cpuc LEAF_NODE 3 , PARAMETER_DECL 3 int n TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 n LEAF_NODE 5 n LEAF_NODE 3 , PARAMETER_DECL 3 int * assign TYPE 4 int * TYPE_NAME 5 int LEAF_NODE 6 int POINTER 5 * LEAF_NODE 6 * NAME 4 assign LEAF_NODE 5 assign LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned long [ BITS_TO_LONGS ( X86_PMC_IDX_MAX ) ] used_mask ; VAR_DECL 4 unsigned long [ BITS_TO_LONGS ( X86_PMC_IDX_MAX ) ] used_mask TYPE 5 unsigned long [ BITS_TO_LONGS ( X86_PMC_IDX_MAX ) ] TYPE_NAME 6 unsigned long LEAF_NODE 7 unsigned LEAF_NODE 7 long TYPE_SUFFIX 6 [ BITS_TO_LONGS ( X86_PMC_IDX_MAX ) ] LEAF_NODE 7 [ FUNCTION_CALL 7 BITS_TO_LONGS ( X86_PMC_IDX_MAX ) CALLEE 8 BITS_TO_LONGS LEAF_NODE 9 BITS_TO_LONGS LEAF_NODE 8 ( ARGUMENT 8 X86_PMC_IDX_MAX FIELD 9 X86_PMC_IDX_MAX LEAF_NODE 10 X86_PMC_IDX_MAX LEAF_NODE 8 ) LEAF_NODE 7 ] NAME 5 used_mask LEAF_NODE 6 used_mask LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned long [ BITS_TO_LONGS ( P4_ESCR_MSR_TABLE_SIZE ) ] escr_mask ; VAR_DECL 4 unsigned long [ BITS_TO_LONGS ( P4_ESCR_MSR_TABLE_SIZE ) ] escr_mask TYPE 5 unsigned long [ BITS_TO_LONGS ( P4_ESCR_MSR_TABLE_SIZE ) ] TYPE_NAME 6 unsigned long LEAF_NODE 7 unsigned LEAF_NODE 7 long TYPE_SUFFIX 6 [ BITS_TO_LONGS ( P4_ESCR_MSR_TABLE_SIZE ) ] LEAF_NODE 7 [ FUNCTION_CALL 7 BITS_TO_LONGS ( P4_ESCR_MSR_TABLE_SIZE ) CALLEE 8 BITS_TO_LONGS LEAF_NODE 9 BITS_TO_LONGS LEAF_NODE 8 ( ARGUMENT 8 P4_ESCR_MSR_TABLE_SIZE FIELD 9 P4_ESCR_MSR_TABLE_SIZE LEAF_NODE 10 P4_ESCR_MSR_TABLE_SIZE LEAF_NODE 8 ) LEAF_NODE 7 ] NAME 5 escr_mask LEAF_NODE 6 escr_mask LEAF_NODE 4 ; SIMPLE_DECL 3 int cpu ; cpu = smp_processor_id ( ) ; VAR_DECL 4 int cpu ; cpu = smp_processor_id ( ) TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 cpu LEAF_NODE 6 cpu LEAF_NODE 5 ; INIT 5 cpu = smp_processor_id ( ) ASSIGN 6 cpu = smp_processor_id ( ) LVAL 7 cpu NAME 8 cpu LEAF_NODE 9 cpu ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 smp_processor_id ( ) FUNCTION_CALL 8 smp_processor_id ( ) CALLEE 9 smp_processor_id LEAF_NODE 10 smp_processor_id LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 struct hw_perf_event * hwc ; VAR_DECL 4 struct hw_perf_event * hwc TYPE 5 struct hw_perf_event * TYPE_NAME 6 struct hw_perf_event LEAF_NODE 7 struct LEAF_NODE 7 hw_perf_event POINTER 6 * LEAF_NODE 7 * NAME 5 hwc LEAF_NODE 6 hwc LEAF_NODE 4 ; SIMPLE_DECL 3 struct p4_event_bind * bind ; VAR_DECL 4 struct p4_event_bind * bind TYPE 5 struct p4_event_bind * TYPE_NAME 6 struct p4_event_bind LEAF_NODE 7 struct LEAF_NODE 7 p4_event_bind POINTER 6 * LEAF_NODE 7 * NAME 5 bind LEAF_NODE 6 bind LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int i , unsigned int thread , unsigned int num ; INIT_DECL_LIST 4 unsigned int i , unsigned int thread , unsigned int num VAR_DECL 5 unsigned int i TYPE 6 unsigned int TYPE_NAME 7 unsigned int LEAF_NODE 8 unsigned LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 , INIT_DECL_LIST 5 unsigned int thread , unsigned int num VAR_DECL 6 unsigned int thread TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 thread LEAF_NODE 8 thread LEAF_NODE 6 , VAR_DECL 6 unsigned int num TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 num LEAF_NODE 8 num LEAF_NODE 4 ; SIMPLE_DECL 3 int cntr_idx , int escr_idx ; INIT_DECL_LIST 4 int cntr_idx , int escr_idx VAR_DECL 5 int cntr_idx TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 cntr_idx LEAF_NODE 7 cntr_idx LEAF_NODE 5 , VAR_DECL 5 int escr_idx TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 escr_idx LEAF_NODE 7 escr_idx LEAF_NODE 4 ; EXPR_STATEMENT 3 bitmap_zero ( used_mask , X86_PMC_IDX_MAX ) ; EXPR 4 bitmap_zero ( used_mask , X86_PMC_IDX_MAX ) FUNCTION_CALL 5 bitmap_zero ( used_mask , X86_PMC_IDX_MAX ) CALLEE 6 bitmap_zero LEAF_NODE 7 bitmap_zero LEAF_NODE 6 ( ARGUMENT 6 used_mask FIELD 7 used_mask LEAF_NODE 8 used_mask LEAF_NODE 6 , ARGUMENT 6 X86_PMC_IDX_MAX FIELD 7 X86_PMC_IDX_MAX LEAF_NODE 8 X86_PMC_IDX_MAX LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bitmap_zero ( escr_mask , P4_ESCR_MSR_TABLE_SIZE ) ; EXPR 4 bitmap_zero ( escr_mask , P4_ESCR_MSR_TABLE_SIZE ) FUNCTION_CALL 5 bitmap_zero ( escr_mask , P4_ESCR_MSR_TABLE_SIZE ) CALLEE 6 bitmap_zero LEAF_NODE 7 bitmap_zero LEAF_NODE 6 ( ARGUMENT 6 escr_mask FIELD 7 escr_mask LEAF_NODE 8 escr_mask LEAF_NODE 6 , ARGUMENT 6 P4_ESCR_MSR_TABLE_SIZE FIELD 7 P4_ESCR_MSR_TABLE_SIZE LEAF_NODE 8 P4_ESCR_MSR_TABLE_SIZE LEAF_NODE 6 ) LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 , num = n ; EXPR 5 i = 0 , num = n ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 6 , ASSIGN 6 num = n LVAL 7 num FIELD 8 num LEAF_NODE 9 num ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 n FIELD 8 n LEAF_NODE 9 n LEAF_NODE 5 ; CONDITION 4 i < n EXPR 5 i < n FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 n LEAF_NODE 7 n LEAF_NODE 4 ; FOR_EXPR 4 i ++ , num -- EXPR 5 i ++ , num -- FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 6 , FIELD 6 num -- LEAF_NODE 7 num LEAF_NODE 7 -- LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 hwc = & cpuc -> event_list [ i ] -> hw ; EXPR 7 hwc = & cpuc -> event_list [ i ] -> hw ASSIGN 8 hwc = & cpuc -> event_list [ i ] -> hw LVAL 9 hwc FIELD 10 hwc LEAF_NODE 11 hwc ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 & cpuc -> event_list [ i ] -> hw UNARY_EXPR 10 & cpuc -> event_list [ i ] -> hw UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 cpuc -> event_list [ i ] -> hw LEAF_NODE 12 cpuc LEAF_NODE 12 -> LEAF_NODE 12 event_list LEAF_NODE 12 [ EXPR 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 12 ] LEAF_NODE 12 -> LEAF_NODE 12 hw LEAF_NODE 7 ; EXPR_STATEMENT 6 thread = p4_ht_thread ( cpu ) ; EXPR 7 thread = p4_ht_thread ( cpu ) ASSIGN 8 thread = p4_ht_thread ( cpu ) LVAL 9 thread FIELD 10 thread LEAF_NODE 11 thread ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 p4_ht_thread ( cpu ) FUNCTION_CALL 10 p4_ht_thread ( cpu ) CALLEE 11 p4_ht_thread LEAF_NODE 12 p4_ht_thread LEAF_NODE 11 ( ARGUMENT 11 cpu FIELD 12 cpu LEAF_NODE 13 cpu LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 bind = p4_config_get_bind ( hwc -> config ) ; EXPR 7 bind = p4_config_get_bind ( hwc -> config ) ASSIGN 8 bind = p4_config_get_bind ( hwc -> config ) LVAL 9 bind FIELD 10 bind LEAF_NODE 11 bind ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 p4_config_get_bind ( hwc -> config ) FUNCTION_CALL 10 p4_config_get_bind ( hwc -> config ) CALLEE 11 p4_config_get_bind LEAF_NODE 12 p4_config_get_bind LEAF_NODE 11 ( ARGUMENT 11 hwc -> config FIELD 12 hwc -> config LEAF_NODE 13 hwc LEAF_NODE 13 -> LEAF_NODE 13 config LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 escr_idx = p4_get_escr_idx ( bind -> escr_msr [ thread ] ) ; EXPR 7 escr_idx = p4_get_escr_idx ( bind -> escr_msr [ thread ] ) ASSIGN 8 escr_idx = p4_get_escr_idx ( bind -> escr_msr [ thread ] ) LVAL 9 escr_idx FIELD 10 escr_idx LEAF_NODE 11 escr_idx ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 p4_get_escr_idx ( bind -> escr_msr [ thread ] ) FUNCTION_CALL 10 p4_get_escr_idx ( bind -> escr_msr [ thread ] ) CALLEE 11 p4_get_escr_idx LEAF_NODE 12 p4_get_escr_idx LEAF_NODE 11 ( ARGUMENT 11 bind -> escr_msr [ thread ] FIELD 12 bind -> escr_msr [ thread ] LEAF_NODE 13 bind LEAF_NODE 13 -> LEAF_NODE 13 escr_msr LEAF_NODE 13 [ EXPR 13 thread FIELD 14 thread LEAF_NODE 15 thread LEAF_NODE 13 ] LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 unlikely ( escr_idx == - 1 ) EXPR 8 unlikely ( escr_idx == - 1 ) FUNCTION_CALL 9 unlikely ( escr_idx == - 1 ) CALLEE 10 unlikely LEAF_NODE 11 unlikely LEAF_NODE 10 ( ARGUMENT 10 escr_idx == - 1 FIELD 11 escr_idx LEAF_NODE 12 escr_idx EQ_OPERATOR 11 == LEAF_NODE 12 == UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 goto done ; KEYWORD 9 goto LEAF_NODE 10 goto DESTINATION 9 done LEAF_NODE 10 done LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 hwc -> idx != - 1 && ! p4_should_swap_ts ( hwc -> config , cpu ) EXPR 8 hwc -> idx != - 1 && ! p4_should_swap_ts ( hwc -> config , cpu ) AND 9 hwc -> idx != - 1 && ! p4_should_swap_ts ( hwc -> config , cpu ) EXPR 10 hwc -> idx != - 1 FIELD 11 hwc -> idx LEAF_NODE 12 hwc LEAF_NODE 12 -> LEAF_NODE 12 idx EQ_OPERATOR 11 != LEAF_NODE 12 != UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 10 && EXPR 10 ! p4_should_swap_ts ( hwc -> config , cpu ) UNARY_EXPR 11 ! p4_should_swap_ts ( hwc -> config , cpu ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 p4_should_swap_ts ( hwc -> config , cpu ) CALLEE 13 p4_should_swap_ts LEAF_NODE 14 p4_should_swap_ts LEAF_NODE 13 ( ARGUMENT 13 hwc -> config FIELD 14 hwc -> config LEAF_NODE 15 hwc LEAF_NODE 15 -> LEAF_NODE 15 config LEAF_NODE 13 , ARGUMENT 13 cpu FIELD 14 cpu LEAF_NODE 15 cpu LEAF_NODE 13 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 cntr_idx = hwc -> idx ; EXPR 10 cntr_idx = hwc -> idx ASSIGN 11 cntr_idx = hwc -> idx LVAL 12 cntr_idx FIELD 13 cntr_idx LEAF_NODE 14 cntr_idx ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 hwc -> idx FIELD 13 hwc -> idx LEAF_NODE 14 hwc LEAF_NODE 14 -> LEAF_NODE 14 idx LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 assign EXPR 11 assign FIELD 12 assign LEAF_NODE 13 assign LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 assign [ i ] = hwc -> idx ; EXPR 12 assign [ i ] = hwc -> idx ASSIGN 13 assign [ i ] = hwc -> idx LVAL 14 assign [ i ] FIELD 15 assign [ i ] LEAF_NODE 16 assign LEAF_NODE 16 [ EXPR 16 i FIELD 17 i LEAF_NODE 18 i LEAF_NODE 16 ] ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 hwc -> idx FIELD 15 hwc -> idx LEAF_NODE 16 hwc LEAF_NODE 16 -> LEAF_NODE 16 idx LEAF_NODE 12 ; JUMP_STATEMENT 9 goto reserve ; KEYWORD 10 goto LEAF_NODE 11 goto DESTINATION 10 reserve LEAF_NODE 11 reserve LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 cntr_idx = p4_next_cntr ( thread , used_mask , bind ) ; EXPR 7 cntr_idx = p4_next_cntr ( thread , used_mask , bind ) ASSIGN 8 cntr_idx = p4_next_cntr ( thread , used_mask , bind ) LVAL 9 cntr_idx FIELD 10 cntr_idx LEAF_NODE 11 cntr_idx ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 p4_next_cntr ( thread , used_mask , bind ) FUNCTION_CALL 10 p4_next_cntr ( thread , used_mask , bind ) CALLEE 11 p4_next_cntr LEAF_NODE 12 p4_next_cntr LEAF_NODE 11 ( ARGUMENT 11 thread FIELD 12 thread LEAF_NODE 13 thread LEAF_NODE 11 , ARGUMENT 11 used_mask FIELD 12 used_mask LEAF_NODE 13 used_mask LEAF_NODE 11 , ARGUMENT 11 bind FIELD 12 bind LEAF_NODE 13 bind LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 cntr_idx == - 1 || test_bit ( escr_idx , escr_mask ) EXPR 8 cntr_idx == - 1 || test_bit ( escr_idx , escr_mask ) OR 9 cntr_idx == - 1 || test_bit ( escr_idx , escr_mask ) EXPR 10 cntr_idx == - 1 FIELD 11 cntr_idx LEAF_NODE 12 cntr_idx EQ_OPERATOR 11 == LEAF_NODE 12 == UNARY_EXPR 11 - 1 UNARY_OPERATOR 12 - LEAF_NODE 13 - FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 10 || EXPR 10 test_bit ( escr_idx , escr_mask ) FUNCTION_CALL 11 test_bit ( escr_idx , escr_mask ) CALLEE 12 test_bit LEAF_NODE 13 test_bit LEAF_NODE 12 ( ARGUMENT 12 escr_idx FIELD 13 escr_idx LEAF_NODE 14 escr_idx LEAF_NODE 12 , ARGUMENT 12 escr_mask FIELD 13 escr_mask LEAF_NODE 14 escr_mask LEAF_NODE 12 ) LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 goto done ; KEYWORD 9 goto LEAF_NODE 10 goto DESTINATION 9 done LEAF_NODE 10 done LEAF_NODE 9 ; EXPR_STATEMENT 6 p4_pmu_swap_config_ts ( hwc , cpu ) ; EXPR 7 p4_pmu_swap_config_ts ( hwc , cpu ) FUNCTION_CALL 8 p4_pmu_swap_config_ts ( hwc , cpu ) CALLEE 9 p4_pmu_swap_config_ts LEAF_NODE 10 p4_pmu_swap_config_ts LEAF_NODE 9 ( ARGUMENT 9 hwc FIELD 10 hwc LEAF_NODE 11 hwc LEAF_NODE 9 , ARGUMENT 9 cpu FIELD 10 cpu LEAF_NODE 11 cpu LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 assign EXPR 8 assign FIELD 9 assign LEAF_NODE 10 assign LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 assign [ i ] = cntr_idx ; EXPR 9 assign [ i ] = cntr_idx ASSIGN 10 assign [ i ] = cntr_idx LVAL 11 assign [ i ] FIELD 12 assign [ i ] LEAF_NODE 13 assign LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 cntr_idx FIELD 12 cntr_idx LEAF_NODE 13 cntr_idx LEAF_NODE 9 ; LABEL 6 reserve : LEAF_NODE 7 reserve LEAF_NODE 7 : EXPR_STATEMENT 6 set_bit ( cntr_idx , used_mask ) ; EXPR 7 set_bit ( cntr_idx , used_mask ) FUNCTION_CALL 8 set_bit ( cntr_idx , used_mask ) CALLEE 9 set_bit LEAF_NODE 10 set_bit LEAF_NODE 9 ( ARGUMENT 9 cntr_idx FIELD 10 cntr_idx LEAF_NODE 11 cntr_idx LEAF_NODE 9 , ARGUMENT 9 used_mask FIELD 10 used_mask LEAF_NODE 11 used_mask LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 set_bit ( escr_idx , escr_mask ) ; EXPR 7 set_bit ( escr_idx , escr_mask ) FUNCTION_CALL 8 set_bit ( escr_idx , escr_mask ) CALLEE 9 set_bit LEAF_NODE 10 set_bit LEAF_NODE 9 ( ARGUMENT 9 escr_idx FIELD 10 escr_idx LEAF_NODE 11 escr_idx LEAF_NODE 9 , ARGUMENT 9 escr_mask FIELD 10 escr_mask LEAF_NODE 11 escr_mask LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LABEL 3 done : LEAF_NODE 4 done LEAF_NODE 4 : JUMP_STATEMENT 3 return num ? - ENOSPC : 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 num ? - ENOSPC : 0 EXPR 5 num ? - ENOSPC : 0 COND_EXPR 6 num ? - ENOSPC : 0 CONDITION 7 num FIELD 8 num LEAF_NODE 9 num LEAF_NODE 7 ? EXPR 7 - ENOSPC UNARY_EXPR 8 - ENOSPC UNARY_OPERATOR 9 - LEAF_NODE 10 - FIELD 9 ENOSPC LEAF_NODE 10 ENOSPC LEAF_NODE 7 : FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 p4_pmu_init LEAF_NODE 3 p4_pmu_init PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 unsigned int low , unsigned int high ; INIT_DECL_LIST 4 unsigned int low , unsigned int high VAR_DECL 5 unsigned int low TYPE 6 unsigned int TYPE_NAME 7 unsigned int LEAF_NODE 8 unsigned LEAF_NODE 8 int NAME 6 low LEAF_NODE 7 low LEAF_NODE 5 , VAR_DECL 5 unsigned int high TYPE 6 unsigned int TYPE_NAME 7 unsigned int LEAF_NODE 8 unsigned LEAF_NODE 8 int NAME 6 high LEAF_NODE 7 high LEAF_NODE 4 ; EXPR_STATEMENT 3 BUILD_BUG_ON ( ARCH_P4_MAX_CCCR > X86_PMC_MAX_GENERIC ) ; EXPR 4 BUILD_BUG_ON ( ARCH_P4_MAX_CCCR > X86_PMC_MAX_GENERIC ) FUNCTION_CALL 5 BUILD_BUG_ON ( ARCH_P4_MAX_CCCR > X86_PMC_MAX_GENERIC ) CALLEE 6 BUILD_BUG_ON LEAF_NODE 7 BUILD_BUG_ON LEAF_NODE 6 ( ARGUMENT 6 ARCH_P4_MAX_CCCR > X86_PMC_MAX_GENERIC FIELD 7 ARCH_P4_MAX_CCCR LEAF_NODE 8 ARCH_P4_MAX_CCCR REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 X86_PMC_MAX_GENERIC LEAF_NODE 8 X86_PMC_MAX_GENERIC LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 rdmsr ( MSR_IA32_MISC_ENABLE , low , high ) ; EXPR 4 rdmsr ( MSR_IA32_MISC_ENABLE , low , high ) FUNCTION_CALL 5 rdmsr ( MSR_IA32_MISC_ENABLE , low , high ) CALLEE 6 rdmsr LEAF_NODE 7 rdmsr LEAF_NODE 6 ( ARGUMENT 6 MSR_IA32_MISC_ENABLE FIELD 7 MSR_IA32_MISC_ENABLE LEAF_NODE 8 MSR_IA32_MISC_ENABLE LEAF_NODE 6 , ARGUMENT 6 low FIELD 7 low LEAF_NODE 8 low LEAF_NODE 6 , ARGUMENT 6 high FIELD 7 high LEAF_NODE 8 high LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ( low & ( 1 << 7 ) ) EXPR 5 ! ( low & ( 1 << 7 ) ) UNARY_EXPR 6 ! ( low & ( 1 << 7 ) ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! LEAF_NODE 7 ( FIELD 7 low LEAF_NODE 8 low LEAF_NODE 7 & LEAF_NODE 7 ( FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 7 << FIELD 7 7 LEAF_NODE 8 7 LEAF_NODE 7 ) LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 pr_cont ( \"unsupported Netburst CPU model %d \" , boot_cpu_data . x86_model ) ; EXPR 7 pr_cont ( \"unsupported Netburst CPU model %d \" , boot_cpu_data . x86_model ) FUNCTION_CALL 8 pr_cont ( \"unsupported Netburst CPU model %d \" , boot_cpu_data . x86_model ) CALLEE 9 pr_cont LEAF_NODE 10 pr_cont LEAF_NODE 9 ( ARGUMENT 9 \"unsupported Netburst CPU model %d \" FIELD 10 \"unsupported Netburst CPU model %d \" LEAF_NODE 11 \"unsupported Netburst CPU model %d \" LEAF_NODE 9 , ARGUMENT 9 boot_cpu_data . x86_model FIELD 10 boot_cpu_data . x86_model LEAF_NODE 11 boot_cpu_data LEAF_NODE 11 . LEAF_NODE 11 x86_model LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return - ENODEV ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - ENODEV EXPR 8 - ENODEV UNARY_EXPR 9 - ENODEV UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 ENODEV LEAF_NODE 11 ENODEV LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 memcpy ( hw_cache_event_ids , p4_hw_cache_event_ids , sizeof ( hw_cache_event_ids ) ) ; EXPR 4 memcpy ( hw_cache_event_ids , p4_hw_cache_event_ids , sizeof ( hw_cache_event_ids ) ) FUNCTION_CALL 5 memcpy ( hw_cache_event_ids , p4_hw_cache_event_ids , sizeof ( hw_cache_event_ids ) ) CALLEE 6 memcpy LEAF_NODE 7 memcpy LEAF_NODE 6 ( ARGUMENT 6 hw_cache_event_ids FIELD 7 hw_cache_event_ids LEAF_NODE 8 hw_cache_event_ids LEAF_NODE 6 , ARGUMENT 6 p4_hw_cache_event_ids FIELD 7 p4_hw_cache_event_ids LEAF_NODE 8 p4_hw_cache_event_ids LEAF_NODE 6 , ARGUMENT 6 sizeof ( hw_cache_event_ids ) FUNCTION_CALL 7 sizeof ( hw_cache_event_ids ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 hw_cache_event_ids FIELD 9 hw_cache_event_ids LEAF_NODE 10 hw_cache_event_ids LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 pr_cont ( \"Netburst events, \" ) ; EXPR 4 pr_cont ( \"Netburst events, \" ) FUNCTION_CALL 5 pr_cont ( \"Netburst events, \" ) CALLEE 6 pr_cont LEAF_NODE 7 pr_cont LEAF_NODE 6 ( ARGUMENT 6 \"Netburst events, \" FIELD 7 \"Netburst events, \" LEAF_NODE 8 \"Netburst events, \" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 x86_pmu = p4_pmu ; EXPR 4 x86_pmu = p4_pmu ASSIGN 5 x86_pmu = p4_pmu LVAL 6 x86_pmu FIELD 7 x86_pmu LEAF_NODE 8 x86_pmu ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 p4_pmu FIELD 7 p4_pmu LEAF_NODE 8 p4_pmu LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 121, "project": "cwe399_ast_vul_function_test_adv_55", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_64b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_64b_functionSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr ; VAR_DECL 4 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr TYPE 5 size_t * TYPE_NAME 6 size_t LEAF_NODE 7 size_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( size_t * ) dataVoidPtr ASSIGN 6 dataPtr = ( size_t * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( size_t * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 size_t LEAF_NODE 9 size_t LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 size_t data ; data = ( * dataPtr ) ; VAR_DECL 4 size_t data ; data = ( * dataPtr ) TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_64b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_64b_functionSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr ; VAR_DECL 4 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr TYPE 5 size_t * TYPE_NAME 6 size_t LEAF_NODE 7 size_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( size_t * ) dataVoidPtr ASSIGN 6 dataPtr = ( size_t * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( size_t * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 size_t LEAF_NODE 9 size_t LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 size_t data ; data = ( * dataPtr ) ; VAR_DECL 4 size_t data ; data = ( * dataPtr ) TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_64b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_64b_functionB2GSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr ; VAR_DECL 4 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr TYPE 5 size_t * TYPE_NAME 6 size_t LEAF_NODE 7 size_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( size_t * ) dataVoidPtr ASSIGN 6 dataPtr = ( size_t * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( size_t * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 size_t LEAF_NODE 9 size_t LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 size_t data ; data = ( * dataPtr ) ; VAR_DECL 4 size_t data ; data = ( * dataPtr ) TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 122, "project": "cwe399_ast_vul_function_test_adv_17", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int staticFive ; staticFive = 5 ; VAR_DECL 2 int staticFive ; staticFive = 5 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticFive LEAF_NODE 4 staticFive LEAF_NODE 3 ; INIT 3 staticFive = 5 ASSIGN 4 staticFive = 5 LVAL 5 staticFive NAME 6 staticFive LEAF_NODE 7 staticFive ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 5 FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = rand ( ) ; EXPR 7 data = rand ( ) ASSIGN 8 data = rand ( ) LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 rand ( ) FUNCTION_CALL 10 rand ( ) CALLEE 11 rand LEAF_NODE 12 rand LEAF_NODE 11 ( LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = rand ( ) ; EXPR 7 data = rand ( ) ASSIGN 8 data = rand ( ) LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 rand ( ) FUNCTION_CALL 10 rand ( ) CALLEE 11 rand LEAF_NODE 12 rand LEAF_NODE 11 ( LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive != 5 EXPR 5 staticFive != 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) && data < 100 EXPR 9 data > strlen ( HELLO_STRING ) && data < 100 AND 10 data > strlen ( HELLO_STRING ) && data < 100 EXPR 11 data > strlen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 strlen ( HELLO_STRING ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = rand ( ) ; EXPR 7 data = rand ( ) ASSIGN 8 data = rand ( ) LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 rand ( ) FUNCTION_CALL 10 rand ( ) CALLEE 11 rand LEAF_NODE 12 rand LEAF_NODE 11 ( LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) && data < 100 EXPR 9 data > strlen ( HELLO_STRING ) && data < 100 AND 10 data > strlen ( HELLO_STRING ) && data < 100 EXPR 11 data > strlen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 strlen ( HELLO_STRING ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function1 LEAF_NODE 3 function1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive != 5 EXPR 5 staticFive != 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function2 LEAF_NODE 3 function2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function1 ( ) ; EXPR 4 function1 ( ) FUNCTION_CALL 5 function1 ( ) CALLEE 6 function1 LEAF_NODE 7 function1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function2 ( ) ; EXPR 4 function2 ( ) FUNCTION_CALL 5 function2 ( ) CALLEE 6 function2 LEAF_NODE 7 function2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 123, "project": "cwe399_ast_vul_function_test_adv_185", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionSink PARAMETER_LIST 2 ( size_t * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t * dataPtr TYPE 4 size_t * TYPE_NAME 5 size_t LEAF_NODE 6 size_t POINTER 5 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int stdin ; VAR_DECL 4 int stdin TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 stdin LEAF_NODE 6 stdin LEAF_NODE 4 ; EXPR_STATEMENT 3 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 4 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 5 fscanf ( stdin , \"%ud\" , & data ) CALLEE 6 fscanf LEAF_NODE 7 fscanf LEAF_NODE 6 ( ARGUMENT 6 stdin FIELD 7 stdin LEAF_NODE 8 stdin LEAF_NODE 6 , ARGUMENT 6 \"%ud\" FIELD 7 \"%ud\" LEAF_NODE 8 \"%ud\" LEAF_NODE 6 , ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionSink ( & data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionSink ( & data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionSink ( & data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionSink PARAMETER_LIST 2 ( size_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t * data TYPE 4 size_t * TYPE_NAME 5 size_t LEAF_NODE 6 size_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 20 ; EXPR 4 data = 20 ASSIGN 5 data = 20 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 20 FIELD 7 20 LEAF_NODE 8 20 LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionSink ( & data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionSink ( & data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionSink ( & data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionB2GSink PARAMETER_LIST 2 ( size_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t * data TYPE 4 size_t * TYPE_NAME 5 size_t LEAF_NODE 6 size_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int stdin ; VAR_DECL 4 int stdin TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 stdin LEAF_NODE 6 stdin LEAF_NODE 4 ; EXPR_STATEMENT 3 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 4 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 5 fscanf ( stdin , \"%ud\" , & data ) CALLEE 6 fscanf LEAF_NODE 7 fscanf LEAF_NODE 6 ( ARGUMENT 6 stdin FIELD 7 stdin LEAF_NODE 8 stdin LEAF_NODE 6 , ARGUMENT 6 \"%ud\" FIELD 7 \"%ud\" LEAF_NODE 8 \"%ud\" LEAF_NODE 6 , ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionB2GSink ( & data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionB2GSink ( & data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionB2GSink ( & data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_63_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 124, "project": "cwe399_ast_vul_function_test_adv_72", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53c_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53c_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 125, "project": "cwe399_ast_vul_function_test_adv_114", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionGlobal ; VAR_DECL 2 int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionGlobal TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionGlobal LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionGlobal LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionGlobal EXPR 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionGlobal FIELD 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionGlobal LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionGlobal LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } SIMPLE_DECL 1 int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G1Global ; VAR_DECL 2 int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G1Global TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G1Global LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G1Global LEAF_NODE 2 ; SIMPLE_DECL 1 int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G2Global ; VAR_DECL 2 int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G2Global TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G2Global LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G2Global LEAF_NODE 2 ; SIMPLE_DECL 1 int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionGlobal ; VAR_DECL 2 int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionGlobal TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionGlobal LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionGlobal LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G1Sink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G1Sink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G1Global EXPR 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G1Global FIELD 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G1Global LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G1Global LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) && data < 100 EXPR 9 data > strlen ( HELLO_STRING ) && data < 100 AND 10 data > strlen ( HELLO_STRING ) && data < 100 EXPR 11 data > strlen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 strlen ( HELLO_STRING ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G2Sink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G2Sink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G2Global EXPR 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G2Global FIELD 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G2Global LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionB2G2Global LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) && data < 100 EXPR 9 data > strlen ( HELLO_STRING ) && data < 100 AND 10 data > strlen ( HELLO_STRING ) && data < 100 EXPR 11 data > strlen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 strlen ( HELLO_STRING ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionGlobal EXPR 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionGlobal FIELD 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionGlobal LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_functionGlobal LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 126, "project": "cwe399_ast_vul_function_test_adv_31", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 union CLASS_NAME BASE_CLASSES { char * unionFirst ; char * unionSecond ; } CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_unionType ; VAR_DECL 2 union CLASS_NAME BASE_CLASSES { char * unionFirst ; char * unionSecond ; } CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_unionType TYPE 3 union CLASS_NAME BASE_CLASSES { char * unionFirst ; char * unionSecond ; } CLASS_DEF 4 union CLASS_NAME BASE_CLASSES { char * unionFirst ; char * unionSecond ; } LEAF_NODE 5 union LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 char * unionFirst ; char * unionSecond ; SIMPLE_DECL 6 char * unionFirst ; VAR_DECL 7 char * unionFirst TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 unionFirst LEAF_NODE 9 unionFirst LEAF_NODE 7 ; SIMPLE_DECL 6 char * unionSecond ; VAR_DECL 7 char * unionSecond TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 unionSecond LEAF_NODE 9 unionSecond LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_unionType LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_unionType LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_unionType myUnion ; VAR_DECL 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_unionType myUnion TYPE 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_unionType TYPE_NAME 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_unionType LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_unionType NAME 5 myUnion LEAF_NODE 6 myUnion LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 myUnion . unionFirst = data ; EXPR 4 myUnion . unionFirst = data ASSIGN 5 myUnion . unionFirst = data LVAL 6 myUnion . unionFirst FIELD 7 myUnion . unionFirst LEAF_NODE 8 myUnion LEAF_NODE 8 . LEAF_NODE 8 unionFirst ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = myUnion . unionSecond ; VAR_DECL 5 char * data ; data = myUnion . unionSecond TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = myUnion . unionSecond ASSIGN 7 data = myUnion . unionSecond LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 myUnion . unionSecond FIELD 9 myUnion . unionSecond LEAF_NODE 10 myUnion LEAF_NODE 10 . LEAF_NODE 10 unionSecond LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 ; LEAF_NODE 6 ; CONDITION 5 * data != '\\0' EXPR 6 * data != '\\0' UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 5 ; FOR_EXPR 5 data ++ EXPR 6 data ++ FIELD 7 data ++ LEAF_NODE 8 data LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 * data == SEARCH_CHAR EXPR 9 * data == SEARCH_CHAR UNARY_EXPR 10 * data UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 data LEAF_NODE 12 data EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_unionType myUnion ; VAR_DECL 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_unionType myUnion TYPE 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_unionType TYPE_NAME 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_unionType LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_unionType NAME 5 myUnion LEAF_NODE 6 myUnion LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 myUnion . unionFirst = data ; EXPR 4 myUnion . unionFirst = data ASSIGN 5 myUnion . unionFirst = data LVAL 6 myUnion . unionFirst FIELD 7 myUnion . unionFirst LEAF_NODE 8 myUnion LEAF_NODE 8 . LEAF_NODE 8 unionFirst ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * data ; data = myUnion . unionSecond ; VAR_DECL 5 char * data ; data = myUnion . unionSecond TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = myUnion . unionSecond ASSIGN 7 data = myUnion . unionSecond LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 myUnion . unionSecond FIELD 9 myUnion . unionSecond LEAF_NODE 10 myUnion LEAF_NODE 10 . LEAF_NODE 10 unionSecond LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 size_t i ; VAR_DECL 6 size_t i TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 i LEAF_NODE 8 i LEAF_NODE 6 ; ITERATION 5 KEYWORD 6 for LEAF_NODE 7 for LEAF_NODE 6 ( FOR_INIT 6 i = 0 ; EXPR 7 i = 0 ASSIGN 8 i = 0 LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; CONDITION 6 i < strlen ( data ) EXPR 7 i < strlen ( data ) FIELD 8 i LEAF_NODE 9 i REL_OPERATOR 8 < LEAF_NODE 9 < FUNCTION_CALL 8 strlen ( data ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 6 ; FOR_EXPR 6 i ++ EXPR 7 i ++ FIELD 8 i ++ LEAF_NODE 9 i LEAF_NODE 9 ++ LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 data [ i ] == SEARCH_CHAR EXPR 10 data [ i ] == SEARCH_CHAR FIELD 11 data [ i ] LEAF_NODE 12 data LEAF_NODE 12 [ EXPR 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 12 ] EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 SEARCH_CHAR LEAF_NODE 12 SEARCH_CHAR LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 printLine ( \"We have a match!\" ) ; EXPR 12 printLine ( \"We have a match!\" ) FUNCTION_CALL 13 printLine ( \"We have a match!\" ) CALLEE 14 printLine LEAF_NODE 15 printLine LEAF_NODE 14 ( ARGUMENT 14 \"We have a match!\" FIELD 15 \"We have a match!\" LEAF_NODE 16 \"We have a match!\" LEAF_NODE 14 ) LEAF_NODE 12 ; JUMP_STATEMENT 11 break DESTINATION ; KEYWORD 12 break LEAF_NODE 13 break LEAF_NODE 12 DESTINATION LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 7 } EXPR_STATEMENT 5 free ( data ) ; EXPR 6 free ( data ) FUNCTION_CALL 7 free ( data ) CALLEE 8 free LEAF_NODE 9 free LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 127, "project": "cwe399_ast_vul_function_test_adv_70", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int i , int j ; INIT_DECL_LIST 4 int i , int j VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 , VAR_DECL 5 int j TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 j LEAF_NODE 7 j LEAF_NODE 4 ; SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < 1 EXPR 5 i < 1 FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 i ++ EXPR 5 i ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int stdin ; VAR_DECL 7 int stdin TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 stdin LEAF_NODE 9 stdin LEAF_NODE 7 ; EXPR_STATEMENT 6 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 7 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 8 fscanf ( stdin , \"%ud\" , & data ) CALLEE 9 fscanf LEAF_NODE 10 fscanf LEAF_NODE 9 ( ARGUMENT 9 stdin FIELD 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 , ARGUMENT 9 \"%ud\" FIELD 10 \"%ud\" LEAF_NODE 11 \"%ud\" LEAF_NODE 9 , ARGUMENT 9 & data UNARY_EXPR 10 & data UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 data LEAF_NODE 12 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 j = 0 ; EXPR 5 j = 0 ASSIGN 6 j = 0 LVAL 7 j FIELD 8 j LEAF_NODE 9 j ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 j < 1 EXPR 5 j < 1 FIELD 6 j LEAF_NODE 7 j REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 j ++ EXPR 5 j ++ FIELD 6 j ++ LEAF_NODE 7 j LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int i , int k ; INIT_DECL_LIST 4 int i , int k VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 , VAR_DECL 5 int k TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 k LEAF_NODE 7 k LEAF_NODE 4 ; SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < 1 EXPR 5 i < 1 FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 i ++ EXPR 5 i ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int stdin ; VAR_DECL 7 int stdin TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 stdin LEAF_NODE 9 stdin LEAF_NODE 7 ; EXPR_STATEMENT 6 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 7 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 8 fscanf ( stdin , \"%ud\" , & data ) CALLEE 9 fscanf LEAF_NODE 10 fscanf LEAF_NODE 9 ( ARGUMENT 9 stdin FIELD 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 , ARGUMENT 9 \"%ud\" FIELD 10 \"%ud\" LEAF_NODE 11 \"%ud\" LEAF_NODE 9 , ARGUMENT 9 & data UNARY_EXPR 10 & data UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 data LEAF_NODE 12 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 k = 0 ; EXPR 5 k = 0 ASSIGN 6 k = 0 LVAL 7 k FIELD 8 k LEAF_NODE 9 k ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 k < 1 EXPR 5 k < 1 FIELD 6 k LEAF_NODE 7 k REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 k ++ EXPR 5 k ++ FIELD 6 k ++ LEAF_NODE 7 k LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) && data < 100 EXPR 9 data > strlen ( HELLO_STRING ) && data < 100 AND 10 data > strlen ( HELLO_STRING ) && data < 100 EXPR 11 data > strlen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 strlen ( HELLO_STRING ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int h , int j ; INIT_DECL_LIST 4 int h , int j VAR_DECL 5 int h TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 h LEAF_NODE 7 h LEAF_NODE 5 , VAR_DECL 5 int j TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 j LEAF_NODE 7 j LEAF_NODE 4 ; SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 h = 0 ; EXPR 5 h = 0 ASSIGN 6 h = 0 LVAL 7 h FIELD 8 h LEAF_NODE 9 h ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 h < 1 EXPR 5 h < 1 FIELD 6 h LEAF_NODE 7 h REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 h ++ EXPR 5 h ++ FIELD 6 h ++ LEAF_NODE 7 h LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 j = 0 ; EXPR 5 j = 0 ASSIGN 6 j = 0 LVAL 7 j FIELD 8 j LEAF_NODE 9 j ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 j < 1 EXPR 5 j < 1 FIELD 6 j LEAF_NODE 7 j REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 j ++ EXPR 5 j ++ FIELD 6 j ++ LEAF_NODE 7 j LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 128, "project": "cwe399_ast_vul_function_test_adv_157", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE ; VAR_DECL 2 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE TYPE 3 struct FILE BASE_CLASSES { CLASS_CONTENT } CLASS_DEF 4 struct FILE BASE_CLASSES { CLASS_CONTENT } LEAF_NODE 5 struct CLASS_NAME 5 FILE LEAF_NODE 6 FILE LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { LEAF_NODE 5 CLASS_CONTENT LEAF_NODE 5 } NAME 3 FILE LEAF_NODE 4 FILE LEAF_NODE 2 ; SIMPLE_DECL 1 wchar_t * CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionData ; VAR_DECL 2 wchar_t * CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionData TYPE 3 wchar_t * TYPE_NAME 4 wchar_t LEAF_NODE 5 wchar_t POINTER 4 * LEAF_NODE 5 * NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionData LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionData LEAF_NODE 2 ; SIMPLE_DECL 1 wchar_t * CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionB2GData ; VAR_DECL 2 wchar_t * CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionB2GData TYPE 3 wchar_t * TYPE_NAME 4 wchar_t LEAF_NODE 5 wchar_t POINTER 4 * LEAF_NODE 5 * NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionB2GData LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionB2GData LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionSink LEAF_NODE 3 functionSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionData ; VAR_DECL 4 wchar_t * data ; data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionData TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionData ASSIGN 6 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionData FIELD 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionData LEAF_NODE 9 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionData LEAF_NODE 4 ; LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgetws LEAF_NODE 15 fgetws LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgetws() failed\" ) ; EXPR 14 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 15 printLine ( \"fgetws() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgetws() failed\" FIELD 17 \"fgetws() failed\" LEAF_NODE 18 \"fgetws() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; LEAF_NODE 13 data LEAF_NODE 13 [ LEAF_NODE 13 dataLen LEAF_NODE 13 ] LEAF_NODE 13 = LEAF_NODE 13 L EXPR_STATEMENT 13 '\\0' ; EXPR 14 '\\0' FIELD 15 '\\0' LEAF_NODE 16 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionData = data ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionData = data ASSIGN 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionData = data LVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionData FIELD 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionData LEAF_NODE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionData ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 functionSink ( ) ; EXPR 4 functionSink ( ) FUNCTION_CALL 5 functionSink ( ) CALLEE 6 functionSink LEAF_NODE 7 functionSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2GSink LEAF_NODE 3 functionB2GSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionB2GData ; VAR_DECL 4 wchar_t * data ; data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionB2GData TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionB2GData ASSIGN 6 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionB2GData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionB2GData FIELD 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionB2GData LEAF_NODE 9 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionB2GData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgetws LEAF_NODE 15 fgetws LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgetws() failed\" ) ; EXPR 14 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 15 printLine ( \"fgetws() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgetws() failed\" FIELD 17 \"fgetws() failed\" LEAF_NODE 18 \"fgetws() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; LEAF_NODE 13 data LEAF_NODE 13 [ LEAF_NODE 13 dataLen LEAF_NODE 13 ] LEAF_NODE 13 = LEAF_NODE 13 L EXPR_STATEMENT 13 '\\0' ; EXPR 14 '\\0' FIELD 15 '\\0' LEAF_NODE 16 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionB2GData = data ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionB2GData = data ASSIGN 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionB2GData = data LVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionB2GData FIELD 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionB2GData LEAF_NODE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_functionB2GData ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2GSink ( ) ; EXPR 4 functionB2GSink ( ) FUNCTION_CALL 5 functionB2GSink ( ) CALLEE 6 functionB2GSink LEAF_NODE 7 functionB2GSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_45_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 129, "project": "cwe399_ast_vul_function_test_adv_166", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53d_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53d_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53c_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53c_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53d_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53d_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53d_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53d_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53d_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53d_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53d_functionB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53c_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53c_functionB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53d_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53d_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53d_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53d_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53d_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 130, "project": "cwe399_ast_vul_function_test_adv_71", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52b_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_52c_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 131, "project": "cwe399_ast_vul_function_test_adv_20", "target": 1}
{"func": "SIMPLE_DECL 1 wchar_t * CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForBadSink ; VAR_DECL 2 wchar_t * CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForBadSink TYPE 3 wchar_t * TYPE_NAME 4 wchar_t LEAF_NODE 5 wchar_t POINTER 4 * LEAF_NODE 5 * NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForBadSink LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForBadSink LEAF_NODE 2 ; SIMPLE_DECL 1 wchar_t * CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForGoodSink ; VAR_DECL 2 wchar_t * CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForGoodSink TYPE 3 wchar_t * TYPE_NAME 4 wchar_t LEAF_NODE 5 wchar_t POINTER 4 * LEAF_NODE 5 * NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForGoodSink LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForGoodSink LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68b_functionSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForBadSink = data ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForBadSink = data ASSIGN 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForBadSink = data LVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForBadSink FIELD 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForBadSink LEAF_NODE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForBadSink ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68b_functionSink ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68b_functionSink ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68b_functionSink ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68b_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68b_functionSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68b_functionB2GSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForGoodSink = data ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForGoodSink = data ASSIGN 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForGoodSink = data LVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForGoodSink FIELD 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForGoodSink LEAF_NODE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_functionDataForGoodSink ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68b_functionB2GSink ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68b_functionB2GSink ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68b_functionB2GSink ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68b_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68b_functionB2GSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_68_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 132, "project": "cwe399_ast_vul_function_test_adv_42", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53d_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53d_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53c_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53c_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53d_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53d_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53d_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53d_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53d_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53d_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53d_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53c_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53c_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53d_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53d_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53d_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53d_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_53d_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 133, "project": "cwe399_ast_vul_function_test_adv_133", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53d_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53d_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53d_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_53d_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 134, "project": "cwe399_ast_vul_function_test_adv_33", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int staticFive ; staticFive = 5 ; VAR_DECL 2 int staticFive ; staticFive = 5 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticFive LEAF_NODE 4 staticFive LEAF_NODE 3 ; INIT 3 staticFive = 5 ASSIGN 4 staticFive = 5 LVAL 5 staticFive NAME 6 staticFive LEAF_NODE 7 staticFive ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 5 FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_07_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_07_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 ; LEAF_NODE 8 ; CONDITION 7 * data != '\\0' EXPR 8 * data != '\\0' UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 7 ; FOR_EXPR 7 data ++ EXPR 8 data ++ FIELD 9 data ++ LEAF_NODE 10 data LEAF_NODE 10 ++ LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 * data == SEARCH_CHAR EXPR 11 * data == SEARCH_CHAR UNARY_EXPR 12 * data UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 data LEAF_NODE 14 data EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 SEARCH_CHAR LEAF_NODE 13 SEARCH_CHAR LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 printLine ( \"We have a match!\" ) ; EXPR 13 printLine ( \"We have a match!\" ) FUNCTION_CALL 14 printLine ( \"We have a match!\" ) CALLEE 15 printLine LEAF_NODE 16 printLine LEAF_NODE 15 ( ARGUMENT 15 \"We have a match!\" FIELD 16 \"We have a match!\" LEAF_NODE 17 \"We have a match!\" LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive != 5 EXPR 5 staticFive != 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_07_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_07_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_07_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_07_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_07_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_07_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_07_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_07_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_07_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_07_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_07_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_07_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 135, "project": "cwe399_ast_vul_function_test_adv_147", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 136, "project": "cwe399_ast_vul_function_test_adv_127", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_51b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_51b_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_51b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_listen_socket_51b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 137, "project": "cwe399_ast_vul_function_test_adv_5", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_15_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_15_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 wcscpy LEAF_NODE 7 wcscpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 6 EXPR 5 6 FIELD 6 6 LEAF_NODE 7 6 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 6 : LEAF_NODE 7 case LEAF_NODE 7 6 LEAF_NODE 7 : LEAF_NODE 6 for LEAF_NODE 6 ( LEAF_NODE 6 ; LEAF_NODE 6 * LEAF_NODE 6 data LEAF_NODE 6 != LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 ++ LEAF_NODE 6 ) LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 * data == SEARCH_CHAR EXPR 9 * data == SEARCH_CHAR UNARY_EXPR 10 * data UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 data LEAF_NODE 12 data EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 wcscpy LEAF_NODE 7 wcscpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 5 EXPR 5 5 FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 6 : LEAF_NODE 7 case LEAF_NODE 7 6 LEAF_NODE 7 : EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 wcscpy LEAF_NODE 7 wcscpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 6 EXPR 5 6 FIELD 6 6 LEAF_NODE 7 6 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 6 : LEAF_NODE 7 case LEAF_NODE 7 6 LEAF_NODE 7 : LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_15_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_15_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_15_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_15_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_15_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_15_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_15_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_15_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_15_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_15_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_15_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_15_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 138, "project": "cwe399_ast_vul_function_test_adv_195", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54e_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 139, "project": "cwe399_ast_vul_function_test_adv_139", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE ; VAR_DECL 2 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE TYPE 3 struct FILE BASE_CLASSES { CLASS_CONTENT } CLASS_DEF 4 struct FILE BASE_CLASSES { CLASS_CONTENT } LEAF_NODE 5 struct CLASS_NAME 5 FILE LEAF_NODE 6 FILE LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { LEAF_NODE 5 CLASS_CONTENT LEAF_NODE 5 } NAME 3 FILE LEAF_NODE 4 FILE LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static char * LEAF_NODE 3 static TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 functionSource LEAF_NODE 3 functionSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } JUMP_STATEMENT 3 return data ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 data EXPR 5 data FIELD 6 data LEAF_NODE 7 data LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_42_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_42_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = functionSource ( data ) ; EXPR 4 data = functionSource ( data ) ASSIGN 5 data = functionSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 functionSource ( data ) FUNCTION_CALL 7 functionSource ( data ) CALLEE 8 functionSource LEAF_NODE 9 functionSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; CONDITION 4 * data != '\\0' EXPR 5 * data != '\\0' UNARY_EXPR 6 * data UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 data LEAF_NODE 8 data EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 4 ; FOR_EXPR 4 data ++ EXPR 5 data ++ FIELD 6 data ++ LEAF_NODE 7 data LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * data == SEARCH_CHAR EXPR 8 * data == SEARCH_CHAR UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 SEARCH_CHAR LEAF_NODE 10 SEARCH_CHAR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 printLine ( \"We have a match!\" ) ; EXPR 10 printLine ( \"We have a match!\" ) FUNCTION_CALL 11 printLine ( \"We have a match!\" ) CALLEE 12 printLine LEAF_NODE 13 printLine LEAF_NODE 12 ( ARGUMENT 12 \"We have a match!\" FIELD 13 \"We have a match!\" LEAF_NODE 14 \"We have a match!\" LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static char * LEAF_NODE 3 static TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 functionB2GSource LEAF_NODE 3 functionB2GSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } JUMP_STATEMENT 3 return data ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 data EXPR 5 data FIELD 6 data LEAF_NODE 7 data LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = functionB2GSource ( data ) ; EXPR 4 data = functionB2GSource ( data ) ASSIGN 5 data = functionB2GSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 functionB2GSource ( data ) FUNCTION_CALL 7 functionB2GSource ( data ) CALLEE 8 functionB2GSource LEAF_NODE 9 functionB2GSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < strlen ( data ) EXPR 6 i < strlen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 strlen ( data ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_42_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_42_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_42_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_42_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_42_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_42_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_42_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_42_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_42_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_42_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_42_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_42_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 140, "project": "cwe399_ast_vul_function_test_adv_150", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51b_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 141, "project": "cwe399_ast_vul_function_test_adv_67", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_65b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_65b_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; CONDITION 4 * data != '\\0' EXPR 5 * data != '\\0' UNARY_EXPR 6 * data UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 data LEAF_NODE 8 data EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 4 ; FOR_EXPR 4 data ++ EXPR 5 data ++ FIELD 6 data ++ LEAF_NODE 7 data LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * data == SEARCH_CHAR EXPR 8 * data == SEARCH_CHAR UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 SEARCH_CHAR LEAF_NODE 10 SEARCH_CHAR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 printLine ( \"We have a match!\" ) ; EXPR 10 printLine ( \"We have a match!\" ) FUNCTION_CALL 11 printLine ( \"We have a match!\" ) CALLEE 12 printLine LEAF_NODE 13 printLine LEAF_NODE 12 ( ARGUMENT 12 \"We have a match!\" FIELD 13 \"We have a match!\" LEAF_NODE 14 \"We have a match!\" LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_65b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_65b_functionB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < strlen ( data ) EXPR 6 i < strlen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 strlen ( data ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 142, "project": "cwe399_ast_vul_function_test_adv_81", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE ; VAR_DECL 2 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE TYPE 3 struct FILE BASE_CLASSES { CLASS_CONTENT } CLASS_DEF 4 struct FILE BASE_CLASSES { CLASS_CONTENT } LEAF_NODE 5 struct CLASS_NAME 5 FILE LEAF_NODE 6 FILE LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { LEAF_NODE 5 CLASS_CONTENT LEAF_NODE 5 } NAME 3 FILE LEAF_NODE 4 FILE LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_02_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_02_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgetws LEAF_NODE 15 fgetws LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgetws() failed\" ) ; EXPR 14 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 15 printLine ( \"fgetws() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgetws() failed\" FIELD 17 \"fgetws() failed\" LEAF_NODE 18 \"fgetws() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; LEAF_NODE 13 data LEAF_NODE 13 [ LEAF_NODE 13 dataLen LEAF_NODE 13 ] LEAF_NODE 13 = LEAF_NODE 13 L EXPR_STATEMENT 13 '\\0' ; EXPR 14 '\\0' FIELD 15 '\\0' LEAF_NODE 16 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 for LEAF_NODE 6 ( LEAF_NODE 6 ; LEAF_NODE 6 * LEAF_NODE 6 data LEAF_NODE 6 != LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 ++ LEAF_NODE 6 ) LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 * data == SEARCH_CHAR EXPR 9 * data == SEARCH_CHAR UNARY_EXPR 10 * data UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 data LEAF_NODE 12 data EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgetws LEAF_NODE 15 fgetws LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgetws() failed\" ) ; EXPR 14 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 15 printLine ( \"fgetws() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgetws() failed\" FIELD 17 \"fgetws() failed\" LEAF_NODE 18 \"fgetws() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; LEAF_NODE 13 data LEAF_NODE 13 [ LEAF_NODE 13 dataLen LEAF_NODE 13 ] LEAF_NODE 13 = LEAF_NODE 13 L EXPR_STATEMENT 13 '\\0' ; EXPR 14 '\\0' FIELD 15 '\\0' LEAF_NODE 16 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgetws LEAF_NODE 15 fgetws LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgetws() failed\" ) ; EXPR 14 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 15 printLine ( \"fgetws() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgetws() failed\" FIELD 17 \"fgetws() failed\" LEAF_NODE 18 \"fgetws() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; LEAF_NODE 13 data LEAF_NODE 13 [ LEAF_NODE 13 dataLen LEAF_NODE 13 ] LEAF_NODE 13 = LEAF_NODE 13 L EXPR_STATEMENT 13 '\\0' ; EXPR 14 '\\0' FIELD 15 '\\0' LEAF_NODE 16 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_02_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_02_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_02_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_02_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_02_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_02_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_02_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_02_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_02_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_02_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_02_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_02_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 143, "project": "cwe399_ast_vul_function_test_adv_158", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_03_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_03_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 strcpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 strcpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 strcpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 strcpy LEAF_NODE 7 strcpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 ; LEAF_NODE 8 ; CONDITION 7 * data != '\\0' EXPR 8 * data != '\\0' UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 7 ; FOR_EXPR 7 data ++ EXPR 8 data ++ FIELD 9 data ++ LEAF_NODE 10 data LEAF_NODE 10 ++ LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 * data == SEARCH_CHAR EXPR 11 * data == SEARCH_CHAR UNARY_EXPR 12 * data UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 data LEAF_NODE 14 data EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 SEARCH_CHAR LEAF_NODE 13 SEARCH_CHAR LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 printLine ( \"We have a match!\" ) ; EXPR 13 printLine ( \"We have a match!\" ) FUNCTION_CALL 14 printLine ( \"We have a match!\" ) CALLEE 15 printLine LEAF_NODE 16 printLine LEAF_NODE 15 ( ARGUMENT 15 \"We have a match!\" FIELD 16 \"We have a match!\" LEAF_NODE 17 \"We have a match!\" LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 strcpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 strcpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 strcpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 strcpy LEAF_NODE 7 strcpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 != 5 EXPR 5 5 != 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 strcpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 strcpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 strcpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 strcpy LEAF_NODE 7 strcpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 5 == 5 EXPR 5 5 == 5 FIELD 6 5 LEAF_NODE 7 5 EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_03_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_03_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_03_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_03_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_03_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_03_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_03_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_03_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_03_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_03_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_03_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_03_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 144, "project": "cwe399_ast_vul_function_test_adv_192", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_51b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_51b_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_51b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_51b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 145, "project": "cwe399_ast_vul_function_test_adv_88", "target": 1}
{"func": "SIMPLE_DECL 1 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData ; VAR_DECL 2 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData TYPE 3 size_t TYPE_NAME 4 size_t LEAF_NODE 5 size_t NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData LEAF_NODE 2 ; SIMPLE_DECL 1 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData ; VAR_DECL 2 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData TYPE 3 size_t TYPE_NAME 4 size_t LEAF_NODE 5 size_t NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData LEAF_NODE 2 ; SIMPLE_DECL 1 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionB2GData ; VAR_DECL 2 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionB2GData TYPE 3 size_t TYPE_NAME 4 size_t LEAF_NODE 5 size_t NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionB2GData LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionB2GData LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int stdin ; VAR_DECL 4 int stdin TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 stdin LEAF_NODE 6 stdin LEAF_NODE 4 ; EXPR_STATEMENT 3 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 4 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 5 fscanf ( stdin , \"%ud\" , & data ) CALLEE 6 fscanf LEAF_NODE 7 fscanf LEAF_NODE 6 ( ARGUMENT 6 stdin FIELD 7 stdin LEAF_NODE 8 stdin LEAF_NODE 6 , ARGUMENT 6 \"%ud\" FIELD 7 \"%ud\" LEAF_NODE 8 \"%ud\" LEAF_NODE 6 , ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData = data ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData = data ASSIGN 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData = data LVAL 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData FIELD 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData LEAF_NODE 8 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionSink ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionSink ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionSink ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionB2GSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 20 ; EXPR 4 data = 20 ASSIGN 5 data = 20 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 20 FIELD 7 20 LEAF_NODE 8 20 LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData = data ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData = data ASSIGN 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData = data LVAL 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData FIELD 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData LEAF_NODE 8 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionData ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionSink ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionSink ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionSink ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int stdin ; VAR_DECL 4 int stdin TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 stdin LEAF_NODE 6 stdin LEAF_NODE 4 ; EXPR_STATEMENT 3 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 4 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 5 fscanf ( stdin , \"%ud\" , & data ) CALLEE 6 fscanf LEAF_NODE 7 fscanf LEAF_NODE 6 ( ARGUMENT 6 stdin FIELD 7 stdin LEAF_NODE 8 stdin LEAF_NODE 6 , ARGUMENT 6 \"%ud\" FIELD 7 \"%ud\" LEAF_NODE 8 \"%ud\" LEAF_NODE 6 , ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionB2GData = data ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionB2GData = data ASSIGN 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionB2GData = data LVAL 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionB2GData FIELD 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionB2GData LEAF_NODE 8 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_functionB2GData ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionB2GSink ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionB2GSink ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionB2GSink ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_functionB2GSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 146, "project": "cwe399_ast_vul_function_test_adv_11", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53b_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53b_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53b_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53b_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53b_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53b_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53b_functionB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53b_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53b_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53b_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53b_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 147, "project": "cwe399_ast_vul_function_test_adv_13", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_51b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_51b_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; CONDITION 4 * data != '\\0' EXPR 5 * data != '\\0' UNARY_EXPR 6 * data UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 data LEAF_NODE 8 data EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 4 ; FOR_EXPR 4 data ++ EXPR 5 data ++ FIELD 6 data ++ LEAF_NODE 7 data LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * data == SEARCH_CHAR EXPR 8 * data == SEARCH_CHAR UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 SEARCH_CHAR LEAF_NODE 10 SEARCH_CHAR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 printLine ( \"We have a match!\" ) ; EXPR 10 printLine ( \"We have a match!\" ) FUNCTION_CALL 11 printLine ( \"We have a match!\" ) CALLEE 12 printLine LEAF_NODE 13 printLine LEAF_NODE 12 ( ARGUMENT 12 \"We have a match!\" FIELD 13 \"We have a match!\" LEAF_NODE 14 \"We have a match!\" LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_51b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_51b_functionB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < strlen ( data ) EXPR 6 i < strlen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 strlen ( data ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 148, "project": "cwe399_ast_vul_function_test_adv_29", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData ; VAR_DECL 2 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData TYPE 3 size_t TYPE_NAME 4 size_t LEAF_NODE 5 size_t NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData LEAF_NODE 2 ; SIMPLE_DECL 1 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData ; VAR_DECL 2 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData TYPE 3 size_t TYPE_NAME 4 size_t LEAF_NODE 5 size_t NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData LEAF_NODE 2 ; SIMPLE_DECL 1 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionB2GData ; VAR_DECL 2 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionB2GData TYPE 3 size_t TYPE_NAME 4 size_t LEAF_NODE 5 size_t NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionB2GData LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionB2GData LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68b_functionSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData ; VAR_DECL 4 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData ASSIGN 6 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData FIELD 8 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68b_functionSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData ; VAR_DECL 4 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData ASSIGN 6 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData FIELD 8 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68b_functionB2GSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionB2GData ; VAR_DECL 4 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionB2GData TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionB2GData ASSIGN 6 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionB2GData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionB2GData FIELD 8 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionB2GData LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_68_functionB2GData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 149, "project": "cwe399_ast_vul_function_test_adv_95", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 wchar_t * TYPE_NAME 3 wchar_t LEAF_NODE 4 wchar_t LEAF_NODE 3 * FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61b_functionSource LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61b_functionSource PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61b_functionSource ( data ) ; EXPR 4 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61b_functionSource ( data ) ASSIGN 5 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61b_functionSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61b_functionSource ( data ) FUNCTION_CALL 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61b_functionSource ( data ) CALLEE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61b_functionSource LEAF_NODE 9 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61b_functionSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 wchar_t * TYPE_NAME 3 wchar_t LEAF_NODE 4 wchar_t LEAF_NODE 3 * FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61b_functionB2GSource LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61b_functionB2GSource PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61b_functionB2GSource ( data ) ; EXPR 4 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61b_functionB2GSource ( data ) ASSIGN 5 data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61b_functionB2GSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61b_functionB2GSource ( data ) FUNCTION_CALL 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61b_functionB2GSource ( data ) CALLEE 8 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61b_functionB2GSource LEAF_NODE 9 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61b_functionB2GSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_61_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 150, "project": "cwe399_ast_vul_function_test_adv_97", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int staticTrue ; staticTrue = 1 ; VAR_DECL 2 int staticTrue ; staticTrue = 1 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticTrue LEAF_NODE 4 staticTrue LEAF_NODE 3 ; INIT 3 staticTrue = 1 ASSIGN 4 staticTrue = 1 LVAL 5 staticTrue NAME 6 staticTrue LEAF_NODE 7 staticTrue ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 2 ; SIMPLE_DECL 1 int staticFalse ; staticFalse = 0 ; VAR_DECL 2 int staticFalse ; staticFalse = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticFalse LEAF_NODE 4 staticFalse LEAF_NODE 3 ; INIT 3 staticFalse = 0 ASSIGN 4 staticFalse = 0 LVAL 5 staticFalse NAME 6 staticFalse LEAF_NODE 7 staticFalse ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_05_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_05_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticTrue EXPR 5 staticTrue FIELD 6 staticTrue LEAF_NODE 7 staticTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 ; LEAF_NODE 8 ; CONDITION 7 * data != '\\0' EXPR 8 * data != '\\0' UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 7 ; FOR_EXPR 7 data ++ EXPR 8 data ++ FIELD 9 data ++ LEAF_NODE 10 data LEAF_NODE 10 ++ LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 * data == SEARCH_CHAR EXPR 11 * data == SEARCH_CHAR UNARY_EXPR 12 * data UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 data LEAF_NODE 14 data EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 SEARCH_CHAR LEAF_NODE 13 SEARCH_CHAR LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 printLine ( \"We have a match!\" ) ; EXPR 13 printLine ( \"We have a match!\" ) FUNCTION_CALL 14 printLine ( \"We have a match!\" ) CALLEE 15 printLine LEAF_NODE 16 printLine LEAF_NODE 15 ( ARGUMENT 15 \"We have a match!\" FIELD 16 \"We have a match!\" LEAF_NODE 17 \"We have a match!\" LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFalse EXPR 5 staticFalse FIELD 6 staticFalse LEAF_NODE 7 staticFalse LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticTrue EXPR 5 staticTrue FIELD 6 staticTrue LEAF_NODE 7 staticTrue LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_05_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_05_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_05_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_05_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_05_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_05_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_05_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_05_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_05_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_05_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_05_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_05_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 151, "project": "cwe399_ast_vul_function_test_adv_183", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52b_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 152, "project": "cwe399_ast_vul_function_test_adv_32", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int stdin ; VAR_DECL 4 int stdin TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 stdin LEAF_NODE 6 stdin LEAF_NODE 4 ; EXPR_STATEMENT 3 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 4 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 5 fscanf ( stdin , \"%ud\" , & data ) CALLEE 6 fscanf LEAF_NODE 7 fscanf LEAF_NODE 6 ( ARGUMENT 6 stdin FIELD 7 stdin LEAF_NODE 8 stdin LEAF_NODE 6 , ARGUMENT 6 \"%ud\" FIELD 7 \"%ud\" LEAF_NODE 8 \"%ud\" LEAF_NODE 6 , ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionSink ( & data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionSink ( & data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionSink ( & data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 20 ; EXPR 4 data = 20 ASSIGN 5 data = 20 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 20 FIELD 7 20 LEAF_NODE 8 20 LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionSink ( & data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionSink ( & data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionSink ( & data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionB2GSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int stdin ; VAR_DECL 4 int stdin TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 stdin LEAF_NODE 6 stdin LEAF_NODE 4 ; EXPR_STATEMENT 3 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 4 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 5 fscanf ( stdin , \"%ud\" , & data ) CALLEE 6 fscanf LEAF_NODE 7 fscanf LEAF_NODE 6 ( ARGUMENT 6 stdin FIELD 7 stdin LEAF_NODE 8 stdin LEAF_NODE 6 , ARGUMENT 6 \"%ud\" FIELD 7 \"%ud\" LEAF_NODE 8 \"%ud\" LEAF_NODE 6 , ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionB2GSink ( & data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionB2GSink ( & data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionB2GSink ( & data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 153, "project": "cwe399_ast_vul_function_test_adv_8", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int staticFive ; staticFive = 5 ; VAR_DECL 2 int staticFive ; staticFive = 5 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 staticFive LEAF_NODE 4 staticFive LEAF_NODE 3 ; INIT 3 staticFive = 5 ASSIGN 4 staticFive = 5 LVAL 5 staticFive NAME 6 staticFive LEAF_NODE 7 staticFive ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 5 FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_07_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_07_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 strcpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 strcpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 strcpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 strcpy LEAF_NODE 7 strcpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 ; LEAF_NODE 8 ; CONDITION 7 * data != '\\0' EXPR 8 * data != '\\0' UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 7 ; FOR_EXPR 7 data ++ EXPR 8 data ++ FIELD 9 data ++ LEAF_NODE 10 data LEAF_NODE 10 ++ LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 * data == SEARCH_CHAR EXPR 11 * data == SEARCH_CHAR UNARY_EXPR 12 * data UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 data LEAF_NODE 14 data EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 SEARCH_CHAR LEAF_NODE 13 SEARCH_CHAR LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 printLine ( \"We have a match!\" ) ; EXPR 13 printLine ( \"We have a match!\" ) FUNCTION_CALL 14 printLine ( \"We have a match!\" ) CALLEE 15 printLine LEAF_NODE 16 printLine LEAF_NODE 15 ( ARGUMENT 15 \"We have a match!\" FIELD 16 \"We have a match!\" LEAF_NODE 17 \"We have a match!\" LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 strcpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 strcpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 strcpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 strcpy LEAF_NODE 7 strcpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive != 5 EXPR 5 staticFive != 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 strcpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 strcpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 strcpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 strcpy LEAF_NODE 7 strcpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticFive == 5 EXPR 5 staticFive == 5 FIELD 6 staticFive LEAF_NODE 7 staticFive EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_07_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_07_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_07_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_07_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_07_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_07_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_07_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_07_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_07_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_07_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_07_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_07_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 154, "project": "cwe399_ast_vul_function_test_adv_181", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 6 EXPR 5 6 FIELD 6 6 LEAF_NODE 7 6 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 6 : LEAF_NODE 7 case LEAF_NODE 7 6 LEAF_NODE 7 : LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; EXPR_STATEMENT 7 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 8 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 9 fscanf ( stdin , \"%ud\" , & data ) CALLEE 10 fscanf LEAF_NODE 11 fscanf LEAF_NODE 10 ( ARGUMENT 10 stdin FIELD 11 stdin LEAF_NODE 12 stdin LEAF_NODE 10 , ARGUMENT 10 \"%ud\" FIELD 11 \"%ud\" LEAF_NODE 12 \"%ud\" LEAF_NODE 10 , ARGUMENT 10 & data UNARY_EXPR 11 & data UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 data LEAF_NODE 13 data LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 7 EXPR 5 7 FIELD 6 7 LEAF_NODE 7 7 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 7 : LEAF_NODE 7 case LEAF_NODE 7 7 LEAF_NODE 7 : LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 6 EXPR 5 6 FIELD 6 6 LEAF_NODE 7 6 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 6 : LEAF_NODE 7 case LEAF_NODE 7 6 LEAF_NODE 7 : LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; EXPR_STATEMENT 7 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 8 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 9 fscanf ( stdin , \"%ud\" , & data ) CALLEE 10 fscanf LEAF_NODE 11 fscanf LEAF_NODE 10 ( ARGUMENT 10 stdin FIELD 11 stdin LEAF_NODE 12 stdin LEAF_NODE 10 , ARGUMENT 10 \"%ud\" FIELD 11 \"%ud\" LEAF_NODE 12 \"%ud\" LEAF_NODE 10 , ARGUMENT 10 & data UNARY_EXPR 11 & data UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 data LEAF_NODE 13 data LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 8 EXPR 5 8 FIELD 6 8 LEAF_NODE 7 8 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 7 : LEAF_NODE 7 case LEAF_NODE 7 7 LEAF_NODE 7 : EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) && data < 100 EXPR 9 data > strlen ( HELLO_STRING ) && data < 100 AND 10 data > strlen ( HELLO_STRING ) && data < 100 EXPR 11 data > strlen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 strlen ( HELLO_STRING ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 6 EXPR 5 6 FIELD 6 6 LEAF_NODE 7 6 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 6 : LEAF_NODE 7 case LEAF_NODE 7 6 LEAF_NODE 7 : LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; EXPR_STATEMENT 7 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 8 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 9 fscanf ( stdin , \"%ud\" , & data ) CALLEE 10 fscanf LEAF_NODE 11 fscanf LEAF_NODE 10 ( ARGUMENT 10 stdin FIELD 11 stdin LEAF_NODE 12 stdin LEAF_NODE 10 , ARGUMENT 10 \"%ud\" FIELD 11 \"%ud\" LEAF_NODE 12 \"%ud\" LEAF_NODE 10 , ARGUMENT 10 & data UNARY_EXPR 11 & data UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 data LEAF_NODE 13 data LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 7 EXPR 5 7 FIELD 6 7 LEAF_NODE 7 7 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 7 : LEAF_NODE 7 case LEAF_NODE 7 7 LEAF_NODE 7 : LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) && data < 100 EXPR 9 data > strlen ( HELLO_STRING ) && data < 100 AND 10 data > strlen ( HELLO_STRING ) && data < 100 EXPR 11 data > strlen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 strlen ( HELLO_STRING ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function1 LEAF_NODE 3 function1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 5 EXPR 5 5 FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 6 : LEAF_NODE 7 case LEAF_NODE 7 6 LEAF_NODE 7 : EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 7 EXPR 5 7 FIELD 6 7 LEAF_NODE 7 7 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 7 : LEAF_NODE 7 case LEAF_NODE 7 7 LEAF_NODE 7 : LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function2 LEAF_NODE 3 function2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 6 EXPR 5 6 FIELD 6 6 LEAF_NODE 7 6 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 6 : LEAF_NODE 7 case LEAF_NODE 7 6 LEAF_NODE 7 : EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 7 EXPR 5 7 FIELD 6 7 LEAF_NODE 7 7 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 7 : LEAF_NODE 7 case LEAF_NODE 7 7 LEAF_NODE 7 : LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 char * myString ; VAR_DECL 8 char * myString TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > strlen ( HELLO_STRING ) EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 11 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 12 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 14 ( TYPE_NAME 14 char LEAF_NODE 15 char LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( char ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( char ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( char ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 char FIELD 18 char LEAF_NODE 19 char LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 strcpy ( myString , HELLO_STRING ) ; EXPR 11 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 strcpy ( myString , HELLO_STRING ) CALLEE 13 strcpy LEAF_NODE 14 strcpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printLine ( myString ) ; EXPR 11 printLine ( myString ) FUNCTION_CALL 12 printLine ( myString ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function1 ( ) ; EXPR 4 function1 ( ) FUNCTION_CALL 5 function1 ( ) CALLEE 6 function1 LEAF_NODE 7 function1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function2 ( ) ; EXPR 4 function2 ( ) FUNCTION_CALL 5 function2 ( ) CALLEE 6 function2 LEAF_NODE 7 function2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 155, "project": "cwe399_ast_vul_function_test_adv_167", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54d_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54d_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54c_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54c_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54d_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54d_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54d_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54d_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54d_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54d_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54d_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54c_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54c_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54d_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54d_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54d_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54d_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54d_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 156, "project": "cwe399_ast_vul_function_test_adv_93", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_64b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_64b_functionSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr ; VAR_DECL 4 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr TYPE 5 size_t * TYPE_NAME 6 size_t LEAF_NODE 7 size_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( size_t * ) dataVoidPtr ASSIGN 6 dataPtr = ( size_t * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( size_t * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 size_t LEAF_NODE 9 size_t LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 size_t data ; data = ( * dataPtr ) ; VAR_DECL 4 size_t data ; data = ( * dataPtr ) TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_64b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_64b_functionSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr ; VAR_DECL 4 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr TYPE 5 size_t * TYPE_NAME 6 size_t LEAF_NODE 7 size_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( size_t * ) dataVoidPtr ASSIGN 6 dataPtr = ( size_t * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( size_t * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 size_t LEAF_NODE 9 size_t LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 size_t data ; data = ( * dataPtr ) ; VAR_DECL 4 size_t data ; data = ( * dataPtr ) TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_64b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_64b_functionB2GSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr ; VAR_DECL 4 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr TYPE 5 size_t * TYPE_NAME 6 size_t LEAF_NODE 7 size_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( size_t * ) dataVoidPtr ASSIGN 6 dataPtr = ( size_t * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( size_t * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 size_t LEAF_NODE 9 size_t LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 size_t data ; data = ( * dataPtr ) ; VAR_DECL 4 size_t data ; data = ( * dataPtr ) TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 157, "project": "cwe399_ast_vul_function_test_adv_63", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54e_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54e_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54d_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54d_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54e_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54e_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54e_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54e_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54e_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54e_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54e_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54d_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54d_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54e_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54e_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54e_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54e_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_54e_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 158, "project": "cwe399_ast_vul_function_test_adv_2", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionGlobal ; VAR_DECL 2 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionGlobal TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionGlobal LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionGlobal LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionGlobal EXPR 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionGlobal FIELD 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionGlobal LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionGlobal LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 for LEAF_NODE 6 ( LEAF_NODE 6 ; LEAF_NODE 6 * LEAF_NODE 6 data LEAF_NODE 6 != LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 ++ LEAF_NODE 6 ) LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 * data == SEARCH_CHAR EXPR 9 * data == SEARCH_CHAR UNARY_EXPR 10 * data UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 data LEAF_NODE 12 data EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } SIMPLE_DECL 1 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G1Global ; VAR_DECL 2 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G1Global TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G1Global LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G1Global LEAF_NODE 2 ; SIMPLE_DECL 1 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G2Global ; VAR_DECL 2 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G2Global TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G2Global LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G2Global LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G1Sink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G1Sink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G1Global EXPR 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G1Global FIELD 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G1Global LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G1Global LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G2Sink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G2Sink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G2Global EXPR 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G2Global FIELD 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G2Global LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_22_functionB2G2Global LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 159, "project": "cwe399_ast_vul_function_test_adv_39", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionSink LEAF_NODE 3 functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void EXPR_STATEMENT 3 ( * funcPtr ) ( size_t ) = functionSink ; EXPR 4 ( * funcPtr ) ( size_t ) = functionSink ASSIGN 5 ( * funcPtr ) ( size_t ) = functionSink LVAL 6 ( * funcPtr ) ( size_t ) FUNCTION_CALL 7 ( * funcPtr ) ( size_t ) CALLEE 8 ( * funcPtr ) LEAF_NODE 9 ( UNARY_EXPR 9 * funcPtr UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 funcPtr LEAF_NODE 11 funcPtr LEAF_NODE 9 ) LEAF_NODE 8 ( ARGUMENT 8 size_t FIELD 9 size_t LEAF_NODE 10 size_t LEAF_NODE 8 ) ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 functionSink FIELD 7 functionSink LEAF_NODE 8 functionSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 5 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 6 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ CHAR_ARRAY_SIZE ] LEAF_NODE 8 [ FIELD 8 CHAR_ARRAY_SIZE LEAF_NODE 9 CHAR_ARRAY_SIZE LEAF_NODE 8 ] NAME 6 inputBuffer LEAF_NODE 7 inputBuffer LEAF_NODE 6 ; INIT 6 inputBuffer = \"\" ASSIGN 7 inputBuffer = \"\" LVAL 8 inputBuffer NAME 9 inputBuffer LEAF_NODE 10 inputBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; SIMPLE_DECL 4 int stdin ; VAR_DECL 5 int stdin TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 stdin LEAF_NODE 7 stdin LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 6 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 7 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 8 fgets LEAF_NODE 9 fgets LEAF_NODE 8 ( ARGUMENT 8 inputBuffer FIELD 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 8 , ARGUMENT 8 CHAR_ARRAY_SIZE FIELD 9 CHAR_ARRAY_SIZE LEAF_NODE 10 CHAR_ARRAY_SIZE LEAF_NODE 8 , ARGUMENT 8 stdin FIELD 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ) EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 8 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 9 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 11 strtoul ( inputBuffer , NULL , 0 ) CALLEE 12 strtoul LEAF_NODE 13 strtoul LEAF_NODE 12 ( ARGUMENT 12 inputBuffer FIELD 13 inputBuffer LEAF_NODE 14 inputBuffer LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"fgets() failed.\" ) ; EXPR 8 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 9 printLine ( \"fgets() failed.\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"fgets() failed.\" FIELD 11 \"fgets() failed.\" LEAF_NODE 12 \"fgets() failed.\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionSink LEAF_NODE 3 functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void EXPR_STATEMENT 3 ( * funcPtr ) ( size_t ) = functionSink ; EXPR 4 ( * funcPtr ) ( size_t ) = functionSink ASSIGN 5 ( * funcPtr ) ( size_t ) = functionSink LVAL 6 ( * funcPtr ) ( size_t ) FUNCTION_CALL 7 ( * funcPtr ) ( size_t ) CALLEE 8 ( * funcPtr ) LEAF_NODE 9 ( UNARY_EXPR 9 * funcPtr UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 funcPtr LEAF_NODE 11 funcPtr LEAF_NODE 9 ) LEAF_NODE 8 ( ARGUMENT 8 size_t FIELD 9 size_t LEAF_NODE 10 size_t LEAF_NODE 8 ) ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 functionSink FIELD 7 functionSink LEAF_NODE 8 functionSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 20 ; EXPR 4 data = 20 ASSIGN 5 data = 20 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 20 FIELD 7 20 LEAF_NODE 8 20 LEAF_NODE 4 ; EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2GSink LEAF_NODE 3 functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void EXPR_STATEMENT 3 ( * funcPtr ) ( size_t ) = functionB2GSink ; EXPR 4 ( * funcPtr ) ( size_t ) = functionB2GSink ASSIGN 5 ( * funcPtr ) ( size_t ) = functionB2GSink LVAL 6 ( * funcPtr ) ( size_t ) FUNCTION_CALL 7 ( * funcPtr ) ( size_t ) CALLEE 8 ( * funcPtr ) LEAF_NODE 9 ( UNARY_EXPR 9 * funcPtr UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 funcPtr LEAF_NODE 11 funcPtr LEAF_NODE 9 ) LEAF_NODE 8 ( ARGUMENT 8 size_t FIELD 9 size_t LEAF_NODE 10 size_t LEAF_NODE 8 ) ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 functionB2GSink FIELD 7 functionB2GSink LEAF_NODE 8 functionB2GSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 5 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 6 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ CHAR_ARRAY_SIZE ] LEAF_NODE 8 [ FIELD 8 CHAR_ARRAY_SIZE LEAF_NODE 9 CHAR_ARRAY_SIZE LEAF_NODE 8 ] NAME 6 inputBuffer LEAF_NODE 7 inputBuffer LEAF_NODE 6 ; INIT 6 inputBuffer = \"\" ASSIGN 7 inputBuffer = \"\" LVAL 8 inputBuffer NAME 9 inputBuffer LEAF_NODE 10 inputBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; SIMPLE_DECL 4 int stdin ; VAR_DECL 5 int stdin TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 stdin LEAF_NODE 7 stdin LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 6 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 7 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 8 fgets LEAF_NODE 9 fgets LEAF_NODE 8 ( ARGUMENT 8 inputBuffer FIELD 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 8 , ARGUMENT 8 CHAR_ARRAY_SIZE FIELD 9 CHAR_ARRAY_SIZE LEAF_NODE 10 CHAR_ARRAY_SIZE LEAF_NODE 8 , ARGUMENT 8 stdin FIELD 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ) EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 8 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 9 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 11 strtoul ( inputBuffer , NULL , 0 ) CALLEE 12 strtoul LEAF_NODE 13 strtoul LEAF_NODE 12 ( ARGUMENT 12 inputBuffer FIELD 13 inputBuffer LEAF_NODE 14 inputBuffer LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"fgets() failed.\" ) ; EXPR 8 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 9 printLine ( \"fgets() failed.\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"fgets() failed.\" FIELD 11 \"fgets() failed.\" LEAF_NODE 12 \"fgets() failed.\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 160, "project": "cwe399_ast_vul_function_test_adv_173", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 size_t TYPE_NAME 3 size_t LEAF_NODE 4 size_t FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionSource LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionSource PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionSource ( data ) ; EXPR 4 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionSource ( data ) ASSIGN 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionSource ( data ) FUNCTION_CALL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionSource ( data ) CALLEE 8 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionSource LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 size_t TYPE_NAME 3 size_t LEAF_NODE 4 size_t FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionSource LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionSource PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionSource ( data ) ; EXPR 4 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionSource ( data ) ASSIGN 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionSource ( data ) FUNCTION_CALL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionSource ( data ) CALLEE 8 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionSource LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 size_t TYPE_NAME 3 size_t LEAF_NODE 4 size_t FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionB2GSource LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionB2GSource PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionB2GSource ( data ) ; EXPR 4 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionB2GSource ( data ) ASSIGN 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionB2GSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionB2GSource ( data ) FUNCTION_CALL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionB2GSource ( data ) CALLEE 8 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionB2GSource LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_functionB2GSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 161, "project": "cwe399_ast_vul_function_test_adv_140", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_13_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_13_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 wcscpy LEAF_NODE 7 wcscpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE == 5 EXPR 5 GLOBAL_CONST_FIVE == 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 for LEAF_NODE 6 ( LEAF_NODE 6 ; LEAF_NODE 6 * LEAF_NODE 6 data LEAF_NODE 6 != LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 ++ LEAF_NODE 6 ) LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 * data == SEARCH_CHAR EXPR 9 * data == SEARCH_CHAR UNARY_EXPR 10 * data UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 data LEAF_NODE 12 data EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 wcscpy LEAF_NODE 7 wcscpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE != 5 EXPR 5 GLOBAL_CONST_FIVE != 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) ; EXPR 4 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) FUNCTION_CALL 5 wcscpy ( data , BAD_SOURCE_FIXED_STRING ) CALLEE 6 wcscpy LEAF_NODE 7 wcscpy LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 , ARGUMENT 6 BAD_SOURCE_FIXED_STRING FIELD 7 BAD_SOURCE_FIXED_STRING LEAF_NODE 8 BAD_SOURCE_FIXED_STRING LEAF_NODE 6 ) LEAF_NODE 4 ; SIMPLE_DECL 3 int GLOBAL_CONST_FIVE ; VAR_DECL 4 int GLOBAL_CONST_FIVE TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 GLOBAL_CONST_FIVE LEAF_NODE 6 GLOBAL_CONST_FIVE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 GLOBAL_CONST_FIVE == 5 EXPR 5 GLOBAL_CONST_FIVE == 5 FIELD 6 GLOBAL_CONST_FIVE LEAF_NODE 7 GLOBAL_CONST_FIVE EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 5 LEAF_NODE 7 5 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_13_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_13_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_13_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_13_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_13_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_13_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_13_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_13_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_13_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_13_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_13_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_13_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 162, "project": "cwe399_ast_vul_function_test_adv_145", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_17_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_17_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int i , int j ; INIT_DECL_LIST 4 int i , int j VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 , VAR_DECL 5 int j TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 j LEAF_NODE 7 j LEAF_NODE 4 ; SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < 1 EXPR 5 i < 1 FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 i ++ EXPR 5 i ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int stdin ; VAR_DECL 7 int stdin TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 stdin LEAF_NODE 9 stdin LEAF_NODE 7 ; EXPR_STATEMENT 6 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 7 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 8 fscanf ( stdin , \"%ud\" , & data ) CALLEE 9 fscanf LEAF_NODE 10 fscanf LEAF_NODE 9 ( ARGUMENT 9 stdin FIELD 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 , ARGUMENT 9 \"%ud\" FIELD 10 \"%ud\" LEAF_NODE 11 \"%ud\" LEAF_NODE 9 , ARGUMENT 9 & data UNARY_EXPR 10 & data UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 data LEAF_NODE 12 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 j = 0 ; EXPR 5 j = 0 ASSIGN 6 j = 0 LVAL 7 j FIELD 8 j LEAF_NODE 9 j ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 j < 1 EXPR 5 j < 1 FIELD 6 j LEAF_NODE 7 j REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 j ++ EXPR 5 j ++ FIELD 6 j ++ LEAF_NODE 7 j LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) EXPR 9 data > wcslen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 wcslen ( HELLO_STRING ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int i , int k ; INIT_DECL_LIST 4 int i , int k VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 , VAR_DECL 5 int k TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 k LEAF_NODE 7 k LEAF_NODE 4 ; SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < 1 EXPR 5 i < 1 FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 i ++ EXPR 5 i ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int stdin ; VAR_DECL 7 int stdin TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 stdin LEAF_NODE 9 stdin LEAF_NODE 7 ; EXPR_STATEMENT 6 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 7 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 8 fscanf ( stdin , \"%ud\" , & data ) CALLEE 9 fscanf LEAF_NODE 10 fscanf LEAF_NODE 9 ( ARGUMENT 9 stdin FIELD 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 , ARGUMENT 9 \"%ud\" FIELD 10 \"%ud\" LEAF_NODE 11 \"%ud\" LEAF_NODE 9 , ARGUMENT 9 & data UNARY_EXPR 10 & data UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 data LEAF_NODE 12 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 k = 0 ; EXPR 5 k = 0 ASSIGN 6 k = 0 LVAL 7 k FIELD 8 k LEAF_NODE 9 k ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 k < 1 EXPR 5 k < 1 FIELD 6 k LEAF_NODE 7 k REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 k ++ EXPR 5 k ++ FIELD 6 k ++ LEAF_NODE 7 k LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 9 data > wcslen ( HELLO_STRING ) && data < 100 AND 10 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 11 data > wcslen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 wcslen ( HELLO_STRING ) CALLEE 13 wcslen LEAF_NODE 14 wcslen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int h , int j ; INIT_DECL_LIST 4 int h , int j VAR_DECL 5 int h TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 h LEAF_NODE 7 h LEAF_NODE 5 , VAR_DECL 5 int j TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 j LEAF_NODE 7 j LEAF_NODE 4 ; SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 h = 0 ; EXPR 5 h = 0 ASSIGN 6 h = 0 LVAL 7 h FIELD 8 h LEAF_NODE 9 h ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 h < 1 EXPR 5 h < 1 FIELD 6 h LEAF_NODE 7 h REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 h ++ EXPR 5 h ++ FIELD 6 h ++ LEAF_NODE 7 h LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 j = 0 ; EXPR 5 j = 0 ASSIGN 6 j = 0 LVAL 7 j FIELD 8 j LEAF_NODE 9 j ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 j < 1 EXPR 5 j < 1 FIELD 6 j LEAF_NODE 7 j REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; FOR_EXPR 4 j ++ EXPR 5 j ++ FIELD 6 j ++ LEAF_NODE 7 j LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) EXPR 9 data > wcslen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 wcslen ( HELLO_STRING ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_17_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_17_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_17_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_17_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_17_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_17_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_17_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_17_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_17_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_17_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_17_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_17_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 163, "project": "cwe399_ast_vul_function_test_adv_186", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64b_functionSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64b_functionSink ( & data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64b_functionSink ( & data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64b_functionSink ( & data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64b_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64b_functionSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64b_functionB2GSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64b_functionB2GSink ( & data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64b_functionB2GSink ( & data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64b_functionB2GSink ( & data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64b_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_64_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 164, "project": "cwe399_ast_vul_function_test_adv_117", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_66b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_66b_functionSink PARAMETER_LIST 2 ( size_t [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t [ ] dataArray TYPE 4 size_t [ ] TYPE_NAME 5 size_t LEAF_NODE 6 size_t TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = dataArray [ 2 ] ; VAR_DECL 4 size_t data ; data = dataArray [ 2 ] TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = dataArray [ 2 ] ASSIGN 6 data = dataArray [ 2 ] LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataArray [ 2 ] FIELD 8 dataArray [ 2 ] LEAF_NODE 9 dataArray LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_66b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_66b_functionSink PARAMETER_LIST 2 ( size_t [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t [ ] dataArray TYPE 4 size_t [ ] TYPE_NAME 5 size_t LEAF_NODE 6 size_t TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = dataArray [ 2 ] ; VAR_DECL 4 size_t data ; data = dataArray [ 2 ] TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = dataArray [ 2 ] ASSIGN 6 data = dataArray [ 2 ] LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataArray [ 2 ] FIELD 8 dataArray [ 2 ] LEAF_NODE 9 dataArray LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_66b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_66b_functionB2GSink PARAMETER_LIST 2 ( size_t [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t [ ] dataArray TYPE 4 size_t [ ] TYPE_NAME 5 size_t LEAF_NODE 6 size_t TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = dataArray [ 2 ] ; VAR_DECL 4 size_t data ; data = dataArray [ 2 ] TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = dataArray [ 2 ] ASSIGN 6 data = dataArray [ 2 ] LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 dataArray [ 2 ] FIELD 8 dataArray [ 2 ] LEAF_NODE 9 dataArray LEAF_NODE 9 [ EXPR 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 ] LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 165, "project": "cwe399_ast_vul_function_test_adv_6", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_63b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_63b_functionSink PARAMETER_LIST 2 ( wchar_t * * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * * dataPtr TYPE 4 wchar_t * * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = * dataPtr ; VAR_DECL 4 wchar_t * data ; data = * dataPtr TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_63b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_63b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * * dataPtr TYPE 4 wchar_t * * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; data = * dataPtr ; VAR_DECL 4 wchar_t * data ; data = * dataPtr TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 166, "project": "cwe399_ast_vul_function_test_adv_134", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int stdin ; VAR_DECL 4 int stdin TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 stdin LEAF_NODE 6 stdin LEAF_NODE 4 ; EXPR_STATEMENT 3 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 4 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 5 fscanf ( stdin , \"%ud\" , & data ) CALLEE 6 fscanf LEAF_NODE 7 fscanf LEAF_NODE 6 ( ARGUMENT 6 stdin FIELD 7 stdin LEAF_NODE 8 stdin LEAF_NODE 6 , ARGUMENT 6 \"%ud\" FIELD 7 \"%ud\" LEAF_NODE 8 \"%ud\" LEAF_NODE 6 , ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataCopy ; dataCopy = data ; VAR_DECL 5 size_t dataCopy ; dataCopy = data TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataCopy LEAF_NODE 7 dataCopy LEAF_NODE 6 ; INIT 6 dataCopy = data ASSIGN 7 dataCopy = data LVAL 8 dataCopy NAME 9 dataCopy LEAF_NODE 10 dataCopy ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 5 ; SIMPLE_DECL 4 size_t data ; data = dataCopy ; VAR_DECL 5 size_t data ; data = dataCopy TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataCopy ASSIGN 7 data = dataCopy LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataCopy FIELD 9 dataCopy LEAF_NODE 10 dataCopy LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char * myString ; VAR_DECL 6 char * myString TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 myString LEAF_NODE 8 myString LEAF_NODE 6 ; SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 data > strlen ( HELLO_STRING ) EXPR 7 data > strlen ( HELLO_STRING ) FIELD 8 data LEAF_NODE 9 data REL_OPERATOR 8 > LEAF_NODE 9 > FUNCTION_CALL 8 strlen ( HELLO_STRING ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 HELLO_STRING FIELD 10 HELLO_STRING LEAF_NODE 11 HELLO_STRING LEAF_NODE 9 ) LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 11 myString FIELD 12 myString LEAF_NODE 13 myString ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 12 ( TYPE_NAME 12 char LEAF_NODE 13 char LEAF_NODE 12 * LEAF_NODE 12 ) FUNCTION_CALL 12 malloc ( data * sizeof ( char ) ) CALLEE 13 malloc LEAF_NODE 14 malloc LEAF_NODE 13 ( ARGUMENT 13 data * sizeof ( char ) FIELD 14 data LEAF_NODE 15 data LEAF_NODE 14 * FUNCTION_CALL 14 sizeof ( char ) CALLEE 15 sizeof LEAF_NODE 16 sizeof LEAF_NODE 15 ( ARGUMENT 15 char FIELD 16 char LEAF_NODE 17 char LEAF_NODE 15 ) LEAF_NODE 13 ) LEAF_NODE 9 ; EXPR_STATEMENT 8 strcpy ( myString , HELLO_STRING ) ; EXPR 9 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 10 strcpy ( myString , HELLO_STRING ) CALLEE 11 strcpy LEAF_NODE 12 strcpy LEAF_NODE 11 ( ARGUMENT 11 myString FIELD 12 myString LEAF_NODE 13 myString LEAF_NODE 11 , ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 8 printLine ( myString ) ; EXPR 9 printLine ( myString ) FUNCTION_CALL 10 printLine ( myString ) CALLEE 11 printLine LEAF_NODE 12 printLine LEAF_NODE 11 ( ARGUMENT 11 myString FIELD 12 myString LEAF_NODE 13 myString LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 8 free ( myString ) ; EXPR 9 free ( myString ) FUNCTION_CALL 10 free ( myString ) CALLEE 11 free LEAF_NODE 12 free LEAF_NODE 11 ( ARGUMENT 11 myString FIELD 12 myString LEAF_NODE 13 myString LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 5 KEYWORD 6 else LEAF_NODE 7 else STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 9 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 10 printLine ( \"Input is less than the length of the source string\" ) CALLEE 11 printLine LEAF_NODE 12 printLine LEAF_NODE 11 ( ARGUMENT 11 \"Input is less than the length of the source string\" FIELD 12 \"Input is less than the length of the source string\" LEAF_NODE 13 \"Input is less than the length of the source string\" LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 7 } LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 20 ; EXPR 4 data = 20 ASSIGN 5 data = 20 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 20 FIELD 7 20 LEAF_NODE 8 20 LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataCopy ; dataCopy = data ; VAR_DECL 5 size_t dataCopy ; dataCopy = data TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataCopy LEAF_NODE 7 dataCopy LEAF_NODE 6 ; INIT 6 dataCopy = data ASSIGN 7 dataCopy = data LVAL 8 dataCopy NAME 9 dataCopy LEAF_NODE 10 dataCopy ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 5 ; SIMPLE_DECL 4 size_t data ; data = dataCopy ; VAR_DECL 5 size_t data ; data = dataCopy TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataCopy ASSIGN 7 data = dataCopy LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataCopy FIELD 9 dataCopy LEAF_NODE 10 dataCopy LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char * myString ; VAR_DECL 6 char * myString TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 myString LEAF_NODE 8 myString LEAF_NODE 6 ; SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 data > strlen ( HELLO_STRING ) EXPR 7 data > strlen ( HELLO_STRING ) FIELD 8 data LEAF_NODE 9 data REL_OPERATOR 8 > LEAF_NODE 9 > FUNCTION_CALL 8 strlen ( HELLO_STRING ) CALLEE 9 strlen LEAF_NODE 10 strlen LEAF_NODE 9 ( ARGUMENT 9 HELLO_STRING FIELD 10 HELLO_STRING LEAF_NODE 11 HELLO_STRING LEAF_NODE 9 ) LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 11 myString FIELD 12 myString LEAF_NODE 13 myString ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 12 ( TYPE_NAME 12 char LEAF_NODE 13 char LEAF_NODE 12 * LEAF_NODE 12 ) FUNCTION_CALL 12 malloc ( data * sizeof ( char ) ) CALLEE 13 malloc LEAF_NODE 14 malloc LEAF_NODE 13 ( ARGUMENT 13 data * sizeof ( char ) FIELD 14 data LEAF_NODE 15 data LEAF_NODE 14 * FUNCTION_CALL 14 sizeof ( char ) CALLEE 15 sizeof LEAF_NODE 16 sizeof LEAF_NODE 15 ( ARGUMENT 15 char FIELD 16 char LEAF_NODE 17 char LEAF_NODE 15 ) LEAF_NODE 13 ) LEAF_NODE 9 ; EXPR_STATEMENT 8 strcpy ( myString , HELLO_STRING ) ; EXPR 9 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 10 strcpy ( myString , HELLO_STRING ) CALLEE 11 strcpy LEAF_NODE 12 strcpy LEAF_NODE 11 ( ARGUMENT 11 myString FIELD 12 myString LEAF_NODE 13 myString LEAF_NODE 11 , ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 8 printLine ( myString ) ; EXPR 9 printLine ( myString ) FUNCTION_CALL 10 printLine ( myString ) CALLEE 11 printLine LEAF_NODE 12 printLine LEAF_NODE 11 ( ARGUMENT 11 myString FIELD 12 myString LEAF_NODE 13 myString LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 8 free ( myString ) ; EXPR 9 free ( myString ) FUNCTION_CALL 10 free ( myString ) CALLEE 11 free LEAF_NODE 12 free LEAF_NODE 11 ( ARGUMENT 11 myString FIELD 12 myString LEAF_NODE 13 myString LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 5 KEYWORD 6 else LEAF_NODE 7 else STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 9 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 10 printLine ( \"Input is less than the length of the source string\" ) CALLEE 11 printLine LEAF_NODE 12 printLine LEAF_NODE 11 ( ARGUMENT 11 \"Input is less than the length of the source string\" FIELD 12 \"Input is less than the length of the source string\" LEAF_NODE 13 \"Input is less than the length of the source string\" LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 7 } LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int stdin ; VAR_DECL 4 int stdin TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 stdin LEAF_NODE 6 stdin LEAF_NODE 4 ; EXPR_STATEMENT 3 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 4 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 5 fscanf ( stdin , \"%ud\" , & data ) CALLEE 6 fscanf LEAF_NODE 7 fscanf LEAF_NODE 6 ( ARGUMENT 6 stdin FIELD 7 stdin LEAF_NODE 8 stdin LEAF_NODE 6 , ARGUMENT 6 \"%ud\" FIELD 7 \"%ud\" LEAF_NODE 8 \"%ud\" LEAF_NODE 6 , ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataCopy ; dataCopy = data ; VAR_DECL 5 size_t dataCopy ; dataCopy = data TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataCopy LEAF_NODE 7 dataCopy LEAF_NODE 6 ; INIT 6 dataCopy = data ASSIGN 7 dataCopy = data LVAL 8 dataCopy NAME 9 dataCopy LEAF_NODE 10 dataCopy ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 5 ; SIMPLE_DECL 4 size_t data ; data = dataCopy ; VAR_DECL 5 size_t data ; data = dataCopy TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataCopy ASSIGN 7 data = dataCopy LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataCopy FIELD 9 dataCopy LEAF_NODE 10 dataCopy LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 char * myString ; VAR_DECL 6 char * myString TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 myString LEAF_NODE 8 myString LEAF_NODE 6 ; SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 data > strlen ( HELLO_STRING ) && data < 100 EXPR 7 data > strlen ( HELLO_STRING ) && data < 100 AND 8 data > strlen ( HELLO_STRING ) && data < 100 EXPR 9 data > strlen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 strlen ( HELLO_STRING ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 9 && EXPR 9 data < 100 FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 < LEAF_NODE 11 < FIELD 10 100 LEAF_NODE 11 100 LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 10 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 11 myString FIELD 12 myString LEAF_NODE 13 myString ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 12 ( TYPE_NAME 12 char LEAF_NODE 13 char LEAF_NODE 12 * LEAF_NODE 12 ) FUNCTION_CALL 12 malloc ( data * sizeof ( char ) ) CALLEE 13 malloc LEAF_NODE 14 malloc LEAF_NODE 13 ( ARGUMENT 13 data * sizeof ( char ) FIELD 14 data LEAF_NODE 15 data LEAF_NODE 14 * FUNCTION_CALL 14 sizeof ( char ) CALLEE 15 sizeof LEAF_NODE 16 sizeof LEAF_NODE 15 ( ARGUMENT 15 char FIELD 16 char LEAF_NODE 17 char LEAF_NODE 15 ) LEAF_NODE 13 ) LEAF_NODE 9 ; EXPR_STATEMENT 8 strcpy ( myString , HELLO_STRING ) ; EXPR 9 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 10 strcpy ( myString , HELLO_STRING ) CALLEE 11 strcpy LEAF_NODE 12 strcpy LEAF_NODE 11 ( ARGUMENT 11 myString FIELD 12 myString LEAF_NODE 13 myString LEAF_NODE 11 , ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 8 printLine ( myString ) ; EXPR 9 printLine ( myString ) FUNCTION_CALL 10 printLine ( myString ) CALLEE 11 printLine LEAF_NODE 12 printLine LEAF_NODE 11 ( ARGUMENT 11 myString FIELD 12 myString LEAF_NODE 13 myString LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 8 free ( myString ) ; EXPR 9 free ( myString ) FUNCTION_CALL 10 free ( myString ) CALLEE 11 free LEAF_NODE 12 free LEAF_NODE 11 ( ARGUMENT 11 myString FIELD 12 myString LEAF_NODE 13 myString LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 5 KEYWORD 6 else LEAF_NODE 7 else STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 9 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 10 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 11 printLine LEAF_NODE 12 printLine LEAF_NODE 11 ( ARGUMENT 11 \"Input is less than the length of the source string or too large\" FIELD 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 \"Input is less than the length of the source string or too large\" LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 7 } LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 167, "project": "cwe399_ast_vul_function_test_adv_174", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static size_t LEAF_NODE 3 static TYPE_NAME 3 size_t LEAF_NODE 4 size_t FUNCTION_NAME 2 functionSource LEAF_NODE 3 functionSource PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 data = rand ( ) ; EXPR 4 data = rand ( ) ASSIGN 5 data = rand ( ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 rand ( ) FUNCTION_CALL 7 rand ( ) CALLEE 8 rand LEAF_NODE 9 rand LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return data ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 data EXPR 5 data FIELD 6 data LEAF_NODE 7 data LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = functionSource ( data ) ; EXPR 4 data = functionSource ( data ) ASSIGN 5 data = functionSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 functionSource ( data ) FUNCTION_CALL 7 functionSource ( data ) CALLEE 8 functionSource LEAF_NODE 9 functionSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static size_t LEAF_NODE 3 static TYPE_NAME 3 size_t LEAF_NODE 4 size_t FUNCTION_NAME 2 functionSource LEAF_NODE 3 functionSource PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 data = 20 ; EXPR 4 data = 20 ASSIGN 5 data = 20 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 20 FIELD 7 20 LEAF_NODE 8 20 LEAF_NODE 4 ; JUMP_STATEMENT 3 return data ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 data EXPR 5 data FIELD 6 data LEAF_NODE 7 data LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = functionSource ( data ) ; EXPR 4 data = functionSource ( data ) ASSIGN 5 data = functionSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 functionSource ( data ) FUNCTION_CALL 7 functionSource ( data ) CALLEE 8 functionSource LEAF_NODE 9 functionSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static size_t LEAF_NODE 3 static TYPE_NAME 3 size_t LEAF_NODE 4 size_t FUNCTION_NAME 2 functionB2GSource LEAF_NODE 3 functionB2GSource PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 data = rand ( ) ; EXPR 4 data = rand ( ) ASSIGN 5 data = rand ( ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 rand ( ) FUNCTION_CALL 7 rand ( ) CALLEE 8 rand LEAF_NODE 9 rand LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return data ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 data EXPR 5 data FIELD 6 data LEAF_NODE 7 data LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = functionB2GSource ( data ) ; EXPR 4 data = functionB2GSource ( data ) ASSIGN 5 data = functionB2GSource ( data ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 functionB2GSource ( data ) FUNCTION_CALL 7 functionB2GSource ( data ) CALLEE 8 functionB2GSource LEAF_NODE 9 functionB2GSource LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 168, "project": "cwe399_ast_vul_function_test_adv_184", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_functionSink PARAMETER_LIST 2 ( size_t * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t * dataPtr TYPE 4 size_t * TYPE_NAME 5 size_t LEAF_NODE 6 size_t POINTER 5 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = * dataPtr ; VAR_DECL 4 size_t data ; data = * dataPtr TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_functionSink PARAMETER_LIST 2 ( size_t * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t * dataPtr TYPE 4 size_t * TYPE_NAME 5 size_t LEAF_NODE 6 size_t POINTER 5 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = * dataPtr ; VAR_DECL 4 size_t data ; data = * dataPtr TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_functionB2GSink PARAMETER_LIST 2 ( size_t * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t * dataPtr TYPE 4 size_t * TYPE_NAME 5 size_t LEAF_NODE 6 size_t POINTER 5 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = * dataPtr ; VAR_DECL 4 size_t data ; data = * dataPtr TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 169, "project": "cwe399_ast_vul_function_test_adv_129", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_01_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_01_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_01_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_01_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_01_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_01_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_01_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_01_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_01_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_01_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_01_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_01_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_01_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_01_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 170, "project": "cwe399_ast_vul_function_test_adv_176", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionGlobal ; VAR_DECL 2 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionGlobal TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionGlobal LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionGlobal LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionGlobal EXPR 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionGlobal FIELD 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionGlobal LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionGlobal LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 for LEAF_NODE 6 ( LEAF_NODE 6 ; LEAF_NODE 6 * LEAF_NODE 6 data LEAF_NODE 6 != LEAF_NODE 6 L EXPR_STATEMENT 6 '\\0' ; EXPR 7 '\\0' FIELD 8 '\\0' LEAF_NODE 9 '\\0' LEAF_NODE 7 ; LEAF_NODE 6 data LEAF_NODE 6 ++ LEAF_NODE 6 ) LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 * data == SEARCH_CHAR EXPR 9 * data == SEARCH_CHAR UNARY_EXPR 10 * data UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 data LEAF_NODE 12 data EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } SIMPLE_DECL 1 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G1Global ; VAR_DECL 2 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G1Global TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G1Global LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G1Global LEAF_NODE 2 ; SIMPLE_DECL 1 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G2Global ; VAR_DECL 2 int CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G2Global TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G2Global LEAF_NODE 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G2Global LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G1Sink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G1Sink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G1Global EXPR 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G1Global FIELD 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G1Global LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G1Global LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G2Sink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G2Sink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G2Global EXPR 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G2Global FIELD 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G2Global LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_22_functionB2G2Global LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < wcslen ( data ) EXPR 9 i < wcslen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 wcslen ( data ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 171, "project": "cwe399_ast_vul_function_test_adv_56", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53c_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53c_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53b_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53c_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53c_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53c_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53c_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53c_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53c_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53c_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53c_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53c_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53c_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_file_53c_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 172, "project": "cwe399_ast_vul_function_test_adv_50", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64b_functionSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr ; VAR_DECL 4 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr TYPE 5 size_t * TYPE_NAME 6 size_t LEAF_NODE 7 size_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( size_t * ) dataVoidPtr ASSIGN 6 dataPtr = ( size_t * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( size_t * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 size_t LEAF_NODE 9 size_t LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 size_t data ; data = ( * dataPtr ) ; VAR_DECL 4 size_t data ; data = ( * dataPtr ) TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64b_functionSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr ; VAR_DECL 4 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr TYPE 5 size_t * TYPE_NAME 6 size_t LEAF_NODE 7 size_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( size_t * ) dataVoidPtr ASSIGN 6 dataPtr = ( size_t * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( size_t * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 size_t LEAF_NODE 9 size_t LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 size_t data ; data = ( * dataPtr ) ; VAR_DECL 4 size_t data ; data = ( * dataPtr ) TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64b_functionB2GSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr ; VAR_DECL 4 size_t * dataPtr ; dataPtr = ( size_t * ) dataVoidPtr TYPE 5 size_t * TYPE_NAME 6 size_t LEAF_NODE 7 size_t POINTER 6 * LEAF_NODE 7 * NAME 5 dataPtr LEAF_NODE 6 dataPtr LEAF_NODE 5 ; INIT 5 dataPtr = ( size_t * ) dataVoidPtr ASSIGN 6 dataPtr = ( size_t * ) dataVoidPtr LVAL 7 dataPtr NAME 8 dataPtr LEAF_NODE 9 dataPtr ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( size_t * ) dataVoidPtr LEAF_NODE 8 ( TYPE_NAME 8 size_t LEAF_NODE 9 size_t LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 dataVoidPtr LEAF_NODE 9 dataVoidPtr LEAF_NODE 4 ; SIMPLE_DECL 3 size_t data ; data = ( * dataPtr ) ; VAR_DECL 4 size_t data ; data = ( * dataPtr ) TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = ( * dataPtr ) ASSIGN 6 data = ( * dataPtr ) LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( * dataPtr ) LEAF_NODE 8 ( UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 173, "project": "cwe399_ast_vul_function_test_adv_58", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 174, "project": "cwe399_ast_vul_function_test_adv_135", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_01_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_01_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; CONDITION 4 * data != '\\0' EXPR 5 * data != '\\0' UNARY_EXPR 6 * data UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 data LEAF_NODE 8 data EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 4 ; FOR_EXPR 4 data ++ EXPR 5 data ++ FIELD 6 data ++ LEAF_NODE 7 data LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * data == SEARCH_CHAR EXPR 8 * data == SEARCH_CHAR UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 SEARCH_CHAR LEAF_NODE 10 SEARCH_CHAR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 printLine ( \"We have a match!\" ) ; EXPR 10 printLine ( \"We have a match!\" ) FUNCTION_CALL 11 printLine ( \"We have a match!\" ) CALLEE 12 printLine LEAF_NODE 13 printLine LEAF_NODE 12 ( ARGUMENT 12 \"We have a match!\" FIELD 13 \"We have a match!\" LEAF_NODE 14 \"We have a match!\" LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < strlen ( data ) EXPR 6 i < strlen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 strlen ( data ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_01_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_01_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_01_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_01_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_01_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_01_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_01_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_01_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_01_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_01_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_01_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_01_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 175, "project": "cwe399_ast_vul_function_test_adv_190", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData ; VAR_DECL 2 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData TYPE 3 size_t TYPE_NAME 4 size_t LEAF_NODE 5 size_t NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData LEAF_NODE 2 ; SIMPLE_DECL 1 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData ; VAR_DECL 2 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData TYPE 3 size_t TYPE_NAME 4 size_t LEAF_NODE 5 size_t NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData LEAF_NODE 2 ; SIMPLE_DECL 1 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionB2GData ; VAR_DECL 2 size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionB2GData TYPE 3 size_t TYPE_NAME 4 size_t LEAF_NODE 5 size_t NAME 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionB2GData LEAF_NODE 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionB2GData LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionSink LEAF_NODE 3 functionSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData ; VAR_DECL 4 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData ASSIGN 6 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData FIELD 8 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 5 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 6 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ CHAR_ARRAY_SIZE ] LEAF_NODE 8 [ FIELD 8 CHAR_ARRAY_SIZE LEAF_NODE 9 CHAR_ARRAY_SIZE LEAF_NODE 8 ] NAME 6 inputBuffer LEAF_NODE 7 inputBuffer LEAF_NODE 6 ; INIT 6 inputBuffer = \"\" ASSIGN 7 inputBuffer = \"\" LVAL 8 inputBuffer NAME 9 inputBuffer LEAF_NODE 10 inputBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; SIMPLE_DECL 4 int stdin ; VAR_DECL 5 int stdin TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 stdin LEAF_NODE 7 stdin LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 6 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 7 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 8 fgets LEAF_NODE 9 fgets LEAF_NODE 8 ( ARGUMENT 8 inputBuffer FIELD 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 8 , ARGUMENT 8 CHAR_ARRAY_SIZE FIELD 9 CHAR_ARRAY_SIZE LEAF_NODE 10 CHAR_ARRAY_SIZE LEAF_NODE 8 , ARGUMENT 8 stdin FIELD 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ) EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 8 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 9 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 11 strtoul ( inputBuffer , NULL , 0 ) CALLEE 12 strtoul LEAF_NODE 13 strtoul LEAF_NODE 12 ( ARGUMENT 12 inputBuffer FIELD 13 inputBuffer LEAF_NODE 14 inputBuffer LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"fgets() failed.\" ) ; EXPR 8 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 9 printLine ( \"fgets() failed.\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"fgets() failed.\" FIELD 11 \"fgets() failed.\" LEAF_NODE 12 \"fgets() failed.\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData = data ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData = data ASSIGN 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData = data LVAL 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData FIELD 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData LEAF_NODE 8 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 functionSink ( ) ; EXPR 4 functionSink ( ) FUNCTION_CALL 5 functionSink ( ) CALLEE 6 functionSink LEAF_NODE 7 functionSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionSink LEAF_NODE 3 functionSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData ; VAR_DECL 4 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData ASSIGN 6 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData FIELD 8 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 20 ; EXPR 4 data = 20 ASSIGN 5 data = 20 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 20 FIELD 7 20 LEAF_NODE 8 20 LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData = data ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData = data ASSIGN 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData = data LVAL 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData FIELD 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData LEAF_NODE 8 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionData ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 functionSink ( ) ; EXPR 4 functionSink ( ) FUNCTION_CALL 5 functionSink ( ) CALLEE 6 functionSink LEAF_NODE 7 functionSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2GSink LEAF_NODE 3 functionB2GSink PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionB2GData ; VAR_DECL 4 size_t data ; data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionB2GData TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionB2GData ASSIGN 6 data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionB2GData LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionB2GData FIELD 8 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionB2GData LEAF_NODE 9 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionB2GData LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" ; VAR_DECL 5 char [ CHAR_ARRAY_SIZE ] inputBuffer ; inputBuffer = \"\" TYPE 6 char [ CHAR_ARRAY_SIZE ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ CHAR_ARRAY_SIZE ] LEAF_NODE 8 [ FIELD 8 CHAR_ARRAY_SIZE LEAF_NODE 9 CHAR_ARRAY_SIZE LEAF_NODE 8 ] NAME 6 inputBuffer LEAF_NODE 7 inputBuffer LEAF_NODE 6 ; INIT 6 inputBuffer = \"\" ASSIGN 7 inputBuffer = \"\" LVAL 8 inputBuffer NAME 9 inputBuffer LEAF_NODE 10 inputBuffer ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 ; SIMPLE_DECL 4 int stdin ; VAR_DECL 5 int stdin TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 stdin LEAF_NODE 7 stdin LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL EXPR 6 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) != NULL FUNCTION_CALL 7 fgets ( inputBuffer , CHAR_ARRAY_SIZE , stdin ) CALLEE 8 fgets LEAF_NODE 9 fgets LEAF_NODE 8 ( ARGUMENT 8 inputBuffer FIELD 9 inputBuffer LEAF_NODE 10 inputBuffer LEAF_NODE 8 , ARGUMENT 8 CHAR_ARRAY_SIZE FIELD 9 CHAR_ARRAY_SIZE LEAF_NODE 10 CHAR_ARRAY_SIZE LEAF_NODE 8 , ARGUMENT 8 stdin FIELD 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ) EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 data = strtoul ( inputBuffer , NULL , 0 ) ; EXPR 8 data = strtoul ( inputBuffer , NULL , 0 ) ASSIGN 9 data = strtoul ( inputBuffer , NULL , 0 ) LVAL 10 data FIELD 11 data LEAF_NODE 12 data ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 strtoul ( inputBuffer , NULL , 0 ) FUNCTION_CALL 11 strtoul ( inputBuffer , NULL , 0 ) CALLEE 12 strtoul LEAF_NODE 13 strtoul LEAF_NODE 12 ( ARGUMENT 12 inputBuffer FIELD 13 inputBuffer LEAF_NODE 14 inputBuffer LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"fgets() failed.\" ) ; EXPR 8 printLine ( \"fgets() failed.\" ) FUNCTION_CALL 9 printLine ( \"fgets() failed.\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"fgets() failed.\" FIELD 11 \"fgets() failed.\" LEAF_NODE 12 \"fgets() failed.\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionB2GData = data ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionB2GData = data ASSIGN 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionB2GData = data LVAL 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionB2GData FIELD 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionB2GData LEAF_NODE 8 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_functionB2GData ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2GSink ( ) ; EXPR 4 functionB2GSink ( ) FUNCTION_CALL 5 functionB2GSink ( ) CALLEE 6 functionB2GSink LEAF_NODE 7 functionB2GSink LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_45_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 176, "project": "cwe399_ast_vul_function_test_adv_199", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 177, "project": "cwe399_ast_vul_function_test_adv_131", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_51b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_51b_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_51b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_connect_socket_51b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 178, "project": "cwe399_ast_vul_function_test_adv_68", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 179, "project": "cwe399_ast_vul_function_test_adv_38", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; JUMP_STATEMENT 3 goto source ; KEYWORD 4 goto LEAF_NODE 5 goto DESTINATION 4 source LEAF_NODE 5 source LEAF_NODE 4 ; LABEL 3 source : LEAF_NODE 4 source LEAF_NODE 4 : EXPR_STATEMENT 3 data = rand ( ) ; EXPR 4 data = rand ( ) ASSIGN 5 data = rand ( ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 rand ( ) FUNCTION_CALL 7 rand ( ) CALLEE 8 rand LEAF_NODE 9 rand LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 goto sink ; KEYWORD 4 goto LEAF_NODE 5 goto DESTINATION 4 sink LEAF_NODE 5 sink LEAF_NODE 4 ; LABEL 3 sink : LEAF_NODE 4 sink LEAF_NODE 4 : LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; JUMP_STATEMENT 3 goto source ; KEYWORD 4 goto LEAF_NODE 5 goto DESTINATION 4 source LEAF_NODE 5 source LEAF_NODE 4 ; LABEL 3 source : LEAF_NODE 4 source LEAF_NODE 4 : EXPR_STATEMENT 3 data = rand ( ) ; EXPR 4 data = rand ( ) ASSIGN 5 data = rand ( ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 rand ( ) FUNCTION_CALL 7 rand ( ) CALLEE 8 rand LEAF_NODE 9 rand LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 goto sink ; KEYWORD 4 goto LEAF_NODE 5 goto DESTINATION 4 sink LEAF_NODE 5 sink LEAF_NODE 4 ; LABEL 3 sink : LEAF_NODE 4 sink LEAF_NODE 4 : LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; JUMP_STATEMENT 3 goto source ; KEYWORD 4 goto LEAF_NODE 5 goto DESTINATION 4 source LEAF_NODE 5 source LEAF_NODE 4 ; LABEL 3 source : LEAF_NODE 4 source LEAF_NODE 4 : EXPR_STATEMENT 3 data = 20 ; EXPR 4 data = 20 ASSIGN 5 data = 20 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 20 FIELD 7 20 LEAF_NODE 8 20 LEAF_NODE 4 ; JUMP_STATEMENT 3 goto sink ; KEYWORD 4 goto LEAF_NODE 5 goto DESTINATION 4 sink LEAF_NODE 5 sink LEAF_NODE 4 ; LABEL 3 sink : LEAF_NODE 4 sink LEAF_NODE 4 : LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 180, "project": "cwe399_ast_vul_function_test_adv_160", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64b_functionSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64b_functionSink ( & data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64b_functionSink ( & data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64b_functionSink ( & data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64b_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64b_functionSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64b_functionB2GSink PARAMETER_LIST 2 ( void * dataVoidPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * dataVoidPtr TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 dataVoidPtr LEAF_NODE 5 dataVoidPtr LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64b_functionB2GSink ( & data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64b_functionB2GSink ( & data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64b_functionB2GSink ( & data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64b_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_64_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 181, "project": "cwe399_ast_vul_function_test_adv_30", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54e_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54e_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54d_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54d_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54e_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54e_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54e_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54e_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54e_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54e_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54e_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54d_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54d_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54e_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54e_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54e_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54e_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54e_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 182, "project": "cwe399_ast_vul_function_test_adv_130", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54e_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54e_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54e_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54e_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54e_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54e_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 183, "project": "cwe399_ast_vul_function_test_adv_64", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; CONDITION 4 * data != '\\0' EXPR 5 * data != '\\0' UNARY_EXPR 6 * data UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 data LEAF_NODE 8 data EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 4 ; FOR_EXPR 4 data ++ EXPR 5 data ++ FIELD 6 data ++ LEAF_NODE 7 data LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * data == SEARCH_CHAR EXPR 8 * data == SEARCH_CHAR UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 SEARCH_CHAR LEAF_NODE 10 SEARCH_CHAR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 printLine ( \"We have a match!\" ) ; EXPR 10 printLine ( \"We have a match!\" ) FUNCTION_CALL 11 printLine ( \"We have a match!\" ) CALLEE 12 printLine LEAF_NODE 13 printLine LEAF_NODE 12 ( ARGUMENT 12 \"We have a match!\" FIELD 13 \"We have a match!\" LEAF_NODE 14 \"We have a match!\" LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_functionB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < strlen ( data ) EXPR 6 i < strlen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 strlen ( data ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 184, "project": "cwe399_ast_vul_function_test_adv_136", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65b_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 char LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65b_functionSink ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65b_functionSink FIELD 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65b_functionSink LEAF_NODE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65b_functionSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65b_functionB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; LEAF_NODE 3 void LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 funcPtr LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 char LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65b_functionB2GSink ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65b_functionB2GSink FIELD 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65b_functionB2GSink LEAF_NODE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65b_functionB2GSink LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 char * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 char * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 strncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 strncat LEAF_NODE 11 strncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 funcPtr ( data ) ; EXPR 4 funcPtr ( data ) FUNCTION_CALL 5 funcPtr ( data ) CALLEE 6 funcPtr LEAF_NODE 7 funcPtr LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 185, "project": "cwe399_ast_vul_function_test_adv_104", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54c_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54c_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_54d_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 186, "project": "cwe399_ast_vul_function_test_adv_102", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_31_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_31_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * dataCopy ; dataCopy = data ; VAR_DECL 5 wchar_t * dataCopy ; dataCopy = data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 dataCopy LEAF_NODE 7 dataCopy LEAF_NODE 6 ; INIT 6 dataCopy = data ASSIGN 7 dataCopy = data LVAL 8 dataCopy NAME 9 dataCopy LEAF_NODE 10 dataCopy ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * data ; data = dataCopy ; VAR_DECL 5 wchar_t * data ; data = dataCopy TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataCopy ASSIGN 7 data = dataCopy LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataCopy FIELD 9 dataCopy LEAF_NODE 10 dataCopy LEAF_NODE 5 ; LEAF_NODE 4 for LEAF_NODE 4 ( LEAF_NODE 4 ; LEAF_NODE 4 * LEAF_NODE 4 data LEAF_NODE 4 != LEAF_NODE 4 L EXPR_STATEMENT 4 '\\0' ; EXPR 5 '\\0' FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 5 ; LEAF_NODE 4 data LEAF_NODE 4 ++ LEAF_NODE 4 ) LEAF_NODE 4 { STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 * data == SEARCH_CHAR EXPR 7 * data == SEARCH_CHAR UNARY_EXPR 8 * data UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 data LEAF_NODE 10 data EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 SEARCH_CHAR LEAF_NODE 9 SEARCH_CHAR LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 printLine ( \"We have a match!\" ) ; EXPR 9 printLine ( \"We have a match!\" ) FUNCTION_CALL 10 printLine ( \"We have a match!\" ) CALLEE 11 printLine LEAF_NODE 12 printLine LEAF_NODE 11 ( ARGUMENT 11 \"We have a match!\" FIELD 12 \"We have a match!\" LEAF_NODE 13 \"We have a match!\" LEAF_NODE 11 ) LEAF_NODE 9 ; JUMP_STATEMENT 8 break DESTINATION ; KEYWORD 9 break LEAF_NODE 10 break LEAF_NODE 9 DESTINATION LEAF_NODE 9 ; LEAF_NODE 7 } LEAF_NODE 4 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) ; VAR_DECL 5 wchar_t * environment ; environment = GETENV ( ENV_VARIABLE ) TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 environment LEAF_NODE 7 environment LEAF_NODE 6 ; INIT 6 environment = GETENV ( ENV_VARIABLE ) ASSIGN 7 environment = GETENV ( ENV_VARIABLE ) LVAL 8 environment NAME 9 environment LEAF_NODE 10 environment ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 GETENV ( ENV_VARIABLE ) FUNCTION_CALL 9 GETENV ( ENV_VARIABLE ) CALLEE 10 GETENV LEAF_NODE 11 GETENV LEAF_NODE 10 ( ARGUMENT 10 ENV_VARIABLE FIELD 11 ENV_VARIABLE LEAF_NODE 12 ENV_VARIABLE LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 environment != NULL EXPR 6 environment != NULL FIELD 7 environment LEAF_NODE 8 environment EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; EXPR 8 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) FUNCTION_CALL 9 wcsncat ( data + dataLen , environment , 100 - dataLen - 1 ) CALLEE 10 wcsncat LEAF_NODE 11 wcsncat LEAF_NODE 10 ( ARGUMENT 10 data + dataLen FIELD 11 data LEAF_NODE 12 data LEAF_NODE 11 + FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 10 , ARGUMENT 10 environment FIELD 11 environment LEAF_NODE 12 environment LEAF_NODE 10 , ARGUMENT 10 100 - dataLen - 1 FIELD 11 100 LEAF_NODE 12 100 LEAF_NODE 11 - FIELD 11 dataLen LEAF_NODE 12 dataLen LEAF_NODE 11 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * dataCopy ; dataCopy = data ; VAR_DECL 5 wchar_t * dataCopy ; dataCopy = data TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 dataCopy LEAF_NODE 7 dataCopy LEAF_NODE 6 ; INIT 6 dataCopy = data ASSIGN 7 dataCopy = data LVAL 8 dataCopy NAME 9 dataCopy LEAF_NODE 10 dataCopy ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 5 ; SIMPLE_DECL 4 wchar_t * data ; data = dataCopy ; VAR_DECL 5 wchar_t * data ; data = dataCopy TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 6 ; INIT 6 data = dataCopy ASSIGN 7 data = dataCopy LVAL 8 data NAME 9 data LEAF_NODE 10 data ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 dataCopy FIELD 9 dataCopy LEAF_NODE 10 dataCopy LEAF_NODE 5 ; LEAF_NODE 4 { STATEMENTS 4 SIMPLE_DECL 5 size_t i ; VAR_DECL 6 size_t i TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 i LEAF_NODE 8 i LEAF_NODE 6 ; ITERATION 5 KEYWORD 6 for LEAF_NODE 7 for LEAF_NODE 6 ( FOR_INIT 6 i = 0 ; EXPR 7 i = 0 ASSIGN 8 i = 0 LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; CONDITION 6 i < wcslen ( data ) EXPR 7 i < wcslen ( data ) FIELD 8 i LEAF_NODE 9 i REL_OPERATOR 8 < LEAF_NODE 9 < FUNCTION_CALL 8 wcslen ( data ) CALLEE 9 wcslen LEAF_NODE 10 wcslen LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 6 ; FOR_EXPR 6 i ++ EXPR 7 i ++ FIELD 8 i ++ LEAF_NODE 9 i LEAF_NODE 9 ++ LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 data [ i ] == SEARCH_CHAR EXPR 10 data [ i ] == SEARCH_CHAR FIELD 11 data [ i ] LEAF_NODE 12 data LEAF_NODE 12 [ EXPR 12 i FIELD 13 i LEAF_NODE 14 i LEAF_NODE 12 ] EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 SEARCH_CHAR LEAF_NODE 12 SEARCH_CHAR LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 printLine ( \"We have a match!\" ) ; EXPR 12 printLine ( \"We have a match!\" ) FUNCTION_CALL 13 printLine ( \"We have a match!\" ) CALLEE 14 printLine LEAF_NODE 15 printLine LEAF_NODE 14 ( ARGUMENT 14 \"We have a match!\" FIELD 15 \"We have a match!\" LEAF_NODE 16 \"We have a match!\" LEAF_NODE 14 ) LEAF_NODE 12 ; JUMP_STATEMENT 11 break DESTINATION ; KEYWORD 12 break LEAF_NODE 13 break LEAF_NODE 12 DESTINATION LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 7 } EXPR_STATEMENT 5 free ( data ) ; EXPR 6 free ( data ) FUNCTION_CALL 7 free ( data ) CALLEE 8 free LEAF_NODE 9 free LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_31_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_31_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_31_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_31_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_31_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_31_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_31_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_31_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_31_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_31_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_31_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_31_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 187, "project": "cwe399_ast_vul_function_test_adv_197", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionSink PARAMETER_LIST 2 ( size_t [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t [ ] dataArray TYPE 4 size_t [ ] TYPE_NAME 5 size_t LEAF_NODE 6 size_t TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 size_t [ 5 ] dataArray ; VAR_DECL 4 size_t [ 5 ] dataArray TYPE 5 size_t [ 5 ] TYPE_NAME 6 size_t LEAF_NODE 7 size_t TYPE_SUFFIX 6 [ 5 ] LEAF_NODE 7 [ FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int stdin ; VAR_DECL 4 int stdin TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 stdin LEAF_NODE 6 stdin LEAF_NODE 4 ; EXPR_STATEMENT 3 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 4 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 5 fscanf ( stdin , \"%ud\" , & data ) CALLEE 6 fscanf LEAF_NODE 7 fscanf LEAF_NODE 6 ( ARGUMENT 6 stdin FIELD 7 stdin LEAF_NODE 8 stdin LEAF_NODE 6 , ARGUMENT 6 \"%ud\" FIELD 7 \"%ud\" LEAF_NODE 8 \"%ud\" LEAF_NODE 6 , ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataArray [ 2 ] = data ; EXPR 4 dataArray [ 2 ] = data ASSIGN 5 dataArray [ 2 ] = data LVAL 6 dataArray [ 2 ] FIELD 7 dataArray [ 2 ] LEAF_NODE 8 dataArray LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionSink ( dataArray ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionSink ( dataArray ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionSink ( dataArray ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionSink LEAF_NODE 6 ( ARGUMENT 6 dataArray FIELD 7 dataArray LEAF_NODE 8 dataArray LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionSink PARAMETER_LIST 2 ( size_t [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t [ ] dataArray TYPE 4 size_t [ ] TYPE_NAME 5 size_t LEAF_NODE 6 size_t TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function LEAF_NODE 3 function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 size_t [ 5 ] dataArray ; VAR_DECL 4 size_t [ 5 ] dataArray TYPE 5 size_t [ 5 ] TYPE_NAME 6 size_t LEAF_NODE 7 size_t TYPE_SUFFIX 6 [ 5 ] LEAF_NODE 7 [ FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 20 ; EXPR 4 data = 20 ASSIGN 5 data = 20 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 20 FIELD 7 20 LEAF_NODE 8 20 LEAF_NODE 4 ; EXPR_STATEMENT 3 dataArray [ 2 ] = data ; EXPR 4 dataArray [ 2 ] = data ASSIGN 5 dataArray [ 2 ] = data LVAL 6 dataArray [ 2 ] FIELD 7 dataArray [ 2 ] LEAF_NODE 8 dataArray LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionSink ( dataArray ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionSink ( dataArray ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionSink ( dataArray ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionSink LEAF_NODE 6 ( ARGUMENT 6 dataArray FIELD 7 dataArray LEAF_NODE 8 dataArray LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionB2GSink PARAMETER_LIST 2 ( size_t [ ] dataArray ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t [ ] dataArray TYPE 4 size_t [ ] TYPE_NAME 5 size_t LEAF_NODE 6 size_t TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 dataArray LEAF_NODE 5 dataArray LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; SIMPLE_DECL 3 size_t [ 5 ] dataArray ; VAR_DECL 4 size_t [ 5 ] dataArray TYPE 5 size_t [ 5 ] TYPE_NAME 6 size_t LEAF_NODE 7 size_t TYPE_SUFFIX 6 [ 5 ] LEAF_NODE 7 [ FIELD 7 5 LEAF_NODE 8 5 LEAF_NODE 7 ] NAME 5 dataArray LEAF_NODE 6 dataArray LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int stdin ; VAR_DECL 4 int stdin TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 stdin LEAF_NODE 6 stdin LEAF_NODE 4 ; EXPR_STATEMENT 3 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 4 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 5 fscanf ( stdin , \"%ud\" , & data ) CALLEE 6 fscanf LEAF_NODE 7 fscanf LEAF_NODE 6 ( ARGUMENT 6 stdin FIELD 7 stdin LEAF_NODE 8 stdin LEAF_NODE 6 , ARGUMENT 6 \"%ud\" FIELD 7 \"%ud\" LEAF_NODE 8 \"%ud\" LEAF_NODE 6 , ARGUMENT 6 & data UNARY_EXPR 7 & data UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 data LEAF_NODE 9 data LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dataArray [ 2 ] = data ; EXPR 4 dataArray [ 2 ] = data ASSIGN 5 dataArray [ 2 ] = data LVAL 6 dataArray [ 2 ] FIELD 7 dataArray [ 2 ] LEAF_NODE 8 dataArray LEAF_NODE 8 [ EXPR 8 2 FIELD 9 2 LEAF_NODE 10 2 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionB2GSink ( dataArray ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionB2GSink ( dataArray ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionB2GSink ( dataArray ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 dataArray FIELD 7 dataArray LEAF_NODE 8 dataArray LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 function ( ) ; EXPR 4 function ( ) FUNCTION_CALL 5 function ( ) CALLEE 6 function LEAF_NODE 7 function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 188, "project": "cwe399_ast_vul_function_test_adv_100", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63b_functionSink PARAMETER_LIST 2 ( size_t * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t * dataPtr TYPE 4 size_t * TYPE_NAME 5 size_t LEAF_NODE 6 size_t POINTER 5 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = * dataPtr ; VAR_DECL 4 size_t data ; data = * dataPtr TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63b_functionSink PARAMETER_LIST 2 ( size_t * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t * dataPtr TYPE 4 size_t * TYPE_NAME 5 size_t LEAF_NODE 6 size_t POINTER 5 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = * dataPtr ; VAR_DECL 4 size_t data ; data = * dataPtr TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) EXPR 6 data > strlen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 strlen ( HELLO_STRING ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63b_functionB2GSink PARAMETER_LIST 2 ( size_t * dataPtr ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t * dataPtr TYPE 4 size_t * TYPE_NAME 5 size_t LEAF_NODE 6 size_t POINTER 5 * LEAF_NODE 6 * NAME 4 dataPtr LEAF_NODE 5 dataPtr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; data = * dataPtr ; VAR_DECL 4 size_t data ; data = * dataPtr TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 5 ; INIT 5 data = * dataPtr ASSIGN 6 data = * dataPtr LVAL 7 data NAME 8 data LEAF_NODE 9 data ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 * dataPtr UNARY_EXPR 8 * dataPtr UNARY_OPERATOR 9 * LEAF_NODE 10 * FIELD 9 dataPtr LEAF_NODE 10 dataPtr LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char * myString ; VAR_DECL 5 char * myString TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > strlen ( HELLO_STRING ) && data < 100 EXPR 6 data > strlen ( HELLO_STRING ) && data < 100 AND 7 data > strlen ( HELLO_STRING ) && data < 100 EXPR 8 data > strlen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 strlen ( HELLO_STRING ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( char * ) malloc ( data * sizeof ( char ) ) ; EXPR 8 myString = ( char * ) malloc ( data * sizeof ( char ) ) ASSIGN 9 myString = ( char * ) malloc ( data * sizeof ( char ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( char * ) malloc ( data * sizeof ( char ) ) LEAF_NODE 11 ( TYPE_NAME 11 char LEAF_NODE 12 char LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( char ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( char ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( char ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 char FIELD 15 char LEAF_NODE 16 char LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 strcpy ( myString , HELLO_STRING ) ; EXPR 8 strcpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 strcpy ( myString , HELLO_STRING ) CALLEE 10 strcpy LEAF_NODE 11 strcpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printLine ( myString ) ; EXPR 8 printLine ( myString ) FUNCTION_CALL 9 printLine ( myString ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 189, "project": "cwe399_ast_vul_function_test_adv_109", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 staticReturnsTrue LEAF_NODE 3 staticReturnsTrue PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 staticReturnsFalse LEAF_NODE 3 staticReturnsFalse PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int stdin ; VAR_DECL 7 int stdin TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 stdin LEAF_NODE 9 stdin LEAF_NODE 7 ; EXPR_STATEMENT 6 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 7 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 8 fscanf ( stdin , \"%ud\" , & data ) CALLEE 9 fscanf LEAF_NODE 10 fscanf LEAF_NODE 9 ( ARGUMENT 9 stdin FIELD 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 , ARGUMENT 9 \"%ud\" FIELD 10 \"%ud\" LEAF_NODE 11 \"%ud\" LEAF_NODE 9 , ARGUMENT 9 & data UNARY_EXPR 10 & data UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 data LEAF_NODE 12 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) EXPR 9 data > wcslen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 wcslen ( HELLO_STRING ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int stdin ; VAR_DECL 7 int stdin TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 stdin LEAF_NODE 9 stdin LEAF_NODE 7 ; EXPR_STATEMENT 6 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 7 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 8 fscanf ( stdin , \"%ud\" , & data ) CALLEE 9 fscanf LEAF_NODE 10 fscanf LEAF_NODE 9 ( ARGUMENT 9 stdin FIELD 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 , ARGUMENT 9 \"%ud\" FIELD 10 \"%ud\" LEAF_NODE 11 \"%ud\" LEAF_NODE 9 , ARGUMENT 9 & data UNARY_EXPR 10 & data UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 data LEAF_NODE 12 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsFalse ( ) EXPR 5 staticReturnsFalse ( ) FUNCTION_CALL 6 staticReturnsFalse ( ) CALLEE 7 staticReturnsFalse LEAF_NODE 8 staticReturnsFalse LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 9 data > wcslen ( HELLO_STRING ) && data < 100 AND 10 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 11 data > wcslen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 wcslen ( HELLO_STRING ) CALLEE 13 wcslen LEAF_NODE 14 wcslen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 int stdin ; VAR_DECL 7 int stdin TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 stdin LEAF_NODE 9 stdin LEAF_NODE 7 ; EXPR_STATEMENT 6 fscanf ( stdin , \"%ud\" , & data ) ; EXPR 7 fscanf ( stdin , \"%ud\" , & data ) FUNCTION_CALL 8 fscanf ( stdin , \"%ud\" , & data ) CALLEE 9 fscanf LEAF_NODE 10 fscanf LEAF_NODE 9 ( ARGUMENT 9 stdin FIELD 10 stdin LEAF_NODE 11 stdin LEAF_NODE 9 , ARGUMENT 9 \"%ud\" FIELD 10 \"%ud\" LEAF_NODE 11 \"%ud\" LEAF_NODE 9 , ARGUMENT 9 & data UNARY_EXPR 10 & data UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 data LEAF_NODE 12 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 9 data > wcslen ( HELLO_STRING ) && data < 100 AND 10 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 11 data > wcslen ( HELLO_STRING ) FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 > LEAF_NODE 13 > FUNCTION_CALL 12 wcslen ( HELLO_STRING ) CALLEE 13 wcslen LEAF_NODE 14 wcslen LEAF_NODE 13 ( ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 && EXPR 11 data < 100 FIELD 12 data LEAF_NODE 13 data REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string or too large\" FIELD 14 \"Input is less than the length of the source string or too large\" LEAF_NODE 15 \"Input is less than the length of the source string or too large\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function1 LEAF_NODE 3 function1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsFalse ( ) EXPR 5 staticReturnsFalse ( ) FUNCTION_CALL 6 staticReturnsFalse ( ) CALLEE 7 staticReturnsFalse LEAF_NODE 8 staticReturnsFalse LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) EXPR 9 data > wcslen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 wcslen ( HELLO_STRING ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 function2 LEAF_NODE 3 function2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 size_t data ; VAR_DECL 4 size_t data TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = 0 ; EXPR 4 data = 0 ASSIGN 5 data = 0 LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 data = 20 ; EXPR 7 data = 20 ASSIGN 8 data = 20 LVAL 9 data FIELD 10 data LEAF_NODE 11 data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 20 FIELD 10 20 LEAF_NODE 11 20 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 staticReturnsTrue ( ) EXPR 5 staticReturnsTrue ( ) FUNCTION_CALL 6 staticReturnsTrue ( ) CALLEE 7 staticReturnsTrue LEAF_NODE 8 staticReturnsTrue LEAF_NODE 7 ( LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 wchar_t * myString ; VAR_DECL 8 wchar_t * myString TYPE 9 wchar_t * TYPE_NAME 10 wchar_t LEAF_NODE 11 wchar_t POINTER 10 * LEAF_NODE 11 * NAME 9 myString LEAF_NODE 10 myString LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data > wcslen ( HELLO_STRING ) EXPR 9 data > wcslen ( HELLO_STRING ) FIELD 10 data LEAF_NODE 11 data REL_OPERATOR 10 > LEAF_NODE 11 > FUNCTION_CALL 10 wcslen ( HELLO_STRING ) CALLEE 11 wcslen LEAF_NODE 12 wcslen LEAF_NODE 11 ( ARGUMENT 11 HELLO_STRING FIELD 12 HELLO_STRING LEAF_NODE 13 HELLO_STRING LEAF_NODE 11 ) LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 11 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 12 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 13 myString FIELD 14 myString LEAF_NODE 15 myString ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 14 ( TYPE_NAME 14 wchar_t LEAF_NODE 15 wchar_t LEAF_NODE 14 * LEAF_NODE 14 ) FUNCTION_CALL 14 malloc ( data * sizeof ( wchar_t ) ) CALLEE 15 malloc LEAF_NODE 16 malloc LEAF_NODE 15 ( ARGUMENT 15 data * sizeof ( wchar_t ) FIELD 16 data LEAF_NODE 17 data LEAF_NODE 16 * FUNCTION_CALL 16 sizeof ( wchar_t ) CALLEE 17 sizeof LEAF_NODE 18 sizeof LEAF_NODE 17 ( ARGUMENT 17 wchar_t FIELD 18 wchar_t LEAF_NODE 19 wchar_t LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 wcscpy ( myString , HELLO_STRING ) ; EXPR 11 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 12 wcscpy ( myString , HELLO_STRING ) CALLEE 13 wcscpy LEAF_NODE 14 wcscpy LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 , ARGUMENT 13 HELLO_STRING FIELD 14 HELLO_STRING LEAF_NODE 15 HELLO_STRING LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 printWLine ( myString ) ; EXPR 11 printWLine ( myString ) FUNCTION_CALL 12 printWLine ( myString ) CALLEE 13 printWLine LEAF_NODE 14 printWLine LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 free ( myString ) ; EXPR 11 free ( myString ) FUNCTION_CALL 12 free ( myString ) CALLEE 13 free LEAF_NODE 14 free LEAF_NODE 13 ( ARGUMENT 13 myString FIELD 14 myString LEAF_NODE 15 myString LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 11 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 12 printLine ( \"Input is less than the length of the source string\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"Input is less than the length of the source string\" FIELD 14 \"Input is less than the length of the source string\" LEAF_NODE 15 \"Input is less than the length of the source string\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_function LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function1 ( ) ; EXPR 4 function1 ( ) FUNCTION_CALL 5 function1 ( ) CALLEE 6 function1 LEAF_NODE 7 function1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 function2 ( ) ; EXPR 4 function2 ( ) FUNCTION_CALL 5 function2 ( ) CALLEE 6 function2 LEAF_NODE 7 function2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_function ( ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_function ( ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_function ( ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_function LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 190, "project": "cwe399_ast_vul_function_test_adv_161", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE ; VAR_DECL 2 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE TYPE 3 struct FILE BASE_CLASSES { CLASS_CONTENT } CLASS_DEF 4 struct FILE BASE_CLASSES { CLASS_CONTENT } LEAF_NODE 5 struct CLASS_NAME 5 FILE LEAF_NODE 6 FILE LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { LEAF_NODE 5 CLASS_CONTENT LEAF_NODE 5 } NAME 3 FILE LEAF_NODE 4 FILE LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_01_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_01_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; CONDITION 4 * data != '\\0' EXPR 5 * data != '\\0' UNARY_EXPR 6 * data UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 data LEAF_NODE 8 data EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 4 ; FOR_EXPR 4 data ++ EXPR 5 data ++ FIELD 6 data ++ LEAF_NODE 7 data LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * data == SEARCH_CHAR EXPR 8 * data == SEARCH_CHAR UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 SEARCH_CHAR LEAF_NODE 10 SEARCH_CHAR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 printLine ( \"We have a match!\" ) ; EXPR 10 printLine ( \"We have a match!\" ) FUNCTION_CALL 11 printLine ( \"We have a match!\" ) CALLEE 12 printLine LEAF_NODE 13 printLine LEAF_NODE 12 ( ARGUMENT 12 \"We have a match!\" FIELD 13 \"We have a match!\" LEAF_NODE 14 \"We have a match!\" LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < strlen ( data ) EXPR 6 i < strlen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 strlen ( data ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_01_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_01_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_01_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_01_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_01_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_01_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_01_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_01_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_01_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_01_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_01_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_01_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 191, "project": "cwe399_ast_vul_function_test_adv_193", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53d_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53d_functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; CONDITION 4 * data != '\\0' EXPR 5 * data != '\\0' UNARY_EXPR 6 * data UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 data LEAF_NODE 8 data EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 '\\0' LEAF_NODE 7 '\\0' LEAF_NODE 4 ; FOR_EXPR 4 data ++ EXPR 5 data ++ FIELD 6 data ++ LEAF_NODE 7 data LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * data == SEARCH_CHAR EXPR 8 * data == SEARCH_CHAR UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 SEARCH_CHAR LEAF_NODE 10 SEARCH_CHAR LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 printLine ( \"We have a match!\" ) ; EXPR 10 printLine ( \"We have a match!\" ) FUNCTION_CALL 11 printLine ( \"We have a match!\" ) CALLEE 12 printLine LEAF_NODE 13 printLine LEAF_NODE 12 ( ARGUMENT 12 \"We have a match!\" FIELD 13 \"We have a match!\" LEAF_NODE 14 \"We have a match!\" LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53d_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53d_functionB2GSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < strlen ( data ) EXPR 6 i < strlen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 strlen ( data ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 192, "project": "cwe399_ast_vul_function_test_adv_0", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54e_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54e_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54e_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_54e_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 193, "project": "cwe399_ast_vul_function_test_adv_44", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54c_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54c_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54b_functionSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54b_functionSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54c_functionSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54c_functionSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54c_functionSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54c_functionSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54c_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54c_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54c_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54b_functionB2GSink LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54b_functionB2GSink PARAMETER_LIST 2 ( wchar_t * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 wchar_t * data TYPE 4 wchar_t * TYPE_NAME 5 wchar_t LEAF_NODE 6 wchar_t POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54c_functionB2GSink ( data ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54c_functionB2GSink ( data ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54c_functionB2GSink ( data ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54c_functionB2GSink LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_environment_54c_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 194, "project": "cwe399_ast_vul_function_test_adv_21", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_61b_functionSource LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_61b_functionSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } JUMP_STATEMENT 3 return data ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 data EXPR 5 data FIELD 6 data LEAF_NODE 7 data LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 char * TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_61b_functionB2GSource LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_61b_functionB2GSource PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgets LEAF_NODE 12 fgets LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = strlen ( data ) ; EXPR 11 dataLen = strlen ( data ) ASSIGN 12 dataLen = strlen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 strlen ( data ) FUNCTION_CALL 14 strlen ( data ) CALLEE 15 strlen LEAF_NODE 16 strlen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 12 dataLen > 0 && data [ dataLen - 1 ] == '\\n' AND 13 dataLen > 0 && data [ dataLen - 1 ] == '\\n' EXPR 14 dataLen > 0 FIELD 15 dataLen LEAF_NODE 16 dataLen REL_OPERATOR 15 > LEAF_NODE 16 > FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 && EXPR 14 data [ dataLen - 1 ] == '\\n' FIELD 15 data [ dataLen - 1 ] LEAF_NODE 16 data LEAF_NODE 16 [ EXPR 16 dataLen - 1 FIELD 17 dataLen LEAF_NODE 18 dataLen LEAF_NODE 17 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\n' LEAF_NODE 16 '\\n' LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 data [ dataLen - 1 ] = '\\0' ; EXPR 14 data [ dataLen - 1 ] = '\\0' ASSIGN 15 data [ dataLen - 1 ] = '\\0' LVAL 16 data [ dataLen - 1 ] FIELD 17 data [ dataLen - 1 ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen - 1 FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 19 - FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgets() failed\" ) ; EXPR 11 printLine ( \"fgets() failed\" ) FUNCTION_CALL 12 printLine ( \"fgets() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgets() failed\" FIELD 14 \"fgets() failed\" LEAF_NODE 15 \"fgets() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; EXPR_STATEMENT 10 data [ dataLen ] = '\\0' ; EXPR 11 data [ dataLen ] = '\\0' ASSIGN 12 data [ dataLen ] = '\\0' LVAL 13 data [ dataLen ] FIELD 14 data [ dataLen ] LEAF_NODE 15 data LEAF_NODE 15 [ EXPR 15 dataLen FIELD 16 dataLen LEAF_NODE 17 dataLen LEAF_NODE 15 ] ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 '\\0' FIELD 14 '\\0' LEAF_NODE 15 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } JUMP_STATEMENT 3 return data ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 data EXPR 5 data FIELD 6 data LEAF_NODE 7 data LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 195, "project": "cwe399_ast_vul_function_test_adv_87", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printWLine LEAF_NODE 3 printWLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_65b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_65b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_65b_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_65b_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) EXPR 6 data > wcslen ( HELLO_STRING ) FIELD 7 data LEAF_NODE 8 data REL_OPERATOR 7 > LEAF_NODE 8 > FUNCTION_CALL 7 wcslen ( HELLO_STRING ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 HELLO_STRING FIELD 9 HELLO_STRING LEAF_NODE 10 HELLO_STRING LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string\" FIELD 11 \"Input is less than the length of the source string\" LEAF_NODE 12 \"Input is less than the length of the source string\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_65b_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_65b_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 wchar_t * myString ; VAR_DECL 5 wchar_t * myString TYPE 6 wchar_t * TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t POINTER 7 * LEAF_NODE 8 * NAME 6 myString LEAF_NODE 7 myString LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 6 data > wcslen ( HELLO_STRING ) && data < 100 AND 7 data > wcslen ( HELLO_STRING ) && data < 100 EXPR 8 data > wcslen ( HELLO_STRING ) FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 > LEAF_NODE 10 > FUNCTION_CALL 9 wcslen ( HELLO_STRING ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 && EXPR 8 data < 100 FIELD 9 data LEAF_NODE 10 data REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ; EXPR 8 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) ASSIGN 9 myString = ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LVAL 10 myString FIELD 11 myString LEAF_NODE 12 myString ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ( wchar_t * ) malloc ( data * sizeof ( wchar_t ) ) LEAF_NODE 11 ( TYPE_NAME 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 11 * LEAF_NODE 11 ) FUNCTION_CALL 11 malloc ( data * sizeof ( wchar_t ) ) CALLEE 12 malloc LEAF_NODE 13 malloc LEAF_NODE 12 ( ARGUMENT 12 data * sizeof ( wchar_t ) FIELD 13 data LEAF_NODE 14 data LEAF_NODE 13 * FUNCTION_CALL 13 sizeof ( wchar_t ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 wchar_t FIELD 15 wchar_t LEAF_NODE 16 wchar_t LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 wcscpy ( myString , HELLO_STRING ) ; EXPR 8 wcscpy ( myString , HELLO_STRING ) FUNCTION_CALL 9 wcscpy ( myString , HELLO_STRING ) CALLEE 10 wcscpy LEAF_NODE 11 wcscpy LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 , ARGUMENT 10 HELLO_STRING FIELD 11 HELLO_STRING LEAF_NODE 12 HELLO_STRING LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 printWLine ( myString ) ; EXPR 8 printWLine ( myString ) FUNCTION_CALL 9 printWLine ( myString ) CALLEE 10 printWLine LEAF_NODE 11 printWLine LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 free ( myString ) ; EXPR 8 free ( myString ) FUNCTION_CALL 9 free ( myString ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 myString FIELD 11 myString LEAF_NODE 12 myString LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"Input is less than the length of the source string or too large\" ) ; EXPR 8 printLine ( \"Input is less than the length of the source string or too large\" ) FUNCTION_CALL 9 printLine ( \"Input is less than the length of the source string or too large\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"Input is less than the length of the source string or too large\" FIELD 11 \"Input is less than the length of the source string or too large\" LEAF_NODE 12 \"Input is less than the length of the source string or too large\" LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 196, "project": "cwe399_ast_vul_function_test_adv_103", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } SIMPLE_DECL 1 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE ; VAR_DECL 2 struct FILE BASE_CLASSES { CLASS_CONTENT } FILE TYPE 3 struct FILE BASE_CLASSES { CLASS_CONTENT } CLASS_DEF 4 struct FILE BASE_CLASSES { CLASS_CONTENT } LEAF_NODE 5 struct CLASS_NAME 5 FILE LEAF_NODE 6 FILE LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { LEAF_NODE 5 CLASS_CONTENT LEAF_NODE 5 } NAME 3 FILE LEAF_NODE 4 FILE LEAF_NODE 2 ; SIMPLE_DECL 1 int functionStatic ; functionStatic = 0 ; VAR_DECL 2 int functionStatic ; functionStatic = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 functionStatic LEAF_NODE 4 functionStatic LEAF_NODE 3 ; INIT 3 functionStatic = 0 ASSIGN 4 functionStatic = 0 LVAL 5 functionStatic NAME 6 functionStatic LEAF_NODE 7 functionStatic ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionSink LEAF_NODE 3 functionSink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 functionStatic EXPR 5 functionStatic FIELD 6 functionStatic LEAF_NODE 7 functionStatic LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 ; LEAF_NODE 8 ; CONDITION 7 * data != '\\0' EXPR 8 * data != '\\0' UNARY_EXPR 9 * data UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 data LEAF_NODE 11 data EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 7 ; FOR_EXPR 7 data ++ EXPR 8 data ++ FIELD 9 data ++ LEAF_NODE 10 data LEAF_NODE 10 ++ LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 * data == SEARCH_CHAR EXPR 11 * data == SEARCH_CHAR UNARY_EXPR 12 * data UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 data LEAF_NODE 14 data EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 SEARCH_CHAR LEAF_NODE 13 SEARCH_CHAR LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 printLine ( \"We have a match!\" ) ; EXPR 13 printLine ( \"We have a match!\" ) FUNCTION_CALL 14 printLine ( \"We have a match!\" ) CALLEE 15 printLine LEAF_NODE 16 printLine LEAF_NODE 15 ( ARGUMENT 15 \"We have a match!\" FIELD 16 \"We have a match!\" LEAF_NODE 17 \"We have a match!\" LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } EXPR_STATEMENT 6 free ( data ) ; EXPR 7 free ( data ) FUNCTION_CALL 8 free ( data ) CALLEE 9 free LEAF_NODE 10 free LEAF_NODE 9 ( ARGUMENT 9 data FIELD 10 data LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_21_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_21_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 functionStatic = 1 ; EXPR 4 functionStatic = 1 ASSIGN 5 functionStatic = 1 LVAL 6 functionStatic FIELD 7 functionStatic LEAF_NODE 8 functionStatic ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 functionSink ( data ) ; EXPR 4 functionSink ( data ) FUNCTION_CALL 5 functionSink ( data ) CALLEE 6 functionSink LEAF_NODE 7 functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } SIMPLE_DECL 1 int functionB2G1Static ; functionB2G1Static = 0 ; VAR_DECL 2 int functionB2G1Static ; functionB2G1Static = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 functionB2G1Static LEAF_NODE 4 functionB2G1Static LEAF_NODE 3 ; INIT 3 functionB2G1Static = 0 ASSIGN 4 functionB2G1Static = 0 LVAL 5 functionB2G1Static NAME 6 functionB2G1Static LEAF_NODE 7 functionB2G1Static ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; SIMPLE_DECL 1 int functionB2G2Static ; functionB2G2Static = 0 ; VAR_DECL 2 int functionB2G2Static ; functionB2G2Static = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 functionB2G2Static LEAF_NODE 4 functionB2G2Static LEAF_NODE 3 ; INIT 3 functionB2G2Static = 0 ASSIGN 4 functionB2G2Static = 0 LVAL 5 functionB2G2Static NAME 6 functionB2G2Static LEAF_NODE 7 functionB2G2Static ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1Sink LEAF_NODE 3 functionB2G1Sink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 functionB2G1Static EXPR 5 functionB2G1Static FIELD 6 functionB2G1Static LEAF_NODE 7 functionB2G1Static LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 printLine ( \"Benign, fixed string\" ) ; EXPR 7 printLine ( \"Benign, fixed string\" ) FUNCTION_CALL 8 printLine ( \"Benign, fixed string\" ) CALLEE 9 printLine LEAF_NODE 10 printLine LEAF_NODE 9 ( ARGUMENT 9 \"Benign, fixed string\" FIELD 10 \"Benign, fixed string\" LEAF_NODE 11 \"Benign, fixed string\" LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G1 LEAF_NODE 3 functionB2G1 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 functionB2G1Static = 0 ; EXPR 4 functionB2G1Static = 0 ASSIGN 5 functionB2G1Static = 0 LVAL 6 functionB2G1Static FIELD 7 functionB2G1Static LEAF_NODE 8 functionB2G1Static ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G1Sink ( data ) ; EXPR 4 functionB2G1Sink ( data ) FUNCTION_CALL 5 functionB2G1Sink ( data ) CALLEE 6 functionB2G1Sink LEAF_NODE 7 functionB2G1Sink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2Sink LEAF_NODE 3 functionB2G2Sink PARAMETER_LIST 2 ( char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * data TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 functionB2G2Static EXPR 5 functionB2G2Static FIELD 6 functionB2G2Static LEAF_NODE 7 functionB2G2Static LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 size_t i ; VAR_DECL 8 size_t i TYPE 9 size_t TYPE_NAME 10 size_t LEAF_NODE 11 size_t NAME 9 i LEAF_NODE 10 i LEAF_NODE 8 ; ITERATION 7 KEYWORD 8 for LEAF_NODE 9 for LEAF_NODE 8 ( FOR_INIT 8 i = 0 ; EXPR 9 i = 0 ASSIGN 10 i = 0 LVAL 11 i FIELD 12 i LEAF_NODE 13 i ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; CONDITION 8 i < strlen ( data ) EXPR 9 i < strlen ( data ) FIELD 10 i LEAF_NODE 11 i REL_OPERATOR 10 < LEAF_NODE 11 < FUNCTION_CALL 10 strlen ( data ) CALLEE 11 strlen LEAF_NODE 12 strlen LEAF_NODE 11 ( ARGUMENT 11 data FIELD 12 data LEAF_NODE 13 data LEAF_NODE 11 ) LEAF_NODE 8 ; FOR_EXPR 8 i ++ EXPR 9 i ++ FIELD 10 i ++ LEAF_NODE 11 i LEAF_NODE 11 ++ LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 data [ i ] == SEARCH_CHAR EXPR 12 data [ i ] == SEARCH_CHAR FIELD 13 data [ i ] LEAF_NODE 14 data LEAF_NODE 14 [ EXPR 14 i FIELD 15 i LEAF_NODE 16 i LEAF_NODE 14 ] EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 SEARCH_CHAR LEAF_NODE 14 SEARCH_CHAR LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"We have a match!\" ) ; EXPR 14 printLine ( \"We have a match!\" ) FUNCTION_CALL 15 printLine ( \"We have a match!\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"We have a match!\" FIELD 17 \"We have a match!\" LEAF_NODE 18 \"We have a match!\" LEAF_NODE 16 ) LEAF_NODE 14 ; JUMP_STATEMENT 13 break DESTINATION ; KEYWORD 14 break LEAF_NODE 15 break LEAF_NODE 14 DESTINATION LEAF_NODE 14 ; LEAF_NODE 12 } LEAF_NODE 9 } EXPR_STATEMENT 7 free ( data ) ; EXPR 8 free ( data ) FUNCTION_CALL 9 free ( data ) CALLEE 10 free LEAF_NODE 11 free LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 5 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G2 LEAF_NODE 3 functionB2G2 PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * data ; VAR_DECL 4 char * data TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; EXPR 4 data = ( char * ) malloc ( 100 * sizeof ( char ) ) ASSIGN 5 data = ( char * ) malloc ( 100 * sizeof ( char ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( char * ) malloc ( 100 * sizeof ( char ) ) LEAF_NODE 7 ( TYPE_NAME 7 char LEAF_NODE 8 char LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( char ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( char ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( char ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 char FIELD 11 char LEAF_NODE 12 char LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 data [ 0 ] = '\\0' ; EXPR 4 data [ 0 ] = '\\0' ASSIGN 5 data [ 0 ] = '\\0' LVAL 6 data [ 0 ] FIELD 7 data [ 0 ] LEAF_NODE 8 data LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = strlen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = strlen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = strlen ( data ) ASSIGN 7 dataLen = strlen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 strlen ( data ) FUNCTION_CALL 9 strlen ( data ) CALLEE 10 strlen LEAF_NODE 11 strlen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SIMPLE_DECL 4 FILE * pFile ; VAR_DECL 5 FILE * pFile TYPE 6 FILE * TYPE_NAME 7 FILE LEAF_NODE 8 FILE POINTER 7 * LEAF_NODE 8 * NAME 6 pFile LEAF_NODE 7 pFile LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 pFile = fopen ( FILENAME , \"r\" ) ; EXPR 8 pFile = fopen ( FILENAME , \"r\" ) ASSIGN 9 pFile = fopen ( FILENAME , \"r\" ) LVAL 10 pFile FIELD 11 pFile LEAF_NODE 12 pFile ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 fopen ( FILENAME , \"r\" ) FUNCTION_CALL 11 fopen ( FILENAME , \"r\" ) CALLEE 12 fopen LEAF_NODE 13 fopen LEAF_NODE 12 ( ARGUMENT 12 FILENAME FIELD 13 FILENAME LEAF_NODE 14 FILENAME LEAF_NODE 12 , ARGUMENT 12 \"r\" FIELD 13 \"r\" LEAF_NODE 14 \"r\" LEAF_NODE 12 ) LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 pFile != NULL EXPR 9 pFile != NULL FIELD 10 pFile LEAF_NODE 11 pFile EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 SELECTION 10 KEYWORD 11 if LEAF_NODE 12 if LEAF_NODE 11 ( CONDITION 11 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL EXPR 12 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL FUNCTION_CALL 13 fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) CALLEE 14 fgets LEAF_NODE 15 fgets LEAF_NODE 14 ( ARGUMENT 14 data + dataLen FIELD 15 data LEAF_NODE 16 data LEAF_NODE 15 + FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 14 , ARGUMENT 14 ( int ) ( 100 - dataLen ) LEAF_NODE 15 ( TYPE_NAME 15 int LEAF_NODE 16 int LEAF_NODE 15 ) LEAF_NODE 15 ( FIELD 15 100 LEAF_NODE 16 100 LEAF_NODE 15 - FIELD 15 dataLen LEAF_NODE 16 dataLen LEAF_NODE 15 ) LEAF_NODE 14 , ARGUMENT 14 pFile FIELD 15 pFile LEAF_NODE 16 pFile LEAF_NODE 14 ) EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 11 ) STATEMENTS 11 LEAF_NODE 12 { STATEMENTS 12 EXPR_STATEMENT 13 printLine ( \"fgets() failed\" ) ; EXPR 14 printLine ( \"fgets() failed\" ) FUNCTION_CALL 15 printLine ( \"fgets() failed\" ) CALLEE 16 printLine LEAF_NODE 17 printLine LEAF_NODE 16 ( ARGUMENT 16 \"fgets() failed\" FIELD 17 \"fgets() failed\" LEAF_NODE 18 \"fgets() failed\" LEAF_NODE 16 ) LEAF_NODE 14 ; EXPR_STATEMENT 13 data [ dataLen ] = '\\0' ; EXPR 14 data [ dataLen ] = '\\0' ASSIGN 15 data [ dataLen ] = '\\0' LVAL 16 data [ dataLen ] FIELD 17 data [ dataLen ] LEAF_NODE 18 data LEAF_NODE 18 [ EXPR 18 dataLen FIELD 19 dataLen LEAF_NODE 20 dataLen LEAF_NODE 18 ] ASSIGN_OP 16 = LEAF_NODE 17 = RVAL 16 '\\0' FIELD 17 '\\0' LEAF_NODE 18 '\\0' LEAF_NODE 14 ; LEAF_NODE 12 } EXPR_STATEMENT 10 fclose ( pFile ) ; EXPR 11 fclose ( pFile ) FUNCTION_CALL 12 fclose ( pFile ) CALLEE 13 fclose LEAF_NODE 14 fclose LEAF_NODE 13 ( ARGUMENT 13 pFile FIELD 14 pFile LEAF_NODE 15 pFile LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 functionB2G2Static = 1 ; EXPR 4 functionB2G2Static = 1 ASSIGN 5 functionB2G2Static = 1 LVAL 6 functionB2G2Static FIELD 7 functionB2G2Static LEAF_NODE 8 functionB2G2Static ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2Sink ( data ) ; EXPR 4 functionB2G2Sink ( data ) FUNCTION_CALL 5 functionB2G2Sink ( data ) CALLEE 6 functionB2G2Sink LEAF_NODE 7 functionB2G2Sink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_21_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_21_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G1 ( ) ; EXPR 4 functionB2G1 ( ) FUNCTION_CALL 5 functionB2G1 ( ) CALLEE 6 functionB2G1 LEAF_NODE 7 functionB2G1 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 functionB2G2 ( ) ; EXPR 4 functionB2G2 ( ) FUNCTION_CALL 5 functionB2G2 ( ) CALLEE 6 functionB2G2 LEAF_NODE 7 functionB2G2 LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_21_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_21_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_21_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_21_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_21_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_21_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_21_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_21_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_21_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_21_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 197, "project": "cwe399_ast_vul_function_test_adv_165", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54c_functionSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54c_functionSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54c_functionB2GSink LEAF_NODE 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54c_functionB2GSink PARAMETER_LIST 2 ( size_t data ) LEAF_NODE 3 ( PARAMETER_DECL 3 size_t data TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionB2GSink ( data ) ; EXPR 4 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionB2GSink ( data ) FUNCTION_CALL 5 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionB2GSink ( data ) CALLEE 6 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionB2GSink LEAF_NODE 7 CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_listen_socket_54d_functionB2GSink LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 198, "project": "cwe399_ast_vul_function_test_adv_16", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 printLine LEAF_NODE 3 printLine PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_18_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_18_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } JUMP_STATEMENT 3 goto sink ; KEYWORD 4 goto LEAF_NODE 5 goto DESTINATION 4 sink LEAF_NODE 5 sink LEAF_NODE 4 ; LABEL 3 sink : LEAF_NODE 4 sink LEAF_NODE 4 : LEAF_NODE 3 for LEAF_NODE 3 ( LEAF_NODE 3 ; LEAF_NODE 3 * LEAF_NODE 3 data LEAF_NODE 3 != LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 ++ LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 * data == SEARCH_CHAR EXPR 6 * data == SEARCH_CHAR UNARY_EXPR 7 * data UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data LEAF_NODE 9 data EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 SEARCH_CHAR LEAF_NODE 8 SEARCH_CHAR LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 printLine ( \"We have a match!\" ) ; EXPR 8 printLine ( \"We have a match!\" ) FUNCTION_CALL 9 printLine ( \"We have a match!\" ) CALLEE 10 printLine LEAF_NODE 11 printLine LEAF_NODE 10 ( ARGUMENT 10 \"We have a match!\" FIELD 11 \"We have a match!\" LEAF_NODE 12 \"We have a match!\" LEAF_NODE 10 ) LEAF_NODE 8 ; JUMP_STATEMENT 7 break DESTINATION ; KEYWORD 8 break LEAF_NODE 9 break LEAF_NODE 8 DESTINATION LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } EXPR_STATEMENT 3 free ( data ) ; EXPR 4 free ( data ) FUNCTION_CALL 5 free ( data ) CALLEE 6 free LEAF_NODE 7 free LEAF_NODE 6 ( ARGUMENT 6 data FIELD 7 data LEAF_NODE 8 data LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 functionB2G LEAF_NODE 3 functionB2G PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 wchar_t * data ; VAR_DECL 4 wchar_t * data TYPE 5 wchar_t * TYPE_NAME 6 wchar_t LEAF_NODE 7 wchar_t POINTER 6 * LEAF_NODE 7 * NAME 5 data LEAF_NODE 6 data LEAF_NODE 4 ; EXPR_STATEMENT 3 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; EXPR 4 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ASSIGN 5 data = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) LEAF_NODE 7 ( TYPE_NAME 7 wchar_t LEAF_NODE 8 wchar_t LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 malloc ( 100 * sizeof ( wchar_t ) ) CALLEE 8 malloc LEAF_NODE 9 malloc LEAF_NODE 8 ( ARGUMENT 8 100 * sizeof ( wchar_t ) FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 * FUNCTION_CALL 9 sizeof ( wchar_t ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 wchar_t FIELD 11 wchar_t LEAF_NODE 12 wchar_t LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 data LEAF_NODE 3 [ LEAF_NODE 3 0 LEAF_NODE 3 ] LEAF_NODE 3 = LEAF_NODE 3 L EXPR_STATEMENT 3 '\\0' ; EXPR 4 '\\0' FIELD 5 '\\0' LEAF_NODE 6 '\\0' LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t dataLen ; dataLen = wcslen ( data ) ; VAR_DECL 5 size_t dataLen ; dataLen = wcslen ( data ) TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 dataLen LEAF_NODE 7 dataLen LEAF_NODE 6 ; INIT 6 dataLen = wcslen ( data ) ASSIGN 7 dataLen = wcslen ( data ) LVAL 8 dataLen NAME 9 dataLen LEAF_NODE 10 dataLen ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 wcslen ( data ) FUNCTION_CALL 9 wcslen ( data ) CALLEE 10 wcslen LEAF_NODE 11 wcslen LEAF_NODE 10 ( ARGUMENT 10 data FIELD 11 data LEAF_NODE 12 data LEAF_NODE 10 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 100 - dataLen > 1 EXPR 6 100 - dataLen > 1 FIELD 7 100 LEAF_NODE 8 100 LEAF_NODE 7 - FIELD 7 dataLen LEAF_NODE 8 dataLen REL_OPERATOR 7 > LEAF_NODE 8 > FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SIMPLE_DECL 7 int stdin ; VAR_DECL 8 int stdin TYPE 9 int TYPE_NAME 10 int LEAF_NODE 11 int NAME 9 stdin LEAF_NODE 10 stdin LEAF_NODE 8 ; SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL EXPR 9 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL FUNCTION_CALL 10 fgetws ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) CALLEE 11 fgetws LEAF_NODE 12 fgetws LEAF_NODE 11 ( ARGUMENT 11 data + dataLen FIELD 12 data LEAF_NODE 13 data LEAF_NODE 12 + FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 11 , ARGUMENT 11 ( int ) ( 100 - dataLen ) LEAF_NODE 12 ( TYPE_NAME 12 int LEAF_NODE 13 int LEAF_NODE 12 ) LEAF_NODE 12 ( FIELD 12 100 LEAF_NODE 13 100 LEAF_NODE 12 - FIELD 12 dataLen LEAF_NODE 13 dataLen LEAF_NODE 12 ) LEAF_NODE 11 , ARGUMENT 11 stdin FIELD 12 stdin LEAF_NODE 13 stdin LEAF_NODE 11 ) EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 dataLen = wcslen ( data ) ; EXPR 11 dataLen = wcslen ( data ) ASSIGN 12 dataLen = wcslen ( data ) LVAL 13 dataLen FIELD 14 dataLen LEAF_NODE 15 dataLen ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 wcslen ( data ) FUNCTION_CALL 14 wcslen ( data ) CALLEE 15 wcslen LEAF_NODE 16 wcslen LEAF_NODE 15 ( ARGUMENT 15 data FIELD 16 data LEAF_NODE 17 data LEAF_NODE 15 ) LEAF_NODE 11 ; LEAF_NODE 10 if LEAF_NODE 10 ( LEAF_NODE 10 dataLen LEAF_NODE 10 > LEAF_NODE 10 0 LEAF_NODE 10 && LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 - LEAF_NODE 10 1 LEAF_NODE 10 ] LEAF_NODE 10 == LEAF_NODE 10 L LEAF_NODE 10 '\\n' LEAF_NODE 10 ) LEAF_NODE 10 { STATEMENTS 10 LEAF_NODE 11 data LEAF_NODE 11 [ LEAF_NODE 11 dataLen LEAF_NODE 11 - LEAF_NODE 11 1 LEAF_NODE 11 ] LEAF_NODE 11 = LEAF_NODE 11 L EXPR_STATEMENT 11 '\\0' ; EXPR 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 9 } SELECTION 7 KEYWORD 8 else LEAF_NODE 9 else STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"fgetws() failed\" ) ; EXPR 11 printLine ( \"fgetws() failed\" ) FUNCTION_CALL 12 printLine ( \"fgetws() failed\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"fgetws() failed\" FIELD 14 \"fgetws() failed\" LEAF_NODE 15 \"fgetws() failed\" LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 10 data LEAF_NODE 10 [ LEAF_NODE 10 dataLen LEAF_NODE 10 ] LEAF_NODE 10 = LEAF_NODE 10 L EXPR_STATEMENT 10 '\\0' ; EXPR 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } LEAF_NODE 3 } JUMP_STATEMENT 3 goto sink ; KEYWORD 4 goto LEAF_NODE 5 goto DESTINATION 4 sink LEAF_NODE 5 sink LEAF_NODE 4 ; LABEL 3 sink : LEAF_NODE 4 sink LEAF_NODE 4 : LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 size_t i ; VAR_DECL 5 size_t i TYPE 6 size_t TYPE_NAME 7 size_t LEAF_NODE 8 size_t NAME 6 i LEAF_NODE 7 i LEAF_NODE 5 ; ITERATION 4 KEYWORD 5 for LEAF_NODE 6 for LEAF_NODE 5 ( FOR_INIT 5 i = 0 ; EXPR 6 i = 0 ASSIGN 7 i = 0 LVAL 8 i FIELD 9 i LEAF_NODE 10 i ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; CONDITION 5 i < wcslen ( data ) EXPR 6 i < wcslen ( data ) FIELD 7 i LEAF_NODE 8 i REL_OPERATOR 7 < LEAF_NODE 8 < FUNCTION_CALL 7 wcslen ( data ) CALLEE 8 wcslen LEAF_NODE 9 wcslen LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 5 ; FOR_EXPR 5 i ++ EXPR 6 i ++ FIELD 7 i ++ LEAF_NODE 8 i LEAF_NODE 8 ++ LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 data [ i ] == SEARCH_CHAR EXPR 9 data [ i ] == SEARCH_CHAR FIELD 10 data [ i ] LEAF_NODE 11 data LEAF_NODE 11 [ EXPR 11 i FIELD 12 i LEAF_NODE 13 i LEAF_NODE 11 ] EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 SEARCH_CHAR LEAF_NODE 11 SEARCH_CHAR LEAF_NODE 8 ) STATEMENTS 8 LEAF_NODE 9 { STATEMENTS 9 EXPR_STATEMENT 10 printLine ( \"We have a match!\" ) ; EXPR 11 printLine ( \"We have a match!\" ) FUNCTION_CALL 12 printLine ( \"We have a match!\" ) CALLEE 13 printLine LEAF_NODE 14 printLine LEAF_NODE 13 ( ARGUMENT 13 \"We have a match!\" FIELD 14 \"We have a match!\" LEAF_NODE 15 \"We have a match!\" LEAF_NODE 13 ) LEAF_NODE 11 ; JUMP_STATEMENT 10 break DESTINATION ; KEYWORD 11 break LEAF_NODE 12 break LEAF_NODE 11 DESTINATION LEAF_NODE 11 ; LEAF_NODE 9 } LEAF_NODE 6 } EXPR_STATEMENT 4 free ( data ) ; EXPR 5 free ( data ) FUNCTION_CALL 6 free ( data ) CALLEE 7 free LEAF_NODE 8 free LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_18_function LEAF_NODE 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_18_function PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 functionB2G ( ) ; EXPR 4 functionB2G ( ) FUNCTION_CALL 5 functionB2G ( ) CALLEE 6 functionB2G LEAF_NODE 7 functionB2G LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( int argc , char * [ ] argv ) LEAF_NODE 3 ( PARAMETER_DECL 3 int argc TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 argc LEAF_NODE 5 argc LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] argv TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 argv LEAF_NODE 5 argv LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 srand LEAF_NODE 3 ( LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 ) LEAF_NODE 3 time LEAF_NODE 3 ( LEAF_NODE 3 NULL LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_18_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_18_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_18_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_18_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_18_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Calling function()...\" ) ; EXPR 4 printLine ( \"Calling function()...\" ) FUNCTION_CALL 5 printLine ( \"Calling function()...\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Calling function()...\" FIELD 7 \"Calling function()...\" LEAF_NODE 8 \"Calling function()...\" LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_18_function ( ) ; EXPR 4 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_18_function ( ) FUNCTION_CALL 5 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_18_function ( ) CALLEE 6 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_18_function LEAF_NODE 7 CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_console_18_function LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 printLine ( \"Finished function()\" ) ; EXPR 4 printLine ( \"Finished function()\" ) FUNCTION_CALL 5 printLine ( \"Finished function()\" ) CALLEE 6 printLine LEAF_NODE 7 printLine LEAF_NODE 6 ( ARGUMENT 6 \"Finished function()\" FIELD 7 \"Finished function()\" LEAF_NODE 8 \"Finished function()\" LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 199, "project": "cwe399_ast_vul_function_test_adv_163", "target": 1}
